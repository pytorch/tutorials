Search.setIndex({"docnames": ["advanced/ONNXLive", "advanced/coding_ddpg", "advanced/cpp_autograd", "advanced/cpp_cuda_graphs", "advanced/cpp_custom_ops", "advanced/cpp_custom_ops_sycl", "advanced/cpp_export", "advanced/cpp_extension", "advanced/cpp_frontend", "advanced/custom_class_pt2", "advanced/custom_ops_landing_page", "advanced/ddp_pipeline", "advanced/dispatcher", "advanced/extend_dispatcher", "advanced/generic_join", "advanced/neural_style_tutorial", "advanced/numpy_extensions_tutorial", "advanced/pendulum", "advanced/privateuseone", "advanced/python_custom_ops", "advanced/rpc_ddp_tutorial", "advanced/semi_structured_sparse", "advanced/sg_execution_times", "advanced/sharding", "advanced/static_quantization_tutorial", "advanced/torch-script-parallelism", "advanced/torch_script_custom_classes", "advanced/torch_script_custom_ops", "advanced/usb_semisup_learn", "beginner/audio_data_augmentation_tutorial", "beginner/audio_datasets_tutorial", "beginner/audio_feature_augmentation_tutorial", "beginner/audio_feature_extractions_tutorial", "beginner/audio_io_tutorial", "beginner/audio_resampling_tutorial", "beginner/basics/autogradqs_tutorial", "beginner/basics/buildmodel_tutorial", "beginner/basics/data_tutorial", "beginner/basics/index", "beginner/basics/intro", "beginner/basics/optimization_tutorial", "beginner/basics/quickstart_tutorial", "beginner/basics/saveloadrun_tutorial", "beginner/basics/sg_execution_times", "beginner/basics/tensorqs_tutorial", "beginner/basics/transforms_tutorial", "beginner/bettertransformer_tutorial", "beginner/blitz/autograd_tutorial", "beginner/blitz/cifar10_tutorial", "beginner/blitz/data_parallel_tutorial", "beginner/blitz/index", "beginner/blitz/neural_networks_tutorial", "beginner/blitz/sg_execution_times", "beginner/blitz/tensor_tutorial", "beginner/chatbot_tutorial", "beginner/colab", "beginner/data_loading_tutorial", "beginner/dcgan_faces_tutorial", "beginner/ddp_series_fault_tolerance", "beginner/ddp_series_intro", "beginner/ddp_series_multigpu", "beginner/ddp_series_theory", "beginner/deep_learning_60min_blitz", "beginner/deeplabv3_on_android", "beginner/deeplabv3_on_ios", "beginner/dist_overview", "beginner/examples_autograd/index", "beginner/examples_autograd/polynomial_autograd", "beginner/examples_autograd/polynomial_custom_function", "beginner/examples_autograd/sg_execution_times", "beginner/examples_nn/dynamic_net", "beginner/examples_nn/index", "beginner/examples_nn/polynomial_module", "beginner/examples_nn/polynomial_nn", "beginner/examples_nn/polynomial_optim", "beginner/examples_nn/sg_execution_times", "beginner/examples_tensor/index", "beginner/examples_tensor/polynomial_numpy", "beginner/examples_tensor/polynomial_tensor", "beginner/examples_tensor/sg_execution_times", "beginner/fgsm_tutorial", "beginner/finetuning_torchvision_models_tutorial", "beginner/former_torchies/autograd_tutorial_old", "beginner/former_torchies/nnft_tutorial", "beginner/former_torchies/parallelism_tutorial", "beginner/former_torchies/tensor_tutorial_old", "beginner/former_torchies_tutorial", "beginner/hta_intro_tutorial", "beginner/hta_trace_diff_tutorial", "beginner/hybrid_frontend/index", "beginner/hybrid_frontend/learning_hybrid_frontend_through_example_tutorial", "beginner/hybrid_frontend/sg_execution_times", "beginner/hybrid_frontend_tutorial", "beginner/hyperparameter_tuning_tutorial", "beginner/introyt", "beginner/introyt/autogradyt_tutorial", "beginner/introyt/captumyt", "beginner/introyt/index", "beginner/introyt/introyt1_tutorial", "beginner/introyt/introyt_index", "beginner/introyt/modelsyt_tutorial", "beginner/introyt/sg_execution_times", "beginner/introyt/tensorboardyt_tutorial", "beginner/introyt/tensors_deeper_tutorial", "beginner/introyt/trainingyt", "beginner/knowledge_distillation_tutorial", "beginner/nlp/advanced_tutorial", "beginner/nlp/deep_learning_tutorial", "beginner/nlp/index", "beginner/nlp/pytorch_tutorial", "beginner/nlp/sequence_models_tutorial", "beginner/nlp/sg_execution_times", "beginner/nlp/word_embeddings_tutorial", "beginner/nn_tutorial", "beginner/onnx/export_control_flow_model_to_onnx_tutorial", "beginner/onnx/export_simple_model_to_onnx_tutorial", "beginner/onnx/index", "beginner/onnx/intro_onnx", "beginner/onnx/onnx_registry_tutorial", "beginner/onnx/sg_execution_times", "beginner/profiler", "beginner/pytorch_with_examples", "beginner/saving_loading_models", "beginner/sg_execution_times", "beginner/t5_tutoria", "beginner/template_tutorial", "beginner/text_sentiment_ngrams_tutorial", "beginner/torchtext_custom_dataset_tutorial", "beginner/transfer_learning_tutorial", "beginner/transformer_tutorial", "beginner/translation_transformer", "compilers_index", "deep-dive", "distributed", "domains", "ecosystem", "extension", "index", "intermediate/FSDP1_tutorial", "intermediate/FSDP_advanced_tutorial", "intermediate/FSDP_tutorial", "intermediate/TCPStore_libuv_backend", "intermediate/TP_tutorial", "intermediate/autograd_saved_tensors_hooks_tutorial", "intermediate/ax_multiobjective_nas_tutorial", "intermediate/char_rnn_classification_tutorial", "intermediate/char_rnn_generation_tutorial", "intermediate/compiled_autograd_tutorial", "intermediate/custom_function_conv_bn_tutorial", "intermediate/custom_function_double_backward_tutorial", "intermediate/ddp_series_minGPT", "intermediate/ddp_series_multinode", "intermediate/ddp_tutorial", "intermediate/dist_pipeline_parallel_tutorial", "intermediate/dist_tuto", "intermediate/dqn_with_rnn_tutorial", "intermediate/ensembling", "intermediate/forced_alignment_with_torchaudio_tutorial", "intermediate/forward_ad_usage", "intermediate/fx_profiling_tutorial", "intermediate/inductor_debug_cpu", "intermediate/jacobians_hessians", "intermediate/mario_rl_tutorial", "intermediate/memory_format_tutorial", "intermediate/mnist_train_nas", "intermediate/model_parallel_tutorial", "intermediate/neural_tangent_kernels", "intermediate/nlp_from_scratch_index", "intermediate/nvfuser_intro_tutorial", "intermediate/optimizer_step_in_backward_tutorial", "intermediate/parametrizations", "intermediate/per_sample_grads", "intermediate/pinmem_nonblock", "intermediate/pipeline_tutorial", "intermediate/pipelining_tutorial", "intermediate/process_group_cpp_extension_tutorial", "intermediate/pruning_tutorial", "intermediate/realtime_rpi", "intermediate/reinforcement_ppo", "intermediate/reinforcement_q_learning", "intermediate/rpc_async_execution", "intermediate/rpc_param_server_tutorial", "intermediate/rpc_tutorial", "intermediate/scaled_dot_product_attention_tutorial", "intermediate/seq2seq_translation_tutorial", "intermediate/sg_execution_times", "intermediate/spatial_transformer_tutorial", "intermediate/speech_recognition_pipeline_tutorial", "intermediate/tensorboard_profiler_tutorial", "intermediate/tensorboard_tutorial", "intermediate/text_to_speech_with_torchaudio", "intermediate/tiatoolbox_tutorial", "intermediate/torch_compile_conv_bn_fuser", "intermediate/torch_compile_tutorial", "intermediate/torch_export_nightly_tutorial", "intermediate/torch_export_tutorial", "intermediate/torchrec_intro_tutorial", "intermediate/torchrec_tutorial", "intermediate/torchvision_tutorial", "intermediate/transformer_building_blocks", "intermediate/visualizing_gradients_tutorial", "intro", "recipes/amx", "recipes/android_native_app_with_custom_op", "recipes/compiling_optimizer", "recipes/compiling_optimizer_lr_scheduler", "recipes/cuda_rpc", "recipes/distributed_async_checkpoint_recipe", "recipes/distributed_checkpoint_recipe", "recipes/distributed_comm_debug_mode", "recipes/distributed_device_mesh", "recipes/distributed_optim_torchscript", "recipes/distributed_rpc_profiling", "recipes/foreach_map", "recipes/inference_tuning_on_aws_graviton", "recipes/intel_extension_for_pytorch", "recipes/intel_neural_compressor_for_pytorch", "recipes/loading_data_recipe", "recipes/mobile_interpreter", "recipes/mobile_perf", "recipes/model_preparation_android", "recipes/model_preparation_ios", "recipes/profile_with_itt", "recipes/ptmobile_recipes_summary", "recipes/recipes/Captum_Recipe", "recipes/recipes/amp_recipe", "recipes/recipes/benchmark", "recipes/recipes/changing_default_device", "recipes/recipes/defining_a_neural_network", "recipes/recipes/index", "recipes/recipes/module_load_state_dict_tips", "recipes/recipes/profiler_recipe", "recipes/recipes/reasoning_about_shapes", "recipes/recipes/save_load_across_devices", "recipes/recipes/saving_and_loading_a_general_checkpoint", "recipes/recipes/saving_and_loading_models_for_inference", "recipes/recipes/saving_multiple_models_in_one_file", "recipes/recipes/sg_execution_times", "recipes/recipes/swap_tensors", "recipes/recipes/tensorboard_with_pytorch", "recipes/recipes/timer_quick_start", "recipes/recipes/tuning_guide", "recipes/recipes/warmstarting_model_using_parameters_from_a_different_model", "recipes/recipes/what_is_state_dict", "recipes/recipes/zeroing_out_gradients", "recipes/regional_compilation", "recipes/script_optimized", "recipes/sg_execution_times", "recipes/torch_compile_backend_ipex", "recipes/torch_compile_caching_configuration_tutorial", "recipes/torch_compile_caching_tutorial", "recipes/torch_compile_torch_function_modes", "recipes/torch_compile_user_defined_triton_kernel_tutorial", "recipes/torch_compiler_set_stance_tutorial", "recipes/torch_export_aoti_python", "recipes/torch_export_challenges_solutions", "recipes/torch_logs", "recipes/torchscript_inference", "recipes/xeon_run_cpu", "recipes/zero_redundancy_optimizer", "recipes_index", "sg_execution_times", "unstable/backend_config_tutorial", "unstable/context_parallel", "unstable/distributed_rpc_profiling", "unstable/flight_recorder_tutorial", "unstable/gpu_direct_storage", "unstable/gpu_quantization_torchao_tutorial", "unstable/inductor_cpp_wrapper_tutorial", "unstable/inductor_windows", "unstable/inductor_windows_cpu", "unstable/ios_coreml_workflow", "unstable/ios_gpu_workflow", "unstable/lite_interpreter", "unstable/maskedtensor_adagrad", "unstable/maskedtensor_advanced_semantics", "unstable/maskedtensor_overview", "unstable/maskedtensor_sparsity", "unstable/max_autotune_on_CPU_tutorial", "unstable/nestedtensor", "unstable/nnapi_mobilenetv2", "unstable/openvino_quantizer", "unstable/python_extension_autoload", "unstable/semi_structured_sparse", "unstable/sg_execution_times", "unstable/skip_param_init", "unstable/tracing_based_selective_build", "unstable/vmap_recipe", "unstable/vulkan_workflow", "unstable_index"], "filenames": ["advanced/ONNXLive.rst", "advanced/coding_ddpg.rst", "advanced/cpp_autograd.rst", "advanced/cpp_cuda_graphs.rst", "advanced/cpp_custom_ops.rst", "advanced/cpp_custom_ops_sycl.rst", "advanced/cpp_export.rst", "advanced/cpp_extension.rst", "advanced/cpp_frontend.rst", "advanced/custom_class_pt2.rst", "advanced/custom_ops_landing_page.rst", "advanced/ddp_pipeline.rst", "advanced/dispatcher.rst", "advanced/extend_dispatcher.rst", "advanced/generic_join.rst", "advanced/neural_style_tutorial.rst", "advanced/numpy_extensions_tutorial.rst", "advanced/pendulum.rst", "advanced/privateuseone.rst", "advanced/python_custom_ops.rst", "advanced/rpc_ddp_tutorial.rst", "advanced/semi_structured_sparse.rst", "advanced/sg_execution_times.rst", "advanced/sharding.rst", "advanced/static_quantization_tutorial.rst", "advanced/torch-script-parallelism.rst", "advanced/torch_script_custom_classes.rst", "advanced/torch_script_custom_ops.rst", "advanced/usb_semisup_learn.rst", "beginner/audio_data_augmentation_tutorial.rst", "beginner/audio_datasets_tutorial.rst", "beginner/audio_feature_augmentation_tutorial.rst", "beginner/audio_feature_extractions_tutorial.rst", "beginner/audio_io_tutorial.rst", "beginner/audio_resampling_tutorial.rst", "beginner/basics/autogradqs_tutorial.rst", "beginner/basics/buildmodel_tutorial.rst", "beginner/basics/data_tutorial.rst", "beginner/basics/index.rst", "beginner/basics/intro.rst", "beginner/basics/optimization_tutorial.rst", "beginner/basics/quickstart_tutorial.rst", "beginner/basics/saveloadrun_tutorial.rst", "beginner/basics/sg_execution_times.rst", "beginner/basics/tensorqs_tutorial.rst", "beginner/basics/transforms_tutorial.rst", "beginner/bettertransformer_tutorial.rst", "beginner/blitz/autograd_tutorial.rst", "beginner/blitz/cifar10_tutorial.rst", "beginner/blitz/data_parallel_tutorial.rst", "beginner/blitz/index.rst", "beginner/blitz/neural_networks_tutorial.rst", "beginner/blitz/sg_execution_times.rst", "beginner/blitz/tensor_tutorial.rst", "beginner/chatbot_tutorial.rst", "beginner/colab.rst", "beginner/data_loading_tutorial.rst", "beginner/dcgan_faces_tutorial.rst", "beginner/ddp_series_fault_tolerance.rst", "beginner/ddp_series_intro.rst", "beginner/ddp_series_multigpu.rst", "beginner/ddp_series_theory.rst", "beginner/deep_learning_60min_blitz.rst", "beginner/deeplabv3_on_android.rst", "beginner/deeplabv3_on_ios.rst", "beginner/dist_overview.rst", "beginner/examples_autograd/index.rst", "beginner/examples_autograd/polynomial_autograd.rst", "beginner/examples_autograd/polynomial_custom_function.rst", "beginner/examples_autograd/sg_execution_times.rst", "beginner/examples_nn/dynamic_net.rst", "beginner/examples_nn/index.rst", "beginner/examples_nn/polynomial_module.rst", "beginner/examples_nn/polynomial_nn.rst", "beginner/examples_nn/polynomial_optim.rst", "beginner/examples_nn/sg_execution_times.rst", "beginner/examples_tensor/index.rst", "beginner/examples_tensor/polynomial_numpy.rst", "beginner/examples_tensor/polynomial_tensor.rst", "beginner/examples_tensor/sg_execution_times.rst", "beginner/fgsm_tutorial.rst", "beginner/finetuning_torchvision_models_tutorial.rst", "beginner/former_torchies/autograd_tutorial_old.rst", "beginner/former_torchies/nnft_tutorial.rst", "beginner/former_torchies/parallelism_tutorial.rst", "beginner/former_torchies/tensor_tutorial_old.rst", "beginner/former_torchies_tutorial.rst", "beginner/hta_intro_tutorial.rst", "beginner/hta_trace_diff_tutorial.rst", "beginner/hybrid_frontend/index.rst", "beginner/hybrid_frontend/learning_hybrid_frontend_through_example_tutorial.rst", "beginner/hybrid_frontend/sg_execution_times.rst", "beginner/hybrid_frontend_tutorial.rst", "beginner/hyperparameter_tuning_tutorial.rst", "beginner/introyt.rst", "beginner/introyt/autogradyt_tutorial.rst", "beginner/introyt/captumyt.rst", "beginner/introyt/index.rst", "beginner/introyt/introyt1_tutorial.rst", "beginner/introyt/introyt_index.rst", "beginner/introyt/modelsyt_tutorial.rst", "beginner/introyt/sg_execution_times.rst", "beginner/introyt/tensorboardyt_tutorial.rst", "beginner/introyt/tensors_deeper_tutorial.rst", "beginner/introyt/trainingyt.rst", "beginner/knowledge_distillation_tutorial.rst", "beginner/nlp/advanced_tutorial.rst", "beginner/nlp/deep_learning_tutorial.rst", "beginner/nlp/index.rst", "beginner/nlp/pytorch_tutorial.rst", "beginner/nlp/sequence_models_tutorial.rst", "beginner/nlp/sg_execution_times.rst", "beginner/nlp/word_embeddings_tutorial.rst", "beginner/nn_tutorial.rst", "beginner/onnx/export_control_flow_model_to_onnx_tutorial.rst", "beginner/onnx/export_simple_model_to_onnx_tutorial.rst", "beginner/onnx/index.rst", "beginner/onnx/intro_onnx.rst", "beginner/onnx/onnx_registry_tutorial.rst", "beginner/onnx/sg_execution_times.rst", "beginner/profiler.rst", "beginner/pytorch_with_examples.rst", "beginner/saving_loading_models.rst", "beginner/sg_execution_times.rst", "beginner/t5_tutoria.rst", "beginner/template_tutorial.rst", "beginner/text_sentiment_ngrams_tutorial.rst", "beginner/torchtext_custom_dataset_tutorial.rst", "beginner/transfer_learning_tutorial.rst", "beginner/transformer_tutorial.rst", "beginner/translation_transformer.rst", "compilers_index.rst", "deep-dive.rst", "distributed.rst", "domains.rst", "ecosystem.rst", "extension.rst", "index.rst", "intermediate/FSDP1_tutorial.rst", "intermediate/FSDP_advanced_tutorial.rst", "intermediate/FSDP_tutorial.rst", "intermediate/TCPStore_libuv_backend.rst", "intermediate/TP_tutorial.rst", "intermediate/autograd_saved_tensors_hooks_tutorial.rst", "intermediate/ax_multiobjective_nas_tutorial.rst", "intermediate/char_rnn_classification_tutorial.rst", "intermediate/char_rnn_generation_tutorial.rst", "intermediate/compiled_autograd_tutorial.rst", "intermediate/custom_function_conv_bn_tutorial.rst", "intermediate/custom_function_double_backward_tutorial.rst", "intermediate/ddp_series_minGPT.rst", "intermediate/ddp_series_multinode.rst", "intermediate/ddp_tutorial.rst", "intermediate/dist_pipeline_parallel_tutorial.rst", "intermediate/dist_tuto.rst", "intermediate/dqn_with_rnn_tutorial.rst", "intermediate/ensembling.rst", "intermediate/forced_alignment_with_torchaudio_tutorial.rst", "intermediate/forward_ad_usage.rst", "intermediate/fx_profiling_tutorial.rst", "intermediate/inductor_debug_cpu.rst", "intermediate/jacobians_hessians.rst", "intermediate/mario_rl_tutorial.rst", "intermediate/memory_format_tutorial.rst", "intermediate/mnist_train_nas.rst", "intermediate/model_parallel_tutorial.rst", "intermediate/neural_tangent_kernels.rst", "intermediate/nlp_from_scratch_index.rst", "intermediate/nvfuser_intro_tutorial.rst", "intermediate/optimizer_step_in_backward_tutorial.rst", "intermediate/parametrizations.rst", "intermediate/per_sample_grads.rst", "intermediate/pinmem_nonblock.rst", "intermediate/pipeline_tutorial.rst", "intermediate/pipelining_tutorial.rst", "intermediate/process_group_cpp_extension_tutorial.rst", "intermediate/pruning_tutorial.rst", "intermediate/realtime_rpi.rst", "intermediate/reinforcement_ppo.rst", "intermediate/reinforcement_q_learning.rst", "intermediate/rpc_async_execution.rst", "intermediate/rpc_param_server_tutorial.rst", "intermediate/rpc_tutorial.rst", "intermediate/scaled_dot_product_attention_tutorial.rst", "intermediate/seq2seq_translation_tutorial.rst", "intermediate/sg_execution_times.rst", "intermediate/spatial_transformer_tutorial.rst", "intermediate/speech_recognition_pipeline_tutorial.rst", "intermediate/tensorboard_profiler_tutorial.rst", "intermediate/tensorboard_tutorial.rst", "intermediate/text_to_speech_with_torchaudio.rst", "intermediate/tiatoolbox_tutorial.rst", "intermediate/torch_compile_conv_bn_fuser.rst", "intermediate/torch_compile_tutorial.rst", "intermediate/torch_export_nightly_tutorial.rst", "intermediate/torch_export_tutorial.rst", "intermediate/torchrec_intro_tutorial.rst", "intermediate/torchrec_tutorial.rst", "intermediate/torchvision_tutorial.rst", "intermediate/transformer_building_blocks.rst", "intermediate/visualizing_gradients_tutorial.rst", "intro.rst", "recipes/amx.rst", "recipes/android_native_app_with_custom_op.rst", "recipes/compiling_optimizer.rst", "recipes/compiling_optimizer_lr_scheduler.rst", "recipes/cuda_rpc.rst", "recipes/distributed_async_checkpoint_recipe.rst", "recipes/distributed_checkpoint_recipe.rst", "recipes/distributed_comm_debug_mode.rst", "recipes/distributed_device_mesh.rst", "recipes/distributed_optim_torchscript.rst", "recipes/distributed_rpc_profiling.rst", "recipes/foreach_map.rst", "recipes/inference_tuning_on_aws_graviton.rst", "recipes/intel_extension_for_pytorch.rst", "recipes/intel_neural_compressor_for_pytorch.rst", "recipes/loading_data_recipe.rst", "recipes/mobile_interpreter.rst", "recipes/mobile_perf.rst", "recipes/model_preparation_android.rst", "recipes/model_preparation_ios.rst", "recipes/profile_with_itt.rst", "recipes/ptmobile_recipes_summary.rst", "recipes/recipes/Captum_Recipe.rst", "recipes/recipes/amp_recipe.rst", "recipes/recipes/benchmark.rst", "recipes/recipes/changing_default_device.rst", "recipes/recipes/defining_a_neural_network.rst", "recipes/recipes/index.rst", "recipes/recipes/module_load_state_dict_tips.rst", "recipes/recipes/profiler_recipe.rst", "recipes/recipes/reasoning_about_shapes.rst", "recipes/recipes/save_load_across_devices.rst", "recipes/recipes/saving_and_loading_a_general_checkpoint.rst", "recipes/recipes/saving_and_loading_models_for_inference.rst", "recipes/recipes/saving_multiple_models_in_one_file.rst", "recipes/recipes/sg_execution_times.rst", "recipes/recipes/swap_tensors.rst", "recipes/recipes/tensorboard_with_pytorch.rst", "recipes/recipes/timer_quick_start.rst", "recipes/recipes/tuning_guide.rst", "recipes/recipes/warmstarting_model_using_parameters_from_a_different_model.rst", "recipes/recipes/what_is_state_dict.rst", "recipes/recipes/zeroing_out_gradients.rst", "recipes/regional_compilation.rst", "recipes/script_optimized.rst", "recipes/sg_execution_times.rst", "recipes/torch_compile_backend_ipex.rst", "recipes/torch_compile_caching_configuration_tutorial.rst", "recipes/torch_compile_caching_tutorial.rst", "recipes/torch_compile_torch_function_modes.rst", "recipes/torch_compile_user_defined_triton_kernel_tutorial.rst", "recipes/torch_compiler_set_stance_tutorial.rst", "recipes/torch_export_aoti_python.rst", "recipes/torch_export_challenges_solutions.rst", "recipes/torch_logs.rst", "recipes/torchscript_inference.rst", "recipes/xeon_run_cpu.rst", "recipes/zero_redundancy_optimizer.rst", "recipes_index.rst", "sg_execution_times.rst", "unstable/backend_config_tutorial.rst", "unstable/context_parallel.rst", "unstable/distributed_rpc_profiling.rst", "unstable/flight_recorder_tutorial.rst", "unstable/gpu_direct_storage.rst", "unstable/gpu_quantization_torchao_tutorial.rst", "unstable/inductor_cpp_wrapper_tutorial.rst", "unstable/inductor_windows.rst", "unstable/inductor_windows_cpu.rst", "unstable/ios_coreml_workflow.rst", "unstable/ios_gpu_workflow.rst", "unstable/lite_interpreter.rst", "unstable/maskedtensor_adagrad.rst", "unstable/maskedtensor_advanced_semantics.rst", "unstable/maskedtensor_overview.rst", "unstable/maskedtensor_sparsity.rst", "unstable/max_autotune_on_CPU_tutorial.rst", "unstable/nestedtensor.rst", "unstable/nnapi_mobilenetv2.rst", "unstable/openvino_quantizer.rst", "unstable/python_extension_autoload.rst", "unstable/semi_structured_sparse.rst", "unstable/sg_execution_times.rst", "unstable/skip_param_init.rst", "unstable/tracing_based_selective_build.rst", "unstable/vmap_recipe.rst", "unstable/vulkan_workflow.rst", "unstable_index.rst"], "titles": ["ONNX Live Tutorial", "TorchRL objectives: Coding a DDPG loss", "Autograd in C++ Frontend", "Using CUDA Graphs in PyTorch C++ API", "Custom C++ and CUDA Operators", "Custom SYCL Operators", "&lt;no title&gt;", "Custom C++ and CUDA Extensions", "Using the PyTorch C++ Frontend", "Supporting Custom C++ Classes in torch.compile/torch.export", "PyTorch Custom Operators", "Training Transformer models using Distributed Data Parallel and Pipeline Parallelism", "Registering a Dispatched Operator in C++", "Extending dispatcher for a new backend in C++", "Distributed Training with Uneven Inputs Using the Join Context Manager", "Neural Transfer Using PyTorch", "Creating Extensions Using NumPy and SciPy", "Pendulum: Writing your environment and transforms with TorchRL", "Facilitating New Backend Integration by PrivateUse1", "Custom Python Operators", "Combining Distributed DataParallel with Distributed RPC Framework", "(beta) Accelerating BERT with semi-structured (2:4) sparsity", "Computation times", "Exploring TorchRec sharding", "(beta) Static Quantization with Eager Mode in PyTorch", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Semi-Supervised Learning using USB built upon PyTorch", "Audio Data Augmentation", "Audio Datasets", "Audio Feature Augmentation", "Audio Feature Extractions", "Audio I/O", "Audio Resampling", "Automatic Differentiation with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.autograd</span></code>", "Build the Neural Network", "Datasets &amp; DataLoaders", "Learn the Basics", "Learn the Basics", "Optimizing Model Parameters", "Quickstart", "Save and Load the Model", "Computation times", "Tensors", "Transforms", "Fast Transformer Inference with Better Transformer", "A Gentle Introduction to <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.autograd</span></code>", "Training a Classifier", "Optional: Data Parallelism", "Deep Learning with PyTorch: A 60 Minute Blitz", "Neural Networks", "Computation times", "Tensors", "Chatbot Tutorial", "Running Tutorials in Google Colab", "Writing Custom Datasets, DataLoaders and Transforms", "DCGAN Tutorial", "Fault-tolerant Distributed Training with <code class=\"docutils literal notranslate\"><span class=\"pre\">torchrun</span></code>", "Distributed Data Parallel in PyTorch - Video Tutorials", "Multi GPU training with DDP", "What is Distributed Data Parallel (DDP)", "Deep Learning with PyTorch: A 60 Minute Blitz", "Image Segmentation DeepLabV3 on Android", "Image Segmentation DeepLabV3 on iOS", "PyTorch Distributed Overview", "&lt;no title&gt;", "PyTorch: Tensors and autograd", "PyTorch: Defining New autograd Functions", "Computation times", "PyTorch: Control Flow + Weight Sharing", "&lt;no title&gt;", "PyTorch: Custom nn Modules", "PyTorch: nn", "PyTorch: optim", "Computation times", "&lt;no title&gt;", "Warm-up: numpy", "PyTorch: Tensors", "Computation times", "Adversarial Example Generation", "Finetuning Torchvision Models", "Autograd", "nn Package", "Multi-GPU Examples", "Tensors", "PyTorch for Former Torch Users", "Introduction to Holistic Trace Analysis", "Trace Diff using Holistic Trace Analysis", "&lt;no title&gt;", "Learning Hybrid Frontend Syntax Through Example", "Computation times", "Hybrid Frontend Tutorials", "Hyperparameter tuning with Ray Tune", "Introduction to PyTorch - YouTube Series", "The Fundamentals of Autograd", "Model Understanding with Captum", "Introduction to PyTorch on YouTube", "Introduction to PyTorch", "Introduction to PyTorch - YouTube Series", "Building Models with PyTorch", "Computation times", "PyTorch TensorBoard Support", "Introduction to PyTorch Tensors", "Training with PyTorch", "Knowledge Distillation Tutorial", "Advanced: Making Dynamic Decisions and the Bi-LSTM CRF", "Deep Learning with PyTorch", "Deep Learning for NLP with Pytorch", "Introduction to PyTorch", "Sequence Models and Long Short-Term Memory Networks", "Computation times", "Word Embeddings: Encoding Lexical Semantics", "What is <cite>torch.nn</cite> <em>really</em>?", "Export a model with control flow to ONNX", "Export a PyTorch model to ONNX", "ONNX", "Introduction to ONNX", "Extending the ONNX Exporter Operator Support", "Computation times", "Profiling your PyTorch Module", "Learning PyTorch with Examples", "Saving and Loading Models", "Computation times", "T5-Base Model for Summarization, Sentiment Classification, and Translation", "Template Tutorial", "Text classification with the torchtext library", "Preprocess custom text dataset using torchtext", "Transfer Learning for Computer Vision Tutorial", "Language Modeling with <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> and torchtext", "Language Translation with <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> and torchtext", "Compilers", "Deep Dive", "Distributed", "Domains", "Ecosystem", "Extension", "Welcome to PyTorch Tutorials", "Getting Started with Fully Sharded Data Parallel(FSDP)", "Advanced Model Training with Fully Sharded Data Parallel (FSDP)", "Getting Started with Fully Sharded Data Parallel (FSDP2)", "Introduction to Libuv TCPStore Backend", "Large Scale Transformer model training with Tensor Parallel (TP)", "Hooks for autograd saved tensors", "Multi-Objective NAS with Ax", "NLP From Scratch: Classifying Names with a Character-Level RNN", "NLP From Scratch: Generating Names with a Character-Level RNN", "Compiled Autograd: Capturing a larger backward graph for <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "Fusing Convolution and Batch Norm using Custom Function", "Double Backward with Custom Functions", "Training \u201creal-world\u201d models with DDP", "Multinode Training", "Getting Started with Distributed Data Parallel", "Distributed Pipeline Parallelism Using RPC", "Writing Distributed Applications with PyTorch", "Recurrent DQN: Training recurrent policies", "Model ensembling", "Forced Alignment with Wav2Vec2", "Forward-mode Automatic Differentiation (Beta)", "(beta) Building a Simple CPU Performance Profiler with FX", "Inductor CPU backend debugging and profiling", "Jacobians, Hessians, hvp, vhp, and more: composing function transforms", "Train a Mario-playing RL Agent", "Channels Last Memory Format in PyTorch", "&lt;no title&gt;", "Single-Machine Model Parallel Best Practices", "Neural Tangent Kernels", "NLP from Scratch", "Getting Started - Accelerate Your Scripts with nvFuser", "How to save memory by fusing the optimizer step into the backward pass", "Parametrizations Tutorial", "Per-sample-gradients", "A guide on good usage of <code class=\"docutils literal notranslate\"><span class=\"pre\">non_blocking</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">pin_memory()</span></code> in PyTorch", "Training Transformer models using Pipeline Parallelism", "Introduction to Distributed Pipeline Parallelism", "Customize Process Group Backends Using Cpp Extensions", "Pruning Tutorial", "Real Time Inference on Raspberry Pi 4 (30 fps!)", "Reinforcement Learning (PPO) with TorchRL Tutorial", "Reinforcement Learning (DQN) Tutorial", "Implementing Batch RPC Processing Using Asynchronous Executions", "Implementing a Parameter Server Using Distributed RPC Framework", "Getting Started with Distributed RPC Framework", "(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)", "NLP From Scratch: Translation with a Sequence to Sequence Network and Attention", "Computation times", "Spatial Transformer Networks Tutorial", "Speech Recognition with Wav2Vec2", "PyTorch Profiler With TensorBoard", "Visualizing Models, Data, and Training with TensorBoard", "Text-to-speech with Tacotron2", "Whole Slide Image Classification Using PyTorch and TIAToolbox", "Building a Convolution/Batch Norm fuser with torch.compile", "Introduction to <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "torch.export Nightly Tutorial", "torch.export Tutorial", "Introduction to TorchRec", "Introduction to TorchRec", "TorchVision Object Detection Finetuning Tutorial", "Accelerating PyTorch Transformers by replacing <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> with Nested Tensors and <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile()</span></code>", "Visualizing Gradients", "Intro", "Leverage Intel\u00ae Advanced Matrix Extensions", "Making Native Android Application that uses PyTorch prebuilt libraries", "(beta) Compiling the optimizer with torch.compile", "(beta) Running the compiled optimizer with an LR Scheduler", "Direct Device-to-Device Communication with TensorPipe CUDA RPC", "Asynchronous Saving with Distributed Checkpoint (DCP)", "Getting Started with Distributed Checkpoint (DCP)", "Getting Started with <code class=\"docutils literal notranslate\"><span class=\"pre\">CommDebugMode</span></code>", "Getting Started with DeviceMesh", "&lt;no title&gt;", "Profiling PyTorch RPC-Based Workloads", "Explicit horizontal fusion with foreach_map and torch.compile", "(Beta) PyTorch Inference Performance Tuning on AWS Graviton Processors", "Intel\u00ae Extension for PyTorch*", "Ease-of-use quantization for PyTorch with Intel\u00ae Neural Compressor", "Loading data in PyTorch", "(beta) Efficient mobile interpreter in Android and iOS", "Pytorch Mobile Performance Recipes", "Model Preparation for Android Recipe", "Model Preparation for iOS Recipe", "Profiling PyTorch workloads with The Instrumentation and Tracing Technology (ITT) API", "Summary of PyTorch Mobile Recipes", "Model Interpretability using Captum", "Automatic Mixed Precision", "SyntaxError", "Changing default device", "Defining a Neural Network in PyTorch", "PyTorch Recipes", "Tips for Loading an <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Module</span></code> from a Checkpoint", "PyTorch Profiler", "Reasoning about Shapes in PyTorch", "Save Load Across Devices", "Saving And Loading A General Checkpoint", "Saving And Loading Models For Inference", "Saving Multiple Models In One File", "Computation times", "Extension points in <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Module</span></code> for <code class=\"docutils literal notranslate\"><span class=\"pre\">load_state_dict</span></code> and tensor subclasses", "How to use TensorBoard with PyTorch", "Timer quick start", "Performance Tuning Guide", "Warmstarting model using parameters from a different model in PyTorch", "What is a state_dict in PyTorch", "Zeroing out gradients in PyTorch", "Reducing torch.compile cold start compilation time with regional compilation", "Script and Optimize for Mobile Recipe", "Computation times", "Intel\u00ae Extension for PyTorch* Backend on Intel\u00ae CPUs", "Compile Time Caching Configuration", "Compile Time Caching in <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "(beta) Utilizing Torch Function modes with torch.compile", "Using User-Defined Triton Kernels with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "Dynamic Compilation Control with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compiler.set_stance</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">torch.export</span></code> AOTInductor Tutorial for Python runtime (Beta)", "Demonstration of torch.export flow, common challenges and the solutions to address them", "(beta) Using TORCH_LOGS python API with torch.compile", "&lt;no title&gt;", "Optimizing CPU Performance on Intel\u00ae Xeon\u00ae with run_cpu Script", "Shard Optimizer States with ZeroRedundancyOptimizer", "Recipes", "Computation times", "(prototype) PyTorch BackendConfig Tutorial", "Introduction to Context Parallel", "Profiling PyTorch RPC-Based Workloads", "Flight Recorder for Debugging Stuck Jobs", "(prototype) Accelerating <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.save</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.load</span></code> with GPUDirect Storage", "(prototype) GPU Quantization with TorchAO", "Inductor C++ Wrapper Tutorial", "How to use <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code> on Windows CPU/XPU", "&lt;no title&gt;", "(Prototype) Convert Mobilenetv2 to Core ML", "(Prototype) Use iOS GPU in PyTorch", "(Prototype) Introduce lite interpreter workflow in Android and iOS", "Efficiently writing \u201csparse\u201d semantics for Adagrad with MaskedTensor", "MaskedTensor Advanced Semantics", "MaskedTensor Overview", "MaskedTensor Sparsity", "Using Max-Autotune Compilation on CPU for Better Performance", "Getting Started with Nested Tensors", "(Beta) Convert MobileNetV2 to NNAPI", "PyTorch 2 Export Quantization for OpenVINO torch.compile Backend", "Autoloading Out-of-Tree Extension", "(prototype) Accelerating BERT with semi-structured (2:4) sparsity", "Computation times", "Skipping Module Parameter Initialization", "(prototype) Tracing-based Selective Build Mobile Interpreter in Android and iOS", "torch.vmap", "PyTorch Vulkan Backend User Workflow", "Unstable"], "terms": {"thi": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 44, 46, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 67, 68, 70, 72, 73, 74, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 94, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 222, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 275, 276, 277, 278, 279, 281, 283, 285, 286, 287, 288, 289], "ha": [0, 1, 2, 4, 7, 8, 9, 11, 13, 14, 15, 16, 17, 19, 21, 28, 29, 30, 31, 32, 33, 34, 35, 39, 41, 46, 47, 48, 51, 54, 55, 67, 73, 80, 81, 88, 90, 93, 94, 95, 96, 98, 99, 100, 102, 103, 104, 105, 107, 109, 110, 112, 113, 117, 120, 121, 124, 126, 127, 130, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 165, 166, 168, 169, 170, 172, 173, 174, 176, 177, 178, 179, 182, 183, 184, 187, 188, 189, 190, 191, 192, 194, 195, 196, 198, 199, 200, 205, 206, 209, 212, 215, 224, 226, 227, 231, 238, 240, 241, 245, 246, 251, 252, 254, 255, 258, 259, 263, 264, 266, 267, 270, 273, 274, 275, 276, 277, 279, 281, 282, 283, 285, 286], "been": [0, 1, 3, 8, 11, 17, 18, 21, 29, 30, 31, 32, 33, 34, 46, 55, 74, 80, 81, 88, 90, 93, 94, 95, 96, 98, 103, 109, 113, 124, 126, 127, 130, 138, 141, 146, 148, 149, 150, 153, 154, 155, 157, 160, 161, 165, 166, 168, 169, 170, 173, 176, 177, 178, 179, 183, 187, 188, 189, 190, 191, 194, 195, 196, 199, 205, 212, 215, 222, 226, 238, 239, 246, 254, 255, 258, 263, 264, 270, 273, 274, 277, 279, 282, 283, 286], "deprec": [0, 6, 7, 11, 12, 25, 26, 27, 46, 115, 124, 126, 127, 129, 130, 138, 140, 141, 153, 165, 168, 173, 178, 188, 195, 211, 212, 217, 233, 234, 235, 236, 246, 257, 264], "redirect": [0, 11, 29, 30, 31, 32, 33, 34, 46, 63, 64, 81, 82, 83, 84, 85, 86, 94, 124, 126, 127, 130, 153, 157, 165, 168, 173, 187, 190, 194, 197, 203, 212, 218, 219, 220, 221, 223, 233, 234, 235, 236, 246, 264, 270, 271, 272, 280, 286], "3": [0, 2, 3, 4, 5, 7, 8, 9, 11, 17, 20, 21, 23, 28, 29, 30, 31, 32, 33, 34, 36, 37, 39, 46, 47, 57, 63, 64, 67, 68, 73, 74, 77, 80, 81, 82, 83, 84, 85, 86, 95, 96, 98, 100, 102, 103, 105, 106, 107, 109, 110, 112, 113, 114, 117, 118, 120, 121, 122, 124, 125, 126, 127, 130, 138, 139, 140, 142, 147, 148, 149, 153, 154, 155, 157, 160, 162, 163, 165, 166, 167, 168, 169, 171, 173, 176, 177, 178, 180, 181, 182, 183, 187, 190, 191, 193, 194, 195, 196, 198, 199, 202, 203, 205, 209, 210, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 230, 233, 234, 235, 236, 238, 241, 246, 248, 252, 254, 255, 263, 265, 267, 269, 270, 271, 272, 277, 279, 280, 283, 285, 286, 288], "second": [0, 1, 4, 7, 8, 11, 12, 15, 16, 17, 19, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 53, 54, 56, 57, 63, 64, 73, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 93, 95, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 118, 124, 125, 126, 127, 128, 130, 137, 138, 141, 143, 144, 145, 146, 147, 148, 149, 153, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 183, 184, 186, 187, 188, 189, 190, 193, 194, 195, 198, 199, 200, 203, 205, 206, 209, 213, 218, 219, 220, 221, 223, 226, 227, 230, 232, 233, 234, 235, 236, 238, 240, 241, 245, 246, 251, 252, 253, 254, 256, 258, 265, 267, 270, 271, 272, 274, 275, 276, 277, 279, 280, 286, 287], "go": [1, 14, 15, 16, 17, 19, 20, 21, 23, 24, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 49, 51, 53, 54, 56, 67, 68, 70, 72, 73, 74, 77, 78, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 137, 139, 143, 144, 145, 146, 148, 151, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 169, 170, 171, 172, 174, 176, 177, 178, 179, 181, 183, 184, 186, 188, 189, 192, 193, 195, 196, 198, 200, 205, 208, 213, 224, 225, 226, 227, 228, 230, 231, 232, 238, 239, 240, 241, 242, 243, 244, 245, 251, 252, 253, 254, 256, 262, 266, 267, 274, 275, 276, 277, 279, 287], "end": [1, 4, 7, 8, 9, 12, 15, 16, 17, 19, 21, 24, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 59, 65, 67, 68, 70, 72, 73, 74, 77, 78, 80, 87, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 125, 128, 131, 132, 137, 139, 141, 142, 143, 144, 145, 146, 148, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 182, 183, 184, 186, 188, 189, 192, 193, 195, 196, 198, 199, 200, 205, 213, 215, 224, 225, 226, 227, 228, 230, 231, 232, 238, 239, 240, 241, 242, 243, 244, 245, 251, 252, 253, 254, 256, 259, 260, 263, 266, 267, 274, 275, 276, 277, 279, 282, 283, 287], "download": [1, 8, 15, 16, 17, 19, 21, 24, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 67, 68, 70, 72, 73, 74, 77, 78, 80, 87, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 138, 139, 143, 144, 145, 146, 148, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 169, 170, 171, 172, 176, 177, 178, 179, 181, 183, 184, 186, 188, 189, 192, 193, 195, 196, 198, 199, 200, 205, 213, 215, 224, 225, 226, 227, 228, 230, 231, 232, 238, 239, 240, 241, 242, 243, 244, 245, 248, 250, 251, 252, 253, 254, 256, 266, 267, 269, 274, 275, 276, 277, 279, 287, 288], "full": [1, 3, 4, 7, 8, 12, 14, 15, 16, 17, 19, 21, 24, 28, 35, 36, 37, 39, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 67, 68, 70, 72, 73, 74, 77, 78, 80, 90, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 138, 139, 140, 143, 144, 145, 146, 147, 148, 150, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 169, 170, 171, 172, 175, 176, 178, 179, 180, 183, 184, 186, 188, 192, 193, 195, 196, 198, 199, 200, 205, 213, 224, 225, 226, 227, 228, 230, 231, 232, 238, 239, 240, 241, 242, 243, 244, 245, 251, 252, 253, 254, 256, 258, 260, 263, 265, 266, 267, 274, 275, 276, 277, 279, 281, 287], "exampl": [1, 2, 3, 4, 5, 8, 9, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 28, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 87, 88, 89, 91, 93, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 111, 113, 114, 115, 117, 118, 119, 120, 123, 125, 128, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 195, 196, 198, 200, 202, 204, 205, 207, 208, 209, 210, 213, 214, 222, 224, 225, 226, 227, 228, 230, 231, 232, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 249, 250, 251, 252, 254, 255, 256, 259, 260, 261, 262, 263, 266, 267, 269, 274, 275, 276, 277, 279, 281, 283, 284, 285, 287], "author": [1, 4, 5, 7, 14, 15, 16, 17, 20, 21, 24, 28, 39, 49, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 80, 87, 88, 90, 92, 99, 105, 106, 107, 109, 110, 112, 113, 114, 117, 118, 120, 121, 122, 125, 128, 138, 139, 140, 141, 142, 144, 145, 146, 147, 150, 151, 152, 154, 155, 159, 160, 162, 163, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 192, 193, 195, 199, 200, 204, 205, 207, 208, 209, 210, 213, 214, 225, 230, 231, 238, 241, 245, 249, 250, 251, 252, 253, 254, 255, 256, 262, 263, 265, 267, 268, 269, 278, 281, 282, 283, 287, 288], "vincent": [1, 17, 155, 172, 178], "moen": [1, 17, 155, 172, 178], "separ": [1, 4, 5, 7, 8, 12, 19, 37, 54, 57, 90, 95, 102, 103, 104, 105, 113, 120, 142, 156, 160, 162, 170, 172, 181, 184, 191, 198, 226, 241, 250, 253, 256, 262, 274], "rl": [1, 134, 137, 178, 179, 180, 185, 261], "algorithm": [1, 7, 8, 13, 14, 15, 35, 40, 45, 54, 57, 61, 74, 87, 93, 96, 98, 104, 106, 107, 108, 109, 113, 121, 134, 137, 139, 142, 144, 148, 154, 155, 162, 172, 175, 178, 181, 186, 204, 205, 224, 228, 241, 263, 281], "variou": [1, 4, 12, 18, 44, 51, 53, 54, 55, 88, 90, 93, 98, 102, 110, 113, 120, 122, 144, 154, 159, 161, 176, 178, 181, 182, 191, 196, 199, 202, 209, 213, 240, 244, 249, 252, 255, 265, 267, 276, 279], "piec": [1, 7, 12, 17, 90, 98, 113, 177, 178, 182, 191, 198, 262], "assembl": [1, 12, 54, 98], "script": [1, 7, 8, 9, 13, 15, 16, 17, 19, 24, 35, 36, 37, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 60, 65, 73, 77, 78, 80, 93, 95, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 125, 128, 138, 139, 140, 143, 144, 145, 146, 147, 148, 150, 151, 152, 154, 156, 158, 159, 160, 161, 162, 163, 166, 169, 170, 171, 172, 174, 176, 177, 178, 179, 181, 183, 184, 186, 191, 193, 195, 198, 199, 200, 205, 213, 214, 215, 222, 225, 226, 227, 230, 231, 232, 238, 241, 245, 251, 252, 253, 254, 256, 260, 265, 267, 274, 275, 276, 277, 279, 287, 288], "collect": [1, 5, 8, 14, 17, 18, 23, 24, 40, 47, 49, 54, 60, 65, 98, 103, 104, 107, 112, 137, 138, 139, 142, 152, 155, 159, 175, 179, 182, 195, 196, 201, 208, 209, 210, 222, 240, 241, 260, 263, 265, 283], "final": [1, 8, 13, 14, 15, 17, 18, 20, 21, 24, 28, 45, 47, 51, 54, 57, 80, 90, 93, 95, 98, 100, 103, 104, 105, 110, 113, 115, 118, 120, 122, 128, 137, 138, 139, 140, 142, 144, 145, 146, 148, 149, 154, 159, 160, 161, 162, 166, 169, 171, 174, 176, 178, 179, 180, 181, 182, 184, 188, 189, 195, 196, 216, 262, 263, 265, 267, 274, 277, 281, 283], "function": [1, 3, 4, 5, 7, 8, 10, 12, 13, 16, 17, 19, 20, 21, 23, 28, 37, 41, 42, 44, 45, 47, 53, 54, 56, 58, 60, 65, 66, 69, 70, 72, 73, 74, 87, 88, 95, 96, 98, 102, 103, 109, 112, 114, 117, 118, 120, 122, 128, 131, 132, 133, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 154, 155, 156, 159, 160, 162, 169, 170, 172, 174, 175, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 201, 204, 205, 214, 215, 222, 225, 227, 228, 238, 240, 242, 243, 247, 249, 252, 253, 254, 256, 259, 260, 261, 262, 263, 268, 274, 275, 276, 277, 281, 283, 285, 287, 288], "ar": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 28, 35, 36, 37, 40, 44, 45, 47, 48, 51, 53, 54, 55, 56, 57, 58, 60, 61, 65, 72, 73, 74, 80, 87, 88, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 128, 133, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 169, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 191, 192, 193, 195, 196, 198, 200, 202, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 222, 224, 225, 226, 228, 230, 231, 238, 239, 240, 241, 242, 243, 244, 245, 249, 250, 251, 252, 254, 255, 256, 258, 259, 260, 262, 263, 265, 266, 267, 274, 275, 276, 277, 278, 279, 281, 282, 283, 285, 287, 288, 289], "state": [1, 4, 7, 9, 12, 13, 14, 17, 21, 41, 42, 48, 54, 57, 58, 60, 93, 96, 98, 100, 104, 105, 106, 110, 113, 121, 122, 138, 139, 145, 146, 148, 150, 152, 155, 156, 158, 162, 169, 171, 176, 178, 179, 180, 181, 182, 184, 188, 195, 200, 207, 208, 213, 224, 225, 230, 243, 260, 265, 266, 277, 282, 283], "contain": [1, 2, 8, 12, 13, 15, 17, 18, 21, 36, 37, 41, 45, 51, 54, 55, 60, 72, 73, 74, 87, 90, 95, 96, 100, 103, 104, 109, 110, 113, 114, 121, 122, 128, 134, 137, 138, 139, 143, 144, 145, 150, 152, 155, 170, 174, 176, 178, 179, 180, 182, 183, 184, 186, 188, 189, 191, 192, 195, 196, 198, 199, 206, 222, 225, 228, 230, 238, 240, 241, 243, 254, 255, 258, 262, 265, 266, 277, 283, 285, 288], "trainabl": [1, 8, 73, 105, 107], "paramet": [1, 7, 13, 14, 15, 17, 18, 20, 21, 24, 28, 35, 37, 38, 39, 42, 44, 45, 47, 48, 51, 53, 54, 56, 57, 72, 73, 80, 90, 93, 95, 98, 102, 104, 105, 107, 109, 112, 113, 118, 120, 121, 128, 132, 133, 136, 137, 138, 139, 140, 142, 144, 145, 150, 152, 154, 155, 156, 158, 160, 161, 162, 166, 169, 170, 171, 182, 183, 186, 188, 189, 191, 195, 196, 200, 204, 206, 207, 208, 214, 215, 222, 225, 229, 230, 231, 232, 237, 238, 243, 244, 248, 252, 258, 259, 260, 261, 267, 274, 281, 283, 289], "tutori": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 28, 29, 30, 31, 32, 33, 34, 38, 41, 46, 47, 48, 49, 50, 56, 58, 60, 61, 65, 80, 81, 82, 83, 84, 85, 86, 87, 89, 93, 96, 97, 100, 102, 104, 106, 108, 109, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 126, 127, 130, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 177, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 196, 197, 200, 201, 202, 204, 205, 207, 208, 209, 210, 212, 213, 214, 224, 225, 229, 230, 231, 233, 234, 235, 236, 238, 239, 240, 241, 246, 247, 255, 256, 258, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 286, 287, 288, 289], "guid": [1, 7, 9, 12, 21, 65, 87, 90, 118, 134, 135, 137, 138, 154, 163, 177, 178, 185, 188, 195, 196, 213, 222, 224, 226, 229, 237, 258, 260, 261, 267, 281, 283], "you": [1, 2, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 24, 28, 34, 35, 36, 37, 39, 40, 42, 44, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 65, 72, 73, 80, 82, 83, 84, 85, 86, 87, 90, 92, 93, 95, 96, 98, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 118, 120, 121, 122, 125, 128, 131, 133, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 167, 169, 170, 171, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 186, 188, 189, 191, 192, 193, 195, 196, 198, 200, 201, 202, 204, 206, 207, 208, 209, 210, 214, 215, 222, 225, 226, 227, 228, 230, 231, 239, 241, 242, 243, 244, 245, 249, 250, 252, 253, 255, 256, 259, 260, 263, 266, 267, 268, 269, 274, 275, 276, 277, 278, 279, 281, 282, 283, 285, 287, 288], "through": [1, 3, 7, 8, 12, 13, 16, 17, 18, 20, 24, 28, 35, 36, 40, 41, 47, 51, 54, 57, 59, 60, 89, 91, 93, 95, 98, 100, 102, 104, 105, 107, 108, 109, 110, 113, 114, 115, 117, 118, 121, 125, 132, 133, 137, 139, 140, 141, 142, 143, 145, 147, 148, 149, 154, 156, 159, 160, 161, 162, 163, 166, 169, 171, 172, 174, 175, 178, 179, 180, 181, 182, 183, 184, 188, 189, 191, 192, 193, 195, 196, 200, 201, 206, 207, 208, 214, 215, 225, 226, 231, 239, 244, 255, 258, 261, 266, 267, 268, 269, 274, 276, 281, 283, 287], "from": [1, 3, 4, 5, 7, 8, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 28, 35, 37, 40, 41, 42, 43, 44, 48, 51, 52, 53, 54, 56, 57, 58, 60, 67, 68, 69, 72, 73, 74, 75, 77, 78, 79, 80, 87, 88, 90, 91, 93, 95, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 117, 118, 119, 120, 121, 123, 125, 128, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 151, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 188, 189, 192, 193, 195, 199, 200, 201, 206, 207, 208, 210, 213, 214, 215, 216, 222, 225, 226, 228, 229, 231, 237, 238, 240, 241, 243, 247, 250, 251, 252, 254, 255, 258, 259, 260, 261, 262, 263, 265, 267, 269, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 288, 289], "ground": [1, 17, 48, 80, 198], "up": [1, 3, 7, 8, 12, 13, 17, 19, 21, 23, 24, 35, 37, 40, 54, 57, 60, 65, 76, 79, 87, 90, 95, 96, 98, 99, 100, 103, 105, 106, 107, 109, 110, 112, 113, 115, 120, 131, 137, 138, 139, 140, 141, 142, 145, 146, 150, 151, 152, 154, 155, 156, 159, 160, 166, 169, 171, 172, 174, 177, 178, 179, 180, 181, 184, 188, 189, 193, 195, 196, 199, 200, 202, 206, 207, 209, 210, 215, 226, 231, 241, 244, 254, 255, 256, 258, 259, 260, 261, 268, 279, 281, 283, 289], "us": [1, 4, 5, 6, 9, 10, 12, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 35, 36, 37, 40, 41, 42, 44, 45, 48, 49, 51, 53, 54, 56, 57, 59, 60, 61, 62, 65, 67, 68, 70, 73, 74, 77, 78, 80, 87, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 117, 121, 125, 128, 131, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 144, 145, 146, 149, 151, 154, 159, 160, 161, 162, 163, 166, 167, 169, 170, 172, 174, 176, 177, 178, 179, 184, 185, 186, 192, 193, 195, 196, 198, 199, 200, 202, 204, 205, 207, 211, 213, 214, 215, 225, 226, 227, 228, 229, 232, 237, 238, 240, 243, 244, 245, 247, 249, 250, 251, 253, 255, 257, 260, 261, 262, 263, 265, 267, 268, 274, 275, 277, 279, 281, 282, 283, 285, 287, 289], "To": [1, 4, 7, 8, 12, 13, 14, 15, 17, 19, 20, 21, 24, 35, 36, 40, 41, 42, 45, 51, 54, 55, 56, 62, 70, 78, 87, 88, 90, 93, 96, 102, 104, 105, 106, 107, 109, 110, 112, 113, 114, 117, 121, 122, 125, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 154, 155, 158, 160, 169, 170, 172, 175, 176, 177, 178, 179, 180, 181, 183, 184, 188, 189, 191, 195, 196, 199, 200, 209, 210, 214, 215, 216, 222, 225, 226, 228, 230, 231, 238, 239, 240, 241, 242, 243, 244, 248, 252, 254, 255, 256, 258, 263, 265, 267, 268, 269, 274, 276, 277, 278, 283, 285, 288, 289], "aim": [1, 8, 105, 108, 141, 169, 179, 182, 216, 277], "we": [1, 2, 3, 4, 5, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 60, 67, 68, 70, 73, 74, 80, 87, 88, 90, 93, 96, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 118, 120, 121, 128, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 213, 214, 222, 224, 226, 228, 230, 231, 232, 238, 239, 240, 242, 243, 244, 245, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 262, 263, 265, 266, 267, 268, 269, 274, 275, 276, 277, 278, 279, 281, 282, 283, 287, 288, 289], "focus": [1, 3, 96, 105, 108, 132, 134, 175, 184, 196], "which": [1, 3, 4, 5, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 35, 36, 39, 40, 41, 42, 44, 45, 47, 48, 51, 53, 54, 55, 56, 57, 60, 61, 65, 67, 68, 72, 73, 74, 80, 87, 88, 90, 93, 95, 96, 98, 99, 100, 103, 104, 105, 106, 107, 109, 110, 112, 113, 115, 118, 120, 121, 122, 128, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 166, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 191, 193, 195, 196, 198, 199, 200, 202, 205, 206, 207, 208, 209, 210, 213, 222, 224, 225, 226, 227, 228, 230, 231, 238, 240, 241, 242, 243, 244, 245, 249, 250, 252, 253, 254, 255, 256, 258, 259, 262, 263, 266, 267, 274, 275, 276, 277, 278, 279, 281, 282, 283, 285], "i": [1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 63, 64, 65, 67, 68, 70, 73, 77, 78, 80, 82, 83, 84, 85, 86, 87, 90, 92, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 114, 115, 117, 118, 120, 121, 123, 125, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 154, 155, 158, 159, 160, 161, 162, 163, 166, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 191, 192, 193, 195, 196, 197, 198, 200, 201, 203, 204, 205, 207, 208, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 248, 249, 250, 252, 253, 254, 256, 257, 258, 260, 261, 262, 263, 265, 266, 267, 268, 269, 271, 272, 274, 275, 277, 278, 279, 280, 281, 282, 283, 285, 288], "rel": [1, 7, 8, 96, 104, 128, 143, 161, 166, 182, 184, 199, 268], "straightforward": [1, 5, 7, 8, 20, 21, 54, 95, 98, 103, 105, 106, 160, 172, 195, 199], "deep": [1, 5, 8, 15, 16, 39, 51, 54, 57, 74, 77, 78, 98, 99, 100, 103, 105, 109, 111, 112, 121, 131, 133, 134, 137, 145, 146, 147, 148, 152, 160, 161, 162, 170, 176, 179, 184, 191, 196, 200, 201, 202, 204, 205, 216, 222, 228, 240, 241, 245, 258, 261], "determinist": [1, 14, 17, 140, 155, 178, 179, 240, 241], "gradient": [1, 4, 8, 13, 14, 16, 17, 19, 20, 40, 47, 48, 51, 54, 57, 61, 65, 67, 68, 70, 73, 77, 78, 95, 98, 100, 103, 104, 105, 106, 107, 109, 113, 121, 128, 132, 137, 138, 139, 142, 143, 145, 147, 149, 150, 152, 154, 158, 161, 162, 169, 176, 178, 180, 181, 182, 185, 189, 191, 196, 208, 224, 229, 237, 259, 260, 261, 274, 287], "simpl": [1, 3, 4, 5, 7, 8, 12, 15, 18, 20, 21, 24, 28, 51, 54, 56, 59, 61, 72, 80, 90, 93, 96, 98, 100, 103, 104, 105, 113, 114, 117, 121, 122, 131, 133, 137, 138, 143, 144, 147, 149, 154, 156, 160, 161, 166, 171, 172, 174, 176, 178, 180, 181, 182, 183, 185, 186, 188, 193, 195, 196, 202, 204, 205, 208, 210, 213, 215, 226, 230, 239, 240, 241, 243, 252, 255, 256, 259, 261, 263, 278, 281, 283], "continu": [1, 7, 54, 58, 90, 93, 98, 103, 105, 110, 113, 140, 141, 142, 146, 150, 154, 178, 182, 184, 188, 193, 209, 226, 228, 231, 241, 242, 243, 244, 245, 265, 266, 274, 276, 277, 283], "control": [1, 12, 13, 17, 35, 37, 40, 47, 71, 75, 88, 90, 95, 105, 115, 116, 117, 118, 125, 131, 137, 139, 140, 141, 143, 144, 154, 158, 170, 178, 179, 180, 193, 209, 222, 226, 245, 247, 260, 261, 282], "It": [1, 4, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 28, 29, 30, 31, 32, 33, 35, 45, 47, 48, 49, 51, 54, 56, 57, 80, 81, 87, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 117, 122, 128, 136, 138, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 166, 169, 170, 171, 172, 176, 179, 180, 182, 184, 186, 187, 188, 190, 191, 194, 195, 196, 198, 199, 206, 207, 208, 210, 226, 227, 239, 241, 244, 248, 250, 252, 254, 255, 258, 262, 263, 265, 279, 283, 285, 287], "consist": [1, 3, 4, 8, 17, 18, 28, 35, 36, 37, 40, 47, 105, 107, 113, 140, 142, 150, 159, 162, 166, 169, 178, 179, 183, 184, 188, 192, 196, 199, 205, 226, 231, 241, 262, 263, 265, 276, 277], "learn": [1, 4, 5, 8, 16, 17, 19, 21, 22, 35, 36, 37, 40, 41, 42, 44, 45, 47, 49, 51, 54, 56, 57, 58, 59, 60, 61, 65, 74, 77, 78, 80, 87, 89, 91, 92, 93, 95, 96, 98, 99, 100, 103, 104, 105, 109, 111, 112, 113, 114, 115, 117, 118, 122, 123, 125, 131, 132, 134, 135, 136, 137, 138, 139, 141, 144, 145, 146, 147, 150, 151, 152, 154, 155, 160, 161, 163, 167, 169, 170, 171, 174, 176, 177, 181, 184, 185, 186, 189, 191, 192, 195, 196, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 213, 214, 216, 222, 224, 230, 238, 241, 245, 248, 249, 250, 253, 255, 259, 260, 261, 263, 266, 267, 274, 275, 276, 277, 278, 279, 282, 283, 289], "parametr": [1, 2, 21, 132, 137, 178, 185, 261, 283], "an": [1, 2, 3, 5, 7, 8, 9, 10, 12, 14, 15, 16, 18, 19, 20, 21, 23, 24, 28, 35, 36, 37, 39, 40, 41, 42, 44, 47, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 67, 70, 72, 74, 80, 87, 88, 90, 92, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 113, 114, 115, 117, 120, 121, 128, 131, 132, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 151, 152, 154, 156, 158, 159, 160, 161, 162, 163, 166, 167, 169, 170, 171, 172, 175, 176, 177, 179, 180, 181, 182, 183, 184, 186, 188, 189, 191, 192, 193, 195, 198, 199, 200, 202, 204, 206, 207, 208, 210, 213, 214, 215, 216, 222, 224, 225, 226, 227, 228, 229, 231, 232, 237, 238, 240, 241, 243, 245, 247, 249, 252, 253, 254, 255, 256, 260, 261, 262, 263, 266, 267, 268, 269, 274, 276, 277, 278, 279, 281, 282, 283, 285, 287, 288, 289], "action": [1, 24, 100, 104, 109, 113, 138, 139, 162, 176, 178, 179, 180, 181, 182, 188, 231, 240, 255, 260, 263, 277], "pair": [1, 8, 51, 54, 57, 96, 145, 146, 148, 171, 178, 179, 184, 188, 198, 205, 216, 222, 240, 262], "output": [1, 2, 3, 4, 5, 7, 8, 9, 13, 14, 15, 17, 19, 20, 21, 24, 35, 36, 40, 44, 47, 48, 49, 51, 53, 54, 57, 67, 68, 70, 72, 73, 74, 77, 78, 80, 87, 88, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 107, 109, 110, 112, 113, 115, 118, 120, 121, 122, 125, 128, 138, 139, 140, 142, 143, 145, 146, 147, 152, 154, 155, 156, 158, 160, 161, 163, 166, 171, 172, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 186, 189, 191, 193, 195, 198, 199, 200, 202, 204, 206, 209, 213, 214, 215, 216, 224, 226, 228, 231, 232, 239, 241, 248, 256, 259, 262, 263, 265, 267, 269, 278, 279, 281, 283, 288], "maxim": [1, 17, 57, 80, 87, 105, 107, 144, 162, 179, 193, 241, 258], "given": [1, 4, 8, 12, 13, 15, 17, 19, 21, 35, 37, 40, 44, 45, 47, 53, 54, 57, 60, 80, 87, 90, 96, 100, 104, 105, 108, 109, 112, 113, 122, 139, 145, 146, 154, 156, 158, 161, 162, 163, 171, 176, 178, 179, 181, 182, 184, 193, 195, 196, 198, 214, 216, 226, 232, 241, 251, 255, 259, 266, 277, 283], "certain": [1, 7, 8, 13, 14, 18, 54, 60, 96, 109, 133, 139, 142, 143, 148, 158, 161, 163, 178, 183, 193, 195, 196, 224, 228, 251, 252, 255, 258, 265, 274, 277, 279], "what": [1, 2, 3, 4, 5, 7, 12, 17, 19, 23, 24, 35, 36, 37, 47, 49, 50, 58, 59, 60, 65, 80, 92, 93, 96, 98, 100, 103, 104, 106, 107, 109, 110, 112, 114, 118, 123, 125, 136, 137, 139, 141, 142, 143, 144, 146, 147, 150, 151, 154, 155, 162, 163, 169, 174, 176, 178, 179, 180, 183, 189, 191, 192, 195, 196, 198, 199, 200, 204, 207, 225, 226, 227, 228, 229, 230, 237, 240, 241, 255, 260, 261, 263, 266, 276, 282], "how": [1, 2, 4, 5, 7, 8, 9, 12, 13, 15, 17, 19, 20, 21, 23, 24, 35, 37, 40, 41, 42, 47, 48, 49, 51, 54, 55, 56, 57, 60, 61, 62, 80, 87, 90, 92, 93, 95, 96, 98, 100, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 118, 120, 128, 131, 132, 133, 134, 135, 136, 137, 141, 143, 144, 145, 146, 147, 149, 150, 152, 154, 155, 156, 158, 159, 160, 162, 163, 166, 167, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 202, 205, 207, 209, 213, 214, 224, 225, 226, 229, 230, 231, 237, 238, 240, 241, 243, 244, 245, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 260, 261, 262, 263, 265, 266, 267, 274, 275, 276, 277, 278, 279, 281, 283, 289], "write": [1, 4, 5, 9, 10, 12, 13, 19, 22, 48, 54, 65, 68, 102, 106, 107, 108, 109, 113, 121, 123, 128, 134, 136, 137, 141, 143, 144, 149, 150, 152, 155, 158, 160, 166, 170, 172, 175, 178, 181, 182, 184, 188, 191, 193, 195, 199, 208, 225, 226, 227, 228, 232, 241, 255, 261, 265, 266, 277, 281, 284, 287, 288], "custom": [1, 8, 12, 14, 21, 22, 54, 57, 68, 71, 75, 96, 113, 120, 123, 132, 134, 136, 137, 140, 144, 155, 162, 172, 178, 181, 185, 191, 192, 193, 196, 199, 213, 215, 222, 225, 229, 238, 241, 248, 251, 252, 261, 262, 281, 283, 285], "its": [1, 2, 3, 4, 5, 7, 8, 9, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 35, 36, 40, 45, 47, 51, 54, 56, 57, 58, 60, 73, 87, 95, 96, 98, 100, 103, 105, 107, 109, 110, 112, 113, 115, 120, 121, 122, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 152, 154, 155, 156, 158, 159, 160, 162, 163, 169, 170, 174, 176, 178, 179, 180, 181, 182, 184, 188, 189, 193, 195, 196, 200, 202, 208, 210, 215, 216, 222, 225, 226, 228, 230, 231, 238, 241, 242, 243, 244, 259, 267, 276, 277, 279, 282, 283, 285, 288], "includ": [1, 2, 3, 4, 5, 7, 8, 9, 12, 17, 18, 19, 28, 40, 41, 44, 53, 54, 58, 60, 65, 74, 80, 87, 90, 93, 95, 96, 98, 100, 103, 104, 105, 106, 113, 115, 117, 118, 120, 132, 142, 144, 145, 146, 147, 149, 150, 152, 154, 155, 160, 162, 172, 174, 175, 176, 178, 181, 184, 188, 189, 192, 193, 195, 196, 198, 199, 206, 208, 209, 214, 215, 216, 222, 224, 225, 226, 228, 231, 238, 241, 250, 252, 253, 258, 265, 267, 274, 276, 278, 281, 282, 288], "design": [1, 7, 8, 17, 21, 28, 57, 61, 80, 90, 96, 112, 113, 146, 152, 155, 172, 178, 179, 180, 182, 183, 188, 189, 195, 202, 214, 226, 228, 241, 248, 252, 255, 258, 262, 263, 274, 275, 276, 281, 283, 287], "effici": [1, 5, 7, 13, 15, 18, 21, 35, 54, 56, 80, 87, 103, 105, 109, 112, 131, 132, 138, 139, 142, 144, 152, 154, 155, 161, 166, 176, 178, 182, 183, 188, 191, 196, 207, 226, 230, 248, 252, 258, 261, 265, 268, 277, 278, 279, 283, 284], "store": [1, 7, 8, 20, 21, 24, 35, 36, 37, 41, 42, 44, 47, 53, 56, 58, 73, 93, 95, 102, 103, 106, 107, 109, 112, 113, 115, 121, 141, 143, 144, 146, 154, 155, 160, 162, 163, 170, 172, 174, 175, 176, 178, 179, 180, 181, 182, 184, 195, 196, 231, 240, 241, 249, 250, 263, 267, 277, 278, 283], "them": [1, 2, 3, 4, 7, 8, 12, 13, 14, 15, 17, 21, 23, 24, 35, 37, 40, 47, 48, 51, 53, 54, 56, 58, 60, 65, 73, 93, 95, 96, 98, 100, 102, 103, 104, 105, 108, 109, 110, 112, 113, 114, 115, 117, 118, 121, 122, 131, 132, 137, 139, 140, 142, 144, 145, 146, 148, 149, 154, 155, 156, 159, 160, 161, 166, 169, 170, 171, 172, 176, 177, 179, 180, 181, 182, 191, 192, 193, 195, 198, 199, 200, 205, 214, 215, 225, 226, 230, 238, 240, 241, 249, 250, 258, 260, 263, 267, 276, 278, 279, 282, 283, 285], "trajectori": [1, 17, 155, 178, 179], "transit": [1, 17, 90, 92, 106, 155, 172, 179], "assum": [1, 2, 8, 9, 12, 13, 17, 18, 24, 39, 47, 48, 56, 59, 80, 95, 98, 99, 105, 106, 108, 110, 113, 118, 142, 143, 145, 146, 154, 155, 170, 176, 178, 181, 183, 184, 198, 208, 230, 231, 238, 240, 255, 276, 277, 279], "have": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 28, 35, 36, 37, 40, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 60, 62, 73, 74, 80, 87, 88, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 125, 128, 133, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 191, 192, 193, 195, 196, 198, 199, 200, 202, 205, 207, 208, 209, 210, 213, 214, 215, 222, 225, 226, 227, 228, 238, 239, 240, 241, 242, 243, 244, 245, 249, 250, 252, 253, 254, 255, 258, 259, 262, 263, 265, 266, 267, 268, 274, 275, 276, 277, 278, 279, 281, 282, 283, 285, 287, 288], "complet": [1, 7, 8, 18, 39, 90, 93, 95, 98, 106, 107, 109, 118, 137, 139, 141, 142, 144, 145, 147, 149, 154, 172, 174, 176, 177, 178, 181, 191, 193, 198, 224, 241, 254, 255, 265, 267, 276, 277, 281], "ppo": [1, 134, 137, 185, 261], "give": [1, 2, 7, 8, 14, 17, 21, 40, 49, 51, 54, 55, 57, 80, 95, 96, 98, 100, 105, 107, 109, 110, 112, 113, 122, 146, 150, 156, 159, 160, 161, 162, 171, 177, 181, 184, 188, 191, 193, 195, 196, 199, 214, 226, 275, 279, 283], "compon": [1, 7, 8, 12, 13, 17, 57, 90, 100, 105, 109, 122, 132, 136, 137, 144, 145, 147, 155, 162, 178, 182, 186, 188, 192, 193, 195, 199, 202, 250, 279], "depend": [1, 7, 8, 12, 14, 51, 55, 57, 80, 87, 90, 95, 96, 102, 103, 105, 106, 110, 113, 142, 144, 145, 148, 149, 154, 155, 158, 159, 161, 162, 172, 175, 177, 178, 181, 188, 193, 199, 202, 204, 214, 226, 227, 232, 238, 241, 245, 258, 267, 276, 288, 289], "tensordict": [1, 17, 155, 162, 172, 178], "nn": [1, 2, 7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 23, 24, 40, 41, 42, 47, 48, 49, 51, 54, 60, 71, 74, 75, 93, 95, 98, 102, 104, 107, 112, 117, 120, 123, 128, 132, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 152, 155, 158, 161, 166, 170, 171, 174, 178, 179, 180, 181, 182, 183, 185, 189, 191, 193, 195, 196, 200, 204, 206, 207, 208, 210, 214, 215, 222, 225, 227, 228, 229, 231, 232, 237, 241, 242, 243, 245, 248, 259, 260, 261, 262, 263, 275, 278, 279, 283, 285], "tensordictmodul": [1, 155, 178], "although": [1, 15, 20, 47, 54, 106, 107, 112, 113, 115, 118, 141, 143, 162, 170, 172, 181, 193, 195, 214], "should": [1, 2, 4, 7, 8, 9, 12, 13, 14, 17, 18, 19, 20, 23, 24, 35, 47, 48, 54, 55, 56, 57, 58, 60, 74, 80, 87, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 115, 121, 128, 136, 137, 139, 140, 141, 143, 144, 147, 149, 152, 154, 155, 156, 159, 162, 163, 166, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 189, 191, 192, 193, 195, 196, 198, 200, 207, 208, 214, 222, 225, 226, 231, 239, 240, 241, 244, 251, 255, 258, 260, 265, 266, 267, 269, 274, 275, 276, 281, 282, 287, 288], "suffici": [1, 8, 54, 57, 105, 106, 128, 150, 152, 169, 172, 195], "transpar": [1, 15, 96, 107, 155, 181, 209, 215, 249, 288], "understood": [1, 4, 19, 252], "without": [1, 7, 8, 12, 13, 17, 19, 21, 35, 54, 58, 60, 100, 103, 105, 106, 117, 137, 138, 140, 142, 143, 146, 147, 154, 158, 159, 161, 162, 163, 169, 172, 175, 176, 177, 178, 179, 180, 183, 188, 191, 195, 200, 205, 207, 210, 225, 230, 232, 238, 241, 250, 251, 253, 259, 266, 274, 276, 277, 279, 282, 283], "understand": [1, 2, 4, 5, 8, 10, 18, 47, 48, 57, 62, 87, 90, 95, 97, 98, 99, 100, 102, 103, 104, 106, 109, 113, 114, 118, 128, 132, 137, 140, 143, 144, 145, 146, 149, 154, 158, 160, 172, 184, 191, 195, 196, 200, 201, 207, 210, 222, 224, 239, 243, 245, 249, 250, 252, 254, 255, 258, 266, 275, 278], "class": [1, 2, 5, 7, 8, 12, 13, 16, 18, 24, 28, 35, 37, 39, 41, 42, 48, 51, 54, 57, 58, 70, 72, 80, 88, 90, 96, 98, 100, 102, 103, 104, 107, 108, 112, 113, 118, 121, 122, 128, 137, 138, 139, 140, 144, 145, 147, 149, 150, 152, 154, 155, 159, 160, 162, 163, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 189, 191, 195, 198, 200, 206, 207, 208, 210, 214, 222, 224, 226, 228, 240, 243, 244, 245, 255, 262, 265, 274, 275, 276, 278, 285], "do": [1, 2, 3, 4, 7, 8, 10, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 35, 36, 42, 51, 54, 55, 56, 57, 59, 67, 68, 74, 90, 93, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 115, 121, 122, 125, 132, 137, 138, 142, 143, 144, 145, 151, 152, 154, 155, 156, 159, 160, 161, 162, 166, 169, 170, 172, 175, 176, 177, 178, 179, 182, 184, 189, 191, 195, 196, 198, 199, 200, 208, 222, 225, 226, 227, 230, 238, 239, 240, 241, 242, 244, 252, 253, 254, 260, 263, 265, 267, 275, 276, 277, 282, 283, 285, 287], "sota": 1, "implement": [1, 2, 3, 7, 8, 9, 13, 14, 15, 16, 17, 18, 21, 28, 36, 37, 39, 47, 49, 51, 54, 56, 60, 62, 65, 67, 68, 70, 72, 73, 74, 77, 78, 90, 95, 98, 104, 112, 113, 114, 121, 132, 133, 134, 137, 140, 142, 143, 145, 147, 149, 154, 155, 156, 158, 160, 161, 162, 163, 166, 171, 172, 174, 176, 178, 179, 182, 185, 188, 192, 195, 196, 198, 199, 202, 207, 214, 215, 226, 230, 238, 241, 248, 249, 251, 252, 255, 258, 261, 262, 263, 265, 268, 275, 277, 278, 279, 281, 282, 283, 288], "rather": [1, 16, 54, 57, 74, 80, 90, 100, 103, 105, 112, 113, 122, 137, 146, 148, 160, 170, 171, 172, 178, 191, 195, 199, 202, 226, 241, 249, 253, 265, 267, 274], "provid": [1, 4, 7, 8, 9, 12, 13, 14, 17, 18, 19, 20, 21, 23, 24, 28, 36, 37, 48, 54, 56, 57, 60, 61, 80, 87, 88, 90, 93, 95, 96, 98, 103, 104, 105, 106, 107, 113, 114, 117, 118, 121, 122, 133, 136, 137, 139, 141, 142, 143, 144, 150, 151, 152, 154, 155, 159, 160, 161, 162, 172, 176, 177, 178, 180, 181, 183, 188, 191, 192, 193, 195, 196, 198, 199, 202, 208, 209, 213, 214, 215, 216, 222, 224, 225, 226, 228, 230, 231, 239, 240, 241, 245, 250, 253, 254, 255, 258, 265, 276, 277, 283, 285, 287, 289], "high": [1, 2, 7, 8, 18, 24, 48, 54, 57, 58, 60, 62, 65, 87, 90, 100, 107, 112, 115, 120, 132, 137, 138, 139, 142, 144, 147, 148, 154, 178, 185, 188, 189, 191, 195, 196, 206, 216, 240, 241, 252, 258, 259, 261, 268, 277, 281, 289], "level": [1, 2, 4, 7, 8, 19, 21, 24, 48, 54, 58, 60, 62, 65, 73, 100, 108, 115, 121, 137, 138, 139, 142, 147, 150, 152, 154, 158, 160, 163, 167, 183, 184, 185, 188, 191, 193, 195, 196, 199, 206, 209, 210, 249, 259, 261, 281, 283, 289], "illustr": [1, 24, 36, 48, 51, 61, 128, 142, 143, 144, 156, 172, 179, 189, 191, 198, 200, 210, 222, 224, 231, 238, 276, 277], "": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 14, 15, 17, 20, 21, 23, 24, 28, 35, 36, 37, 39, 40, 41, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 58, 60, 62, 73, 80, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 128, 133, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 148, 149, 150, 152, 154, 155, 156, 158, 159, 160, 161, 163, 166, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 204, 206, 207, 208, 209, 210, 214, 224, 225, 226, 228, 230, 231, 238, 239, 240, 241, 243, 244, 245, 249, 250, 252, 258, 259, 260, 262, 263, 265, 267, 268, 269, 274, 276, 277, 279, 282, 283, 285, 287, 289], "librari": [1, 3, 4, 5, 7, 8, 9, 10, 12, 15, 17, 19, 23, 37, 41, 48, 55, 56, 62, 65, 93, 96, 113, 117, 118, 134, 137, 141, 144, 148, 149, 159, 172, 174, 175, 177, 178, 182, 188, 196, 199, 200, 202, 210, 214, 215, 222, 245, 252, 254, 265, 269, 278, 286, 288], "featur": [1, 8, 9, 13, 14, 15, 17, 24, 37, 41, 45, 54, 55, 56, 57, 87, 88, 90, 95, 98, 100, 102, 103, 105, 106, 112, 113, 117, 121, 137, 138, 143, 147, 155, 160, 161, 162, 169, 172, 175, 177, 178, 182, 183, 189, 193, 195, 198, 199, 202, 206, 213, 214, 222, 224, 228, 230, 238, 240, 241, 244, 245, 249, 252, 255, 260, 268, 277, 278, 279, 281, 282, 283, 287, 288, 289], "context": [1, 2, 7, 12, 17, 20, 21, 47, 54, 80, 95, 100, 112, 113, 120, 133, 142, 147, 158, 170, 172, 178, 181, 182, 183, 184, 188, 193, 199, 206, 209, 225, 227, 230, 231, 232, 241, 253, 255, 258, 266, 268, 278, 283, 288, 289], "bash": [1, 23, 162, 179, 222], "pip3": [1, 23, 55, 139, 155, 172, 178, 179, 188, 196, 267], "instal": [1, 4, 5, 7, 8, 12, 21, 28, 39, 55, 56, 58, 60, 62, 93, 99, 102, 113, 117, 138, 139, 142, 145, 146, 150, 151, 154, 155, 158, 159, 162, 167, 172, 175, 178, 179, 180, 184, 188, 191, 193, 198, 200, 214, 222, 224, 226, 228, 231, 240, 242, 243, 244, 245, 252, 258, 265, 266, 267, 282, 288], "mujoco": [1, 155, 178], "glfw": 1, "cuda": [1, 5, 8, 12, 13, 14, 15, 18, 21, 23, 24, 28, 36, 41, 44, 47, 48, 49, 58, 59, 60, 67, 68, 78, 80, 88, 93, 103, 107, 113, 120, 121, 122, 128, 131, 136, 137, 138, 139, 140, 141, 142, 145, 148, 150, 151, 152, 154, 163, 169, 170, 174, 175, 178, 179, 180, 181, 182, 183, 188, 191, 193, 196, 204, 205, 207, 208, 210, 213, 216, 225, 226, 227, 231, 250, 253, 254, 255, 259, 260, 263, 265, 266, 267, 268, 278, 283], "avail": [1, 2, 3, 4, 5, 7, 8, 13, 15, 18, 21, 23, 24, 35, 36, 37, 40, 41, 42, 44, 47, 48, 53, 54, 55, 56, 57, 58, 67, 80, 93, 96, 98, 100, 103, 104, 105, 109, 113, 115, 121, 128, 139, 143, 145, 154, 155, 158, 162, 163, 172, 176, 177, 178, 179, 182, 183, 184, 188, 191, 192, 195, 196, 198, 206, 208, 215, 216, 222, 224, 226, 227, 228, 241, 242, 243, 244, 245, 254, 256, 265, 281, 283, 287, 289], "seri": [1, 8, 18, 57, 58, 59, 60, 61, 87, 97, 100, 103, 104, 133, 137, 141, 145, 146, 150, 151, 159, 167, 176, 178, 184, 199, 201, 214, 258, 276], "easili": [1, 7, 15, 24, 28, 36, 49, 65, 80, 96, 103, 104, 105, 113, 120, 121, 122, 139, 142, 144, 145, 152, 154, 159, 160, 166, 176, 178, 179, 182, 191, 193, 195, 198, 207, 208, 210, 226, 243, 263, 267, 281, 285, 289], "reusabl": [1, 8], "swappabl": 1, "signatur": [1, 7, 12, 13, 17, 18, 118, 154, 170, 181, 192, 195], "main": [1, 3, 5, 7, 8, 14, 20, 24, 40, 57, 58, 60, 93, 105, 113, 118, 121, 138, 139, 145, 150, 154, 160, 172, 179, 180, 181, 182, 186, 195, 196, 198, 199, 207, 215, 222, 241, 259, 267, 268, 287, 288, 289], "characterist": [1, 17, 47, 147, 159, 161, 162, 177, 183, 195, 255], "thei": [1, 3, 7, 8, 12, 13, 15, 17, 19, 20, 24, 36, 37, 44, 48, 53, 54, 57, 60, 80, 87, 90, 95, 98, 100, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 139, 143, 144, 145, 146, 149, 152, 154, 155, 160, 161, 163, 169, 170, 178, 179, 180, 182, 184, 191, 195, 196, 199, 202, 208, 210, 215, 226, 230, 231, 239, 240, 243, 244, 262, 269, 274, 275, 276, 277, 279, 285], "copi": [1, 7, 8, 15, 23, 39, 44, 48, 49, 55, 60, 80, 87, 95, 99, 104, 105, 120, 122, 125, 137, 138, 143, 148, 152, 154, 155, 159, 162, 170, 181, 188, 191, 192, 195, 206, 207, 213, 214, 230, 241, 263, 265, 281, 288], "loss_modul": [1, 178], "whatev": [1, 12, 98, 103, 104, 107, 109, 113, 122, 222], "need": [1, 3, 4, 5, 7, 8, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 28, 35, 36, 37, 40, 41, 42, 44, 45, 47, 48, 49, 51, 54, 55, 56, 58, 59, 60, 65, 67, 68, 72, 87, 88, 93, 96, 98, 102, 103, 104, 105, 107, 109, 110, 112, 113, 115, 121, 122, 128, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 191, 192, 193, 195, 196, 198, 200, 206, 207, 208, 210, 214, 215, 222, 225, 226, 228, 231, 238, 239, 240, 241, 242, 243, 244, 245, 249, 253, 254, 255, 262, 265, 266, 267, 274, 278, 279, 282, 283, 285, 288], "follow": [1, 2, 3, 4, 5, 7, 8, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 35, 36, 37, 39, 40, 44, 48, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 80, 87, 88, 90, 92, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 115, 117, 118, 122, 125, 128, 137, 138, 139, 140, 142, 143, 144, 147, 150, 151, 152, 154, 155, 159, 160, 161, 162, 163, 167, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 183, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 208, 210, 214, 215, 222, 225, 228, 230, 231, 232, 238, 239, 245, 248, 249, 250, 252, 254, 255, 258, 262, 263, 265, 266, 268, 275, 277, 278, 279, 281, 282, 283, 285, 287, 288], "convent": [1, 17, 57, 113, 122, 155, 191, 199, 226], "torch": [1, 2, 3, 5, 6, 7, 8, 10, 12, 13, 14, 15, 17, 18, 19, 21, 23, 24, 25, 26, 27, 36, 37, 38, 40, 41, 42, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 62, 65, 67, 68, 72, 78, 80, 90, 93, 95, 96, 98, 102, 103, 104, 105, 107, 110, 112, 115, 117, 118, 120, 121, 123, 128, 131, 132, 136, 137, 138, 139, 140, 141, 142, 146, 149, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 182, 184, 185, 188, 189, 191, 196, 198, 200, 202, 205, 206, 207, 208, 210, 211, 214, 215, 216, 222, 227, 228, 229, 231, 232, 239, 240, 241, 242, 243, 244, 247, 248, 249, 257, 259, 260, 261, 262, 263, 265, 267, 268, 274, 275, 277, 278, 279, 282, 283, 284, 285, 288, 289], "receiv": [1, 8, 17, 20, 60, 93, 103, 109, 121, 154, 172, 174, 178, 180, 181, 182, 193, 196, 225, 228, 241, 265], "input": [1, 2, 4, 7, 8, 9, 12, 13, 15, 16, 17, 19, 20, 35, 36, 39, 40, 44, 47, 48, 49, 51, 53, 54, 61, 65, 67, 68, 70, 72, 73, 74, 77, 78, 88, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 118, 120, 121, 122, 133, 138, 139, 142, 144, 145, 146, 147, 148, 150, 152, 154, 155, 156, 158, 160, 161, 162, 163, 166, 169, 171, 174, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 191, 192, 193, 195, 198, 202, 204, 206, 208, 214, 215, 216, 224, 225, 228, 231, 232, 244, 249, 253, 255, 258, 262, 263, 267, 277, 279, 281, 283, 287, 288], "all": [1, 2, 3, 5, 7, 8, 12, 13, 14, 15, 17, 18, 20, 21, 23, 24, 35, 36, 37, 40, 41, 44, 45, 47, 48, 49, 51, 54, 55, 56, 57, 58, 60, 61, 65, 80, 87, 90, 95, 96, 98, 100, 103, 104, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 158, 159, 160, 163, 166, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 191, 192, 193, 195, 196, 198, 200, 206, 209, 213, 215, 222, 224, 226, 228, 230, 238, 239, 240, 242, 243, 244, 245, 249, 250, 252, 253, 255, 256, 258, 259, 260, 261, 262, 263, 265, 266, 267, 274, 275, 277, 279, 281, 282, 283, 285, 287, 288, 289], "necessari": [1, 4, 7, 8, 12, 13, 15, 18, 23, 24, 28, 42, 48, 57, 58, 60, 90, 93, 103, 104, 106, 113, 122, 138, 139, 142, 148, 152, 162, 174, 178, 180, 181, 182, 188, 195, 200, 216, 225, 241, 245, 253, 262, 263, 276, 279, 281, 282], "inform": [1, 2, 4, 7, 10, 12, 13, 17, 19, 35, 49, 54, 58, 80, 87, 93, 95, 100, 102, 103, 105, 109, 110, 112, 122, 138, 143, 144, 145, 146, 152, 154, 155, 158, 159, 162, 177, 178, 179, 181, 183, 184, 188, 189, 191, 193, 195, 196, 198, 200, 202, 208, 209, 210, 222, 225, 226, 240, 241, 243, 244, 253, 256, 258, 262, 265, 266, 267, 277, 279, 281, 285, 287, 288], "return": [1, 2, 4, 5, 7, 8, 9, 12, 13, 14, 15, 17, 18, 19, 20, 23, 24, 36, 37, 41, 44, 49, 51, 54, 56, 57, 80, 87, 95, 96, 102, 103, 104, 105, 107, 109, 110, 113, 115, 118, 120, 122, 138, 139, 140, 142, 146, 147, 149, 152, 154, 155, 158, 160, 161, 162, 163, 166, 170, 174, 175, 177, 178, 179, 180, 181, 182, 183, 188, 189, 191, 193, 195, 196, 198, 204, 206, 207, 208, 210, 214, 215, 216, 222, 224, 226, 228, 231, 240, 243, 250, 253, 255, 262, 268, 269, 274, 276, 278, 281, 282, 283, 287, 288], "replay_buff": [1, 178], "sampl": [1, 4, 5, 8, 12, 36, 37, 40, 41, 44, 48, 51, 53, 54, 56, 57, 60, 65, 93, 98, 100, 102, 103, 105, 122, 128, 132, 137, 138, 145, 148, 154, 161, 162, 169, 170, 178, 179, 180, 182, 185, 191, 195, 198, 199, 204, 224, 231, 240, 241, 253, 261, 279, 287], "loss_dict": 1, "instanc": [1, 7, 8, 14, 15, 17, 36, 42, 49, 58, 59, 60, 65, 87, 93, 98, 100, 103, 104, 105, 106, 107, 110, 112, 113, 114, 121, 138, 139, 143, 144, 147, 150, 151, 152, 155, 160, 162, 172, 174, 178, 180, 181, 182, 193, 200, 213, 214, 215, 222, 225, 231, 239, 240, 241, 245, 255, 258, 259, 282, 285], "written": [1, 4, 5, 7, 8, 9, 12, 13, 17, 19, 90, 102, 108, 113, 114, 149, 155, 159, 166, 170, 171, 174, 183, 188, 191, 215, 239, 250, 252, 265, 266, 267, 274], "under": [1, 7, 12, 23, 24, 35, 51, 54, 55, 57, 59, 61, 65, 102, 105, 107, 120, 121, 140, 142, 143, 147, 154, 161, 162, 170, 172, 176, 182, 188, 189, 198, 206, 208, 209, 222, 225, 249, 252, 262, 266, 275, 277], "loss_": 1, "smth": 1, "where": [1, 3, 4, 8, 12, 14, 15, 16, 17, 20, 21, 23, 28, 35, 37, 51, 54, 56, 65, 68, 73, 88, 90, 93, 95, 96, 98, 100, 102, 103, 105, 106, 107, 109, 110, 112, 121, 137, 139, 142, 144, 145, 146, 149, 151, 152, 154, 156, 160, 163, 166, 169, 170, 171, 172, 174, 177, 178, 179, 180, 181, 182, 183, 184, 189, 193, 195, 196, 198, 199, 207, 210, 222, 225, 226, 228, 238, 239, 240, 244, 255, 258, 262, 263, 265, 267, 274, 277, 278, 283], "string": [1, 4, 9, 12, 18, 54, 103, 115, 144, 145, 146, 155, 176, 178, 184, 191, 196, 222, 226, 240, 265], "describ": [1, 7, 8, 12, 13, 17, 18, 20, 24, 42, 44, 53, 54, 57, 65, 80, 98, 105, 115, 118, 125, 133, 154, 166, 174, 178, 179, 182, 188, 191, 195, 196, 200, 210, 213, 226, 258, 285, 289], "addit": [1, 2, 4, 7, 9, 12, 14, 18, 21, 24, 55, 60, 80, 96, 103, 105, 110, 113, 115, 120, 139, 142, 143, 145, 152, 154, 156, 160, 163, 176, 178, 180, 181, 184, 189, 192, 193, 195, 199, 207, 214, 226, 231, 241, 251, 252, 254, 255, 258, 274, 275, 276, 277, 281, 282, 283, 288, 289], "kei": [1, 4, 8, 9, 12, 14, 17, 18, 54, 87, 108, 112, 115, 120, 122, 125, 139, 140, 141, 144, 155, 162, 172, 177, 178, 180, 183, 184, 188, 189, 191, 195, 196, 199, 204, 205, 213, 215, 216, 230, 239, 241, 242, 251, 252, 263, 279, 282, 283], "mai": [1, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 21, 24, 40, 54, 55, 57, 73, 80, 90, 95, 96, 98, 100, 103, 107, 114, 118, 121, 122, 138, 141, 142, 143, 144, 147, 148, 149, 154, 155, 156, 158, 160, 161, 166, 169, 170, 172, 177, 178, 181, 184, 188, 191, 193, 195, 199, 202, 204, 208, 210, 216, 226, 231, 241, 244, 250, 252, 253, 255, 262, 265, 276, 279, 283, 285], "metric": [1, 21, 93, 102, 103, 105, 120, 139, 188, 191, 198, 222, 226, 239, 283], "log": [1, 23, 40, 54, 55, 57, 58, 102, 106, 107, 110, 112, 113, 138, 141, 144, 151, 177, 178, 180, 182, 188, 189, 191, 195, 196, 205, 209, 250, 256, 258, 260, 278], "dure": [1, 3, 12, 15, 17, 23, 24, 35, 36, 40, 41, 42, 54, 57, 67, 68, 90, 95, 98, 100, 103, 104, 105, 107, 112, 113, 114, 121, 122, 131, 137, 138, 139, 140, 142, 143, 146, 147, 148, 149, 150, 152, 155, 159, 160, 166, 170, 177, 178, 179, 180, 182, 188, 192, 193, 195, 198, 200, 208, 215, 222, 231, 238, 239, 245, 265, 266, 269, 278, 281, 285, 288, 289], "reason": [1, 7, 8, 12, 17, 18, 19, 21, 35, 57, 87, 95, 98, 105, 107, 110, 113, 122, 128, 143, 148, 154, 160, 178, 183, 184, 195, 196, 208, 226, 229, 230, 237, 254, 260, 261, 265, 267, 276, 283], "independ": [1, 54, 112, 113, 161, 162, 166, 181, 213, 274, 282], "let": [1, 2, 4, 5, 7, 8, 12, 13, 14, 15, 17, 19, 20, 21, 23, 24, 28, 36, 40, 47, 48, 49, 51, 54, 56, 57, 73, 80, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 118, 120, 121, 122, 128, 131, 140, 142, 144, 149, 152, 154, 155, 156, 159, 160, 161, 163, 166, 169, 170, 171, 172, 174, 176, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 204, 208, 210, 214, 224, 226, 228, 230, 231, 238, 239, 240, 241, 244, 245, 254, 255, 263, 267, 269, 274, 275, 279, 283], "user": [1, 3, 7, 9, 17, 21, 23, 24, 28, 45, 48, 54, 55, 87, 88, 90, 96, 105, 109, 118, 125, 131, 139, 140, 141, 142, 145, 146, 152, 160, 163, 172, 178, 180, 182, 183, 184, 188, 191, 195, 196, 198, 199, 202, 206, 207, 208, 209, 210, 215, 216, 222, 231, 245, 247, 249, 250, 251, 258, 260, 261, 262, 263, 274, 275, 276, 277, 282, 283], "differ": [1, 3, 4, 7, 8, 12, 13, 14, 15, 16, 17, 20, 21, 23, 24, 28, 35, 40, 44, 51, 53, 54, 56, 57, 65, 78, 80, 87, 88, 90, 93, 96, 98, 100, 103, 104, 105, 106, 107, 112, 113, 115, 137, 138, 139, 140, 142, 144, 145, 146, 148, 151, 152, 154, 156, 159, 160, 161, 163, 166, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 191, 192, 193, 195, 196, 199, 207, 208, 209, 210, 213, 214, 222, 226, 229, 231, 237, 239, 240, 241, 245, 250, 253, 255, 258, 259, 260, 261, 262, 265, 267, 268, 274, 275, 276, 277, 278, 279, 283, 285, 288], "set": [1, 2, 3, 7, 8, 12, 13, 14, 15, 17, 18, 19, 21, 23, 24, 28, 35, 40, 42, 47, 48, 51, 53, 54, 55, 57, 58, 60, 65, 67, 68, 73, 80, 87, 88, 92, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 110, 112, 113, 115, 117, 121, 122, 128, 135, 137, 138, 139, 140, 142, 145, 146, 147, 150, 151, 152, 154, 155, 160, 162, 169, 170, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 192, 193, 195, 196, 198, 199, 200, 202, 207, 208, 210, 214, 215, 222, 226, 227, 230, 238, 240, 242, 244, 250, 256, 258, 274, 276, 278, 279, 281, 282, 283, 288], "sum": [1, 2, 4, 5, 7, 10, 14, 17, 19, 23, 24, 36, 47, 54, 57, 77, 87, 95, 96, 106, 107, 109, 113, 121, 138, 139, 140, 146, 147, 149, 154, 161, 178, 179, 180, 181, 182, 188, 193, 195, 196, 204, 206, 207, 208, 226, 244, 259, 275, 277], "can": [1, 2, 3, 4, 5, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 28, 35, 36, 37, 39, 40, 41, 42, 44, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 65, 73, 78, 80, 87, 88, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 125, 128, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 222, 224, 225, 226, 227, 228, 230, 231, 232, 238, 239, 240, 241, 242, 243, 244, 245, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 262, 263, 265, 266, 267, 269, 274, 275, 276, 277, 278, 279, 281, 282, 283, 285, 287, 288, 289], "simpli": [1, 3, 7, 8, 12, 16, 24, 47, 48, 54, 58, 90, 98, 109, 112, 121, 122, 141, 142, 144, 146, 149, 154, 160, 161, 169, 175, 176, 178, 179, 180, 181, 184, 186, 188, 189, 193, 195, 196, 199, 208, 226, 240, 242, 243, 244, 262, 263, 265, 275, 282, 285, 287], "done": [1, 4, 7, 8, 12, 13, 17, 20, 21, 24, 54, 59, 87, 90, 100, 103, 105, 106, 107, 113, 138, 139, 142, 143, 146, 148, 155, 156, 159, 160, 162, 163, 172, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 189, 191, 195, 196, 200, 215, 230, 241, 254, 265, 267, 283, 285], "via": [1, 3, 4, 7, 8, 10, 20, 21, 23, 42, 59, 60, 80, 90, 105, 137, 138, 139, 142, 144, 154, 155, 161, 170, 177, 178, 183, 189, 191, 193, 195, 196, 198, 199, 206, 210, 214, 215, 222, 230, 238, 239, 241, 249, 252, 266, 269, 278, 281, 283], "loss_val": [1, 178], "item": [1, 2, 5, 8, 13, 14, 18, 37, 44, 54, 73, 102, 113, 121, 122, 125, 138, 139, 140, 145, 146, 154, 155, 177, 178, 180, 181, 182, 189, 191, 195, 225, 241, 262], "startswith": [1, 88], "parent": [1, 4, 5, 17, 113, 210], "As": [1, 2, 3, 7, 8, 12, 13, 14, 15, 17, 20, 24, 42, 47, 54, 55, 57, 80, 90, 93, 96, 98, 100, 103, 104, 105, 113, 115, 121, 122, 138, 139, 140, 141, 142, 143, 144, 152, 154, 155, 158, 159, 160, 161, 162, 169, 170, 172, 174, 176, 178, 179, 180, 181, 182, 183, 188, 191, 192, 195, 196, 198, 199, 202, 206, 209, 214, 222, 226, 230, 241, 245, 252, 258, 259, 262, 267, 277, 279, 282], "mani": [1, 2, 7, 8, 13, 17, 18, 19, 21, 23, 35, 36, 40, 41, 54, 56, 57, 70, 74, 80, 87, 95, 96, 98, 100, 103, 105, 107, 108, 109, 113, 115, 117, 121, 139, 142, 144, 148, 154, 156, 161, 163, 166, 171, 172, 178, 180, 181, 184, 192, 193, 195, 196, 199, 224, 225, 226, 228, 241, 245, 252, 258, 276, 283, 287], "other": [1, 7, 8, 9, 12, 13, 14, 17, 21, 24, 35, 36, 39, 44, 48, 51, 53, 54, 57, 58, 60, 61, 62, 73, 74, 80, 87, 88, 93, 95, 96, 98, 103, 105, 107, 109, 110, 112, 113, 121, 122, 125, 132, 134, 138, 140, 141, 142, 145, 146, 148, 150, 151, 152, 154, 155, 158, 159, 160, 161, 162, 166, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 189, 192, 193, 195, 196, 198, 199, 200, 208, 210, 225, 226, 228, 230, 231, 238, 239, 240, 241, 242, 243, 244, 245, 249, 250, 251, 252, 253, 259, 262, 265, 267, 274, 275, 276, 277, 279, 283, 285], "expect": [1, 4, 5, 7, 8, 13, 14, 17, 49, 51, 54, 56, 80, 90, 93, 95, 96, 98, 100, 103, 104, 105, 109, 110, 112, 113, 114, 122, 128, 141, 144, 148, 152, 155, 161, 162, 169, 170, 176, 177, 178, 179, 180, 181, 183, 191, 195, 196, 198, 209, 215, 222, 224, 225, 226, 231, 238, 241, 253, 255, 259, 262, 265, 281], "ani": [1, 2, 4, 7, 8, 9, 12, 13, 14, 15, 16, 17, 19, 20, 21, 24, 35, 45, 47, 49, 51, 54, 56, 58, 60, 95, 98, 100, 103, 105, 106, 108, 109, 112, 113, 115, 117, 122, 133, 138, 140, 142, 143, 145, 147, 149, 150, 154, 156, 158, 159, 162, 163, 169, 170, 171, 172, 174, 177, 178, 179, 181, 182, 186, 188, 191, 192, 195, 196, 200, 202, 204, 205, 207, 208, 210, 213, 222, 225, 228, 230, 232, 238, 240, 244, 249, 250, 252, 253, 254, 256, 258, 266, 268, 274, 275, 276, 277, 278, 281, 283, 285], "similar": [1, 3, 4, 5, 7, 12, 13, 14, 17, 18, 24, 44, 53, 54, 87, 88, 96, 98, 100, 103, 105, 106, 112, 113, 118, 121, 142, 145, 149, 154, 155, 170, 178, 180, 181, 182, 183, 184, 188, 189, 191, 195, 198, 200, 214, 225, 226, 240, 241, 249, 255, 259, 262, 266, 274, 275, 276, 277, 278, 279], "structur": [1, 5, 7, 8, 12, 17, 22, 23, 24, 36, 41, 42, 44, 53, 54, 57, 58, 90, 95, 98, 100, 104, 105, 106, 110, 115, 122, 137, 147, 150, 156, 159, 162, 163, 170, 171, 176, 178, 182, 189, 191, 193, 198, 239, 252, 254, 261, 277, 287, 289], "format": [1, 7, 15, 21, 24, 45, 102, 113, 117, 122, 132, 137, 138, 139, 141, 154, 159, 160, 177, 180, 182, 185, 188, 189, 191, 196, 198, 202, 215, 216, 224, 226, 261, 274, 276, 277, 283], "make": [1, 4, 5, 7, 8, 12, 13, 15, 17, 23, 24, 36, 40, 41, 45, 47, 48, 49, 51, 54, 55, 56, 58, 59, 60, 62, 73, 80, 93, 95, 98, 100, 102, 103, 105, 107, 108, 109, 111, 112, 113, 114, 117, 118, 122, 125, 128, 132, 137, 138, 139, 140, 142, 144, 145, 146, 147, 148, 152, 154, 155, 159, 160, 161, 162, 169, 170, 172, 175, 176, 178, 179, 180, 181, 182, 184, 189, 191, 192, 193, 195, 196, 198, 199, 200, 206, 208, 209, 210, 214, 215, 224, 225, 226, 230, 232, 239, 240, 241, 249, 250, 252, 255, 261, 263, 265, 267, 274, 275, 276, 277, 279, 287], "possibl": [1, 2, 4, 7, 8, 10, 12, 13, 17, 18, 21, 95, 96, 100, 103, 106, 109, 117, 140, 143, 147, 148, 149, 155, 156, 158, 159, 161, 162, 172, 177, 178, 180, 181, 184, 192, 193, 195, 196, 198, 199, 202, 213, 215, 225, 230, 241, 252, 258, 265, 279, 283, 285], "re": [1, 4, 7, 8, 9, 10, 13, 17, 20, 24, 28, 39, 41, 44, 48, 53, 54, 55, 96, 98, 100, 102, 103, 104, 105, 106, 113, 121, 128, 143, 145, 146, 155, 156, 158, 161, 166, 169, 171, 172, 177, 178, 179, 180, 181, 184, 195, 196, 198, 208, 210, 216, 225, 226, 230, 240, 241, 266, 267, 274, 285, 287], "across": [1, 4, 7, 12, 14, 17, 20, 23, 28, 44, 54, 57, 59, 60, 61, 87, 96, 103, 105, 115, 133, 138, 139, 140, 142, 150, 151, 152, 154, 156, 162, 172, 174, 176, 179, 181, 182, 192, 195, 196, 205, 208, 210, 213, 224, 239, 241, 242, 244, 249, 253, 255, 258, 259, 263], "modal": [1, 172, 224], "complex": [1, 8, 36, 37, 55, 72, 73, 95, 96, 100, 105, 115, 121, 122, 133, 138, 152, 166, 170, 172, 180, 182, 189, 192, 193, 195, 196, 209, 210, 232, 242, 252, 265, 279], "read": [1, 2, 7, 8, 9, 10, 17, 24, 41, 51, 54, 56, 80, 98, 109, 110, 113, 122, 128, 133, 139, 140, 141, 143, 144, 145, 146, 147, 154, 160, 169, 172, 177, 178, 179, 181, 184, 186, 189, 192, 193, 199, 225, 226, 255, 258, 266], "multipl": [1, 4, 7, 12, 13, 14, 17, 19, 20, 21, 23, 24, 44, 49, 53, 54, 58, 59, 60, 61, 65, 70, 87, 93, 95, 96, 100, 102, 103, 104, 105, 109, 113, 121, 133, 138, 140, 142, 143, 144, 145, 146, 152, 154, 156, 160, 162, 172, 174, 177, 178, 180, 181, 182, 184, 188, 189, 191, 193, 195, 196, 199, 202, 208, 214, 225, 226, 231, 240, 241, 242, 254, 258, 263, 265, 267, 278, 279, 283], "entri": [1, 14, 17, 58, 109, 112, 120, 122, 150, 155, 160, 176, 178, 180, 188, 195, 206, 243, 249, 265, 276, 277, 279, 282], "In": [1, 2, 3, 4, 5, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 28, 35, 36, 37, 39, 41, 42, 44, 47, 49, 53, 54, 55, 56, 57, 58, 60, 61, 62, 68, 73, 80, 87, 88, 90, 92, 93, 96, 98, 100, 102, 104, 105, 106, 107, 109, 110, 112, 113, 115, 118, 120, 121, 122, 128, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 159, 160, 161, 162, 163, 166, 167, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 222, 224, 225, 226, 228, 230, 231, 238, 239, 240, 241, 242, 243, 244, 245, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 262, 263, 265, 266, 267, 268, 269, 274, 275, 276, 277, 278, 279, 281, 282, 283, 285, 288], "word": [1, 8, 13, 14, 17, 48, 54, 80, 87, 96, 100, 105, 106, 108, 110, 111, 122, 137, 145, 146, 154, 167, 169, 170, 176, 182, 184, 196, 255, 261, 275, 277, 279], "allow": [1, 2, 7, 8, 9, 12, 13, 14, 15, 17, 24, 28, 35, 36, 37, 47, 54, 55, 56, 57, 58, 87, 88, 90, 93, 95, 96, 100, 103, 105, 107, 109, 110, 112, 113, 114, 115, 121, 138, 139, 140, 141, 142, 144, 145, 146, 147, 149, 152, 154, 155, 162, 163, 166, 169, 170, 172, 175, 176, 178, 179, 180, 182, 183, 184, 186, 191, 192, 193, 195, 196, 198, 199, 206, 210, 213, 222, 225, 226, 231, 238, 239, 240, 249, 258, 263, 265, 268, 274, 275, 279, 281, 288], "u": [1, 4, 7, 8, 9, 12, 13, 14, 17, 19, 21, 24, 35, 37, 48, 51, 54, 56, 57, 74, 87, 90, 93, 95, 96, 98, 100, 103, 105, 106, 107, 109, 112, 113, 118, 121, 139, 142, 145, 148, 150, 154, 155, 156, 159, 160, 161, 162, 163, 166, 169, 170, 171, 172, 174, 177, 178, 179, 181, 184, 189, 191, 192, 193, 195, 196, 199, 204, 224, 226, 228, 230, 238, 240, 253, 267, 274, 275, 277, 279, 281, 283, 287], "oblivi": [1, 178], "type": [1, 4, 7, 8, 12, 13, 17, 23, 24, 44, 53, 54, 55, 80, 87, 90, 96, 98, 99, 102, 104, 109, 113, 115, 118, 133, 138, 139, 142, 144, 156, 160, 171, 172, 175, 176, 178, 180, 181, 182, 183, 188, 191, 193, 195, 199, 202, 206, 207, 208, 215, 216, 222, 224, 238, 239, 241, 242, 248, 251, 258, 262, 274, 278, 281, 285], "being": [1, 3, 4, 7, 8, 13, 15, 17, 21, 51, 54, 57, 87, 96, 104, 105, 106, 107, 109, 113, 115, 128, 139, 142, 144, 148, 154, 155, 170, 172, 174, 176, 178, 179, 181, 193, 195, 196, 200, 207, 215, 226, 230, 241, 254, 258, 275, 276, 279, 283, 285], "run": [1, 2, 3, 4, 7, 9, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 28, 35, 36, 37, 40, 41, 42, 44, 45, 47, 48, 51, 53, 56, 57, 61, 62, 65, 68, 73, 77, 78, 87, 93, 95, 96, 98, 100, 102, 103, 104, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 125, 128, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 189, 192, 193, 196, 198, 199, 200, 202, 207, 208, 209, 210, 214, 216, 222, 225, 226, 227, 230, 232, 238, 240, 241, 245, 247, 249, 251, 252, 253, 254, 255, 256, 258, 260, 261, 265, 267, 268, 274, 275, 276, 277, 278, 279, 281, 282, 283, 287, 288, 289], "elementari": [1, 2], "onli": [1, 4, 7, 8, 10, 12, 13, 14, 16, 17, 18, 23, 24, 35, 42, 47, 48, 49, 51, 54, 58, 60, 61, 80, 87, 93, 95, 98, 100, 103, 105, 106, 107, 112, 113, 120, 122, 125, 128, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 158, 159, 163, 166, 169, 170, 171, 172, 174, 175, 176, 177, 178, 181, 182, 183, 184, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 204, 205, 206, 210, 213, 222, 225, 226, 231, 238, 241, 242, 243, 245, 249, 252, 253, 255, 258, 259, 262, 266, 267, 274, 275, 276, 277, 278, 279, 281, 282, 285, 287, 288, 289], "those": [1, 4, 7, 8, 10, 13, 14, 17, 21, 35, 42, 47, 93, 95, 103, 106, 112, 113, 118, 141, 142, 143, 145, 156, 159, 169, 174, 175, 176, 182, 184, 189, 191, 195, 196, 201, 202, 208, 222, 225, 226, 240, 249, 252, 254, 258, 267, 275, 283, 285, 287, 288], "keep": [1, 4, 8, 13, 14, 17, 35, 44, 47, 54, 57, 80, 87, 90, 98, 100, 103, 105, 107, 109, 110, 113, 121, 122, 136, 137, 138, 139, 140, 141, 142, 143, 146, 151, 152, 155, 160, 166, 172, 178, 182, 184, 195, 196, 199, 226, 241, 259], "didact": [1, 154], "ll": [1, 4, 7, 8, 12, 13, 19, 21, 24, 36, 37, 39, 44, 53, 54, 55, 82, 83, 84, 85, 93, 95, 96, 98, 100, 102, 103, 104, 106, 113, 115, 140, 145, 146, 152, 154, 155, 156, 158, 161, 166, 169, 171, 177, 178, 179, 181, 184, 189, 195, 196, 199, 200, 204, 205, 213, 226, 251, 256, 267, 274, 276, 278, 283], "displai": [1, 2, 7, 8, 15, 37, 48, 96, 102, 104, 120, 128, 148, 184, 188, 206, 209, 225, 226, 239], "each": [1, 2, 4, 7, 8, 9, 12, 13, 14, 15, 17, 19, 20, 21, 23, 24, 28, 35, 36, 37, 39, 40, 41, 44, 47, 48, 49, 53, 54, 56, 57, 58, 60, 61, 65, 70, 80, 87, 88, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 110, 112, 113, 117, 120, 121, 122, 128, 133, 137, 138, 139, 140, 142, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 158, 159, 161, 162, 163, 166, 169, 170, 171, 172, 174, 176, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 191, 195, 196, 198, 199, 200, 205, 206, 209, 210, 215, 222, 224, 225, 226, 228, 230, 231, 232, 238, 239, 240, 241, 243, 244, 255, 256, 258, 259, 263, 265, 266, 268, 274, 277, 279, 283], "popul": [1, 35, 47, 54, 93, 103, 139, 155, 162, 178, 180, 205, 213, 240, 250, 265], "later": [1, 3, 4, 5, 7, 8, 14, 19, 35, 44, 51, 54, 80, 93, 96, 100, 105, 109, 110, 113, 122, 138, 139, 141, 142, 146, 147, 149, 154, 156, 158, 159, 160, 161, 162, 166, 171, 174, 178, 179, 182, 183, 184, 189, 191, 192, 195, 196, 199, 204, 205, 207, 209, 213, 222, 225, 226, 227, 230, 238, 241, 245, 249, 250, 251, 252, 254, 255, 256, 263, 265, 266, 269, 274, 282], "stage": [1, 17, 20, 100, 113, 174, 206, 207, 213, 268, 278, 288], "start": [1, 5, 7, 8, 14, 20, 21, 23, 24, 28, 35, 39, 47, 48, 54, 55, 57, 58, 59, 60, 65, 80, 93, 95, 96, 99, 100, 103, 104, 105, 108, 109, 113, 114, 115, 118, 131, 133, 137, 139, 141, 142, 143, 144, 145, 146, 147, 148, 154, 160, 161, 162, 169, 170, 172, 177, 179, 180, 181, 184, 188, 189, 191, 193, 195, 196, 198, 200, 201, 206, 207, 214, 222, 226, 229, 231, 237, 239, 244, 247, 249, 250, 252, 259, 260, 261, 263, 265, 267, 269, 276, 281, 283, 284], "solv": [1, 8, 17, 54, 56, 105, 112, 128, 170, 178, 180, 182, 226, 230, 241, 276], "task": [1, 8, 16, 17, 21, 28, 40, 41, 54, 104, 105, 106, 112, 120, 128, 133, 134, 137, 138, 145, 155, 170, 172, 178, 179, 184, 186, 191, 198, 226, 231, 240, 241, 249, 255, 258, 283], "strategi": [1, 7, 21, 23, 28, 57, 87, 137, 146, 154, 160, 161, 171, 172, 180, 181, 202, 207, 209, 210, 216, 241, 283], "predict": [1, 24, 36, 39, 40, 41, 42, 47, 48, 54, 57, 67, 68, 72, 73, 74, 77, 78, 95, 96, 98, 100, 104, 105, 106, 110, 112, 113, 121, 142, 144, 145, 146, 156, 161, 162, 172, 179, 184, 189, 196, 198, 214, 224, 228, 255, 260, 283], "henc": [1, 17, 21, 44, 47, 53, 87, 138, 143, 152, 163, 166, 172, 175, 178, 180, 182, 196, 214, 226, 255, 283], "our": [1, 2, 3, 4, 5, 7, 8, 10, 12, 13, 15, 20, 21, 24, 35, 36, 37, 39, 40, 41, 44, 45, 47, 48, 49, 53, 54, 55, 56, 57, 58, 60, 65, 67, 68, 70, 72, 73, 74, 80, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 110, 112, 113, 115, 118, 120, 121, 128, 137, 138, 139, 141, 144, 145, 146, 147, 149, 150, 151, 155, 158, 159, 160, 161, 162, 163, 166, 170, 171, 172, 174, 176, 178, 179, 180, 181, 183, 184, 186, 189, 191, 193, 195, 196, 198, 199, 200, 201, 205, 207, 208, 213, 214, 224, 226, 240, 245, 250, 251, 259, 260, 262, 263, 267, 269, 274, 275, 276, 277, 282, 283, 287], "two": [1, 4, 7, 8, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 28, 35, 37, 40, 41, 44, 45, 47, 53, 54, 55, 57, 62, 80, 88, 90, 93, 95, 96, 98, 100, 103, 105, 106, 107, 109, 110, 112, 113, 114, 115, 120, 121, 128, 138, 139, 144, 145, 147, 148, 149, 151, 152, 154, 155, 158, 159, 160, 161, 162, 163, 166, 170, 171, 172, 174, 175, 176, 178, 179, 180, 182, 183, 184, 191, 196, 198, 199, 200, 202, 206, 210, 213, 214, 222, 226, 228, 230, 231, 238, 240, 241, 242, 250, 252, 254, 258, 259, 262, 263, 265, 267, 268, 275, 277, 279, 281, 283, 285], "constructor": [1, 8, 13, 14, 15, 72, 74, 90, 100, 104, 121, 138, 139, 152, 172, 175, 176, 178, 180, 182, 225, 226, 277, 285], "both": [1, 2, 7, 8, 12, 13, 14, 15, 17, 20, 24, 28, 37, 54, 56, 57, 65, 80, 87, 90, 96, 103, 104, 105, 112, 113, 120, 121, 139, 140, 142, 144, 148, 151, 152, 154, 158, 160, 161, 163, 166, 172, 176, 178, 180, 181, 182, 183, 184, 192, 195, 196, 198, 199, 206, 207, 208, 210, 214, 215, 222, 224, 225, 226, 238, 240, 249, 250, 255, 258, 262, 267, 268, 274, 277, 278], "compat": [1, 5, 7, 8, 9, 12, 14, 21, 55, 102, 103, 109, 114, 141, 147, 155, 183, 193, 195, 254, 255, 282, 285], "comput": [1, 3, 4, 5, 7, 8, 12, 14, 15, 16, 19, 20, 21, 24, 28, 40, 44, 48, 51, 53, 54, 56, 57, 58, 62, 65, 67, 68, 70, 73, 77, 78, 80, 88, 90, 95, 96, 98, 100, 103, 104, 105, 106, 107, 108, 113, 115, 117, 121, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 154, 155, 158, 160, 162, 169, 170, 171, 172, 174, 176, 177, 178, 179, 181, 183, 184, 188, 191, 192, 193, 195, 196, 198, 199, 200, 202, 204, 205, 213, 214, 222, 225, 226, 228, 230, 232, 240, 252, 255, 258, 263, 265, 267, 278, 279, 283, 285, 287, 288, 289], "fit": [1, 8, 13, 14, 65, 93, 112, 121, 138, 139, 140, 142, 152, 172, 182, 196, 225, 258], "gener": [1, 7, 12, 13, 14, 17, 20, 21, 23, 28, 42, 47, 48, 54, 56, 58, 77, 78, 87, 90, 95, 96, 98, 102, 103, 104, 105, 107, 109, 112, 113, 114, 121, 123, 125, 128, 132, 134, 137, 142, 143, 145, 147, 152, 154, 156, 160, 161, 162, 163, 166, 167, 169, 170, 171, 172, 176, 178, 180, 182, 183, 184, 185, 186, 188, 189, 191, 193, 195, 196, 198, 199, 202, 207, 208, 213, 214, 215, 222, 231, 240, 243, 250, 254, 255, 256, 258, 261, 265, 266, 267, 268, 269, 274, 275, 276, 278, 279, 281, 283], "crucial": [1, 2, 15, 17, 87, 109, 155, 172, 178, 196, 241], "convert_to_funct": 1, "extract": [1, 7, 54, 57, 80, 102, 105, 128, 137, 145, 146, 158, 160, 171, 178, 184, 193, 195, 198, 200, 206, 213, 228], "convert": [1, 7, 13, 15, 24, 36, 37, 44, 45, 48, 54, 56, 57, 60, 98, 100, 103, 105, 113, 115, 117, 122, 131, 137, 140, 145, 146, 177, 178, 180, 181, 189, 196, 208, 215, 216, 224, 238, 241, 267, 274, 275, 277, 278, 279, 281], "strictli": [1, 103, 178], "speak": [1, 12, 47, 103, 143, 154, 241], "one": [1, 4, 5, 7, 8, 9, 10, 12, 14, 15, 17, 18, 21, 23, 24, 35, 37, 39, 44, 45, 49, 51, 53, 54, 56, 57, 60, 61, 65, 80, 90, 93, 95, 96, 98, 100, 103, 104, 105, 106, 108, 109, 110, 112, 113, 118, 121, 122, 125, 128, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 151, 152, 154, 155, 156, 158, 159, 160, 161, 169, 170, 171, 172, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 191, 192, 195, 196, 198, 200, 207, 208, 209, 210, 226, 228, 230, 231, 241, 242, 244, 252, 253, 254, 255, 258, 259, 262, 265, 266, 267, 274, 275, 276, 278, 279, 283, 287], "perfectli": [1, 17], "howev": [1, 4, 5, 7, 8, 9, 10, 12, 13, 15, 17, 18, 19, 21, 35, 42, 49, 51, 54, 56, 57, 80, 90, 93, 105, 106, 121, 128, 142, 143, 147, 148, 149, 154, 155, 156, 159, 163, 169, 172, 175, 176, 179, 180, 181, 182, 183, 184, 189, 191, 192, 193, 195, 196, 200, 202, 208, 209, 213, 214, 226, 230, 238, 240, 241, 245, 252, 255, 258, 262, 268, 269, 275, 276, 279, 283, 287], "encourag": [1, 8, 24, 100, 179, 184, 191], "usag": [1, 3, 4, 14, 16, 18, 87, 95, 120, 131, 132, 136, 137, 138, 140, 143, 154, 155, 160, 161, 174, 178, 180, 182, 183, 185, 188, 199, 202, 207, 215, 216, 222, 225, 239, 241, 253, 258, 260, 261, 263, 267, 269, 278, 279], "doe": [1, 2, 4, 7, 8, 12, 16, 17, 18, 19, 24, 35, 45, 47, 51, 77, 78, 80, 90, 95, 96, 98, 100, 102, 103, 104, 105, 107, 109, 112, 113, 115, 118, 121, 122, 128, 138, 139, 140, 141, 147, 149, 152, 154, 155, 161, 162, 163, 169, 170, 172, 174, 177, 178, 179, 181, 182, 183, 184, 188, 189, 192, 193, 195, 196, 198, 199, 200, 207, 222, 225, 226, 230, 238, 240, 241, 252, 254, 258, 265, 266, 267, 275, 276, 277, 285, 287], "often": [1, 7, 8, 13, 17, 21, 44, 54, 80, 93, 95, 96, 98, 103, 105, 107, 109, 112, 113, 121, 122, 142, 143, 144, 146, 162, 170, 195, 196, 204, 207, 225, 240, 241, 265, 279, 283], "same": [1, 2, 3, 4, 5, 7, 8, 9, 12, 13, 14, 15, 18, 21, 24, 35, 36, 42, 44, 47, 48, 51, 54, 56, 57, 58, 60, 70, 78, 80, 90, 93, 95, 103, 104, 105, 107, 109, 110, 112, 113, 115, 118, 120, 121, 122, 138, 139, 140, 141, 142, 143, 145, 147, 148, 151, 152, 154, 156, 158, 160, 161, 162, 163, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 191, 193, 195, 196, 199, 207, 208, 222, 225, 226, 231, 233, 234, 235, 236, 238, 241, 244, 249, 250, 253, 254, 258, 259, 262, 263, 266, 268, 274, 275, 276, 277, 279, 283], "usual": [1, 7, 8, 12, 19, 24, 47, 96, 98, 100, 102, 103, 107, 108, 110, 112, 113, 128, 142, 143, 146, 148, 149, 152, 154, 155, 160, 163, 169, 172, 176, 178, 195, 199, 225, 230, 231, 241, 258, 287], "former": [1, 7, 145, 146, 184], "some": [1, 3, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 21, 24, 35, 36, 37, 40, 44, 45, 47, 48, 51, 53, 54, 55, 56, 57, 67, 73, 80, 87, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 118, 120, 121, 122, 137, 138, 139, 141, 144, 145, 146, 147, 148, 149, 150, 152, 154, 155, 156, 158, 159, 160, 161, 166, 169, 171, 172, 174, 176, 178, 179, 181, 182, 184, 186, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 208, 215, 225, 226, 228, 230, 231, 232, 240, 241, 242, 245, 252, 253, 255, 258, 263, 265, 267, 274, 275, 276, 277, 279, 281, 282, 283, 285, 287], "lag": [1, 178], "absolut": [1, 8, 13, 87, 107, 176, 179, 200, 240], "dilut": 1, "move": [1, 7, 10, 15, 29, 30, 31, 32, 33, 34, 36, 41, 44, 47, 51, 53, 81, 94, 95, 107, 113, 138, 139, 140, 142, 151, 152, 155, 157, 169, 170, 172, 175, 179, 181, 182, 187, 188, 190, 194, 198, 206, 207, 208, 214, 226, 240, 241, 270, 273, 275, 288], "averag": [1, 3, 24, 54, 57, 65, 87, 93, 96, 98, 102, 104, 105, 113, 138, 141, 146, 154, 171, 178, 179, 182, 184, 188, 200, 226, 241], "These": [1, 7, 12, 14, 15, 17, 21, 24, 42, 47, 54, 57, 60, 65, 87, 93, 100, 108, 110, 112, 113, 120, 128, 134, 135, 154, 162, 178, 181, 183, 184, 191, 192, 195, 196, 199, 201, 214, 226, 240, 241, 249, 250, 252, 267, 281, 283], "associ": [1, 4, 7, 8, 12, 13, 36, 37, 55, 87, 96, 149, 158, 172, 176, 183, 191, 196, 228, 238, 241, 254, 266, 275, 283, 285], "One": [1, 2, 4, 7, 8, 13, 14, 18, 54, 56, 80, 87, 95, 100, 103, 105, 106, 107, 109, 138, 139, 140, 141, 142, 143, 146, 152, 154, 156, 169, 170, 172, 186, 189, 192, 193, 195, 196, 198, 199, 207, 208, 226, 232, 238, 240, 241, 255, 265, 276, 287], "advantag": [1, 3, 8, 17, 21, 54, 90, 103, 106, 113, 133, 139, 140, 143, 154, 155, 170, 172, 178, 193, 199, 207, 208, 215, 222, 241, 250, 254, 277, 283], "match": [1, 7, 13, 17, 21, 24, 73, 98, 103, 105, 113, 115, 118, 121, 122, 156, 160, 163, 169, 171, 178, 181, 193, 195, 214, 215, 216, 225, 228, 232, 242, 258, 275, 277, 283], "exactli": [1, 7, 12, 13, 15, 21, 35, 47, 56, 57, 98, 109, 112, 113, 115, 121, 155, 160, 170, 195, 196, 283], "current": [1, 4, 7, 8, 12, 13, 14, 15, 17, 18, 24, 36, 41, 44, 54, 57, 67, 80, 87, 96, 105, 113, 121, 128, 138, 139, 141, 143, 144, 145, 146, 154, 155, 158, 162, 163, 171, 172, 174, 176, 178, 179, 180, 181, 182, 183, 184, 188, 195, 196, 199, 208, 214, 231, 241, 249, 252, 262, 265, 274, 276, 277, 279], "configur": [1, 5, 7, 8, 17, 23, 24, 28, 54, 55, 87, 96, 104, 131, 139, 142, 150, 152, 160, 169, 178, 181, 188, 191, 196, 200, 206, 214, 215, 216, 241, 245, 250, 252, 255, 258, 260, 267, 269, 278], "pessimist": [1, 178], "bound": [1, 54, 122, 140, 144, 160, 178, 179, 188, 195, 196, 198, 199, 225, 226, 231, 241, 258, 267], "pai": [1, 13, 49, 54, 141, 241, 253], "attent": [1, 13, 49, 54, 100, 132, 134, 137, 141, 142, 145, 146, 167, 185, 186, 252, 261, 263, 267, 279, 289], "create_target_param": 1, "keyword": [1, 7, 176, 178, 191, 230, 238], "argument": [1, 2, 4, 5, 7, 8, 12, 17, 19, 35, 41, 44, 47, 48, 53, 56, 60, 74, 87, 95, 96, 100, 102, 103, 105, 107, 110, 112, 114, 120, 121, 122, 138, 139, 146, 151, 152, 154, 155, 156, 160, 161, 171, 172, 174, 175, 176, 178, 180, 181, 182, 183, 188, 191, 193, 195, 196, 200, 206, 209, 213, 225, 226, 230, 231, 238, 239, 241, 242, 252, 258, 262, 263, 265, 276, 278, 287, 288], "below": [1, 2, 4, 8, 13, 14, 15, 17, 20, 23, 24, 28, 37, 42, 44, 47, 49, 53, 56, 57, 58, 59, 60, 61, 62, 87, 90, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 125, 140, 141, 142, 144, 147, 148, 150, 151, 152, 154, 155, 158, 160, 163, 169, 175, 178, 179, 180, 181, 182, 183, 188, 189, 191, 193, 195, 196, 198, 199, 200, 205, 206, 207, 208, 209, 213, 214, 216, 222, 225, 226, 230, 231, 245, 248, 249, 252, 253, 254, 255, 258, 259, 265, 267, 268, 269, 275, 276, 277, 278, 279, 281, 282, 285], "tell": [1, 9, 19, 23, 74, 93, 95, 98, 100, 104, 112, 113, 121, 144, 145, 155, 156, 158, 169, 179, 180, 182, 184, 195, 226, 231], "creat": [1, 2, 7, 8, 9, 13, 15, 17, 19, 20, 22, 23, 24, 28, 35, 36, 39, 42, 44, 45, 47, 48, 51, 53, 55, 56, 57, 67, 68, 70, 72, 73, 74, 77, 78, 80, 87, 90, 95, 96, 98, 100, 102, 104, 105, 106, 108, 110, 112, 114, 115, 118, 121, 122, 125, 136, 137, 139, 140, 141, 142, 147, 149, 152, 154, 155, 158, 162, 163, 167, 170, 171, 172, 174, 175, 177, 178, 179, 181, 182, 184, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 204, 205, 207, 208, 210, 213, 214, 222, 225, 226, 228, 231, 232, 238, 239, 242, 243, 244, 245, 252, 254, 255, 259, 260, 261, 263, 266, 267, 269, 274, 277, 279, 281, 285, 288], "If": [1, 2, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 28, 35, 36, 39, 41, 44, 47, 48, 49, 51, 53, 54, 55, 57, 58, 60, 65, 67, 80, 87, 93, 95, 98, 100, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 121, 122, 125, 128, 138, 139, 140, 141, 142, 143, 146, 148, 152, 154, 155, 156, 158, 160, 161, 163, 169, 170, 171, 172, 175, 177, 178, 179, 180, 181, 182, 183, 184, 188, 191, 193, 195, 196, 198, 199, 200, 202, 207, 208, 215, 222, 224, 225, 227, 230, 231, 238, 239, 240, 241, 242, 244, 245, 252, 253, 258, 262, 265, 266, 267, 268, 274, 275, 277, 278, 279, 282, 283, 285, 287, 288], "fals": [1, 2, 4, 5, 8, 9, 13, 14, 17, 24, 37, 42, 47, 60, 67, 68, 87, 88, 95, 102, 109, 121, 122, 128, 138, 139, 140, 142, 148, 158, 160, 163, 169, 170, 172, 177, 178, 180, 181, 189, 191, 193, 195, 204, 214, 215, 216, 225, 227, 238, 241, 242, 248, 255, 258, 259, 262, 265, 268, 275, 276, 277, 278, 281, 282, 283, 288], "see": [1, 2, 3, 4, 5, 7, 8, 10, 12, 13, 14, 17, 19, 21, 23, 24, 28, 36, 40, 41, 44, 48, 49, 51, 53, 54, 55, 56, 57, 60, 65, 80, 87, 88, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 120, 122, 138, 139, 140, 142, 144, 145, 146, 147, 148, 149, 152, 154, 155, 156, 158, 159, 160, 162, 163, 166, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 202, 205, 208, 209, 210, 213, 214, 217, 222, 224, 225, 226, 231, 238, 239, 240, 241, 242, 243, 244, 249, 250, 251, 253, 254, 256, 258, 262, 263, 265, 267, 274, 276, 277, 278, 281, 282, 283, 285, 287, 288, 289], "target_actor_network_param": 1, "attribut": [1, 8, 14, 17, 35, 47, 51, 58, 87, 90, 100, 112, 113, 118, 143, 155, 158, 163, 170, 174, 176, 195, 202, 225, 244, 255, 260, 279], "still": [1, 7, 8, 12, 13, 14, 15, 17, 18, 21, 23, 24, 51, 57, 80, 93, 95, 103, 105, 109, 113, 120, 122, 139, 145, 146, 147, 152, 154, 155, 158, 159, 163, 169, 172, 182, 193, 195, 196, 207, 208, 210, 214, 240, 241, 253, 259, 262, 263, 267, 268, 274, 276, 278, 283], "access": [1, 7, 8, 13, 17, 21, 24, 36, 37, 55, 73, 80, 93, 95, 98, 100, 103, 104, 105, 110, 113, 121, 122, 139, 143, 150, 154, 170, 172, 177, 179, 181, 191, 192, 195, 200, 207, 210, 222, 240, 244, 249, 266, 274, 275, 277, 278, 281, 283], "just": [1, 2, 3, 4, 7, 8, 12, 13, 17, 19, 20, 21, 24, 35, 48, 49, 51, 54, 55, 56, 57, 58, 61, 77, 78, 90, 93, 95, 96, 98, 100, 103, 105, 106, 107, 109, 110, 112, 113, 122, 128, 138, 139, 142, 144, 145, 146, 152, 155, 160, 161, 166, 169, 170, 172, 175, 176, 177, 178, 179, 180, 181, 182, 189, 191, 192, 193, 195, 196, 198, 201, 208, 210, 215, 226, 227, 228, 240, 241, 244, 245, 258, 267, 268, 276, 283], "detach": [1, 2, 8, 14, 35, 95, 103, 109, 141, 166, 171, 263], "version": [1, 3, 4, 7, 8, 12, 13, 15, 17, 96, 98, 100, 103, 104, 113, 114, 115, 117, 118, 138, 139, 143, 154, 155, 156, 158, 161, 163, 170, 172, 174, 175, 176, 177, 178, 186, 188, 189, 191, 196, 198, 199, 200, 213, 214, 215, 216, 225, 226, 230, 240, 245, 250, 254, 265, 266, 267, 269, 274, 282, 288], "q": [1, 47, 54, 134, 137, 142, 162, 183, 191, 216, 283], "base": [1, 7, 8, 13, 14, 17, 20, 21, 23, 28, 37, 48, 54, 62, 80, 90, 93, 95, 96, 100, 104, 105, 107, 115, 120, 122, 133, 134, 137, 138, 139, 140, 141, 144, 145, 147, 155, 162, 172, 174, 175, 176, 179, 181, 184, 188, 189, 191, 192, 195, 196, 198, 206, 214, 225, 238, 240, 241, 250, 254, 255, 263, 268, 276, 278, 281, 282, 283, 289], "empir": [1, 166, 178], "bootstrap": [1, 155], "td": 1, "0": [1, 2, 3, 4, 5, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 56, 57, 60, 68, 69, 73, 75, 77, 78, 79, 80, 87, 90, 91, 93, 95, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 128, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 196, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 222, 226, 227, 228, 230, 231, 232, 237, 238, 240, 241, 243, 245, 247, 248, 251, 252, 253, 254, 255, 256, 258, 259, 261, 262, 263, 265, 266, 267, 268, 274, 275, 277, 278, 279, 282, 283, 284, 287, 288], "low": [1, 4, 7, 8, 17, 19, 28, 54, 57, 73, 87, 100, 107, 121, 132, 137, 145, 178, 188, 195, 199, 215, 216, 240, 281], "varianc": [1, 8, 24, 102, 178], "bia": [1, 2, 7, 8, 24, 47, 51, 73, 107, 113, 121, 122, 138, 147, 148, 155, 161, 176, 178, 182, 183, 199, 238, 262, 278, 279, 283], "mean": [1, 2, 4, 7, 8, 13, 15, 17, 24, 40, 51, 54, 56, 57, 73, 80, 87, 90, 95, 98, 100, 102, 103, 105, 106, 107, 109, 112, 113, 120, 121, 122, 139, 142, 144, 145, 148, 152, 154, 163, 170, 172, 177, 178, 179, 181, 182, 184, 188, 189, 191, 195, 196, 200, 202, 204, 208, 226, 230, 231, 240, 241, 245, 255, 258, 266, 274, 276, 279, 282, 287, 288], "obtain": [1, 28, 35, 40, 54, 73, 93, 113, 121, 144, 145, 148, 154, 161, 171, 178, 179, 181, 188, 191, 198, 231, 254, 266], "reward": [1, 17, 155, 162, 178, 179, 180, 182], "noth": [1, 80, 98, 113, 149, 172, 178, 182, 188, 262], "els": [1, 5, 7, 9, 12, 14, 23, 24, 51, 54, 93, 95, 102, 112, 113, 114, 139, 140, 154, 174, 175, 178, 180, 181, 182, 189, 191, 193, 195, 206, 210, 225, 255, 259, 263, 268, 278, 283], "mont": 1, "carlo": 1, "1": [1, 2, 3, 4, 5, 7, 8, 9, 12, 14, 15, 17, 18, 19, 20, 21, 23, 28, 35, 36, 37, 39, 45, 47, 51, 54, 57, 58, 60, 68, 73, 80, 91, 93, 95, 96, 98, 100, 102, 103, 105, 106, 107, 109, 110, 112, 113, 114, 117, 118, 120, 121, 122, 125, 128, 138, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 158, 159, 160, 161, 162, 163, 167, 169, 170, 171, 176, 177, 178, 179, 180, 181, 182, 183, 191, 193, 196, 199, 202, 206, 207, 208, 209, 210, 214, 215, 216, 222, 225, 230, 232, 239, 241, 248, 249, 254, 255, 258, 259, 263, 265, 267, 268, 269, 274, 275, 276, 277, 278, 279, 282, 283, 285, 288, 289], "case": [1, 2, 3, 4, 7, 8, 9, 12, 13, 14, 16, 17, 20, 21, 35, 42, 47, 54, 56, 65, 73, 80, 87, 90, 95, 96, 102, 103, 105, 106, 107, 109, 110, 112, 113, 118, 121, 122, 133, 138, 139, 140, 142, 143, 144, 147, 148, 149, 154, 155, 156, 158, 160, 161, 163, 166, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 191, 193, 195, 196, 198, 199, 208, 224, 225, 226, 231, 232, 238, 240, 244, 245, 250, 252, 253, 255, 258, 262, 263, 267, 274, 276, 277, 278, 279, 281, 282, 283, 285, 287, 288], "whole": [1, 3, 48, 51, 100, 113, 122, 137, 141, 154, 176, 178, 184, 196, 245, 275, 287], "sequenc": [1, 7, 8, 15, 44, 53, 54, 72, 73, 100, 106, 108, 111, 112, 121, 122, 137, 145, 146, 155, 167, 170, 178, 183, 185, 192, 199, 204, 205, 210, 213, 225, 231, 241, 261, 263, 267, 279, 287, 289], "upcom": 1, "intermedi": [1, 81, 95, 100, 103, 133, 150, 158, 160, 161, 162, 167, 169, 172, 185, 194, 199, 200, 226, 232, 283], "lambda": [1, 7, 113, 147, 177, 180, 195, 225, 226, 283], "also": [1, 2, 4, 5, 7, 8, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 28, 35, 41, 44, 47, 51, 53, 54, 56, 57, 58, 59, 65, 73, 80, 87, 90, 93, 95, 96, 98, 100, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 120, 121, 122, 138, 139, 141, 142, 143, 144, 145, 146, 148, 149, 152, 154, 155, 158, 160, 161, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 188, 191, 193, 195, 196, 198, 199, 200, 202, 205, 207, 208, 209, 210, 213, 214, 215, 216, 222, 225, 226, 227, 230, 231, 238, 239, 240, 241, 243, 244, 245, 249, 250, 251, 253, 254, 256, 258, 259, 262, 263, 265, 269, 274, 275, 276, 277, 282, 283, 285, 287, 288], "compromis": 1, "easi": [1, 2, 7, 8, 28, 37, 48, 49, 56, 73, 95, 96, 103, 105, 107, 139, 140, 142, 144, 154, 161, 166, 170, 174, 178, 188, 192, 195, 196, 215, 226, 240, 255, 268, 283, 287], "valueestim": 1, "enum": 1, "pointer": [1, 7, 8, 10, 181], "defin": [1, 2, 7, 9, 15, 17, 18, 19, 20, 21, 23, 35, 40, 41, 42, 45, 47, 49, 57, 66, 69, 70, 72, 73, 74, 80, 90, 93, 95, 100, 102, 104, 106, 107, 112, 113, 115, 118, 122, 131, 138, 139, 143, 145, 147, 150, 154, 155, 156, 159, 162, 166, 169, 171, 172, 179, 180, 181, 183, 186, 188, 189, 192, 193, 195, 199, 200, 204, 207, 208, 214, 215, 229, 230, 231, 237, 238, 245, 247, 251, 253, 254, 255, 259, 260, 261, 265, 274, 281, 282, 283], "default": [1, 3, 4, 5, 7, 8, 12, 13, 14, 18, 21, 24, 28, 35, 40, 44, 47, 49, 54, 56, 57, 60, 67, 68, 87, 98, 100, 102, 103, 107, 109, 114, 118, 121, 128, 137, 138, 139, 140, 141, 142, 145, 154, 155, 156, 158, 160, 163, 169, 172, 175, 177, 178, 180, 181, 182, 188, 189, 191, 193, 195, 196, 199, 202, 207, 208, 214, 215, 222, 226, 229, 230, 231, 237, 239, 241, 244, 245, 248, 249, 250, 253, 255, 258, 259, 261, 262, 263, 265, 268, 277, 278, 281, 282, 285, 288], "here": [1, 2, 3, 4, 7, 8, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 28, 37, 40, 41, 44, 45, 48, 51, 53, 55, 56, 57, 58, 60, 74, 80, 86, 87, 90, 93, 95, 96, 98, 100, 103, 104, 105, 107, 109, 110, 112, 113, 120, 121, 122, 125, 128, 138, 139, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 169, 170, 171, 172, 176, 178, 179, 181, 182, 183, 184, 188, 189, 192, 193, 195, 196, 198, 199, 205, 208, 209, 214, 215, 225, 226, 227, 230, 231, 241, 245, 250, 252, 255, 258, 262, 269, 274, 276, 277, 278, 279, 281, 283], "take": [1, 2, 3, 4, 7, 8, 9, 12, 14, 15, 17, 18, 19, 20, 21, 24, 36, 37, 44, 47, 48, 51, 53, 54, 55, 56, 57, 73, 80, 87, 90, 95, 96, 98, 100, 102, 103, 104, 105, 107, 109, 110, 112, 113, 118, 121, 122, 128, 141, 142, 143, 144, 145, 146, 147, 149, 152, 154, 159, 161, 162, 169, 172, 177, 178, 179, 180, 181, 182, 184, 188, 189, 191, 193, 195, 196, 198, 199, 207, 208, 214, 215, 216, 226, 227, 228, 231, 238, 240, 241, 242, 243, 244, 245, 250, 255, 258, 263, 267, 269, 274, 277, 279, 281, 283, 287], "simplest": [1, 8, 35, 51, 95, 103, 107, 155, 178, 184, 241], "show": [1, 7, 13, 14, 19, 21, 23, 24, 28, 37, 48, 56, 57, 65, 80, 87, 88, 90, 93, 95, 96, 98, 100, 103, 104, 113, 118, 120, 138, 141, 144, 145, 146, 148, 149, 152, 155, 160, 161, 163, 172, 175, 177, 178, 179, 180, 182, 188, 189, 191, 193, 195, 196, 199, 200, 205, 206, 207, 208, 210, 215, 216, 222, 225, 226, 231, 239, 240, 241, 245, 254, 255, 258, 259, 262, 274, 283], "chang": [1, 2, 7, 8, 9, 13, 14, 15, 17, 24, 28, 35, 44, 47, 53, 55, 56, 57, 58, 60, 87, 88, 90, 93, 95, 96, 98, 99, 104, 105, 106, 108, 109, 110, 115, 122, 131, 137, 138, 141, 142, 144, 145, 147, 150, 151, 154, 155, 158, 160, 161, 162, 169, 170, 172, 175, 176, 180, 188, 191, 193, 195, 196, 199, 200, 202, 205, 206, 207, 208, 213, 215, 225, 226, 229, 237, 238, 239, 241, 242, 248, 253, 254, 255, 256, 258, 261, 267, 268, 276, 278, 279, 281, 282, 288], "instruct": [1, 8, 24, 28, 39, 96, 99, 102, 104, 145, 146, 155, 158, 174, 176, 178, 180, 182, 184, 202, 214, 215, 222, 224, 241, 258, 260, 288], "queri": [1, 17, 54, 98, 103, 122, 141, 181, 183, 198, 199, 263, 279], "correspond": [1, 2, 3, 4, 7, 8, 12, 13, 15, 17, 18, 36, 37, 41, 47, 54, 60, 87, 95, 96, 100, 102, 107, 110, 120, 122, 138, 143, 144, 147, 160, 169, 174, 176, 178, 181, 184, 186, 188, 189, 191, 193, 195, 196, 198, 199, 208, 224, 230, 231, 241, 258, 260, 266, 277, 282], "make_value_estim": 1, "central": [1, 12, 80, 95, 103, 104, 110, 112, 150, 244], "quit": [1, 8, 21, 54, 80, 143, 154, 169, 178, 182, 195, 196, 207, 210, 213, 226, 240, 274, 283], "weight": [1, 2, 3, 7, 8, 15, 16, 17, 21, 24, 28, 35, 36, 47, 48, 54, 67, 68, 71, 73, 74, 75, 77, 78, 80, 95, 98, 100, 103, 104, 105, 107, 108, 110, 113, 122, 128, 136, 137, 138, 145, 147, 148, 150, 155, 156, 160, 161, 163, 169, 170, 171, 176, 178, 179, 182, 184, 188, 191, 192, 196, 199, 207, 214, 227, 228, 238, 243, 244, 248, 255, 261, 262, 267, 278, 281, 283, 285], "when": [1, 4, 7, 8, 12, 13, 14, 15, 17, 18, 19, 21, 23, 35, 37, 40, 42, 44, 47, 48, 49, 51, 53, 54, 55, 57, 58, 60, 65, 80, 87, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 109, 112, 113, 114, 117, 118, 120, 121, 122, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 151, 152, 154, 155, 158, 159, 160, 162, 163, 166, 169, 170, 172, 175, 176, 178, 179, 180, 182, 183, 184, 188, 191, 193, 195, 196, 198, 199, 200, 202, 205, 206, 208, 209, 210, 214, 216, 222, 225, 226, 228, 230, 231, 232, 238, 240, 241, 242, 244, 249, 250, 252, 253, 255, 258, 259, 260, 265, 267, 274, 277, 278, 279, 281, 282, 283, 285, 288], "must": [1, 2, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 36, 37, 54, 57, 80, 90, 95, 96, 103, 106, 112, 117, 118, 122, 139, 152, 154, 155, 156, 158, 172, 178, 181, 188, 191, 193, 195, 196, 206, 209, 230, 232, 238, 241, 252, 262, 265, 266, 274, 275, 277, 279, 285, 287], "sure": [1, 7, 8, 12, 13, 14, 17, 24, 42, 56, 62, 93, 98, 102, 105, 106, 112, 118, 122, 138, 142, 147, 152, 154, 155, 159, 172, 178, 180, 191, 196, 200, 206, 215, 224, 225, 230, 239, 241, 249, 250, 252, 275, 277, 287], "out": [1, 2, 4, 7, 8, 9, 12, 13, 14, 17, 18, 19, 21, 28, 35, 39, 40, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 63, 64, 65, 80, 82, 83, 84, 85, 86, 88, 90, 93, 95, 96, 98, 100, 103, 105, 106, 108, 110, 113, 117, 120, 136, 137, 138, 140, 141, 142, 143, 144, 145, 149, 150, 152, 154, 155, 156, 159, 160, 161, 169, 172, 175, 176, 177, 178, 180, 181, 182, 184, 188, 189, 191, 195, 196, 199, 200, 201, 202, 203, 210, 216, 218, 219, 220, 221, 223, 224, 229, 231, 237, 238, 241, 250, 253, 254, 255, 258, 260, 261, 263, 265, 271, 272, 274, 275, 276, 277, 279, 280, 281, 283, 287, 288, 289], "graph": [1, 7, 13, 17, 19, 51, 54, 67, 70, 73, 77, 78, 87, 90, 92, 95, 106, 108, 114, 117, 118, 121, 131, 137, 143, 145, 149, 159, 160, 161, 163, 181, 182, 188, 189, 191, 192, 199, 200, 202, 215, 216, 228, 239, 245, 249, 250, 254, 256, 262, 268, 269, 288], "otherwis": [1, 4, 12, 13, 24, 36, 41, 54, 60, 67, 80, 87, 90, 103, 113, 121, 122, 128, 138, 143, 149, 152, 155, 160, 161, 163, 169, 178, 179, 181, 193, 196, 200, 206, 240, 253, 258, 283, 287, 288], "mix": [1, 12, 18, 65, 120, 163, 215, 229, 237, 260, 261, 281], "For": [1, 2, 4, 5, 7, 8, 9, 10, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 35, 40, 41, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 60, 67, 68, 73, 80, 87, 88, 93, 96, 100, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 115, 121, 122, 125, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 154, 155, 156, 159, 160, 162, 163, 170, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 191, 192, 193, 195, 196, 198, 199, 200, 202, 204, 205, 207, 208, 209, 210, 213, 214, 215, 216, 222, 224, 225, 226, 228, 230, 232, 238, 239, 240, 241, 242, 243, 244, 245, 251, 252, 253, 256, 258, 259, 262, 263, 265, 266, 267, 268, 274, 275, 276, 277, 279, 281, 282, 283, 285, 288], "hold_out_param": 1, "now": [1, 2, 7, 8, 9, 12, 13, 14, 15, 18, 19, 20, 21, 23, 28, 40, 41, 47, 48, 49, 51, 54, 55, 56, 57, 60, 80, 90, 93, 94, 95, 96, 102, 103, 105, 107, 109, 112, 113, 115, 118, 121, 128, 137, 139, 142, 143, 144, 145, 147, 148, 149, 152, 154, 155, 159, 160, 161, 162, 166, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 186, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 205, 207, 208, 227, 228, 238, 239, 240, 243, 250, 262, 263, 267, 269, 274, 275, 279, 281, 282, 283, 285, 287], "reli": [1, 3, 4, 8, 12, 17, 42, 54, 95, 112, 115, 143, 162, 169, 172, 176, 178, 195, 202, 206, 241, 269, 276, 278], "miss": [1, 56, 122, 147, 152, 155, 188, 193, 225, 240, 242, 258, 263, 275], "glue": [1, 182], "cost": [1, 7, 17, 54, 105, 107, 120, 138, 139, 142, 143, 147, 166, 188, 195, 207, 227, 241, 253, 254], "deliv": [1, 202, 215, 252], "most": [1, 2, 7, 14, 17, 21, 35, 39, 47, 54, 56, 57, 80, 93, 95, 96, 98, 100, 103, 107, 109, 110, 113, 120, 121, 122, 128, 133, 138, 142, 143, 144, 146, 148, 149, 154, 159, 160, 162, 163, 169, 172, 177, 178, 180, 181, 182, 183, 184, 188, 191, 193, 195, 196, 199, 207, 215, 216, 224, 231, 238, 240, 241, 245, 249, 253, 255, 258, 276, 277, 278, 283], "first": [1, 2, 3, 4, 5, 7, 8, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 28, 39, 42, 45, 48, 49, 54, 55, 56, 57, 58, 60, 65, 73, 74, 80, 87, 88, 90, 93, 95, 98, 100, 103, 105, 107, 109, 110, 112, 113, 118, 120, 121, 122, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 154, 155, 156, 158, 159, 160, 161, 166, 169, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 184, 188, 191, 192, 193, 195, 196, 198, 199, 200, 206, 207, 208, 210, 214, 216, 225, 226, 228, 230, 231, 238, 241, 245, 250, 252, 253, 254, 255, 258, 262, 263, 265, 267, 269, 274, 276, 277, 279, 283, 287], "taken": [1, 8, 12, 17, 24, 87, 88, 100, 155, 169, 178, 191, 195, 232, 254, 267, 281], "care": [1, 4, 7, 17, 80, 93, 95, 105, 149, 154, 172, 178, 182, 199, 207, 226, 227, 240, 274], "condit": [1, 17, 54, 60, 103, 110, 114, 138, 154, 170, 172, 193, 195, 282, 285], "remaind": [1, 98, 158], "cheetah": 1, "goal": [1, 8, 17, 18, 48, 54, 57, 65, 80, 90, 105, 143, 144, 154, 155, 159, 178, 180, 182, 265, 274], "half": [1, 12, 21, 128, 174, 225, 259, 283], "fast": [1, 7, 8, 21, 23, 54, 95, 113, 138, 142, 152, 166, 172, 178, 183, 191, 196, 199, 240, 265, 267, 283, 289], "dm_control": 1, "gym": [1, 17, 134, 137, 155, 162, 178, 179, 180, 182, 199], "env": [1, 23, 141, 151, 154, 155, 178, 179, 180, 182, 226, 240, 255, 263, 265, 288], "gymenv": [1, 178], "halfcheetah": 1, "v4": [1, 178], "dmcontrolenv": 1, "By": [1, 12, 21, 24, 35, 44, 47, 67, 68, 87, 93, 95, 103, 109, 112, 113, 114, 121, 139, 142, 144, 154, 156, 158, 159, 160, 169, 176, 179, 188, 192, 195, 200, 207, 208, 213, 222, 228, 231, 241, 245, 249, 250, 252, 255, 258, 265, 268, 275, 277, 279, 283, 288], "disabl": [1, 9, 14, 18, 138, 139, 147, 162, 166, 177, 181, 183, 188, 193, 208, 225, 249, 258, 267, 274, 275, 276, 277, 282, 288], "render": [1, 8, 87, 96, 102, 162, 172, 178], "easier": [1, 21, 23, 28, 55, 56, 106, 113, 138, 144, 160, 169, 180, 184, 189, 208, 226, 240, 252, 267, 274, 277, 283, 287], "than": [1, 3, 4, 7, 8, 12, 13, 14, 15, 16, 17, 21, 24, 48, 53, 54, 55, 57, 58, 65, 72, 74, 80, 87, 90, 95, 98, 100, 103, 105, 106, 107, 109, 112, 113, 115, 121, 122, 128, 137, 138, 139, 141, 144, 146, 148, 151, 152, 154, 156, 160, 161, 162, 166, 169, 170, 171, 172, 177, 178, 179, 180, 188, 189, 191, 192, 193, 196, 198, 199, 202, 226, 230, 241, 242, 249, 255, 258, 260, 265, 267, 274, 279, 283, 288], "imag": [1, 24, 36, 37, 39, 45, 47, 51, 54, 56, 57, 62, 80, 87, 93, 96, 98, 100, 103, 104, 105, 113, 131, 132, 134, 135, 137, 142, 147, 156, 162, 163, 169, 171, 179, 186, 188, 189, 196, 198, 202, 210, 224, 228, 239, 242, 243, 260, 279, 281, 288], "focu": [1, 4, 8, 13, 23, 96, 105, 107, 139, 142, 143, 178, 180, 182, 184, 195, 216, 267, 275], "pass": [1, 2, 3, 4, 8, 10, 12, 13, 15, 16, 17, 18, 19, 20, 24, 35, 36, 37, 40, 41, 42, 47, 48, 54, 56, 57, 58, 61, 67, 68, 70, 77, 78, 87, 90, 93, 95, 96, 98, 100, 103, 104, 105, 107, 109, 110, 113, 114, 121, 122, 131, 137, 138, 139, 142, 143, 144, 145, 148, 149, 150, 152, 154, 155, 156, 158, 159, 162, 163, 166, 170, 171, 174, 176, 178, 179, 180, 181, 182, 184, 185, 188, 191, 193, 195, 196, 199, 200, 205, 206, 208, 209, 213, 214, 225, 226, 230, 231, 232, 238, 241, 244, 259, 261, 262, 263, 267, 274, 277, 285], "pixel": [1, 36, 45, 48, 80, 100, 103, 105, 155, 163, 186, 191, 255], "from_pixel": 1, "true": [1, 2, 4, 5, 7, 8, 9, 13, 14, 15, 18, 19, 24, 28, 35, 37, 40, 42, 47, 51, 54, 56, 67, 68, 87, 93, 95, 98, 102, 103, 109, 113, 114, 115, 117, 120, 121, 122, 128, 138, 139, 140, 141, 144, 147, 148, 149, 152, 154, 155, 158, 160, 161, 163, 170, 177, 178, 180, 181, 182, 183, 188, 189, 191, 193, 195, 198, 199, 206, 207, 208, 215, 216, 231, 238, 244, 245, 248, 252, 258, 259, 262, 263, 265, 268, 275, 276, 277, 278, 281, 282, 283, 288], "pixels_onli": 1, "make_env": 1, "helper": [1, 7, 12, 20, 21, 51, 56, 60, 96, 102, 104, 105, 106, 114, 138, 139, 144, 145, 146, 154, 155, 179, 180, 181, 182, 184, 186, 189, 191, 198, 204, 205, 231, 255, 283], "either": [1, 2, 4, 7, 8, 12, 19, 24, 48, 54, 78, 93, 104, 105, 113, 115, 122, 128, 139, 142, 152, 155, 163, 176, 179, 180, 181, 188, 193, 195, 199, 215, 222, 225, 231, 238, 241, 252, 277, 279, 282, 283], "backend": [1, 7, 8, 9, 10, 14, 17, 23, 28, 58, 60, 131, 132, 133, 136, 137, 144, 147, 151, 152, 155, 163, 177, 178, 185, 188, 193, 195, 196, 202, 206, 214, 222, 225, 251, 255, 260, 261, 263, 269, 278, 282], "consid": [1, 4, 8, 13, 14, 17, 35, 42, 54, 73, 80, 87, 121, 138, 140, 149, 152, 154, 163, 166, 169, 170, 172, 175, 180, 184, 188, 193, 195, 196, 198, 207, 230, 231, 232, 250, 265, 274, 275, 276, 278, 287], "abov": [1, 3, 4, 7, 8, 10, 12, 13, 14, 17, 18, 20, 24, 47, 48, 54, 56, 57, 70, 72, 73, 80, 87, 95, 96, 98, 100, 102, 103, 105, 106, 107, 109, 110, 112, 113, 121, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 154, 158, 160, 161, 162, 163, 166, 169, 170, 171, 172, 174, 176, 178, 180, 181, 182, 183, 188, 191, 193, 195, 196, 198, 207, 208, 209, 210, 214, 215, 222, 224, 226, 230, 231, 238, 239, 249, 255, 258, 262, 263, 265, 267, 269, 274, 275, 276, 277, 278, 282], "dm": 1, "want": [1, 2, 4, 7, 8, 9, 10, 12, 13, 15, 17, 18, 20, 24, 28, 35, 36, 37, 40, 42, 47, 48, 51, 54, 56, 57, 65, 67, 68, 72, 80, 90, 93, 95, 96, 98, 100, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 121, 122, 128, 141, 142, 143, 144, 154, 155, 156, 158, 159, 161, 163, 166, 170, 172, 174, 176, 177, 178, 181, 183, 184, 186, 191, 192, 193, 195, 196, 198, 199, 200, 208, 209, 222, 225, 226, 230, 238, 240, 242, 252, 254, 274, 276, 281, 287, 289], "modifi": [1, 3, 8, 13, 14, 17, 24, 41, 45, 47, 48, 57, 80, 105, 106, 142, 145, 154, 159, 160, 175, 178, 180, 184, 195, 199, 200, 238, 253, 255, 262, 263], "represent": [1, 13, 17, 47, 57, 90, 96, 100, 102, 105, 107, 110, 112, 114, 115, 117, 131, 144, 159, 162, 184, 188, 189, 192, 195, 196, 199, 226, 238, 240, 254, 279], "more": [1, 2, 3, 4, 7, 8, 10, 12, 13, 14, 17, 18, 19, 21, 24, 37, 39, 40, 41, 44, 47, 48, 49, 53, 54, 55, 56, 57, 58, 60, 61, 65, 72, 80, 90, 96, 98, 100, 102, 104, 105, 106, 107, 109, 110, 112, 113, 115, 117, 120, 121, 122, 128, 132, 133, 137, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 158, 159, 162, 166, 169, 170, 172, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 189, 191, 192, 193, 195, 196, 198, 199, 200, 202, 206, 208, 209, 210, 214, 215, 216, 222, 224, 230, 238, 240, 241, 245, 250, 252, 253, 254, 255, 256, 258, 259, 261, 262, 265, 267, 274, 275, 276, 277, 279, 281, 283, 287, 288, 289], "friendli": [1, 18, 201, 225], "append": [1, 9, 12, 17, 20, 23, 24, 54, 103, 120, 122, 139, 154, 176, 178, 180, 181, 182, 184, 189, 258, 283], "special": [1, 13, 23, 44, 53, 98, 100, 107, 109, 112, 113, 118, 134, 143, 155, 163, 175, 176, 188, 191, 208, 238, 241, 255, 279, 281, 285], "torchr": 1, "transformedenv": [1, 17, 178], "common": [1, 8, 12, 13, 17, 19, 21, 24, 40, 41, 48, 54, 56, 65, 87, 98, 103, 105, 107, 109, 112, 114, 122, 128, 131, 137, 142, 152, 159, 161, 162, 170, 172, 176, 177, 178, 183, 191, 195, 196, 198, 226, 227, 240, 241, 242, 245, 251, 260, 276, 279, 283], "rescal": [1, 56, 198, 267], "heurist": [1, 87, 214, 252, 265], "multipli": [1, 4, 7, 15, 24, 53, 54, 95, 96, 98, 103, 113, 184, 192, 240, 251], "5": [1, 2, 3, 7, 8, 14, 21, 37, 39, 49, 51, 52, 54, 57, 70, 87, 90, 93, 98, 100, 102, 104, 107, 110, 111, 112, 113, 117, 120, 121, 122, 138, 139, 148, 152, 154, 160, 163, 177, 180, 181, 182, 191, 195, 196, 198, 199, 202, 204, 210, 214, 215, 222, 243, 245, 248, 265, 269, 277, 282, 283, 285, 287], "interfac": [1, 4, 7, 8, 17, 18, 54, 103, 113, 144, 151, 154, 178, 191, 196, 215, 222, 255, 268], "between": [1, 7, 8, 12, 14, 15, 17, 20, 21, 24, 36, 44, 51, 53, 54, 70, 78, 80, 87, 88, 90, 93, 95, 98, 100, 103, 105, 106, 107, 110, 112, 113, 121, 135, 137, 138, 140, 142, 144, 154, 155, 159, 163, 166, 172, 174, 176, 179, 181, 182, 183, 184, 189, 191, 193, 195, 196, 198, 199, 200, 207, 209, 225, 226, 227, 231, 241, 245, 255, 256, 259, 263, 265, 266, 267, 268, 274, 275, 277, 281, 283, 289], "simul": [1, 21, 23, 24, 100, 147, 178, 210, 216, 283], "work": [1, 2, 4, 5, 7, 8, 10, 15, 17, 19, 21, 23, 39, 40, 47, 54, 55, 56, 57, 60, 61, 65, 80, 90, 93, 95, 96, 98, 100, 103, 104, 105, 106, 108, 112, 113, 114, 117, 137, 143, 145, 146, 148, 149, 150, 152, 154, 155, 156, 158, 159, 161, 169, 170, 171, 172, 175, 176, 177, 178, 180, 182, 183, 184, 188, 191, 192, 195, 196, 198, 199, 200, 202, 207, 210, 214, 215, 216, 225, 226, 231, 238, 240, 241, 245, 248, 249, 252, 255, 265, 267, 274, 275, 276, 277, 283, 285, 287, 288], "doubl": [1, 2, 4, 5, 7, 8, 40, 95, 102, 113, 120, 134, 136, 137, 148, 155, 162, 171, 178, 189, 214, 225, 277], "precis": [1, 12, 13, 18, 65, 143, 148, 149, 163, 172, 178, 189, 214, 215, 216, 229, 237, 245, 260, 261, 281], "number": [1, 4, 7, 8, 14, 15, 18, 23, 24, 37, 40, 45, 48, 56, 57, 58, 60, 70, 87, 90, 93, 95, 98, 100, 105, 107, 109, 112, 113, 120, 121, 122, 138, 139, 141, 142, 143, 144, 145, 151, 152, 154, 155, 156, 158, 160, 161, 166, 170, 172, 174, 176, 177, 178, 179, 180, 181, 182, 188, 191, 193, 196, 198, 200, 204, 208, 214, 226, 228, 231, 240, 241, 250, 256, 258, 265, 267, 277, 278, 279, 287, 288], "presum": 1, "singl": [1, 2, 4, 7, 8, 12, 13, 14, 18, 21, 23, 41, 44, 47, 51, 56, 58, 59, 60, 61, 65, 90, 93, 95, 96, 100, 102, 103, 104, 105, 107, 113, 137, 138, 139, 140, 142, 145, 147, 148, 149, 150, 151, 152, 154, 155, 161, 162, 166, 171, 172, 174, 178, 179, 180, 181, 182, 184, 188, 191, 193, 195, 196, 199, 208, 214, 226, 240, 241, 255, 258, 262, 263, 265, 267, 279, 283, 287], "ones": [1, 2, 4, 8, 9, 14, 17, 19, 24, 100, 103, 105, 154, 156, 159, 170, 171, 172, 174, 175, 178, 179, 188, 195, 199, 240, 255, 262, 275, 285], "goe": [1, 7, 56, 103, 106, 107, 137, 141, 149, 161, 175, 178, 181, 196], "wai": [1, 2, 4, 7, 8, 12, 13, 14, 15, 17, 35, 39, 41, 44, 47, 48, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 72, 77, 80, 87, 93, 95, 96, 98, 99, 103, 106, 107, 109, 112, 113, 115, 117, 118, 122, 133, 138, 142, 143, 144, 145, 149, 151, 152, 158, 159, 160, 161, 162, 163, 166, 169, 170, 174, 176, 178, 180, 181, 183, 186, 189, 192, 195, 196, 198, 199, 208, 224, 227, 231, 232, 238, 241, 252, 262, 263, 267, 275, 276, 277, 279, 285, 289], "repres": [1, 4, 7, 13, 15, 16, 23, 36, 47, 54, 56, 57, 65, 67, 80, 87, 90, 95, 96, 98, 100, 104, 105, 112, 114, 115, 117, 120, 121, 138, 139, 140, 142, 144, 145, 147, 155, 158, 159, 162, 163, 178, 179, 182, 184, 191, 195, 196, 198, 199, 226, 228, 238, 240, 265, 274, 279], "doubletofloat": [1, 178], "in_kei": [1, 17, 155, 178], "list": [1, 4, 5, 7, 8, 9, 12, 14, 15, 17, 18, 20, 24, 28, 37, 41, 44, 48, 51, 53, 54, 55, 57, 73, 80, 93, 96, 100, 103, 109, 110, 112, 114, 115, 117, 118, 121, 143, 146, 154, 163, 170, 172, 177, 178, 180, 181, 182, 184, 188, 189, 191, 193, 195, 196, 206, 210, 213, 224, 226, 230, 231, 249, 255, 258, 268, 276, 279, 281, 283, 288], "refer": [1, 4, 5, 7, 8, 10, 12, 16, 18, 21, 28, 35, 41, 65, 80, 87, 90, 95, 96, 103, 105, 107, 109, 110, 112, 114, 115, 117, 118, 120, 122, 138, 139, 140, 142, 143, 146, 147, 151, 152, 154, 160, 169, 172, 176, 178, 180, 181, 182, 188, 191, 195, 196, 198, 199, 214, 216, 224, 225, 226, 228, 230, 231, 238, 241, 250, 252, 255, 258, 265, 269, 274, 277, 281, 282, 283], "float": [1, 4, 5, 7, 8, 12, 14, 24, 98, 103, 109, 112, 113, 120, 138, 139, 142, 144, 154, 163, 175, 176, 180, 182, 195, 196, 198, 214, 216, 225, 231, 238, 262, 265, 267, 268, 276, 277, 278, 288], "while": [1, 2, 3, 7, 8, 9, 14, 15, 16, 17, 21, 24, 37, 40, 54, 57, 60, 87, 96, 103, 114, 115, 120, 131, 133, 137, 139, 140, 141, 143, 144, 147, 150, 152, 154, 155, 160, 161, 163, 169, 172, 176, 177, 178, 181, 182, 183, 184, 186, 193, 195, 196, 199, 207, 216, 225, 226, 230, 231, 238, 245, 249, 252, 255, 262, 265, 267, 274, 275, 276, 277, 278, 279, 281, 283], "in_keys_inv": [1, 17], "befor": [1, 3, 4, 7, 8, 12, 13, 14, 15, 17, 20, 24, 35, 40, 42, 47, 48, 49, 51, 54, 56, 57, 60, 65, 80, 90, 95, 96, 100, 105, 106, 107, 109, 110, 112, 113, 115, 117, 118, 120, 121, 122, 128, 131, 137, 139, 140, 142, 144, 145, 147, 152, 154, 155, 158, 160, 162, 167, 169, 170, 172, 174, 176, 177, 178, 180, 181, 182, 184, 188, 189, 192, 193, 195, 196, 198, 200, 207, 210, 225, 226, 228, 230, 239, 241, 242, 243, 244, 245, 249, 250, 252, 253, 258, 259, 262, 265, 274, 275, 277, 282], "concaten": [1, 17, 44, 53, 54, 109, 110, 142, 146, 179], "cattensor": 1, "leav": [1, 12, 19, 21, 35, 47, 54, 56, 58, 90, 95, 144, 169, 170, 177, 214, 238, 283], "constant": [1, 2, 8, 44, 53, 87, 93, 95, 103, 107, 141, 155, 170, 178, 179, 189, 193, 195, 241, 278, 283], "significantli": [1, 24, 110, 133, 142, 148, 172, 193, 232, 250, 258, 267, 281], "speed": [1, 7, 8, 13, 17, 24, 35, 37, 40, 53, 54, 90, 95, 98, 99, 105, 113, 131, 132, 133, 137, 139, 140, 142, 145, 150, 155, 156, 160, 163, 172, 177, 178, 180, 183, 193, 199, 202, 206, 207, 226, 239, 241, 254, 255, 258, 260, 267, 268, 281, 289], "throughput": [1, 139, 172, 241, 258], "choos": [1, 12, 13, 15, 18, 54, 57, 60, 65, 70, 93, 96, 107, 121, 122, 141, 142, 146, 152, 154, 162, 170, 177, 178, 179, 184, 188, 191, 196, 198, 206, 222, 225, 231, 245, 263, 267, 269], "whether": [1, 8, 12, 13, 14, 17, 54, 57, 95, 96, 98, 102, 103, 105, 113, 115, 122, 149, 154, 159, 162, 169, 172, 178, 180, 188, 189, 191, 195, 226, 231, 241, 242, 262, 277], "individu": [1, 7, 8, 15, 36, 54, 90, 95, 96, 100, 121, 140, 142, 144, 148, 171, 172, 176, 181, 184, 189, 193, 195, 196, 199, 222, 225, 226, 241, 250, 262], "approach": [1, 4, 7, 8, 10, 42, 61, 96, 113, 115, 117, 122, 141, 145, 150, 170, 171, 172, 178, 179, 181, 184, 193, 195, 198, 226, 238, 245, 265, 274, 277, 278, 281, 287], "parallelenv": [1, 178], "num_work": [1, 48, 56, 93, 102, 138, 139, 188, 189, 241], "4": [1, 2, 3, 4, 7, 8, 12, 15, 19, 20, 22, 28, 37, 39, 49, 56, 58, 59, 60, 67, 68, 70, 75, 80, 93, 96, 98, 100, 102, 103, 104, 106, 107, 109, 112, 113, 119, 121, 135, 137, 138, 139, 141, 147, 148, 150, 151, 154, 155, 160, 162, 163, 169, 174, 176, 178, 179, 180, 181, 182, 191, 193, 195, 198, 199, 202, 207, 210, 214, 239, 245, 249, 250, 255, 258, 261, 263, 265, 267, 269, 277, 289], "leverag": [1, 8, 54, 80, 105, 115, 118, 122, 135, 137, 139, 142, 152, 154, 161, 198, 209, 210, 213, 216, 241, 242, 254, 258, 260, 268, 278, 282, 289], "vector": [1, 2, 7, 8, 9, 15, 17, 35, 54, 57, 87, 95, 96, 100, 102, 103, 105, 107, 109, 110, 112, 113, 145, 146, 147, 155, 158, 171, 175, 184, 196, 202, 214, 215, 241, 252, 268, 278, 287], "capabl": [1, 3, 14, 18, 21, 54, 80, 136, 142, 163, 172, 183, 188, 192, 202, 204, 205, 213, 225, 241, 283], "pytorch": [1, 2, 4, 5, 9, 12, 14, 17, 19, 21, 22, 23, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 44, 48, 49, 53, 54, 56, 57, 58, 60, 61, 63, 64, 66, 69, 71, 75, 76, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 93, 95, 96, 105, 106, 111, 113, 114, 116, 117, 122, 123, 125, 128, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 166, 167, 169, 171, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 200, 201, 204, 205, 206, 207, 208, 209, 210, 213, 218, 220, 221, 224, 225, 226, 227, 230, 233, 234, 235, 236, 237, 238, 240, 245, 249, 250, 251, 252, 254, 255, 256, 258, 259, 260, 261, 263, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 286, 287, 289], "adopt": [1, 28, 65, 169, 175, 181, 216, 282], "frame_skip": [1, 178], "frame": [1, 8, 155, 162, 177, 178, 188, 255, 265], "count": [1, 8, 14, 24, 40, 48, 54, 87, 107, 154, 155, 178, 182, 184, 188, 191, 209], "frames_per_batch": [1, 178], "total_fram": [1, 178], "adjust": [1, 5, 17, 24, 35, 40, 41, 47, 57, 80, 95, 98, 104, 142, 144, 145, 166, 180, 241], "total": [1, 7, 14, 15, 16, 17, 19, 20, 21, 22, 35, 36, 37, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 69, 73, 75, 77, 78, 79, 80, 88, 90, 91, 93, 95, 98, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 123, 125, 128, 139, 141, 143, 144, 145, 146, 148, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 169, 170, 171, 172, 176, 177, 178, 179, 181, 183, 184, 185, 186, 188, 191, 193, 195, 196, 198, 199, 200, 205, 206, 213, 214, 226, 227, 230, 231, 232, 237, 238, 240, 245, 247, 251, 252, 253, 254, 256, 258, 261, 267, 274, 275, 276, 277, 279, 284, 287], "rais": [1, 12, 14, 19, 24, 80, 114, 141, 142, 143, 160, 163, 177, 178, 193, 195, 207, 241, 253, 255], "skip": [1, 7, 13, 17, 21, 24, 47, 106, 122, 149, 158, 162, 180, 182, 188, 193, 195, 199, 206, 215, 226, 231, 244, 258, 282, 283, 289], "unchang": [1, 12, 88, 95], "seem": [1, 48, 57, 143, 145, 155, 172, 174, 196, 226], "like": [1, 3, 4, 7, 8, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 36, 37, 40, 41, 44, 47, 48, 49, 51, 53, 54, 56, 57, 58, 60, 65, 73, 87, 90, 93, 95, 96, 98, 100, 103, 105, 106, 107, 109, 110, 112, 113, 114, 115, 118, 120, 121, 125, 128, 131, 133, 134, 136, 137, 138, 142, 143, 144, 146, 149, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 166, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 183, 184, 188, 189, 191, 192, 195, 196, 198, 199, 200, 202, 208, 209, 210, 214, 215, 222, 224, 225, 226, 227, 228, 231, 240, 241, 249, 250, 251, 252, 253, 255, 258, 262, 268, 275, 276, 277, 281, 282, 283, 287, 288, 289], "cheat": [1, 103, 184], "compar": [1, 5, 7, 13, 18, 21, 24, 40, 48, 88, 96, 103, 105, 110, 113, 118, 128, 138, 140, 141, 142, 144, 154, 159, 160, 161, 163, 166, 169, 171, 172, 176, 178, 179, 180, 182, 184, 188, 191, 193, 195, 199, 200, 202, 206, 207, 213, 214, 215, 216, 230, 239, 240, 241, 253, 254, 258, 260, 263, 266, 267, 268, 274, 283, 289], "dataset": [1, 8, 21, 28, 35, 36, 38, 39, 40, 41, 42, 44, 45, 47, 48, 51, 54, 57, 58, 60, 62, 80, 96, 100, 105, 107, 123, 128, 137, 138, 139, 144, 145, 146, 150, 154, 156, 171, 172, 177, 181, 183, 184, 186, 188, 189, 191, 196, 200, 215, 217, 228, 241, 248, 255, 260, 261, 281, 283], "10m": 1, "element": [1, 7, 8, 9, 15, 21, 24, 41, 44, 53, 54, 95, 96, 100, 103, 107, 109, 110, 112, 143, 154, 160, 166, 170, 178, 191, 195, 198, 226, 228, 241, 275, 276, 277, 279, 283], "2": [1, 2, 3, 4, 5, 7, 8, 9, 12, 14, 15, 17, 18, 19, 20, 22, 23, 28, 36, 37, 39, 47, 51, 54, 56, 57, 58, 60, 67, 68, 69, 73, 74, 77, 79, 80, 93, 95, 96, 98, 102, 103, 105, 106, 107, 109, 112, 113, 114, 117, 118, 121, 122, 125, 128, 137, 138, 139, 140, 142, 144, 147, 148, 149, 150, 151, 152, 154, 155, 156, 160, 161, 163, 167, 169, 171, 176, 177, 178, 179, 180, 181, 182, 183, 191, 193, 195, 196, 199, 202, 204, 205, 206, 209, 210, 214, 215, 216, 225, 227, 230, 238, 241, 245, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 261, 263, 265, 266, 267, 268, 269, 274, 277, 279, 282, 285, 288, 289], "anoth": [1, 4, 7, 12, 14, 17, 35, 44, 47, 53, 54, 57, 67, 80, 90, 98, 100, 103, 104, 106, 110, 113, 120, 121, 122, 137, 146, 147, 148, 149, 151, 154, 155, 158, 170, 172, 176, 178, 180, 181, 182, 183, 184, 192, 193, 195, 196, 198, 200, 224, 226, 231, 241, 242, 258, 262, 267, 288], "actual": [1, 3, 7, 8, 12, 14, 16, 17, 18, 24, 35, 42, 54, 56, 57, 80, 90, 98, 105, 106, 109, 112, 118, 136, 137, 140, 143, 144, 145, 148, 152, 154, 159, 169, 172, 178, 184, 188, 189, 193, 195, 196, 216, 226, 251, 266, 267, 274, 276, 287], "ratio": [1, 87, 105, 160, 172, 178, 188, 198], "interact": [1, 7, 8, 17, 54, 96, 102, 103, 144, 147, 149, 162, 178, 181, 189, 193, 195, 196, 201, 209, 252], "nutshel": [1, 276], "cautiou": 1, "about": [1, 4, 7, 8, 12, 13, 17, 18, 21, 24, 39, 40, 41, 44, 47, 54, 57, 58, 59, 60, 62, 77, 78, 80, 93, 95, 98, 100, 102, 103, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 128, 131, 133, 137, 139, 141, 144, 145, 146, 149, 151, 152, 154, 156, 159, 160, 161, 169, 171, 172, 177, 178, 179, 180, 182, 183, 184, 186, 188, 191, 193, 195, 196, 198, 199, 200, 207, 209, 210, 229, 230, 237, 238, 240, 243, 250, 254, 255, 260, 261, 265, 266, 267, 275, 276, 277, 282, 283, 289], "deal": [1, 7, 48, 54, 56, 57, 98, 105, 113, 121, 122, 139, 161, 172, 178, 195, 196, 200, 209, 243], "lead": [1, 4, 7, 8, 17, 19, 54, 57, 80, 87, 93, 105, 113, 145, 147, 149, 155, 172, 195, 207, 238, 241, 245, 258, 276, 287], "bias": [1, 36, 47, 100, 105, 122, 183, 199, 238, 243, 244], "comparison": [1, 21, 88, 96, 103, 104, 105, 106, 138, 160, 161, 240, 263, 267, 274, 276, 279, 281, 283], "scale": [1, 8, 24, 36, 45, 56, 61, 80, 100, 102, 105, 115, 132, 133, 137, 138, 139, 141, 152, 154, 155, 162, 174, 178, 179, 185, 186, 196, 209, 210, 225, 241, 245, 252, 261, 262, 263, 267], "help": [1, 4, 7, 12, 13, 18, 21, 23, 24, 35, 36, 47, 54, 57, 73, 87, 93, 96, 105, 106, 109, 110, 112, 113, 122, 132, 133, 135, 137, 138, 139, 144, 151, 152, 155, 156, 160, 161, 166, 169, 175, 178, 179, 180, 181, 182, 183, 184, 191, 193, 195, 196, 200, 201, 204, 206, 207, 208, 210, 216, 222, 224, 225, 226, 228, 239, 241, 242, 250, 252, 253, 256, 258, 260, 265, 267, 275, 276, 277, 279, 281, 282, 283, 287], "signal": [1, 47, 96, 98, 178, 180, 231, 240], "magnitud": [1, 21, 95, 176, 196, 225, 283], "truncat": [1, 103, 120, 160, 178, 283], "A": [1, 7, 8, 9, 12, 14, 15, 17, 21, 35, 36, 37, 41, 44, 51, 52, 53, 54, 56, 57, 58, 60, 67, 68, 72, 73, 74, 77, 78, 80, 87, 88, 98, 100, 103, 104, 105, 107, 109, 110, 112, 113, 114, 121, 122, 133, 137, 139, 143, 144, 145, 146, 149, 150, 154, 156, 159, 163, 169, 170, 171, 178, 179, 180, 181, 183, 184, 185, 186, 189, 191, 193, 195, 196, 199, 200, 201, 208, 214, 215, 216, 226, 230, 238, 241, 243, 250, 252, 255, 258, 261, 265, 266, 278, 279, 282, 283], "thousand": [1, 112, 133, 142, 145, 155, 184, 191], "500": [1, 8, 28, 161, 163, 174, 179, 182, 226], "good": [1, 2, 7, 8, 48, 55, 57, 98, 102, 103, 105, 112, 115, 137, 138, 144, 154, 155, 160, 166, 177, 178, 179, 183, 185, 189, 191, 195, 196, 198, 199, 222, 226, 241, 245, 258, 261, 278], "statist": [1, 57, 98, 131, 137, 148, 159, 176, 178, 184, 188, 189, 191, 226], "arbitrari": [1, 7, 12, 17, 19, 35, 78, 96, 105, 110, 139, 156, 162, 171, 189, 193, 199, 231, 232], "random": [1, 8, 17, 20, 24, 44, 47, 48, 49, 51, 53, 56, 57, 67, 68, 70, 77, 78, 80, 96, 98, 102, 109, 110, 113, 114, 115, 120, 121, 128, 138, 139, 144, 146, 147, 152, 154, 156, 162, 166, 169, 170, 176, 178, 179, 180, 182, 184, 189, 193, 206, 226, 228, 232, 241], "standard": [1, 7, 12, 44, 48, 53, 57, 87, 93, 96, 98, 105, 106, 107, 113, 115, 117, 118, 131, 154, 177, 186, 193, 195, 196, 198, 228, 241, 267, 279], "deviat": [1, 87, 98, 105], "observationnorm": [1, 178], "init_stat": [1, 178], "purpos": [1, 7, 62, 80, 90, 95, 100, 104, 121, 138, 143, 144, 146, 154, 155, 159, 160, 169, 174, 177, 178, 181, 182, 188, 192, 193, 196, 208, 238, 241, 245, 249, 265, 267, 275, 278], "get": [1, 2, 5, 7, 8, 10, 12, 14, 17, 18, 19, 20, 21, 24, 28, 37, 39, 47, 48, 49, 54, 55, 56, 57, 60, 61, 65, 80, 88, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 120, 121, 122, 128, 132, 133, 136, 137, 139, 141, 142, 144, 145, 146, 147, 154, 156, 159, 161, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 184, 188, 189, 191, 192, 195, 196, 198, 201, 202, 206, 207, 214, 222, 226, 231, 241, 244, 245, 255, 258, 259, 260, 261, 265, 266, 267, 269, 274, 281, 282, 283, 284, 288], "summari": [1, 87, 112, 144, 155, 172, 178, 188, 195, 239, 240], "dummi": [1, 4, 12, 19, 51, 90, 98, 104, 152, 156, 161, 171, 174, 175, 196, 200, 208, 255, 281], "over": [1, 4, 7, 8, 13, 14, 17, 19, 21, 23, 24, 36, 37, 40, 41, 44, 48, 51, 53, 54, 55, 56, 57, 58, 60, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 113, 120, 121, 135, 137, 138, 139, 140, 141, 142, 145, 147, 151, 152, 154, 156, 159, 160, 161, 162, 163, 166, 171, 176, 178, 179, 180, 181, 182, 183, 184, 188, 189, 191, 193, 195, 196, 198, 199, 200, 214, 225, 241, 244, 253, 254, 263, 267, 278, 283, 287], "earlier": [1, 7, 8, 80, 98, 100, 103, 106, 107, 110, 113, 138, 140, 142, 155, 169, 172, 178, 184, 195, 225, 226], "turn": [1, 7, 8, 12, 17, 18, 24, 45, 54, 96, 100, 102, 103, 120, 146, 155, 161, 169, 170, 172, 176, 180, 184, 196, 268, 275, 276, 278], "seen": [1, 13, 14, 23, 24, 48, 51, 54, 56, 100, 103, 105, 110, 112, 113, 120, 155, 171, 181, 193, 195, 196, 226, 252, 278], "requir": [1, 2, 4, 5, 7, 8, 9, 12, 13, 15, 17, 18, 19, 23, 24, 28, 39, 45, 47, 54, 55, 56, 57, 60, 65, 88, 90, 93, 95, 99, 104, 112, 113, 117, 118, 138, 142, 144, 146, 148, 149, 151, 152, 154, 155, 156, 158, 161, 166, 169, 170, 171, 172, 174, 177, 178, 180, 181, 182, 183, 184, 191, 192, 193, 195, 196, 198, 199, 202, 204, 205, 207, 208, 210, 214, 215, 216, 225, 227, 228, 230, 231, 238, 240, 241, 245, 249, 250, 251, 252, 253, 256, 265, 266, 267, 268, 269, 275, 276, 277, 281, 285, 287], "select": [1, 4, 7, 13, 55, 87, 93, 102, 105, 113, 115, 163, 176, 179, 180, 182, 188, 189, 193, 195, 214, 231, 241, 250, 252, 265, 269, 276, 278, 283, 288], "recal": [1, 8, 57, 95, 103, 106, 112, 152, 178, 189, 238, 240, 275, 276, 277], "wrap": [1, 4, 7, 8, 13, 20, 37, 41, 49, 93, 98, 107, 109, 110, 115, 120, 138, 140, 143, 148, 152, 155, 162, 172, 178, 181, 182, 191, 192, 195, 196, 200, 204, 205, 208, 209, 222, 225, 231, 259, 266], "flow": [1, 7, 17, 35, 47, 57, 71, 75, 90, 102, 105, 115, 116, 117, 118, 131, 137, 140, 178, 179, 188, 193, 200, 241, 260, 261, 266, 281], "handl": [1, 5, 7, 12, 13, 19, 54, 57, 58, 90, 100, 103, 113, 114, 118, 131, 137, 138, 142, 145, 156, 167, 171, 172, 174, 176, 177, 178, 181, 182, 183, 191, 192, 193, 195, 196, 202, 207, 208, 215, 224, 230, 231, 240, 255, 258, 274, 276, 279, 287], "specifi": [1, 4, 7, 8, 12, 14, 19, 21, 24, 28, 37, 41, 56, 57, 87, 93, 95, 96, 98, 100, 103, 104, 109, 114, 121, 138, 139, 140, 141, 142, 144, 145, 149, 155, 156, 158, 175, 176, 178, 181, 182, 188, 191, 195, 206, 216, 230, 231, 239, 241, 242, 249, 252, 254, 255, 258, 262, 263, 274, 275, 276, 277, 279, 281, 283, 287, 288, 289], "scenario": [1, 8, 17, 114, 115, 117, 118, 122, 128, 143, 172, 179, 182, 195, 214, 238, 242, 258, 265, 278], "tensordictsequenti": [1, 155], "valueoper": [1, 178], "automat": [1, 2, 4, 5, 7, 8, 12, 13, 18, 36, 38, 39, 41, 44, 47, 49, 50, 51, 53, 58, 62, 65, 102, 104, 106, 113, 121, 125, 132, 137, 138, 139, 140, 142, 143, 144, 149, 160, 163, 172, 174, 178, 179, 182, 185, 186, 188, 191, 192, 195, 196, 200, 202, 206, 207, 208, 214, 215, 216, 222, 227, 229, 230, 231, 237, 240, 241, 252, 260, 261, 263, 265, 282], "out_kei": [1, 17, 155, 178], "state_action_valu": 1, "state_valu": [1, 178], "built": [1, 4, 7, 8, 10, 12, 22, 35, 51, 95, 96, 98, 100, 107, 137, 145, 154, 155, 178, 183, 189, 193, 195, 198, 224, 226, 228, 244, 250, 261], "present": [1, 8, 12, 23, 40, 87, 88, 105, 114, 170, 175, 176, 179, 180, 182, 191, 193, 195, 198, 200, 241, 259, 279], "origin": [1, 7, 8, 9, 12, 15, 17, 21, 24, 35, 54, 57, 80, 93, 96, 103, 105, 110, 114, 115, 140, 142, 143, 145, 146, 166, 167, 170, 171, 172, 176, 179, 191, 192, 193, 195, 215, 222, 255, 262, 267, 268, 277, 281, 283], "paper": [1, 7, 15, 20, 21, 57, 80, 125, 139, 142, 178, 179, 181, 183, 184, 186, 196, 199, 200, 279, 283], "found": [1, 4, 5, 7, 8, 13, 20, 54, 55, 96, 105, 144, 152, 154, 155, 159, 163, 172, 181, 182, 183, 191, 195, 215, 222, 241, 255, 279, 288], "ddpgmlpactor": 1, "ddpgmlpqnet": 1, "sinc": [1, 3, 4, 7, 9, 12, 13, 14, 16, 17, 20, 24, 48, 54, 56, 57, 58, 80, 90, 95, 96, 98, 105, 106, 107, 109, 110, 112, 113, 128, 140, 141, 142, 144, 145, 146, 147, 149, 150, 154, 155, 159, 169, 170, 172, 176, 177, 178, 179, 180, 181, 182, 183, 184, 189, 191, 193, 195, 196, 198, 199, 202, 204, 206, 207, 208, 222, 226, 230, 231, 232, 244, 245, 253, 255, 259, 262, 267, 274, 275, 276], "lazi": 1, "materi": [1, 138, 142, 161, 196, 199, 232, 238, 266, 274, 285], "abl": [1, 3, 4, 7, 8, 17, 18, 21, 35, 36, 54, 67, 80, 90, 98, 105, 106, 108, 112, 113, 121, 128, 144, 148, 149, 150, 151, 154, 155, 156, 160, 162, 163, 169, 171, 178, 181, 189, 193, 195, 196, 198, 199, 202, 213, 228, 238, 244, 252, 255, 265, 276, 283], "devic": [1, 3, 4, 5, 8, 12, 13, 14, 17, 19, 20, 21, 23, 24, 44, 47, 48, 49, 53, 54, 55, 57, 58, 60, 61, 65, 68, 78, 93, 103, 105, 107, 113, 115, 121, 133, 136, 137, 138, 140, 142, 144, 145, 151, 152, 154, 155, 160, 163, 169, 172, 174, 176, 177, 178, 181, 182, 188, 196, 198, 204, 205, 207, 208, 210, 213, 214, 215, 216, 226, 229, 231, 232, 237, 238, 242, 244, 250, 251, 252, 254, 255, 256, 259, 260, 261, 262, 263, 265, 266, 268, 269, 281, 282, 283, 285], "achiev": [1, 3, 4, 8, 17, 21, 24, 28, 35, 48, 54, 61, 87, 93, 105, 137, 140, 143, 148, 154, 155, 160, 169, 170, 172, 176, 178, 179, 188, 196, 199, 206, 214, 241, 252, 254, 258, 260, 262, 266, 267, 283], "oper": [1, 8, 9, 16, 17, 18, 21, 22, 23, 24, 35, 36, 41, 47, 49, 51, 54, 56, 65, 67, 68, 78, 87, 88, 90, 98, 99, 102, 103, 105, 106, 107, 112, 113, 114, 115, 116, 117, 120, 121, 131, 136, 137, 138, 140, 141, 142, 143, 145, 147, 149, 154, 155, 156, 158, 160, 161, 163, 166, 171, 174, 175, 177, 178, 180, 184, 188, 189, 191, 192, 193, 195, 196, 199, 200, 201, 208, 209, 213, 214, 215, 216, 222, 224, 225, 226, 228, 231, 232, 240, 244, 250, 251, 252, 255, 258, 259, 260, 261, 267, 274, 275, 278, 281, 283, 287, 288, 289], "practic": [1, 7, 8, 14, 42, 51, 54, 56, 57, 95, 96, 98, 103, 105, 107, 113, 114, 121, 125, 128, 132, 135, 137, 142, 143, 150, 155, 160, 163, 170, 176, 178, 179, 195, 199, 226, 227, 230, 241, 245, 254, 255, 258, 274, 275, 279], "small": [1, 3, 7, 8, 21, 23, 28, 47, 48, 51, 62, 80, 95, 98, 100, 102, 103, 105, 107, 108, 110, 115, 121, 128, 138, 139, 141, 144, 145, 146, 148, 159, 169, 170, 172, 177, 178, 179, 182, 184, 186, 191, 196, 198, 214, 225, 226, 228, 241, 255, 256, 265, 267, 274, 283], "fake": [1, 8, 21, 24, 51, 57, 169, 195, 279, 283], "spec": [1, 118, 155, 178, 182, 195, 226, 262], "ornsteinuhlenbeckprocessmodul": 1, "suggest": [1, 4, 15, 57, 92, 105, 140, 146, 160, 161, 162, 163, 166, 188, 191, 216, 265], "ou": 1, "nois": [1, 8, 15, 57, 80, 209, 240], "reach": [1, 9, 13, 21, 57, 65, 105, 145, 152, 154, 162, 163, 178, 182, 195, 200, 226, 283], "minimum": [1, 4, 87, 140, 178, 182, 276], "iter": [1, 3, 8, 14, 15, 17, 28, 35, 36, 40, 41, 47, 48, 51, 57, 58, 60, 90, 93, 95, 96, 98, 100, 102, 106, 113, 115, 122, 144, 147, 150, 152, 155, 160, 178, 179, 180, 181, 182, 188, 189, 193, 196, 198, 205, 216, 222, 225, 241, 244, 253, 255, 259], "reset": [1, 24, 40, 98, 103, 113, 128, 155, 178, 179, 180, 182, 188, 193, 256, 268], "develop": [1, 3, 4, 7, 12, 13, 15, 18, 28, 87, 90, 96, 109, 113, 115, 117, 131, 134, 147, 154, 163, 175, 182, 188, 193, 199, 208, 209, 213, 215, 229, 241, 262, 267, 268, 269, 274, 277, 278], "tight": [1, 114, 115, 117, 118], "per": [1, 4, 7, 8, 12, 14, 24, 102, 105, 112, 132, 137, 139, 145, 146, 148, 152, 154, 155, 161, 163, 169, 174, 176, 178, 182, 183, 184, 185, 188, 189, 191, 195, 196, 198, 202, 206, 207, 208, 226, 230, 240, 249, 258, 259, 261, 263, 265, 266, 274, 287], "sync": [1, 13, 14, 20, 60, 136, 137, 138, 139, 140, 141, 162, 196], "natur": [1, 7, 8, 21, 23, 28, 49, 80, 100, 105, 113, 144, 145, 155, 172, 181, 191, 202, 276, 279, 283], "resourc": [1, 58, 80, 93, 115, 117, 138, 152, 154, 169, 178, 188, 191, 201, 213, 226, 241, 245, 248, 258, 265], "alloc": [1, 8, 23, 44, 53, 60, 103, 148, 154, 169, 172, 188, 195, 196, 208, 230, 231, 259, 279, 285], "gpu": [1, 3, 5, 10, 15, 21, 23, 24, 44, 47, 51, 53, 54, 55, 57, 58, 59, 61, 62, 65, 68, 78, 87, 88, 98, 99, 103, 104, 105, 107, 115, 121, 125, 128, 133, 137, 138, 139, 140, 142, 143, 145, 150, 151, 152, 154, 155, 156, 160, 163, 166, 169, 171, 174, 178, 179, 181, 182, 183, 191, 193, 198, 202, 204, 207, 208, 216, 222, 225, 226, 231, 244, 250, 252, 260, 261, 263, 265, 266, 268, 269, 281, 283, 284, 288], "worker": [1, 8, 14, 20, 56, 57, 98, 133, 138, 139, 141, 154, 163, 178, 181, 182, 188, 206, 241], "so": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 21, 23, 24, 28, 35, 48, 51, 54, 56, 57, 58, 70, 73, 80, 88, 90, 93, 95, 96, 98, 100, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 115, 120, 121, 128, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 154, 155, 160, 161, 162, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 191, 193, 195, 196, 198, 199, 200, 214, 215, 216, 222, 225, 226, 230, 240, 241, 244, 253, 254, 255, 258, 259, 260, 262, 265, 266, 267, 274, 276, 277, 278, 279, 283, 285, 288], "syncdatacollector": [1, 178], "process": [1, 4, 5, 7, 8, 14, 15, 17, 18, 20, 21, 23, 28, 37, 40, 41, 45, 51, 54, 55, 56, 57, 61, 65, 80, 87, 90, 95, 96, 98, 100, 104, 105, 113, 114, 115, 122, 125, 131, 133, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 150, 151, 154, 155, 159, 160, 162, 163, 171, 172, 177, 179, 181, 182, 183, 184, 188, 191, 195, 196, 202, 206, 207, 208, 210, 216, 226, 228, 230, 231, 240, 241, 242, 244, 249, 254, 255, 256, 258, 259, 260, 265, 266, 267, 278, 281, 282, 283], "offer": [1, 4, 5, 10, 14, 17, 19, 23, 41, 45, 47, 58, 65, 95, 96, 107, 139, 140, 142, 156, 158, 160, 161, 172, 196, 199, 208, 224, 226, 231, 240, 241, 245, 258], "multiasyncdatacollector": [1, 178], "rollout": [1, 178], "asynchron": [1, 133, 137, 141, 144, 175, 178, 182, 231, 260], "manner": [1, 7, 12, 17, 24, 35, 95, 113, 178, 191, 196], "therebi": [1, 255, 268, 274, 279], "decoupl": [1, 37, 170], "factori": [1, 8, 103, 109, 227, 230, 275, 276], "empti": [1, 4, 7, 8, 9, 12, 17, 24, 103, 146, 160, 177, 184, 188, 191, 195, 199, 231, 240, 266, 285, 288], "maximum": [1, 14, 54, 87, 100, 110, 144, 146, 155, 160, 178, 183, 184, 241, 278], "non": [1, 2, 3, 7, 12, 14, 17, 24, 36, 54, 56, 58, 59, 61, 87, 90, 100, 103, 105, 106, 108, 112, 113, 122, 139, 140, 144, 148, 149, 154, 155, 158, 161, 163, 166, 176, 180, 183, 184, 188, 193, 196, 199, 200, 208, 226, 238, 242, 254, 258, 267, 274, 281, 285], "termin": [1, 17, 58, 93, 178, 179, 181, 182, 191, 288], "max_frames_per_traj": [1, 178], "effect": [1, 7, 8, 9, 12, 14, 19, 60, 80, 87, 96, 100, 103, 105, 113, 118, 142, 145, 146, 152, 156, 169, 171, 172, 176, 179, 183, 184, 191, 196, 200, 207, 209, 225, 241, 245, 254, 276, 287], "regist": [1, 5, 9, 10, 19, 40, 47, 51, 100, 118, 120, 122, 136, 137, 139, 140, 142, 152, 158, 169, 170, 178, 192, 195, 202, 215, 222, 225, 232, 243, 265, 266], "new": [1, 2, 4, 5, 7, 8, 10, 12, 15, 17, 19, 28, 34, 35, 39, 44, 47, 49, 53, 54, 55, 57, 60, 66, 69, 80, 82, 83, 84, 85, 87, 90, 102, 103, 104, 105, 107, 110, 112, 117, 118, 120, 122, 128, 132, 134, 136, 137, 138, 139, 140, 141, 143, 147, 155, 158, 160, 162, 169, 170, 171, 172, 175, 176, 178, 179, 180, 183, 184, 188, 191, 192, 195, 196, 198, 202, 222, 231, 238, 241, 242, 246, 260, 261, 262, 265, 266, 268, 269, 274, 279, 287, 288, 289], "stepcount": [1, 155, 178], "infer": [1, 3, 5, 8, 10, 12, 13, 24, 42, 44, 53, 54, 96, 98, 100, 104, 105, 109, 112, 113, 115, 131, 135, 137, 140, 143, 144, 147, 148, 160, 178, 180, 191, 192, 193, 195, 196, 198, 202, 208, 216, 222, 228, 229, 243, 245, 252, 255, 258, 260, 278, 279, 281, 283, 288, 289], "manual": [1, 4, 7, 12, 15, 19, 37, 51, 54, 58, 74, 77, 78, 103, 105, 113, 121, 122, 140, 149, 155, 156, 170, 171, 172, 174, 195, 196, 202, 206, 210, 222, 225, 241, 258, 279], "around": [1, 7, 8, 14, 28, 37, 41, 54, 60, 96, 98, 100, 103, 105, 128, 137, 146, 156, 160, 161, 166, 171, 184, 188, 189, 195, 196, 214, 232, 266, 274, 275], "1m": [1, 155, 178, 263], "outer": [1, 8, 139, 161], "loop": [1, 3, 7, 12, 14, 20, 24, 39, 41, 48, 51, 54, 56, 57, 80, 90, 95, 98, 102, 105, 113, 121, 138, 140, 144, 145, 147, 156, 160, 161, 162, 169, 171, 172, 181, 182, 189, 196, 214, 226, 231, 241, 244, 283], "equal": [1, 13, 95, 103, 105, 143, 163, 176, 178, 179, 191, 195, 255, 258, 265, 277], "length": [1, 15, 17, 54, 57, 95, 96, 100, 112, 113, 142, 146, 178, 183, 184, 196, 199, 254, 260, 263, 276, 279, 283, 287, 289], "sub": [1, 8, 95, 120, 142, 147, 174, 178, 182, 188, 193, 196, 210, 249, 258], "shape": [1, 4, 5, 9, 19, 21, 35, 37, 44, 47, 51, 53, 54, 57, 73, 90, 95, 98, 105, 106, 109, 112, 113, 120, 121, 139, 142, 145, 146, 147, 156, 158, 161, 171, 178, 188, 191, 192, 196, 198, 199, 214, 222, 226, 229, 231, 237, 249, 250, 252, 253, 255, 260, 261, 267, 277, 279, 283, 285], "env_per_collector": 1, "traj_len": 1, "perform": [1, 3, 5, 8, 12, 13, 14, 15, 17, 18, 19, 20, 21, 24, 35, 36, 40, 41, 45, 47, 48, 49, 54, 61, 68, 77, 80, 87, 90, 93, 95, 98, 100, 103, 104, 105, 106, 107, 112, 113, 122, 131, 132, 133, 135, 137, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 154, 155, 158, 161, 162, 166, 172, 174, 175, 178, 179, 180, 182, 185, 186, 189, 191, 192, 193, 195, 196, 198, 199, 200, 202, 204, 206, 210, 213, 215, 216, 222, 225, 226, 227, 229, 230, 231, 237, 240, 244, 245, 248, 252, 254, 255, 256, 260, 261, 263, 266, 267, 268, 274, 275, 279, 281, 283, 285, 289], "assess": [1, 172, 196], "mode": [1, 15, 42, 47, 54, 57, 60, 80, 87, 90, 92, 96, 102, 122, 132, 137, 139, 147, 148, 149, 155, 160, 162, 163, 166, 174, 180, 183, 184, 185, 189, 191, 192, 193, 195, 196, 199, 208, 214, 215, 226, 241, 247, 254, 255, 258, 260, 261, 262, 265, 281, 289], "dedic": [1, 13, 60, 103, 181, 182, 224, 225, 259], "frequenc": [1, 88, 144], "everi": [1, 2, 8, 12, 13, 17, 18, 21, 23, 24, 28, 35, 36, 37, 41, 47, 48, 51, 54, 56, 57, 60, 65, 95, 98, 100, 102, 103, 104, 128, 142, 143, 145, 146, 148, 154, 155, 158, 163, 169, 170, 171, 172, 176, 178, 179, 180, 182, 184, 188, 189, 193, 195, 196, 204, 227, 239, 241, 251, 259, 279, 283], "10": [1, 3, 8, 9, 12, 14, 21, 24, 36, 37, 45, 47, 48, 49, 51, 54, 58, 80, 88, 93, 98, 102, 104, 113, 120, 122, 138, 139, 141, 147, 152, 154, 156, 163, 177, 178, 180, 181, 182, 183, 184, 188, 189, 191, 195, 196, 199, 204, 206, 207, 210, 214, 216, 222, 226, 228, 231, 240, 243, 255, 262, 265, 267, 269, 283, 285, 288, 289], "come": [1, 5, 7, 8, 13, 21, 24, 45, 56, 57, 80, 90, 93, 95, 100, 103, 105, 106, 118, 122, 138, 142, 144, 154, 155, 160, 169, 170, 172, 175, 178, 183, 193, 195, 196, 199, 216, 226, 250, 259, 267, 283], "flavor": [1, 4, 7], "priorit": [1, 241, 279], "error": [1, 4, 7, 8, 12, 13, 14, 15, 19, 40, 41, 47, 51, 54, 55, 58, 73, 95, 98, 100, 103, 105, 109, 113, 117, 118, 121, 139, 141, 143, 149, 169, 175, 178, 179, 193, 196, 199, 210, 215, 226, 238, 241, 244, 253, 265, 267, 274, 282], "higher": [1, 24, 48, 53, 58, 87, 95, 96, 100, 105, 107, 121, 138, 139, 145, 146, 149, 158, 161, 177, 178, 179, 188, 189, 191, 195, 196, 202, 205, 210, 213, 281, 287], "likelihood": [1, 40, 54, 100, 107, 113], "regular": [1, 7, 8, 12, 13, 24, 28, 105, 113, 125, 142, 145, 146, 161, 170, 171, 172, 186, 196, 199, 215, 241, 252, 274, 276, 279, 281], "circular": [1, 265, 282], "compos": [1, 4, 7, 8, 10, 13, 19, 21, 24, 65, 98, 100, 102, 107, 137, 138, 154, 158, 166, 171, 177, 178, 181, 183, 185, 189, 191, 199, 210, 215, 228, 231, 245, 248, 250, 261], "pick": [1, 8, 24, 48, 106, 145, 179, 184, 222, 240, 250], "tensor": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 21, 24, 36, 37, 38, 39, 40, 41, 42, 45, 47, 48, 49, 50, 51, 52, 54, 62, 65, 66, 68, 69, 70, 72, 73, 74, 76, 79, 80, 90, 95, 96, 97, 99, 100, 102, 104, 105, 107, 110, 113, 114, 115, 118, 120, 122, 132, 137, 138, 139, 140, 146, 147, 148, 149, 152, 154, 155, 156, 158, 160, 161, 163, 166, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 188, 189, 191, 192, 193, 195, 196, 198, 200, 206, 209, 210, 213, 214, 215, 224, 225, 226, 228, 229, 230, 231, 232, 237, 240, 243, 244, 249, 252, 260, 261, 263, 265, 266, 267, 268, 269, 274, 275, 276, 283, 284, 285, 287, 288, 289], "physic": [1, 17, 112, 172, 230, 241, 258], "memori": [1, 7, 8, 12, 13, 20, 21, 23, 24, 44, 53, 54, 56, 60, 93, 100, 103, 104, 105, 108, 111, 113, 115, 122, 132, 136, 137, 138, 139, 140, 142, 150, 154, 155, 160, 161, 162, 166, 176, 181, 183, 185, 188, 191, 195, 196, 198, 199, 202, 206, 215, 225, 226, 230, 232, 249, 259, 260, 261, 263, 265, 266, 267, 274, 277, 279, 283], "map": [1, 8, 15, 36, 54, 57, 96, 98, 100, 105, 110, 112, 113, 122, 140, 145, 155, 156, 161, 169, 170, 171, 178, 179, 182, 191, 195, 198, 206, 208, 230, 240, 241, 243, 283, 287], "arrai": [1, 8, 35, 36, 47, 48, 51, 56, 65, 77, 78, 90, 95, 96, 103, 112, 113, 120, 121, 145, 146, 162, 177, 184, 191, 224, 277], "desir": [1, 4, 7, 12, 15, 17, 20, 54, 57, 80, 87, 105, 122, 140, 154, 176, 188, 191, 195, 222, 225, 228, 255, 258, 263, 265, 267, 275, 285], "hyperparamet": [1, 8, 17, 21, 57, 113, 122, 123, 132, 135, 137, 144, 145, 243, 261, 274, 279], "temporari": [1, 7, 144], "directori": [1, 7, 8, 15, 37, 54, 56, 57, 93, 102, 105, 122, 125, 128, 144, 145, 146, 160, 184, 188, 191, 208, 216, 222, 239, 249, 258, 265, 267], "disk": [1, 9, 37, 98, 102, 115, 122, 155, 172, 226, 230, 231, 239, 249, 250, 265, 266], "along": [1, 7, 8, 12, 17, 21, 35, 36, 44, 47, 53, 54, 58, 59, 60, 61, 88, 95, 96, 98, 99, 100, 102, 103, 104, 105, 109, 110, 113, 114, 128, 138, 139, 145, 146, 150, 151, 155, 169, 176, 179, 181, 189, 191, 195, 196, 254, 263, 276, 281, 283, 285, 289], "dimens": [1, 7, 8, 15, 17, 23, 36, 44, 51, 53, 54, 96, 98, 100, 102, 109, 110, 112, 113, 132, 137, 142, 145, 155, 156, 163, 171, 177, 178, 180, 192, 195, 196, 225, 241, 255, 263, 275, 279, 287, 289], "feed": [1, 8, 15, 24, 48, 51, 54, 98, 100, 104, 105, 108, 110, 115, 122, 142, 145, 146, 152, 162, 179, 184, 189, 208, 228, 244], "adapt": [1, 2, 17, 21, 28, 93, 98, 115, 144, 200, 226, 263, 283], "divid": [1, 12, 13, 14, 15, 17, 18, 24, 90, 105, 107, 141, 154, 170, 172, 182, 255, 258], "yield": [1, 8, 14, 15, 21, 24, 40, 42, 103, 113, 122, 142, 143, 180, 182, 199, 214, 241, 267, 277, 283], "regard": [1, 8, 9, 14, 17, 122, 160, 161, 178, 188, 196, 254], "200": [1, 8, 155, 163, 182, 214, 267, 277], "random_crop_len": 1, "25": [1, 37, 80, 95, 102, 105, 113, 120, 123, 128, 138, 178, 181, 191, 214, 226, 231, 261, 267], "balanc": [1, 8, 23, 152, 188, 196, 222], "choic": [1, 4, 8, 12, 19, 93, 144, 146, 154, 172, 196, 204, 241], "heterogen": [1, 289], "figur": [1, 12, 15, 17, 37, 54, 80, 87, 98, 105, 136, 137, 141, 142, 144, 155, 160, 172, 178, 180, 188, 189, 191, 195], "dataflow": 1, "8": [1, 3, 5, 7, 8, 9, 21, 24, 37, 93, 100, 101, 110, 113, 120, 121, 139, 142, 148, 152, 160, 161, 163, 174, 177, 178, 188, 191, 195, 196, 202, 206, 207, 208, 209, 210, 214, 225, 231, 241, 247, 258, 259, 263, 265, 267, 269, 277, 283, 284, 288], "1000": [1, 2, 24, 47, 102, 104, 128, 138, 139, 143, 160, 178, 189, 206, 222, 226, 240, 283], "known": [1, 4, 7, 15, 21, 95, 142, 154, 158, 159, 176, 179, 184, 195, 196, 202, 226, 240, 250, 265, 283], "utd": 1, "64": [1, 7, 8, 18, 21, 23, 24, 37, 41, 47, 77, 93, 103, 110, 113, 138, 139, 142, 155, 156, 161, 171, 177, 178, 180, 181, 196, 202, 214, 226, 231, 245, 263, 278, 283, 287], "reproduc": [1, 15, 57, 80, 98, 103, 105, 160, 178, 179, 182, 193, 214, 226, 241], "realiz": [1, 21, 283], "sever": [1, 2, 3, 4, 9, 13, 14, 18, 20, 24, 35, 41, 45, 49, 51, 57, 58, 59, 80, 105, 107, 139, 142, 145, 151, 154, 162, 169, 170, 172, 175, 178, 180, 181, 188, 189, 193, 195, 199, 214, 215, 226, 240, 249, 250, 258, 276, 281], "qnet": 1, "ve": [1, 7, 8, 12, 21, 49, 51, 55, 95, 96, 98, 100, 103, 104, 113, 143, 155, 159, 161, 169, 171, 172, 181, 189, 195, 196, 207, 208, 226, 267, 274, 276, 277, 278, 283], "becaus": [1, 2, 4, 7, 8, 12, 15, 17, 18, 19, 20, 21, 24, 35, 37, 42, 44, 47, 48, 51, 53, 54, 56, 57, 60, 61, 80, 90, 93, 95, 96, 98, 100, 103, 105, 106, 107, 109, 113, 114, 115, 118, 122, 128, 139, 140, 143, 145, 148, 149, 152, 155, 158, 161, 162, 163, 166, 171, 172, 176, 180, 182, 184, 186, 188, 193, 195, 198, 199, 200, 204, 214, 226, 238, 241, 243, 244, 255, 267, 274, 276, 283, 287], "_must_": 1, "off": [1, 12, 20, 24, 28, 35, 37, 47, 54, 100, 102, 103, 122, 138, 144, 145, 160, 169, 178, 180, 181, 182, 191, 207, 274], "dictat": [1, 17], "introduc": [1, 9, 14, 18, 20, 21, 28, 36, 39, 59, 93, 96, 105, 107, 120, 121, 137, 139, 141, 147, 152, 160, 163, 169, 180, 182, 183, 184, 191, 193, 195, 196, 202, 206, 207, 215, 238, 241, 255, 256, 258, 266, 268, 269, 274, 276, 277, 278, 281, 283, 287], "outdat": 1, "trick": [1, 4, 8, 13, 54, 103, 149, 154, 161], "multi": [1, 7, 8, 17, 23, 51, 54, 57, 58, 59, 61, 65, 95, 96, 100, 103, 107, 135, 137, 139, 140, 142, 150, 151, 152, 155, 178, 180, 183, 185, 188, 198, 208, 210, 241, 258, 261, 279], "altern": [1, 8, 13, 53, 54, 110, 128, 138, 156, 159, 163, 175, 178, 184, 188, 191, 193, 199, 200, 208, 238, 241, 256, 267, 277, 278], "hack": [1, 238, 274], "find": [1, 2, 4, 7, 8, 12, 13, 21, 35, 37, 44, 53, 80, 87, 88, 90, 93, 98, 100, 103, 106, 109, 113, 135, 137, 138, 141, 145, 154, 158, 160, 170, 179, 182, 184, 188, 195, 196, 216, 222, 224, 226, 239, 274, 275, 276, 277, 278, 283], "well": [1, 3, 4, 7, 8, 12, 13, 14, 24, 37, 44, 48, 53, 54, 58, 87, 90, 93, 96, 98, 105, 107, 109, 113, 115, 122, 128, 131, 138, 139, 140, 143, 144, 145, 148, 149, 154, 155, 158, 169, 170, 172, 174, 177, 180, 181, 182, 183, 184, 188, 189, 191, 193, 196, 198, 207, 208, 210, 215, 222, 226, 230, 238, 240, 243, 250, 251, 252, 255, 256, 258, 274, 275, 276, 279, 285], "despit": [1, 80, 147, 152], "fact": [1, 3, 4, 7, 8, 12, 15, 17, 24, 35, 44, 80, 95, 96, 98, 100, 103, 105, 107, 112, 143, 170, 178, 179, 189, 195, 196, 199], "part": [1, 3, 7, 8, 12, 13, 16, 17, 18, 20, 40, 47, 49, 54, 57, 80, 93, 95, 96, 100, 106, 108, 112, 113, 114, 137, 139, 142, 143, 145, 146, 149, 150, 154, 155, 159, 160, 167, 169, 170, 178, 184, 195, 196, 222, 224, 225, 238, 240, 245, 249, 252, 255, 263, 265, 267, 268, 274, 276, 278, 289], "made": [1, 8, 13, 18, 24, 57, 93, 96, 103, 105, 139, 141, 143, 154, 155, 172, 184, 189, 191, 195, 224, 241, 277, 289], "thank": [1, 24, 54, 113, 144, 145, 146, 154, 184, 199], "hardupd": 1, "softupd": [1, 155], "appropri": [1, 8, 12, 54, 96, 113, 144, 152, 170, 181, 189, 196, 199, 214, 215, 225, 266, 281], "locat": [1, 4, 8, 34, 37, 44, 53, 87, 96, 98, 112, 120, 154, 172, 178, 188, 198, 208, 222, 231, 241, 249, 265], "adam": [1, 8, 14, 16, 40, 51, 57, 74, 104, 107, 121, 140, 154, 169, 178, 179, 180, 182, 204, 205, 207, 208, 213, 259], "pretti": [1, 20, 48, 103, 120, 121, 161, 182, 287], "plot": [1, 8, 57, 80, 87, 95, 144, 155, 172, 178, 179, 180, 189, 191, 200], "alreadi": [1, 2, 4, 7, 8, 13, 14, 18, 95, 98, 103, 105, 106, 113, 142, 144, 152, 163, 169, 172, 174, 177, 178, 183, 189, 196, 206, 210, 214, 226, 228, 241, 242, 243, 244, 245, 259, 276, 278, 282], "mention": [1, 4, 7, 8, 13, 14, 18, 20, 57, 80, 90, 103, 105, 106, 122, 138, 142, 154, 155, 172, 179, 181, 188, 191, 195, 199, 208, 222, 230, 238, 249, 258], "greater": [1, 14, 54, 57, 96, 121, 143, 258, 288], "concret": [1, 7, 8, 9, 12, 14, 95, 172, 178, 195, 274], "takeawai": [1, 125, 199, 241], "further": [1, 7, 8, 12, 24, 51, 80, 93, 100, 105, 113, 142, 154, 160, 172, 176, 178, 191, 192, 193, 195, 207, 215, 230, 248, 267, 279, 281, 282, 289], "might": [1, 4, 7, 9, 12, 13, 18, 19, 20, 35, 42, 48, 55, 56, 57, 58, 95, 98, 103, 105, 106, 110, 112, 115, 118, 120, 140, 149, 150, 151, 152, 154, 159, 161, 170, 172, 179, 182, 183, 184, 188, 193, 195, 196, 198, 199, 210, 226, 227, 231, 238, 241, 245, 255, 258, 265, 267, 274, 282, 288], "dispatch": [1, 4, 7, 18, 136, 137, 140, 175, 199, 202, 214, 222, 225, 251], "distpatch": 1, "iql": 1, "flexibl": [1, 2, 7, 8, 28, 54, 90, 95, 113, 115, 122, 132, 137, 139, 140, 150, 199, 208, 226, 281], "runnable_code_remov": [1, 15, 16, 17, 19, 21, 28, 35, 36, 39, 40, 41, 42, 44, 45, 47, 48, 49, 53, 54, 56, 57, 67, 68, 70, 72, 73, 74, 78, 80, 90, 93, 95, 96, 98, 99, 100, 103, 104, 105, 106, 107, 109, 110, 112, 114, 115, 117, 118, 120, 121, 122, 125, 128, 143, 144, 145, 146, 148, 155, 156, 158, 159, 160, 162, 163, 164, 166, 169, 170, 171, 172, 176, 179, 183, 184, 186, 188, 192, 193, 195, 196, 198, 199, 200, 205, 213, 224, 225, 226, 228, 230, 231, 232, 238, 239, 240, 241, 242, 244, 245, 251, 252, 253, 254, 256, 266, 267, 274, 275, 276, 279, 287], "minut": [1, 15, 16, 17, 19, 35, 36, 37, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 73, 77, 78, 80, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 118, 125, 128, 141, 143, 144, 145, 146, 148, 156, 158, 159, 160, 161, 162, 163, 166, 169, 170, 171, 172, 176, 177, 178, 179, 183, 184, 186, 189, 193, 195, 198, 199, 200, 205, 213, 227, 230, 232, 238, 245, 251, 252, 253, 254, 256, 267, 274, 275, 276, 277, 279, 287], "002": [1, 15, 16, 17, 19, 22, 35, 36, 40, 41, 42, 43, 44, 45, 47, 48, 49, 52, 53, 56, 73, 75, 78, 79, 80, 93, 95, 100, 101, 103, 106, 110, 111, 112, 115, 118, 119, 123, 125, 139, 143, 144, 145, 146, 148, 156, 159, 163, 166, 169, 170, 171, 176, 179, 184, 185, 186, 198, 200, 205, 213, 230, 232, 237, 238, 245, 247, 251, 252, 253, 254, 256, 261, 267, 274, 275, 276, 279, 284, 287], "jupyt": [1, 15, 16, 17, 19, 21, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 67, 68, 70, 72, 73, 74, 77, 78, 80, 87, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 143, 144, 145, 146, 148, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 169, 170, 171, 172, 176, 178, 179, 183, 184, 186, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 205, 213, 224, 225, 226, 227, 228, 230, 231, 232, 238, 239, 240, 241, 242, 243, 244, 245, 251, 252, 253, 254, 256, 266, 267, 274, 275, 276, 277, 279, 287], "notebook": [1, 15, 16, 17, 19, 21, 23, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 67, 68, 70, 72, 73, 74, 77, 78, 80, 87, 88, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 143, 144, 145, 146, 148, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 169, 170, 171, 172, 176, 178, 179, 183, 184, 186, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 205, 213, 224, 225, 226, 227, 228, 230, 231, 232, 238, 239, 240, 241, 242, 243, 244, 245, 251, 252, 253, 254, 256, 266, 267, 274, 275, 276, 277, 279, 287], "coding_ddpg": [1, 22, 261], "ipynb": [1, 15, 16, 17, 19, 21, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 67, 68, 70, 72, 73, 74, 77, 78, 80, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 143, 144, 145, 146, 148, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 169, 170, 171, 172, 176, 178, 179, 183, 184, 186, 188, 192, 193, 195, 196, 198, 199, 200, 205, 213, 224, 225, 226, 227, 228, 230, 231, 232, 238, 239, 240, 241, 242, 243, 244, 245, 251, 252, 253, 254, 256, 266, 267, 274, 275, 276, 277, 279, 287], "python": [1, 3, 8, 9, 13, 15, 16, 17, 18, 21, 22, 23, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 58, 60, 61, 62, 67, 68, 70, 72, 73, 74, 77, 78, 80, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 125, 128, 131, 136, 137, 138, 139, 143, 144, 145, 146, 147, 148, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 169, 170, 171, 172, 176, 177, 178, 179, 181, 183, 184, 186, 188, 192, 193, 195, 196, 198, 199, 200, 205, 208, 209, 210, 213, 215, 222, 224, 225, 226, 227, 228, 230, 231, 232, 238, 239, 240, 241, 242, 243, 244, 245, 247, 251, 252, 253, 255, 258, 260, 261, 263, 265, 266, 267, 268, 274, 275, 276, 277, 279, 281, 282, 287, 289], "sourc": [1, 3, 5, 7, 8, 13, 14, 15, 16, 17, 19, 20, 21, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 60, 67, 68, 70, 72, 73, 74, 77, 78, 80, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 139, 142, 143, 144, 145, 146, 148, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 169, 170, 171, 172, 175, 176, 178, 179, 180, 182, 183, 184, 186, 188, 191, 192, 193, 195, 196, 198, 199, 200, 205, 213, 215, 216, 224, 225, 226, 227, 228, 230, 231, 232, 238, 239, 240, 241, 242, 243, 244, 245, 251, 252, 253, 254, 256, 265, 266, 267, 268, 274, 275, 276, 277, 279, 287, 288, 289], "py": [1, 4, 5, 7, 8, 12, 13, 15, 16, 17, 19, 21, 22, 24, 28, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 128, 138, 139, 140, 143, 144, 145, 146, 147, 148, 150, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 169, 170, 171, 172, 174, 175, 176, 178, 179, 181, 183, 184, 185, 186, 188, 192, 193, 195, 196, 198, 199, 200, 205, 209, 210, 213, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 251, 252, 253, 254, 255, 256, 258, 261, 263, 265, 266, 267, 274, 275, 276, 277, 279, 282, 284, 287, 288], "zip": [1, 8, 15, 16, 17, 19, 21, 23, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 67, 68, 70, 72, 73, 74, 77, 78, 80, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 143, 144, 145, 146, 148, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 169, 170, 171, 172, 176, 178, 179, 180, 182, 183, 184, 186, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 205, 213, 224, 225, 226, 227, 228, 230, 231, 232, 238, 239, 240, 241, 242, 243, 244, 245, 251, 252, 253, 254, 256, 266, 267, 274, 275, 276, 277, 279, 283, 287], "The": [2, 3, 4, 5, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 28, 35, 36, 37, 40, 41, 44, 45, 47, 48, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 72, 73, 74, 78, 80, 87, 88, 90, 96, 97, 98, 100, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 125, 128, 129, 132, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 169, 170, 171, 172, 176, 177, 178, 179, 180, 181, 182, 183, 186, 188, 191, 192, 193, 195, 196, 198, 200, 202, 204, 205, 206, 207, 208, 209, 210, 214, 215, 216, 217, 225, 226, 228, 230, 231, 238, 239, 240, 241, 244, 245, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 262, 263, 265, 266, 267, 268, 274, 275, 276, 277, 278, 279, 281, 282, 283, 285, 287, 288], "packag": [2, 4, 7, 8, 21, 23, 28, 48, 51, 56, 62, 65, 73, 74, 93, 104, 105, 107, 113, 117, 121, 128, 132, 133, 137, 138, 139, 152, 154, 159, 175, 177, 178, 179, 182, 188, 191, 193, 210, 215, 224, 228, 231, 240, 244, 255, 260, 282, 283], "build": [2, 8, 9, 17, 24, 35, 37, 38, 39, 40, 41, 42, 44, 45, 51, 54, 65, 73, 74, 93, 95, 96, 97, 98, 99, 102, 103, 104, 106, 112, 113, 120, 121, 125, 131, 132, 133, 137, 145, 146, 154, 155, 158, 167, 169, 171, 172, 178, 179, 180, 181, 182, 185, 195, 196, 201, 215, 226, 228, 240, 241, 252, 255, 261, 265, 269, 279, 287, 289], "highli": [2, 7, 8, 13, 23, 54, 93, 184, 196, 241, 287], "dynam": [2, 7, 8, 9, 12, 15, 17, 18, 24, 35, 47, 58, 70, 95, 105, 108, 111, 114, 121, 122, 131, 132, 137, 147, 163, 176, 178, 215, 225, 229, 241, 247, 250, 252, 255, 260, 261, 262, 267], "neural": [2, 7, 16, 17, 21, 22, 35, 38, 39, 41, 47, 50, 52, 54, 56, 62, 73, 80, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 110, 112, 115, 117, 121, 128, 132, 134, 135, 136, 137, 144, 145, 146, 147, 148, 155, 167, 176, 178, 179, 181, 184, 185, 186, 189, 191, 200, 202, 214, 215, 222, 229, 237, 241, 245, 260, 261, 278, 281, 283], "network": [2, 3, 7, 9, 12, 15, 16, 17, 21, 24, 35, 38, 39, 40, 41, 42, 47, 50, 52, 54, 56, 62, 73, 74, 80, 95, 96, 98, 100, 104, 105, 106, 108, 109, 111, 112, 113, 115, 117, 121, 128, 132, 134, 136, 137, 143, 144, 147, 148, 151, 152, 166, 167, 170, 172, 176, 181, 185, 188, 189, 191, 200, 202, 214, 215, 222, 229, 232, 237, 241, 245, 260, 261, 265, 278, 281, 283], "api": [2, 4, 5, 7, 10, 11, 12, 13, 14, 17, 18, 19, 23, 28, 36, 37, 39, 41, 44, 45, 53, 61, 87, 96, 117, 120, 122, 131, 132, 136, 137, 138, 139, 141, 142, 143, 144, 147, 152, 154, 159, 160, 161, 165, 171, 173, 174, 180, 181, 182, 188, 193, 195, 196, 198, 206, 207, 208, 209, 210, 215, 216, 224, 226, 227, 231, 240, 247, 248, 249, 250, 251, 252, 253, 254, 255, 258, 260, 261, 262, 263, 266, 267, 278, 281, 287, 289], "explor": [2, 8, 12, 17, 49, 54, 80, 118, 131, 132, 135, 137, 144, 149, 155, 160, 162, 169, 172, 174, 178, 179, 183, 184, 196, 199, 209, 224, 249, 252, 255, 258, 265, 278], "note": [2, 4, 7, 8, 12, 15, 18, 19, 20, 21, 23, 24, 28, 35, 47, 48, 49, 51, 54, 55, 57, 80, 90, 95, 96, 98, 100, 103, 104, 107, 108, 109, 110, 112, 113, 118, 120, 122, 128, 138, 139, 140, 142, 143, 148, 149, 151, 152, 154, 156, 158, 160, 161, 163, 169, 171, 172, 175, 176, 180, 181, 182, 183, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 202, 206, 207, 208, 210, 216, 231, 240, 243, 245, 249, 250, 251, 252, 258, 259, 262, 265, 266, 274, 275, 276, 277, 279, 283, 285, 287], "pleas": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 19, 24, 25, 26, 27, 48, 49, 51, 56, 63, 64, 86, 93, 138, 139, 142, 152, 154, 156, 158, 159, 160, 163, 169, 171, 175, 178, 180, 181, 182, 188, 191, 193, 195, 196, 198, 199, 200, 203, 208, 210, 211, 214, 215, 216, 218, 219, 220, 221, 222, 223, 225, 227, 255, 257, 258, 262, 265, 266, 268, 269, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 287, 288], "differenti": [2, 7, 8, 17, 23, 38, 39, 44, 50, 51, 62, 95, 121, 132, 137, 155, 171, 179, 185, 186, 200, 261, 276], "requires_grad": [2, 4, 5, 8, 12, 35, 47, 51, 67, 68, 95, 103, 109, 113, 121, 128, 147, 149, 230, 244, 263, 283], "track": [2, 7, 12, 17, 36, 40, 47, 57, 87, 95, 100, 102, 103, 107, 109, 113, 121, 139, 141, 146, 147, 151, 155, 182, 184, 188, 209, 231, 239, 244, 254, 255, 282], "auto": [2, 3, 7, 8, 9, 12, 13, 15, 60, 138, 139, 160, 175, 195, 196, 215, 216, 226, 240, 258, 268, 278, 288], "x": [2, 4, 7, 8, 9, 15, 23, 24, 35, 44, 47, 51, 53, 54, 57, 67, 68, 72, 73, 74, 77, 78, 80, 90, 95, 98, 100, 102, 103, 105, 106, 107, 109, 113, 121, 122, 138, 140, 142, 143, 145, 146, 147, 149, 152, 154, 161, 170, 172, 174, 175, 177, 180, 181, 182, 189, 191, 192, 193, 195, 198, 206, 207, 208, 210, 214, 215, 222, 226, 240, 243, 250, 252, 255, 262, 267, 268, 269, 278, 279, 281, 283], "std": [2, 7, 8, 9, 15, 18, 24, 56, 98, 105, 175, 177, 182, 191, 215, 226, 268, 274], "cout": [2, 8, 215], "endl": [2, 8, 215], "cpufloattyp": [2, 8], "y": [2, 7, 23, 35, 44, 45, 47, 51, 53, 57, 67, 68, 72, 73, 74, 77, 78, 80, 87, 90, 95, 100, 103, 105, 106, 109, 110, 113, 121, 139, 143, 174, 175, 188, 191, 193, 195, 206, 240, 250, 252, 268, 269, 276, 278], "wa": [2, 3, 4, 7, 14, 19, 21, 48, 56, 57, 80, 95, 96, 98, 100, 103, 104, 105, 106, 107, 109, 113, 118, 122, 138, 142, 144, 147, 152, 154, 162, 166, 169, 170, 171, 172, 174, 176, 177, 178, 179, 182, 183, 184, 189, 195, 196, 199, 208, 222, 225, 226, 231, 233, 234, 235, 236, 255, 258, 267, 276, 277, 283], "result": [2, 4, 5, 7, 8, 9, 12, 13, 15, 17, 21, 24, 28, 35, 40, 42, 44, 47, 48, 56, 68, 77, 87, 88, 93, 95, 96, 98, 103, 104, 105, 109, 113, 114, 118, 121, 122, 125, 139, 140, 141, 142, 143, 146, 152, 154, 155, 158, 160, 161, 162, 166, 171, 172, 175, 176, 177, 179, 180, 181, 182, 183, 189, 191, 192, 193, 195, 198, 199, 204, 206, 207, 213, 214, 216, 228, 230, 231, 238, 240, 241, 245, 249, 250, 252, 253, 254, 258, 259, 260, 262, 263, 265, 267, 275, 276, 277, 278, 279, 285, 288], "grad_fn": [2, 35, 47, 51, 95, 109, 113, 143, 149], "name": [2, 4, 5, 7, 8, 12, 13, 15, 16, 17, 19, 21, 23, 24, 35, 55, 56, 57, 87, 106, 112, 113, 115, 118, 120, 122, 137, 139, 142, 144, 147, 152, 155, 160, 167, 170, 174, 175, 176, 178, 179, 180, 181, 183, 184, 185, 188, 191, 193, 196, 198, 200, 208, 210, 214, 216, 226, 230, 231, 240, 242, 254, 258, 261, 265, 281, 282, 283, 288], "addbackward1": 2, "z": [2, 7, 57, 90, 103, 109, 195, 276], "27": [2, 56, 77, 160, 178, 182, 185, 214, 226, 254, 261, 267], "mulbackward1": 2, "meanbackward0": 2, "requires_grad_": [2, 35, 109, 113, 161], "exist": [2, 8, 12, 13, 14, 19, 21, 51, 57, 58, 65, 72, 88, 90, 103, 109, 113, 121, 137, 147, 154, 176, 177, 182, 183, 184, 186, 188, 191, 193, 195, 199, 206, 207, 209, 225, 226, 238, 241, 274, 275, 277, 282, 283], "flag": [2, 4, 7, 17, 47, 95, 109, 170, 184, 195, 230, 240, 245, 258, 289], "place": [2, 7, 8, 14, 17, 23, 44, 47, 49, 53, 57, 90, 96, 100, 102, 107, 109, 113, 139, 144, 152, 154, 156, 169, 171, 172, 178, 184, 191, 193, 195, 196, 199, 200, 206, 208, 230, 238, 240, 241, 263, 274, 281, 287], "randn": [2, 4, 5, 7, 8, 9, 15, 51, 77, 109, 113, 121, 122, 147, 152, 161, 180, 182, 206, 216, 226, 227, 255, 259, 268, 269, 278, 281, 287], "b": [2, 4, 5, 7, 8, 21, 23, 35, 37, 47, 51, 67, 68, 77, 88, 95, 102, 103, 107, 110, 112, 113, 120, 121, 143, 145, 146, 160, 161, 163, 177, 179, 193, 195, 196, 199, 226, 231, 250, 265, 269, 278, 283], "sumbackward0": 2, "backprop": [2, 47, 77, 109, 113, 121, 145, 162], "scalar": [2, 7, 17, 18, 35, 47, 54, 57, 67, 95, 98, 103, 109, 121, 189, 195, 213, 288], "backward": [2, 3, 4, 5, 8, 9, 12, 14, 15, 16, 18, 19, 20, 24, 35, 40, 47, 49, 51, 57, 67, 68, 77, 78, 95, 96, 98, 102, 104, 109, 110, 113, 121, 128, 131, 136, 137, 138, 142, 143, 146, 150, 152, 154, 158, 161, 166, 171, 174, 178, 180, 181, 182, 185, 188, 189, 195, 196, 199, 200, 204, 205, 206, 207, 208, 213, 215, 225, 231, 241, 244, 248, 252, 254, 259, 261], "equival": [2, 7, 14, 35, 47, 95, 107, 121, 140, 158, 171, 174, 179, 181, 191, 195, 196, 199, 241, 256, 268, 274, 276, 279, 283], "print": [2, 7, 8, 14, 17, 23, 24, 36, 37, 41, 48, 49, 51, 54, 56, 57, 58, 77, 80, 90, 93, 95, 98, 100, 102, 103, 105, 107, 112, 113, 114, 117, 121, 122, 138, 139, 140, 141, 146, 147, 148, 151, 152, 154, 155, 160, 161, 170, 174, 175, 177, 178, 180, 181, 182, 184, 189, 192, 193, 195, 196, 199, 204, 206, 207, 208, 209, 210, 214, 215, 216, 225, 226, 227, 231, 232, 241, 243, 256, 259, 262, 265, 269, 274, 276, 277, 282, 283, 288], "d": [2, 4, 7, 8, 12, 24, 41, 57, 65, 67, 68, 77, 95, 96, 98, 100, 103, 107, 112, 113, 121, 139, 142, 144, 146, 148, 152, 154, 161, 162, 169, 174, 188, 191, 195, 199, 210, 253, 277], "dx": [2, 68, 107, 121, 149], "grad": [2, 4, 8, 15, 19, 35, 47, 51, 67, 95, 109, 113, 121, 138, 143, 147, 149, 152, 154, 158, 161, 166, 169, 178, 180, 181, 182, 199, 205, 213, 225, 244, 274, 287], "5000": [2, 102, 178, 226], "got": [2, 18, 24, 60, 96, 103, 106, 107, 109, 113, 152, 175, 181, 195, 255], "matrix": [2, 7, 8, 15, 21, 35, 44, 47, 53, 87, 95, 98, 100, 103, 106, 107, 109, 112, 113, 120, 142, 145, 146, 161, 166, 170, 183, 184, 191, 195, 196, 199, 200, 214, 215, 216, 222, 228, 241, 254, 260, 277, 279, 283, 287], "explan": [2, 57, 189, 230], "arriv": [2, 8, 18, 139, 152, 180, 241], "valu": [2, 4, 7, 8, 9, 15, 17, 23, 24, 35, 36, 40, 44, 45, 47, 51, 53, 54, 55, 60, 67, 80, 87, 90, 93, 95, 96, 98, 100, 103, 104, 105, 107, 109, 110, 112, 113, 115, 121, 142, 143, 144, 147, 151, 152, 154, 159, 162, 174, 175, 179, 180, 181, 182, 183, 184, 188, 191, 193, 196, 199, 200, 205, 225, 226, 231, 238, 239, 249, 258, 259, 263, 265, 274, 275, 276, 277, 279, 281, 289], "section": [2, 4, 7, 8, 12, 14, 18, 23, 24, 36, 37, 39, 40, 41, 42, 44, 47, 48, 51, 55, 56, 57, 80, 96, 99, 103, 104, 105, 106, 107, 110, 112, 113, 118, 132, 134, 136, 140, 143, 147, 148, 154, 160, 162, 166, 172, 179, 180, 182, 188, 191, 195, 196, 198, 199, 202, 205, 213, 215, 216, 222, 225, 226, 230, 241, 250, 254, 262, 275, 276, 285], "look": [2, 4, 7, 8, 12, 13, 14, 15, 17, 20, 23, 37, 42, 44, 47, 48, 51, 53, 54, 55, 56, 57, 60, 80, 90, 93, 95, 96, 98, 100, 102, 103, 104, 106, 107, 109, 110, 112, 113, 114, 115, 122, 128, 134, 138, 140, 142, 143, 144, 149, 154, 155, 156, 163, 166, 169, 172, 176, 177, 178, 181, 182, 183, 184, 188, 189, 191, 195, 196, 198, 199, 201, 209, 213, 214, 226, 228, 231, 239, 240, 242, 243, 244, 245, 250, 254, 268, 274, 277, 279, 281], "jacobian": [2, 47, 95, 132, 137, 158, 185, 261, 287], "product": [2, 3, 8, 44, 47, 53, 90, 95, 107, 115, 131, 132, 135, 137, 139, 154, 158, 174, 184, 185, 196, 252, 261, 263, 287], "norm": [2, 17, 21, 24, 57, 100, 105, 131, 136, 137, 142, 170, 174, 176, 178, 185, 191, 199, 261, 283], "1021": 2, "4020": 2, "314": 2, "6695": 2, "613": [2, 214], "4944": 2, "v": [2, 21, 23, 24, 35, 47, 57, 58, 60, 95, 102, 104, 109, 110, 112, 139, 142, 158, 179, 181, 188, 189, 199, 214, 253, 266, 267, 276, 277, 283, 289], "0001": [2, 24, 93, 160, 178], "kfloat": [2, 3, 4, 5, 268, 288], "102": 2, "4000": [2, 98, 102, 178, 240], "1024": [2, 7, 23, 87, 105, 141, 204, 226], "0000": [2, 178, 277, 283], "stop": [2, 7, 35, 93, 95, 109, 146, 163, 169, 178, 180, 184, 188, 216, 231, 265], "histori": [2, 35, 44, 51, 53, 95, 103, 109, 147, 176], "put": [2, 7, 8, 12, 15, 17, 20, 36, 49, 54, 56, 90, 98, 100, 103, 132, 137, 138, 139, 154, 155, 170, 178, 179, 181, 182, 191], "nogradguard": 2, "block": [2, 4, 5, 7, 8, 12, 13, 15, 21, 24, 35, 36, 51, 54, 87, 95, 109, 114, 138, 141, 142, 154, 155, 160, 172, 174, 180, 181, 182, 183, 188, 191, 202, 206, 241, 245, 263, 267, 278, 283], "pow": [2, 7, 274], "no_grad": [2, 24, 35, 47, 95, 107, 109, 110, 113, 121, 138, 139, 162, 177, 178, 181, 189, 195, 215, 241, 248, 278, 281, 285], "Or": [2, 147, 169, 182, 262, 288], "content": [2, 4, 7, 17, 55, 61, 102, 103, 104, 113, 122, 129, 143, 152, 154, 172, 177, 178, 182, 184, 193, 195, 217, 226, 240, 254, 255, 265], "eq": [2, 24, 54, 138, 181, 195, 231], "bool": [2, 14, 17, 18, 175, 178, 191, 258, 262, 277, 278, 283], "is_leaf": 2, "detach_": [2, 182], "register_hook": [2, 147], "retain_grad": [2, 200], "doc": [2, 4, 8, 10, 54, 67, 80, 95, 103, 104, 105, 120, 121, 128, 140, 151, 154, 159, 172, 180, 182, 191, 195, 196, 216, 222, 225, 239, 253, 254, 279, 287], "applic": [2, 3, 14, 15, 17, 18, 37, 54, 65, 96, 100, 105, 115, 128, 132, 133, 134, 137, 138, 143, 144, 148, 152, 159, 169, 172, 176, 180, 182, 191, 195, 206, 207, 208, 213, 214, 216, 222, 241, 254, 258, 267, 276, 282, 288], "calcul": [2, 15, 21, 35, 40, 47, 48, 54, 57, 61, 80, 87, 90, 93, 95, 96, 98, 104, 105, 113, 145, 146, 162, 179, 180, 182, 183, 184, 191, 196, 199, 210, 244, 263, 276, 283], "penalti": [2, 170, 177, 225], "h": [2, 4, 5, 7, 8, 9, 12, 13, 54, 142, 160, 163, 174, 175, 198, 215, 240, 258], "model": [2, 3, 7, 12, 14, 17, 20, 28, 35, 37, 38, 39, 44, 45, 47, 48, 51, 53, 57, 58, 59, 61, 67, 70, 72, 73, 74, 92, 93, 95, 97, 99, 103, 106, 107, 108, 109, 111, 113, 116, 117, 118, 120, 121, 123, 131, 132, 133, 134, 135, 137, 138, 144, 145, 146, 147, 148, 151, 154, 158, 160, 161, 167, 169, 170, 171, 178, 179, 180, 181, 182, 183, 185, 192, 193, 195, 196, 199, 200, 202, 206, 207, 208, 209, 210, 214, 215, 216, 225, 229, 230, 232, 237, 238, 239, 244, 245, 248, 250, 252, 253, 258, 259, 260, 261, 263, 265, 267, 268, 278, 279, 282, 283, 287, 289], "linear": [2, 7, 8, 14, 20, 21, 24, 44, 47, 49, 51, 53, 73, 80, 98, 102, 103, 108, 120, 121, 122, 128, 138, 140, 142, 145, 146, 147, 152, 160, 161, 170, 174, 180, 181, 182, 184, 189, 195, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 222, 225, 227, 230, 232, 238, 239, 243, 245, 259, 262, 267, 274, 278, 279, 281, 283, 285], "loss": [2, 3, 7, 8, 14, 17, 20, 21, 22, 24, 35, 41, 44, 47, 53, 70, 72, 73, 74, 77, 78, 80, 93, 95, 98, 102, 107, 112, 113, 121, 122, 134, 137, 138, 139, 140, 145, 147, 154, 162, 163, 171, 174, 179, 181, 182, 184, 188, 189, 196, 215, 216, 239, 248, 259, 261, 283], "target": [2, 3, 8, 17, 20, 23, 24, 40, 48, 51, 54, 60, 80, 96, 102, 103, 105, 107, 110, 112, 113, 118, 138, 146, 154, 155, 160, 169, 171, 172, 174, 175, 177, 179, 180, 181, 182, 184, 189, 191, 193, 195, 198, 215, 216, 222, 226, 228, 248, 262, 281, 288], "mseloss": [2, 15, 40, 51, 152, 180, 207, 208, 259], "grad_output": [2, 12, 13], "ones_lik": [2, 103], "create_graph": [2, 149], "gradient_penalti": 2, "dim": [2, 7, 14, 36, 98, 102, 103, 113, 138, 140, 174, 176, 177, 178, 180, 181, 182, 189, 191, 214, 215, 255, 263, 275, 276, 277, 288], "add": [2, 4, 5, 8, 9, 10, 12, 13, 15, 17, 18, 19, 21, 24, 40, 48, 51, 55, 80, 90, 93, 100, 103, 104, 107, 110, 118, 125, 136, 137, 138, 139, 142, 146, 147, 148, 154, 155, 159, 160, 161, 169, 171, 172, 175, 177, 178, 180, 181, 182, 184, 188, 192, 195, 199, 208, 226, 228, 231, 252, 256, 263, 267, 268, 274, 276, 282, 283, 288], "combined_loss": 2, "1042": 2, "0638": 2, "0103": 2, "0723": 2, "2543": 2, "1222": 2, "0071": 2, "0814": 2, "1683": 2, "1052": 2, "0355": 2, "document": [2, 4, 7, 8, 19, 35, 51, 57, 65, 87, 90, 93, 95, 96, 100, 102, 103, 104, 109, 122, 128, 137, 152, 154, 155, 158, 159, 160, 181, 182, 183, 188, 191, 193, 195, 198, 208, 215, 216, 241, 249, 250, 252, 253, 256, 262, 266, 276, 281, 287, 288], "link": [2, 7, 8, 13, 15, 39, 41, 57, 87, 99, 113, 115, 125, 154, 158, 215, 255, 276, 278, 288], "ad": [2, 7, 8, 9, 13, 18, 23, 28, 35, 54, 55, 58, 80, 88, 90, 95, 98, 100, 102, 103, 104, 107, 109, 122, 138, 139, 145, 146, 147, 152, 155, 158, 161, 166, 169, 175, 179, 183, 184, 195, 198, 215, 238, 240, 243, 253, 282], "subclass": [2, 7, 8, 17, 21, 36, 37, 72, 95, 98, 100, 113, 121, 140, 144, 155, 176, 181, 189, 198, 214, 224, 225, 229, 237, 252, 260, 261, 276, 279, 283], "encod": [2, 17, 44, 45, 51, 53, 100, 108, 111, 113, 139, 144, 155, 170, 178, 182, 191, 199, 225, 255, 261, 267, 283], "method": [2, 4, 7, 8, 9, 12, 13, 14, 15, 17, 20, 21, 24, 35, 36, 42, 44, 48, 51, 54, 56, 60, 80, 88, 90, 95, 96, 98, 100, 102, 103, 105, 107, 109, 113, 114, 122, 133, 137, 141, 144, 145, 149, 152, 155, 158, 159, 160, 161, 162, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 189, 191, 193, 195, 196, 199, 200, 207, 208, 216, 224, 225, 228, 239, 240, 241, 245, 255, 258, 274, 278, 281, 283], "forward": [2, 3, 9, 12, 13, 14, 15, 17, 18, 20, 24, 35, 36, 41, 47, 49, 51, 54, 57, 61, 67, 68, 70, 77, 78, 90, 95, 98, 100, 102, 103, 105, 106, 107, 108, 110, 113, 114, 121, 122, 128, 132, 137, 138, 139, 142, 143, 145, 148, 149, 150, 152, 154, 166, 169, 170, 171, 174, 176, 179, 180, 181, 182, 184, 185, 188, 189, 191, 193, 195, 196, 200, 205, 206, 207, 208, 209, 210, 213, 214, 215, 222, 225, 228, 231, 232, 241, 243, 255, 259, 261, 262, 278, 288], "detail": [2, 4, 5, 7, 8, 12, 13, 15, 18, 19, 20, 37, 40, 47, 48, 49, 57, 58, 80, 87, 88, 90, 100, 103, 104, 114, 118, 138, 140, 142, 144, 146, 148, 150, 152, 160, 166, 169, 182, 183, 188, 189, 192, 193, 195, 196, 202, 205, 209, 213, 214, 215, 216, 222, 224, 225, 226, 230, 240, 241, 250, 255, 262, 263, 265, 274, 275, 276, 277, 281, 282, 287], "namespac": [2, 4, 5, 8, 9, 12, 13, 36, 113, 118, 175, 193, 262, 279], "inherit": [2, 14, 18, 41, 56, 90, 98, 103, 104, 107, 159, 162, 178, 191, 198, 255, 265, 276, 279], "linearfunct": 2, "public": [2, 5, 12, 13, 18, 140, 175], "static": [2, 4, 5, 12, 13, 17, 95, 158, 175, 195, 196, 241, 267], "option": [2, 4, 5, 7, 8, 12, 13, 14, 39, 48, 50, 52, 56, 58, 87, 93, 95, 96, 99, 100, 103, 105, 115, 118, 120, 131, 133, 140, 141, 144, 150, 155, 156, 160, 163, 172, 174, 176, 177, 191, 193, 195, 196, 206, 213, 225, 226, 231, 241, 248, 249, 250, 253, 254, 256, 261, 265, 267], "autogradcontext": [2, 12, 13], "ctx": [2, 4, 7, 12, 13, 23, 149, 206], "save_for_backward": [2, 4, 7, 149], "mm": [2, 7, 202, 268, 288], "t": [2, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 21, 24, 35, 37, 39, 40, 44, 47, 48, 51, 55, 57, 58, 60, 65, 77, 80, 93, 95, 96, 98, 100, 102, 103, 105, 106, 107, 109, 110, 112, 113, 115, 118, 121, 122, 128, 138, 139, 143, 149, 155, 156, 158, 159, 160, 161, 162, 163, 166, 169, 171, 172, 176, 177, 178, 179, 180, 182, 183, 184, 189, 191, 192, 193, 195, 196, 199, 200, 204, 205, 213, 214, 222, 225, 226, 228, 240, 241, 242, 243, 244, 251, 252, 253, 255, 256, 258, 262, 263, 265, 267, 274, 275, 276, 278, 283, 287, 288], "unsqueez": [2, 17, 51, 73, 102, 103, 113, 121, 171, 177, 180, 182, 189, 288], "expand_a": [2, 24], "tensor_list": [2, 12, 13, 154], "save": [2, 4, 8, 14, 15, 24, 35, 36, 37, 38, 39, 40, 44, 45, 48, 53, 54, 55, 57, 80, 93, 102, 104, 105, 123, 128, 137, 138, 140, 142, 144, 148, 160, 161, 174, 176, 180, 181, 182, 184, 185, 188, 191, 196, 215, 216, 228, 229, 230, 231, 239, 240, 241, 243, 244, 245, 250, 254, 260, 261, 265, 284, 288], "get_saved_vari": 2, "grad_input": [2, 149], "grad_weight": 2, "grad_bia": 2, "Then": [2, 4, 15, 18, 21, 28, 48, 49, 57, 80, 90, 106, 107, 110, 112, 113, 118, 125, 136, 137, 138, 152, 169, 174, 175, 176, 178, 179, 180, 182, 184, 188, 206, 210, 238, 263, 282, 283], "appli": [2, 3, 7, 8, 12, 13, 17, 18, 21, 24, 35, 36, 45, 56, 57, 73, 87, 90, 95, 98, 100, 103, 105, 107, 121, 134, 137, 138, 140, 145, 147, 148, 149, 152, 154, 156, 161, 162, 163, 166, 169, 170, 171, 174, 176, 178, 180, 181, 182, 184, 186, 191, 192, 195, 196, 198, 199, 200, 202, 204, 208, 209, 210, 215, 216, 224, 238, 241, 245, 248, 249, 252, 254, 256, 263, 265, 267, 274, 275, 279, 283, 285, 287], "5314": 2, "2807": 2, "4864": 2, "7608": 2, "9101": 2, "0073": 2, "mulconst": 2, "object": [2, 4, 7, 8, 9, 13, 14, 17, 22, 24, 35, 36, 37, 40, 41, 47, 51, 54, 57, 95, 96, 98, 100, 103, 105, 109, 113, 121, 122, 128, 134, 135, 137, 143, 145, 148, 154, 158, 159, 161, 172, 175, 178, 180, 181, 182, 183, 185, 188, 189, 191, 195, 207, 208, 215, 226, 238, 240, 241, 243, 245, 255, 260, 261, 263, 279], "stash": 2, "saved_data": 2, "were": [2, 3, 7, 8, 15, 21, 23, 35, 57, 88, 90, 95, 100, 103, 105, 107, 109, 113, 125, 144, 147, 151, 152, 156, 163, 170, 178, 179, 181, 183, 184, 192, 195, 196, 199, 213, 222, 226, 230, 231, 238, 255, 258, 266, 274, 283, 287], "todoubl": 2, "On": [2, 7, 8, 12, 24, 99, 103, 113, 128, 139, 152, 154, 163, 170, 176, 180, 181, 193, 196, 198, 199, 200, 214, 222, 225, 241, 258, 283, 289], "easiest": [2, 7, 39, 99, 113, 161, 178, 195, 241], "your": [2, 4, 5, 8, 10, 12, 14, 15, 18, 19, 21, 22, 23, 24, 35, 36, 39, 41, 47, 48, 49, 51, 54, 55, 56, 58, 59, 60, 72, 80, 87, 93, 95, 96, 99, 100, 103, 104, 107, 109, 110, 112, 114, 115, 117, 118, 121, 122, 123, 125, 131, 132, 134, 135, 137, 138, 139, 140, 143, 145, 148, 149, 150, 151, 152, 154, 155, 158, 159, 161, 162, 163, 167, 169, 170, 172, 175, 176, 177, 178, 181, 182, 183, 186, 188, 189, 191, 193, 195, 196, 199, 201, 204, 209, 224, 225, 226, 231, 239, 240, 242, 243, 244, 245, 252, 253, 254, 255, 260, 261, 265, 268, 269, 278, 282, 283, 285, 287, 288, 289], "tabl": [2, 20, 112, 120, 137, 139, 154, 160, 181, 182, 188, 195, 196, 214, 226, 231], "set_data": 2, "data": [2, 3, 4, 7, 9, 10, 14, 15, 17, 20, 21, 23, 28, 35, 36, 39, 40, 44, 45, 47, 50, 51, 52, 53, 56, 65, 77, 78, 80, 87, 90, 95, 96, 98, 102, 104, 105, 106, 107, 108, 109, 110, 112, 115, 121, 122, 133, 134, 137, 143, 144, 150, 154, 155, 156, 159, 160, 161, 162, 163, 166, 167, 169, 171, 172, 174, 177, 179, 180, 181, 182, 193, 198, 199, 200, 202, 208, 209, 210, 214, 215, 216, 222, 224, 225, 226, 230, 231, 232, 238, 239, 245, 248, 254, 255, 259, 260, 261, 266, 267, 275, 277, 278, 279, 281, 283, 287, 288, 289], "output_nr": 2, "after": [2, 3, 7, 8, 9, 13, 15, 17, 18, 19, 21, 23, 24, 28, 35, 36, 37, 44, 47, 49, 51, 54, 57, 58, 93, 95, 96, 100, 105, 106, 107, 110, 112, 113, 115, 122, 137, 139, 140, 141, 142, 145, 146, 147, 148, 151, 152, 154, 155, 156, 160, 162, 163, 169, 170, 172, 174, 175, 176, 177, 178, 179, 181, 182, 184, 186, 188, 189, 195, 196, 198, 200, 208, 225, 226, 230, 231, 238, 239, 241, 250, 252, 254, 259, 262, 281, 282, 283, 285, 288], "file": [2, 4, 5, 7, 8, 12, 13, 18, 22, 24, 43, 52, 55, 56, 57, 60, 69, 75, 79, 87, 88, 91, 93, 95, 96, 101, 109, 111, 113, 119, 120, 123, 125, 139, 143, 145, 146, 152, 154, 160, 169, 172, 175, 177, 185, 188, 191, 195, 198, 202, 208, 209, 210, 215, 225, 226, 230, 231, 237, 239, 240, 242, 247, 249, 250, 254, 255, 258, 261, 263, 266, 268, 269, 277, 278, 279, 282, 284, 288], "bug": [2, 7, 13, 102, 160, 199, 255, 265, 268, 278], "report": [2, 13, 21, 57, 80, 93, 95, 98, 100, 104, 131, 137, 141, 160, 172, 180, 182, 183, 231, 252, 265, 268, 278, 283], "github": [2, 3, 8, 9, 13, 14, 20, 24, 54, 58, 59, 60, 65, 113, 118, 138, 139, 141, 142, 150, 151, 152, 154, 156, 162, 171, 174, 175, 180, 181, 182, 188, 198, 202, 208, 210, 215, 216, 224, 255, 263, 266, 267, 268, 278, 288], "issu": [2, 7, 8, 9, 12, 24, 56, 139, 140, 151, 156, 159, 160, 163, 171, 172, 177, 188, 193, 195, 196, 199, 200, 202, 208, 209, 222, 225, 227, 238, 255, 265, 266, 267, 268, 274, 276, 278, 279, 282], "fix": [2, 17, 21, 28, 35, 54, 55, 56, 57, 105, 143, 179, 180, 200, 222, 240, 241, 253, 267, 283], "soon": [2, 7, 57, 163, 169, 207, 215], "overview": [2, 7, 8, 14, 58, 60, 98, 132, 133, 137, 145, 146, 152, 154, 175, 178, 180, 181, 182, 184, 188, 199, 202, 204, 261, 274, 275, 277, 284, 289], "alwai": [2, 3, 4, 5, 8, 17, 20, 23, 24, 45, 57, 98, 100, 104, 110, 112, 113, 140, 141, 142, 143, 148, 154, 155, 172, 177, 178, 179, 180, 182, 195, 196, 198, 202, 253, 274, 278], "problem": [2, 8, 14, 17, 18, 23, 54, 56, 57, 106, 108, 112, 113, 121, 128, 144, 155, 160, 161, 170, 178, 180, 182, 188, 192, 193, 196, 202, 226, 227, 230, 241, 255, 258, 274, 276], "question": [2, 7, 8, 12, 13, 21, 54, 96, 139, 154, 159, 184, 196, 202, 226, 275, 283], "forum": [2, 7, 8, 48, 159, 200, 202], "touch": [2, 8, 17, 202], "view": [3, 13, 14, 17, 18, 20, 24, 51, 55, 58, 60, 61, 65, 87, 96, 102, 103, 109, 112, 113, 115, 121, 122, 138, 141, 142, 144, 150, 151, 152, 154, 160, 174, 175, 180, 181, 182, 183, 184, 189, 205, 208, 209, 210, 213, 222, 224, 232, 239, 243, 256, 263, 265, 279, 288], "edit": [3, 8, 14, 15, 20, 24, 53, 55, 65, 141, 142, 152, 154, 159, 160, 174, 175, 177, 180, 181, 182, 208, 210, 263, 267], "code": [3, 4, 5, 7, 8, 9, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 28, 35, 36, 37, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 60, 61, 62, 67, 68, 70, 72, 73, 74, 77, 78, 80, 87, 88, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 125, 128, 131, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 205, 206, 208, 209, 210, 213, 215, 224, 225, 226, 227, 228, 230, 231, 232, 238, 239, 240, 241, 242, 243, 244, 245, 248, 249, 251, 252, 253, 254, 255, 256, 259, 260, 261, 263, 265, 266, 267, 275, 276, 277, 278, 279, 282, 283, 287], "prerequisit": [3, 4, 5, 19, 58, 60, 61, 108, 125, 139, 141, 142, 147, 150, 151, 152, 154, 155, 163, 174, 175, 180, 181, 182, 191, 192, 196, 199, 207, 208, 210, 241, 263, 266, 282], "frontend": [3, 4, 5, 13, 89, 91, 132, 136, 137, 215, 248, 261, 268, 279, 289], "semant": [3, 4, 8, 54, 73, 103, 108, 110, 111, 121, 140, 154, 195, 196, 261, 276, 277, 279, 284, 287, 289], "11": [3, 7, 8, 14, 21, 23, 37, 77, 102, 120, 123, 138, 139, 158, 161, 177, 178, 182, 185, 191, 193, 196, 209, 210, 214, 226, 231, 261], "nvidia": [3, 7, 21, 55, 148, 154, 163, 193, 210, 225, 241, 260, 283], "toolkit": [3, 108, 162, 172, 195, 239], "releas": [3, 4, 8, 13, 21, 55, 120, 122, 138, 139, 143, 169, 181, 183, 188, 206, 207, 214, 215, 231, 241, 245, 255, 283], "greatli": [3, 8, 54, 95, 113, 179], "reduc": [3, 8, 14, 21, 24, 37, 40, 47, 61, 98, 100, 105, 120, 131, 138, 139, 140, 142, 144, 145, 148, 150, 152, 154, 161, 162, 163, 169, 172, 176, 177, 180, 182, 188, 191, 193, 196, 200, 209, 225, 226, 229, 230, 247, 249, 250, 258, 259, 260, 261, 263, 268, 283], "cpu": [3, 4, 7, 8, 9, 12, 13, 14, 17, 18, 23, 24, 36, 41, 44, 47, 48, 53, 54, 57, 67, 78, 80, 87, 88, 93, 103, 105, 107, 113, 115, 120, 121, 128, 131, 132, 137, 138, 140, 141, 142, 145, 152, 154, 163, 170, 174, 175, 177, 178, 180, 181, 182, 183, 184, 185, 188, 191, 196, 198, 206, 207, 214, 216, 225, 226, 227, 230, 231, 238, 255, 260, 261, 265, 266, 268, 281, 285, 288, 289], "overhead": [3, 7, 8, 13, 21, 61, 87, 120, 138, 139, 142, 147, 152, 161, 163, 172, 177, 180, 182, 183, 188, 193, 199, 207, 226, 231, 241, 251, 258, 265, 267, 268, 279, 283], "increas": [3, 7, 8, 23, 24, 28, 40, 41, 48, 80, 87, 88, 93, 96, 105, 113, 138, 139, 140, 142, 144, 145, 146, 150, 169, 172, 177, 188, 196, 200, 209, 214, 224, 225, 226, 240, 241, 244, 245, 258, 260, 267, 279], "mostli": [3, 13, 24, 90, 95, 105, 145, 182, 184, 262], "util": [3, 4, 5, 7, 13, 18, 24, 28, 37, 41, 48, 54, 56, 58, 60, 87, 98, 102, 104, 113, 120, 121, 122, 128, 132, 137, 138, 139, 140, 142, 145, 147, 154, 158, 160, 161, 163, 170, 172, 174, 175, 177, 178, 181, 183, 184, 188, 189, 191, 193, 198, 204, 207, 208, 215, 222, 224, 225, 239, 240, 247, 248, 250, 252, 254, 258, 260, 261, 266, 279, 281, 283, 285, 288], "deploy": [3, 105, 131, 135, 144, 215, 254, 268, 281], "import": [3, 4, 5, 7, 8, 9, 12, 13, 14, 17, 21, 23, 24, 28, 35, 37, 47, 51, 54, 55, 56, 57, 58, 77, 80, 87, 90, 95, 96, 98, 100, 102, 103, 105, 107, 110, 113, 117, 121, 122, 125, 138, 139, 140, 141, 142, 147, 148, 149, 152, 154, 155, 158, 159, 161, 169, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 188, 189, 192, 193, 195, 196, 200, 202, 204, 205, 206, 207, 208, 210, 214, 215, 216, 222, 226, 227, 238, 239, 240, 241, 245, 248, 250, 255, 256, 258, 259, 262, 263, 265, 268, 269, 274, 276, 277, 278, 279, 281, 282, 283, 285, 288], "appear": [3, 14, 17, 112, 195, 222], "won": [3, 7, 13, 47, 113, 121, 138, 149, 158, 166, 171, 178, 195, 196, 225, 278], "heart": [3, 54, 214], "veri": [3, 4, 5, 7, 8, 12, 17, 18, 23, 24, 28, 44, 49, 51, 53, 54, 70, 80, 90, 96, 100, 107, 109, 113, 121, 128, 138, 142, 143, 145, 169, 170, 179, 180, 182, 183, 184, 186, 188, 189, 196, 198, 200, 222, 231, 240, 253, 274, 276], "time": [3, 4, 7, 8, 9, 12, 14, 15, 16, 17, 18, 19, 21, 24, 35, 36, 37, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 65, 70, 73, 77, 78, 80, 88, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 118, 121, 122, 125, 128, 131, 135, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 169, 170, 171, 172, 176, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 191, 193, 195, 196, 198, 199, 200, 205, 206, 207, 208, 213, 214, 216, 222, 225, 226, 227, 229, 230, 232, 238, 241, 251, 252, 253, 254, 256, 260, 265, 267, 274, 275, 276, 277, 278, 279, 281, 283, 287, 288, 289], "tool": [3, 8, 12, 17, 56, 87, 93, 95, 96, 100, 104, 106, 121, 135, 138, 152, 154, 155, 160, 172, 180, 183, 188, 189, 191, 199, 209, 222, 230, 252, 258, 265], "compil": [3, 5, 8, 10, 12, 13, 19, 21, 90, 106, 132, 136, 137, 154, 159, 185, 195, 202, 215, 216, 226, 229, 231, 240, 241, 247, 248, 255, 260, 261, 267, 268, 279, 289], "boost": [3, 105, 107, 160, 161, 202, 215, 216, 267, 278, 289], "would": [3, 4, 7, 8, 12, 17, 19, 20, 23, 24, 35, 47, 54, 58, 60, 80, 93, 95, 98, 100, 103, 105, 109, 112, 113, 118, 122, 128, 138, 141, 142, 143, 144, 145, 146, 148, 149, 152, 155, 159, 160, 161, 163, 169, 170, 171, 175, 177, 178, 179, 180, 181, 182, 184, 191, 193, 195, 196, 198, 199, 200, 202, 208, 210, 222, 249, 250, 254, 258, 265, 266, 276, 277, 287, 289], "demonstr": [3, 4, 5, 17, 19, 20, 21, 42, 47, 55, 62, 87, 90, 96, 98, 104, 114, 118, 131, 133, 134, 137, 138, 139, 141, 142, 143, 148, 149, 152, 156, 158, 159, 160, 163, 166, 172, 174, 175, 178, 180, 181, 182, 183, 188, 191, 192, 195, 196, 199, 200, 205, 207, 208, 210, 213, 214, 225, 226, 230, 231, 244, 249, 251, 252, 253, 254, 256, 258, 259, 260, 262, 263, 265, 266, 267, 268, 276, 278, 279, 281, 282, 283, 285], "mnist": [3, 8, 37, 48, 51, 80, 98, 102, 104, 132, 137, 138, 144, 154, 156, 171, 181, 186, 189, 200, 228, 260], "libtorch": [3, 4, 8, 215, 288], "counterpart": [3, 21, 160, 195, 210, 215, 283], "syntax": [3, 53, 89, 91, 92, 122, 226, 261], "step": [3, 4, 7, 8, 9, 12, 13, 14, 15, 17, 18, 20, 21, 23, 24, 35, 39, 40, 47, 48, 51, 54, 57, 65, 80, 87, 90, 95, 98, 102, 104, 105, 106, 107, 113, 115, 118, 133, 137, 138, 139, 140, 145, 146, 147, 148, 150, 152, 154, 155, 160, 162, 166, 170, 172, 179, 180, 181, 182, 183, 184, 185, 189, 191, 193, 195, 196, 201, 204, 205, 207, 208, 215, 216, 222, 225, 238, 239, 241, 248, 254, 259, 261, 262, 265, 266, 267, 269, 278, 279, 281, 283, 285, 288], "depict": [3, 102, 196], "chunk": [3, 7, 60, 154, 169, 172, 174, 263], "batch": [3, 7, 8, 20, 21, 24, 37, 40, 41, 42, 49, 51, 54, 56, 57, 58, 60, 61, 80, 87, 93, 95, 96, 98, 102, 103, 104, 105, 110, 113, 122, 128, 131, 133, 136, 137, 138, 139, 140, 142, 143, 144, 145, 150, 154, 155, 156, 162, 163, 166, 169, 171, 172, 174, 177, 178, 179, 181, 182, 183, 185, 186, 188, 189, 191, 193, 196, 198, 199, 200, 225, 226, 261, 263, 267, 276, 279, 283, 287, 289], "data_load": [3, 8, 24], "optim": [3, 7, 8, 12, 13, 14, 15, 17, 18, 20, 21, 23, 24, 35, 36, 37, 38, 39, 42, 44, 45, 47, 51, 54, 58, 60, 65, 70, 71, 72, 75, 87, 90, 93, 95, 98, 102, 105, 106, 114, 118, 122, 128, 131, 132, 134, 135, 137, 138, 139, 142, 147, 148, 150, 152, 154, 155, 156, 160, 162, 163, 170, 171, 172, 176, 177, 178, 179, 180, 181, 184, 185, 188, 189, 191, 192, 193, 195, 198, 199, 200, 202, 207, 208, 213, 215, 216, 225, 226, 230, 238, 242, 245, 247, 248, 249, 252, 254, 255, 260, 261, 267, 269, 274, 279, 281, 283, 288, 289], "zero_grad": [3, 8, 24, 40, 51, 95, 102, 113, 138, 139, 140, 152, 154, 169, 178, 180, 182, 189, 196, 207, 208, 215, 244, 248], "nll_loss": [3, 138, 154, 181], "updat": [3, 8, 13, 14, 15, 16, 17, 20, 21, 24, 40, 47, 48, 54, 57, 74, 77, 87, 95, 105, 107, 112, 113, 114, 121, 122, 138, 139, 140, 144, 148, 152, 155, 163, 169, 178, 179, 181, 182, 188, 196, 199, 202, 204, 208, 213, 225, 238, 243, 259, 274, 282, 283], "captur": [3, 8, 57, 95, 114, 115, 117, 131, 137, 138, 158, 191, 192, 193, 195, 196, 199, 216, 226, 255, 265, 268], "But": [3, 8, 12, 13, 48, 49, 57, 80, 96, 103, 109, 112, 143, 152, 163, 169, 170, 171, 179, 195, 198, 216, 226, 274, 277, 287], "slightli": [3, 7, 17, 139, 154, 155, 172, 177, 184, 226, 241, 277], "prealloc": 3, "reus": [3, 13, 70, 113, 121, 149, 158, 170, 179, 196, 241, 245, 258], "tensoropt": [3, 268], "floatcuda": 3, "dtype": [3, 4, 5, 12, 13, 17, 18, 19, 103, 109, 140, 149, 174, 178, 195, 215, 225, 238, 248, 250, 262, 263, 266, 268, 277, 288], "longcuda": 3, "klong": 3, "zero": [3, 8, 9, 14, 21, 24, 35, 40, 45, 51, 54, 95, 96, 98, 100, 103, 104, 112, 113, 138, 139, 146, 154, 155, 166, 170, 172, 175, 176, 180, 182, 184, 189, 200, 225, 229, 231, 237, 240, 241, 255, 259, 260, 261, 274, 276, 277, 282, 283], "ktrainbatchs": 3, "28": [3, 8, 21, 37, 51, 100, 102, 113, 156, 171, 178, 189, 214, 226, 240, 283], "copy_": [3, 44, 53, 120, 140, 160, 180, 230, 238], "training_step": 3, "call": [3, 4, 7, 8, 10, 12, 13, 14, 16, 17, 18, 20, 21, 28, 35, 36, 37, 40, 42, 44, 45, 47, 48, 49, 51, 54, 56, 57, 58, 60, 72, 80, 90, 95, 96, 98, 100, 102, 103, 105, 107, 109, 112, 113, 118, 120, 121, 122, 131, 133, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 152, 154, 155, 158, 159, 160, 162, 163, 166, 169, 170, 171, 172, 174, 175, 176, 178, 180, 181, 182, 183, 184, 186, 188, 191, 195, 196, 202, 205, 207, 208, 209, 214, 225, 226, 227, 228, 230, 231, 239, 240, 241, 244, 250, 251, 252, 253, 255, 258, 265, 268, 282, 283, 287, 288], "void": [3, 4, 5, 7, 8, 9, 18, 160, 175, 226, 231, 240, 268, 278], "net": [3, 8, 24, 48, 49, 51, 54, 57, 80, 90, 93, 98, 102, 103, 105, 138, 154, 166, 177, 181, 188, 189, 228, 243], "stream": [3, 18, 87, 103, 106, 140, 172, 177, 215, 268], "cudagraph": 3, "cudastream": 3, "capturestream": 3, "getstreamfrompool": 3, "setcurrentcudastream": 3, "capture_begin": 3, "capture_end": 3, "warm": [3, 76, 79, 120, 188, 193, 213, 214, 226, 231, 261, 279], "side": [3, 9, 56, 57, 87, 112, 156, 163, 169, 171, 172, 175, 179, 180, 188, 222], "prepar": [3, 14, 21, 24, 48, 56, 57, 73, 74, 102, 110, 121, 122, 156, 169, 174, 175, 178, 180, 206, 216, 231, 281, 283], "cach": [3, 131, 147, 160, 188, 199, 216, 241, 253, 258, 260, 267, 278], "cubla": [3, 226], "cudnn": [3, 7, 145, 148, 155, 163, 225], "warmupstream": 3, "int": [3, 4, 5, 7, 8, 14, 23, 24, 56, 58, 60, 138, 139, 141, 152, 154, 160, 174, 175, 180, 181, 182, 188, 193, 195, 198, 210, 215, 258, 263, 265, 278, 288], "num_warmup_it": 3, "success": [3, 8, 17, 80, 109, 144, 160, 184, 222, 288], "replac": [3, 4, 8, 24, 28, 47, 60, 62, 96, 107, 113, 114, 118, 120, 128, 137, 138, 140, 154, 158, 176, 178, 182, 184, 185, 188, 192, 195, 198, 215, 216, 226, 255, 261, 263, 267, 276, 279, 286], "replai": [3, 17, 162], "spin": [3, 98], "ordinari": 3, "epoch": [3, 8, 20, 24, 37, 40, 41, 57, 58, 60, 93, 98, 102, 105, 107, 113, 122, 128, 138, 139, 140, 144, 145, 154, 163, 169, 178, 182, 189, 198, 200, 239], "59584": 3, "60000": [3, 154], "3921": 3, "test": [3, 12, 24, 28, 37, 40, 41, 54, 88, 90, 96, 98, 104, 105, 107, 108, 114, 125, 137, 138, 139, 145, 154, 156, 158, 160, 163, 172, 177, 178, 181, 184, 186, 189, 193, 195, 213, 214, 226, 265, 267, 287, 289], "2051": 3, "accuraci": [3, 21, 24, 28, 41, 48, 98, 104, 105, 113, 132, 133, 135, 137, 138, 139, 140, 144, 166, 176, 177, 181, 186, 189, 191, 214, 225, 239, 244, 260, 281, 283], "938": [3, 8, 163], "1826": 3, "1273": 3, "960": 3, "1796": 3, "1012": [3, 163], "968": 3, "1603": 3, "0869": 3, "973": 3, "2315": 3, "0736": 3, "978": 3, "6": [3, 8, 14, 24, 37, 39, 51, 54, 77, 90, 96, 98, 100, 102, 103, 112, 114, 118, 120, 121, 122, 148, 149, 154, 160, 163, 175, 176, 177, 178, 180, 182, 191, 193, 195, 199, 210, 214, 225, 243, 252, 253, 254, 258, 267, 269, 277, 283], "0511": 3, "0704": 3, "977": [3, 163, 214], "7": [3, 7, 8, 21, 22, 23, 24, 37, 39, 56, 90, 120, 128, 138, 139, 154, 162, 163, 177, 191, 192, 193, 196, 202, 204, 205, 210, 213, 214, 225, 251, 255, 263, 266, 267, 269, 278, 285, 288], "0802": 3, "0654": 3, "979": 3, "0774": 3, "0604": 3, "980": 3, "9": [3, 4, 7, 8, 21, 23, 24, 37, 43, 47, 54, 93, 98, 102, 112, 113, 120, 122, 160, 170, 177, 178, 180, 189, 191, 196, 214, 215, 226, 228, 231, 243, 248, 269, 283, 288], "0669": 3, "0544": 3, "984": [3, 214], "0219": 3, "0517": 3, "983": 3, "real": [3, 8, 9, 17, 35, 41, 57, 59, 95, 105, 106, 107, 108, 112, 135, 138, 145, 146, 154, 155, 169, 175, 179, 184, 193, 195, 196, 214, 226, 265, 276, 279], "0m44": 3, "287": 3, "018": [3, 247], "sy": [3, 23, 24, 58, 60, 152, 154, 175, 204], "0m1": 3, "116": [3, 265], "produc": [3, 7, 8, 14, 73, 105, 114, 121, 144, 147, 155, 156, 158, 159, 161, 163, 172, 178, 179, 184, 191, 195, 196, 208, 225, 241, 245, 262, 281, 288], "4092": 3, "2037": 3, "2039": 3, "1274": 3, "961": 3, "1779": 3, "1017": 3, "1559": 3, "0871": 3, "972": 3, "2240": 3, "0735": [3, 283], "0520": 3, "0710": 3, "0935": 3, "0666": 3, "0744": 3, "0603": 3, "981": 3, "0762": 3, "0547": 3, "0207": 3, "0525": 3, "0m6": 3, "952": [3, 160], "0m7": 3, "048": [3, 202], "0m0": 3, "619": 3, "gain": [3, 7, 21, 87, 161, 188, 263, 283, 289], "six": [3, 178], "kind": [3, 7, 8, 24, 40, 48, 51, 54, 80, 96, 104, 106, 110, 122, 132, 137, 216, 258], "larg": [3, 4, 5, 7, 8, 10, 15, 19, 20, 21, 23, 40, 44, 54, 65, 93, 96, 100, 102, 105, 110, 112, 113, 115, 121, 128, 133, 137, 138, 139, 141, 144, 148, 152, 154, 156, 166, 172, 174, 178, 179, 181, 182, 183, 191, 193, 196, 198, 204, 210, 214, 225, 231, 232, 241, 245, 263, 265, 276, 283, 285], "improv": [3, 7, 8, 12, 13, 21, 24, 28, 40, 54, 61, 98, 103, 105, 113, 118, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 145, 148, 161, 163, 170, 179, 183, 184, 191, 192, 193, 199, 200, 202, 204, 206, 213, 215, 225, 226, 239, 241, 248, 252, 265, 266, 267, 278, 283, 289], "due": [3, 7, 8, 21, 23, 57, 87, 90, 103, 114, 118, 138, 142, 147, 152, 169, 170, 181, 193, 199, 205, 209, 216, 255, 258, 265, 267, 276, 281, 283, 285], "size": [3, 4, 5, 7, 8, 9, 12, 14, 15, 17, 21, 23, 24, 35, 36, 37, 40, 41, 45, 47, 48, 49, 51, 54, 56, 57, 60, 87, 93, 96, 98, 100, 103, 104, 105, 109, 110, 112, 113, 122, 128, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 154, 155, 156, 160, 161, 162, 163, 166, 169, 171, 172, 175, 177, 178, 179, 180, 181, 184, 188, 191, 192, 193, 195, 196, 198, 199, 201, 207, 208, 209, 215, 225, 226, 230, 232, 240, 241, 243, 259, 260, 263, 265, 266, 267, 274, 277, 279, 283], "larger": [3, 12, 15, 80, 87, 95, 105, 113, 117, 122, 131, 137, 138, 139, 142, 144, 150, 172, 179, 182, 184, 188, 191, 192, 193, 207, 208, 214, 226, 245, 267, 279], "heavi": [3, 8, 54, 105, 109], "less": [3, 7, 8, 10, 12, 19, 24, 61, 87, 100, 105, 106, 113, 117, 128, 139, 144, 155, 158, 169, 172, 178, 179, 180, 188, 189, 193, 195, 196, 199, 210, 226, 230, 265, 267], "impact": [3, 15, 21, 40, 93, 105, 155, 172, 180, 183, 224, 258, 259, 267, 283], "smaller": [3, 40, 100, 105, 112, 113, 138, 142, 178, 180, 191, 226, 230, 245], "nevertheless": [3, 7, 24, 163, 178], "richard": 4, "zou": 4, "integr": [4, 5, 8, 13, 17, 19, 39, 93, 114, 118, 120, 136, 137, 144, 147, 174, 188, 189, 193, 199, 207, 214, 222, 224, 238, 243, 252, 258, 262, 278, 282, 288, 289], "opcheck": [4, 19], "basic": [4, 5, 12, 14, 18, 19, 20, 28, 35, 36, 37, 40, 41, 42, 43, 44, 45, 54, 59, 61, 62, 78, 82, 85, 92, 95, 98, 99, 100, 102, 103, 105, 108, 112, 113, 114, 115, 117, 118, 121, 131, 137, 142, 145, 148, 160, 167, 174, 178, 183, 196, 199, 200, 201, 207, 208, 226, 239, 249, 250, 254, 255, 260, 261, 275, 279], "program": [4, 5, 7, 10, 23, 65, 100, 106, 108, 109, 112, 137, 142, 145, 159, 172, 174, 181, 193, 208, 226, 241, 254, 255, 258, 263, 265, 269, 282], "amd": [4, 7], "rocm": [4, 7, 188], "modif": [4, 17, 18, 24, 93, 106, 113, 148, 154, 176, 178, 181, 186, 189, 195, 199, 240, 245, 255], "e": [4, 5, 7, 8, 9, 10, 12, 13, 14, 19, 23, 35, 36, 41, 47, 48, 54, 56, 57, 65, 80, 90, 93, 95, 98, 100, 103, 105, 108, 112, 113, 122, 128, 132, 137, 138, 140, 141, 142, 144, 145, 146, 149, 151, 152, 154, 156, 163, 170, 171, 175, 176, 178, 180, 182, 184, 188, 192, 193, 195, 199, 200, 206, 210, 213, 215, 216, 226, 228, 231, 240, 241, 243, 244, 262, 276, 277, 279, 281, 285, 287, 288, 289], "g": [4, 5, 7, 8, 9, 10, 12, 13, 14, 17, 19, 23, 47, 54, 56, 57, 65, 93, 95, 98, 100, 103, 105, 107, 108, 112, 128, 132, 137, 138, 140, 144, 145, 146, 152, 154, 156, 160, 169, 171, 175, 178, 180, 182, 184, 188, 193, 195, 199, 200, 210, 213, 216, 226, 231, 240, 241, 262, 268, 277, 281, 287, 288, 289], "etc": [4, 5, 10, 13, 19, 48, 49, 51, 54, 56, 74, 98, 100, 103, 106, 107, 108, 109, 113, 122, 142, 172, 176, 178, 179, 184, 195, 196, 199, 200, 206, 214, 215, 226, 228, 241, 243, 276, 281], "wish": [4, 5, 7, 8, 10, 19, 57, 80, 96, 103, 122, 141, 166, 171, 181, 191, 196, 208, 225, 253, 262, 275], "bring": [4, 5, 10, 96, 141, 172, 178, 188, 191, 196, 231, 241, 258, 267, 277, 287], "bless": 4, "path": [4, 5, 7, 8, 23, 24, 37, 54, 55, 57, 58, 80, 87, 93, 95, 98, 103, 104, 105, 106, 113, 122, 138, 139, 160, 175, 191, 193, 199, 202, 207, 208, 216, 222, 226, 238, 240, 241, 242, 258, 265, 266, 267, 274, 281, 288], "fuse": [4, 5, 7, 21, 24, 131, 135, 136, 137, 160, 177, 185, 199, 213, 260, 261, 262, 267, 278, 283, 288], "subsystem": [4, 10, 19, 195, 252], "def": [4, 5, 7, 8, 9, 12, 14, 17, 23, 24, 37, 51, 58, 60, 90, 102, 113, 122, 138, 139, 140, 141, 142, 147, 149, 152, 154, 160, 161, 170, 174, 175, 180, 181, 182, 189, 191, 204, 206, 207, 208, 210, 214, 216, 222, 226, 243, 250, 255, 259, 262, 263, 268, 269, 274, 278, 281, 282, 283, 285], "mymuladd": [4, 5], "bind": [4, 5, 8, 9, 10, 13, 141, 241, 258, 266], "precompil": 4, "instead": [4, 6, 7, 8, 10, 12, 13, 19, 21, 24, 25, 26, 27, 35, 48, 49, 54, 56, 57, 58, 68, 95, 98, 103, 106, 107, 112, 113, 120, 121, 128, 138, 139, 140, 143, 144, 146, 149, 150, 154, 159, 161, 162, 163, 166, 169, 175, 176, 177, 178, 180, 181, 182, 184, 186, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 208, 211, 214, 217, 222, 232, 245, 251, 253, 257, 259, 262, 267, 274, 276, 277, 278, 279, 283, 287, 288], "cpp_extens": [4, 5, 7, 13, 175, 226], "extens": [4, 8, 10, 18, 22, 57, 96, 122, 135, 137, 140, 147, 149, 154, 191, 214, 226, 229, 237, 251, 260, 261, 268, 274, 276, 289], "ahead": [4, 7, 40, 98, 147, 169, 189, 195, 208, 241, 254, 262], "setuptool": [4, 5, 13, 175, 188], "load_inlin": [4, 226], "setup": [4, 5, 7, 8, 13, 20, 24, 39, 57, 58, 60, 138, 139, 144, 152, 169, 175, 182, 207, 208, 210, 226, 240, 265, 267, 276, 277, 282, 287, 288], "extension_cpp": 4, "ext_modul": [4, 5, 7, 13, 175], "cppextens": [4, 7, 13, 175], "muladd": [4, 5], "cpp": [4, 7, 8, 12, 133, 137, 160, 215, 240, 254, 278, 289], "py_limited_api": [4, 5], "min": [4, 24, 57, 87, 100, 105, 113, 128, 154, 175, 178, 180, 182, 191, 195, 255], "expos": [4, 7, 8, 12, 104, 140, 182, 196, 241, 282, 288], "stabl": [4, 29, 30, 31, 32, 33, 54, 67, 80, 105, 106, 121, 128, 141, 157, 177, 187, 188, 190, 216, 225, 286], "limit": [4, 8, 13, 14, 18, 21, 24, 42, 54, 65, 80, 114, 138, 142, 145, 155, 156, 162, 163, 171, 172, 184, 192, 193, 195, 196, 207, 226, 238, 267, 283], "subset": [4, 17, 90, 93, 98, 102, 105, 117, 128, 154, 175, 191, 214, 226, 276, 277], "extra_compile_arg": [4, 5, 13], "cxx": [4, 5, 8, 215, 269, 288], "dpy_limited_api": [4, 5], "0x03090000": [4, 5], "wheel": [4, 54, 105, 178, 188, 289], "cmdclass": [4, 5, 7, 13, 175], "build_ext": [4, 5, 7, 13, 175], "buildextens": [4, 5, 7, 13, 175], "bdist_wheel": [4, 5], "cp39": [4, 5], "cu": [4, 7], "cudaextens": [4, 7, 175], "cpython": [4, 7, 240], "agnost": [4, 7, 192, 227], "pure": [4, 7, 8, 13, 51, 145, 149, 156, 171, 195, 198, 268, 278], "agnostic": 4, "minim": [4, 8, 13, 15, 21, 40, 57, 67, 68, 72, 73, 74, 77, 78, 80, 87, 95, 107, 112, 113, 121, 131, 137, 139, 144, 151, 160, 174, 179, 193, 241, 244, 245, 274, 281, 283], "oldest": 4, "hexcod": 4, "throughout": [4, 15, 57, 110, 154, 169, 172, 178, 189, 238, 276], "environ": [4, 5, 7, 8, 9, 10, 14, 19, 22, 23, 39, 60, 87, 90, 96, 99, 102, 115, 125, 134, 137, 138, 139, 142, 147, 151, 152, 154, 160, 172, 174, 175, 179, 180, 181, 182, 193, 195, 196, 199, 202, 206, 207, 208, 209, 210, 214, 216, 222, 224, 226, 240, 241, 249, 254, 256, 258, 259, 261, 263, 265, 278, 282, 288], "unknown": 4, "behavior": [4, 9, 12, 13, 14, 15, 17, 40, 54, 56, 100, 110, 113, 114, 155, 159, 160, 163, 169, 172, 193, 195, 230, 241, 251, 253, 258, 275, 276, 285], "runnabl": [4, 144, 160, 244], "three": [4, 8, 13, 15, 17, 18, 37, 40, 56, 57, 68, 80, 87, 90, 95, 96, 102, 103, 106, 113, 118, 121, 122, 137, 141, 142, 145, 146, 163, 167, 170, 172, 175, 178, 182, 183, 184, 186, 188, 189, 196, 222, 231, 265, 267, 277, 278], "line": [4, 7, 8, 12, 15, 19, 54, 55, 56, 60, 61, 87, 98, 102, 103, 104, 105, 107, 113, 120, 144, 145, 146, 152, 154, 160, 177, 179, 181, 182, 184, 188, 189, 193, 195, 207, 208, 210, 215, 230, 239, 241, 255, 256, 258, 265, 268, 269, 274, 276], "specif": [4, 5, 7, 8, 12, 13, 14, 21, 23, 24, 37, 41, 48, 60, 80, 87, 93, 95, 96, 98, 100, 102, 104, 107, 108, 109, 113, 114, 115, 117, 118, 122, 125, 134, 138, 139, 142, 145, 146, 148, 154, 155, 160, 172, 174, 176, 178, 180, 181, 182, 183, 184, 188, 189, 192, 195, 196, 198, 199, 202, 206, 207, 208, 214, 215, 222, 224, 231, 238, 240, 249, 252, 254, 258, 259, 260, 262, 275, 278, 279, 281, 282, 283, 288], "verifi": [4, 5, 8, 90, 95, 103, 118, 125, 149, 156, 158, 161, 163, 176, 177, 192, 196, 198, 200, 214, 215, 222, 266, 288], "met": [4, 17, 138, 172], "crash": [4, 8, 265], "wors": [4, 24], "silent": [4, 19, 160, 193, 238], "incorrect": [4, 19, 57, 95, 98, 143, 149, 172, 193], "avoid": [4, 7, 20, 48, 93, 102, 105, 138, 139, 140, 142, 148, 152, 154, 163, 166, 169, 178, 180, 193, 195, 200, 207, 225, 226, 230, 231, 238, 249, 258, 266, 267, 274, 275, 279, 282, 283, 285, 289], "unstabl": [4, 284], "libtorch_python": 4, "particular": [4, 7, 8, 12, 14, 37, 48, 56, 87, 88, 93, 95, 96, 98, 100, 112, 134, 144, 145, 147, 154, 156, 166, 171, 174, 181, 191, 195, 198, 199, 230, 241, 249, 262, 274, 275, 277, 279], "aten": [4, 5, 7, 12, 13, 18, 118, 120, 160, 188, 195, 214, 215, 222, 231, 240, 268, 278, 281], "strongli": [4, 18, 155, 170, 199], "recommend": [4, 8, 10, 12, 13, 18, 23, 24, 65, 87, 96, 102, 113, 115, 117, 137, 140, 146, 152, 167, 177, 184, 188, 195, 196, 198, 199, 202, 207, 214, 215, 222, 230, 239, 240, 241, 263, 265, 276, 281, 289], "ascertain": [4, 266], "compliant": [4, 198, 207, 208], "safe": [4, 9, 24, 105, 172], "guarante": [4, 13, 105, 151, 154, 163, 172, 176, 181, 182, 195, 255, 275], "better": [4, 7, 8, 17, 21, 24, 37, 40, 41, 48, 57, 61, 95, 98, 100, 102, 105, 112, 113, 117, 120, 132, 137, 140, 141, 144, 145, 146, 147, 160, 161, 162, 169, 171, 172, 178, 179, 184, 188, 189, 191, 195, 202, 226, 241, 248, 258, 263, 267, 274, 275, 283], "wild": 4, "west": 4, "There": [4, 8, 12, 13, 17, 18, 21, 35, 51, 80, 90, 95, 96, 98, 100, 103, 104, 105, 106, 107, 110, 112, 113, 128, 133, 146, 147, 151, 155, 156, 159, 161, 163, 166, 169, 171, 174, 177, 178, 181, 182, 184, 195, 196, 197, 198, 199, 216, 226, 228, 233, 234, 235, 236, 240, 241, 244, 246, 249, 254, 256, 258, 262, 265, 276, 283], "caveat": [4, 9, 152, 180, 226, 230, 265], "yourself": [4, 7, 8, 12, 39, 98, 109, 137, 162, 196], "truli": [4, 8, 54, 162], "relev": [4, 8, 17, 58, 106, 108, 112, 125, 139, 142, 176, 191, 195, 241, 243, 249, 255, 266], "third": [4, 8, 9, 12, 15, 19, 57, 67, 68, 70, 72, 73, 74, 77, 78, 100, 103, 110, 121, 131, 137, 141, 149, 175, 184, 274, 287], "intend": [4, 7, 8, 12, 15, 95, 105, 138, 142, 160, 163, 183, 193, 195, 199, 200, 206, 228, 241, 250, 274], "influenc": [4, 8, 57, 100, 172, 258], "accordingli": [4, 13, 23, 155, 169, 180, 191, 202], "command": [4, 7, 8, 17, 55, 96, 102, 104, 117, 125, 137, 140, 151, 152, 172, 175, 178, 180, 181, 182, 184, 188, 189, 191, 198, 208, 210, 214, 215, 231, 239, 241, 254, 255, 256, 263, 265, 269], "consequ": [4, 142, 172, 179, 195], "properli": [4, 12, 13, 17, 55, 60, 105, 149, 152, 154, 163, 169, 170, 178, 180, 181, 182, 184, 199, 238, 274, 276, 285], "could": [4, 7, 8, 9, 12, 13, 14, 57, 93, 95, 100, 105, 106, 107, 109, 110, 112, 115, 120, 138, 139, 142, 143, 146, 154, 163, 169, 172, 178, 179, 180, 181, 182, 184, 188, 189, 191, 195, 198, 208, 209, 210, 215, 216, 222, 230, 231, 258, 262, 274, 276, 278, 281, 287], "outsid": [4, 9, 13, 17, 18, 49, 136, 137, 140, 142, 148, 188, 191, 195, 238, 245, 253, 274], "cannot": [4, 7, 8, 9, 14, 17, 23, 54, 65, 87, 103, 114, 118, 121, 122, 140, 141, 149, 152, 154, 155, 163, 172, 178, 193, 195, 252, 267, 287], "mymuladd_cpu": 4, "const": [4, 5, 7, 8, 9, 12, 13, 18, 160, 175, 215, 226, 240, 268, 278], "torch_check": [4, 5, 7, 12], "torch_internal_assert": [4, 12], "devicetyp": [4, 12, 18], "a_contig": [4, 5], "contigu": [4, 5, 7, 12, 36, 163, 178, 241, 278], "b_contig": [4, 5], "a_ptr": [4, 5], "data_ptr": [4, 5, 12, 268], "b_ptr": [4, 5], "result_ptr": [4, 12], "int64_t": [4, 8, 9, 12, 278], "numel": [4, 5, 12, 178, 180, 240, 274], "order": [4, 5, 8, 10, 14, 15, 18, 19, 21, 35, 36, 37, 48, 49, 54, 55, 60, 67, 68, 70, 72, 73, 74, 77, 78, 80, 87, 93, 95, 96, 98, 103, 113, 114, 115, 117, 118, 120, 121, 132, 137, 138, 140, 143, 144, 146, 149, 152, 154, 159, 160, 161, 163, 175, 176, 181, 184, 186, 191, 193, 195, 196, 198, 199, 230, 240, 249, 250, 258, 262, 263, 276, 279, 283, 287], "torch_librari": [4, 5, 8, 9, 10, 12, 19, 215], "ensur": [4, 5, 7, 12, 13, 14, 15, 17, 18, 24, 41, 54, 58, 61, 68, 105, 113, 114, 120, 121, 122, 138, 142, 151, 152, 154, 158, 172, 174, 178, 179, 181, 183, 191, 192, 193, 196, 207, 226, 228, 238, 244, 252, 258, 266, 268, 278, 282, 285], "awar": [4, 80, 95, 103, 142, 144, 154, 155, 183, 195, 252, 274], "top": [4, 7, 8, 12, 21, 24, 39, 55, 57, 87, 88, 96, 99, 102, 105, 113, 142, 154, 177, 182, 183, 188, 189, 193, 198, 214, 222, 224, 281, 283], "project": [4, 7, 8, 57, 95, 102, 122, 142, 175, 179, 184, 189, 215, 216, 222, 259, 279], "schema": [4, 9, 13], "mutat": [4, 9, 12, 13, 19, 121, 156, 171, 172, 195, 205, 287], "m": [4, 5, 7, 8, 9, 12, 13, 17, 18, 24, 35, 47, 54, 95, 100, 109, 113, 138, 139, 160, 161, 175, 177, 180, 182, 208, 214, 222, 241, 258, 277, 278, 283, 285], "torch_library_impl": [4, 5, 9, 12, 13, 18], "impl": [4, 5, 9, 12, 13, 18, 240], "myaddmul": [4, 5], "__global__": [4, 7], "muladd_kernel": [4, 5], "idx": [4, 5, 24, 37, 177, 189, 283], "blockidx": [4, 7], "blockdim": [4, 7], "threadidx": [4, 7], "mymuladd_cuda": 4, "255": [4, 8, 15, 105, 191, 231, 262], "256": [4, 5, 8, 21, 24, 56, 93, 142, 143, 162, 178, 184, 195, 202, 214, 231, 283], "faketensor": [4, 19, 195, 266], "kernel": [4, 5, 7, 8, 10, 12, 16, 19, 21, 23, 51, 88, 100, 103, 113, 118, 131, 132, 137, 140, 145, 156, 160, 163, 170, 171, 172, 183, 184, 185, 188, 192, 193, 195, 196, 199, 202, 222, 226, 228, 230, 231, 241, 247, 250, 255, 260, 261, 267, 268, 269, 278, 281, 283, 286], "meta": [4, 19, 23, 140, 142, 144, 156, 171, 178, 195, 232, 238, 260, 285], "abstract": [4, 7, 14, 17, 37, 56, 65, 93, 103, 104, 108, 113, 121, 142, 144, 154, 172, 175, 178, 196, 209, 210], "metadata": [4, 13, 19, 21, 102, 147, 178, 189, 195, 230, 266, 283], "correct": [4, 5, 7, 8, 12, 13, 14, 15, 16, 19, 24, 40, 47, 48, 51, 54, 68, 80, 90, 93, 95, 96, 98, 100, 103, 104, 106, 107, 113, 121, 138, 139, 143, 148, 155, 160, 163, 170, 178, 180, 181, 184, 186, 188, 189, 196, 210, 225, 238, 255, 263, 266, 279], "stride": [4, 7, 8, 19, 24, 51, 57, 96, 100, 113, 138, 148, 160, 163, 191, 195, 230, 262, 266, 277], "register_fak": [4, 9, 19], "though": [4, 8, 13, 51, 80, 95, 103, 105, 106, 128, 148, 149, 156, 159, 171, 178, 189, 195, 196, 215, 226, 240, 267, 274], "definit": [4, 7, 8, 12, 13, 42, 51, 73, 80, 90, 107, 121, 132, 137, 159, 170, 179, 183, 240, 241, 275], "load": [4, 7, 9, 21, 23, 24, 28, 35, 36, 38, 39, 40, 44, 45, 47, 51, 56, 57, 60, 80, 93, 98, 103, 104, 106, 113, 115, 123, 137, 138, 140, 145, 160, 163, 169, 172, 174, 178, 188, 189, 191, 195, 198, 207, 215, 216, 225, 229, 237, 238, 240, 245, 254, 255, 260, 261, 265, 267, 268, 282, 283, 284, 288], "strive": 4, "load_librari": [4, 9], "next": [4, 7, 8, 12, 14, 15, 17, 18, 20, 21, 24, 37, 47, 54, 56, 58, 60, 61, 87, 90, 95, 98, 100, 102, 103, 105, 106, 110, 113, 115, 122, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 151, 155, 156, 159, 160, 162, 166, 169, 171, 172, 179, 180, 181, 182, 184, 188, 189, 195, 196, 200, 214, 215, 216, 222, 230, 231, 245, 250, 263, 267, 269, 276, 277, 283], "_c": [4, 5, 141, 265], "_": [4, 7, 14, 15, 17, 18, 24, 44, 53, 54, 57, 103, 106, 113, 140, 141, 145, 154, 161, 166, 178, 180, 182, 189, 204, 206, 214, 225, 230, 255, 259, 263, 281], "_check": 4, "empty_lik": [4, 5, 103, 163, 274], "formula": [4, 13, 19, 105, 158, 178], "matter": [4, 7, 191, 204, 225, 274, 276], "wrong": [4, 57, 80, 107, 145, 160, 193], "hold": [4, 7, 17, 20, 23, 51, 67, 68, 70, 72, 73, 74, 93, 113, 121, 138, 139, 140, 145, 151, 169, 179, 180, 182, 230, 238, 241], "happen": [4, 12, 35, 36, 37, 40, 47, 57, 95, 98, 100, 103, 105, 107, 113, 115, 139, 140, 142, 149, 152, 154, 172, 176, 180, 188, 189, 195, 196, 209, 226, 230, 241, 244, 253, 255, 267], "modul": [4, 7, 9, 15, 16, 17, 20, 23, 24, 28, 36, 41, 42, 45, 48, 49, 51, 54, 58, 60, 65, 71, 73, 75, 95, 96, 98, 102, 103, 104, 107, 112, 117, 122, 123, 128, 131, 137, 138, 139, 140, 142, 143, 147, 148, 152, 154, 159, 160, 163, 166, 169, 171, 174, 175, 177, 178, 180, 181, 182, 183, 186, 189, 191, 192, 193, 195, 199, 200, 206, 207, 208, 209, 210, 214, 215, 222, 226, 228, 229, 231, 237, 241, 243, 245, 258, 260, 261, 262, 265, 267, 268, 278, 281, 282, 283, 288, 289], "initi": [4, 8, 12, 14, 17, 20, 23, 24, 36, 37, 40, 47, 54, 60, 68, 77, 78, 80, 96, 98, 103, 104, 105, 107, 110, 112, 113, 120, 121, 122, 128, 138, 139, 142, 145, 146, 155, 156, 160, 163, 169, 172, 174, 176, 177, 179, 180, 181, 182, 184, 188, 192, 193, 196, 199, 200, 207, 208, 210, 214, 222, 224, 226, 230, 238, 241, 245, 263, 265, 277, 288, 289], "pybind11_modul": [4, 7, 175], "notic": [4, 7, 12, 17, 35, 47, 48, 57, 80, 90, 95, 98, 103, 105, 107, 122, 149, 154, 160, 162, 170, 171, 178, 188, 193, 195, 199, 200, 244, 255, 274, 276], "pybind11": [4, 7, 12, 175, 226], "promis": [4, 113, 278], "With": [4, 12, 13, 18, 20, 21, 23, 24, 44, 53, 57, 80, 90, 95, 96, 102, 109, 140, 142, 149, 152, 154, 160, 166, 169, 174, 180, 181, 182, 183, 184, 185, 200, 202, 205, 206, 207, 210, 222, 224, 230, 238, 241, 254, 258, 259, 261, 263, 267, 268, 283], "sadli": 4, "foreshadow": 4, "wonder": [4, 7, 107, 169, 172, 196, 199], "sai": [4, 7, 8, 19, 28, 47, 56, 103, 107, 109, 112, 140, 143, 156, 161, 169, 176, 188, 267], "not_agnost": 4, "csrc": [4, 7, 175], "extension_bad": 4, "__init__": [4, 5, 7, 8, 9, 14, 17, 24, 36, 41, 51, 56, 58, 98, 100, 102, 107, 113, 122, 138, 145, 147, 152, 154, 174, 176, 180, 181, 182, 189, 191, 206, 207, 208, 210, 214, 222, 228, 230, 243, 255, 262, 278, 282, 285], "successfulli": [4, 8, 55, 115, 141, 144, 154, 160, 174, 181, 195, 196, 213, 214, 228, 242, 243, 244, 276, 288], "extern": [4, 56, 105, 122, 144, 159, 160, 241, 268, 278], "pyobject": 4, "pyinit__c": 4, "struct": [4, 8, 9, 18], "pymoduledef": 4, "module_def": 4, "pymoduledef_head_init": 4, "null": [4, 8, 222, 265], "interpret": [4, 7, 8, 61, 87, 90, 96, 112, 131, 137, 146, 147, 184, 193, 195, 226, 229, 237, 240, 255, 258, 260, 261, 268], "global": [4, 7, 8, 54, 61, 93, 142, 161, 169, 174, 181, 186, 195, 204, 206, 209, 227, 238, 240, 241, 282, 283], "variabl": [4, 7, 8, 12, 35, 54, 87, 93, 95, 103, 106, 107, 109, 113, 125, 147, 151, 154, 160, 174, 180, 183, 195, 196, 199, 202, 214, 222, 249, 256, 258, 265, 267, 269, 276, 278, 279, 282, 287, 288], "pymodule_cr": 4, "entir": [4, 7, 8, 17, 20, 23, 24, 51, 54, 58, 105, 107, 110, 113, 128, 137, 138, 139, 145, 147, 148, 169, 171, 174, 176, 178, 182, 184, 192, 195, 196, 208, 225, 230, 232, 241, 245, 255, 274, 275, 276], "statement": [4, 12, 35, 47, 49, 114, 184, 195, 225, 227, 282], "trigger": [4, 140, 152, 160, 172, 180, 182, 192, 241], "challeng": [4, 17, 109, 110, 114, 131, 138, 141, 142, 154, 170, 179, 191, 192, 208, 209, 210, 226, 260], "shift": [4, 178, 200], "toward": [4, 24, 54, 105, 146, 179], "trivial": [4, 17, 56, 61, 103, 143, 196, 209, 285], "pathlib": [4, 5, 113, 139, 191], "so_fil": [4, 5], "__file__": [4, 5, 7, 175, 226], "glob": [4, 5], "assert": [4, 5, 7, 9, 14, 23, 24, 102, 140, 147, 152, 160, 161, 181, 183, 189, 195, 204, 250, 263, 265, 283], "len": [4, 5, 9, 24, 37, 51, 56, 60, 102, 113, 128, 138, 139, 140, 154, 180, 181, 189, 191, 210, 283], "f": [4, 5, 7, 12, 14, 15, 19, 23, 24, 35, 37, 47, 51, 58, 60, 77, 95, 102, 107, 113, 121, 122, 138, 139, 141, 142, 143, 152, 154, 160, 161, 174, 175, 177, 178, 180, 181, 182, 189, 191, 204, 206, 207, 208, 210, 214, 222, 226, 243, 259, 263, 265, 268, 283, 287], "register_autograd": [4, 19, 252], "prefer": [4, 8, 12, 19, 58, 161, 166, 175, 178, 193, 196, 200, 201, 225, 252, 265, 278], "directli": [4, 7, 8, 12, 14, 15, 17, 19, 36, 44, 53, 57, 90, 93, 95, 96, 103, 114, 115, 117, 118, 140, 141, 142, 147, 149, 150, 161, 172, 177, 178, 182, 184, 196, 200, 206, 208, 258, 265, 267, 276, 277, 285, 288], "_backward": 4, "saved_tensor": [4, 7, 149], "grad_a": [4, 77, 121], "grad_b": [4, 77, 121], "none": [4, 9, 14, 17, 18, 23, 24, 37, 51, 54, 93, 95, 105, 113, 138, 139, 140, 154, 156, 160, 161, 163, 171, 174, 178, 181, 191, 195, 202, 207, 208, 210, 239, 250, 262, 281, 283, 285], "needs_input_grad": 4, "_setup_context": 4, "saved_a": 4, "saved_b": 4, "setup_context": 4, "composit": [4, 8, 10, 14, 19, 107, 108, 161, 174, 178, 210, 252], "had": [4, 8, 51, 56, 95, 98, 103, 110, 113, 115, 121, 169, 170, 179, 189, 215, 222, 238], "own": [4, 7, 8, 12, 13, 14, 17, 20, 21, 23, 36, 37, 54, 57, 68, 80, 93, 95, 96, 98, 113, 118, 120, 121, 132, 137, 138, 139, 140, 146, 147, 148, 152, 160, 169, 170, 176, 177, 178, 181, 182, 184, 191, 193, 195, 196, 198, 199, 207, 209, 226, 238, 262, 265, 267, 283], "mymul": 4, "mymul_cpu": 4, "correctli": [4, 5, 15, 19, 54, 57, 80, 95, 96, 98, 125, 137, 140, 158, 163, 169, 172, 174, 176, 177, 191, 193, 196, 199, 210, 244, 276], "mathemat": [4, 13, 16, 19, 47, 53, 68, 95, 98, 100, 109, 154, 178, 195], "plan": [4, 8, 10, 13, 23, 122, 139, 142, 191, 196, 277, 288], "gradcheck": [4, 19, 148, 149, 158, 241], "sample_input": [4, 5, 122], "make_tensor": [4, 5], "make_nondiff_tensor": [4, 5], "20": [4, 5, 8, 24, 87, 90, 93, 103, 120, 138, 144, 145, 152, 154, 155, 163, 169, 176, 178, 180, 182, 188, 226, 227, 231, 240, 255, 259, 277, 283], "14": [4, 5, 8, 28, 51, 98, 138, 160, 161, 178, 191, 199, 214, 226, 231, 258], "123": [4, 5, 56, 178, 182, 214], "reference_muladd": [4, 5], "extend": [4, 7, 8, 9, 12, 24, 28, 57, 93, 114, 115, 116, 117, 131, 132, 136, 137, 138, 146, 155, 177, 178, 181, 182, 191, 192, 196, 215, 216, 241, 245, 249, 251, 262, 265, 268, 289], "arg": [4, 5, 23, 24, 58, 60, 109, 122, 138, 139, 152, 154, 159, 179, 180, 181, 182, 191, 193, 195, 204, 206, 207, 208, 215, 255, 259, 268], "assert_clos": [4, 5], "check": [4, 5, 7, 8, 12, 16, 17, 18, 24, 39, 40, 41, 44, 47, 48, 49, 54, 55, 57, 60, 63, 64, 80, 86, 90, 95, 98, 100, 102, 103, 104, 105, 106, 109, 113, 115, 120, 137, 138, 139, 140, 141, 144, 145, 152, 154, 155, 158, 160, 163, 171, 172, 176, 177, 178, 181, 191, 192, 193, 195, 196, 198, 199, 203, 208, 214, 215, 218, 219, 220, 221, 222, 223, 225, 231, 248, 250, 254, 255, 269, 271, 272, 277, 278, 279, 280, 281, 282, 288], "undefin": [4, 9, 154, 199, 274, 275, 276], "myadd_out": 4, "myadd_out_cpu": 4, "is_contigu": [4, 7, 163, 240], "caus": [4, 15, 18, 80, 87, 95, 103, 113, 143, 160, 172, 177, 180, 184, 188, 191, 195, 196, 222, 227, 241, 253, 258, 265, 274, 282], "incompat": [4, 141, 195, 255], "went": [4, 57, 100, 103, 147, 160], "fairli": [4, 7, 105, 113, 154, 169, 179, 199], "serv": [5, 8, 10, 62, 65, 90, 98, 105, 110, 121, 137, 152, 159, 162, 175, 181, 182, 196, 206, 209, 213, 225, 226, 240, 249, 266, 276], "languag": [5, 7, 8, 10, 28, 48, 54, 100, 106, 108, 110, 137, 142, 144, 145, 146, 167, 182, 184, 202, 214, 241, 245, 250, 252, 255, 263, 268], "intel": [5, 7, 10, 137, 154, 160, 163, 260, 281, 282, 288], "label": [5, 8, 37, 40, 41, 45, 47, 48, 56, 57, 80, 93, 95, 96, 98, 102, 103, 104, 107, 112, 120, 128, 139, 142, 145, 152, 172, 177, 180, 184, 189, 196, 198, 222, 226, 228, 231, 255, 259, 260, 283], "xpu": [5, 36, 41, 44, 67, 80, 103, 121, 128, 215, 231], "bundl": [5, 250], "essenti": [5, 8, 13, 17, 19, 35, 54, 106, 107, 109, 147, 154, 167, 172, 179, 195, 201, 258, 281, 285], "activ": [5, 7, 8, 13, 15, 17, 18, 21, 24, 36, 51, 57, 63, 64, 87, 95, 96, 98, 105, 107, 113, 131, 139, 142, 147, 150, 154, 161, 169, 176, 177, 188, 199, 200, 202, 203, 214, 215, 218, 219, 220, 221, 222, 223, 224, 231, 241, 262, 263, 268, 269, 271, 272, 280, 281, 283], "prior": [5, 14, 18, 24, 55, 57, 95, 100, 105, 152, 162, 176, 189, 199, 206, 208], "execut": [5, 7, 8, 12, 14, 18, 20, 22, 35, 36, 42, 43, 47, 49, 52, 55, 69, 75, 79, 87, 91, 95, 98, 101, 103, 106, 111, 114, 118, 119, 123, 133, 137, 140, 141, 143, 144, 147, 154, 155, 159, 160, 163, 172, 175, 178, 179, 181, 182, 183, 185, 193, 195, 199, 202, 206, 214, 215, 222, 225, 237, 240, 247, 250, 254, 255, 258, 261, 263, 265, 268, 278, 284, 288], "best": [5, 7, 8, 12, 42, 47, 57, 65, 80, 93, 115, 118, 120, 122, 128, 132, 135, 137, 150, 154, 156, 160, 171, 172, 177, 180, 182, 186, 195, 199, 214, 215, 216, 231, 240, 241, 244, 250, 252, 258, 260, 267, 278, 283], "c": [5, 15, 18, 19, 23, 24, 47, 67, 68, 77, 90, 95, 96, 102, 103, 105, 112, 113, 121, 132, 136, 137, 139, 146, 147, 149, 154, 160, 163, 172, 177, 182, 183, 191, 193, 195, 196, 222, 225, 226, 238, 239, 254, 265, 269, 278], "sycl_exampl": 5, "sycl_extens": 5, "test_sycl_extens": 5, "syclextens": 5, "except": [5, 12, 14, 21, 44, 47, 53, 54, 57, 96, 100, 103, 107, 110, 113, 114, 128, 140, 141, 145, 156, 158, 161, 163, 171, 175, 184, 195, 215, 249, 255, 266, 279, 283, 285, 287, 288, 289], "o": [5, 7, 8, 14, 23, 24, 37, 54, 55, 58, 60, 105, 138, 139, 141, 152, 154, 166, 169, 172, 174, 175, 177, 180, 181, 182, 191, 206, 207, 208, 210, 226, 230, 259, 263, 265, 266, 282, 283], "find_packag": [5, 8, 215], "library_nam": 5, "o3": [5, 7, 226], "fdiagnost": 5, "color": [5, 48, 57, 96, 98, 100, 102, 103, 144, 162, 163, 177, 189, 191, 198], "is_avail": [5, 7, 8, 15, 93, 103, 113, 174, 175, 178, 179, 181, 255, 263, 282], "this_dir": 5, "dirnam": [5, 160, 175, 222], "curdir": 5, "extensions_dir": 5, "join": [5, 13, 23, 37, 44, 53, 54, 55, 58, 133, 138, 145, 152, 154, 178, 180, 181, 182, 206, 207, 208, 226, 259, 265], "construct": [5, 8, 17, 35, 51, 57, 70, 72, 90, 105, 121, 128, 132, 137, 140, 146, 149, 155, 156, 161, 167, 171, 178, 179, 181, 184, 196, 198, 199, 214, 225, 228, 243, 259, 279, 285, 287, 289], "install_requir": 5, "descript": [5, 8, 55, 138, 139, 160, 178, 180, 181, 182, 183, 191, 195, 200, 226, 241, 255, 256, 281], "c10": [5, 9, 12, 13, 18, 175, 214, 215, 226, 240, 268, 278], "xpustream": 5, "hpp": [5, 175], "nd_item": 5, "get_global_id": 5, "muladdkernelfunctor": 5, "_numel": 5, "_a": 5, "_b": 5, "_result": 5, "privat": [5, 9, 17, 18, 141, 175, 176, 274], "mymuladd_xpu": 5, "is_xpu": 5, "res_ptr": 5, "queue": [5, 9, 222, 241], "getcurrentxpustream": 5, "constexpr": [5, 278], "thread": [5, 7, 8, 9, 12, 57, 120, 140, 141, 152, 161, 172, 177, 180, 181, 182, 222, 226, 231, 240, 241, 258], "submit": [5, 13, 215], "handler": [5, 12, 191, 238], "cgh": 5, "parallel_for": 5, "nd_rang": 5, "static_cast": [5, 160, 278], "__all__": 5, "ctype": 5, "current_dir": 5, "build_dir": 5, "_op": [5, 118], "dl_open_guard": 5, "loaded_lib": 5, "cdll": 5, "_intern": 5, "common_util": 5, "testcas": 5, "unittest": 5, "testmymuladd": 5, "self": [5, 7, 8, 9, 12, 13, 14, 17, 18, 24, 28, 37, 51, 54, 58, 60, 102, 107, 113, 120, 121, 122, 137, 138, 142, 147, 152, 154, 160, 162, 170, 174, 180, 181, 182, 188, 189, 191, 195, 199, 206, 207, 208, 210, 214, 222, 231, 238, 243, 245, 255, 262, 278, 285], "_test_correct": 5, "skipif": 5, "test_correctness_xpu": 5, "__name__": [5, 14, 56, 58, 60, 138, 139, 141, 152, 154, 174, 180, 181, 182, 206, 207, 208, 222, 259, 263], "__main__": [5, 14, 56, 58, 60, 138, 139, 152, 154, 174, 180, 181, 182, 206, 207, 208, 222, 226, 259, 263], "against": [5, 19, 40, 41, 48, 100, 102, 115, 141, 154, 163, 178, 199, 206, 215, 226], "showcas": [5, 17, 70, 139, 140, 166, 169, 196, 268, 289], "support": [5, 8, 14, 17, 18, 20, 21, 23, 24, 28, 35, 41, 51, 56, 61, 63, 64, 80, 88, 90, 95, 96, 97, 98, 99, 100, 103, 104, 105, 114, 115, 116, 117, 120, 131, 136, 137, 138, 139, 140, 141, 144, 149, 151, 152, 154, 155, 158, 160, 163, 170, 172, 174, 175, 176, 177, 178, 180, 181, 182, 188, 191, 193, 195, 198, 202, 203, 204, 205, 206, 208, 213, 214, 215, 216, 218, 219, 220, 221, 223, 224, 226, 231, 241, 249, 251, 254, 255, 256, 258, 260, 262, 265, 266, 269, 271, 272, 274, 275, 276, 278, 279, 280, 281, 282, 283, 288], "enabl": [5, 7, 8, 12, 14, 17, 18, 20, 23, 24, 28, 37, 51, 60, 61, 87, 95, 103, 105, 117, 122, 138, 139, 141, 142, 144, 147, 148, 149, 152, 154, 160, 163, 172, 174, 176, 177, 178, 188, 189, 191, 192, 195, 196, 200, 202, 207, 208, 209, 214, 215, 222, 225, 231, 238, 245, 249, 250, 251, 253, 254, 258, 259, 262, 266, 267, 274, 276, 278, 279, 282, 289], "torchscript": [6, 9, 25, 26, 27, 115, 131, 211, 215, 231, 257], "export": [6, 10, 12, 25, 26, 27, 51, 90, 95, 116, 117, 131, 137, 151, 152, 160, 183, 185, 193, 202, 211, 214, 216, 225, 241, 247, 257, 260, 261, 278, 282], "peter": 7, "goldsborough": 7, "newest": [7, 12], "date": [7, 8, 12, 13, 80, 82, 83, 84, 85, 86, 139, 181, 215, 238, 254], "plethora": 7, "relat": [7, 14, 17, 57, 95, 96, 103, 104, 109, 112, 136, 137, 142, 160, 170, 195, 199, 226, 241, 278], "algebra": [7, 17, 44, 53, 98, 103, 107, 214], "wrangl": 7, "novel": [7, 96, 263], "research": [7, 8, 21, 24, 54, 57, 80, 90, 96, 103, 107, 125, 154, 166, 171, 176, 191, 216, 255, 283], "outlin": [7, 8, 172, 196], "power": [7, 8, 47, 54, 62, 70, 80, 93, 95, 98, 105, 107, 113, 121, 132, 137, 138, 144, 152, 154, 160, 162, 166, 175, 176, 177, 184, 191, 192, 213, 226, 252, 258, 267, 277], "spare": [7, 8], "deriv": [7, 8, 13, 19, 21, 35, 40, 44, 47, 53, 95, 103, 107, 109, 110, 112, 121, 143, 145, 149, 158, 161, 241, 283], "express": [7, 10, 19, 95, 98, 100, 103, 106, 117, 125, 142, 195, 199, 213, 276, 281], "realli": [7, 12, 48, 95, 100, 103, 106, 107, 112, 121, 123, 137, 143, 189, 226, 261, 274, 276, 287], "frequent": [7, 35, 87, 112, 121, 138, 215, 253, 276], "expens": [7, 21, 44, 105, 120, 182, 195, 231, 240, 253, 267, 283], "even": [7, 8, 12, 13, 17, 20, 47, 48, 56, 80, 95, 98, 100, 103, 112, 113, 122, 138, 139, 142, 147, 149, 152, 159, 161, 170, 172, 178, 180, 183, 191, 195, 196, 199, 214, 226, 241, 242, 267, 274, 276, 277], "few": [7, 8, 9, 12, 13, 18, 24, 51, 56, 61, 90, 95, 96, 98, 103, 105, 107, 108, 109, 110, 112, 122, 133, 139, 140, 143, 145, 146, 147, 152, 154, 155, 170, 172, 177, 178, 181, 184, 193, 199, 200, 205, 208, 215, 225, 240, 241, 242, 249, 262, 267, 275, 276, 277], "plausibl": 7, "address": [7, 15, 23, 28, 87, 100, 131, 137, 141, 154, 172, 180, 181, 195, 196, 199, 209, 216, 238, 258, 260, 282], "mechan": [7, 8, 14, 17, 18, 28, 35, 54, 61, 104, 134, 137, 149, 159, 170, 184, 186, 188, 195, 200, 215, 222, 249, 250, 281, 289], "nativ": [7, 8, 12, 18, 19, 60, 93, 117, 118, 136, 137, 139, 142, 155, 174, 182, 199, 214, 215, 231, 240, 241, 262, 263, 267, 274, 277], "much": [7, 8, 12, 13, 15, 17, 21, 24, 40, 57, 61, 95, 96, 105, 106, 107, 112, 113, 122, 139, 143, 144, 161, 162, 169, 172, 177, 178, 181, 182, 184, 188, 189, 192, 193, 195, 196, 222, 225, 226, 230, 239, 241, 242, 245, 258, 260, 265, 267, 274, 277, 283], "boilerpl": [7, 8, 24, 48, 107, 189, 274], "degre": [7, 40, 68, 100, 121, 144, 184, 188, 263, 277], "onc": [7, 8, 12, 13, 14, 17, 20, 21, 35, 37, 40, 56, 57, 61, 87, 96, 98, 102, 103, 104, 105, 106, 110, 115, 150, 155, 163, 169, 170, 176, 177, 178, 179, 181, 184, 188, 189, 195, 196, 209, 215, 222, 225, 226, 241, 254, 255, 266, 267, 279, 283], "organ": [7, 12, 17, 56, 98, 122, 145, 226, 258, 263], "tackl": [7, 120], "decid": [7, 8, 12, 13, 21, 23, 57, 65, 93, 95, 179, 195, 196, 244, 277, 283, 289], "contribut": [7, 57, 65, 87, 96, 103, 163, 188], "upstream": [7, 215, 241], "rest": [7, 8, 17, 48, 128, 140, 155, 159, 178, 180, 181, 196, 199, 238, 276], "walk": [7, 8, 13, 18, 20, 28, 47, 59, 95, 108, 113, 125, 132, 133, 137, 143, 160, 162, 181, 225, 239, 262, 267, 268, 269, 281], "chase": 7, "someon": [7, 184], "fire": [7, 152], "don": [7, 8, 9, 12, 13, 19, 47, 48, 57, 58, 60, 93, 100, 103, 106, 107, 110, 113, 118, 122, 128, 143, 149, 159, 161, 162, 169, 172, 178, 179, 182, 183, 192, 195, 196, 200, 205, 222, 225, 252, 253, 274, 275, 276], "dai": [7, 142, 196, 238], "head": [7, 10, 21, 39, 88, 100, 120, 152, 183, 198, 279, 283], "straight": [7, 8, 184], "recurr": [7, 48, 54, 106, 110, 134, 137, 145, 146, 167, 170, 184, 185, 200, 261], "unit": [7, 8, 54, 100, 103, 138, 139, 161, 172, 176, 178, 179, 184, 191, 195, 199, 228, 241], "superior": [7, 141, 278], "properti": [7, 8, 14, 17, 35, 44, 53, 95, 98, 103, 109, 112, 144, 170, 184, 195, 215, 225, 226, 238, 243, 275], "art": [7, 48, 57, 96, 98, 100, 176, 224], "lstm": [7, 48, 54, 100, 108, 111, 145, 146, 182, 261], "lack": [7, 18, 87, 96, 209, 274], "forget": [7, 8, 113, 122, 193], "gate": [7, 54, 100, 199, 238], "exponenti": [7, 54, 95, 103, 107, 109, 170, 179, 267], "elu": [7, 281], "intern": [7, 12, 13, 14, 18, 41, 42, 54, 61, 73, 100, 105, 121, 136, 137, 138, 140, 144, 154, 188, 200, 202, 207, 240, 265, 274], "never": [7, 95, 106, 107, 108, 112, 143, 176, 186], "lltm": 7, "long": [7, 8, 13, 54, 55, 87, 93, 100, 103, 107, 108, 109, 111, 113, 139, 141, 143, 146, 155, 159, 160, 170, 174, 179, 182, 188, 196, 199, 200, 226, 240, 241, 244, 253, 261, 263, 265, 268], "term": [7, 8, 18, 44, 57, 65, 80, 95, 96, 100, 104, 107, 108, 109, 111, 120, 139, 141, 142, 166, 176, 178, 195, 196, 199, 232, 258, 261, 267, 277, 285], "vanilla": [7, 8, 54, 70, 107, 121, 191, 199, 259, 274], "signific": [7, 8, 24, 57, 87, 96, 139, 141, 145, 148, 160, 161, 163, 169, 172, 178, 183, 188, 193, 196, 208, 209, 210, 214, 216, 225, 226, 241, 252, 265], "enough": [7, 8, 21, 54, 87, 98, 109, 113, 121, 143, 148, 177, 195, 207, 214, 225, 265, 283], "lstmcell": 7, "cell": [7, 55, 95, 96, 98, 100, 103, 104, 120, 172, 178, 179, 183, 191, 196, 241, 267], "plain": [7, 8, 54, 113, 140, 145, 146, 184, 198, 238, 240], "someth": [7, 8, 14, 17, 24, 48, 93, 98, 103, 107, 109, 154, 160, 177, 178, 184, 195, 199, 226, 240, 287], "input_featur": [7, 255], "state_s": 7, "super": [7, 8, 14, 23, 24, 51, 102, 113, 122, 138, 141, 147, 152, 162, 174, 180, 181, 182, 189, 191, 206, 207, 208, 210, 214, 222, 243, 255, 262, 278, 285], "candid": [7, 160], "reset_paramet": [7, 140], "stdv": 7, "math": [7, 13, 77, 90, 95, 109, 113, 121, 166, 177, 241], "sqrt": [7, 90, 113, 199, 274, 285], "uniform_": [7, 8, 182, 285], "old_h": 7, "old_cel": 7, "cat": [7, 44, 48, 53, 96, 98, 106, 109, 160, 182, 184, 189, 198, 224], "gate_weight": 7, "split": [7, 12, 23, 24, 49, 54, 57, 90, 93, 98, 102, 104, 137, 145, 146, 152, 174, 178, 181, 182, 184, 196, 198, 206, 222], "combin": [7, 13, 40, 60, 65, 93, 95, 98, 100, 105, 106, 109, 112, 113, 133, 137, 138, 143, 145, 146, 148, 156, 166, 172, 176, 179, 182, 184, 195, 196, 199, 209, 210, 226, 241, 268, 279], "input_g": 7, "sigmoid": [7, 8, 57, 100, 200, 241, 262], "output_g": 7, "tanh": [7, 8, 57, 100, 107, 161, 178, 241], "candidate_cel": 7, "new_cel": 7, "hidden": [7, 54, 96, 100, 105, 106, 110, 113, 142, 144, 145, 146, 155, 182, 183, 184, 192, 224], "new_h": 7, "batch_siz": [7, 8, 17, 24, 37, 54, 56, 57, 60, 93, 102, 113, 138, 139, 140, 142, 154, 161, 178, 179, 180, 181, 188, 189, 191, 192, 196, 215, 225, 248, 255, 278, 283], "rnn": [7, 49, 54, 100, 137, 155, 167, 170, 181, 184, 185, 241, 261], "new_c": 7, "mkl": [7, 160, 231, 258, 278], "nnpack": 7, "why": [7, 8, 12, 14, 17, 19, 48, 57, 90, 96, 105, 107, 112, 122, 125, 149, 152, 160, 169, 184, 193, 195, 196, 226, 254, 255, 275, 277], "circumst": [7, 172, 225], "room": [7, 105, 172, 214], "obviou": [7, 195, 226], "knowledg": [7, 54, 57, 80, 107, 108, 123, 125, 132, 137, 160, 162, 200, 261], "know": [7, 8, 12, 14, 23, 24, 35, 47, 54, 77, 78, 80, 98, 100, 103, 107, 109, 112, 113, 121, 143, 145, 146, 149, 154, 155, 156, 160, 162, 163, 166, 171, 172, 174, 178, 179, 180, 184, 189, 195, 196, 198, 226, 251, 262, 275], "involv": [7, 12, 18, 21, 24, 39, 42, 55, 90, 95, 96, 103, 106, 109, 115, 122, 133, 143, 145, 151, 162, 169, 182, 184, 195, 232, 241, 245, 252, 255, 265, 266, 267, 279, 283], "launch": [7, 8, 58, 65, 141, 144, 151, 152, 180, 181, 182, 183, 188, 214, 226, 231, 241, 258, 263, 288], "amount": [7, 24, 80, 87, 122, 142, 152, 172, 176, 193, 196, 231, 241, 267], "becom": [7, 8, 14, 28, 57, 80, 90, 96, 105, 142, 149, 161, 163, 172, 188, 189, 196, 204, 214, 225, 258, 265, 268, 279], "furthermor": [7, 24, 105, 156, 161, 189, 209, 226, 268], "itself": [7, 14, 35, 36, 47, 87, 90, 100, 103, 105, 109, 110, 113, 118, 122, 142, 143, 145, 149, 154, 162, 178, 181, 182, 184, 196, 225, 231, 254], "slow": [7, 8, 12, 40, 138, 140, 172, 196, 199, 231, 241], "down": [7, 12, 13, 14, 24, 36, 37, 55, 87, 93, 95, 100, 102, 107, 113, 138, 155, 160, 161, 162, 181, 186, 189, 195, 240, 241, 265, 274], "thing": [7, 8, 12, 18, 19, 35, 47, 48, 51, 54, 90, 93, 95, 98, 103, 104, 105, 106, 107, 109, 110, 112, 113, 136, 137, 140, 142, 143, 144, 149, 150, 151, 154, 155, 159, 160, 163, 170, 177, 178, 186, 195, 207, 226, 244, 267, 282], "therefor": [7, 8, 9, 18, 24, 54, 56, 105, 122, 133, 145, 152, 163, 166, 172, 175, 176, 181, 182, 195, 225, 258, 269, 276, 277, 288], "rewrit": [7, 49, 147, 170, 195, 287, 288], "group": [7, 14, 23, 24, 28, 54, 65, 88, 100, 103, 120, 133, 137, 138, 139, 140, 141, 146, 148, 150, 152, 154, 160, 174, 188, 196, 198, 199, 207, 208, 210, 226, 255, 258, 259, 265], "profit": 7, "fewer": [7, 14, 148, 161], "visibl": [7, 48, 93, 102, 191], "begin": [7, 8, 9, 14, 15, 21, 24, 35, 47, 54, 55, 57, 60, 80, 90, 95, 98, 110, 112, 139, 142, 167, 169, 179, 181, 188, 189, 196, 213, 225, 226, 228, 231, 242, 243, 244, 245, 276, 283], "translat": [7, 54, 115, 117, 118, 137, 145, 146, 166, 167, 185, 241, 255, 261, 276], "benefit": [7, 8, 21, 23, 47, 90, 93, 139, 141, 158, 163, 169, 172, 183, 199, 214, 215, 225, 241, 251, 258, 267, 283], "massiv": [7, 48, 109, 112, 196, 215], "parallel": [7, 8, 14, 20, 23, 48, 50, 52, 54, 56, 60, 80, 93, 98, 122, 137, 144, 150, 154, 166, 178, 181, 182, 196, 207, 208, 209, 213, 225, 231, 258, 259, 261, 265, 278, 289], "discuss": [7, 8, 12, 13, 18, 20, 48, 80, 95, 98, 100, 104, 109, 110, 138, 139, 147, 154, 159, 160, 166, 172, 174, 193, 199, 230, 250, 252, 265, 274, 275, 276, 277], "latter": [7, 8, 144, 180], "lltm_cpp": 7, "conveni": [7, 12, 17, 48, 51, 54, 96, 109, 113, 143, 146, 156, 161, 175, 178, 208, 215, 225, 226, 240, 265, 275, 277], "wrapper": [7, 8, 12, 60, 113, 122, 138, 139, 149, 155, 162, 178, 191, 196, 200, 207, 208, 252, 266, 289], "include_dir": [7, 13, 175], "include_path": 7, "manag": [7, 36, 47, 54, 65, 95, 113, 120, 133, 140, 142, 147, 150, 151, 152, 170, 183, 188, 193, 196, 207, 208, 209, 210, 225, 226, 227, 230, 231, 232, 241, 253, 258, 266], "And": [7, 8, 13, 19, 28, 57, 96, 109, 115, 145, 149, 160, 161, 163, 166, 177, 188, 189, 193, 195, 226, 240], "overal": [7, 24, 54, 100, 138, 139, 154, 172, 179, 191, 195, 196, 214, 226, 241], "iostream": [7, 8, 9, 215], "d_sigmoid": 7, "header": [7, 8, 12, 175, 226], "bit": [7, 18, 73, 98, 103, 120, 121, 155, 177, 178, 184, 196, 202, 216, 226, 267, 274], "primari": [7, 8, 18, 172, 192, 209, 240, 241, 258, 268, 278, 279, 288], "datatyp": [7, 44, 53, 78, 98, 103, 120, 215, 225], "Its": [7, 105, 107, 279], "inspect": [7, 9, 95, 105, 118, 139, 140, 144, 159, 183, 186, 193, 195, 196, 200, 226, 254], "dispos": 7, "nvcc": 7, "hit": [7, 24, 80, 142, 188], "pars": [7, 54, 56, 112, 138, 139, 144, 226, 265], "window": [7, 8, 48, 56, 100, 112, 115, 152, 181, 188, 198, 222, 241, 288, 289], "workaround": [7, 90, 149, 158, 255], "logic": [7, 8, 14, 21, 40, 45, 90, 106, 114, 131, 137, 138, 144, 151, 174, 176, 181, 182, 191, 192, 200, 208, 258, 283, 285], "sigmoidalphablendforwardcuda": 7, "open": [7, 39, 41, 55, 93, 96, 98, 99, 102, 104, 112, 113, 115, 117, 137, 139, 154, 156, 159, 169, 171, 184, 188, 191, 199, 215, 216, 222, 269, 288], "port": [7, 20, 141, 154, 181, 196, 222, 249, 265], "lltm_forward": 7, "addmm": [7, 8, 120, 160, 202, 214, 231, 288], "transpos": [7, 8, 15, 44, 53, 54, 57, 102, 160, 189, 255, 279, 288], "alpha": [7, 8, 18, 162, 191, 274], "respect": [7, 10, 19, 20, 35, 37, 39, 40, 41, 47, 54, 57, 67, 68, 77, 95, 96, 107, 109, 121, 125, 142, 143, 155, 158, 160, 161, 171, 172, 178, 182, 184, 188, 196, 206, 238, 243, 252, 258, 263], "ultim": [7, 24, 54, 57, 90, 202, 274], "plop": 7, "autograd": [7, 10, 15, 18, 19, 20, 36, 37, 39, 40, 41, 42, 44, 45, 50, 51, 52, 62, 66, 69, 73, 96, 97, 98, 99, 100, 102, 103, 104, 108, 109, 113, 131, 132, 136, 137, 145, 146, 149, 152, 160, 161, 166, 171, 179, 180, 181, 184, 185, 195, 200, 206, 222, 225, 241, 252, 261, 287], "nice": [7, 54, 113, 169, 171, 178, 195, 196, 199], "dig": [7, 96, 107, 183, 195], "deeper": [7, 14, 15, 41, 96, 103, 105, 107, 159, 160, 183, 195, 205, 213], "interest": [7, 8, 13, 17, 21, 48, 54, 56, 93, 95, 96, 105, 107, 114, 115, 117, 118, 128, 139, 144, 161, 169, 170, 178, 186, 195, 196, 198, 199, 226, 240, 243, 244, 283, 287], "alex": 7, "grave": 7, "thesi": 7, "d_tanh": 7, "relu": [7, 8, 15, 24, 51, 57, 100, 102, 107, 113, 122, 138, 152, 160, 177, 180, 181, 182, 189, 207, 208, 209, 210, 214, 215, 225, 241, 243, 278, 281], "exp": [7, 106, 107, 113, 149, 276], "d_elu": 7, "mask": [7, 21, 96, 100, 120, 134, 137, 155, 170, 176, 183, 191, 198, 215, 255, 267, 274, 275, 277, 279, 283, 289], "type_a": 7, "lltm_backward": 7, "grad_h": 7, "grad_cel": 7, "d_output_g": 7, "d_tanh_new_cel": 7, "d_new_cel": 7, "d_old_cel": 7, "d_candidate_cel": 7, "d_input_g": 7, "d_gate": 7, "d_weight": 7, "d_bia": 7, "keepdim": [7, 24, 138, 181], "d_x": 7, "d_old_h": 7, "slice": [7, 44, 53, 110, 113, 176, 199, 210, 215, 240, 279, 288], "d_input": 7, "span": [7, 21, 106, 152, 188, 222, 283], "four": [7, 17, 23, 90, 98, 100, 102, 103, 121, 139, 154, 174, 189, 199, 216, 255, 281], "torch_extension_nam": [7, 175], "macro": [7, 8, 12, 18], "maintain": [7, 13, 17, 35, 36, 37, 47, 54, 80, 100, 105, 110, 136, 137, 141, 150, 154, 162, 178, 179, 182, 195, 200, 207, 225, 259, 282, 288], "mismatch": [7, 105, 195, 265], "nasti": [7, 238], "hard": [7, 8, 12, 18, 37, 107, 144, 172, 176, 195, 226, 249], "At": [7, 8, 12, 17, 18, 21, 47, 51, 54, 55, 90, 93, 110, 113, 121, 138, 139, 142, 155, 158, 162, 178, 179, 180, 183, 184, 188, 231, 238, 241, 254, 274, 277, 283, 288], "point": [7, 8, 12, 13, 14, 17, 21, 23, 24, 47, 51, 54, 55, 56, 57, 58, 87, 90, 95, 98, 100, 103, 105, 106, 108, 109, 110, 112, 113, 121, 138, 140, 142, 143, 144, 149, 150, 152, 159, 162, 166, 172, 178, 180, 184, 189, 191, 195, 196, 216, 229, 237, 239, 241, 251, 255, 260, 261, 265, 267, 274, 276, 277, 282, 283], "bdist_egg": 7, "egg_info": 7, "egg": 7, "info": [7, 8, 87, 141, 151, 154, 162, 178, 191, 195, 202, 215], "pkg": 7, "dependency_link": 7, "txt": [7, 8, 54, 145, 146, 160, 177, 184, 209, 215], "top_level": 7, "manifest": [7, 276], "bdist": 7, "linux": [7, 8, 23, 115, 142, 152, 154, 177, 188, 198, 215, 241, 258, 288], "x86_64": [7, 23], "install_lib": 7, "temp": [7, 24, 147, 249], "gcc": [7, 160, 278], "pthread": [7, 8], "local": [7, 8, 12, 20, 23, 24, 39, 54, 55, 65, 95, 99, 106, 114, 122, 125, 139, 140, 142, 144, 152, 154, 169, 176, 178, 180, 181, 182, 184, 186, 196, 206, 216, 225, 228, 241, 249, 250, 258, 259, 263, 265, 266], "miniconda": [7, 23], "compiler_compat": 7, "wl": 7, "sysroot": 7, "wsign": 7, "dndebug": 7, "fwrapv": 7, "wall": [7, 106, 159, 226], "wstrict": 7, "prototyp": [7, 9, 13, 14, 18, 37, 195, 196, 206, 213, 261, 268, 270, 274, 275, 276, 277, 278, 279, 284, 287, 288, 289], "fpic": 7, "lib": [7, 8, 13, 23, 160, 178, 215, 240, 255, 258, 265], "python3": [7, 23, 178, 188, 214, 240, 255, 265], "site": [7, 10, 23, 55, 57, 159, 184, 231, 240, 255], "th": [7, 17, 56, 107, 112, 154, 162], "thc": 7, "7m": 7, "dtorch_api_include_extension_h": 7, "dtorch_extension_nam": 7, "d_glibcxx_use_cxx11_abi": 7, "cc1plu": 7, "warn": [7, 24, 56, 160, 178, 191, 226, 231, 240, 274, 275, 276, 277], "valid": [7, 28, 40, 54, 93, 100, 102, 104, 105, 117, 120, 122, 128, 138, 139, 144, 145, 148, 149, 172, 175, 191, 192, 195, 198, 226, 250, 253, 275, 276, 283], "objc": 7, "share": [7, 8, 13, 14, 23, 44, 53, 60, 71, 75, 93, 105, 109, 139, 143, 152, 154, 155, 162, 172, 178, 181, 182, 195, 208, 215, 226, 230, 240, 249, 254, 258, 261, 265], "l": [7, 15, 17, 47, 56, 57, 95, 107, 178, 179, 195, 226, 254, 265], "rpath": 7, "37m": 7, "gnu": [7, 8, 215, 241, 258], "stub": 7, "loader": [7, 8, 28, 41, 48, 104, 113, 178, 181, 198, 226], "byte": [7, 195, 255, 266], "37": [7, 21, 120, 177, 178, 182, 214, 231, 283], "pyc": 7, "native_lib": 7, "zip_saf": 7, "analyz": [7, 24, 87, 135, 137, 169, 178, 193, 195, 240, 255], "archiv": [7, 8, 140, 163, 195, 254], "__pycache__": 7, "dist": [7, 14, 23, 138, 139, 141, 152, 154, 174, 175, 178, 181, 207, 208, 210, 259, 263, 265], "py3": 7, "remov": [7, 21, 24, 54, 57, 58, 88, 113, 118, 120, 125, 140, 143, 152, 160, 169, 177, 178, 183, 184, 191, 192, 193, 195, 196, 199, 226, 240, 267, 274, 275, 279, 283], "everyth": [7, 19, 47, 93, 103, 105, 107, 135, 144, 145, 149, 155, 177, 178, 179, 180, 184, 189, 196, 206, 266], "pth": [7, 24, 122, 191, 208, 215, 255, 267], "finish": [7, 8, 20, 49, 98, 102, 152, 180, 182, 189, 206, 207, 215, 222, 228, 241, 281], "abi": [7, 8, 215, 288], "ubuntu": [7, 8, 188, 258], "16": [7, 21, 24, 37, 51, 93, 98, 100, 102, 105, 113, 122, 152, 155, 161, 163, 177, 178, 182, 189, 191, 195, 198, 207, 208, 214, 226, 231, 243, 254, 255, 267, 278, 283], "04": [7, 43, 178, 188, 214, 226, 261, 269], "recent": [7, 54, 110, 120, 141, 142, 154, 160, 166, 170, 179, 188, 255, 258], "distribut": [7, 8, 17, 18, 24, 57, 80, 93, 98, 103, 104, 105, 107, 112, 137, 138, 139, 140, 141, 142, 144, 150, 151, 163, 169, 175, 178, 180, 188, 199, 206, 209, 210, 226, 258, 259, 260, 263, 265, 281, 285, 289], "maco": [7, 8, 115, 154, 191, 241], "clang": [7, 269, 288], "worst": 7, "resolv": [7, 105, 163, 192, 195, 200, 209, 255, 276], "symbol": [7, 226, 240, 255], "linker": 7, "pycapsul": 7, "builtin": [7, 175, 226, 240], "arg0": 7, "arg1": [7, 181], "arg2": [7, 181], "arg3": 7, "arg4": 7, "citizen": [7, 274, 276], "lltmfunction": 7, "staticmethod": [7, 149, 180, 191], "benchmark": [7, 18, 21, 28, 37, 120, 137, 144, 160, 161, 172, 177, 183, 193, 199, 213, 231, 237, 240, 241, 250, 255, 258, 260, 261, 267, 278, 279, 281, 283], "measur": [7, 15, 40, 87, 95, 96, 98, 100, 105, 112, 138, 141, 159, 161, 172, 178, 179, 183, 186, 193, 206, 214, 225, 226, 231, 240, 245, 254, 260, 267, 278], "durat": [7, 88, 175, 179, 188, 265], "32": [7, 23, 24, 51, 60, 93, 98, 100, 103, 105, 110, 120, 138, 161, 166, 171, 174, 177, 178, 181, 182, 188, 191, 195, 214, 216, 226, 263, 278], "128": [7, 8, 56, 57, 60, 93, 105, 138, 142, 145, 154, 156, 177, 180, 181, 182, 196, 199, 202, 206, 215, 216, 226, 227, 240, 248], "rang": [7, 8, 9, 14, 15, 17, 23, 24, 37, 45, 48, 56, 57, 58, 77, 80, 87, 93, 96, 102, 105, 113, 114, 115, 117, 118, 121, 138, 139, 140, 141, 144, 154, 174, 177, 178, 180, 182, 184, 188, 189, 195, 198, 204, 206, 207, 210, 214, 222, 224, 225, 231, 241, 252, 255, 258, 259, 262, 263, 265, 267, 268, 283], "100000": [7, 226], "3f": [7, 24, 283], "wrote": [7, 193, 198], "post": [7, 8, 14, 54, 105, 138, 139, 140, 144, 163, 186, 196, 224, 263], "my": [7, 55, 106, 112, 199], "machin": [7, 8, 23, 39, 41, 45, 48, 54, 55, 56, 58, 59, 60, 61, 65, 80, 93, 95, 96, 99, 115, 117, 137, 138, 139, 144, 150, 151, 152, 154, 159, 171, 172, 177, 181, 182, 183, 184, 196, 198, 204, 213, 214, 222, 239, 241, 249, 250, 255, 258, 265], "506": [7, 161, 185, 261], "480": [7, 231], "444": 7, "694": 7, "349": [7, 98], "335": [7, 163, 182, 259], "443": [7, 182, 231], "523": 7, "speedup": [7, 21, 48, 121, 137, 156, 160, 171, 199, 214, 241, 245, 254, 267, 278, 279, 283], "30": [7, 8, 24, 49, 87, 107, 135, 139, 141, 163, 176, 178, 180, 182, 226, 227, 231, 277, 283], "albeit": [7, 17], "major": [7, 9, 13, 14, 24, 100, 103, 112, 128, 141, 160, 169, 178, 183, 193, 196, 214, 245, 252, 259, 277], "particularli": [7, 16, 21, 58, 113, 170, 184, 241, 278, 283], "engin": [7, 8, 17, 35, 47, 93, 95, 138, 147, 172, 177, 182, 191, 195, 196, 198, 202, 215, 255, 265, 287], "correspondingli": 7, "big": [7, 57, 100, 106, 112, 121, 140, 146, 156, 169, 178, 184, 191], "win": [7, 169], "No": [7, 8, 58, 118, 140, 160, 205, 252, 262], "cuda_devic": 7, "creation": [7, 8, 13, 103, 230, 277, 285], "synchron": [7, 14, 20, 60, 61, 87, 138, 140, 152, 154, 178, 180, 181, 188, 193, 206, 207, 222, 225, 226, 253, 259, 265, 266], "1e6": [7, 24, 204, 259], "1e5": 7, "again": [7, 8, 48, 55, 95, 96, 100, 102, 103, 105, 106, 113, 114, 143, 148, 154, 155, 169, 180, 182, 184, 188, 191, 193, 196, 226, 266, 267, 282], "187": [7, 226], "719": 7, "410": [7, 163], "815": 7, "149": 7, "802": [7, 160], "393": 7, "458": [7, 160], "That": [7, 8, 9, 21, 47, 48, 49, 54, 95, 96, 98, 103, 107, 109, 110, 112, 113, 115, 142, 145, 152, 158, 159, 161, 163, 166, 169, 178, 179, 183, 188, 195, 196, 198, 240, 274, 275, 277, 283], "great": [7, 54, 115, 121, 122, 226, 243, 276], "pull": [7, 96, 103, 104, 159, 282], "dive": [7, 8, 14, 41, 131, 147, 152, 160, 240, 278], "previous": [7, 12, 35, 90, 109, 113, 147, 158, 174, 176, 178, 179, 180, 188, 195, 238, 254, 274, 287], "cover": [7, 10, 17, 18, 20, 23, 37, 51, 103, 108, 118, 125, 135, 136, 137, 139, 144, 154, 174, 175, 178, 181, 182, 189, 193, 195, 201, 206, 214, 215, 225, 233, 234, 235, 236, 239, 240, 241, 251, 258, 276, 278, 279], "elabor": [7, 8, 142, 160, 180], "fly": [7, 17, 56, 106, 178, 199], "background": [7, 8, 36, 80, 102, 177, 189, 191, 198, 250, 251], "tmp": [7, 160, 191, 249, 250, 265, 268], "torch_extens": 7, "emit": [7, 8, 106, 195], "ninja": 7, "verbos": [7, 151, 191, 195, 202, 209], "root": [7, 8, 17, 35, 37, 47, 56, 57, 98, 106, 140, 148, 155, 160, 181, 182, 215, 222, 239, 248, 265], "complic": [7, 9, 17, 106, 107, 112, 113, 121, 144, 195, 210, 225, 226, 287], "techniqu": [7, 20, 21, 24, 54, 65, 105, 106, 112, 114, 132, 137, 142, 148, 149, 150, 159, 167, 170, 172, 174, 176, 182, 191, 196, 199, 200, 241, 255, 258, 267, 274, 279, 283], "fine": [7, 8, 21, 24, 54, 56, 95, 106, 143, 154, 160, 177, 188, 193, 196, 225, 226, 240, 241, 258, 274, 283], "system": [7, 8, 12, 13, 15, 17, 18, 60, 105, 137, 140, 144, 154, 170, 172, 177, 178, 180, 192, 193, 195, 196, 200, 202, 207, 228, 241, 249, 258, 265, 288], "increment": [7, 14, 90, 109, 113, 154, 179], "thu": [7, 8, 12, 13, 24, 35, 42, 54, 90, 93, 105, 113, 139, 156, 169, 172, 184, 222, 226, 231, 241, 258, 278, 285], "didn": [7, 12, 96, 115, 159, 180, 287], "hand": [7, 8, 12, 17, 21, 23, 80, 103, 106, 112, 113, 146, 154, 171, 172, 193, 195, 196, 207, 208, 245, 275, 283], "prospect": 7, "pointwis": [7, 12, 163, 192, 213, 241, 260], "declar": [7, 8, 16, 80], "lltm_cuda": 7, "lltm_cuda_forward": 7, "lltm_cuda_backward": 7, "check_cuda": 7, "is_cuda": 7, "check_contigu": 7, "check_input": 7, "lltm_cuda_kernel": 7, "peek": [7, 205], "cuda_runtim": 7, "templat": [7, 12, 123, 154, 160, 192, 261, 278], "typenam": 7, "scalar_t": [7, 160], "__device__": 7, "__forceinline__": 7, "fmax": 7, "fmin": 7, "d_relu": 7, "explicitli": [7, 8, 23, 40, 44, 47, 53, 57, 58, 93, 95, 109, 140, 141, 142, 151, 155, 163, 182, 183, 186, 195, 222, 241, 277, 279, 282], "zeros_lik": [7, 103, 180], "dim3": 7, "at_dispatch_floating_typ": 7, "lltm_forward_cuda": 7, "lltm_cuda_forward_kernel": 7, "indic": [7, 8, 13, 14, 17, 36, 54, 67, 68, 87, 95, 96, 98, 100, 102, 106, 107, 112, 118, 120, 121, 144, 145, 155, 160, 176, 178, 179, 181, 188, 189, 191, 196, 202, 224, 226, 255, 265, 274, 276, 277], "awai": [7, 8, 51, 100, 102, 106, 107, 109, 178, 179, 180, 196, 209, 277], "runtim": [7, 12, 17, 23, 44, 55, 87, 90, 95, 98, 99, 103, 117, 118, 120, 131, 137, 141, 142, 147, 148, 159, 169, 172, 174, 188, 193, 195, 196, 202, 204, 214, 225, 226, 231, 244, 247, 251, 260, 261, 267, 269, 278, 288], "back": [7, 8, 12, 13, 17, 18, 24, 35, 48, 51, 56, 80, 93, 95, 102, 103, 105, 109, 113, 115, 120, 140, 143, 163, 169, 172, 178, 180, 181, 182, 184, 191, 193, 195, 196, 199, 208, 238, 241, 252, 253, 274, 279], "determin": [7, 8, 9, 12, 14, 21, 24, 44, 53, 96, 98, 103, 104, 105, 106, 109, 112, 115, 141, 142, 144, 156, 169, 170, 171, 176, 193, 195, 196, 226, 231, 232, 241, 265, 279, 282, 283], "conceptu": [7, 8, 35, 47, 54, 121, 240], "switch": [7, 12, 18, 24, 102, 103, 122, 169, 196, 214, 225, 227, 231, 244, 288], "scalartyp": 7, "messag": [7, 19, 54, 95, 118, 147, 154, 191, 195, 202, 258], "insid": [7, 8, 13, 20, 23, 36, 40, 49, 140, 142, 188, 193, 198, 202, 278, 283, 287], "alia": [7, 13, 103], "instanti": [7, 8, 13, 17, 37, 42, 56, 57, 70, 72, 90, 98, 105, 113, 115, 121, 144, 175, 176, 179, 191, 200, 213, 230, 285], "retriev": [7, 8, 17, 20, 35, 37, 54, 143, 144, 174, 178, 180, 181, 196, 222, 258], "at_dispatch_all_typ": 7, "sens": [7, 12, 15, 17, 105, 112, 113, 156, 172, 189], "routin": [7, 8, 196], "convolut": [7, 8, 12, 15, 16, 51, 57, 96, 98, 103, 105, 113, 122, 128, 131, 132, 134, 136, 137, 163, 166, 176, 185, 186, 195, 202, 214, 215, 222, 225, 228, 231, 232, 243, 244, 254, 261, 288], "harder": [7, 105, 267], "ourselv": [7, 8, 40, 54, 148, 178], "grid": [7, 51, 102, 104, 113, 128, 186, 189, 268], "fill": [7, 8, 17, 98, 112, 113, 145, 155, 275, 276], "matric": [7, 15, 21, 44, 53, 95, 109, 161, 170, 202, 283], "2048": [7, 23, 105, 161], "heard": 7, "introductori": 7, "ever": [7, 8, 143, 152, 195, 230], "__restrict__": [7, 278], "size_t": 7, "column": [7, 23, 95, 103, 107, 109, 120, 142, 145, 160, 161, 166, 188, 191, 196, 231, 275, 276, 277], "index": [7, 8, 9, 18, 37, 44, 45, 48, 53, 54, 56, 88, 103, 106, 107, 109, 110, 112, 113, 120, 138, 143, 144, 145, 154, 170, 174, 180, 184, 188, 191, 193, 195, 196, 258, 267, 279, 287], "gates_row": 7, "primarili": [7, 87, 181, 193, 209, 225, 241], "imagin": [7, 95, 103, 106, 112, 149, 154, 169, 170, 184, 196, 226, 238], "giant": [7, 184], "million": [7, 128, 139, 155], "serial": [7, 8, 13, 41, 42, 113, 122, 195, 222, 226, 254, 266], "faster": [7, 8, 12, 15, 24, 54, 61, 80, 100, 103, 105, 113, 122, 137, 139, 141, 151, 152, 155, 156, 161, 163, 171, 172, 180, 184, 193, 198, 225, 226, 240, 241, 242, 258, 260, 265, 278], "right": [7, 8, 12, 13, 15, 17, 35, 39, 44, 47, 53, 54, 57, 68, 87, 95, 100, 102, 105, 107, 109, 112, 121, 145, 154, 162, 166, 169, 178, 179, 180, 183, 184, 188, 191, 198, 199, 214, 222, 287], "inde": [7, 17, 19, 105, 148, 161, 172, 178, 183, 193, 196, 226, 276, 277], "ineffici": [7, 87, 279], "eas": [7, 90, 103, 104, 139, 199, 215, 230, 260], "readabl": [7, 37, 56, 96, 103, 106, 146, 188, 226, 240, 265], "especi": [7, 10, 21, 24, 54, 57, 80, 96, 103, 139, 141, 152, 159, 166, 169, 172, 195, 199, 267, 275, 283], "dimension": [7, 36, 44, 51, 53, 54, 57, 65, 77, 78, 95, 100, 102, 103, 105, 108, 109, 110, 112, 121, 142, 147, 163, 176, 183, 184, 189, 191, 196, 202, 210, 277], "row": [7, 23, 37, 56, 80, 95, 100, 103, 107, 109, 110, 112, 113, 140, 142, 144, 145, 161, 180, 196, 222, 275, 277, 287], "n": [7, 8, 9, 15, 21, 24, 35, 47, 51, 65, 77, 78, 87, 90, 95, 100, 102, 103, 105, 113, 121, 138, 139, 140, 152, 154, 161, 162, 166, 174, 176, 180, 181, 182, 184, 189, 195, 196, 198, 215, 241, 265, 267, 277, 278, 283, 287], "arithmet": [7, 24, 44, 98, 103, 172], "within": [7, 9, 17, 23, 65, 90, 95, 96, 102, 113, 114, 115, 120, 142, 147, 149, 160, 170, 176, 179, 181, 191, 192, 193, 196, 199, 210, 214, 226, 232, 241, 249, 251, 254, 258, 266, 268, 277, 278, 279, 282], "accept": [7, 45, 93, 95, 105, 110, 142, 144, 158, 161, 166, 171, 172, 178, 181, 188, 191, 206, 214, 231, 241, 262, 285, 287], "fortun": [7, 8, 13, 18, 93, 154, 155, 226], "foo": [7, 9, 181, 240, 269, 282, 285], "rand": [7, 8, 18, 90, 103, 149, 204, 207, 208, 214, 215, 222, 241, 248, 250, 262, 263, 283, 288], "12": [7, 37, 98, 102, 120, 138, 139, 160, 178, 180, 189, 214, 226, 262, 267, 283], "foo_a": 7, "trace": [7, 9, 12, 13, 19, 35, 47, 95, 102, 120, 137, 147, 160, 166, 172, 183, 188, 192, 195, 209, 251, 252, 256, 260, 265, 278], "packed_accessor64": 7, "packed_accessor32": 7, "pack": [7, 54, 160, 178, 180, 182, 206, 278], "integ": [7, 8, 12, 45, 98, 103, 107, 109, 112, 144, 176, 195, 198, 202, 231, 267, 277], "fundament": [7, 54, 97, 100, 109, 112, 121, 137, 162, 172, 195, 196, 201, 208, 240, 275], "packedtensoraccessor32": 7, "restrictptrtrait": 7, "decompos": [7, 13, 21, 138, 195, 283], "packedaccessor32": 7, "variant": [7, 54, 98, 100, 102, 104, 142, 148, 177, 183, 196, 199, 213, 263], "int32_t": 7, "packedaccessor64": 7, "slower": [7, 21, 61, 152, 161, 172, 177, 179, 193, 198, 267, 268, 279, 283], "host": [7, 23, 39, 59, 87, 99, 106, 138, 139, 142, 152, 154, 172, 174, 181, 182, 188, 210, 231, 241, 249], "reshap": [7, 8, 15, 24, 100, 103, 112, 113, 174, 178, 279, 288], "pattern": [7, 21, 100, 102, 137, 142, 154, 160, 170, 181, 210, 215, 216, 274, 276, 281, 283, 285], "lltm_cuda_backward_kernel": 7, "lltm_backward_cuda": 7, "d_gate_weight": 7, "hassl": [7, 8], "entail": [7, 195], "simpler": [7, 113, 140, 142, 148, 158, 170, 226, 287], "hope": [7, 54, 162, 169, 193, 199, 214], "fastest": [7, 183, 250], "129": [7, 120], "431": 7, "304": [7, 54], "641": [7, 163], "equip": [7, 149, 155, 258, 274], "faq": 7, "blog": [7, 138, 139, 145, 150, 199, 214, 224], "framework": [8, 13, 28, 39, 57, 95, 107, 108, 121, 133, 135, 137, 172, 174, 180, 183, 191, 199, 202, 206, 255, 265, 281], "sit": [8, 114, 115, 117, 118, 170], "atop": 8, "substanti": [8, 144, 172], "codebas": [8, 13, 17], "foundat": [8, 145, 178, 191, 196, 201], "underli": [8, 12, 17, 44, 53, 65, 80, 103, 105, 122, 144, 156, 160, 171, 181, 195, 210, 241, 265, 276, 277, 279], "popular": [8, 73, 80, 105, 121, 131, 144, 154, 155, 196, 199, 215, 216, 255, 260, 267, 278], "stochast": [8, 40, 51, 57, 70, 95, 98, 104, 113, 121, 154, 178, 179], "descent": [8, 40, 47, 51, 70, 95, 98, 104, 113, 121, 154, 196, 244, 267], "digit": [8, 51, 98, 113, 132, 137, 138, 139, 191, 255], "whirlwind": 8, "wet": 8, "appetit": 8, "watch": [8, 104, 150, 154], "lightn": [8, 144], "talk": [8, 12, 54, 57, 60, 98, 109, 172, 178, 181, 195, 196], "cppcon": 8, "2018": 8, "quick": [8, 21, 36, 53, 95, 105, 107, 110, 112, 139, 152, 156, 161, 171, 196, 226, 229, 237, 260, 261, 267, 283], "humor": 8, "sweep": [8, 183], "philosophi": 8, "ecosystem": [8, 118, 147], "http": [8, 23, 24, 29, 30, 31, 32, 33, 38, 49, 50, 54, 67, 80, 81, 82, 83, 84, 85, 86, 89, 97, 102, 105, 108, 113, 115, 116, 118, 121, 128, 133, 138, 145, 146, 148, 157, 158, 159, 167, 169, 177, 178, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 201, 224, 225, 226, 229, 230, 233, 234, 235, 236, 239, 255, 267, 270, 273, 275, 277, 286, 288], "org": [8, 29, 30, 31, 32, 33, 38, 49, 50, 54, 67, 80, 81, 82, 83, 84, 85, 86, 89, 97, 100, 102, 104, 105, 108, 116, 121, 128, 133, 145, 146, 157, 158, 159, 167, 169, 177, 178, 184, 187, 188, 190, 193, 194, 195, 196, 201, 222, 225, 229, 230, 233, 234, 235, 236, 267, 270, 273, 275, 277, 286, 287, 288, 289], "cppdoc": 8, "embark": 8, "excit": [8, 159, 169], "journei": [8, 57, 201], "team": [8, 118, 144, 179, 191, 199], "job": [8, 49, 57, 58, 59, 65, 87, 105, 141, 144, 150, 151, 152, 154, 174, 289], "latenc": [8, 21, 135, 137, 142, 144, 151, 160, 172, 177, 193, 214, 249, 250, 258, 283], "reinforc": [8, 17, 104, 134, 137, 162, 180, 181, 185, 261], "game": [8, 48, 57, 162, 255], "tractabl": [8, 106], "multithread": [8, 47, 61, 120, 172, 222, 226, 258], "lock": [8, 9, 17, 61, 154, 172, 180, 181, 207], "gil": [8, 61, 152], "multiprocess": [8, 14, 17, 37, 41, 56, 58, 60, 61, 138, 139, 152, 154, 178, 181, 182, 206, 207, 208, 258, 259, 265], "scalabl": [8, 137, 141, 144, 196, 202, 214, 215, 241, 258, 274], "shortcom": [8, 276], "constraint": [8, 15, 21, 23, 90, 107, 132, 137, 142, 144, 170, 178, 191, 196, 207, 225, 226, 238, 255, 263, 265, 283], "neuroevolut": 8, "owner": [8, 180, 181, 182], "anyth": [8, 16, 19, 48, 77, 78, 98, 100, 103, 106, 109, 110, 112, 113, 121, 177, 199, 222, 238, 239, 255, 267], "web": [8, 115, 222], "page": [8, 10, 13, 19, 55, 59, 65, 94, 113, 120, 121, 136, 137, 145, 147, 172, 182, 188, 195, 196, 202, 207, 212, 241, 253], "server": [8, 20, 133, 137, 141, 152, 175, 182, 208, 215, 222, 249, 255, 258, 262], "3d": [8, 65, 100, 102, 109, 110, 174, 191, 241], "graphic": [8, 183, 288], "photo": [8, 96], "softwar": [8, 175, 178, 188, 265, 288], "remain": [8, 93, 95, 105, 140, 141, 154, 169, 172, 176, 184, 241, 262, 263, 265, 267, 276, 279], "forth": [8, 113], "retain": [8, 44, 53, 103, 122], "intuit": [8, 57, 80, 98, 103, 107, 122, 160, 184, 191, 195, 222, 238, 275], "tradit": [8, 57, 105, 107, 161, 181, 195, 196, 199, 265, 278], "experi": [8, 13, 105, 106, 139, 141, 154, 162, 172, 175, 178, 179, 183, 184, 186, 191, 193, 195, 196, 199, 206, 209, 225, 240, 242, 249, 255, 256, 258, 267, 274, 282, 287, 289], "compet": [8, 144, 172], "meant": [8, 10, 14, 90, 95, 100, 139, 196, 241, 265, 276], "complement": 8, "alik": 8, "love": 8, "simplic": [8, 80, 139, 148, 172, 178, 179, 210, 226, 278], "core": [8, 12, 13, 14, 49, 106, 107, 108, 113, 121, 122, 137, 142, 154, 155, 160, 163, 172, 177, 188, 195, 201, 222, 225, 240, 258, 265], "principl": [8, 12, 110, 112, 144], "curiou": [8, 156, 169, 171, 205], "paragraph": 8, "tri": [8, 23, 57, 95, 106, 112, 179, 195, 225, 255, 288], "close": [8, 17, 21, 24, 57, 95, 100, 102, 103, 105, 106, 139, 144, 169, 189, 239, 241, 283], "experienc": [8, 90], "ask": [8, 21, 96, 98, 100, 146, 155, 172, 178, 195, 196, 226, 282, 283], "rememb": [8, 48, 57, 80, 110, 113, 120, 122, 161, 162, 169, 172, 184, 196, 199, 226], "dot": [8, 17, 35, 57, 110, 112, 132, 137, 161, 184, 185, 226, 252, 261, 263, 287], "colon": [8, 191], "grab": [8, 10, 57, 102, 177, 182], "readi": [8, 13, 20, 54, 96, 98, 104, 106, 107, 112, 113, 137, 139, 154, 166, 174, 175, 178, 180, 181, 182, 196, 198, 231, 255], "cmake": [8, 215, 288], "websit": [8, 96, 179, 222, 224], "free": [8, 13, 24, 40, 47, 54, 80, 90, 105, 114, 115, 117, 118, 122, 139, 140, 144, 154, 159, 162, 163, 169, 172, 178, 180, 184, 188, 195, 240], "too": [8, 13, 17, 24, 48, 68, 73, 87, 93, 98, 100, 105, 106, 112, 113, 120, 121, 140, 142, 152, 169, 172, 176, 179, 180, 182, 184, 195, 240, 253, 274], "debug": [8, 12, 24, 65, 106, 131, 132, 137, 143, 179, 185, 195, 200, 209, 226, 240, 249, 261, 268, 289], "try": [8, 15, 17, 18, 21, 24, 40, 44, 48, 51, 53, 54, 57, 58, 65, 80, 95, 103, 104, 105, 106, 107, 108, 109, 113, 114, 115, 120, 141, 144, 145, 146, 147, 155, 160, 162, 166, 169, 172, 174, 175, 176, 178, 179, 184, 188, 192, 193, 195, 199, 200, 214, 215, 225, 226, 238, 239, 255, 258, 263, 267, 275, 283], "cu90": 8, "url": [8, 24, 113, 188, 193, 196, 239, 267], "wget": [8, 23, 198, 267], "nightli": [8, 23, 158, 193, 198, 255, 265, 267, 287, 289], "dep": 8, "latest": [8, 11, 13, 17, 93, 96, 121, 122, 131, 137, 139, 147, 154, 165, 173, 177, 178, 181, 184, 186, 191, 193, 216], "unzip": [8, 24, 55, 191, 198, 254], "tini": [8, 138, 169, 255], "ident": [8, 21, 60, 90, 95, 103, 104, 113, 121, 142, 151, 166, 189, 192, 195, 200, 226, 277, 283], "ey": [8, 161, 172], "fledg": 8, "cmakelist": [8, 215], "cmake_minimum_requir": [8, 215], "fatal_error": [8, 215], "add_execut": [8, 215], "target_link_librari": [8, 215], "set_properti": [8, 215], "cxx_standard": [8, 215], "visual": [8, 17, 47, 57, 80, 87, 88, 98, 104, 134, 137, 139, 143, 144, 149, 159, 178, 185, 188, 191, 209, 231, 239, 260, 261, 268, 269, 276], "studio": [8, 269], "qmake": 8, "makefil": 8, "feel": [8, 13, 24, 40, 47, 54, 105, 114, 115, 117, 118, 122, 139, 159, 160, 162, 163, 169, 188, 195], "comfort": 8, "box": [8, 12, 13, 14, 19, 21, 45, 80, 136, 137, 140, 144, 147, 149, 154, 177, 180, 188, 195, 198, 199, 202, 222, 224, 255, 283, 287], "cmake_prefix_path": 8, "invok": [8, 12, 105, 152, 154, 158, 159, 160, 172, 175, 181, 182, 202, 222, 238, 248, 252, 258, 268, 276], "agre": [8, 259], "break": [8, 9, 12, 13, 14, 19, 24, 36, 37, 87, 95, 100, 114, 122, 140, 141, 147, 169, 180, 182, 193, 254, 263, 274], "unexpect": [8, 56, 241, 276], "pwd": [8, 222], "fa350df05ecf": 8, "home": [8, 44, 53, 212, 274, 288], "mkdir": [8, 113, 188, 191], "cd": [8, 188, 198, 222, 288], "dcmake_prefix_path": [8, 215], "identif": [8, 215], "usr": [8, 23, 154, 178, 215], "bin": [8, 98, 154, 215, 222, 254, 268], "cc": [8, 47, 215, 288], "detect": [8, 14, 15, 23, 57, 100, 134, 137, 177, 185, 188, 193, 195, 215, 216, 228, 241, 253, 258, 261], "pthread_creat": 8, "config": [8, 13, 21, 93, 138, 140, 144, 147, 177, 192, 215, 216, 238, 245, 249, 252, 255, 262, 266, 267, 268, 278, 283], "scan": [8, 98, 100, 191, 195], "50": [8, 21, 24, 57, 58, 98, 113, 155, 163, 176, 178, 179, 182, 198, 214, 241, 281, 283], "cmakefil": 8, "dir": [8, 87, 102, 144, 240, 249, 265], "100": [8, 24, 37, 53, 77, 102, 107, 121, 138, 141, 147, 152, 160, 161, 163, 177, 178, 179, 182, 189, 191, 210, 214, 226, 240, 250, 278, 283], "folder": [8, 24, 55, 57, 87, 88, 96, 98, 139, 189, 198, 265, 288], "enter": [8, 54, 139, 152, 154], "ran": [8, 112, 141, 178, 181, 183, 226], "binari": [8, 54, 57, 103, 115, 154, 163, 193, 206, 215, 254, 275, 289], "me": [8, 21, 54, 169, 184, 283], "besid": [8, 98, 112, 170, 180, 224, 241], "encapsul": [8, 40, 51, 100, 104, 147, 169, 180], "buffer": [8, 17, 48, 51, 122, 139, 140, 148, 152, 156, 158, 162, 166, 169, 170, 171, 172, 176, 179, 195, 207, 230, 243, 244, 263, 265, 266, 285, 288], "form": [8, 15, 18, 21, 45, 51, 54, 57, 65, 106, 113, 115, 143, 146, 160, 184, 191, 199, 207, 208, 222, 241, 250, 258, 267, 279, 283, 285], "record": [8, 12, 24, 35, 47, 54, 113, 122, 131, 137, 138, 139, 147, 148, 149, 169, 178, 179, 181, 182, 195, 216, 231, 255, 289], "normal": [8, 12, 14, 15, 24, 40, 42, 45, 54, 56, 57, 90, 96, 98, 100, 102, 104, 105, 107, 112, 121, 122, 128, 138, 148, 154, 155, 170, 172, 177, 180, 181, 183, 184, 189, 191, 193, 196, 199, 200, 215, 241, 248, 253, 267, 275], "nest": [8, 17, 36, 47, 98, 103, 137, 140, 178, 180, 182, 183, 185, 192, 261, 284, 289], "similarli": [8, 15, 56, 88, 96, 103, 140, 143, 144, 145, 160, 161, 169, 172, 174, 208, 262, 266, 277], "kcuda": [8, 268], "w": [8, 35, 40, 47, 51, 80, 110, 112, 139, 163, 182, 188, 195, 198, 267, 278], "register_paramet": [8, 285], "reflect": [8, 12, 44, 53, 98, 103, 178, 195], "magic": [8, 107, 146, 154, 161], "assign": [8, 45, 49, 51, 58, 96, 100, 103, 105, 106, 107, 110, 112, 114, 140, 154, 170, 178, 196, 210, 222, 238, 241, 258], "behind": [8, 12, 21, 49, 87, 105, 107, 113, 121, 148, 179, 262, 275, 277, 283, 285, 289], "scene": [8, 113, 121, 255, 285], "another_bia": 8, "recurs": [8, 20, 48, 140, 147, 193, 239, 285], "0808": 8, "8613": 8, "2017": [8, 80], "5206": 8, "5353": 8, "3740": 8, "0976": 8, "4786": 8, "4928": 8, "1434": 8, "4713": 8, "1735": 8, "3293": 8, "3467": 8, "3858": 8, "1980": 8, "1986": 8, "1975": 8, "4278": 8, "1831": 8, "2709": 8, "3730": 8, "4307": 8, "3236": 8, "0629": 8, "2038": 8, "4638": 8, "2023": [8, 191], "1230": 8, "0516": 8, "aptli": [8, 16], "register_modul": 8, "dropout": [8, 24, 42, 54, 80, 100, 102, 113, 122, 138, 142, 144, 146, 155, 180, 182, 184, 279, 283], "conv2d": [8, 15, 24, 48, 51, 57, 98, 102, 113, 122, 138, 148, 177, 181, 189, 192, 195, 202, 215, 222, 231, 241, 243, 262, 281], "subtleti": [8, 277], "bodi": [8, 160], "upon": [8, 22, 54, 61, 128, 154, 158, 184, 189, 193, 199, 224, 241, 261, 265], "tree": [8, 13, 18, 106, 112, 209, 289], "p": [8, 23, 24, 54, 73, 100, 106, 112, 113, 121, 138, 139, 148, 154, 163, 166, 169, 180, 181, 182, 192, 198, 202, 206, 283, 288], "0345": 8, "4456": 8, "6313": 8, "3585": 8, "4008": 8, "1647": 8, "2891": 8, "0527": 8, "0354": 8, "3084": 8, "2025": [8, 178, 254], "0343": 8, "1824": 8, "4630": 8, "2862": 8, "2500": [8, 102], "0420": 8, "3679": 8, "1482": [8, 51], "0460": 8, "1967": 8, "2132": 8, "1992": 8, "4257": 8, "0739": 8, "01": [8, 14, 24, 37, 47, 51, 101, 102, 120, 154, 178, 182, 199, 204, 214, 254, 259, 261, 269], "6861": 8, "1166": 8, "45": [8, 37, 102, 144, 160, 178, 182, 214], "0333": 8, "9983": 8, "0705": 8, "named_paramet": [8, 36, 196], "ordereddict": [8, 198], "13": [8, 37, 77, 98, 102, 120, 178, 182, 191, 199, 214, 222], "48": [8, 21, 160, 163, 178, 189, 214, 231, 283], "1863": 8, "8611": 8, "1228": 8, "3269": 8, "9858": 8, "0339": 8, "2484": 8, "2035": 8, "2103": 8, "0715": 8, "2975": 8, "4350": 8, "1878": 8, "3616": 8, "1050": 8, "4982": 8, "0335": 8, "1605": 8, "4963": 8, "4099": 8, "2883": 8, "1818": 8, "3447": 8, "1501": 8, "0215": 8, "0250": 8, "0408": 8, "3756": 8, "2149": 8, "3636": 8, "8559": 8, "1572": 8, "1069": 8, "1247": 8, "8060": 8, "topic": [8, 54, 65, 80, 96, 103, 114, 115, 117, 118, 125, 131, 133, 136, 197, 233, 234, 235, 236, 246, 286], "devour": 8, "menu": [8, 55], "concept": [8, 14, 39, 40, 60, 99, 108, 109, 113, 121, 125, 137, 144, 162, 172, 180, 183, 184, 196, 201, 231, 240, 258, 265, 268, 278], "pipelin": [8, 20, 65, 113, 137, 178, 191, 198, 265], "briefli": [8, 40, 65, 137, 142, 178, 193, 199, 202], "who": [8, 54, 80, 105, 108, 141, 154, 169, 195, 201, 208, 222, 226, 250, 254], "heap": 8, "live": [8, 13, 18, 103, 136, 137, 143, 172, 181, 182, 277], "referenc": [8, 182], "lower": [8, 17, 21, 55, 80, 87, 100, 102, 137, 139, 140, 141, 144, 152, 158, 160, 169, 170, 178, 179, 183, 189, 191, 195, 196, 199, 240, 241, 255, 262, 277, 283], "realm": 8, "heavili": [8, 172, 184, 267], "ergonom": 8, "shown": [8, 12, 21, 24, 57, 95, 103, 113, 140, 142, 144, 160, 162, 179, 180, 182, 183, 188, 191, 193, 196, 208, 214, 215, 222, 254, 255, 256, 258, 259, 265, 275, 276, 277, 282, 283], "far": [8, 17, 51, 54, 68, 95, 98, 100, 103, 105, 106, 107, 121, 143, 154, 169, 176, 179, 184, 195, 196, 199, 226, 274], "stack": [8, 12, 17, 18, 44, 53, 98, 120, 137, 142, 156, 161, 162, 166, 172, 175, 180, 184, 188, 189, 191, 196, 199, 265], "shared_ptr": 8, "cognit": 8, "think": [8, 48, 57, 73, 96, 98, 106, 107, 109, 110, 112, 121, 161, 178, 181, 183, 196, 199, 277, 287], "everywher": [8, 103, 112], "make_shar": 8, "stai": [8, 87, 141, 142, 147, 178, 179, 180], "shorten": 8, "wait": [8, 20, 87, 141, 146, 152, 154, 155, 172, 175, 180, 181, 182, 188, 191, 196, 207, 230, 231, 241, 265], "mymodul": [8, 206, 285], "hell": 8, "lot": [8, 12, 13, 18, 24, 56, 95, 106, 113, 138, 140, 154, 166, 181, 184, 188, 193, 196, 225, 226, 240, 267, 274], "came": [8, 57, 275], "scheme": [8, 23, 104, 105, 137, 196, 230, 238, 274, 281, 285], "hide": [8, 148, 178, 287], "reserv": [8, 13, 18, 188, 266], "simplifi": [8, 13, 17, 28, 113, 145, 152, 174, 184, 191, 198, 210, 265, 274, 277, 281, 289], "linearimpl": 8, "torch_modul": 8, "brief": [8, 28, 87, 95, 106, 178, 196, 199], "typedef": 8, "among": [8, 12, 58, 87, 93, 104, 142, 176, 188, 224, 258], "holder": 8, "arrow": [8, 47, 142], "resembl": [8, 15, 106, 150, 179], "extra": [8, 12, 61, 98, 103, 105, 109, 110, 113, 117, 140, 145, 146, 148, 155, 158, 170, 178, 184, 191, 193, 198, 215, 231, 240, 241], "netimpl": 8, "subtl": [8, 103, 225], "deserv": 8, "tricki": [8, 21, 149, 192, 195, 196, 283], "nullptr": [8, 268], "familiar": [8, 12, 13, 39, 40, 44, 48, 53, 58, 59, 61, 90, 98, 99, 103, 104, 106, 108, 113, 122, 137, 139, 143, 150, 151, 154, 162, 174, 181, 195, 222, 226, 240, 282], "pythonista": 8, "disadvantag": [8, 122], "said": [8, 162, 169, 178, 179, 274, 275], "introduct": [8, 14, 19, 21, 50, 52, 58, 59, 60, 61, 62, 89, 90, 95, 100, 107, 108, 111, 114, 115, 116, 118, 137, 147, 150, 151, 160, 178, 185, 199, 200, 201, 215, 226, 241, 252, 255, 260, 261, 276, 283], "sooner": [8, 139], "technic": [8, 154, 155, 169, 196, 204, 205, 213, 274], "henceforth": 8, "recap": [8, 51, 179, 230, 277], "adversari": [8, 48, 104, 123, 134, 137, 261], "architectur": [8, 21, 36, 57, 61, 80, 90, 100, 105, 106, 135, 137, 139, 142, 144, 150, 156, 166, 172, 174, 176, 183, 189, 191, 193, 199, 200, 222, 225, 241, 278, 281, 283], "repositori": [8, 13, 59, 88, 125, 139, 142, 154, 174, 175, 182, 183, 184, 198, 265], "distinct": [8, 21, 57, 87, 103, 112, 139, 182, 189, 195, 196, 255, 283], "transform": [8, 15, 21, 22, 24, 28, 35, 36, 37, 38, 39, 40, 41, 42, 44, 48, 54, 57, 93, 95, 96, 98, 102, 103, 104, 120, 123, 132, 133, 134, 137, 138, 140, 154, 155, 156, 158, 160, 162, 166, 169, 170, 177, 181, 184, 185, 188, 189, 191, 192, 198, 200, 214, 215, 226, 228, 238, 240, 241, 245, 248, 252, 255, 261, 263, 267, 279, 281, 283], "probabl": [8, 12, 36, 54, 57, 96, 100, 103, 105, 106, 109, 112, 138, 143, 144, 146, 177, 179, 189, 191, 214, 279], "judg": 8, "closer": [8, 95, 105, 179], "feedback": [8, 24, 139, 159, 162, 163, 200, 213, 266, 289], "authent": 8, "theori": [8, 54, 57, 95, 105, 143, 172], "delic": 8, "tandem": [8, 251], "indistinguish": 8, "fool": [8, 54, 80], "excel": [8, 56, 189, 207], "realist": [8, 199, 279], "2d": [8, 36, 57, 100, 113, 140, 145, 180, 191, 192, 196, 210], "dcgangeneratorimpl": 8, "knoises": 8, "conv1": [8, 51, 100, 102, 113, 122, 138, 171, 176, 181, 189, 243], "convtranspose2dopt": 8, "batch_norm1": 8, "conv2": [8, 51, 100, 102, 113, 122, 138, 181, 189, 243], "pad": [8, 24, 54, 100, 113, 148, 183, 199, 241, 276, 279, 283], "batch_norm2": 8, "conv3": [8, 113], "batch_norm3": 8, "conv4": 8, "convtranspose2d": 8, "batchnorm2d": [8, 24, 57, 113, 148, 241, 262], "dcgangener": 8, "chosen": [8, 96, 100, 141, 179, 193, 225, 226, 255], "cours": [8, 17, 21, 24, 58, 95, 96, 103, 105, 108, 109, 112, 113, 143, 154, 189, 222, 283], "student": [8, 105], "harm": [8, 105], "discoveri": [8, 195], "fed": [8, 15, 41, 54, 57, 191, 196], "soylent": 8, "regularli": [8, 58], "channel": [8, 13, 15, 24, 47, 48, 51, 57, 96, 98, 100, 103, 105, 113, 132, 137, 142, 176, 185, 189, 192, 198, 206, 215, 228, 241, 261], "moduleopt": 8, "linearopt": 8, "leaki": [8, 57], "squash": [8, 155, 162], "sequenti": [8, 15, 24, 54, 73, 100, 112, 121, 155, 170, 178, 192, 204, 214, 241, 258, 259, 279, 285, 287], "orient": [8, 186], "layer": [8, 12, 13, 14, 15, 16, 18, 20, 21, 24, 35, 41, 42, 47, 51, 54, 57, 60, 65, 73, 80, 93, 95, 98, 102, 103, 104, 105, 107, 113, 121, 122, 128, 136, 137, 138, 139, 140, 144, 145, 146, 147, 155, 163, 170, 174, 176, 177, 178, 181, 182, 184, 186, 195, 196, 198, 200, 204, 205, 206, 209, 213, 214, 224, 225, 228, 230, 232, 238, 242, 243, 245, 263, 267, 278, 281, 283], "conv2dopt": 8, "leakyrelu": [8, 57], "leakyreluopt": 8, "negative_slop": 8, "fourth": [8, 70, 121, 149], "knob": [8, 258], "sampler": [8, 24, 37, 60, 104, 138, 139, 178, 186], "collat": [8, 56], "wherev": 8, "make_data_load": 8, "unique_ptr": 8, "spawn": [8, 14, 23, 54, 57, 58, 60, 65, 138, 152, 154, 180, 181, 182, 206, 207, 208, 259, 265], "concurr": [8, 120, 142, 144, 172, 207, 241, 258, 263], "kbatchsiz": 8, "dataloaderopt": 8, "consol": [8, 189, 191], "field": [8, 13, 14, 17, 18, 36, 54, 100, 110, 112, 134, 154, 169, 178, 180, 188, 195, 198, 265, 276], "rebuild": [8, 226], "danc": [8, 15], "generator_optim": 8, "adamopt": 8, "2e": [8, 95], "beta": [8, 22, 131, 132, 137, 185, 247, 260, 261, 277], "make_tupl": 8, "discriminator_optim": 8, "5e": 8, "adagrad": [8, 104, 121, 261, 277, 284, 289], "lbfg": [8, 15], "rmsprop": [8, 40, 51, 74, 107, 121], "sgd": [8, 24, 40, 47, 48, 51, 72, 74, 93, 102, 104, 107, 113, 121, 122, 152, 154, 180, 181, 182, 186, 189, 215, 243, 244, 248], "exhaust": [8, 14, 195], "knumberofepoch": 8, "batch_index": 8, "real_imag": 8, "real_label": 8, "real_output": 8, "d_loss_real": 8, "binary_cross_entropi": [8, 225], "fake_imag": 8, "fake_label": 8, "fake_output": 8, "d_loss_fak": 8, "d_loss": 8, "fill_": [8, 9, 188], "g_loss": 8, "printf": 8, "r": [8, 14, 17, 24, 40, 47, 51, 80, 90, 106, 134, 137, 160, 161, 162, 163, 166, 179, 180, 182, 191, 198, 215, 226, 241, 258, 287], "2ld": 8, "3ld": 8, "4f": [8, 138, 139, 161, 178], "batches_per_epoch": 8, "evalu": [8, 15, 21, 24, 28, 40, 42, 80, 95, 96, 102, 105, 115, 122, 147, 161, 166, 174, 178, 179, 181, 189, 193, 195, 198, 216, 255, 283], "uniformli": [8, 93, 179, 241], "robust": [8, 54, 58, 59, 80, 103, 141, 179, 214], "smooth": [8, 105, 114, 191], "propag": [8, 13, 20, 35, 40, 47, 49, 51, 57, 105, 109, 110, 113, 149, 158, 163, 178, 241], "repeat": [8, 17, 23, 24, 95, 145, 146, 178, 188, 195, 200, 206, 231, 240, 245, 263, 274], "spiel": 8, "ideal": [8, 17, 37, 95, 98, 103, 105, 172, 184, 195, 202, 250], "progress": [8, 12, 18, 28, 57, 58, 102, 104, 155, 184, 189, 208, 265, 278], "yet": [8, 13, 14, 23, 55, 80, 95, 98, 103, 117, 118, 147, 154, 172, 181, 184, 196, 208, 215, 255, 262, 279], "moment": [8, 14, 262, 277, 288], "observ": [8, 17, 24, 51, 56, 87, 104, 128, 138, 139, 144, 147, 155, 162, 163, 169, 172, 178, 179, 180, 182, 183, 184, 193, 199, 204, 214, 216, 225, 226, 232, 238, 245, 256, 259, 260, 262, 277, 281], "meaning": [8, 54, 105, 163, 265], "3c0711f20896": 8, "dcga": 8, "6876": 8, "1304": 8, "3776": 8, "3101": 8, "300": [8, 139, 182, 214, 226, 240], "3652": 8, "6626": 8, "400": [8, 51, 122, 226, 240, 255], "8057": 8, "2795": [8, 226], "3531": 8, "4452": 8, "600": [8, 163, 179], "3501": 8, "0811": 8, "700": 8, "3581": 8, "5623": 8, "800": 8, "6423": 8, "7385": 8, "900": 8, "3592": 8, "7333": 8, "4660": 8, "5242": 8, "6364": 8, "0886": 8, "3717": 8, "8103": 8, "0201": 8, "3544": 8, "4522": 8, "6545": 8, "quickli": [8, 39, 48, 87, 105, 106, 107, 112, 113, 121, 142, 169, 179, 184, 200, 201, 216, 265], "onto": [8, 12, 17, 20, 23, 48, 100, 102, 103, 137, 155, 169, 181, 182, 196, 241, 265, 285], "somewher": [8, 100, 106, 107, 122], "kcpu": [8, 268, 288], "last": [8, 14, 17, 24, 36, 47, 54, 57, 58, 80, 88, 90, 93, 98, 100, 103, 104, 107, 110, 115, 128, 132, 137, 142, 143, 146, 154, 155, 160, 169, 178, 179, 180, 182, 183, 184, 185, 189, 195, 198, 215, 225, 241, 255, 261, 274, 277, 281], "whose": [8, 87, 90, 95, 96, 105, 112, 139, 143, 163, 172, 191, 224, 226], "insert": [8, 15, 21, 24, 100, 182, 195, 216, 262, 281, 283], "explicit": [8, 9, 140, 163, 172, 182, 195, 199, 222, 225, 247, 252, 260, 261, 275, 282], "suppli": [8, 109, 163, 177], "op": [8, 9, 13, 14, 18, 53, 87, 118, 131, 137, 138, 139, 140, 142, 147, 148, 152, 154, 160, 163, 177, 188, 199, 202, 206, 213, 225, 230, 260, 262, 267, 268, 275, 276, 278, 279, 285], "previou": [8, 14, 17, 18, 20, 21, 40, 54, 58, 60, 103, 104, 105, 113, 118, 128, 139, 140, 141, 145, 146, 149, 150, 151, 155, 162, 169, 172, 174, 176, 178, 179, 180, 182, 183, 184, 188, 189, 191, 193, 195, 196, 202, 226, 232, 241, 255, 283], "resid": [8, 105, 172], "downstream": [8, 191], "portabl": [8, 250], "augment": [8, 28, 56, 113, 128, 134, 137, 186, 195, 198], "period": [8, 54, 57, 141, 144, 162, 188, 265], "middl": 8, "procedur": [8, 51, 133, 179, 186], "restor": [8, 80, 122, 152, 163, 243], "session": [8, 105, 115], "deseri": [8, 122], "filenam": [8, 113, 120, 191, 225, 265], "interv": [8, 17, 95, 144, 182], "kcheckpointeveri": 8, "pt": [8, 58, 122, 138, 139, 140, 215, 216, 250, 288], "str": [8, 9, 23, 24, 88, 139, 174, 178, 181, 191, 195, 258], "checkpoint_count": 8, "counter": [8, 14, 54, 57, 147, 154, 192, 252], "bump": 8, "beta1": [8, 57], "krestorefromcheckpoint": 8, "intermediari": [8, 143], "xxx": [8, 18, 56], "matplotlib": [8, 15, 37, 57, 62, 95, 96, 98, 102, 113, 178, 179, 184, 189, 191], "argpars": [8, 138, 139, 180, 181, 182], "pyplot": [8, 15, 37, 102, 113, 178, 189, 191], "plt": [8, 15, 37, 102, 178, 184, 189, 191], "parser": [8, 106, 138, 139, 180, 181, 182], "argumentpars": [8, 138, 139, 180, 181, 182], "add_argu": [8, 138, 139, 180, 181, 182], "png": [8, 56, 137, 198], "parse_arg": [8, 138, 139, 180, 181, 182], "jit": [8, 9, 12, 18, 24, 90, 193, 202, 215, 226, 231, 245, 252, 254, 255, 288], "sample_fil": 8, "mul": [8, 147, 160, 195, 226, 240, 277, 288], "uint8": [8, 198], "numpi": [8, 15, 19, 22, 24, 45, 48, 56, 62, 76, 78, 79, 95, 102, 113, 115, 120, 136, 137, 149, 177, 178, 182, 189, 191, 193, 224, 240, 255, 261, 274, 283, 289], "axi": [8, 37, 87, 109, 110, 145, 172, 176, 191], "subplot": [8, 178], "imshow": [8, 15, 37, 102, 113, 189, 191], "cmap": [8, 37, 102, 113, 189], "grai": [8, 37, 113, 162], "get_xaxi": 8, "set_vis": 8, "get_yaxi": 8, "savefig": 8, "out_fil": 8, "17": [8, 77, 98, 120, 160, 161, 178, 195, 214, 215, 226], "57": [8, 21, 102, 120, 160, 178, 231], "4953": 8, "0195": 8, "3610": 8, "8148": 8, "4072": 8, "36760": 8, "4444": 8, "3761": 8, "8790": 8, "3977": 8, "3315": 8, "120": [8, 51, 102, 122, 128, 182, 189, 231, 243], "8084": 8, "hoorai": 8, "ball": 8, "court": 8, "hopefulli": [8, 55, 56, 80, 90, 107, 122, 242], "digest": [8, 240], "necess": [8, 54, 102], "broad": [8, 62, 96, 104], "did": [8, 12, 19, 24, 48, 57, 95, 98, 100, 103, 115, 141, 154, 158, 170, 178, 181, 184, 196, 226, 265], "space": [8, 17, 54, 57, 80, 95, 96, 100, 105, 106, 110, 112, 144, 155, 162, 169, 172, 178, 179, 182, 184, 188, 189, 191, 196, 199, 216, 266], "consult": [8, 169, 224], "stuck": [8, 289], "whenev": [8, 58, 72, 103, 106, 107, 202, 244], "rate": [8, 40, 47, 57, 93, 98, 100, 104, 105, 107, 113, 128, 138, 139, 144, 145, 162, 178, 179, 181, 196, 198, 239, 241, 265], "statu": [9, 28, 141, 144, 147, 182, 195, 254], "subject": [9, 14, 17, 138, 158, 184, 195, 202, 206, 213, 226, 254, 278, 279, 281, 287, 288], "snapshot": [9, 137, 150, 195], "__obj_flatten__": 9, "guard": [9, 12, 152, 205], "tupl": [9, 37, 44, 53, 87, 98, 100, 103, 105, 110, 112, 115, 179, 195, 198, 240, 263, 277], "attribute_nam": 9, "_librari": 9, "register_fake_class": 9, "addition": [9, 14, 15, 40, 87, 143, 144, 152, 172, 195, 198, 207, 208, 249, 258, 265, 282], "__obj_unflatten__": 9, "classmethod": 9, "flatten": [9, 51, 73, 105, 113, 121, 138, 142, 181, 195, 214], "breakdown": [9, 188], "diff": [9, 58, 60, 87, 137, 226, 240], "custom_class": 9, "tensorqueu": 9, "customclasshold": 9, "init_tensor_": 9, "dict": [9, 23, 54, 56, 169, 178, 195, 198, 207, 208, 213, 225, 230], "init_tensor": 9, "size_tensor": 9, "size_tensor_acc": 9, "const_data_ptr": 9, "queue_siz": 9, "irang": 9, "val": [9, 21, 24, 139, 177, 283], "queue_": 9, "to_str": 9, "push_back": [9, 215], "push": [9, 57, 80, 100, 105, 161, 267, 287], "rear": 9, "lock_guard": 9, "mutex": 9, "mutex_": 9, "pop": [9, 100, 283], "front": [9, 156, 176, 195], "pop_front": 9, "get_raw_queu": 9, "raw_queu": 9, "dequ": 9, "mycustomclass": 9, "class_": 9, "init": [9, 24, 141, 178, 200, 282, 285], "clone": [9, 14, 59, 103, 145, 149, 150, 154, 160, 161, 163, 174, 255, 263], "2a": 9, "class_nam": [9, 128, 191], "faketensorqueu": 9, "2b": [9, 47], "cl": [9, 15, 269], "flattened_tq": 9, "libcustom_class": 9, "tq": 9, "mod": [9, 193, 195, 227, 255], "sin": [9, 17, 19, 67, 68, 72, 73, 74, 77, 78, 95, 103, 121, 161, 241, 250, 269, 277], "co": [9, 95, 112, 231, 241, 269], "poped_t": 9, "allclos": [9, 160, 161, 263, 283], "eager": [9, 13, 90, 92, 147, 160, 163, 183, 193, 195, 199, 204, 213, 216, 241, 253, 255, 281], "fullgraph": [9, 19, 147, 193, 204, 252], "exported_program": [9, 122, 255], "strict": [9, 122, 191, 242, 275], "for_each_add_": 9, "inc": 9, "add_": [9, 103, 195, 274, 288], "torch_library_frag": 9, "__torch__": 9, "intrusive_ptr": [9, 175, 226, 240], "fake_for_each_add_": 9, "foreachadd": 9, "scriptobject": 9, "empty_tensor_queu": 9, "qlen": 9, "ep": [9, 148, 182, 195, 255, 262, 274, 283], "downsid": [9, 158, 172], "consum": [9, 117, 120, 143, 160, 172, 178, 180, 182, 183, 231, 241], "difficult": [9, 106, 161, 170, 184, 196, 213, 276, 287], "parti": [9, 12, 19, 131, 140, 141, 175], "fakif": 9, "tracing_mod": 9, "alias": [9, 12, 13, 195], "torchbind": 9, "vmap": [10, 12, 132, 137, 158, 161, 166, 171, 261, 284, 289], "oppos": [10, 54, 57, 128, 154, 161, 166, 181, 226], "treat": [10, 19, 95, 112, 171, 180, 193, 195, 196], "opaqu": [10, 19, 240, 252], "callabl": [10, 19, 45, 56, 113, 188, 193, 195, 224, 252], "aotinductor": [10, 131, 195, 247, 252, 255, 260, 261], "sycl": [10, 137], "toe": 10, "registr": [10, 12, 13, 18, 19, 215, 222], "doesn": [10, 12, 13, 16, 19, 21, 65, 107, 109, 112, 113, 143, 161, 163, 172, 176, 191, 193, 195, 204, 205, 213, 240, 241, 251, 255, 256, 258, 262, 267, 274, 283, 287], "pybind": 10, "ed": [10, 254], "respons": [12, 14, 20, 23, 54, 95, 96, 104, 113, 136, 137, 142, 148, 152, 154, 180, 181, 184, 193, 195, 204, 206, 224], "nontrivi": 12, "cross": [12, 16, 48, 57, 98, 100, 104, 142, 144, 241, 244, 258], "cut": [12, 174, 195], "concern": [12, 107, 196, 216, 274], "rule": [12, 35, 47, 51, 95, 103, 110, 143, 156, 161, 170, 171, 178, 179, 195, 225], "convers": [12, 54, 95, 103, 163, 184, 213, 238, 274], "highest": [12, 24, 48, 54, 102, 141, 146, 179, 191, 193, 241], "prioriti": [12, 141], "transfer": [12, 22, 48, 56, 105, 113, 122, 123, 134, 137, 154, 172, 177, 181, 188, 198, 227, 242, 261, 266, 288], "redispatch": 12, "unlik": [12, 15, 21, 96, 103, 105, 121, 142, 143, 158, 163, 184, 192, 195, 252, 258, 282, 283], "style": [12, 142, 174, 195, 198, 208], "abid": [12, 57], "myop": 12, "myadd": [12, 13], "myadd_cpu": 12, "self_": 12, "other_": 12, "self_ptr": 12, "other_ptr": 12, "catch": [12, 14, 193, 195, 215, 253], "myadd_cuda": 12, "boundari": [12, 140, 178, 249], "myops_cpu": 12, "myops_cuda": 12, "subdivid": 12, "xla": [12, 13, 18, 238], "torch_xla": [12, 13], "useabl": 12, "behav": [12, 19, 103, 113, 163, 170, 180, 222], "autogradnotimplementedfallback": 12, "notimpl": 12, "node": [12, 23, 35, 47, 51, 58, 59, 60, 61, 65, 67, 95, 102, 106, 118, 121, 133, 139, 140, 141, 145, 147, 150, 151, 152, 159, 160, 181, 184, 195, 210, 241, 258, 263, 268, 281], "preserv": [12, 21, 103, 132, 137, 140, 163, 176, 238, 243, 275, 281, 283], "require_grad": 12, "ness": 12, "pin": [12, 104, 143, 172, 241], "lost": [12, 21, 283], "adinplaceorview": 12, "bookkeep": [12, 226], "autogradnotimplementedinplaceorviewfallback": 12, "logi": 12, "annot": [12, 13, 23, 37, 56, 107, 118, 191, 193, 195, 226], "guess": [12, 40, 47, 54, 57, 145, 184], "twist": 12, "constitut": [12, 17], "hood": [12, 24, 54, 57, 59, 61, 65, 121, 142, 143, 161, 162, 172, 182, 206, 209, 277], "singleton": [12, 181], "findschemaorthrow": 12, "decltyp": 12, "qualifi": [12, 208], "overload": 12, "typic": [12, 14, 17, 24, 37, 47, 51, 53, 59, 60, 87, 98, 106, 107, 112, 140, 142, 144, 148, 150, 160, 169, 172, 178, 181, 191, 193, 195, 196, 213, 214, 215, 225, 227, 241, 245, 255, 258], "cast": [12, 21, 23, 78, 120, 139, 140, 172, 195, 225, 283], "lookup": [12, 20, 112, 147, 182], "typo": [12, 200], "myaddfunct": [12, 13], "autononvariabletypemod": [12, 13], "myadd_autograd": [12, 13], "raii": 12, "infinit": 12, "overflow": [12, 54, 225, 267], "send": [12, 13, 14, 15, 48, 49, 65, 93, 154, 162, 172, 174, 175, 180, 181, 182, 196, 206, 231], "exclud": [12, 47, 140, 193, 231, 281], "consider": [12, 13, 138, 195, 196, 255], "autogradcpu": 12, "autogradcuda": 12, "pythondispatch": 12, "_python_dispatch": 12, "isn": [12, 95, 106, 158, 172, 177, 189, 195, 196, 226, 228, 242, 243, 276], "glorifi": 12, "add_cpu": 12, "add_cuda": 12, "unsupport": [12, 114, 118, 131, 137, 193, 195, 255], "decentr": 12, "importantli": [12, 24, 149, 169, 172, 226, 274], "aspect": [12, 18, 80, 154, 198, 226], "patch": [12, 13, 179], "dispatchkei": [12, 13], "varieti": [12, 28, 36, 54, 95, 96, 100, 104, 113, 122, 146, 172, 199, 216, 258, 277], "fallback": [12, 13, 18, 114, 199], "opt": [12, 113, 144, 163, 175, 181, 182, 188, 204, 267, 285], "amp": [12, 18, 65, 140, 163, 202, 215, 248, 260, 278], "incom": [12, 98, 188], "float16": [12, 18, 139, 163, 202, 225], "float32": [12, 17, 139, 140, 177, 178, 182, 225, 238, 263, 268, 278], "matmul": [12, 142, 160, 195, 202, 214, 225, 267, 283, 287], "impair": 12, "converg": [12, 40, 54, 57, 68, 104, 105, 121, 122, 142, 154, 170, 179, 184, 205, 225, 242, 260], "hypothet": 12, "autocast_mod": 12, "mymatmul_autocast": 12, "excludedispatchkeyguard": 12, "no_autocast": 12, "mymatmul": 12, "cached_cast": 12, "khalf": 12, "elig": [12, 241], "polici": [12, 18, 134, 137, 138, 140, 162, 179, 180, 182, 185, 216, 258, 261], "mixtur": [12, 213], "meanwhil": [12, 143, 160, 215, 275], "float64": [12, 277], "unaffect": [12, 105], "forc": [12, 17, 21, 54, 100, 137, 184, 193, 199, 225, 241, 249, 274, 276, 283], "fallthrough": 12, "occur": [12, 14, 19, 24, 58, 87, 105, 160, 163, 172, 180, 181, 188, 191, 195, 196, 200, 209, 231, 251, 265, 267], "fall": [12, 18, 96, 170, 179, 200, 253], "unfortun": [12, 121, 154, 195], "aren": [12, 149, 155, 195, 196, 241, 244, 276], "dri": [12, 188], "guidanc": [12, 141, 201, 225, 258], "reduct": [12, 103, 138, 139, 140, 143, 148, 169, 175, 188, 191, 199, 225, 241, 274, 276, 289], "gemm": [12, 160, 214, 278], "unless": [12, 44, 53, 103, 107, 114, 178, 195, 230, 267, 287], "categori": [12, 13, 24, 80, 87, 96, 103, 128, 145, 146, 188, 195, 277], "promote_typ": 12, "widest": 12, "safest": 12, "my_multiple_input_op_autocast": 12, "t0": [12, 139, 204, 226], "t1": [12, 226], "optimist": 12, "exec_typ": 12, "my_multiple_input_op": 12, "myadd_autocast": 12, "gymnast": 12, "suitabl": [12, 45, 150, 154, 191, 240], "invoc": [12, 159, 180, 222, 245, 251], "stabil": [12, 105, 179], "41478": 12, "repo": [13, 18, 23, 24, 59, 87, 136, 137, 150, 154, 172, 180, 181, 196, 266, 267], "mainten": [13, 191], "solut": [13, 21, 57, 114, 122, 131, 137, 160, 171, 172, 191, 193, 196, 209, 226, 241, 250, 260, 276, 279, 283], "pr": [13, 189, 199, 215, 240], "propos": [13, 28, 142, 155, 170, 209, 274, 276], "request": [13, 35, 47, 93, 103, 113, 139, 170, 177, 178, 180, 181, 206, 207, 268, 276, 277, 278, 282], "hardwar": [13, 18, 21, 44, 53, 55, 103, 105, 115, 145, 154, 156, 161, 163, 171, 172, 175, 176, 196, 199, 202, 214, 215, 216, 227, 241, 248, 252, 255, 267, 283], "googl": [13, 21, 28, 39, 54, 57, 102, 113, 137, 154, 155, 178, 179, 188, 196, 258], "tpu": [13, 175, 244], "chip": 13, "layout": [13, 21, 142, 199, 210, 241, 274, 277, 283, 289], "spars": [13, 20, 100, 107, 112, 137, 155, 176, 196, 199, 238, 261, 276, 284, 289], "quantiz": [13, 105, 128, 132, 135, 169, 202, 229, 238, 260, 261, 284], "enforc": [13, 17, 144, 170, 274, 275], "mainli": [13, 17, 18, 23, 160, 188, 193, 254, 281], "haven": [13, 93, 95, 98, 103, 106, 110, 112, 156, 159, 171], "identifi": [13, 21, 37, 58, 60, 80, 87, 88, 96, 113, 120, 151, 162, 163, 167, 176, 181, 195, 198, 209, 255, 265, 277, 283], "carri": [13, 17, 54, 57, 95, 103, 105, 109, 150, 155, 163, 184, 230], "privateuse1": [13, 136, 137, 282], "autogradprivateuse1": [13, 18], "privateuse2": [13, 18], "autogradprivateuse2": [13, 18], "privateuse3": [13, 18], "autogradprivateuse3": [13, 18], "tensorimpl": [13, 18, 226, 240], "storag": [13, 18, 19, 104, 109, 122, 137, 143, 155, 156, 163, 172, 178, 188, 207, 208, 225, 230, 238, 261, 265, 274, 276, 277, 284, 285, 289], "dispatchkeyset": [13, 18], "k": [13, 15, 24, 87, 96, 106, 142, 180, 181, 183, 265, 278, 283], "caffe2": [13, 90], "typemeta": 13, "data_typ": [13, 109], "opaquetensorimpl": 13, "tweak": [13, 54, 244], "overrid": [13, 18, 56, 98, 107, 141, 159, 163, 175, 191, 251, 260], "vulkan": 13, "src": [13, 14, 118, 154, 175, 240, 288], "registrationdeclar": 13, "snippet": [13, 138, 139, 141, 147, 154, 160, 175, 183, 210, 225, 230, 241, 260, 263, 266, 274, 278, 282], "ab": [13, 193, 202, 231], "abs_": 13, "abs_out": 13, "absolute_": 13, "absolute_out": 13, "angl": [13, 17, 112], "angle_out": 13, "sgn": 13, "uniqu": [13, 21, 54, 58, 60, 106, 107, 108, 110, 112, 139, 151, 181, 184, 196, 198, 255, 274, 283], "boolean": [13, 155, 195], "impli": [13, 105, 110, 195, 207, 230, 240, 252], "schema_my_op1": 13, "my_op1": 13, "schema_my_op2": 13, "my_op2": 13, "schema_my_op2_backward": 13, "my_op2_backward": 13, "zoom": [13, 87, 102, 144, 188, 191], "1600": [13, 226, 240], "grow": [13, 54, 107, 141, 143, 150, 207], "unrealist": 13, "classifi": [13, 15, 24, 28, 36, 47, 50, 51, 52, 57, 62, 80, 87, 93, 98, 100, 105, 122, 128, 131, 137, 140, 146, 162, 167, 184, 185, 198, 199, 224, 255, 260, 261], "accompani": 13, "comment": [13, 154, 169, 184, 215, 227, 274, 287], "sacrif": [13, 176], "max_pool2d": [13, 51, 138, 181, 231, 288], "worri": [13, 57, 107, 149, 152, 169, 182, 210], "my_op": 13, "squeez": [13, 17, 37, 103, 189, 267], "max": [13, 14, 24, 54, 57, 87, 100, 113, 138, 144, 154, 178, 189, 191, 195, 199, 241, 255, 258, 259, 267, 279, 283, 289], "op_backward": 13, "proper": [13, 35, 139, 142, 152, 163, 178, 182, 191, 196, 241, 274], "rare": [13, 18, 54, 128, 172, 184, 241], "assumpt": [13, 17, 80, 105, 112, 113, 166, 172], "myadd_schema": 13, "train": [13, 15, 20, 21, 23, 35, 39, 40, 41, 45, 47, 50, 51, 52, 56, 59, 61, 62, 65, 67, 68, 70, 72, 73, 74, 77, 78, 80, 87, 90, 96, 97, 99, 100, 103, 105, 106, 108, 110, 112, 113, 115, 121, 131, 132, 133, 134, 137, 138, 140, 141, 144, 147, 148, 152, 163, 164, 166, 167, 170, 171, 174, 175, 177, 180, 181, 182, 183, 185, 188, 191, 192, 193, 195, 198, 202, 204, 205, 207, 208, 209, 210, 216, 225, 228, 231, 239, 242, 243, 245, 255, 259, 260, 261, 263, 265, 266, 276, 283], "my_add": 13, "_xlac": 13, "torch_xla_sourc": 13, "library_dir": 13, "extra_link_arg": 13, "make_relative_rpath": 13, "seamlessli": [13, 17, 58, 142, 196, 199, 226, 250], "nm": [13, 215], "torchvsion": 13, "torchvis": [13, 15, 24, 37, 39, 41, 45, 47, 48, 55, 62, 93, 96, 98, 99, 102, 104, 105, 128, 134, 137, 138, 139, 159, 169, 177, 180, 181, 185, 188, 189, 191, 193, 215, 216, 231, 239, 241, 244, 248, 254, 255, 261, 267, 281, 288], "adhoc": 13, "unbox": 13, "potenti": [13, 17, 80, 95, 106, 139, 141, 147, 172, 181, 193, 195, 198, 250, 252, 265, 281, 289], "wiki": [13, 158], "suit": [13, 96, 120, 178, 214, 278], "ship": [13, 48, 98], "delet": [13, 88, 143, 152, 169, 174, 182, 191, 267], "old": [13, 24, 122, 141, 176, 188, 279], "until": [13, 54, 87, 95, 139, 141, 145, 146, 154, 155, 160, 169, 172, 178, 180, 181, 182, 188, 206, 226, 263, 274], "interrupt": [13, 58, 93, 184], "quarterli": 13, "cadenc": 13, "announc": 13, "slack": [13, 48], "com": [13, 23, 24, 54, 113, 118, 138, 145, 146, 148, 184, 192, 198, 224, 226, 255, 267, 288], "Not": [13, 152, 177, 259], "search": [13, 23, 54, 135, 137, 144, 160, 176, 195, 258, 267], "instantiate_device_type_test": 13, "testtorchdevicetyp": 13, "testviewop": 13, "testtensordeviceop": 13, "testtypepromot": 13, "__reduce_ex__": 13, "monkei": 13, "direct": [13, 35, 47, 51, 57, 80, 95, 96, 98, 104, 112, 144, 154, 158, 162, 166, 170, 184, 207, 253, 260, 266, 267, 277], "suppos": [13, 105, 106, 107, 112, 138, 193, 198, 215, 262, 282], "vice": [13, 44, 53], "versa": [13, 44, 53], "Such": [13, 14, 95], "seamless": [13, 196, 209, 289], "coverag": [13, 158, 161, 163, 225, 279, 281], "comprehens": [13, 28, 44, 53, 96, 118, 160, 195, 213, 240, 241], "refactor": [13, 122, 150], "codegen": [13, 160], "dev": [13, 107, 147, 177, 188, 191, 193, 222, 225, 289], "andrew": [14, 262], "gu": 14, "shard": [14, 133, 137, 150, 206, 208, 209, 210, 260, 263], "saw": [14, 17, 40, 54, 98, 100, 103, 107, 109, 158, 161, 162], "skeleton": [14, 17, 238], "implicitli": [14, 47, 54, 95, 138, 149, 183, 195, 222], "schedul": [14, 87, 93, 104, 128, 131, 138, 139, 140, 152, 174, 178, 179, 188, 198, 231, 241, 247, 258, 260, 261], "rank": [14, 20, 23, 49, 58, 60, 87, 132, 137, 138, 139, 140, 141, 152, 154, 174, 175, 180, 181, 182, 196, 206, 207, 208, 210, 258, 259, 263, 265], "commun": [14, 18, 23, 60, 137, 138, 139, 140, 142, 144, 150, 151, 152, 174, 175, 178, 180, 181, 182, 188, 191, 195, 196, 209, 210, 241, 260, 263, 265, 269, 289], "particip": [14, 100, 151, 181, 225, 241], "hang": [14, 60, 146], "persist": [14, 42, 207, 225], "facilit": [14, 17, 54, 96, 103, 105, 122, 136, 137, 140, 142, 155, 241, 279, 282], "earli": [14, 57, 93, 152, 154, 172, 213, 262, 276], "shadow": 14, "hook": [14, 140, 142, 147, 152, 176, 185, 232, 261], "mp": [14, 18, 36, 41, 44, 58, 60, 67, 80, 103, 121, 128, 137, 138, 139, 152, 154, 180, 181, 182, 206, 207, 208, 259], "ddp": [14, 20, 58, 59, 65, 137, 138, 139, 140, 142, 151, 188, 210, 259], "nccl": [14, 23, 58, 60, 87, 138, 139, 141, 142, 152, 154, 188, 196, 208, 210, 263, 265], "world_siz": [14, 20, 23, 58, 60, 138, 139, 141, 152, 154, 174, 175, 180, 181, 182, 206, 207, 208, 210, 259, 263, 265], "num_input": 14, "master_addr": [14, 23, 58, 60, 138, 141, 152, 154, 175, 180, 181, 182, 206, 207, 208, 259, 265], "localhost": [14, 23, 58, 60, 102, 138, 141, 152, 175, 180, 181, 182, 188, 189, 196, 206, 207, 208, 210, 239, 249, 259], "master_port": [14, 23, 58, 60, 138, 141, 152, 154, 175, 180, 181, 182, 206, 207, 208, 259, 265], "29500": [14, 23, 154, 175, 180, 181, 182, 206, 259], "init_process_group": [14, 20, 23, 58, 60, 138, 139, 141, 152, 154, 174, 175, 207, 208, 210, 259, 263, 265], "device_id": [14, 60, 122, 139, 140, 152, 259], "nproc": [14, 58, 60, 138, 152, 180, 182, 206, 207, 208, 259, 263], "arbitrarili": [14, 54, 105, 232], "togeth": [14, 21, 36, 42, 54, 56, 65, 90, 98, 100, 103, 104, 105, 109, 113, 138, 140, 148, 152, 155, 156, 172, 180, 182, 184, 191, 199, 240, 252, 283], "examin": [14, 87, 95, 96, 102, 104, 105, 154, 159, 172, 196], "lr": [14, 24, 51, 57, 93, 98, 102, 113, 122, 128, 131, 138, 139, 140, 152, 154, 160, 162, 178, 179, 180, 181, 182, 189, 204, 207, 208, 215, 243, 247, 248, 259, 260, 261], "notabl": [14, 24, 93, 238], "divide_by_initial_world_s": 14, "world": [14, 17, 23, 41, 59, 95, 103, 107, 142, 154, 159, 162, 175, 179, 180, 181, 195, 196, 207, 208, 210, 214, 265, 279], "nonetheless": [14, 105], "mind": [14, 44, 54, 57, 90, 105, 151, 166], "preliminari": [14, 154], "delv": [14, 160, 252], "insight": [14, 80, 87, 136, 154, 183, 226, 240], "join_hook": 14, "kwarg": [14, 122, 140, 159, 163, 178, 181, 195, 196, 204, 255, 278, 285], "join_devic": 14, "join_process_group": 14, "processgroup": [14, 20, 23, 65, 133, 137, 142, 182, 196, 210, 241, 265], "throw_on_early_termin": 14, "explain": [14, 15, 21, 47, 51, 57, 80, 96, 107, 113, 141, 142, 160, 193, 195, 200, 231, 250, 255, 268, 278, 281, 283], "joinconfig": 14, "_join_config": 14, "main_hook": 14, "repeatedli": [14, 100, 178, 182, 266], "post_hook": 14, "is_last_join": 14, "broadcast": [14, 73, 113, 121, 140, 152, 154, 175, 195, 240, 259], "vacuou": 14, "contextlib": [14, 191], "nullcontext": 14, "conform": [14, 191], "interleav": [14, 263], "syncbatchnorm": [14, 60], "proce": [14, 105, 107, 160, 195, 241, 265], "__exit__": 14, "heartbeat": 14, "notify_join_context": 14, "serializ": 14, "fulli": [14, 15, 17, 18, 39, 51, 65, 87, 93, 98, 99, 100, 113, 128, 133, 137, 144, 147, 150, 163, 166, 179, 181, 183, 188, 200, 202, 208, 213, 215, 228, 276, 283], "proceed": [14, 51, 105, 118, 172], "overlap": [14, 61, 138, 139, 140, 145, 150, 152, 172, 188, 191, 241, 263], "moreov": [14, 172, 215, 226, 274], "permit": [14, 225], "customiz": [14, 155], "idea": [14, 28, 80, 90, 105, 107, 108, 109, 112, 121, 142, 148, 155, 160, 170, 179, 182, 184, 206, 222, 226, 241, 258, 259, 274, 287], "counterjoinhook": 14, "sync_max_count": 14, "all_reduc": [14, 65, 138, 139, 154, 175, 209, 265], "get_rank": [14, 140, 152, 154], "process_group": [14, 210, 265], "common_rank": 14, "find_common_rank": 14, "max_count": 14, "__call__": [14, 56, 176], "meth": [14, 17], "to_consid": 14, "reduceop": [14, 138, 139, 154], "device_count": [14, 58, 60, 93, 103, 138, 152, 207, 208, 210], "highlight": [14, 54, 90, 114, 125, 133, 139, 140, 183, 188, 193, 195, 196, 206, 215, 252], "alexi": 15, "jacq": 15, "winston": 15, "her": [15, 175], "leon": 15, "gati": 15, "alexand": [15, 281], "ecker": 15, "matthia": 15, "bethg": 15, "artist": 15, "distanc": [15, 67, 68, 72, 73, 74, 77, 78, 95, 105, 121], "d_c": 15, "d_": 15, "indispens": [15, 178], "pil": [15, 45, 56, 177, 191, 198], "pretrain": [15, 28, 47, 80, 96, 112, 128, 137, 177, 184, 191, 215, 254, 255, 281, 288], "longer": [15, 57, 63, 64, 95, 107, 113, 115, 121, 131, 140, 143, 147, 160, 169, 176, 179, 180, 193, 195, 203, 205, 218, 219, 220, 221, 223, 226, 241, 271, 272, 278, 279, 280, 288], "resiz": [15, 24, 51, 57, 155, 215, 248], "unabl": [15, 19, 156, 171, 195, 276], "caff": 15, "picasso": 15, "jpg": [15, 37, 56, 57, 96], "reconvert": 15, "f_": [15, 178], "xl": [15, 214], "w_": [15, 112], "squar": [15, 40, 51, 56, 67, 68, 72, 73, 74, 77, 78, 95, 100, 103, 105, 121, 148, 149, 162, 170, 179, 183, 262], "contentloss": 15, "recomput": [15, 105, 148, 150, 170, 241], "act": [15, 47, 54, 95, 100, 103, 144, 155, 176, 179, 181, 195, 196], "gram": 15, "g_": 15, "hat": [15, 110], "counteract": 15, "pool": [15, 23, 57, 100, 102, 105, 113, 122, 189, 196, 243], "tend": [15, 21, 95, 100, 105, 267, 283], "almost": [15, 24, 110, 112, 138, 142, 155, 177, 195, 267], "sl": 15, "19": [15, 21, 37, 102, 160, 178, 179, 195, 214, 231, 267, 268, 283], "vgg": 15, "child": [15, 120, 188, 210], "connect": [15, 51, 93, 98, 100, 112, 128, 137, 141, 142, 154, 158, 159, 166, 176, 177, 179, 199, 200, 210, 228, 265], "eval": [15, 21, 24, 42, 54, 113, 122, 138, 139, 148, 178, 181, 184, 191, 192, 215, 248, 255, 281, 283, 288], "485": [15, 24, 56, 105, 177], "456": [15, 24, 56, 105, 177], "406": [15, 24, 56, 105, 177], "229": [15, 24, 56, 105, 177], "224": [15, 24, 56, 105, 177, 191, 215, 216, 248, 255, 258, 281, 288], "225": [15, 24, 56, 105, 120, 177], "vgg19": [15, 163], "maxpool2d": [15, 51, 102, 122, 159, 189, 243], "align": [15, 137, 183, 184, 222, 266, 275], "depth": [15, 47, 57, 61, 95, 98, 103, 109, 143, 160, 195, 200, 204, 241], "immedi": [15, 23, 44, 53, 57, 100, 103, 110, 154, 169, 180, 181, 188, 267], "white": [15, 19, 21, 80, 100, 113, 189, 191, 283], "input_img": 15, "content_img": 15, "bfg": 15, "closur": [15, 195, 200], "reevalu": 15, "exce": [15, 80, 148, 196], "sphinx_gallery_thumbnail_numb": 15, "neural_style_tutori": [15, 22, 261], "paszk": [16, 154, 179], "dziedzic": 16, "shall": [16, 51, 57], "learnabl": [16, 51, 72, 121, 122, 136, 137, 243, 285], "badfftfunct": 16, "literatur": [16, 179], "confusingli": 16, "correl": [16, 87, 100, 113, 160], "filter": [16, 28, 54, 88, 96, 105, 143, 184, 196, 240, 265], "flip": [16, 161], "wrt": [16, 149], "numpy_extensions_tutori": [16, 22, 261], "freeli": 17, "inspir": [17, 154, 161, 166, 183, 287], "v1": [17, 21, 163, 179, 180, 182, 206, 226, 277, 283], "openai": [17, 134, 137, 162, 178, 179, 180, 182, 255], "farama": [17, 178], "gymnasium": [17, 178, 179], "stateless": [17, 156, 158], "encount": [17, 54, 139, 147, 160, 193, 195, 196, 199, 241, 249, 255, 282], "undertaken": 17, "broader": 17, "wider": [17, 161], "acquaint": 17, "set_se": 17, "avenu": [17, 90], "backpropag": [17, 40, 41, 47, 51, 54, 80, 95, 106, 107, 108, 110, 112, 113, 121, 143, 162, 196], "_set_se": 17, "torqu": 17, "upward": 17, "posit": [17, 96, 100, 107, 132, 137, 170, 178, 179, 183, 184, 191, 195, 199, 224, 258, 265, 283], "angular": 17, "stand": [17, 90, 95, 113, 162, 199, 277], "equat": [17, 57, 178, 179, 228, 232], "motion": 17, "veloc": [17, 179], "theta": [17, 80, 107, 178], "_t": [17, 162], "theta_t": 17, "dt": 17, "rad": 17, "sec": [17, 138], "gravit": 17, "mass": 17, "accord": [17, 18, 28, 35, 103, 104, 122, 160, 162, 174, 176, 179, 183, 191, 202, 249, 277, 285], "theta_": [17, 162], "001": [17, 102, 122, 152, 180, 189, 215, 243, 248], "deleg": [17, 137, 288], "merg": [17, 49, 96, 100, 177, 191, 215], "is_shar": [17, 178], "new_th": 17, "plu": [17, 107], "new_thdot": 17, "neg": [17, 40, 54, 96, 100, 106, 107, 113, 114, 160, 172, 176, 178, 224], "discourag": [17, 44, 53, 178], "possibli": [17, 57, 140, 178, 195, 250, 265], "omit": [17, 95, 102, 120, 140, 160, 178, 199, 231, 238, 240], "agent": [17, 134, 137, 179, 180, 182, 185, 261], "param": [17, 24, 51, 56, 122, 138, 139, 140, 149, 152, 154, 156, 158, 171, 181, 182, 238, 259, 262, 274], "mandatori": [17, 158, 178], "domain": [17, 28, 37, 41, 54, 55, 80, 104, 118, 137, 178, 192, 241, 279], "accur": [17, 24, 80, 93, 98, 120, 144, 159, 172, 182, 193, 253, 276, 281], "lazili": [17, 169], "costli": [17, 143, 241], "observation_spec": [17, 178], "compositespec": 17, "dictionari": [17, 41, 42, 54, 87, 112, 115, 122, 146, 169, 171, 178, 180, 181, 184, 191, 196, 230, 243, 260, 266], "action_spec": [17, 178], "reward_spec": [17, 178], "done_spec": 17, "input_spec": [17, 178], "state_spec": 17, "output_spec": 17, "neither": [17, 103, 258, 262], "shortcut": 17, "tensorspec": 17, "irrelev": [17, 175], "incorpor": [17, 105, 114, 137, 155, 183], "pseudo": [17, 28], "_make_spec": 17, "pendulumenv": 17, "gen_param": 17, "batch_lock": 17, "homonym": [17, 172], "check_env_spec": [17, 178], "coupl": [17, 39, 54, 99, 103, 104, 112, 139, 149, 155, 156, 169, 172, 189, 195, 241], "rand_step": 17, "randomli": [17, 48, 56, 57, 77, 78, 93, 98, 100, 121, 146, 162, 179, 184, 196], "invers": [17, 103, 206, 266, 275], "thdot": 17, "effort": [17, 54, 56, 57, 118, 240], "summar": [17, 54, 56, 113, 125, 139, 144, 188, 195], "_apply_transform": 17, "_call": 17, "inv": 17, "_inv_apply_transform": 17, "eventu": [17, 141, 148, 155], "out_keys_inv": 17, "unitari": 17, "sine": [17, 121], "cosin": [17, 214], "raw": [17, 36, 48, 54, 73, 87, 113, 121, 200, 253, 265], "del_kei": 17, "mdp": 17, "gather": [17, 60, 96, 102, 138, 140, 142, 152, 154, 155, 159, 178, 200, 225, 263, 287, 289], "unexplor": 17, "abil": [17, 103, 113, 122, 142, 143, 154, 186, 189, 193, 199, 276, 288], "recreat": [17, 35, 47], "Of": [17, 105, 109, 113, 143, 154, 189, 222, 254, 275, 277], "clip": [17, 54, 80, 178], "scratch": [17, 35, 47, 54, 58, 105, 106, 122, 125, 128, 137, 185, 242, 260, 261, 265], "advanc": [18, 21, 22, 24, 47, 93, 108, 111, 114, 115, 117, 118, 131, 132, 133, 136, 137, 140, 152, 172, 191, 196, 199, 209, 215, 241, 258, 260, 261, 274, 277, 278, 281, 283, 284, 287, 289], "verif": [18, 181], "rapid": [18, 95, 277], "manufactur": 18, "imposs": [18, 98, 106, 169, 287], "simultan": [18, 35, 47, 61, 144, 154, 172, 177, 241], "began": 18, "enhanc": [18, 96, 131, 132, 141, 145, 172, 186, 202, 241, 255, 258, 269, 278, 282], "rapidli": 18, "situat": [18, 95, 103, 140, 148, 149, 152, 154, 198, 267], "wrapper_custom_tensor_add": 18, "torch_fn": 18, "custom_cpu_fallback": 18, "operatorhandl": 18, "hint": [18, 23, 95, 105, 106, 110, 118, 143, 154, 180, 188, 195, 200], "cpu_fallback": 18, "cppfunction": 18, "makefromboxedfunct": 18, "cumtomselufunct": 18, "selu": 18, "wrapper_autogradcumstom__selu": 18, "wrapper_autogradcustom__selu": 18, "autocastprivateuse1": 18, "autocast": [18, 202, 215, 248, 278, 283], "kernel_privateuseon": 18, "makefallthrough": 18, "backendmodul": 18, "_register_device_modul": 18, "backend_nam": 18, "get_amp_supported_dtyp": 18, "is_autocast_en": 18, "get_autocast_dtyp": 18, "set_autocast_dtyp": 18, "set_autocast_en": 18, "generatorimpl": 18, "builder": [18, 195], "register_generator_privateuse1": 18, "customgeneratorimpl": 18, "make_custom_gener": 18, "deviceindex": 18, "device_index": 18, "make_gener": 18, "make_cumstom_gener": 18, "event": [18, 87, 120, 138, 139, 180, 193, 231, 239, 253, 265], "deviceguard": 18, "deviceguardimplinterfac": 18, "c10_register_guard_impl": 18, "customguardimpl": 18, "backend_meta_": 18, "extrameta": 18, "backendmeta": 18, "custombackendmetadata": 18, "unordered_map": 18, "tensorbackendmetaregistri": 18, "for_seri": 18, "for_deseri": 18, "expand": [18, 95, 109, 115, 160, 167, 189, 207, 255, 279], "timer": [18, 57, 161, 184, 204, 229, 237, 261, 283], "ascend": [18, 57, 88, 282], "npu": [18, 281, 282], "meet": [18, 55, 57, 216, 226, 285], "usabl": [18, 122, 155, 242, 265], "compli": 18, "habit": 18, "torch_npu": [18, 282], "exclus": [18, 176], "rename_privateuse1_backend": 18, "register_privateuse1_backend": 18, "unsupported_dtyp": 18, "quint8": [18, 262], "generate_methods_for_privateuse1_backend": 18, "for_tensor": 18, "for_modul": 18, "for_storag": 18, "is_npu": 18, "perhap": [19, 80, 145, 176, 208], "prevent": [19, 40, 54, 60, 113, 120, 143, 146, 152, 160, 162, 172, 195, 196, 225, 226, 241, 245, 258, 282], "custom_op": [19, 118, 252], "land": [19, 136, 137, 147, 162, 199, 215, 259, 276], "induc": [19, 176, 265], "bad": [19, 93, 143, 241, 267], "uncom": [19, 54, 56, 68, 78, 98, 102, 109, 113, 121, 174, 179], "cropped_img": 19, "img": [19, 37, 96, 102, 137, 189, 191], "black": [19, 80, 87, 100, 113, 136, 137, 142, 144, 180, 184], "aka": [19, 161, 163, 172, 199, 215, 254], "mutates_arg": 19, "led": 19, "past": [19, 54, 55, 104, 109, 195, 199], "exercis": [19, 24, 48, 154, 225], "reader": [19, 110, 154, 199, 240], "region": [19, 96, 103, 131, 144, 159, 186, 191, 198, 222, 225, 229, 241, 247, 251, 253, 260, 261], "unus": [19, 160, 175], "forgot": [19, 265], "python_custom_op": [19, 22, 261], "pritam": 20, "damania": 20, "yi": [20, 195, 254], "wang": [20, 28, 115, 117, 118, 160, 162, 265], "distributeddataparallel": [20, 60, 61, 65, 133, 138, 139, 140, 154, 175, 182, 225, 259], "paradigm": [20, 21, 65, 105, 121, 133, 181, 182, 283], "embed": [20, 54, 100, 106, 108, 110, 111, 122, 137, 139, 140, 142, 174, 181, 182, 184, 189, 199, 209, 261, 263], "dens": [20, 21, 196, 199, 274, 279, 283], "fc": [20, 47, 162, 285], "replic": [20, 23, 61, 65, 137, 138, 142, 150, 152, 154, 181, 182, 196, 210], "trainer": [20, 28, 60, 144, 150, 180, 181, 182, 208, 283], "hybrid": [20, 89, 91, 210, 261], "pipedream": 20, "master": [20, 24, 138, 154, 159, 163, 181, 182, 198, 206, 215, 265, 288], "embeddingbag": [20, 23], "drive": [20, 57, 95, 98, 100, 137, 162, 172, 206, 274], "respond": [20, 96, 162, 181], "amongst": [20, 178, 196, 275], "themselv": [20, 100, 196, 200, 276], "remotemodul": 20, "kick": [20, 35, 47, 169, 180, 181, 182], "remot": [20, 65, 133, 144, 180, 181, 182, 188, 206, 222, 249, 258], "hybridmodel": 20, "allreduc": [20, 87, 138, 142, 152, 175, 241, 265], "firstli": [20, 118, 160, 179], "tcp": [20, 60, 141, 150, 151, 154, 206], "init_method": [20, 152, 154, 263], "_run_train": [20, 182], "rpc_async": [20, 180, 182], "exit": [20, 158, 180, 181, 182, 204, 205, 213, 216, 251, 256, 258, 265], "conflict": [20, 160, 195], "remote_emb_modul": 20, "rref": [20, 180, 181, 206], "distributedoptim": [20, 181, 182, 206], "remote_paramet": 20, "cannnot": 20, "crossentropyloss": [20, 24, 40, 102, 107, 142, 174, 182, 189, 215, 248], "get_next_batch": [20, 180, 182], "jess": [21, 283], "cai": [21, 283], "seek": [21, 90, 96, 209, 283], "grain": [21, 37, 95, 139, 154, 188, 193, 225, 226, 240, 283], "2n": [21, 283], "degrad": [21, 80, 283], "sparsifi": [21, 132, 137, 176, 283], "answer": [21, 40, 96, 100, 107, 154, 159, 169, 184, 195, 196, 283], "tune": [21, 24, 40, 87, 105, 113, 123, 132, 135, 137, 138, 144, 147, 177, 229, 237, 240, 258, 260, 261, 267, 278, 281, 283], "recov": [21, 138, 139, 152, 163, 283], "nearli": [21, 113, 189, 226, 283], "f1": [21, 193, 283], "86": [21, 160, 177, 178, 182, 199, 214, 226, 283], "92": [21, 178, 214, 226, 283], "3x": [21, 68, 121, 202, 225, 241, 283], "beginn": [21, 38, 43, 49, 50, 52, 69, 75, 79, 82, 83, 84, 85, 89, 91, 97, 99, 101, 108, 111, 116, 119, 121, 123, 133, 137, 201, 233, 234, 235, 236, 283], "to_sparse_semi_structur": [21, 283], "motiv": [21, 80, 141, 160, 181, 262, 268, 275, 276, 279, 283], "affect": [21, 96, 100, 104, 105, 149, 172, 174, 241, 283], "swap": [21, 56, 107, 142, 172, 178, 199, 238, 267, 279, 283], "compress": [21, 96, 176, 274, 277, 281, 283], "arrang": [21, 121, 283], "drawback": [21, 112, 195, 207, 208, 283], "2020": [21, 283], "amper": [21, 139, 166, 171, 225, 283], "cutlass": [21, 278, 283], "cusparselt": [21, 283], "milder": [21, 283], "account": [21, 55, 113, 155, 169, 172, 184, 189, 199, 254, 281, 283], "retrain": [21, 283], "sweet": [21, 283], "spot": [21, 98, 102, 103, 145, 283], "2x": [21, 90, 137, 149, 169, 214, 283], "theoret": [21, 57, 172, 245, 274, 283], "granular": [21, 139, 160, 196, 231, 241, 258, 283], "fp16": [21, 139, 163, 267, 278, 283], "resnet": [21, 47, 48, 96, 143, 188, 241, 283], "imagenet": [21, 48, 56, 96, 128, 177, 283], "76": [21, 163, 178, 182, 199, 226, 283], "resnext": [21, 283], "101_32x8d": [21, 283], "79": [21, 160, 178, 226, 231, 283], "xception": [21, 283], "ssd": [21, 241, 283], "rn50": [21, 283], "coco2017": [21, 283], "bbap": [21, 283], "24": [21, 24, 160, 177, 178, 199, 214, 226, 283], "maskrcnn": [21, 283], "fairseq": [21, 283], "en": [21, 158, 184, 191, 283], "de": [21, 23, 184, 283], "wmt14": [21, 283], "bleu": [21, 283], "squad": [21, 283], "91": [21, 178, 182, 214, 226, 283], "workflow": [21, 24, 39, 87, 92, 93, 114, 137, 138, 196, 201, 277, 283], "perspect": [21, 109, 178, 258, 283], "subproblem": [21, 283], "bmatrix": [21, 110, 283], "handoff": [21, 283], "anticip": [21, 283], "area": [21, 96, 100, 134, 189, 198, 224, 267, 277, 283], "littl": [21, 57, 98, 105, 107, 113, 155, 178, 180, 182, 183, 186, 188, 283], "colab": [21, 23, 28, 39, 44, 53, 99, 102, 113, 137, 154, 155, 161, 178, 179, 191, 196], "pip": [21, 28, 55, 87, 96, 102, 115, 117, 162, 177, 179, 188, 191, 193, 198, 214, 216, 224, 226, 228, 231, 239, 242, 243, 244, 245, 252, 258, 265, 267, 281, 288], "panda": [21, 37, 56, 80, 191], "hug": [21, 160], "face": [21, 48, 56, 57, 80, 160, 255], "token": [21, 54, 112, 139, 142, 146, 174, 183, 184, 199, 241, 255, 283], "segment": [21, 137, 199, 267, 283], "text": [21, 37, 48, 57, 80, 90, 96, 106, 107, 109, 110, 112, 137, 139, 145, 146, 154, 167, 172, 178, 179, 184, 188, 191, 199, 222, 224, 255, 283], "wikipedia": [21, 158, 283], "articl": [21, 37, 283], "score": [21, 54, 96, 106, 110, 112, 120, 183, 184, 198, 199, 224, 255, 263, 283], "fair": [21, 105, 279, 283], "lowest": [21, 138, 176, 283], "l1": [21, 93, 176, 283], "ao": [21, 24, 262, 267, 281, 283], "satisfi": [21, 144, 241, 283, 285], "anytim": [21, 283], "pruner": [21, 283], "update_mask": [21, 283], "shot": [21, 180, 255, 283], "wouldn": [21, 112, 138, 155, 283], "squash_mask": [21, 283], "left": [21, 35, 47, 51, 54, 57, 68, 90, 95, 102, 103, 107, 112, 121, 122, 154, 162, 166, 178, 179, 181, 183, 188, 189, 222, 283], "quickstart": [21, 35, 36, 37, 38, 39, 40, 42, 44, 45, 137, 283], "28x": [21, 283], "amen": [21, 283], "spent": [21, 87, 183, 188, 226, 231, 245, 283], "delta": [21, 160, 161, 179, 226, 240, 283], "exact": [21, 105, 122, 148, 183, 195, 199, 204, 265, 283], "78": [21, 178, 226, 283], "53": [21, 37, 163, 178, 214, 231, 283], "44": [21, 160, 178, 182, 283], "09": [21, 54, 160, 178, 182, 214, 283], "93": [21, 120, 178, 182, 214, 226, 231, 283], "49": [21, 163, 178, 182, 226, 283], "15": [21, 28, 37, 49, 77, 80, 98, 100, 102, 128, 178, 189, 191, 198, 214, 226, 231, 237, 283], "54": [21, 163, 178, 226], "71x": 21, "35": [21, 37, 77, 102, 142, 163, 178, 214], "74": [21, 178, 182, 214, 226, 231], "23x": 21, "72": [21, 161, 177, 178, 226, 231], "71": [21, 24, 56, 102, 160, 178, 182], "59": [21, 161, 177, 178, 191, 226, 231], "41": [21, 138, 177, 178, 226, 231], "22x": 21, "286": [21, 163, 191, 283], "65": [21, 37, 56, 102, 182, 198, 199, 226], "247": [21, 182], "63": [21, 231], "14x": 21, "46": [21, 160, 163, 177, 178], "02x": 21, "ye": [21, 55, 169, 252], "47": [21, 77, 93, 161, 163, 178, 214, 226, 231], "68": [21, 56, 160, 178, 226], "18x": [21, 283], "36": [21, 177, 178, 214], "13x": 21, "159": [21, 52], "22": [21, 37, 160, 163, 178, 182, 214, 226], "142": [21, 178, 214], "23": [21, 160, 178, 182, 214, 226, 231, 240], "12x": [21, 199], "sparsesemistructuredtensor": [21, 283], "semi_structured_spars": [21, 22, 261], "00": [22, 37, 43, 52, 69, 75, 79, 91, 98, 101, 102, 111, 119, 120, 123, 160, 178, 182, 185, 191, 214, 231, 237, 247, 261, 267, 269, 284], "011": 22, "mem": [22, 43, 52, 69, 75, 79, 87, 91, 101, 111, 119, 120, 123, 185, 231, 237, 247, 261, 284], "mb": [22, 24, 43, 52, 69, 75, 79, 91, 101, 111, 119, 120, 123, 138, 185, 231, 237, 247, 259, 261, 284], "torchrl": [22, 134, 137, 155, 162, 185, 261], "ddpg": [22, 134, 137, 261], "pendulum": [22, 134, 137, 178, 261], "scipi": [22, 48, 136, 137, 149, 193, 261], "acceler": [22, 36, 41, 44, 53, 54, 55, 62, 65, 67, 80, 105, 117, 121, 128, 137, 145, 163, 172, 185, 200, 202, 205, 214, 215, 216, 241, 261, 279, 284, 289], "bert": [22, 100, 137, 138, 261, 281, 289], "semi": [22, 134, 137, 199, 261, 289], "sparsiti": [22, 112, 137, 176, 199, 261, 274, 276, 284, 289], "000": [22, 24, 37, 43, 69, 75, 101, 114, 119, 123, 144, 162, 163, 185, 189, 191, 237, 261, 284], "supervis": [22, 107, 134, 137, 186, 191, 261], "usb": [22, 134, 137, 177, 261], "usb_semisup_learn": [22, 28, 261], "embeddingplann": [23, 137], "conda": [23, 87, 96, 102, 154, 160, 224, 239, 240, 258, 265, 267, 289], "cudatoolkit": 23, "sudo": [23, 188, 288], "rm": [23, 206], "miniconda3": [23, 240], "py37_4": 23, "sh": [23, 152, 222, 288], "anaconda": [23, 87, 96, 154, 239], "chmod": 23, "fbgemm": [23, 24, 196, 262], "ipython": [23, 113, 120], "cp": [23, 263, 288], "restart": [23, 96, 102, 151, 179], "newli": [23, 128, 154], "python37": 23, "dynload": 23, "enviro": 23, "spmd": [23, 142, 208], "mimic": [23, 24, 105, 267, 274], "launcher": 23, "embeddingbagcollect": 23, "bag": [23, 37, 39, 102, 189, 196], "ebc": [23, 196], "4096": [23, 196, 214], "parameterconstraint": 23, "placement": [23, 140, 258, 281], "evenli": [23, 95], "intra": [23, 139, 142, 210], "interconnect": [23, 228], "nvlink": [23, 142, 206], "data_parallel": 23, "planner": 23, "embedding_typ": 23, "embeddingcomputekernel": 23, "shardingtyp": 23, "large_table_cnt": 23, "small_table_cnt": 23, "large_t": 23, "embeddingbagconfig": 23, "large_table_": 23, "embedding_dim": [23, 100], "num_embed": 23, "feature_nam": 23, "large_table_feature_": 23, "poolingtyp": 23, "small_tabl": 23, "small_table_": 23, "small_table_feature_": 23, "gen_constraint": 23, "sharding_typ": 23, "table_wis": 23, "large_table_constraint": 23, "small_table_constraint": 23, "mimick": 23, "single_rank_execut": 23, "embeddingbagcollectionshard": [23, 196], "model_parallel": 23, "embeddingshardingplann": 23, "topologi": [23, 196, 208, 210, 215, 222], "moduleshard": 23, "shardingenv": 23, "init_distributed_single_host": 23, "pyre": 23, "fixm": 23, "set_devic": [23, 58, 60, 138, 139, 152, 207, 208, 210, 263, 268], "compute_devic": 23, "pg": [23, 265], "sharder": [23, 196], "shardingplan": 23, "collective_plan": 23, "sharded_model": 23, "from_process_group": 23, "spmd_sharing_simul": 23, "get_context": [23, 154], "exitcod": 23, "factor": [23, 100, 128, 172, 179, 180, 193, 196, 207, 267], "medium": [23, 141, 198, 241], "large_table_0": 23, "parametershard": 23, "compute_kernel": 23, "batched_fus": 23, "sharding_spec": 23, "enumerableshardingspec": 23, "shardmetadata": 23, "shard_offset": 23, "shard_siz": 23, "large_table_1": 23, "small_table_0": 23, "small_table_1": 23, "finer": [23, 37, 231], "halv": [23, 120], "row_wis": 23, "512": [23, 139, 161, 174, 195, 202, 215, 226, 231, 283], "imbal": [23, 241], "vertic": 23, "column_wis": 23, "unfortu": 23, "futur": [23, 54, 113, 118, 120, 138, 158, 162, 169, 175, 179, 180, 181, 182, 207, 214, 243, 253, 262, 277], "batched_dens": 23, "raghuraman": 24, "krishnamoorthi": 24, "seth": [24, 39], "weidman": 24, "jerri": 24, "zhang": [24, 207, 208, 210], "decreas": [24, 41, 54, 80, 88, 105, 113, 142, 145, 196, 277], "mobilenetv2": 24, "np": [24, 56, 77, 102, 106, 113, 121, 177, 182, 189, 191, 240, 255, 275, 283], "dataload": [24, 35, 36, 38, 39, 40, 41, 42, 44, 45, 48, 49, 57, 60, 80, 93, 102, 105, 123, 138, 139, 145, 154, 172, 174, 181, 188, 189, 191, 215, 217, 229, 241, 248, 261, 281], "filterwarn": [24, 178, 191, 277], "ignor": [24, 56, 105, 110, 112, 122, 175, 178, 191, 195, 198, 225, 231, 242, 253, 262, 275, 276, 277, 279], "deprecationwarn": [24, 178], "seed": [24, 57, 80, 98, 105, 138, 139, 154, 179, 180, 182], "manual_se": [24, 103, 138, 139, 154, 161, 179, 180, 259, 263, 283], "191009": 24, "floatfunct": 24, "quantstub": 24, "dequantstub": 24, "relu6": 24, "_make_divis": 24, "divisor": 24, "min_valu": 24, "tf": [24, 102], "divis": [24, 103, 195], "tensorflow": [24, 102, 106, 108, 121], "blob": [24, 118, 138, 188], "slim": [24, 121], "mobilenet": [24, 137, 177], "new_v": 24, "round": [24, 118, 139, 180, 226, 240], "convbnrelu": 24, "in_plan": 24, "out_plan": 24, "kernel_s": [24, 51, 113, 138, 262], "momentum": [24, 47, 48, 70, 74, 93, 98, 102, 104, 113, 121, 122, 148, 154, 180, 189, 196, 215, 243, 244, 248, 262], "inplac": [24, 138, 283], "invertedresidu": 24, "inp": [24, 181, 195, 209, 227, 278], "oup": 24, "expand_ratio": 24, "hidden_dim": [24, 100], "use_res_connect": 24, "pw": 24, "dw": 24, "conv": [24, 57, 100, 148, 163, 181, 192, 222, 231], "skip_add": 24, "num_class": [24, 180, 189, 191, 198], "width_mult": 24, "inverted_residual_set": 24, "round_nearest": 24, "v2": [24, 105, 125, 155, 177, 192, 196, 202, 207, 213, 277, 282], "width": [24, 47, 48, 51, 100, 103, 144, 166, 191, 192, 198, 255], "input_channel": 24, "last_channel": 24, "1280": [24, 198], "96": [24, 160, 178, 182, 214], "160": [24, 182, 191, 226, 231], "320": 24, "valueerror": [24, 255], "invert": [24, 134, 137, 178, 275], "residu": [24, 142], "output_channel": 24, "quant": [24, 262], "dequant": [24, 262, 267], "isinst": [24, 140, 268, 283], "kaiming_normal_": 24, "fan_out": 24, "zeros_": 24, "elif": [24, 174], "ones_": 24, "normal_": 24, "bn": [24, 148, 192, 262], "numer": [24, 44, 54, 77, 78, 103, 105, 106, 115, 121, 140, 144, 178, 225, 241, 263, 283], "fuse_model": 24, "is_qat": [24, 262], "fuse_modul": 24, "fuse_modules_qat": 24, "averagemet": 24, "fmt": 24, "avg": [24, 214, 231], "__str__": [24, 196], "fmtstr": 24, "__dict__": [24, 238, 281], "topk": 24, "maxk": 24, "pred": [24, 113, 138, 142, 181, 189], "correct_k": 24, "mul_": 24, "criterion": [24, 51, 102, 182, 184, 189, 215, 248], "neval_batch": 24, "top1": 24, "acc": [24, 191], "2f": [24, 138, 177, 180, 182], "top5": 24, "cnt": 24, "acc1": 24, "acc5": 24, "load_model": 24, "model_fil": 24, "state_dict": [24, 42, 54, 58, 60, 93, 138, 139, 140, 152, 176, 193, 207, 208, 215, 225, 228, 229, 237, 238, 242, 260, 261], "weights_onli": [24, 42, 122, 140, 152, 191], "load_state_dict": [24, 42, 58, 93, 104, 122, 140, 152, 191, 207, 208, 225, 229, 237, 242, 261], "print_size_of_model": 24, "getsiz": 24, "data_path": [24, 93, 113], "prepare_data_load": 24, "randomresizedcrop": [24, 56], "randomhorizontalflip": [24, 56], "totensor": [24, 37, 56, 98, 102, 138, 154, 177, 181, 189, 191, 215, 248, 288], "dataset_test": 24, "centercrop": 24, "train_sampl": 24, "randomsampl": 24, "test_sampl": 24, "sequentialsampl": 24, "train_batch_s": 24, "data_loader_test": 24, "eval_batch_s": 24, "pre": [24, 37, 106, 134, 137, 139, 142, 154, 177, 191, 196, 198, 199, 208, 216, 250, 258, 267, 278], "saved_model_dir": 24, "float_model_fil": 24, "mobilenet_pretrained_float": 24, "scripted_float_model_fil": 24, "mobilenet_quantization_script": 24, "scripted_quantized_model_fil": 24, "mobilenet_quantization_scripted_quant": 24, "float_model": [24, 281], "fusion": [24, 87, 160, 196, 215, 241, 247, 256, 260, 261, 267, 278], "baselin": [24, 28, 96, 105, 191, 216, 226, 240, 267, 283], "un": [24, 103, 184], "num_eval_batch": 24, "sophist": [24, 121, 178], "num_calibration_batch": 24, "mymodel": [24, 262], "estim": [24, 51, 56, 57, 100, 144, 178, 179, 184, 196, 226, 245, 267], "qconfig": [24, 216, 262], "default_qconfig": 24, "calibr": [24, 172, 216, 262, 281], "56": [24, 163, 177, 178, 226, 231, 258, 283], "4x": [24, 139], "x86": [24, 202, 262, 278], "basi": [24, 139], "histogram": [24, 239], "per_channel_quantized_model": 24, "get_default_qconfig": 24, "67": [24, 120, 160, 214, 262], "qat": [24, 262], "int8": [24, 177, 202, 216, 267, 278], "train_one_epoch": 24, "ntrain_batch": 24, "avgloss": 24, "5f": 24, "start_tim": 24, "global_avg": 24, "qat_model": 24, "get_default_qat_qconfig": 24, "prepare_qat": 24, "freez": [24, 47, 128, 216], "num_train_batch": 24, "nepoch": 24, "disable_observ": 24, "intrins": [24, 262], "freeze_bn_stat": 24, "quantized_model": [24, 281], "confirm": [24, 93, 96, 113, 114, 139, 161, 180], "allud": [24, 80], "run_benchmark": 24, "img_load": 24, "elaps": [24, 138, 184], "num_batch": [24, 154], "enumer": [24, 93, 102, 104, 138, 140, 142, 177, 178, 181, 188, 189, 215, 248, 283], "num_imag": 24, "0f": 24, "macbook": [24, 184], "pro": [24, 99], "61": [24, 120, 163, 178, 214, 283], "welcom": 24, "hao": 28, "chen": [28, 195], "unifi": [28, 137, 148, 209, 224, 255], "ssl": 28, "modular": [28, 37, 122, 193, 243], "fixmatch": 28, "defixmatch": 28, "vision": [28, 41, 48, 56, 96, 100, 123, 134, 137, 163, 169, 224, 255, 261], "speech": [28, 80, 100, 106, 108, 112, 137, 146, 241], "light": [28, 57, 98, 102, 103, 148, 224], "vit": [28, 255], "famou": [28, 80], "strong": [28, 106, 195, 255, 277], "unlabel": [28, 103], "confid": [28, 57, 96, 98, 104, 107, 144, 178, 179, 189, 225], "threshold": [28, 54, 87, 144, 178, 182, 191, 214, 241], "absorb": 28, "gaussian": [28, 51, 57, 144, 178], "overcom": [28, 114], "quantiti": [28, 105, 132, 137, 142, 161, 166, 171], "qualiti": [28, 162, 184], "trade": [28, 144, 169, 278], "afford": 28, "cv": [28, 279], "nlp": [28, 98, 100, 107, 110, 111, 112, 125, 137, 185, 225, 241, 261, 279], "audio": [28, 37, 48, 137, 157, 187, 190], "semilearn": 28, "get_dataset": 28, "get_data_load": 28, "weak": 28, "get_net_build": 28, "get_algorithm": 28, "get_config": 28, "hyper": [28, 183, 258], "87": [28, 120, 182, 214, 226, 278], "lb_imb_ratio": 28, "ulb_imb_ratio": 28, "microsoft": [28, 39, 117, 118, 188, 269], "kihyuk": 28, "sohn": 28, "et": [28, 54, 57, 80, 154, 176, 184], "al": [28, 54, 57, 80, 176, 184], "yidong": 28, "audio_data_augmentation_tutori": [29, 31], "html": [29, 30, 31, 32, 33, 38, 49, 50, 54, 62, 67, 80, 81, 82, 83, 84, 85, 89, 97, 105, 108, 116, 121, 125, 128, 133, 157, 159, 167, 187, 190, 191, 194, 195, 196, 201, 225, 229, 230, 233, 234, 235, 236, 270, 273, 275, 277, 286], "audio_datasets_tutori": 30, "audio_feature_extractions_tutori": 32, "audio_io_tutori": 33, "frac": [35, 47, 68, 90, 95, 106, 107, 109, 112, 121, 143, 149, 154, 178, 179, 199], "partial": [35, 47, 93, 95, 109, 122, 138, 139, 140, 142, 143, 147, 155, 161, 215, 242, 260, 263], "leaf": [35, 47, 95, 193], "retain_graph": [35, 147], "surround": [35, 172], "mark": [35, 54, 142, 147, 163, 179, 180, 195, 222, 276], "frozen": [35, 47, 140, 162, 278], "acycl": [35, 47], "dag": 35, "chain": [35, 47, 95, 103, 107, 108, 140, 148, 160, 180, 276], "accumul": [35, 47, 51, 54, 57, 95, 98, 109, 149, 162, 169, 179, 180, 181, 182, 225, 244], "vec": [35, 47, 95, 161, 278], "langl": 35, "x_1": [35, 109, 166], "x_n": [35, 57], "rangl": 35, "y_1": [35, 109], "y_m": 35, "j": [35, 47, 80, 95, 102, 105, 106, 110, 140, 184, 265], "ccc": [35, 47, 95], "y_": [35, 47, 95, 106], "x_": [35, 47, 95], "cdot": [35, 47, 57, 95, 112, 143], "vdot": [35, 47, 95], "ddot": [35, 47, 95], "v_1": 35, "v_m": 35, "life": [35, 105, 145, 146, 207], "autogradqs_tutori": [35, 38, 43, 82, 261], "compris": [36, 37, 57, 122], "fashionmnist": [36, 37, 39, 41, 45, 102, 189], "mtia": [36, 41, 44, 67, 80, 103, 121, 128], "neuralnetwork": 36, "minibatch": [36, 37, 102, 113, 145, 156, 171, 174], "28x28": [36, 113, 189, 228], "784": [36, 102, 113, 156, 189], "nonlinear": 36, "wide": [36, 65, 95, 100, 113, 141, 142, 145, 146, 154, 175, 184, 224, 241, 267], "phenomena": 36, "seq_modul": 36, "logit": [36, 40, 105, 214], "infti": [36, 179], "parameter": [36, 283], "preview": 36, "buildmodel_tutori": [36, 38, 43, 261], "messi": 37, "primit": [37, 41, 121, 137, 142, 161, 172, 196, 199, 202, 265], "fashion": [37, 54, 102, 104, 117, 139, 142, 144, 181, 186, 189, 191, 193, 196, 215], "zalando": 37, "60": [37, 115, 139, 145, 146, 163, 177, 178, 182, 184, 189, 195, 214, 231, 277], "grayscal": [37, 155, 162], "internet": [37, 177], "target_transform": [37, 41, 45], "training_data": [37, 110], "test_data": 37, "26": [37, 102, 160, 162, 163, 177, 178, 182, 214], "4m": [37, 102], "5k": [37, 102], "362kb": 37, "197k": [37, 102], "575kb": 37, "819k": [37, 102], "88mb": 37, "28m": [37, 267], "03": [37, 98, 102, 178, 181, 182, 191, 214, 240, 263], "48mb": [37, 102], "27m": 37, "1mb": 37, "58": [37, 145, 163, 178, 283], "81": [37, 160, 214], "21": [37, 77, 102, 120, 177, 178, 214, 226, 231, 240], "3m": 37, "5mb": [37, 102], "3mb": 37, "29": [37, 102, 177, 178, 182, 226], "326kb": 37, "42m": [37, 102], "363kb": [37, 102], "229k": [37, 102], "06": [37, 102, 178, 214], "683kb": [37, 102], "918k": [37, 102], "11mb": [37, 102], "82": [37, 177, 178, 214, 231], "60m": 37, "95mb": 37, "10mb": [37, 102], "15k": [37, 102], "labels_map": 37, "shirt": [37, 39, 102, 189], "trouser": [37, 39, 102, 189], "pullov": [37, 39, 102, 189], "dress": [37, 39, 102, 189], "coat": [37, 39, 102, 189], "sandal": [37, 39, 102, 189], "sneaker": [37, 39, 102, 189], "ankl": [37, 39, 102, 189], "boot": [37, 39, 102, 177, 189], "figsiz": [37, 178, 189], "col": 37, "sample_idx": [37, 283], "randint": [37, 56, 57, 140, 174, 215], "add_subplot": [37, 189], "titl": [37, 80, 145, 172, 178, 184, 191], "img_dir": 37, "csv": [37, 54, 56, 139], "annotations_fil": 37, "pd": [37, 191], "io": [37, 54, 56, 102, 137, 180, 183, 191], "decode_imag": 37, "customimagedataset": 37, "img_label": 37, "read_csv": 37, "img_path": 37, "iloc": 37, "tshirt1": 37, "tshirt2": 37, "ankleboot999": 37, "read_imag": 37, "reshuffl": 37, "overfit": [37, 98, 113, 122, 146], "train_dataload": 37, "shuffl": [37, 41, 56, 60, 98, 102, 104, 113, 138, 139, 154, 177, 181, 188, 189, 263], "test_dataload": 37, "train_featur": 37, "train_label": 37, "956": [37, 43, 261], "data_tutori": [37, 38, 43, 261], "intro": [38, 39, 43, 60, 107, 108, 133, 155, 178, 189, 205, 213, 261], "quickstart_tutori": [38, 41, 43, 261], "tensorqs_tutori": [38, 43, 44, 85, 261], "tensor_tutori": [38, 50, 52, 53, 62, 261], "transforms_tutori": [38, 43, 45, 261], "autograd_tutori": [38, 47, 50, 52, 62, 261], "optimization_tutori": [38, 40, 43, 261], "saveloadrun_tutori": [38, 42, 43, 261], "sphx_glr_beginner_basics_autogradqs_tutori": [38, 43, 261], "sphx_glr_beginner_basics_buildmodel_tutori": [38, 43, 261], "sphx_glr_beginner_basics_intro": [38, 43, 261], "sphx_glr_beginner_basics_saveloadrun_tutori": [38, 43, 261], "sphx_glr_beginner_basics_transforms_tutori": [38, 43, 261], "sphx_glr_beginner_basics_optimization_tutori": [38, 43, 261], "sphx_glr_beginner_basics_quickstart_tutori": [38, 43, 261], "sphx_glr_beginner_basics_tensorqs_tutori": [38, 43, 261], "sphx_glr_beginner_basics_data_tutori": [38, 43, 261], "suraj": [39, 58, 59, 60, 61, 120, 150, 151, 162], "subramanian": [39, 58, 59, 60, 61, 120, 150, 151, 162], "juarez": 39, "cassi": 39, "breviu": 39, "dmitri": 39, "soshnikov": 39, "ari": 39, "bornstein": 39, "ml": [39, 80, 103, 105, 133, 137, 144, 196, 213, 214], "belong": [39, 145, 196], "cloud": [39, 59, 99, 113, 115, 258], "favorit": [39, 99, 154, 159], "id": [39, 87, 99, 147, 152, 180, 181, 182, 191, 195, 196, 207, 208, 258, 283], "walkthrough": [40, 47, 53, 87, 120], "video": [40, 47, 48, 58, 60, 61, 95, 96, 98, 100, 102, 103, 104, 125, 132, 133, 134, 135, 137, 150, 151, 188, 201], "3blue1brown": [40, 47], "unpredict": [40, 95, 152], "jump": [40, 80, 110, 114, 115, 117, 118, 162, 250], "untrain": 40, "dissimilar": [40, 103, 112], "regress": [40, 113, 186, 226, 239], "nllloss": [40, 107], "classif": [40, 48, 57, 80, 93, 96, 98, 103, 104, 105, 107, 128, 134, 137, 138, 146, 177, 186, 198, 199, 244, 288], "logsoftmax": 40, "deposit": [40, 47], "train_loop": 40, "test_loop": 40, "warmstart": [40, 229, 237, 260, 261], "torchtext": [41, 55, 98, 104, 137], "torchaudio": [41, 55, 98, 104, 134, 137, 139, 177, 188, 267], "cifar": [41, 48, 98, 189], "coco": [41, 198], "conduct": [41, 96, 160, 175, 267], "unpickl": [42, 122, 265], "inferenc": 42, "fail": [42, 95, 103, 114, 122, 160, 172, 177, 179, 183, 193, 195, 225, 255, 265, 282, 289], "inconsist": [42, 122, 160], "legaci": [42, 115, 141], "pickl": [42, 93, 113, 122, 169, 226, 265], "checkpoint": [42, 54, 93, 140, 150, 169, 174, 215, 225, 229, 237, 243, 260, 261, 266, 267], "tip": [42, 57, 99, 112, 189, 229, 237, 260, 261], "971": 43, "ndarrai": [44, 45, 53, 103, 191], "elimin": [44, 120, 148, 156, 160, 161, 177, 195, 199, 279, 282], "overridden": [44, 53, 155, 230], "1200": [44, 226], "manipul": [44, 45, 98, 102, 121, 140, 159, 169, 200], "breez": [44, 53], "subtli": [44, 53], "y1": [44, 198], "y2": 44, "y3": 44, "wise": [44, 53, 80, 103, 107, 142, 154, 160, 163, 166, 195, 196, 241, 254], "z1": [44, 160], "z2": 44, "z3": 44, "aggreg": [44, 47, 98, 120, 162, 191, 231, 275], "operand": [44, 95, 195], "denot": [44, 107, 110, 196, 274, 275, 279], "suffix": [44, 53, 87, 160], "t_": [44, 53], "problemat": [44, 53, 160, 170, 241], "commonli": [45, 54, 74, 93, 100, 105, 121, 174, 177, 184, 188, 232, 241, 245, 262], "hot": [45, 54, 80, 100, 112, 145, 146, 155, 184], "floattensor": [45, 103], "intens": [45, 90, 160, 172, 202, 258], "scatter_": [45, 180], "prop": 47, "proportion": [47, 169], "travers": [47, 182], "resnet18": [47, 163, 177, 188, 191, 216, 254, 281], "height": [47, 51, 100, 103, 191, 192, 198, 222, 255], "3a": [47, 177], "9a": 47, "dq": [47, 216], "bf": 47, "external_grad": 47, "blue": [47, 139, 142, 222], "finetun": [47, 134, 137, 143, 169, 185, 261], "unfrozen": 47, "exclusionari": 47, "revers": [47, 54, 95, 140, 158, 166, 170, 177, 184, 196], "autodiff": [47, 132, 137, 161], "pillow": [48, 98], "opencv": 48, "librosa": 48, "cython": 48, "nltk": 48, "spaci": 48, "viz": [48, 96], "huge": [48, 107, 112, 121, 142, 152, 155], "airplan": [48, 98, 105], "automobil": [48, 98, 105], "bird": [48, 98], "deer": [48, 98], "dog": [48, 98, 105, 198, 224], "frog": [48, 98], "hors": [48, 98], "truck": [48, 98, 105], "3x32x32": 48, "32x32": [48, 51, 98, 105, 115, 189], "extrem": [48, 112, 163, 196, 200], "pilimag": 48, "brokenpipeerror": 48, "fun": [48, 54, 114, 115, 117, 118, 178], "entropi": [48, 57, 98, 100, 104, 142, 244], "learnt": 48, "truth": [48, 80, 115, 198, 289], "okai": 48, "wasn": [48, 106, 109, 195], "energi": [48, 54], "chanc": [48, 54, 105, 162], "hmmm": 48, "plai": [48, 54, 57, 105, 107, 134, 137, 178, 185, 258, 261], "chat": [48, 54, 184], "cifar10_tutori": [48, 50, 52, 62, 261], "sung": 49, "kim": 49, "jenni": 49, "kang": 49, "mytensor": 49, "my_tensor": [49, 122], "parallelli": 49, "getitem": 49, "demo": [49, 137, 175, 188, 214], "cnn": [49, 105, 134, 137, 166, 170, 171, 186, 191, 198, 215], "capsul": 49, "monitor": [49, 113, 154], "output_s": [49, 265], "former_torchi": 49, "parallelism_tutori": 49, "data_parallel_tutori": [49, 50, 52, 84, 261], "neural_networks_tutori": [50, 51, 52, 62, 261], "gentl": [50, 52, 61, 62, 133, 200, 261], "glimps": 51, "convnet": [51, 96, 155, 162, 181], "learning_r": [51, 77, 105, 121], "5x5": [51, 100], "affin": [51, 110, 148, 186, 241, 258, 262], "wx": 51, "fc1": [51, 102, 122, 138, 156, 181, 189, 243], "fc2": [51, 102, 122, 138, 181, 189, 243], "84": [51, 56, 102, 120, 122, 162, 178, 189, 243], "fc3": [51, 102, 122, 189, 243], "c1": [51, 98, 160], "subsampl": 51, "s2": [51, 98, 195, 277], "2x2": [51, 100], "c3": [51, 98], "s4": [51, 98, 195], "f5": [51, 98], "f6": [51, 98], "in_featur": [51, 138, 232, 262, 278, 283, 285], "out_featur": [51, 138, 262, 278, 283], "lenet": [51, 80, 98, 102, 104, 176], "0336": 51, "0986": 51, "0059": 51, "0558": 51, "0768": 51, "0805": 51, "1190": [51, 161], "0658": 51, "0204": 51, "addmmbackward0": 51, "mini": [51, 54, 57, 102, 110, 113, 171, 177, 189], "4d": [51, 163], "nsampl": 51, "nchannel": 51, "least": [51, 80, 103, 122, 144, 146, 152, 162, 172, 177, 184, 195, 208, 226, 259], "3324": 51, "mselossbackward0": 51, "next_funct": [51, 95], "0x7f8669e03dc0": 51, "0x7f866c32da50": 51, "accumulategrad": 51, "0x7f8669cddab0": 51, "clear": [51, 56, 80, 95, 106, 107, 112, 143, 147, 160, 172, 182, 191, 192, 226, 268, 276], "0039": 51, "0053": 51, "0096": 51, "0094": 51, "0140": 51, "0011": 51, "sub_": 51, "nesterov": [51, 122], "150": [51, 52, 139, 182, 261], "blitz": [52, 84, 115, 145, 146, 184, 189, 261], "matthew": [54, 92, 122], "inkawhich": [54, 57, 80, 90, 92, 122], "movi": [54, 55, 96], "cornel": [54, 55], "dialog": [54, 55], "corpu": [54, 55], "artifici": [54, 105, 228], "intellig": 54, "servic": [54, 177, 215, 245, 258], "onlin": [54, 155, 162, 178, 181], "helpdesk": 54, "bot": 54, "predefin": [54, 105, 113, 155, 216, 241], "restrict": [54, 90, 154, 188, 193, 195, 262, 287], "compani": 54, "IT": 54, "teach": [54, 57, 105, 184], "human": [54, 80, 96, 146, 162, 184, 191, 265], "boom": 54, "hello": [54, 107, 169], "am": [54, 109, 146, 184], "hospit": 54, "lawyer": 54, "friend": [54, 169], "arrest": 54, "kid": 54, "sorri": 54, "san": 54, "francisco": [54, 113], "goodby": 54, "luong": [54, 184], "jointli": [54, 184], "acknowledg": [54, 154], "borrow": [54, 182], "yuan": 54, "kuei": 54, "wu": [54, 141, 263, 268, 278], "ywk991112": 54, "sean": [54, 145, 146, 184], "robertson": [54, 145, 146, 184], "spro": 54, "floydhub": 54, "textutil": 54, "__": [54, 67, 80, 105, 121, 128, 191, 196], "reformat": 54, "rich": [54, 222], "charact": [54, 112, 137, 150, 167, 178, 184, 185, 261], "220": [54, 182], "579": [54, 163], "exchang": [54, 115, 117, 139, 154, 184, 188], "292": [54, 93], "035": 54, "617": 54, "713": [54, 98], "utter": [54, 55], "divers": 54, "variat": [54, 104, 113, 149, 199, 226, 240, 274], "formal": [54, 208, 274], "sentiment": 54, "datafil": 54, "tab": [54, 102, 104, 184, 189, 222], "sentenc": [54, 100, 106, 107, 110, 112, 146, 154, 184, 199, 279], "jsonl": [54, 55], "loadlinesandconvers": 54, "lineid": 54, "characterid": 54, "conversationid": 54, "movieid": 54, "extractsentencepair": 54, "formatted_movie_lin": 54, "unescap": 54, "delimit": 54, "busi": [54, 146, 258], "vocabulari": [54, 98, 100, 112, 142, 145, 241, 279], "implicit": [54, 95, 140, 195, 222, 241], "discret": [54, 178, 215], "voc": 54, "addword": 54, "addsent": 54, "infrequ": 54, "unicod": [54, 145, 146, 184], "ascii": [54, 112, 145, 146, 184], "unicodetoascii": 54, "letter": [54, 145, 146, 184], "lowercas": [54, 113, 184], "punctuat": [54, 184], "normalizestr": 54, "aid": [54, 122, 196, 230], "max_length": [54, 283], "filterpair": 54, "stackoverflow": [54, 145, 146, 184, 226], "518232": [54, 145, 146, 184], "2809427": [54, 145, 146, 184], "tactic": 54, "benefici": [54, 100, 133, 179, 241, 244, 258, 278, 282], "soften": 54, "difficulti": [54, 178, 200], "approxim": [54, 96, 139, 148, 159, 162, 166, 176, 179, 214, 228, 241], "min_count": 54, "massag": 54, "accommod": 54, "shorter": [54, 56, 113, 184, 188, 274], "eos_token": 54, "english": [54, 107, 110, 145, 167, 184], "indexesfromsent": 54, "zeropad": 54, "inputvar": 54, "outputvar": 54, "pad_token": 54, "batch2traindata": 54, "bunch": [54, 145, 146, 222, 254], "aforement": [54, 87, 105, 199, 216, 250], "brain": 54, "sutskev": 54, "discov": [54, 118, 154, 181, 199, 282], "accomplish": [54, 57, 145, 154, 166, 210, 226, 240, 285], "jeddy92": 54, "ts_seq2seq_intro": 54, "invent": [54, 57, 178], "cho": 54, "2014": [54, 57], "bidirect": [54, 155], "gru": [54, 100, 145, 146, 184], "colah": 54, "2015": [54, 105], "fp": [54, 93, 135, 166], "hidden_s": 54, "unpack": [54, 288], "pack_padded_sequ": 54, "pad_packed_sequ": 54, "input_seq": 54, "input_length": [54, 139], "n_layer": [54, 174], "num_direct": 54, "sole": [54, 188], "combat": [54, 112], "bahdanau": [54, 184], "groundwork": 54, "h_t": [54, 110], "bar": [54, 87, 181, 191, 193, 222, 285], "attn": [54, 184], "softmax": [54, 100, 105, 110, 112, 113, 145, 177, 180, 182, 189, 199, 214, 279], "submodul": [54, 90, 100, 114, 140, 170, 183, 282, 285], "unidirect": 54, "input_step": 54, "last_hidden": 54, "encoder_output": 54, "num_word": 54, "masknllloss": 54, "clever": [54, 107], "teacher": [54, 105, 132, 137, 184], "teacher_forcing_ratio": [54, 184], "instabl": [54, 184], "craft": [54, 80, 112, 146], "explod": [54, 100, 200], "essenc": [54, 109], "nan": [54, 275], "overshoot": 54, "steep": 54, "cliff": 54, "goodfellow": [54, 57, 80], "2016": 54, "www": [54, 184, 198], "deeplearningbook": 54, "sos_token": 54, "realiti": [54, 57, 80, 109, 113, 183, 240], "tie": 54, "trainit": [54, 184], "n_iter": 54, "explanatori": 54, "lift": [54, 287], "tarbal": 54, "NOT": [54, 90, 122, 147, 149, 150, 152, 169], "decoder_output": 54, "greedysearchdecod": 54, "searcher": 54, "evaluateinput": 54, "press": [54, 57], "gracefulli": [54, 58, 181, 208], "prompt": [54, 55, 255, 267], "regardless": [54, 103, 104, 161, 172, 181, 192], "attn_model": 54, "concat": [54, 109], "loadfilenam": 54, "save_dir": [54, 191], "model_nam": [54, 139, 215, 216, 281, 283], "corpus_nam": [54, 55], "encoder_n_lay": 54, "decoder_n_lay": 54, "_checkpoint": [54, 139], "tar": [54, 122], "checkpoint_it": 54, "folk": 54, "congratul": [54, 118, 143, 145, 196, 228, 242, 243, 244], "tailor": [54, 154, 172, 196, 258], "cool": [54, 57, 169, 171, 287], "003": [54, 57, 90, 91, 98, 101, 104, 105, 107, 109, 111, 123, 128, 158, 160, 162, 172, 183, 185, 193, 195, 199, 261], "chatbot_tutori": [54, 123, 261], "wen": [55, 193, 195, 253], "uninstal": 55, "reinstal": 55, "torchdata": 55, "chatbot": [55, 123, 261], "browser": [55, 102, 104, 115, 188, 209], "click": [55, 102, 113, 115, 188, 189, 196, 222], "subfold": 55, "visit": [55, 200, 267], "in_": 55, "_colab": 55, "_name": 55, "mount": [55, 265], "gdrive": 55, "upload": [55, 209], "button": [55, 57, 115, 188, 222], "rerun": [55, 147, 169], "evolv": [55, 160, 166], "drop": [55, 100, 102, 115, 150, 169, 178, 182, 214, 267], "t4": 55, "sasank": [56, 128], "chilamkurthi": [56, 128], "preprocess": [56, 105, 113, 137, 145, 184, 191], "scikit": 56, "facial": 56, "pose": [56, 209, 210], "landmark": 56, "dlib": 56, "tag": [56, 100, 108, 112, 195, 230, 239, 266], "image_nam": 56, "part_0_x": 56, "part_0_i": 56, "part_1_x": 56, "part_1_i": 56, "part_2_x": 56, "part_67_x": 56, "part_67_i": 56, "0805personali01": 56, "83": [56, 178, 214, 240], "98": [56, 160, 178, 182, 214], "134": 56, "1084239450_e76e00b7e7": 56, "70": [56, 163, 178, 182, 226, 283], "236": 56, "257": [56, 226], "312": [56, 163, 255], "person": [56, 196, 198], "img_nam": 56, "__len__": [56, 113, 145, 154, 198], "__getitem__": [56, 113, 145, 154, 198], "randomcrop": 56, "crop": [56, 98, 144, 186, 198], "ax": [56, 107, 110, 135, 137, 184, 185, 189, 261], "tsfm": 56, "transformed_sampl": 56, "safer": [56, 226], "stick": [56, 154, 163], "lose": [56, 58, 103, 105, 162], "collate_fn": 56, "indent": [56, 226], "imagefold": [56, 57, 98], "ant": [56, 128], "xxy": 56, "jpeg": 56, "xxz": 56, "bee": [56, 128], "nsdf3": 56, "asd932_": 56, "data_transform": 56, "hymenoptera_dataset": 56, "hymenoptera_data": 56, "dataset_load": 56, "data_loading_tutori": [56, 123, 261], "nathan": [57, 80, 90, 92], "celebr": [57, 134, 137], "pictur": [57, 80, 140, 142, 184], "thorough": 57, "shed": [57, 224], "spend": [57, 87, 169, 226, 231], "sake": [57, 155, 176, 179, 242, 243], "ian": 57, "constantli": [57, 80, 179], "outsmart": 57, "equilibrium": 57, "perfect": [57, 95, 152, 201, 276], "notat": [57, 80], "chw": [57, 177], "3x64x64": 57, "thought": [57, 88, 240, 275], "latent": [57, 112], "p_": 57, "p_g": 57, "minimax": 57, "logd": 57, "underset": 57, "mathbb": [57, 90, 166, 179], "sim": 57, "radford": 57, "unsupervis": 57, "drawn": [57, 113, 178], "rgb": [57, 98, 105, 162, 177, 191], "volum": [57, 138], "inlin": [57, 95, 98, 102, 104, 147, 160, 192, 245, 274, 278], "manualse": 57, "10000": [57, 98, 102, 174, 178, 182, 226, 240], "dataroot": 57, "image_s": [57, 255], "spatial": [57, 96, 98, 100, 134, 137, 185, 192, 198, 261], "64x64": 57, "nc": [57, 278], "nz": 57, "ngf": 57, "ndf": 57, "num_epoch": [57, 178], "0002": [57, 178], "ngpu": 57, "celeb": 57, "img_align_celeba": 57, "celeba": 57, "188242": 57, "173822": 57, "284702": 57, "537394": 57, "subdirectori": [57, 198], "stdev": 57, "02": [57, 160, 178, 182, 185, 214, 261, 269], "weights_init": 57, "reiniti": 57, "criteria": 57, "netg": 57, "netd": 57, "worth": [57, 169, 172, 181], "critic": [57, 90, 140, 151, 172, 178, 207, 240, 263], "batchnorm": [57, 60, 122, 163, 192, 200, 241, 243, 281], "downsampl": [57, 98, 162], "promot": 57, "healthi": 57, "bceloss": 57, "ell": [57, 184], "l_1": 57, "l_n": 57, "quad": [57, 179], "y_n": 57, "bce": 57, "gt": [57, 120], "fixed_nois": 57, "establish": 57, "Be": [57, 95], "somewhat": [57, 172], "collaps": 57, "ganhack": 57, "secondli": 57, "loss_d": 57, "loss_g": 57, "versu": [57, 80, 137, 145, 202], "anim": [57, 98], "music": 57, "dcgan_faces_tutori": [57, 123, 261], "mingpt": [58, 59, 60, 61, 150, 151], "aw": [58, 60, 138, 150, 151, 260], "p3": [58, 59, 60, 68, 121, 150, 151], "8xlarg": [58, 60], "youtub": [58, 59, 60, 61, 95, 96, 98, 100, 102, 103, 104, 137, 150, 151, 201], "failur": [58, 114, 151, 152, 160, 195, 205, 255, 265], "disrupt": [58, 253, 265], "suscept": [58, 210], "elast": [58, 139, 152, 210], "attempt": [58, 95, 103, 107, 139, 172, 195, 202, 230, 253, 265], "minutia": 58, "multinod": [58, 150, 196], "load_snapshot": 58, "snapshot_path": 58, "train_step": 58, "should_checkpoint": 58, "save_snapshot": 58, "membership": [58, 151], "intervent": [58, 105, 250], "multigpu": [58, 60, 151], "multigpu_torchrun": 58, "envvari": 58, "ddp_setup": [58, 60], "12355": [58, 60, 138, 152, 207, 208], "local_rank": [58, 139, 151, 152, 174, 265], "gpu_id": [58, 60, 151], "_save_snapshot": 58, "model_st": 58, "epochs_run": 58, "_load_snapshot": 58, "max_epoch": 58, "_run_epoch": [58, 60], "total_epoch": [58, 60], "argv": [58, 60, 215], "save_everi": [58, 60], "standalon": [58, 225, 252, 263], "nproc_per_nod": [58, 139, 140, 152, 174, 210, 265], "migrat": [58, 60, 178, 241], "fault": [59, 60, 61, 93, 150, 151, 172], "toler": [59, 60, 61, 93, 95, 150, 151], "deploi": [59, 115, 131, 137, 144, 151, 176, 177], "cluster": [59, 102, 139, 144, 150, 151, 152, 154, 208, 210, 249], "torchrun": [59, 65, 139, 140, 150, 151, 174, 210, 263, 265], "amazon": 59, "ec2": [59, 138], "gentli": 59, "gpt": [59, 138, 150, 151, 174], "stat": [60, 139, 147, 178, 188, 196, 231, 240], "replica": [60, 61, 65, 138, 140, 152, 154, 259], "convert_sync_batchnorm": 60, "single_gpu": 60, "mytraindataset": 60, "distributedsampl": [60, 61, 138, 139], "destroy_process_group": [60, 138, 139, 141, 152, 174, 207, 208, 263], "excess": [60, 87, 142, 193, 215, 225], "train_data": 60, "train_dataset": [60, 105, 139, 215, 248, 283], "set_epoch": [60, 138, 139], "b_sz": 60, "_run_batch": 60, "ckp": 60, "_save_checkpoint": 60, "load_train_obj": 60, "prepare_dataload": 60, "shorthand": 60, "ring": [61, 142, 263], "older": [61, 120, 121, 156, 171, 172, 179, 267], "destroi": [61, 95, 158], "soumith": [62, 154], "chintala": [62, 154], "scientif": [62, 100, 103, 121], "cifar10": [62, 93, 98, 188, 215, 244, 248], "mobil": [63, 64, 105, 203, 220, 221, 229, 262, 269, 271, 272, 280, 288], "executorch": [63, 64, 137, 203, 218, 219, 220, 221, 223, 255, 271, 272, 280, 286, 288], "Will": [65, 140, 192], "constabl": [65, 140], "wei": [65, 140], "feng": [65, 140, 162, 175, 192], "categor": [65, 87, 102, 155, 180, 182, 196], "navig": [65, 188, 189, 222], "technologi": [65, 105, 137, 154, 199, 260], "infrastructur": 65, "fsdp2": [65, 137, 138], "tp": [65, 210, 265], "pp": 65, "dtensor": [65, 142, 209, 260], "devicemesh": [65, 142, 260], "reshard": [65, 140, 208], "mesh": [65, 133, 140, 142, 210], "recip": [65, 120, 133, 137, 201, 204, 206, 209, 213, 222, 224, 225, 226, 227, 228, 230, 231, 237, 238, 242, 243, 244, 245, 247, 249, 250, 251, 252, 253, 254, 255, 259, 261, 273, 288], "c10d": [65, 152, 175, 241, 265], "all_gath": [65, 138, 139, 154, 175], "p2p": 65, "isend": [65, 154], "guidelin": [65, 241], "fullyshardeddataparallel": [65, 138, 139, 140, 207, 208], "torchtitan": [65, 174, 263], "polynomi": [67, 68, 70, 72, 73, 74, 77, 78, 121], "pi": [67, 68, 72, 73, 74, 77, 78, 95, 121, 135, 179], "euclidean": [67, 68, 72, 73, 74, 77, 78, 95, 105, 121], "polynomial_autograd": [67, 69, 261], "bx": [68, 121], "cx": [68, 107, 121], "p_3": [68, 121], "5x": [68, 121], "legendr": [68, 121], "polynomial_custom_funct": [68, 69, 261], "examples_autograd": [69, 261], "strang": [70, 90, 121], "fifth": [70, 121], "tough": [70, 121], "dynamic_net": [70, 75, 261], "member": [72, 121, 282, 289], "polynomial_modul": [72, 75, 261], "2000": [73, 77, 98, 102, 105, 121, 178, 189, 191, 195, 226, 259, 265], "flaten": [73, 121], "1d": [73, 100, 121, 241, 287], "mse": [73, 100, 105, 121], "polynomial_nn": [73, 75, 261], "polynomial_optim": [74, 75, 261], "examples_nn": [75, 261], "99": [77, 121, 178, 182], "3282": 77, "6603326581735": 77, "199": 77, "2256": 77, "4297329053966": 77, "299": [77, 178, 191], "1553": 77, "6337374968452": 77, "399": 77, "1071": 77, "7834697772778": 77, "499": 77, "741": 77, "0403988707941": 77, "599": 77, "513": 77, "7600692237934": 77, "699": 77, "357": 77, "40177217247606": 77, "799": 77, "249": 77, "71496714926565": 77, "899": [77, 160], "175": 77, "46777583044718": 77, "999": [77, 102, 189], "124": 77, "22105249993675": 77, "1099": 77, "88": [77, 120, 178, 182], "81215610862236": 77, "1199": 77, "32097285181746": 77, "1299": 77, "3639982890844": 77, "1399": 77, "611839005146955": 77, "1499": 77, "45904323639126": 77, "1599": 77, "79790913531545": 77, "1699": 77, "863348201434647": 77, "1799": 77, "126361512597214": 77, "1899": 77, "220812928460445": 77, "1999": 77, "893034963168688": 77, "05292746518058528": 77, "8334191410547374": 77, "00913086846047311": 77, "09001308001555737": 77, "linspac": [77, 95, 121], "1e": [77, 93, 100, 121, 140, 148, 178, 180, 182, 262, 263, 283], "y_pred": [77, 121, 214], "grad_y_pr": [77, 121], "grad_c": [77, 121], "grad_d": [77, 121], "237": [77, 79, 261], "polynomial_numpi": [77, 79, 261], "biggest": [78, 265], "polynomial_tensor": [78, 79, 261], "239": 79, "examples_tensor": [79, 261], "appreci": [80, 106], "overlook": [80, 226], "secur": [80, 188], "vulner": 80, "surpris": [80, 170], "impercept": 80, "perturb": [80, 96], "drastic": [80, 195, 254], "overarch": 80, "misclassif": 80, "alter": [80, 122, 232, 243, 267], "har": 80, "remark": [80, 193], "mathbf": 80, "nabla_": [80, 107], "007": 80, "misclassifi": 80, "gibbon": 80, "clearli": [80, 144, 265, 274, 275], "pretrained_model": [80, 191], "fgsm_attack": 80, "clean": [80, 138, 139, 145, 152, 169, 174, 196, 263, 274], "data_grad": 80, "_imag": 80, "_grad": 80, "strength": [80, 189], "_data": 80, "trend": [80, 88, 188], "curv": [80, 188, 189], "linearli": 80, "05": [80, 139, 178, 182, 214, 261, 262], "lunch": 80, "BUT": [80, 109], "percept": 80, "tradeoff": [80, 135, 137, 143, 144, 154, 178, 245], "evid": [80, 141], "subsequ": [80, 96, 105, 122, 138, 145, 155, 180, 182, 184, 193, 241, 244, 249, 258, 265, 267], "defend": 80, "nip": 80, "defens": 80, "competit": [80, 156, 171, 258], "defenc": 80, "dirti": 80, "fgsm_tutori": [80, 123, 261], "torchvision_tutori": [81, 185, 198, 261], "nn_tutori": [83, 113, 123, 261], "anupam": [87, 88], "bhatnagar": [87, 88], "offici": [87, 118, 141, 154, 179, 193, 195, 215, 216], "holistictraceanalysi": 87, "env_nam": [87, 178], "deactiv": 87, "trace_dir": 87, "trace_analysi": 87, "traceanalysi": 87, "engag": [87, 289], "datafram": [87, 144, 191], "time_spent_df": 87, "get_temporal_breakdown": 87, "enqueu": 87, "slowdown": [87, 139, 143], "consecut": [87, 146, 155, 162, 172, 177, 191, 258], "insuffici": [87, 179], "delai": [87, 152, 180, 196], "stall": [87, 258, 265], "gap": [87, 90], "nanosecond": 87, "consecutive_kernel_delai": 87, "get_idle_time_breakdown": 87, "idle_time_df": 87, "show_idle_interval_stat": 87, "percentag": [87, 176, 279], "visualize_pctg": 87, "comm": 87, "comp": 87, "proport": [87, 169], "pie": [87, 169], "chart": [87, 102, 252], "kernel_type_metrics_df": 87, "kernel_metrics_df": 87, "get_gpu_kernel_breakdown": 87, "bottleneck": [87, 120, 139, 142, 151, 169, 172, 180, 188, 193, 204, 222], "plotli": [87, 96, 144], "hover": [87, 144, 177], "pan": 87, "num_kernel": 87, "duration_ratio": 87, "preced": [87, 95, 103, 148, 155, 192, 281], "lab": [87, 189], "image_render": 87, "jupyterlab": 87, "gpu_kernel_breakdown": 87, "tflop": 87, "oversubscrib": 87, "unresolv": [87, 276], "extent": [87, 103], "overlap_df": 87, "get_comm_comp_overlap": 87, "h2d": [87, 206], "d2h": [87, 206], "d2d": 87, "memcpi": 87, "memset": 87, "outstand": 87, "generate_trace_with_count": 87, "_with_count": 87, "screenshot": [87, 222], "profil": [87, 123, 131, 132, 135, 137, 138, 172, 183, 185, 214, 226, 229, 237, 241, 260, 261, 278], "portion": [87, 169, 172, 174, 176, 214, 222, 240, 265], "get_memory_bw_summari": 87, "get_queue_length_summari": 87, "get_memory_bw_time_seri": 87, "get_queue_length_time_seri": 87, "mem_bw_summari": 87, "queue_len_summari": 87, "mem_bw_seri": 87, "queue_len_seri": 87, "get_queue_length_seri": 87, "25th": 87, "50th": 87, "75th": 87, "percentil": 87, "cudalaunchkernel": 87, "cudamemcpyasync": 87, "cudamemsetasync": 87, "kernel_info_df": 87, "get_cuda_kernel_launch_stat": 87, "short": [87, 100, 103, 106, 108, 111, 133, 146, 154, 170, 172, 178, 184, 186, 195, 241, 244, 261], "outlier": [87, 179], "microsecond": [87, 161, 183, 226], "cutoff": 87, "runtime_cutoff": 87, "launch_delay_cutoff": 87, "occasion": [88, 181, 184], "hta": [88, 188], "tracediff": 88, "cumul": [88, 178, 179], "compare_trac": 88, "ops_diff": 88, "absent": 88, "visualize_counts_diff": 88, "visualize_duration_diff": 88, "ten": [88, 98, 102, 105], "df": 88, "compare_traces_output": 88, "sort_valu": 88, "diff_count": 88, "largest": [88, 113, 191], "diff_dur": 88, "differer": 88, "overshadow": 88, "profilerstep": [88, 160], "loc": [88, 178, 225], "trace_diff_demo": 88, "learning_hybrid_frontend_through_example_tutori": [89, 90, 91, 261], "hybrid_frontend": [89, 91, 261], "introduction_to_hybrid_frontend_tutori": 89, "shini": 90, "enjoi": [90, 162], "aquaint": 90, "opportun": [90, 115, 155, 196], "bridg": [90, 209], "refin": [90, 195], "gradual": [90, 169], "proven": [90, 277], "resouc": 90, "consumpt": [90, 98, 100, 102, 104, 120, 139, 142, 144, 160, 172, 176, 188, 241, 259, 260], "discrep": [90, 281], "interwork": 90, "intrus": [90, 169], "decor": [90, 95, 118, 133, 147, 162, 180, 193, 241, 253], "broken": [90, 109], "epsilon": [90, 148, 155, 178, 179], "biggl": 90, "lfloor": 90, "prod_": 90, "biggr": 90, "rfloor": 90, "hline": 90, "190": [90, 182, 191, 226], "4377": 90, "59051": 90, "accomod": [90, 150], "scriptmodul": 90, "script_method": 90, "tracedmodul": 90, "onnx": [90, 119, 131, 137, 261], "dramat": [93, 113], "industri": [93, 96], "analysi": [93, 95, 104, 137, 138, 159, 160, 183, 188, 191, 195, 222, 240, 255, 263, 267], "slight": [93, 141, 149, 214, 227], "trial": [93, 144, 225], "train_cifar": 93, "data_dir": [93, 139], "l2": [93, 100, 176], "get_checkpoint": 93, "as_directori": 93, "checkpoint_dir": [93, 207, 208], "pkl": [93, 113], "rb": [93, 113], "checkpoint_st": 93, "start_epoch": 93, "net_state_dict": 93, "optimizer_state_dict": [93, 122, 207, 208, 215], "80": [93, 102, 144, 145, 163, 178, 182, 255], "luckili": [93, 160, 195, 196, 226, 276], "trainload": [93, 189], "fraction": [93, 226], "checkpoint_data": 93, "tempfil": [93, 152], "temporarydirectori": 93, "wb": [93, 113], "dump": [93, 160, 202, 209], "from_directori": 93, "val_loss": [93, 113, 139], "val_step": 93, "wast": [93, 188, 226, 230, 232, 245, 279, 285, 289], "lastli": [93, 169, 195], "loguniform": [93, 226], "ashaschedul": 93, "functool": [93, 138, 139, 161], "gpus_per_tri": 93, "resources_per_tri": 93, "num_sampl": [93, 139], "checkpoint_at_end": 93, "000668163": 93, "31479": 93, "0977": 93, "0331514": 93, "31605": 93, "0983": 93, "000150295": 93, "30755": 93, "1023": 93, "0128248": 93, "66912": 93, "4391": 93, "00464561": 93, "7316": 93, "3463": 93, "00031556": 93, "19409": 93, "1736": 93, "00574329": 93, "85679": 93, "3368": 93, "00325652": 93, "30272": 93, "0984": 93, "000342987": 93, "76044": 93, "003734": 93, "53101": 93, "4761": 93, "0037339984519545164": 93, "5310075663924216": 93, "4737": 93, "hyperparameter_tuning_tutori": [93, 123, 261], "tensorboard": [95, 96, 97, 98, 99, 100, 103, 104, 135, 137, 144, 185, 229, 231, 237, 260, 261], "decis": [95, 108, 111, 155, 172, 195, 202, 241, 250, 256, 261, 274, 275, 277], "branch": [95, 114, 195, 198, 215, 288], "rigidli": 95, "sign": [95, 170], "contextu": 95, "nudg": [95, 98, 104], "calculu": 95, "drill": [95, 240], "machineri": [95, 226], "took": [95, 154, 159, 169, 183, 193, 253, 265], "ins": [95, 193], "ideal_output": 95, "layer2": 95, "blow": 95, "b1": 95, "b2": 95, "temporarili": 95, "enable_grad": 95, "throw": [95, 103, 141, 180], "sin_": 95, "handi": [95, 98, 113, 154, 162, 189], "bake": [95, 192], "chrome": [95, 172, 183, 188, 231], "hessian": [95, 132, 137, 185, 261, 287], "twice": [95, 113, 149, 172, 214, 226, 231, 259, 267], "jvp": [95, 158, 161], "vjp": [95, 161, 166, 287], "vhp": [95, 132, 137, 185, 261], "hvp": [95, 132, 137, 185, 261], "autogradyt_tutori": [95, 97, 101, 261], "latin": [96, 113], "increasingli": [96, 199], "ai": [96, 107, 108, 113, 138, 144, 162, 184, 202, 208, 215, 216, 224, 241, 265, 278], "review": [96, 150, 167, 195, 215, 245, 274, 275, 277, 282, 288], "neuron": [96, 105, 224], "analag": 96, "ablat": 96, "permut": [96, 105, 163, 177, 191, 213], "valuabl": [96, 105, 184, 213, 279], "certainli": [96, 159, 275, 277], "attr": [96, 175, 202], "widget": 96, "toolset": 96, "flask": 96, "renam": [96, 262], "virtual": [96, 172, 175, 230, 269], "recogn": [96, 100, 175, 192, 228], "224x224": [96, 177], "visualize_image_attr": 96, "integrated_gradi": 96, "strongest": [96, 98, 100, 104], "visualize_image_attr_multipl": 96, "heat": [96, 177], "upsampl": 96, "interpol": 96, "layerattribut": 96, "teapot": 96, "trilobit": 96, "fossil": 96, "attributionvisu": 96, "imagefeatur": 96, "heatmap": 96, "captumyt": [96, 101, 261], "introyt": [97, 101, 201, 261], "introyt1_tutori": [97, 98, 101, 261], "tensors_deeper_tutori": [97, 101, 103, 261], "modelsyt_tutori": [97, 100, 101, 261], "tensorboardyt_tutori": [97, 101, 102, 261], "trainingyt_tutori": 97, "captumyt_tutori": 97, "captum": [97, 229, 237, 260, 261], "sphx_glr_beginner_introyt_introyt_index": [97, 101, 261], "sphx_glr_beginner_introyt_modelsyt_tutori": [97, 101, 261], "sphx_glr_beginner_introyt_autogradyt_tutori": [97, 101, 261], "sphx_glr_beginner_introyt_tensors_deeper_tutori": [97, 101, 261], "sphx_glr_beginner_introyt_captumyt": [97, 101, 261], "sphx_glr_beginner_introyt_introyt1_tutori": [97, 101, 261], "sphx_glr_beginner_introyt_trainingyt": [97, 101, 261], "sphx_glr_beginner_introyt_tensorboardyt_tutori": [97, 101, 261], "5x3": 98, "helpfulli": 98, "prng": 98, "r3": 98, "r1": 98, "r2": 98, "trigonometr": [98, 103], "singular": [98, 170, 183, 254], "decomposit": [98, 118, 140, 160], "diagram": [98, 179], "earliest": 98, "driver": [98, 188], "explos": 98, "handwritten": [98, 138], "abridg": 98, "artifact": [98, 150, 195, 249, 250, 254], "gist": 98, "tile": [98, 102, 104, 191, 202, 283], "hasn": 98, "shouldn": [98, 176], "center": [98, 100, 104, 179, 188, 241], "concatdataset": 98, "trainset": [98, 189], "50000": [98, 113, 178], "4914": 98, "4822": 98, "4465": 98, "2470": 98, "2435": 98, "2616": 98, "rotat": [98, 102, 186, 189], "vehicl": [98, 182], "filesystem": [98, 154, 266], "told": [98, 178], "strip": [98, 240, 283], "ingredi": 98, "inner": [98, 172, 178], "235": [98, 120], "940": [98, 123], "6000": [98, 102, 178], "8000": [98, 102, 178, 240], "573": 98, "507": 98, "12000": [98, 102, 178], "442": 98, "378": 98, "364": 98, "319": [98, 214, 231], "284": [98, 182], "267": 98, "monoton": 98, "descend": 98, "memor": 98, "roughli": [98, 106, 121, 139, 152, 160, 241], "brad": 99, "heintz": 99, "introyt_index": [99, 101, 201, 261], "lin": [100, 113], "nearbi": 100, "lenet5": 100, "1x32x32": 100, "liken": 100, "3x5": 100, "presenc": [100, 193, 195, 224], "6x28x28": 100, "resolut": [100, 191], "6x14x14": 100, "sought": 100, "3x3": 100, "16x12x12": 100, "16x6x6": 100, "576": 100, "edg": [100, 115, 121, 137, 159, 188, 228, 255, 262], "instrument": [100, 159, 260], "dna": 100, "nucleotid": 100, "sort": [100, 106, 110, 120, 177, 199, 231, 241], "moder": 100, "beyond": [100, 103, 109, 175, 176, 241], "scope": [100, 103, 109, 120, 143, 147, 195, 222, 245], "tagger": [100, 106], "noun": 100, "verb": 100, "vocab_s": [100, 140, 174, 215], "tagset_s": 100, "log_softmax": [100, 113, 138, 181], "decod": [100, 106, 139, 174, 182, 183, 199, 225, 255, 267], "transformerencod": [100, 199], "transformerdecod": [100, 199], "subcompon": [100, 193], "transformerencoderlay": [100, 183, 199], "transformerdecoderlay": [100, 174, 199], "twin": 100, "maxpool": 100, "quadrant": 100, "6x6": 100, "vanish": [100, 107, 200], "offset": [100, 196, 207, 266, 283], "neighborhood": 100, "sometim": [100, 103, 121, 143, 149, 151, 152, 155, 161, 179, 182, 184, 195, 241, 267, 276, 277], "suffer": [100, 188], "steepest": 100, "feasibl": [100, 138, 140], "hardtanh": 100, "51": [101, 102, 163, 178, 182, 214, 261], "266": 101, "254": [101, 102, 261], "trainingyt": [101, 104, 261], "garment": 102, "summarywrit": [102, 189, 239], "tb": [102, 255], "gfile": 102, "tensorflow_stub": 102, "training_set": 102, "validation_set": 102, "training_load": 102, "validation_load": 102, "matplotlib_imshow": [102, 189], "one_channel": [102, 189], "unnorm": [102, 189], "npimg": [102, 189], "grei": [102, 189], "datait": [102, 189], "img_grid": [102, 189], "make_grid": [102, 189], "367kb": 102, "581kb": 102, "90mb": 102, "24m": 102, "2mb": 102, "2m": 102, "9mb": 102, "7mb": 102, "325kb": 102, "15m": 102, "15mb": 102, "add_imag": [102, 189], "flush": [102, 225, 239], "log_dir": [102, 144, 189], "writer": [102, 145, 177, 178, 189, 207, 239, 265], "fashion_mnist_experiment_1": [102, 189], "logdir": [102, 188, 189, 239], "6006": [102, 188, 189, 239], "efficaci": 102, "running_loss": [102, 189], "running_vloss": 102, "eg": [102, 140], "regularis": 102, "vdata": 102, "vinput": 102, "vlabel": 102, "voutput": 102, "vloss": 102, "avg_loss": 102, "avg_vloss": 102, "add_scalar": [102, 189, 239], "3000": [102, 178, 189, 195, 255], "7000": [102, 178], "9000": [102, 178], "11000": [102, 178], "13000": [102, 178], "14000": [102, 178], "15000": [102, 178], "add_graph": [102, 189], "add_embed": [102, 189], "select_n_random": [102, 189], "perm": [102, 189], "randperm": [102, 189], "class_label": [102, 189, 191], "label_img": [102, 189], "projector": 102, "toggl": [102, 259, 266], "night": [102, 189], "icon": 102, "dark": [102, 191], "upack": 103, "attach": [103, 179, 200, 258], "terminologi": [103, 109], "likewis": [103, 169], "fctori": 103, "assur": [103, 172], "random1": 103, "random3": 103, "random2": 103, "random4": 103, "rng": [103, 154], "_like": [103, 163], "rand_lik": 103, "int16": 103, "cue": 103, "intent": [103, 208, 275], "subtract": [103, 105, 241], "2x4": 103, "1x4": 103, "honor": 103, "3rd": [103, 140, 147, 202, 215], "2nd": [103, 110, 140, 147, 181], "hundr": [103, 133, 142, 191, 196], "bitwis": [103, 225], "inventori": [103, 104], "occupi": [103, 222], "discard": [103, 138, 139, 188, 231, 240], "underscor": 103, "deepli": 103, "nor": [103, 154, 258, 262, 274], "mid": 103, "someplac": 103, "ram": [103, 139, 172, 196, 230], "colloqui": 103, "fragil": 103, "robustli": [103, 117], "whichev": 103, "acquir": [103, 122, 176, 178, 182], "thrown": [103, 277, 288], "226": 103, "zeroth": 103, "bracket": [103, 262], "rescu": 103, "squeeze_": 103, "unsqueeze_": 103, "radic": 103, "parenthes": 103, "comma": 103, "convinc": [103, 169], "kinship": 103, "autom": [104, 121, 144, 159, 163, 191], "outcom": [104, 144, 265], "saniti": [104, 144, 178, 191], "nb": [104, 287], "chose": [104, 177], "saved_model": 104, "garmentclassifi": 104, "alexandro": 105, "chariton": 105, "computation": [105, 191], "lightweight": [105, 132, 137, 176, 225], "drone": 105, "phone": [105, 115], "4gb": [105, 169, 177], "3072": [105, 178, 283], "satur": [105, 225], "held": [105, 145, 181], "greedi": [105, 155, 179], "num_images_to_keep": 105, "50_000": [105, 178], "test_dataset": 105, "10_000": 105, "extractor": [105, 191], "emploi": [105, 184, 188, 199, 207], "train_load": [105, 138, 139, 181, 188, 215, 248], "detriment": 105, "workload": [105, 120, 133, 140, 151, 152, 188, 196, 207, 210, 214, 215, 258, 269, 278], "test_load": [105, 138, 181], "sensit": [105, 150, 158], "conclud": [105, 149, 154, 195], "interven": [105, 195], "soft": [105, 179], "mistaken": 105, "alon": [105, 122, 142, 184, 189], "exploit": [105, 162, 184], "meaningfulli": 105, "temperatur": 105, "smoother": 105, "soft_target_loss_weight": 105, "ce_loss_weight": 105, "train_knowledge_distil": 105, "75": [105, 128, 138], "ce": [105, 184], "coeffici": 105, "convei": 105, "naiv": [105, 143, 161, 171, 183, 279], "rational": 105, "capac": [105, 150, 178, 191, 241], "cosineembeddingloss": 105, "obvious": [105, 109, 182], "somehow": [105, 112, 196], "hidden_represent": 105, "hidden_representation_s": 105, "avg_pool1d": 105, "modifiedlightnnregressor": 105, "cosineloss": 105, "wiggl": 105, "hinton": 105, "vinyal": 105, "dean": 105, "workshop": 105, "romero": 105, "balla": 105, "kahou": 105, "chassang": 105, "gatta": 105, "bengio": 105, "fitnet": 105, "thin": [105, 266], "confer": 105, "knowledge_distillation_tutori": [105, 123, 261], "kit": 106, "dynet": [106, 108], "opposit": [106, 172, 275], "theano": [106, 108], "kera": [106, 108, 121], "constitu": 106, "bottom": [106, 188, 191, 195, 222], "green": [106, 139, 142, 189], "fat": 106, "exception": 106, "entiti": [106, 112, 196, 243, 244], "recognit": [106, 137, 202, 241], "ner": 106, "sound": [106, 109, 121], "scari": 106, "viterbi": [106, 110], "sum_": [106, 112, 179], "psi_i": 106, "sum_i": 106, "partit": [106, 137, 142, 147, 154, 208, 241], "emiss": 106, "timestep": [106, 110, 145, 146, 179], "textbf": 106, "psi_": 106, "y_i": [106, 110], "rightarrow": [106, 154, 179], "x_i": [106, 107], "tran": [106, 191], "h_i": [106, 110], "michael": [106, 204, 205, 213, 225, 251, 256], "collin": 106, "robert": [106, 107, 109, 110, 112], "guthri": [106, 107, 109, 110, 112], "prepare_sequ": 106, "anywai": [106, 109, 172], "gold": [106, 184], "perceptron": 106, "score_sent": 106, "advanced_tutori": [106, 108, 111, 261], "workhors": 107, "2x5": 107, "acx": 107, "ac": [107, 191], "sigma": [107, 178], "plenti": 107, "peopl": [107, 108, 128], "shy": 107, "linearit": 107, "sum_j": 107, "x_j": 107, "unseen": [107, 112], "eta": 107, "vari": [107, 140, 148, 162, 172, 184, 193, 195, 199, 204, 225, 276, 279], "spanish": [107, 145, 146], "bow": 107, "vocab": [107, 110, 142], "word_to_ix": [107, 110, 112], "bowclassifi": 107, "creo": 107, "bigger": [107, 145, 146, 177, 191], "deep_learning_tutori": [107, 108, 111, 261], "russel": 108, "norvig": 108, "book": 108, "rip": 108, "pytorch_tutori": [108, 109, 111, 261], "word_embeddings_tutori": [108, 111, 112, 261], "lexic": [108, 111, 261], "sequence_models_tutori": [108, 110, 111, 261], "bi": [108, 111, 261], "crf": [108, 111, 261], "2x2x2": 109, "complain": [109, 195], "x_2": [109, 166], "vagu": 109, "programm": [109, 112], "mayb": [109, 112, 156, 195, 289], "x_0": 109, "overbrac": [109, 110, 112], "y_0": 109, "z_0": 109, "z_1": 109, "y_2": 109, "z_2": 109, "gloss": 109, "new_z": 109, "NO": 109, "forgotten": 109, "classic": [110, 113, 163, 170, 186, 216, 238], "markov": 110, "myriad": 110, "cow": 110, "q_": [110, 112, 162], "1st": [110, 138, 140, 147], "unfamiliar": 110, "w_1": 110, "w_m": 110, "w_i": [110, 112], "_i": 110, "_1": 110, "_m": 110, "argmax": [110, 113, 138, 181, 214], "_j": 110, "ah_i": 110, "affix": [110, 112], "bear": 110, "ly": 110, "adverb": 110, "c_w": 110, "x_w": 110, "po": [110, 191], "emb": [110, 112, 182], "013": 111, "capit": 112, "enorm": [112, 191], "notion": 112, "mathematician": 112, "physicist": 112, "ok": [112, 141, 180], "role": [112, 176, 182, 196, 258], "orthograph": 112, "linguist": 112, "hypothesi": 112, "coffe": 112, "phi": 112, "gave": 112, "pain": 112, "earth": 112, "herself": 112, "longtensor": [112, 146, 180, 182], "ith": [112, 279], "shakespear": [112, 183], "sonnet": 112, "word_i": 112, "context_s": 112, "beauti": 112, "cbow": 112, "probabilist": [112, 178], "percent": [112, 161], "q_w": 112, "raw_text": 112, "dedupl": 112, "jeremi": 113, "howard": [113, 162, 174, 175], "rachel": 113, "thoma": 113, "ingham": 113, "elegantli": [113, 228], "concis": 113, "exist_ok": 113, "_static": [113, 137], "gz": 113, "gzip": 113, "as_posix": 113, "x_train": 113, "y_train": 113, "x_valid": 113, "y_valid": 113, "importerror": 113, "trail": 113, "signifi": 113, "xavier": [113, 114], "initialis": 113, "prewritten": 113, "xb": 113, "6164": 113, "2574": 113, "3321": 113, "4248": 113, "3844": 113, "0637": 113, "8776": 113, "0512": 113, "2987": 113, "0223": 113, "selectbackward0": 113, "nll": 113, "loss_func": 113, "yb": 113, "4788": 113, "negbackward0": 113, "1250": 113, "talli": 113, "debugg": 113, "set_trac": 113, "start_i": 113, "end_i": 113, "zero_": [113, 175, 182], "logist": 113, "0818": 113, "wherea": [113, 147, 189, 191, 267, 275, 276], "cross_entropi": [113, 142], "nlllossbackward0": 113, "clearer": [113, 189], "uppercas": 113, "confus": [113, 145, 158, 191, 196, 267, 275, 276, 277], "mnist_logist": 113, "3758": 113, "prone": [113, 147, 199, 210], "gone": [113, 143], "0807": 113, "3311": 113, "0815": 113, "get_model": [113, 180], "3389": 113, "0839": 113, "faciallandmarkdataset": 113, "tensordataset": 113, "train_d": 113, "0806": 113, "train_dl": 113, "cleaner": [113, 274, 276, 289], "0817": 113, "valid_d": 113, "valid_dl": 113, "phase": [113, 154, 182, 231, 256], "valid_loss": 113, "3376": 113, "4032": 113, "loss_batch": 113, "num": [113, 180], "2978854458451271": 113, "39048033954501155": 113, "mnist_cnn": [113, 138], "avg_pool2d": [113, 288], "31986957080364226": 113, "2185477388381958": 113, "func": [113, 132, 137, 156, 158, 161, 166, 171, 251, 255, 287], "avgpool2d": 113, "32553481390476224": 113, "2750312545657158": 113, "rid": [113, 114, 140, 161, 255], "wrappeddataload": 113, "dl": [113, 202, 267], "__iter__": 113, "adaptiveavgpool2d": [113, 155], "32803529829978945": 113, "23391957770586014": 113, "lucki": [113, 176], "rent": 113, "hour": [113, 255], "current_acceler": 113, "23276735482215882": 113, "1569535933971405": 113, "mnist_sampl": 113, "fastai": 113, "practition": [113, 154, 277], "920": [113, 123, 261], "dupr\u00e9": 114, "circumv": 114, "forwardwithcontrolflowtest": 114, "modelwithcontrolflowtest": 114, "mlp": [114, 142, 156, 196], "unexpectedli": [114, 222], "succe": [114, 117, 195], "assertionerror": [114, 160], "dynamo": [114, 115, 117, 147, 160, 216, 255, 256, 268], "faithfulli": [114, 274], "identity2": 114, "fx": [114, 115, 131, 137, 160, 185, 195, 216, 249, 261, 262, 269], "imperfect": 114, "faith": 114, "pitfal": [114, 195], "necessarili": [114, 115, 117, 118, 147, 149, 172, 195], "export_control_flow_model_to_onnx_tutori": [114, 116, 119, 261], "ti": [115, 117, 118], "tai": [115, 117, 118], "justin": [115, 118, 121, 200], "chu": [115, 118], "thiago": [115, 117], "crepaldi": [115, 117], "gamut": 115, "platform": [115, 152, 154, 188, 202, 214, 222, 241, 248, 258], "supercomput": 115, "constrain": [115, 144, 170], "onnxscript": [115, 117, 118], "upgrad": [115, 117, 170, 177, 178, 188, 289], "onnxprogram": [115, 118], "protobuf": 115, "app": [115, 137, 207, 208, 215], "drag": [115, 169, 188, 189, 209], "image_classifier_model": 115, "onnxruntim": [115, 117], "export_simple_model_to_onnx_tutori": [115, 116, 119, 261], "intro_onnx": [116, 117, 119, 261], "onnx_registry_tutori": [116, 118, 119, 261], "sphx_glr_beginner_onnx_export_control_flow_model_to_onnx_tutori": [116, 119, 261], "sphx_glr_beginner_onnx_intro_onnx": [116, 119, 261], "sphx_glr_beginner_onnx_export_simple_model_to_onnx_tutori": [116, 119, 261], "sphx_glr_beginner_onnx_onnx_registry_tutori": [116, 119, 261], "exportedprogram": [117, 118, 122, 195, 254, 255], "newer": [117, 153, 163, 169, 171, 197, 233, 234, 235, 236, 241, 286], "__version__": [117, 177, 288], "registri": 118, "opoverload": 118, "opset": 118, "18": [118, 120, 145, 160, 177, 178, 182, 214, 226, 254, 267], "native_funct": 118, "yaml": [118, 150], "custom_translation_t": 118, "redund": [118, 155], "node_add_0": 118, "input_i": 118, "input_x": 118, "gelu": [118, 281], "op_typ": 118, "mylibrari": 118, "add_and_round_op": 118, "005": 119, "json": [120, 172, 183, 188, 209, 231, 254], "quicker": 120, "record_funct": [120, 160, 214, 231], "incur": [120, 142, 206, 207, 241, 265], "investig": [120, 163, 176, 191, 193, 195, 240], "with_stack": [120, 188], "key_averag": [120, 214], "group_by_stack_n": 120, "traceback": [120, 160, 255], "sort_bi": [120, 214, 231], "193a910735e8": 120, "stacktrac": 120, "212": 120, "953": 120, "mnt": [120, 154], "xarfus": 120, "au": 120, "07": [120, 139, 178, 214, 231, 240], "715": 120, "848m": 120, "350": 120, "151u": 120, "293": [120, 163], "342u": 120, "095u": 120, "931": 120, "footprint": [120, 138, 139, 140, 150, 169, 214, 225, 259], "006": 120, "476": [120, 161], "34": [120, 177, 178, 214, 226, 231, 240], "338": [120, 237], "759m": 120, "as_strid": [120, 160], "281": [120, 163], "808u": 120, "275": 120, "721u": 120, "_local": 120, "268": 120, "650u": [120, 231], "_scalar_dens": 120, "347": [120, 178], "argwher": 120, "nonzero": [120, 241], "089m": 120, "38": [120, 178, 182, 185, 214, 240], "402m": 120, "491m": 120, "119": 120, "441": 120, "587u": 120, "_numpi": 120, "395": [120, 182], "602u": 120, "801m": 120, "rpc": [120, 137, 260], "johnson": 121, "brows": 121, "utf": 121, "modern": [121, 172, 193, 196], "50x": 121, "hairi": 121, "thankfulli": 121, "wave": 121, "tflearn": 121, "burden": [121, 184, 241], "facil": 122, "running_mean": [122, 243], "themodelclass": 122, "param_tensor": [122, 243], "var_nam": [122, 243], "param_group": [122, 178, 205], "dampen": 122, "weight_decai": 122, "4675713712": 122, "4675713784": 122, "4675714000": 122, "4675714072": 122, "4675714216": 122, "4675714288": 122, "4675714432": 122, "4675714504": 122, "4675714648": 122, "4675714720": 122, "_use_new_zipfile_seri": 122, "best_model_st": 122, "deepcopi": 122, "pt2": [122, 195, 204, 205, 210, 213, 254], "simplemodel": 122, "saved_exported_program": 122, "model_state_dict": [122, 140, 207, 208, 215], "theoptimizerclass": 122, "modela_state_dict": 122, "modela": 122, "modelb_state_dict": 122, "modelb": 122, "optimizera_state_dict": 122, "optimizera": 122, "optimizerb_state_dict": 122, "optimizerb": 122, "themodelaclass": 122, "themodelbclass": 122, "theoptimizeraclass": 122, "theoptimizerbclass": 122, "gan": [122, 134, 137, 170], "ensembl": [122, 132, 137, 185, 261], "map_loc": [122, 140, 152, 191, 225, 230], "remap": 122, "overwrit": 122, "saving_loading_model": [122, 123, 233, 234, 235, 236, 261], "distil": [123, 132, 137, 261], "dcgan": [123, 132, 134, 137, 261], "transfer_learning_tutori": [123, 128, 261], "rai": [123, 135, 137, 261], "template_tutori": [123, 125, 261], "firstnam": 125, "lastnam": 125, "gallery_pattern": 125, "neural_style_transfer_tutori": 125, "sphinx": 125, "_build": 125, "beginner_sourc": [125, 261], "link1": [125, 139], "link2": [125, 139], "cs231n": 128, "quot": 128, "licens": [128, 186], "bsd": [128, 186], "todai": [128, 196, 276], "lr_schedul": [128, 138, 139, 178], "num_ftr": 128, "decai": [128, 155, 179], "checkout": [128, 288], "streamlin": 131, "inductor": [131, 132, 137, 147, 185, 195, 250, 252, 256, 261, 267, 269, 278, 281, 289], "set_stanc": [131, 247, 260, 261], "usecas": [131, 260], "lrschedul": [131, 169, 260], "triton": [131, 160, 193, 247, 249, 254, 260, 261, 269, 278], "cold": [131, 184, 229, 247, 249, 260, 261], "torchdynamo": [131, 137, 147, 195, 269, 281], "fuser": [131, 137, 185, 261], "orthogon": [132, 137, 170], "symmetr": [132, 137, 170, 281], "prune": [132, 137, 170, 185, 261, 289], "scaled_dot_product_attent": [132, 137, 183, 199, 263], "nchw": [132, 137, 163, 215], "tangent": [132, 137, 158, 161, 185, 261], "nerur": [132, 137], "netork": [132, 137], "exploresever": [132, 137], "spread": [133, 191], "demand": [133, 265], "ddp_series_intro": 133, "utm_sourc": 133, "distr_land": 133, "utm_medium": 133, "distributeddata": 133, "ddp_tutori": 133, "intermediate_ddp_tutori": 133, "uneven": 133, "generic_join": 133, "fsdp_tutori": 133, "fsdp_getting_start": 133, "tp_tutori": 133, "distributed_device_mesh": 133, "rpc_tutori": 133, "rpc_getting_start": 133, "rpc_param_server_tutori": 133, "async_execut": [133, 137, 180], "rpc_async_execut": 133, "dataparallel": [133, 137, 143, 225, 241], "rpc_ddp_tutori": 133, "rpc_plus_ddp": 133, "plug": [133, 175, 186], "process_group_cpp_extension_tutori": 133, "custom_extensions_cpp": 133, "dqn": [134, 137, 185, 261], "cartpol": [134, 137, 155, 179, 182], "v0": [134, 137, 162, 178, 179, 198], "proxim": [134, 137, 178], "mario": [134, 137, 170, 185, 261], "experiment": [135, 138, 144, 182, 200, 239, 241, 262, 263, 265, 268, 281], "torchx": [135, 137], "plugin": [135, 137, 188], "raspberri": 135, "gpudirect": [137, 261, 284, 289], "bite": [137, 201, 260], "non_block": [137, 185, 261], "pin_memori": [137, 138, 139, 185, 241, 261], "slide": [137, 241], "tiatoolbox": 137, "resampl": 137, "waveform": 137, "wav2vec2": 137, "holist": 137, "thumbnail": [137, 191], "matcher": [137, 192], "paral": 137, "fully_shard": [137, 140, 142, 207, 208, 210], "libuv": 137, "tcpstore": [137, 152], "sdk": 137, "v3": 137, "camera": [137, 177], "xnnpack": [137, 262], "metal": 137, "shader": 137, "android": 137, "deeplab": 137, "fp32": [137, 139, 150, 163, 183, 202, 262, 267, 278], "torchrec": [137, 185, 261], "distributedmodelparallel": 137, "hamid": [138, 139], "shojanazeri": [138, 139], "yanli": [138, 139], "zhao": [138, 139], "shen": [138, 152, 175, 180, 182], "li": [138, 152, 154, 172, 175, 180, 182, 193], "fsdp1": 138, "huggingfac": [138, 139, 199, 216, 255, 283], "1t": [138, 150], "courtesi": 138, "patrick": 138, "hu": 138, "reduce_scatt": [138, 139, 142], "scatter": [138, 140, 152, 154, 191], "possess": [138, 230, 267], "toi": [138, 152, 182, 192, 195, 196, 208, 238], "fsdp_mnist": 138, "size_based_auto_wrap_polici": 138, "default_auto_wrap_polici": 138, "fsdp_auto_wrap_polici": 138, "auto_wrap_polici": [138, 139, 140], "steplr": [138, 139], "fully_sharded_data_parallel": 138, "cpuoffload": [138, 140], "backwardprefetch": [138, 139], "enable_wrap": [138, 139], "cleanup": [138, 139, 152, 207, 208], "dropout1": [138, 181], "dropout2": [138, 181], "9216": [138, 181], "ddp_loss": 138, "batch_idx": [138, 215, 248], "tloss": 138, "6f": 138, "view_a": [138, 181], "test_loss": 138, "fsdp_main": [138, 139], "1307": [138, 154, 181], "3081": [138, 154, 181], "dataset1": 138, "dataset2": 138, "sampler1": [138, 139], "num_replica": [138, 139], "sampler2": [138, 139], "train_kwarg": [138, 139], "test_kwarg": [138, 139], "test_batch_s": [138, 139], "cuda_kwarg": [138, 139], "my_auto_wrap_polici": 138, "min_num_param": 138, "init_start_ev": [138, 139], "enable_tim": [138, 139], "init_end_ev": [138, 139], "adadelta": 138, "step_siz": [138, 139], "gamma": [138, 139, 162, 178, 179, 180, 182], "elapsed_tim": 138, "save_model": [138, 139], "barrier": [138, 139, 141, 152, 154, 263], "metavar": [138, 139, 180, 182], "store_tru": [138, 139], "110": [138, 182, 226], "85": [138, 214, 226, 231], "40": [138, 162, 163, 178, 182, 184, 199, 214, 226, 254, 268, 277, 278, 283], "67462890625sec": 138, "_fsdp_wrapped_modul": 138, "flattenparamswrapp": 138, "_fpw_modul": 138, "peak": [138, 140, 148, 169, 177, 199, 207, 252, 258, 259, 263, 267], "g4dn": 138, "xlarg": 138, "allgath": [138, 139, 142, 175, 241], "seal": 138, "20000": [138, 178], "89130859375sec": 138, "auto_wrap": 138, "66": [138, 178, 214, 226], "offload": [138, 139, 140, 214, 222], "cpu_offload": [138, 140], "offload_param": [138, 140], "dpp": 138, "ddp_mnist": 138, "39": [138, 178, 182, 199, 214, 226], "77766015625sec": 138, "wright": 139, "rohan": [139, 181], "varma": [139, 181], "wikihow": 139, "p4dn": 139, "a100": [139, 143, 171, 193, 199, 267, 283], "pressur": [139, 207], "fdsp": 139, "xxl": 139, "billion": [139, 142], "3b": [139, 177], "wikihowal": 139, "wikihowsep": 139, "summarization_dataset": 139, "t5_train": 139, "autotoken": [139, 283], "gpt2tokenizerfast": 139, "t5token": 139, "t5forconditionalgener": 139, "modeling_t5": 139, "t5block": 139, "checkpoint_wrapp": 139, "checkpointimpl": 139, "apply_activation_checkpointing_wrapp": 139, "mixedprecis": 139, "shardingstrategi": 139, "fullstatedictconfig": 139, "statedicttyp": 139, "transformer_auto_wrap_polici": 139, "tqdm": [139, 155, 178, 283], "datetim": [139, 141, 265], "setup_model": 139, "from_pretrain": [139, 215, 255, 283], "get_date_of_run": 139, "2022": [139, 178, 269], "08": [139, 160, 178, 182, 214, 226, 254, 263], "31": [139, 160, 161, 178, 214, 226, 231, 240], "12_pm": 139, "date_of_run": 139, "strftime": 139, "s_": [139, 179], "format_metrics_to_gb": 139, "gigabyt": 139, "metric_num": 139, "g_gigabyt": 139, "ndigit": 139, "fsdp_loss": 139, "inner_pbar": 139, "colour": 139, "desc": [139, 265], "r0": 139, "input_id": [139, 142, 255, 283], "source_id": 139, "attention_mask": [139, 255], "source_mask": 139, "target_id": 139, "train_accuraci": 139, "val_load": 139, "load_dataset": [139, 255, 283], "type_path": 139, "output_length": 139, "print_text": 139, "1500": [139, 226], "val_dataset": 139, "t5_auto_wrap_polici": 139, "transformer_layer_cl": 139, "sharding_strategi": [139, 140], "shard_grad_op": [139, 140], "zero2": 139, "full_shard": [139, 140], "zero3": 139, "bf16_readi": 139, "is_bf16_support": 139, "loosevers": 139, "is_nccl_avail": [139, 263], "mp_polici": [139, 140], "bfsixteen": 139, "mixed_precis": [139, 140], "current_devic": [139, 225], "adamw": [139, 179], "best_val_loss": 139, "inf": [139, 195, 276, 279], "curr_val_loss": 139, "file_save_nam": 139, "time_of_run": 139, "dur": 139, "train_acc_track": 139, "val_acc_track": 139, "training_start_tim": 139, "track_memori": 139, "mem_alloc_track": 139, "mem_reserved_track": 139, "run_valid": 139, "zone": 139, "memory_alloc": 139, "memory_reserv": 139, "save_polici": 139, "offload_to_cpu": 139, "rank0_onli": 139, "state_dict_typ": 139, "full_state_dict": [139, 140], "cpu_stat": 139, "currepoch": 139, "prefix": [139, 143, 147, 155, 188, 193, 195, 226, 240, 258, 259, 265, 267], "save_nam": 139, "store_fals": 139, "nnode": [139, 152, 174, 263, 265], "transfom": 139, "mhsa": 139, "ffn": [139, 199], "bfloat16": [139, 140, 202, 216, 225, 238, 248, 263, 267, 278], "v100": [139, 193], "fpsixteen": 139, "param_dtyp": [139, 140], "reduce_dtyp": [139, 140], "buffer_dtyp": [139, 140], "fp32_polici": 139, "grad_bf16": 139, "oom": [139, 169, 225], "freed": [139, 169], "backward_pr": [139, 140], "backward_prefetch": [139, 140], "backward_post": [139, 140], "contact": [139, 178, 287], "yifan": 140, "mao": 140, "fsdp": [140, 142, 150, 207, 208, 210], "unshard": [140, 196, 263], "recordstream": 140, "float8": 140, "nf4": 140, "qlora": 140, "fsdpmodul": 140, "fsdptransform": 140, "tok_embed": [140, 142, 174], "fsdptransformerblock": 140, "joint": [140, 250], "to_loc": 140, "clip_grad_norm_": [140, 178], "seq_len": 140, "queu": [140, 207], "set_modules_to_forward_prefetch": 140, "set_modules_to_backward_prefetch": 140, "perf": [140, 283], "layers_to_prefetch": 140, "num_to_forward_prefetch": 140, "num_to_backward_prefetch": 140, "upcast": 140, "model_arg": [140, 174], "fsdp_kwarg": 140, "mixedprecisionpolici": 140, "max_norm": 140, "resum": [140, 193, 208, 255], "distribute_tensor": 140, "mmap": 140, "full_sd": 140, "meta_sharded_sd": 140, "sharded_sd": 140, "param_nam": [140, 238], "full_tensor": 140, "sharded_meta_param": 140, "sharded_tensor": 140, "device_mesh": [140, 142, 210, 263], "full_param": 140, "cpu_state_dict": 140, "sharded_param": 140, "del": [140, 174, 178, 268], "set_model_state_dict": 140, "broadcast_from_rank0": 140, "statedictopt": 140, "get_model_state_dict": 140, "set_optimizer_state_dict": 140, "get_optimizer_state_dict": 140, "modulewrappolici": 140, "transformerblock": [140, 142], "param_init_fn": 140, "itertool": [140, 182], "to_empti": [140, 238, 285], "sublay": 140, "reshard_after_forward": 140, "hybrid_shard": 140, "_hybrid_shard_zero2": 140, "offload_polici": 140, "cpuoffloadpolici": 140, "cast_forward_input": 140, "cast_root_forward_input": 140, "output_dtyp": [140, 262, 265], "sync_module_st": 140, "rank0": [140, 180, 182, 265], "forward_prefetch": 140, "fsdp_modul": 140, "limit_all_gath": 140, "use_orig_param": 140, "flat": 140, "no_sync": [140, 241], "set_requires_gradient_sync": 140, "ignored_param": 140, "ignored_st": 140, "xilun": [141, 263], "roll": 141, "1k": [141, 142], "98304": 141, "96k": 141, "perf_count": 141, "logger": [141, 191], "getlogg": [141, 191], "var": 141, "preset": [141, 281], "env_rank": 141, "env_world_s": 141, "env_master_addr": 141, "env_master_port": 141, "23456": [141, 154], "tcp_store": 141, "is_mast": 141, "time_elaps": 141, "client": 141, "timeout": [141, 152, 175, 265], "store_based_barri": 141, "timedelta": [141, 265], "diststoreerror": 141, "_diststoreerror": 141, "_store_based_barri": 141, "group_nam": 141, "rendezvous_count": 141, "default_pg_timeout": 141, "logging_interv": 141, "store_kei": 141, "store_based_barrier_kei": 141, "worker_count": 141, "last_worker_kei": 141, "last_work": 141, "runtimeerror": [141, 175, 177, 255], "num_workers_join": 141, "tcpstore_test": 141, "number_run": 141, "spectrum": 141, "listen_fd": 141, "socket": [141, 154, 160, 241, 258], "listen_sock": 141, "af_inet": 141, "sock_stream": 141, "addr": [141, 265], "getsocknam": 141, "master_listen_fd": 141, "notimplementederror": 141, "gloo": [141, 152, 154, 175, 188, 196, 207, 259], "vairabl": 141, "plane": 141, "notifi": [141, 180], "wanchao": [142, 210], "liang": [142, 210], "tianyu": 142, "liu": 142, "megatron": 142, "lm": [142, 206], "sp": 142, "parallelstyl": 142, "parallelize_modul": 142, "foward": 142, "aris": [142, 195, 199, 255, 267, 276], "exceed": [142, 178], "domin": [142, 163, 191], "inter": [142, 151, 166, 199, 210, 241], "ballpark": 142, "flop": [142, 196, 252], "llm": [142, 174, 278], "trillion": [142, 150], "month": 142, "llama": [142, 199, 216, 281], "70b": 142, "2k": 142, "llama2": 142, "colwiseparallel": 142, "rowwiseparallel": 142, "sequenceparallel": 142, "rmsnormpython": 142, "preparemoduleinput": 142, "preparemoduleoutput": 142, "init_device_mesh": [142, 210, 263], "tp_mesh": [142, 210], "feedforward": 142, "swiglu": 142, "w2": 142, "silu": 142, "w1": 142, "w3": 142, "colwis": 142, "rowwis": 142, "parallelize_plan": 142, "layer_tp_plan": 142, "feed_foward": 142, "feed_forward": 142, "wq": 142, "wk": 142, "wv": 142, "wo": 142, "tp_plan": 142, "draft": [142, 154], "use_local_output": 142, "num_head": 142, "layer_id": [142, 174], "transformer_block": 142, "input_layout": 142, "output_layout": 142, "attention_norm": 142, "ffn_norm": 142, "desired_input_layout": 142, "yellow": 142, "red": [142, 147, 189, 222], "loss_parallel": 142, "seq": 142, "dp": [142, 265], "mesh_2d": [142, 210], "submesh": 142, "dp_mesh": 142, "model_tp": 142, "model_2d": 142, "broadli": 143, "torchviz": [143, 149], "orang": [143, 177], "_save": 143, "kept": [143, 265], "_saved_self": 143, "_saved_oth": 143, "cycl": [143, 188, 202, 226, 231], "thumb": [143, 161, 178, 225], "pack_hook": 143, "unpack_hook": 143, "silli": 143, "harmless": 143, "debat": 143, "__repr__": [143, 226], "152": 143, "48gb": 143, "5gb": 143, "6x": 143, "leak": 143, "autograd_saved_tensors_hooks_tutori": [143, 185, 261], "david": 144, "eriksson": 144, "balandat": 144, "methodologi": [144, 215], "laptop": 144, "sustain": [144, 207], "studi": [144, 176, 191], "botorch": 144, "bayesian": 144, "mnist_train_na": [144, 164, 185, 261], "appdef": 144, "kubernet": 144, "local_cwd": 144, "fetch": [144, 146, 180, 181, 182, 196, 250], "proxi": [144, 226, 245, 274, 277], "tensorboardcurvemetr": 144, "curve_nam": 144, "lower_is_bett": 144, "favor": [144, 166, 178, 195], "multiobjectiveoptimizationconfig": 144, "94": [144, 178, 214, 231], "generationstrategi": 144, "scheduleropt": 144, "max_pending_tri": 144, "pareto": 144, "frontier": 144, "surrog": 144, "uncertainti": 144, "95": [144, 161, 178, 182, 214, 262], "num_param": 144, "val_acc": 144, "contour": 144, "hidden_size_1": 144, "kiuk": 144, "chung": 144, "tristan": [144, 177], "rice": [144, 177], "ax_multiobjective_nas_tutori": [144, 164, 185, 261], "surnam": 145, "spell": 145, "lua": [145, 146, 184], "unreason": [145, 146], "roman": 145, "alphabet": 145, "n_letter": 145, "line_length": 145, "all_lett": 145, "linetotensor": 145, "namesdataset": 145, "20074": 145, "charrnn": 145, "label_from_output": 145, "histor": [145, 146], "all_loss": [145, 146], "minu": [145, 188], "bright": 145, "incorrectli": 145, "chines": [145, 146], "korean": 145, "italian": 145, "greek": 145, "poorli": 145, "gender": 145, "subreddit": 145, "char_rnn_classification_tutori": [145, 167, 185, 261], "russian": 146, "ru": 146, "rovakov": 146, "uantov": 146, "shavakov": 146, "german": 146, "ger": 146, "gerren": 146, "ereng": 146, "rosher": 146, "spa": 146, "salla": 146, "parer": 146, "allan": 146, "chi": 146, "chan": 146, "iun": 146, "category_lin": 146, "o2o": 146, "muscl": [146, 191], "fuzz": 146, "chao": 146, "abcd": 146, "eo": [146, 184], "n_categori": 146, "randomtrainingexampl": 146, "contrast": [146, 152, 171, 172, 195, 274], "timesinc": 146, "timestamp": [146, 159, 222], "print_everi": 146, "plot_everi": 146, "output_nam": 146, "fiction": 146, "countri": 146, "citi": 146, "char_rnn_generation_tutori": [146, 167, 185, 261], "simon": 147, "fan": [147, 177], "torch_log": [147, 195, 245, 247, 255, 260, 261, 278], "_dynamo": [147, 160, 193, 195, 245, 255], "compiled_autograd": 147, "intercept": 147, "bytecod": [147, 193], "aotdispatch": 147, "rout": [147, 160, 195], "rewritten": 147, "compiled_autograd_verbos": 147, "stderr": 147, "aot0_": 147, "aot0_view_2": 147, "view_2": 147, "aot": [147, 160, 252], "unoptim": [147, 193], "aot_eag": [147, 160], "fn": [147, 154, 158, 160, 193, 204, 250, 253, 268], "graph_break": [147, 255], "unique_graph": 147, "call_hook": 147, "div": [147, 160, 274, 277], "adjac": 148, "hardcod": [148, 195], "dilat": 148, "track_running_statist": 148, "denomin": 148, "nenadmarku": [148, 192], "bulk": 148, "fusedconvbn": 148, "geforc": 148, "rtx": 148, "3070": 148, "56gb": 148, "unfus": 148, "68gb": 148, "shallow": [148, 155], "custom_function_conv_bn_tutori": [148, 185, 261], "grad_out": 149, "finit": [149, 166], "differenc": 149, "magnifi": 149, "gradgradcheck": [149, 241], "grad_x": 149, "make_dot": 149, "dout": [149, 161], "ouptut": 149, "sinh": 149, "cosh": 149, "expx": 149, "expnegx": 149, "_grad_out_exp": 149, "_grad_out_negexp": 149, "sinhbad": 149, "cube_backward": 149, "cubebackward": 149, "cube_forward": 149, "cube_backward_backward": 149, "sav_grad_out": 149, "cube_backward_backward_grad_out": 149, "cube": 149, "dgrad_out": 149, "reachabl": [150, 151, 154], "2xlarg": [150, 151], "hydra": 150, "slurm": [150, 151, 152, 154], "char_dataset": 150, "gpt2_train_cfg": 150, "bucket": [150, 241], "aggress": 150, "rendezv": [151, 175], "nccl_debug": 151, "diagnos": 151, "nccl_socket_ifnam": 151, "eth0": 151, "joe": 152, "zhu": [152, 160], "chirag": [152, 265], "pandya": [152, 265], "clarifi": 152, "filestor": 152, "libtmp": 152, "some_fil": 152, "toymodel": [152, 207, 208, 210], "net1": [152, 207, 208, 209, 210], "net2": [152, 207, 208, 209, 210], "demo_bas": 152, "ddp_model": [152, 259], "loss_fn": [152, 174, 180, 207, 208, 259], "run_demo": 152, "demo_fn": 152, "caution": 152, "straggler": [152, 188], "inevit": 152, "spike": [152, 177], "AND": 152, "recoveri": 152, "torchelast": 152, "demo_checkpoint": 152, "checkpoint_path": 152, "gettempdir": 152, "toympmodel": 152, "dev0": 152, "dev1": 152, "output_devic": 152, "demo_model_parallel": 152, "mp_model": 152, "ddp_mp_model": 152, "n_gpu": 152, "elastic_ddp": 152, "rdzv_id": [152, 210], "rdzv_backend": 152, "rdzv_endpoint": [152, 210], "29400": [152, 210], "scontrol": 152, "hostnam": 152, "slurm_nodelist": 152, "srun": 152, "torchrun_script": 152, "s\u00e9b": 154, "arnold": 154, "sysadmin": 154, "coordin": [154, 186, 198, 258, 267, 277], "pdsh": 154, "clustershel": 154, "init_process": 154, "127": [154, 262], "set_start_method": 154, "ip": 154, "recv": [154, 174, 182], "irecv": 154, "dst": 154, "req": 154, "sent": [154, 172, 180, 195, 206], "behaviour": 154, "fanci": 154, "baidu": 154, "deepspeech": 154, "facebook": 154, "communc": 154, "new_group": [154, 174, 210], "commut": 154, "band": 154, "bor": 154, "bxor": 154, "premul_sum": 154, "scatter_list": 154, "gather_list": 154, "all_to_al": 154, "output_tensor_list": 154, "input_tensor_list": 154, "random_split": 154, "data_idx": 154, "datapartition": 154, "1234": 154, "data_len": 154, "part_len": 154, "partition_dataset": 154, "get_world_s": 154, "bsz": 154, "partition_s": 154, "train_set": [154, 188], "30000": [154, 178], "ceil": 154, "epoch_loss": 154, "average_gradi": 154, "voil\u00e0": 154, "send_buff": 154, "recv_buff": 154, "accum": [154, 278], "send_req": 154, "bandwidth": [154, 188, 196, 214, 289], "subsect": 154, "mpi": 154, "eleg": 154, "smi": [154, 225], "mvapich2": 154, "ipc": [154, 188], "recompil": [154, 193, 205, 245, 249, 250], "requisit": 154, "forg": [154, 258], "openmpi": 154, "mpirun": 154, "myscript": 154, "handshak": 154, "superflu": 154, "everybodi": 154, "readili": 154, "race": 154, "fcntl": 154, "nf": [154, 265], "sharedfil": 154, "everyon": 154, "unclear": [154, 195], "natalia": 154, "gimelshein": 154, "actor": 155, "carrier": [155, 178], "step_mdp": 155, "brought": [155, 172, 178, 195], "84x84": 155, "accessori": [155, 177], "inittrack": 155, "stamp": 155, "is_init": 155, "tensordictprim": 155, "primer": [155, 277], "disappear": 155, "lstmmodul": 155, "backbon": [155, 191], "flank": 155, "assist": [155, 210], "tensordictmodulebas": 155, "batch_first": 155, "make_tensordict_prim": 155, "qvaluemodul": 155, "action_valu": 155, "qvalueactor": 155, "set_recurrent_mod": 155, "uniniti": [155, 285], "dqnloss": 155, "delay_valu": 155, "lazymemmapstorag": 155, "dqn_with_rnn_tutori": [155, 185, 261], "tradition": [156, 285], "pretend": [156, 171], "stack_module_st": 156, "functional_cal": [156, 166, 171], "num_model": 156, "in_dim": [156, 161, 171, 287], "weren": [156, 171], "forced_alignment_tutori": 157, "incomplet": [158, 172], "eagerli": [158, 169, 195, 253], "alongsid": [158, 189, 191, 196, 225], "primal": [158, 161], "dual": 158, "dual_level": 158, "fresh": [158, 225], "check_forward_ad": 158, "check_backward_ad": 158, "check_undefined_grad": 158, "check_batched_grad": 158, "functorch": 158, "reformul": [158, 166], "ft": 158, "make_functional_with_buff": 158, "analog": [158, 195, 196, 276, 277], "consolid": [158, 180, 196], "dual_numb": 158, "forward_ad_usag": [158, 185, 261], "jame": 159, "reed": 159, "longest": 159, "nicer": 159, "tabul": [159, 193, 252, 265], "ca": 159, "graphmodul": [159, 262], "symbolic_trac": 159, "profilinginterpret": 159, "clock": [159, 226], "51393": 159, "happi": 159, "hear": 159, "tracker": [159, 200], "fx_profiling_tutori": [159, 185, 261], "xuan": 160, "liao": 160, "haozh": 160, "jiong": [160, 268, 278], "gong": [160, 268, 278], "weihan": 160, "intricaci": 160, "troubleshoot": 160, "pinpoint": [160, 195, 209], "narrow": [160, 195, 265, 279], "torch_compile_debug": 160, "xx": [160, 215], "ir": [160, 250], "_inductor": [160, 195, 216, 254, 268, 278], "model___20": 160, "torchinductor_root": 160, "rx": 160, "crxfi2ybd7yp5sbj2pnhw33wfhtdw7wumvrobyp5sjvdui5ktjc2": 160, "fx_graph_runn": 160, "fx_graph_transform": 160, "ir_pre_fus": 160, "ir_post_fus": 160, "output_cod": [160, 256, 278], "gv": 160, "cgv6n5aotqjo5w4vknjibhengeycuattfto532hkxpozszcgxr3x": 160, "tmp2": [160, 278], "tmp1": [160, 278], "exc": [160, 255], "backendcompilerfail": 160, "cppcompileerror": 160, "xg": 160, "cxga5tk3b4lkwoxyigrtocjp5s7vc5cg2ikuscf6bk6pjqip2bhx": 160, "unsign": [160, 226], "char": [160, 215], "max_propagate_nan": 160, "tmp3": [160, 278], "tmp0": [160, 278], "deduct": 160, "substitut": [160, 161, 169], "deduc": 160, "in_ptr0": 160, "in_ptr1": 160, "out_ptr0": 160, "pragma": [160, 278], "ivdep": [160, 278], "i0": 160, "0l": [160, 278], "8390l": 160, "1l": [160, 268, 278], "i1": 160, "8l": 160, "buf0": [160, 268], "schedulernod": 160, "computedbuff": 160, "memorydep": 160, "c0": 160, "67120": 160, "unmet_depend": 160, "met_depend": 160, "arg0_1": [160, 268], "8390": 160, "arg1_1": 160, "nodeus": 160, "can_inplac": 160, "buf0_loop_bodi": 160, "var_rang": 160, "z0": 160, "index0": 160, "index1": 160, "get_index": 160, "get_index_1": 160, "load_1": 160, "get_index_2": 160, "minifi": 160, "dead": 160, "minif": 160, "tol": 160, "test_script": 160, "expected_result": 160, "actual_result": 160, "torchdynamo_repro_aft": 160, "torchdynamo_repro_level": 160, "mobilebertforquestionansw": 160, "xeon": [160, 163, 202, 215, 260], "platinum": 160, "8358": 160, "60ghz": 160, "kmp_blocktim": [160, 241, 258], "kmp_set": 160, "kmp_affin": [160, 241, 258], "compact": [160, 241, 258], "ld_preload": [160, 241, 258], "conda_prefix": [160, 226], "libiomp5": [160, 241, 258], "libjemalloc": [160, 258], "malloc_conf": [160, 258], "oversize_threshold": [160, 258], "background_thread": [160, 258], "metadata_thp": [160, 258], "dirty_decay_m": 160, "muzzy_decay_m": 160, "numactl": [160, 241, 258], "bench": 160, "eager_t": 160, "num_it": [160, 178], "inductor_t": 160, "1023553796113": 160, "339": 160, "95180135127157": 160, "359459053287382": 160, "355x": 160, "enable_kernel_profil": 160, "73": [160, 182, 226, 283], "370": 160, "814m": 160, "362": 160, "89": [160, 182, 231], "161": 160, "276m": 160, "363": 160, "97": [160, 182, 214], "121": [160, 231], "416m": 160, "488": [160, 226], "154m": 160, "194": 160, "clamp_min": [160, 214], "444m": 160, "bmm": [160, 202, 226, 279], "258m": [160, 214], "810": 160, "920m": 160, "447m": 160, "_softmax": 160, "087m": 160, "376": 160, "888m": 160, "77": [160, 178], "430m": 160, "502m": 160, "161m": 160, "850": 160, "377m": 160, "386": [160, 182, 231], "index_select": 160, "000u": [160, 231], "986": 160, "420m": 160, "703": 160, "656": [160, 259], "963": 160, "864m": 160, "_mkl_linear": [160, 278], "231": [160, 226, 231], "573m": [160, 231], "992m": 160, "336": [160, 231], "642m": 160, "graph_0_cpp_fused_constant_pad_nd_embedding_0": 160, "915": 160, "911": 160, "graph_0_cpp_fused__mkl_linear_add_mul_relu_151": 160, "901": 160, "graph_0_cpp_fused__mkl_linear_add_mul_relu_226": 160, "graph_0_cpp_fused__mkl_linear_add_mul_relu_361": 160, "898": 160, "graph_0_cpp_fused__mkl_linear_add_mul_relu_121": 160, "895": 160, "graph_0_cpp_fused__mkl_linear_add_mul_relu_31": 160, "893": 160, "graph_0_cpp_fused__mkl_linear_add_mul_relu_76": 160, "892": [160, 177, 226], "graph_0_cpp_fused__mkl_linear_add_mul_relu_256": 160, "graph_0_cpp_fused__mkl_linear_add_mul_relu_346": 160, "graph_0_cpp_fused__mkl_linear_add_mul_relu_241": 160, "891": 160, "graph_0_cpp_fused__mkl_linear_add_mul_relu_316": 160, "graph_0_cpp_fused__mkl_linear_add_mul_relu_91": 160, "890": 160, "graph_0_cpp_fused__mkl_linear_add_mul_relu_106": 160, "graph_0_cpp_fused__mkl_linear_add_mul_relu_211": 160, "graph_0_cpp_fused__mkl_linear_add_mul_relu_61": 160, "889": 160, "graph_0_cpp_fused__mkl_linear_add_mul_relu_286": 160, "graph_0_cpp_fused_": 160, "63x": 160, "cblas_sgemm_comput": 160, "339m": 160, "94x": 160, "impress": [160, 195], "cpp_fused__mkl_linear_add_mul_relu_151": 160, "clrlgu27q4ggd472umdzwsu6qcpqxcuusjxqvx2hwitjbujiiz7z": 160, "bottl": [160, 207], "neck": [160, 207], "780875144992024": 160, "9588955780491233": 160, "0286805751604735": 160, "smallest": [160, 176], "solid": [160, 201], "analyt": 160, "hotspot": [160, 222], "phenomenon": 160, "inductor_debug_cpu": [160, 185, 261], "annoi": 161, "jax": [161, 166, 287], "compute_jac": 161, "xp": 161, "jacobian_row": 161, "unit_vector": 161, "5956": 161, "6096": 161, "1326": 161, "2295": 161, "4490": 161, "3661": 161, "1672": 161, "1705": 161, "6683": 161, "1851": 161, "1630": 161, "0634": 161, "6547": 161, "5908": 161, "1308": 161, "vjp_fn": 161, "ft_jacobian": 161, "argnum": 161, "millisecond": [161, 175, 241], "get_perf": 161, "first_descriptor": 161, "second_descriptor": 161, "final_gain": 161, "without_vmap": 161, "stmt": [161, 204, 226, 283], "with_vmap": 161, "no_vmap_tim": 161, "timeit": [161, 240], "with_vmap_tim": 161, "0x7f8669e3c8b0": 161, "43": [161, 178, 214, 226], "0x7f869a3ecf70": 161, "389": 161, "6945": 161, "ft_jac_weight": 161, "ft_jac_bia": 161, "rigor": 161, "taller": 161, "din": 161, "using_fwd": 161, "using_bwd": 161, "jacfwd_tim": 161, "jacrev_tim": 161, "0x7f869a0f3b20": 161, "738": 161, "0x7f869a024df0": 161, "1046": 161, "4030": 161, "0x7f869a03fee0": 161, "0x7f869a0fb250": 161, "1608": 161, "0263": 161, "hessiani": 161, "overwhelm": 161, "hess_api": 161, "hess_fwdfwd": 161, "hess_revrev": 161, "33": [161, 177, 178, 182, 185, 214, 226], "compute_batch_jacobian": 161, "batch_jacobian0": 161, "predict_with_output_sum": 161, "batch_jacobian1": 161, "movedim": 161, "compute_batch_hessian": 161, "batch_hess": 161, "hvp_revrev": 161, "result_hvp_revrev": 161, "jacobians_hessian": [161, 185, 261], "yuansong": 162, "steven": 162, "guo": 162, "cheatsheet": 162, "companion": 162, "bro": 162, "ne": [162, 184, 231], "emul": [162, 216], "tube": 162, "mushroom": 162, "screen": [162, 179, 222], "next_stat": [162, 179], "240": [162, 182, 231], "pipe": 162, "sky": 162, "grayscaleobserv": 162, "resizeobserv": 162, "skipfram": 162, "framestack": 162, "hi": [162, 279], "movement": 162, "exploration_r": 162, "he": [162, 184, 192], "marionet": 162, "ddqn": 162, "_e": 162, "argmax_": 162, "td_target": 162, "td_t": 162, "td_e": 162, "leftarrow": 162, "nabla": 162, "episod": [162, 179, 180, 182], "mario_rl_tutori": [162, 185, 261], "vitali": 163, "fedyunin": 163, "densest": 163, "4x4": 163, "10x3x16x16": 163, "768": [163, 283], "minor": [163, 182, 189, 215], "ambigu": [163, 275, 276], "n1hw": 163, "contrari": [163, 172, 176], "restrid": 163, "unintend": 163, "apex": 163, "main_amp": 163, "resnet50": [163, 177, 180, 215, 248], "o2": 163, "opt_level": 163, "keep_batchnorm_fp32": 163, "nonetyp": 163, "loss_scal": 163, "7603": 163, "cast_model_typ": 163, "patch_torch_funct": 163, "master_weight": 163, "125": [163, 231], "866": 163, "230": [163, 182, 191], "949": 163, "6735125184": 163, "6735": 163, "prec": 163, "259": 163, "562": 163, "773": 163, "481": 163, "355": 163, "693": 163, "6968704462": 163, "6852": 163, "55": [163, 178, 226, 258], "258": 163, "461": 163, "775": 163, "089": 163, "433": 163, "965": 163, "7877287269": 163, "7194": 163, "833": 163, "771": 163, "710": 163, "487": 163, "8285319805": 163, "7467": 163, "260": [163, 182], "380": 163, "770": 163, "090": 163, "525": 163, "908": 163, "7370464802": 163, "7447": 163, "360": 163, "623": 163, "555": 163, "728": 163, "7592862844": 163, "7472": 163, "917": 163, "345": [163, 178, 198], "774": 163, "746": [163, 226], "115": [163, 178, 214], "9698858261": 163, "9218": 163, "324": 163, "597": 163, "659": 163, "2505953312": 163, "0879": 163, "52": [163, 178, 214], "767": 163, "785": 163, "7579724789": 163, "7580": 163, "198": 163, "482": 163, "135": [163, 177, 226], "414": 163, "716": [163, 214, 226], "7007197738": 163, "7293": 163, "250": [163, 182, 231], "387": 163, "1010": 163, "516": 163, "7113101482": 163, "7233": 163, "667": 163, "197": 163, "340": [163, 178], "1013": 163, "023": 163, "588": 163, "333": 163, "8943189979": 163, "7661": 163, "541": 163, "7113249302": 163, "9551": 163, "1011": 163, "163": 163, "683": 163, "574": 163, "8537774086": 163, "7716": 163, "279": 163, "453": 163, "7595844269": 163, "3413": 163, "429": 163, "269": 163, "827": 163, "743": 163, "883": 163, "8196096420": 163, "4011": 163, "volta": [163, 225, 241], "alexnet": 163, "mnasnet0_5": 163, "mnasnet0_75": 163, "mnasnet1_0": 163, "mnasnet1_3": 163, "mobilenet_v2": [163, 177, 198, 288], "resnet101": 163, "resnet152": 163, "resnet34": 163, "resnext50_32x4d": 163, "shufflenet_v2_x0_5": [163, 177], "shufflenet_v2_x1_0": [163, 177], "shufflenet_v2_x1_5": [163, 177], "shufflenet_v2_x2_0": [163, 177], "squeezenet1_0": 163, "squeezenet1_1": 163, "vgg11": 163, "vgg11_bn": 163, "vgg13": 163, "vgg13_bn": 163, "vgg16": 163, "vgg16_bn": 163, "vgg19_bn": 163, "wide_resnet101_2": 163, "wide_resnet50_2": 163, "ic": 163, "lake": [163, 215], "densenet121": 163, "densenet161": 163, "densenet169": 163, "googlenet": [163, 177], "inception_v3": [163, 177], "resnext101_32x8d": [163, 177], "spite": 163, "nc11": 163, "memory_format_tutori": [163, 185, 261], "year": [166, 170, 199], "j_": 166, "diagon": 166, "beforehand": 166, "asymptot": 166, "i_o": 166, "i_": 166, "e_o": 166, "textrm": 166, "_o": 166, "tensorfloat": 166, "sacrific": 166, "empirical_ntk_ntk_vp": 166, "luck": [166, 169, 196], "altogeth": [166, 276], "neural_tangent_kernel": [166, 185, 261], "french": [167, 184], "seq2seq_translation_tutori": [167, 184, 185, 261], "homepag": [168, 264], "ooz": 169, "_might_": 169, "2p": 169, "ephemer": 169, "timelin": [169, 188, 222], "memory_viz": 169, "devot": 169, "bat": [169, 269], "2gb": [169, 177], "6gb": 169, "foreach": [169, 213], "reveal": [169, 183, 193, 224, 226], "silver": [169, 200], "bullet": 169, "sizabl": [169, 172], "tantamount": 169, "eat": 169, "lora": 169, "unlock": [169, 281], "vit_l_16": 169, "neat": 169, "slate": 169, "woohoo": 169, "apart": 169, "shrunk": 169, "0gb": 169, "optimizer_step_in_backward_tutori": [169, 185, 261], "lezcano": 170, "surprisingli": 170, "ill": 170, "frobeniu": 170, "spectral": 170, "lipschitz": 170, "x\u1d40": 170, "upper": [170, 183, 195, 231], "triangular": 170, "reimplement": [170, 176, 195], "skew": [170, 188, 231], "unparametr": 170, "linearsymmetr": 170, "moduledict": [170, 174, 283], "parametrizationlist": [170, 283], "modulelist": 170, "inbuilt": 170, "caylei": 170, "spd": 170, "right_invers": 170, "succinctli": 170, "relax": [170, 255], "remove_parametr": 170, "parametri": 170, "leave_parametr": 170, "privaci": [171, 176], "sample_grad": 171, "compute_loss": 171, "ft_compute_grad": 171, "0th": [171, 176, 183, 279], "25x": [171, 191, 283], "opacu": 171, "per_sample_grad": [171, 185, 261], "cpu_tensor": 172, "cuda_tensor": [172, 241], "erron": 172, "carefulli": [172, 241], "distinguish": [172, 182, 189], "isol": [172, 193], "illus": 172, "anywher": 172, "cudastreamsynchron": 172, "dma": 172, "volterra": 172, "tesla": 172, "h100": [172, 193], "t3_cuda": 172, "belief": [172, 195], "brand": 172, "cudahostalloc": 172, "cudamemcpi": 172, "doubt": 172, "interestingli": 172, "pronounc": 172, "tick": 172, "__whenev": 172, "memory__": 172, "corrupt": 172, "garbag": 172, "reliabl": [172, 226], "annihil": 172, "legitim": 172, "notori": 172, "inher": [172, 195, 196, 208], "blockag": 172, "afterward": [172, 195, 266], "non_blocking_pin": 172, "ration": 172, "outweigh": [172, 214], "perman": [172, 176], "shuttl": 172, "expedit": 172, "advers": 172, "bu": 172, "monopol": 172, "pinmem_nonblock": [172, 185, 261], "huang": [174, 175, 207, 208, 263], "microbatch": 174, "micro": 174, "educ": [174, 199], "dataclass": 174, "modelarg": 174, "n_head": 174, "witout": 174, "layernorm": [174, 199, 283], "splitpoint": 174, "pipelinestag": 174, "schedulegpip": 174, "pp_group": 174, "stage_index": 174, "num_stag": 174, "init_distribut": 174, "peer": [174, 259], "manual_model_split": 174, "tracer": 174, "split_spec": 174, "4th": [174, 202], "mirror": 174, "build_stag": 174, "gpipe": 174, "1f1b": 174, "interleaved1f1b": 174, "loopedbf": 174, "num_microbatch": 174, "example_input_microbatch": 174, "tracer_model_split": 174, "tokenwise_loss_fn": 174, "n_microbatch": 174, "pipelining_tutori": 174, "tian": 175, "si": 175, "zeroredundancyoptim": [175, 260], "processgroupnccl": 175, "processgroupgloo": 175, "processgroupmpi": 175, "ucc": 175, "oneccl": [175, 241], "trainum": 175, "emerg": 175, "backenddummi": 175, "chrono": 175, "outputtensor": [175, 288], "inputtensor": [175, 288], "allgatheropt": 175, "allreduceopt": 175, "workdummi": 175, "optyp": 175, "ivalu": [175, 215, 288], "recvanysourc": 175, "future_": 175, "iscomplet": 175, "issuccess": 175, "kunsettimeout": 175, "getfutur": 175, "outputtensorvec": 175, "make_intrus": 175, "listtyp": 175, "tensortyp": 175, "markcomplet": 175, "createbackenddummi": 175, "backenddummyconstructor": 175, "__attribute__": 175, "register_backend": 175, "cpp_function": [175, 226], "libraries_dir": 175, "abspath": 175, "dummy_collect": 175, "michela": 176, "paganini": 176, "biolog": 176, "batteri": 176, "subnetwork": 176, "lotteri": 176, "ticket": 176, "destruct": [176, 258], "0a0": [176, 288], "8e8a5e0": 176, "lecun": 176, "1998": 176, "unprun": 176, "basepruningmethod": 176, "adequ": [176, 178], "weight_orig": 176, "_orig": 176, "intact": [176, 180, 238], "weight_mask": 176, "_mask": 176, "forward_pre_hook": 176, "l1_unstructur": 176, "bias_orig": 176, "bias_mask": 176, "pruningcontain": 176, "compute_mask": 176, "ln_structur": 176, "undo": 176, "reassign": 176, "global_unstructur": 176, "apply_mask": 176, "unstructur": 176, "preprun": 176, "pruning_typ": 176, "pruning_tutori": [176, 185, 261], "sink": 177, "5v": 177, "sd": 177, "card": [177, 183], "8gb": 177, "arm": [177, 214], "64bit": 177, "aarch64": 177, "arm64": [177, 288], "raspberrypi": 177, "raspios_arm64": 177, "rpi": 177, "sdcard": 177, "start_x": 177, "128m": 177, "gpu_mem": 177, "commment": 177, "camera_auto_detect": 177, "v4l2": 177, "reboot": 177, "video4linux2": 177, "video0": 177, "picamera": 177, "36fp": 177, "30fp": 177, "framer": 177, "cv2": 177, "cap": [177, 178, 188], "videocaptur": 177, "cap_prop_frame_width": 177, "cap_prop_frame_height": 177, "cap_prop_fp": 177, "bgr": 177, "ret": [177, 180], "input_tensor": 177, "input_batch": 177, "qnnpack": [177, 262], "mobilenet_v3_larg": 177, "109": 177, "233": [177, 182], "885": [177, 214], "204": [177, 214, 226], "195": [177, 182], "132": 177, "prequant": 177, "20fp": 177, "cap_v4l2": 177, "last_log": 177, "frame_count": 177, "ui": [177, 188, 222, 239, 260], "htop": 177, "mug": 177, "allevi": [177, 200], "set_num_thread": 177, "repetit": [178, 226], "maximis": 178, "clipppoloss": 178, "theta_k": 178, "pi_": 178, "lingua": 178, "franca": 178, "defaultdict": [178, 283], "normalparamextractor": 178, "replaybuff": 178, "samplerwithoutreplac": 178, "lazytensorstorag": 178, "explorationtyp": 178, "set_exploration_typ": 178, "probabilisticactor": 178, "tanhnorm": 178, "gae": 178, "is_fork": 178, "get_start_method": 178, "fork": [178, 179, 258], "num_cel": 178, "3e": 178, "max_grad_norm": 178, "sub_batch_s": 178, "cardin": [178, 196], "clip_epsilon": 178, "lmbda": 178, "entropy_ep": 178, "deepmind": [178, 186], "interchang": 178, "panel": [178, 188], "base_env": 178, "inverteddoublependulum": 178, "unmaintain": 178, "vast": [178, 196, 277], "migration_guid": 178, "transmit": 178, "gymwrapp": 178, "loos": 178, "supplementari": 178, "reduce_dim": 178, "cat_dim": 178, "stringent": 178, "unboundedcontinu": 178, "continuousbox": 178, "step_count": 178, "boundeddiscret": 178, "int64": [178, 277], "data_cl": 178, "full_state_spec": 178, "full_action_spec": 178, "boundedcontinu": 178, "670": 178, "succeed": 178, "n_step": [178, 180, 182], "mu_": 178, "d_ob": 178, "d_action": 178, "mu": [178, 191], "actor_net": 178, "lazylinear": 178, "policy_modul": 178, "distribution_class": 178, "distribution_kwarg": 178, "return_log_prob": 178, "prob": [178, 180, 182, 189], "discount": [178, 179, 180], "amort": [178, 180], "value_net": 178, "value_modul": 178, "action_log_prob": 178, "datacollector": 178, "multisyncdatacollector": 178, "split_traj": 178, "refil": 178, "max_siz": 178, "value_target": 178, "advantage_modul": 178, "value_network": 178, "average_ga": 178, "actor_network": 178, "critic_network": 178, "entropy_bonu": 178, "entropy_coef": 178, "critic_coef": 178, "loss_critic_typ": 178, "smooth_l1": 178, "cosineannealinglr": 178, "384": [178, 255, 283], "critic_coeff": 178, "450": 178, "entropy_coeff": 178, "pbar": 178, "eval_str": 178, "tensordict_data": 178, "data_view": 178, "subdata": 178, "loss_valu": 178, "loss_object": 178, "loss_crit": 178, "loss_entropi": 178, "cum_reward_str": 178, "stepcount_str": 178, "lr_str": 178, "horizon": 178, "eval_rollout": 178, "set_descript": 178, "62it": 178, "7838": 178, "0827": 178, "0003": 178, "317": 178, "29it": 178, "1077": 178, "325": [178, 214], "46it": 178, "1470": 178, "330": [178, 267], "76it": 178, "1748": 178, "334": 178, "99it": 178, "2213": 178, "337": 178, "13it": 178, "2142": [178, 278], "44it": 178, "2353": 178, "86it": 178, "2432": 178, "30it": 178, "2321": 178, "342": 178, "04it": 178, "2608": 178, "343": 178, "87it": 178, "297": [178, 214], "5503": 178, "2541": 178, "24it": 178, "2607": 178, "344": 178, "2668": 178, "83it": 178, "2740": 178, "42": [178, 179, 182, 226], "06it": 178, "2713": 178, "16000": [178, 226], "34it": 178, "2688": 178, "17000": 178, "64it": 178, "2831": 178, "18000": [178, 240], "346": 178, "08it": 178, "2754": 178, "19000": 178, "09it": 178, "2854": 178, "60it": 178, "21000": 178, "26it": 178, "306": 178, "7521": 178, "2711": 178, "22000": 178, "53it": 178, "2764": 178, "23000": 178, "25it": 178, "2722": 178, "69": [178, 226], "24000": [178, 226, 240], "21it": 178, "2750": 178, "62": [178, 182, 283], "25000": 178, "28it": 178, "2981": 178, "26000": 178, "90it": 178, "3021": 178, "27000": 178, "3149": 178, "106": [178, 214], "28000": 178, "23it": 178, "3144": 178, "29000": 178, "07it": 178, "111": [178, 182, 226, 258], "2986": 178, "31000": 178, "56it": 178, "531": 178, "5626": 178, "3008": 178, "32000": 178, "72it": 178, "3059": 178, "33000": 178, "341": 178, "3091": 178, "34000": 178, "37it": 178, "3039": 178, "35000": 178, "17it": 178, "36000": [178, 226], "69it": 178, "3135": 178, "37000": 178, "49it": 178, "2948": 178, "38000": 178, "74it": 178, "3005": 178, "39000": 178, "348": 178, "3049": 178, "40000": [178, 226], "91it": 178, "3087": 178, "103": [178, 226], "41000": [178, 226], "68it": 178, "288": 178, "0153": 178, "3158": 178, "117": 178, "42000": 178, "88it": 178, "3117": 178, "43000": 178, "32it": 178, "3171": 178, "182": 178, "44000": 178, "3184": 178, "90": [178, 182, 214], "45000": 178, "02it": 178, "3186": 178, "137": [178, 182], "46000": 178, "54it": 178, "3086": 178, "47000": 178, "3092": 178, "48000": 178, "3151": 178, "114": 178, "49000": 178, "01it": 178, "3193": 178, "3228": 178, "188": [178, 226], "videorecord": 178, "424": [178, 185, 240, 261], "reinforcement_ppo": [178, 185, 261], "tower": 179, "cart": 179, "pole": 179, "upright": 179, "classic_control": 179, "action_spac": 179, "observation_spac": 179, "decorrel": 179, "replaymemori": 179, "cyclic": 179, "formul": 179, "r_": 179, "t_0": 179, "r_t": 179, "uncertain": 179, "tempor": 179, "max_a": 179, "univers": [179, 191], "obei": 179, "bellman": 179, "huber": 179, "noisi": [179, 226, 240], "mathcal": 179, "le": [179, 184], "mathrm": 179, "select_act": [179, 180, 182], "eps_start": 179, "eps_end": 179, "eps_decai": 179, "plot_dur": 179, "underneath": [179, 195], "tau": 179, "optimize_model": 179, "s_t": 179, "a_t": 179, "num_episod": [179, 180], "target_net": 179, "reinforcement_q_learn": [179, 185, 261], "calle": [180, 181, 206], "unblock": 180, "idl": [180, 188, 231], "callback": 180, "paus": 180, "update_and_fetch_model": 180, "future_model": 180, "batch_update_s": 180, "batchupdateparameterserv": 180, "curr_update_s": 180, "ps_rref": 180, "local_valu": [180, 181], "fut": [180, 182], "setti": 180, "set_result": 180, "rpc_sync": [180, 181, 182, 206], "image_w": 180, "image_h": 180, "one_hot_indic": 180, "random_": 180, "get_worker_info": [180, 182], "543": 180, "affine1": [180, 182], "affine2": [180, 182], "action_scor": [180, 182], "govern": 180, "select_action_batch": 180, "shortli": 180, "run_episod": [180, 182], "agent_rref": [180, 182], "ep_reward": [180, 182], "num_step": 180, "start_step": 180, "from_numpi": [180, 182], "curr_reward": 180, "saved_log_prob": [180, 182], "rob": 180, "ob_rref": [180, 182], "running_reward": [180, 182], "ob_rank": [180, 182], "ob_info": [180, 182], "observer_nam": [180, 182], "future_act": 180, "pending_st": 180, "select_acion": 180, "ob_id": [180, 182], "log_prob": [180, 182], "stitch": [180, 181], "async": [180, 182, 196, 207, 241], "oberv": [180, 182], "wait_al": 180, "policy_loss": [180, 182], "passiv": [180, 182], "run_work": [180, 181, 182, 206], "n_episod": 180, "print_log": 180, "init_rpc": [180, 181, 182, 206], "agent_nam": [180, 182], "i_episod": [180, 182], "last_reward": [180, 182], "tlast": [180, 182], "taverag": [180, 182], "shutdown": [180, 181, 182, 206], "tik": [180, 206], "tok": [180, 206], "dist_autograd": [181, 182], "num_gpu": 181, "dropout2d": 181, "next_devic": 181, "caller": [181, 206], "call_method": 181, "remote_method": 181, "foo_inst": 181, "parameterserv": 181, "input_devic": 181, "intention": [181, 182, 206], "miscellan": 181, "get_dist_gradi": 181, "get_gradi": 181, "get_param_rref": 181, "cid": 181, "cpu_grad": 181, "k_cpu": 181, "v_cpu": 181, "paramt": 181, "param_rref": [181, 182], "run_parameter_serv": 181, "param_serv": 181, "global_lock": 181, "get_parameter_serv": 181, "parameter_serv": 181, "shut": 181, "offlin": 181, "trainernet": 181, "param_server_rref": 181, "get_global_param_rref": 181, "paramat": 181, "remote_param": [181, 182], "model_output": 181, "run_training_loop": 181, "nueral": 181, "context_id": [181, 182], "get_accuraci": 181, "correct_sum": 181, "trainer_": 181, "traffic": 181, "listen": 181, "subprocess": [181, 226, 241], "rpc_parameter_serv": 181, "solver": 182, "formatter_class": 182, "argumentdefaultshelpformatt": 182, "log_interv": 182, "report_reward": 182, "_max_episode_step": 182, "lifetim": 182, "finfo": 182, "reward_threshold": 182, "finish_episod": 182, "min_reward": 182, "surpass": 182, "ob": 182, "ctrl": 182, "475": 182, "131": 182, "130": [182, 214], "140": 182, "104": 182, "170": [182, 198], "126": 182, "180": [182, 195, 214, 226], "213": 182, "322": [182, 214], "165": 182, "272": [182, 214], "210": 182, "168": [182, 258], "184": 182, "208": [182, 191, 224], "270": [182, 191], "405": 182, "280": 182, "290": 182, "464": 182, "3163778435275": 182, "embeddingt": 182, "destin": [182, 206], "rnnmodel": 182, "ntoken": 182, "ninp": 182, "nhid": 182, "nlayer": 182, "emb_table_rref": 182, "decoder_rref": 182, "_remote_method": 182, "rremot": 182, "_parameter_rref": 182, "parameter_rref": [182, 206], "run_train": 182, "nindic": 182, "driss": 183, "guessou": 183, "multiheadattent": 183, "flashattent": 183, "flash": [183, 267], "andrej": 183, "karpathi": 183, "nanogpt": 183, "causalselfattent": 183, "mine": 183, "166": 183, "616": 183, "726": 183, "amaz": 183, "prof": [183, 214, 231], "export_chrome_trac": 183, "compiled_causal_attention_trac": 183, "concentr": 183, "6090": 183, "49m": 183, "3273": 183, "17m": 183, "commit": [183, 202, 289], "ae3a8d5": 183, "causal_upper_left": 183, "causal_lower_right": 183, "is_caus": [183, 199, 263], "causalbia": 183, "corner": 183, "attn_scor": 183, "sdpa_kernel": [183, 263], "scaled_dot_product_attention_tutori": [183, 185, 261], "il": 184, "est": [184, 188], "peindr": 184, "tableau": 184, "paint": 184, "pourquoi": 184, "pa": 184, "essay": 184, "vin": 184, "delicieux": 184, "delici": 184, "wine": 184, "poet": 184, "romancier": 184, "she": 184, "novelist": 184, "vou": 184, "trop": 184, "maigr": 184, "skinni": 184, "condens": [184, 240], "unfold": 184, "phrase": 184, "tatoeba": 184, "eng": 184, "manyth": 184, "anki": 184, "fra": 184, "froid": 184, "dozen": 184, "trim": [184, 240], "lang": 184, "word2index": 184, "index2word": 184, "word2count": 184, "apostroph": 184, "je": 184, "sui": 184, "noir": 184, "attn_appli": 184, "exhibit": 184, "coher": 184, "grammar": 184, "wander": 184, "freedom": 184, "plot_loss": 184, "judgement": 184, "matshow": 184, "iot": 184, "word2vec": 184, "glove": 184, "autoencod": 184, "992": [185, 259], "torch_compile_tutori": [185, 193, 261], "torch_export_tutori": [185, 194, 195, 261], "sdpa": [185, 199, 261, 263], "transformer_building_block": [185, 199, 261], "spatial_transformer_tutori": [185, 186, 261], "visualizing_gradients_tutori": [185, 200, 261], "na": [185, 261], "sphx_glr_intermediate_mnist_train_na": [185, 261], "tensorboard_profiler_tutori": [185, 188, 261], "torch_compile_conv_bn_fus": [185, 192, 261], "torchrec_intro_tutori": [185, 196, 261], "ghassen": 186, "hamrouni": 186, "geometr": 186, "invari": [186, 275], "boil": 186, "affine_grid": 186, "grid_sampl": 186, "speech_recognition_pipeline_tutori": 187, "perfetto": 188, "warmup": [188, 199, 204, 205, 213, 214, 231, 253, 254], "on_trace_readi": [188, 231], "tensorboard_trace_handl": 188, "record_shap": [188, 231], "profile_memori": [188, 231], "dealloc": [188, 241], "torch_tb_profil": 188, "safari": 188, "pytorch_profil": 188, "dropdown": 188, "callstack": 188, "sm": 188, "multiprocessor": 188, "occup": 188, "tooltip": 188, "toolbar": 188, "keyboard": 188, "mous": 188, "resnet18_4work": 188, "76m": 188, "132m": 188, "azur": 188, "torchtbprofil": 188, "memory_demo_1_10": 188, "gpu0": 188, "children": [188, 231], "distributed_bert": 188, "docker": 188, "profiler_tutori": 188, "test_cifar10": 188, "vi": 188, "hub": [188, 216], "kfd": 188, "sys_ptrac": 188, "seccomp": 188, "unconfin": 188, "shm": [188, 206], "8g": 188, "apt": [188, 191, 258], "libjpeg": 188, "whl": [188, 193, 196, 267], "rocm5": 188, "scp": 188, "testset": 189, "testload": 189, "plot_classes_pr": 189, "four_fashion_mnist_imag": 189, "refresh": [189, 196], "datapoint": 189, "thoroughli": 189, "images_to_prob": 189, "preds_tensor": 189, "el": 189, "fig": 189, "arang": 189, "xtick": 189, "ytick": 189, "set_titl": 189, "1f": 189, "add_figur": 189, "global_step": [189, 239], "scroll": 189, "test_siz": 189, "class_prob": 189, "class_probs_batch": 189, "test_prob": 189, "test_label": 189, "add_pr_curve_tensorboard": 189, "class_index": 189, "tensorboard_truth": 189, "tensorboard_prob": 189, "add_pr_curv": 189, "poke": 189, "tacotron2_pipeline_tutori": 190, "wsi": 191, "tissu": 191, "surgeri": 191, "biopsi": 191, "scanner": 191, "pathologist": 191, "diseas": 191, "cancer": 191, "microscop": 191, "tumor": 191, "growth": [191, 277], "treatment": [191, 276, 277], "patient": 191, "000x100": 191, "25x0": 191, "micron": 191, "pyramid": 191, "magnif": 191, "sketch": 191, "histoencod": 191, "jopo666": 191, "openjpeg": 191, "openslid": 191, "pixman": 191, "qq": 191, "libopenjp2": 191, "libpixman": 191, "echo": 191, "brew": 191, "__future__": [191, 230, 238], "hashandl": 191, "nopython": 191, "shutil": 191, "zipfil": 191, "mpl": 191, "cm": 191, "sklearn": 191, "accuracy_scor": 191, "confusion_matrix": 191, "patch_predictor": 191, "iopatchpredictorconfig": 191, "misc": 191, "download_data": 191, "grab_files_from_dir": 191, "overlay_prediction_mask": 191, "wsicor": 191, "wsiread": 191, "rcparam": 191, "dpi": 191, "facecolor": 191, "on_gpu": 191, "suppress": 191, "overli": 191, "suppress_console_output": 191, "redirect_stderr": 191, "stringio": 191, "abnorm": [191, 222], "global_save_dir": 191, "rmdir": 191, "dir_path": 191, "is_dir": 191, "rmtree": 191, "kather": 191, "100k": 191, "wsi_path": 191, "sample_wsi": 191, "sv": 191, "patches_path": 191, "kather100k": 191, "weights_path": 191, "dc": 191, "warwick": 191, "uk": 191, "tcga": 191, "3l": 191, "aa1b": 191, "01z": 191, "dx1": 191, "8923a151": 191, "a690": 191, "40b7": 191, "9e5a": 191, "fcbedfc2394f": 191, "extractal": 191, "pc": 191, "label_list": 191, "patch_list": 191, "dataset_path": 191, "image_ext": 191, "tif": 191, "label_dict": 191, "glass": 191, "mucosa": 191, "deb": 191, "debri": 191, "tum": 191, "colorect": 191, "adenocarcinoma": 191, "epithelium": 191, "adi": 191, "adipos": 191, "muc": 191, "mucu": 191, "stroma": 191, "lym": 191, "lymphocyt": 191, "dataset_class_path": 191, "patch_list_single_class": 191, "file_typ": 191, "xlabel": 191, "ylabel": 191, "211": [191, 214, 231], "176": 191, "178": 191, "209": 191, "232": [191, 226], "abc": 191, "modelabc": 191, "tia": 191, "toolbox": 191, "readthedoc": 191, "_autosummari": 191, "models_abc": 191, "preproc_func": 191, "predictor": [191, 255], "pretrained_weight": 191, "cnnmodel": 191, "fromarrai": 191, "conf": 191, "df_cm": 191, "215": 191, "993000": 191, "000000": 191, "00000": 191, "988636": 191, "011364": 191, "991304": 191, "008696": 191, "996503": 191, "003497": 191, "004808": 191, "990385": 191, "988764": 191, "011236": 191, "996296": 191, "003704": 191, "004785": 191, "985646": 191, "004310": 191, "99569": 191, "input_resolut": 191, "patch_input_shap": 191, "stride_shap": 191, "wsi_ioconfig": 191, "mpp": 191, "return_prob": 191, "ioconfig": 191, "greatest": [191, 225], "unnecessari": [191, 195, 199, 206, 244, 258], "merge_predict": 191, "wsi_output": 191, "wsi_predict": 191, "overlai": 191, "overlay_patch_predict": 191, "overview_resolut": 191, "overview_unit": 191, "wsi_overview": 191, "slide_thumbnail": 191, "label_color_dict": 191, "get_cmap": 191, "set1": 191, "pred_map": 191, "label_info": 191, "return_ax": 191, "histologi": 191, "pohjonen": 191, "joona": 191, "helsinki": 191, "umap": 191, "semantic_segmentor": 191, "deepfeatureextractor": 191, "iosegmentorconfig": 191, "histoencwrapp": 191, "histoenc": 191, "feat_extract": 191, "extract_featur": 191, "num_block": 191, "avg_pool": 191, "infer_batch": 191, "batch_data": 191, "img_patches_devic": 191, "inference_mod": [191, 283], "create_encod": 191, "prostate_medium": 191, "662": 191, "446": 191, "605": 191, "169": [191, 214], "155": 191, "output_resolut": 191, "patch_output_shap": 191, "auto_generate_mask": 191, "otsu": 191, "num_loader_work": 191, "num_postproc_work": 191, "wsi_featur": 191, "umap_reduc": 191, "n_neighbor": 191, "n_compon": 191, "manhattan": 191, "random_st": 191, "fit_transform": 191, "npy": 191, "feat": 191, "5mpp": 191, "4mpp": 191, "histolog": 191, "horac": 192, "clariti": 192, "batch_norm": [192, 231], "conv_bn_pattern": 192, "conv_bn_replac": 192, "conv_weight": 192, "out_channel": 192, "in_channel": 192, "kernel_h": 192, "kernel_w": 192, "conv_bia": 192, "bn_mean": 192, "bn_var": 192, "bn_weight": 192, "bn_bia": 192, "num_featur": 192, "simplif": 192, "example_input": [192, 216, 262, 281], "conclus": 192, "william": [193, 195, 253], "devel": 193, "elsewher": 193, "torchinductor": [193, 241, 249, 268, 269, 278], "torchtriton": 193, "cu117": 193, "opt_mod": 193, "complex_funct": 193, "complex_conjug": 193, "outer_funct": 193, "_orig_": 193, "dashboard": [193, 239], "struggl": 193, "fn1": 193, "fn2": 193, "f2": 193, "disallow": 193, "zhengxu": 195, "angela": [195, 254], "pian": 195, "pawakapan": 195, "synonym": 195, "dynamic_shap": [195, 255], "graph_signatur": 195, "range_constraint": 195, "stronger": [195, 255], "safeti": [195, 255], "cond": 195, "predic": 195, "true_fn": 195, "false_fn": 195, "while_loop": 195, "associative_scan": 195, "adher": [195, 285], "x0": [195, 198, 278], "x1": [195, 198, 278], "s0": 195, "s1": [195, 277], "x2": 195, "x3": 195, "s3": 195, "s5": 195, "proof": 195, "_log": [195, 256], "set_log": 195, "spit": 195, "create_symbol": 195, "int_oo": 195, "2841": 195, "runtime_assert": 195, "ncreate_symbol": 195, "nruntime_assert": 195, "dynamic_shapes_tutori": 195, "_subclass": [195, 255], "fake_impl": 195, "845": 195, "infer_s": [195, 240], "torchdynamo_extended_debug_guard_ad": 195, "_meta_registr": 195, "2127": 195, "meta_mm": 195, "marker": 195, "aliv": 195, "attract": 195, "friction": 195, "believ": [195, 275], "stanc": [195, 253], "constraintviol": 195, "unrel": [195, 253], "univari": 195, "diverg": [195, 226, 274, 276], "tolist": [195, 283], "unbind": 195, "unback": 195, "nomenclatur": 195, "absenc": [195, 209, 224], "u0": 195, "unhint": 195, "is_compil": 195, "invas": 195, "smart": 195, "bypass": [195, 278], "offend": 195, "smarter": 195, "prevail": 195, "prohibit": 195, "_check_is_s": 195, "guard_size_oblivi": 195, "starter": 195, "guardondatadependentsymnod": 195, "_schema": 195, "is_mut": 195, "export_for_train": 195, "run_decomposit": 195, "mutabl": 195, "conv1d": [195, 202, 241], "cond_pred": 195, "tensorrt": [195, 262], "pt2_path": 195, "aoti_compile_and_packag": [195, 254], "compiler_aot_inductor": 195, "aoti_compil": 195, "aoti_load_packag": [195, 254], "cu121": [196, 267], "fbgemm_gpu": 196, "torchmetr": 196, "relationship": 196, "hash": 196, "conjunct": [196, 241, 265, 266], "ctr": 196, "dlrm": [196, 241], "embedding_collect": 196, "embedding_bag_collect": 196, "collis": [196, 240], "80g": 196, "embeddingcollect": 196, "jaggedtensor": 196, "keyedjaggedtensor": 196, "keyedtensor": 196, "product_t": 196, "user_t": 196, "id_list_featur": 196, "id_score_list_featur": 196, "id_list_feature_offset": 196, "q1": 196, "product_jt": 196, "user_jt": 196, "q2": 196, "reread": 196, "to_dict": 196, "congrat": 196, "pat": 196, "grasp": [196, 201], "scarc": [196, 207], "hbm": 196, "gb": [196, 199], "shardedembeddingbagcollect": 196, "incredibli": 196, "ton": 196, "everytim": 196, "await": 196, "input_dist": 196, "tbe": 196, "output_dist": 196, "twpooledembeddingshard": 196, "kjt": 196, "canon": 196, "dmp": 196, "hyperoptim": 196, "combinedoptim": 196, "keyedoptim": 196, "in_backward_optimizer_filt": 196, "fused_optim": 196, "fused_param": 196, "apply_optimizer_in_backward": 196, "criteo": 196, "1tb": 196, "penn": 198, "fudan": 198, "databas": [198, 249, 250], "pedestrian": 198, "keypoint": 198, "tv_tensor": 198, "boundingbox": 198, "y0": 198, "image_id": 198, "iscrowd": 198, "pycocotool": 198, "gautamchitni": 198, "git": [198, 267], "cocoapi": 198, "cocodataset": 198, "pythonapi": 198, "get_height_and_width": 198, "ci": 198, "upenn": 198, "edu": 198, "jshi": 198, "ped_html": 198, "pennfudanp": 198, "pedmask": 198, "fudanped00001_mask": 198, "fudanped00002_mask": 198, "fudanped00003_mask": 198, "fudanped00004_mask": 198, "pngimag": 198, "fudanped00001": 198, "fudanped00002": 198, "fudanped00003": 198, "fudanped00004": 198, "tvtensor": 198, "zoo": 198, "fasterrcnn": 198, "rpn": 198, "anchor": 198, "featmap_nam": 198, "rcnn": 198, "train2017": 198, "mikayla": [199, 230, 238], "gawarecki": [199, 230, 238], "jag": [199, 279], "famili": [199, 214, 258], "xformer": 199, "torchtun": 199, "rag": [199, 279], "ux": [199, 279, 281], "key_padding_mask": 199, "qk": 199, "premis": 199, "rmsnorm": 199, "sinusoid": 199, "rotari": [199, 263], "alibi": 199, "threefold": 199, "query_padding_mask": 199, "mha": [199, 275], "nestedtensor": [199, 261, 279, 284, 289], "cleanli": [199, 204, 205, 213, 251, 256], "zipf": [199, 279], "pariti": 199, "attn_mask": 199, "padded_tim": 199, "03454": 199, "padded_peak_memori": 199, "nested_tim": 199, "00612": 199, "nested_peak_memori": 199, "padded_bw_tim": 199, "09337": 199, "padded_bw_peak_mem": 199, "nested_bw_tim": 199, "01452": 199, "nested_bw_peak_mem": 199, "144": [199, 214], "out_proj": 199, "000244140625": 199, "packed_proj": 199, "001556396484375": 199, "001953125": 199, "causal": 199, "breviti": [199, 238, 274], "trust": 199, "ragged": 199, "alibi_mod": 199, "block_mask": 199, "create_nested_block_mask": 199, "e_q": 199, "e_tot": 199, "05x": 199, "swish": 199, "08x": [199, 214], "kv": [199, 263], "lucidrain": 199, "navit": 199, "visiontransform": 199, "norm_lay": 200, "batchnorm1d": 200, "probe": 200, "register_full_backward_hook": 200, "grads_bn": 200, "grads_nobn": 200, "qualit": 200, "num_lay": [200, 225], "hook_forward": 200, "covari": 200, "newcom": 201, "deep_learning_60min_blitz": 201, "tmul": 202, "gen": 202, "processor": [202, 215, 241, 258, 260], "10x": [202, 267], "avx": [202, 215], "vnni": [202, 215], "024": 202, "bf16": [202, 214, 267, 278], "onednn": [202, 214, 215, 222, 278], "memory_format": [202, 215, 288], "channels_last": [202, 215], "conv3d": [202, 241], "conv_transpose1d": 202, "conv_transpose2d": 202, "conv_transpose3d": 202, "baddbmm": 202, "addbmm": 202, "onednn_verbos": 202, "mkldnn": [202, 214, 278], "verbose_on": 202, "6dbeffbae1f23cbbeae17adb7b5b13f1f37c080": 202, "openmp": [202, 222], "nthr": 202, "isa": 202, "prim_templ": 202, "prop_kind": 202, "memory_descriptor": 202, "auxiliari": [202, 269], "problem_desc": 202, "exec_tim": 202, "exec": 202, "reorder": [202, 214, 222, 241], "undef": 202, "src_f32": 202, "f0": 202, "dst_f32": 202, "scratchpad": 202, "2561": 202, "avx512_core_amx_bf16": 202, "forward_train": 202, "src_bf16": 202, "acdb": 202, "wei_bf16": 202, "abcd16b16a2b": 202, "bia_f32": 202, "dst_bf16": 202, "alg": 202, "convolution_direct": 202, "mb7_ic2oc1_ih224oh111kh3sh2dh1ph1_iw224ow111kw3sw2dw1pw1": 202, "628906": 202, "brg": 202, "avx512_core_amx_int8": 202, "src_s8": 202, "wei_s8": 202, "ba16a64b4a": 202, "dst_s8": 202, "1x30522": 202, "30522x768": 202, "1x768": 202, "66382": 202, "lazo": [204, 205, 213, 251, 256], "get_device_cap": 204, "benchmark_torch_function_in_microsecond": 204, "blocked_autorang": [204, 226, 283], "eager_runtim": 204, "compiled_runtim": 204, "747": 204, "2437149845064u": 204, "392": 204, "07384741178u": 204, "linearlr": 205, "compiling_optimizer_lr_schedul": [205, 247, 261], "set_device_map": 206, "worker0": 206, "worker1": 206, "payload": [206, 238], "infiniband": 206, "cma": 206, "comm_mod": [206, 209], "pend": [206, 239], "current_stream": 206, "tensorpiperpcbackendopt": 206, "num_worker_thread": 206, "rpc_backend_opt": 206, "34x": 206, "3145179748535156": 206, "06867480278015137": 206, "luca": [207, 208], "pasqualin": [207, 208], "iri": [207, 208, 210], "rodrigo": [207, 208], "kumpera": [207, 208], "chien": [207, 208, 263], "chin": [207, 208, 263], "async_sav": 207, "checkpoint_size_per_rank": 207, "number_of_rank": 207, "pageabl": 207, "get_state_dict": [207, 208], "set_state_dict": [207, 208], "appstat": [207, 208], "protocol": [207, 208], "load_stat_dict": [207, 208], "fqn": [207, 208, 283], "sharded_state_dict": [207, 208], "optim_state_dict": [207, 208], "run_fsdp_checkpoint_save_exampl": [207, 208], "checkpoint_futur": 207, "checkpoint_id": [207, 208], "_step": 207, "attack": 207, "filesystemwrit": 207, "storagewrit": 207, "cached_state_dict": 207, "cache_staged_state_dict": 207, "storage_writ": 207, "adddition": 208, "run_fsdp_checkpoint_load_exampl": 208, "run_checkpoint_load_exampl": 208, "format_util": 208, "torch_to_dcp": 208, "dcp_to_torch": 208, "dcp_to_torch_sav": 208, "torch_save_to_dcp": 208, "torch_save_checkpoint_dir": 208, "torch_save_checkpoint": 208, "_new": 208, "anshul": 209, "sinha": 209, "distributedtensor": 209, "interoper": 209, "mlpmodul": 209, "generate_comm_debug_tracing_t": 209, "noise_level": 209, "log_comm_debug_tracing_table_to_fil": 209, "file_nam": [209, 255], "transformer_operation_log": 209, "generate_json_dump": 209, "c10d_function": 209, "comm_mode_features_exampl": 209, "effortlessli": 210, "homogen": 210, "num_node_devic": 210, "shard_rank_list": 210, "shard_group": 210, "current_shard_group": 210, "current_replicate_group": 210, "shard_factor": 210, "replicate_group_rank": 210, "replicate_group": 210, "2d_setup": 210, "mesh_dim_nam": [210, 263], "thru": 210, "get_group": 210, "mesh_dim": 210, "2d_setup_with_device_mesh": 210, "meshshap": 210, "dp_replic": 210, "dp_shard": 210, "mesh_3d": 210, "hsdp_mesh": 210, "tp_group": 210, "_foreach": 213, "horizton": 213, "sunita": 214, "nadamp": 214, "graviton3": 214, "sve": 214, "simd": 214, "graviton2": 214, "bla": 214, "acl": 214, "c7g": 214, "bfloa16": 214, "r7g": 214, "m7g": 214, "4vcpu": 214, "profileract": [214, 231], "myneuralnetwork": 214, "linear_relu_stack": 214, "11008": 214, "pred_probab": 214, "set_grad_en": 214, "mymodel_infer": 214, "self_cpu_time_tot": [214, 231], "813": 214, "255m": 214, "177": 214, "032m": 214, "160u": 214, "162": [214, 226], "054m": 214, "540": 214, "180u": 214, "738m": 214, "201": 214, "955m": 214, "985": 214, "282m": 214, "421m": 214, "043m": 214, "810u": 214, "356m": 214, "179": 214, "388m": 214, "896": 214, "940u": 214, "mmla": 214, "torchbench": 214, "dnnl_default_fpmath_mod": 214, "943": 214, "052": 214, "507m": 214, "167": [214, 258], "653m": 214, "838": 214, "265u": 214, "107": 214, "593m": 214, "358": 214, "643u": 214, "167m": 214, "262": 214, "911m": 214, "060": 214, "533m": 214, "414m": 214, "892m": 214, "307u": 214, "281m": 214, "934m": 214, "849": [214, 226], "670u": 214, "fastmath": 214, "821": 214, "914": 214, "713m": 214, "244m": 214, "711": 214, "220u": 214, "322m": 214, "307": 214, "740u": 214, "094": 214, "495m": 214, "921": 214, "736m": 214, "131m": 214, "441m": 214, "803u": 214, "942m": 214, "186m": 214, "720": 214, "930u": 214, "848": 214, "944": 214, "148m": 214, "141": [214, 226], "309m": 214, "706": 214, "545u": 214, "916m": 214, "720u": 214, "431m": 214, "471m": 214, "951": 214, "170m": 214, "027m": 214, "243m": 214, "143u": 214, "928m": 214, "143": [214, 258], "237m": 214, "185u": 214, "47x": 214, "noteworthi": 214, "till": 214, "torch_mkldnn_matmul_min_dim": 214, "958": 214, "612m": 214, "124m": 214, "620u": 214, "951m": 214, "170u": 214, "423m": 214, "034": 214, "691m": 214, "988": 214, "628m": 214, "520m": 214, "945m": 214, "817u": 214, "382m": 214, "136": 214, "910u": 214, "781": 214, "604m": 214, "295": 214, "437m": 214, "477m": 214, "516m": 214, "558": 214, "387u": 214, "708m": 214, "499m": 214, "788": 214, "627m": 214, "982m": 214, "385m": 214, "617u": 214, "932m": 214, "369m": 214, "487m": 214, "038m": 214, "060m": 214, "300u": 214, "013m": 214, "710u": 214, "521m": 214, "750m": 214, "216": 214, "475m": 214, "033m": 214, "110u": 214, "285m": 214, "345m": 214, "186": [214, 267], "725u": 214, "margin": 214, "thp_mem_alloc_en": 214, "321": 214, "069m": 214, "568m": 214, "613m": 214, "602m": 214, "682": 214, "007u": 214, "777m": 214, "697": 214, "082m": 214, "329": 214, "097m": 214, "547m": 214, "115m": 214, "626m": 214, "avx512": 215, "amx": 215, "xmx": 215, "claus": [215, 259], "nhwc": 215, "cooper": 215, "roialign": 215, "imper": 215, "intel_extension_for_pytorch": [215, 248], "ipex": [215, 248, 260], "bertmodel": 215, "seq_length": 215, "cache_en": 215, "argc": 215, "cerr": 215, "intel_ext_pt_cpu": 215, "libpytorch_path": 215, "ldd": 215, "workspac": 215, "libintel": 215, "ext": 215, "0x00007f3cf98e0000": 215, "libc10": 215, "0x00007f3cf985a000": 215, "0x00007f3cf70fc000": 215, "libtorch_cpu": [215, 240], "0x00007f3ce16ac000": 215, "mitig": [216, 241], "autotun": [216, 241, 249, 250, 252, 267, 289], "mx": 216, "hpu": [216, 282], "inc_target_devic": 216, "gaudi": [216, 282], "neural_compressor": 216, "fp8config": 216, "fp8_config": 216, "e4m3": 216, "calibration_data": 216, "input_data": 216, "theblok": 216, "7b": 216, "gptq": 216, "model_name_or_path": 216, "torch_dtyp": 216, "hpu_model": 216, "safetensor": 216, "qd": 216, "w8a8": 216, "staticquantconfig": 216, "userfloatmodel": 216, "exported_model": [216, 281], "quant_config": 216, "prepared_model": [216, 281], "run_fn": 216, "q_model": 216, "opt_model": 216, "rtnconfig": 216, "tuningconfig": 216, "eval_fn": 216, "tune_config": 216, "config_set": 216, "use_sym": 216, "group_siz": 216, "tolerable_loss": 216, "max_trial": 216, "gui": [222, 260], "emit_itt": 222, "ex": [222, 269, 283], "8080": 222, "path_of_launch": 222, "iteration_n": 222, "range_push": 222, "range_pop": 222, "oneapi": 222, "brown": 222, "percerntag": 222, "jitter": [222, 226], "enrich": 222, "ittsampl": 222, "292820": 222, "unmark": 222, "244": [222, 283], "iteration_": 222, "basefold": 222, "bash_sourc": 222, "gradcam": 224, "283": 224, "occlus": 224, "deconvolut": 224, "guidedbackprop": 224, "deeplift": 224, "gradientshap": 224, "forward_func": 224, "pictori": 224, "textual": 224, "distractor": 224, "visualize_text": 224, "imdb_torchtext_interpret": 224, "gilbert": 224, "tanner": 224, "gilberttann": 224, "captum_recip": [224, 229, 237, 261], "carilli": 225, "ordinarili": 225, "ture": 225, "kepler": 225, "maxwel": 225, "pascal": 225, "modest": 225, "in_siz": 225, "out_siz": 225, "underflow": 225, "scaler": 225, "unscal": 225, "unscale_": 225, "rough": 225, "coalesc": [225, 274], "binary_cross_entropy_with_logit": 225, "suspect": 225, "docstr": 225, "subregion": 225, "backtrac": 225, "torch_show_cpp_stacktrac": 225, "amp_recip": [225, 229, 237, 261], "invalid": [226, 241, 275, 276, 277], "tediou": 226, "mistak": 226, "mul_sum": 226, "0x7fb10400d0f0": 226, "batched_dot_mul_sum": 226, "379": 226, "0x7fb103d67048": 226, "batched_dot_bmm": 226, "num_thread": [226, 278], "sub_label": 226, "0x7fb103d54080": 226, "118": 226, "0x7fb16935d2e8": 226, "2775": 226, "0x7fb10400d080": 226, "181": 226, "min_run_tim": [226, 240], "median": [226, 240, 283], "274": 226, "748": 226, "432": [226, 231], "22657": 226, "11899": 226, "609": 226, "23098": 226, "27246": 226, "267073": 226, "118823": 226, "189": 226, "2782": 226, "7471": 226, "11874": 226, "173": 226, "7264": 226, "27824": 226, "100060": 226, "121499": 226, "2773": 226, "6111": 226, "12833": 226, "6295": 226, "27062": 226, "71804": 226, "120365": 226, "2804": 226, "6764": 226, "11871": 226, "6640": 226, "27592": 226, "73003": 226, "120083": 226, "callgrindstat": [226, 240], "trip": [226, 240], "batched_dot": 226, "stark": 226, "fuzzer": 226, "10000000": 226, "k0": 226, "k1": 226, "discontigu": 226, "725": 226, "383": 226, "1468": 226, "5039": 226, "2140": 226, "1296": 226, "1598": 226, "310": 226, "519": 226, "763": 226, "1082": 226, "473": 226, "16384": 226, "12642115": 226, "8192": [226, 263], "4800": 226, "20400": 226, "110000": 226, "400000": 226, "493": 226, "1100": [226, 240], "2440": 226, "870": 226, "2030": 226, "495": 226, "23600": 226, "62374": 226, "90000": 226, "240372": 226, "40156": 226, "2670": 226, "opac": 226, "complementari": 226, "insensit": 226, "environment": 226, "cpp_lib": 226, "cpp_sourc": 226, "batched_dot_src": 226, "extra_cflag": 226, "extra_include_path": 226, "getenv": 226, "batched_dot_mul_sum_v0": 226, "batched_dot_mul_sum_v1": 226, "module_import_str": 226, "67631": 226, "importlib": 226, "spec_from_file_loc": 226, "repr": 226, "module_from_spec": 226, "exec_modul": 226, "textwrap": 226, "pretty_print": 226, "t_baselin": 226, "stats_v0": 226, "collect_callgrind": 226, "stats_v1": 226, "as_standard": [226, 240], "denois": 226, "cancel": [226, 241], "ing": 226, "wrap_pybind_function_impl_": 226, "set_printopt": [226, 283], "linewidth": 226, "valgrind_wrapp": [226, 240], "timer_interfac": [226, 240], "0x7fb0f06e7630": 226, "2392671": 226, "4367": 226, "rel_with_deb_info": [226, 240], "0x7fb10400d208": 226, "2378978": 226, "functioncount": [226, 240], "0x7fb1000ab358": 226, "0x000000000020d9e0": 226, "0x000000000020db10": 226, "integer_sequ": 226, "0ul": 226, "1ul": 226, "5200": 226, "undefinedtensorimpl": 226, "reset_": 226, "5935": 226, "0x000000000022c0e0": 226, "13693": 226, "use_cuda": 227, "set_default_devic": 227, "impos": [227, 238], "332": [227, 231, 237, 261], "changing_default_devic": [227, 237, 261], "subsidiari": [228, 242, 243], "neighbor": 228, "sharp": 228, "blurri": 228, "defining_a_neural_network": [228, 229, 237, 261], "what_is_state_dict": [229, 237, 243, 261], "saving_and_loading_models_for_infer": 229, "custom_dataset_transforms_load": 229, "dynamic_quant": 229, "warmstarting_model_using_parameters_from_a_different_model": [229, 237, 242, 261], "zeroing_out_gradi": [229, 237, 244, 261], "mobile_perf": 229, "regional_compil": [229, 245, 247, 261], "syntaxerror": [229, 237, 261], "undesir": 230, "unload": 230, "upfront": [230, 278], "somemodul": 230, "overwritten": [230, 244, 258], "param_in_model": 230, "param_in_state_dict": 230, "set_swap_module_params_on_convers": [230, 238], "swap_tensor": [230, 237, 261], "module_load_state_dict_tip": [230, 237, 261], "shivam": 231, "raikundalia": 231, "model_infer": 231, "_fork": 231, "509m": 231, "503m": 231, "931m": 231, "597m": 231, "700m": 231, "585m": 231, "_convolut": 231, "450m": 231, "mkldnn_convolut": 231, "838m": 231, "114m": 231, "556m": 231, "693m": 231, "734": 231, "_batch_norm_impl_index": 231, "482m": 231, "724": 231, "100u": 231, "native_batch_norm": 231, "229m": 231, "109m": 231, "705": 231, "450u": 231, "631m": 231, "286u": 231, "668m": 231, "292m": 231, "988u": 231, "549m": 231, "dnn": 231, "group_by_input_shap": 231, "008m": 231, "956m": 231, "909m": 231, "834m": 231, "332m": 231, "303m": 231, "273m": 231, "233m": 231, "751m": 231, "occurr": 231, "666m": 231, "484m": 231, "_convolution_nogroup": 231, "thnn_conv2d": 231, "thnn_conv2d_forward": 231, "im2col_kernel": 231, "844m": 231, "sgemm_32x32x32_nn": 231, "206m": 231, "sgemm_32x32x32_nn_vec": 231, "093m": 231, "015m": 231, "567m": 231, "871m": 231, "560u": 231, "convolution_overrid": 231, "gen_conv": 231, "216u": 231, "640u": 231, "632u": 231, "conv_reord": 231, "880u": 231, "448u": 231, "712": 231, "486m": 231, "max_pool2d_with_indic": 231, "kb": 231, "empty_strid": [231, 268, 288], "572": 231, "resize_": 231, "masked_select": 231, "112": [231, 255, 258], "122": [231, 261], "064m": 231, "viewer": 231, "439": 231, "_conv_forward": 231, "1051": 231, "_call_impl": 231, "016m": 231, "659m": 231, "skip_first": 231, "step_num": 231, "profiler_recip": [231, 237, 261], "reasoning_about_shap": [232, 237, 261], "tensorboard_with_pytorch": [237, 239, 261], "timer_quick_start": [237, 240, 261], "tuning_guid": [237, 241, 261], "hereaft": 238, "__class__": 238, "__slots__": 238, "pertin": 238, "glanc": [238, 274], "__torch_dispatch__": [238, 255], "new_param": 238, "myquantizedlinearweight": 238, "elem": 238, "__setattr__": 238, "module_load": 238, "__torch_function__": 238, "param_kei": 238, "scalar_valu": 239, "walltim": 239, "anymor": [239, 278], "tfevent": 239, "OR": 239, "0x7f1929a38ed0": 240, "iqr": 240, "0x7f192b019ed0": 240, "unsurprisingli": 240, "0x7f1929a35850": 240, "563600": 240, "tensormethod": 240, "ab_ref": 240, "0x7f192a6dfd90": 240, "47264": 240, "_int_fre": 240, "25963": 240, "_int_malloc": 240, "19900": 240, "tensorit": 240, "tensoriteratorconfig": 240, "__tls_get_addr": 240, "13500": 240, "malloc": [240, 241, 258], "11300": 240, "smallvector": 240, "10345": 240, "_int_memalign": 240, "9200": 240, "iteratorbas": 240, "get_strid": 240, "173472": 240, "0x7f192995d750": 240, "118200": 240, "tensoriter": 240, "65000": 240, "20900": 240, "15900": 240, "15100": 240, "cpualloc": 240, "12500": 240, "352327": 240, "a0": 240, "b0": 240, "a1": 240, "a127": 240, "pickleabl": 240, "broadcasting_stat": 240, "17600": 240, "tensoriteratorbas": 240, "compute_strid": 240, "12700": 240, "allocate_or_resize_output": 240, "10200": 240, "smallvectorimpl": 240, "7400": 240, "6200": 240, "invert_perm": 240, "6064": 240, "5100": 240, "reorder_dimens": 240, "4300": 240, "compatible_strid": 240, "check_tensor_options_and_extract_memory_format": 240, "__memcmp_avx2_movb": 240, "empty_cpu": 240, "1300": 240, "2400": 240, "6100": 240, "compute_fast_setup_typ": 240, "22600": 240, "fast_set_up": 240, "58091": 240, "580": 240, "0x7f19299544d0": 240, "compute_shap": 240, "2300": 240, "coalesce_dimens": 240, "promin": 240, "__add__": 240, "__sub__": 240, "dice": 240, "szymon": 241, "migacz": 241, "set_to_non": 241, "elementwis": [241, 256], "anomali": 241, "detect_anomali": 241, "set_detect_anomali": 241, "emit_nvtx": 241, "nth": 241, "cpunodebind": 241, "membind": 241, "pytorch_script": 241, "omp_num_thread": [241, 258], "thrash": 241, "gomp_cpu_affin": 241, "omp_proc_bind": 241, "omp_schedul": 241, "libgomp": [241, 258], "sleep": 241, "jemalloc": [241, 258], "tcmalloc": [241, 258], "emphas": 241, "fragment": 241, "ccl": 241, "alltoal": [241, 263], "set_float32_matmul_precis": 241, "judgment": 244, "animesh": 245, "jain": 245, "startup": 245, "inline_inbuilt_nn_modul": 245, "graph_cod": 245, "strateg": 245, "horizont": [247, 260, 261], "foreach_map": [247, 260, 261], "torch_compiler_set_stance_tutori": [247, 253, 261], "torch_compile_torch_function_mod": [247, 251, 261], "torch_export_aoti_python": [247, 254, 261], "torch_compile_user_defined_triton_kernel_tutori": [247, 252, 261], "compile_model": 248, "resnet50_weight": 248, "weights_prepack": 248, "device_typ": [248, 263], "oguz": [249, 250, 252], "ulgen": [249, 250, 252], "sam": [249, 255], "larsen": 249, "fxgraphcach": [249, 250], "aotautogradcach": [249, 250], "redi": [249, 250], "usernam": 249, "aotautograd": [249, 250], "fxgraph": 249, "torchinductor_": 249, "torchinductor_myusernam": [249, 250], "triton_cache_dir": 249, "torchinductor_redis_host": 249, "torchinductor_redis_port": 249, "6379": 249, "cachebench": 250, "onward": 250, "save_cache_artifact": 250, "load_cache_artifact": 250, "artifact_byt": 250, "cache_info": 250, "pgo": 250, "tritoncach": 250, "cubin": [250, 254, 268], "inductorcach": 250, "autotuningcach": 250, "torchinductor_cache_dir": 250, "basetorchfunctionmod": 251, "flopcountermod": 252, "wrap_triton": 252, "footgun": 252, "register_kernel": 252, "register_flop_formula": 252, "flop_count": 252, "mysin": 252, "reappli": 253, "force_eag": 253, "eager_on_recompil": 253, "fail_on_recompil": 253, "torch.export": 254, "torch._inductor.aoti_compile_and_packag": 254, "aot_compil": 254, "torch._export.aoti_load_packag": 254, "ankith": [254, 255], "gunap": [254, 255], "bao": [254, 268], "_export": 254, "aot_load": 254, "max_autotun": 254, "runner": 254, "archive_format": 254, "10088": 254, "cagzt6akdaczvxwtbvqe34otfe5jlorktbqlojbzqjqvbfsjlge4": 254, "17160": 254, "c6oytfjmt5w4c7onvtm6fray7clirxt7q5xjbwx3hdydclmwoujz": 254, "16616": 254, "c7ydp7nocyz323hij4tmlf2kcedmwlyg6r57gaqzcsy3huneamu6": 254, "17776": 254, "cyqdf46ordevqhiddvpdpp3uzwatfbzdpl3auj2nx23uxvplnne2": 254, "10856": 254, "cpzfebfgrusqslui7fxsuoo4tvwulmrxirc5tmrpa4mvrbdno7kn": 254, "14608": 254, "c5ukeoz5wmaszd7vczdz2qhtt6n7tdbl3b6wuy4rb2se24fjwfoi": 254, "11376": 254, "csu3nstcp56tsjfycygaqsewpu64l5s6zavvz7537cm4s4cv2k3r": 254, "10984": 254, "cp76lez4glmgq7gedf2u25zvvv6rksv5lav4q22dibd2zicbgwj3": 254, "14736": 254, "c2bb5p6tnwz4elgujqelsrp3unvkgsyiv7xqxmpvuxcm4jfl7pc2": 254, "c6eopmb2b4ngodwsayae4r5q6ni3jlfogfbdk3ypg56tgpzhubfi": 254, "11624": 254, "chmwe6lvoekzfowdbiizitm3haiiuad5kdm6sd2m6mv6dkn2zk32": 254, "15632": 254, "c3jop5g344hj3ztsu4qm6ibxyaaerlhkzh2e6emak23rxfje6jam": 254, "25472": 254, "chaiixybeiuuitm2nmqnxzijzwgnn2n7uuss4qmsupgblfh3h5hk": 254, "139389": 254, "cvk6qzuybruhwxtfblzxiov3rlrziv5fkqc4mdhbmantfu3lmd6t": 254, "cvk6qzuybruhwxtfblzxiov3rlrziv5fkqc4mdhbmantfu3lmd6t_metadata": 254, "47195424": 254, "47523148": 254, "jordi": 255, "ramon": 255, "marco": 255, "carranza": 255, "mvit": 255, "whisper": 255, "blip": 255, "sam2": 255, "timm": 255, "multiscal": 255, "kinet": 255, "mvit_v1_b_weight": 255, "mvit_v1_b": 255, "224x224x3": 255, "input_fram": 255, "num_clip": 255, "print_exc": 255, "batch_dim": 255, "asr": 255, "transcrib": 255, "spoken": 255, "680k": 255, "whisperprocessor": 255, "whisperforconditionalgener": 255, "decoder_input_id": 255, "decoder_start_token_id": 255, "internaltorchdynamoerror": 255, "attributeerror": 255, "dynamiccach": 255, "key_cach": 255, "non_strict": 255, "proxytensor": 255, "gameplai": 255, "gamer": 255, "salesforc": 255, "blip_decod": 255, "caption_input": 255, "model_url": 255, "googleapi": 255, "sfr": 255, "model_base_capfilt_larg": 255, "exportdb": 255, "bos_token_id": 255, "anaconda3": 255, "functional_tensor": 255, "545": 255, "outs_unwrap": 255, "_op_dk": 255, "sam2imagepredictor": 255, "_predict": 255, "unnorm_coord": 255, "unnorm_box": 255, "mask_input": 255, "multimask_output": 255, "return_logit": 255, "image_predict": 255, "sam2_image_predictor": 255, "359": 255, "exporthelp": 255, "model_to_export": 255, "aoti": 255, "preload": 258, "omp": [258, 278], "tunabl": 258, "taskset": 258, "uniform": [258, 285], "uma": 258, "lscpu": 258, "9480": 258, "223": 258, "vendor": 258, "genuineintel": 258, "node0": 258, "node1": 258, "cento": 258, "yum": 258, "libiomp": 258, "perftool": 258, "gperftool": 258, "libjemalloc2": 258, "ninstanc": 258, "ncore": 258, "program_arg": 258, "iomp": 258, "prepend": 258, "core_id": 258, "dafault": 258, "ncores_per_inst": 258, "libtcmalloc": 258, "preliminarili": 258, "deepspe": 259, "marian": 259, "oftentim": 259, "exp_avg": 259, "exp_avg_sq": 259, "print_peak_memori": 259, "max_memory_alloc": 259, "use_zero": 259, "optimizer_class": 259, "0mb": 259, "1361": 259, "3453": 259, "6123046875": 259, "1697": 259, "itt": 260, "vtune": 260, "torchcompil": 260, "run_cpu": 260, "graviton": 260, "compressor": 260, "tensorpip": 260, "dcp": 260, "commdebugmod": 260, "012": 261, "galleri": 261, "intermediate_sourc": 261, "recipes_sourc": 261, "maskedtensor": [261, 284, 289], "unstable_sourc": 261, "maskedtensor_spars": [261, 277, 284], "041": [261, 277, 284], "torchao": [261, 284], "gpu_quantization_torchao_tutori": [261, 267, 284], "maskedtensor_overview": [261, 275, 276, 277, 284], "advanced_sourc": 261, "maskedtensor_adagrad": [261, 274, 284], "vmap_recip": [261, 284, 287], "maskedtensor_advanced_semant": [261, 275, 284], "gpu_direct_storag": [261, 266, 284], "readm": 262, "prepare_fx": 262, "convert_fx": 262, "default_weight_observ": 262, "get_default_qconfig_map": 262, "minmaxobserv": 262, "backend_config": 262, "backendpatternconfig": 262, "dtypewithconstraint": 262, "observationtyp": 262, "quantize_fx": 262, "fp32_linear": 262, "quant1": 262, "dequant1": 262, "quant2": 262, "dequant2": 262, "fp32_conv_relu": 262, "quint8_with_constraint": 262, "quant_min_lower_bound": 262, "quant_max_upper_bound": 262, "scale_min_lower_bound": 262, "weighted_int8_dtype_config": 262, "input_dtyp": [262, 265], "weight_dtyp": 262, "qint8": 262, "bias_dtyp": 262, "fuse_conv2d_relu": 262, "convrelu2d": 262, "linear_config": 262, "set_pattern": 262, "set_observation_typ": 262, "output_use_different_observer_as_input": 262, "add_dtype_config": 262, "set_root_modul": 262, "set_qat_modul": 262, "set_reference_quantized_modul": 262, "conv_relu_config": 262, "set_fused_modul": 262, "set_fuser_method": 262, "fused_conv_relu_config": 262, "my_backend": 262, "set_backend_pattern_config": 262, "quant_max": 262, "activation_observ": 262, "with_arg": 262, "quant_min": 262, "qconfig_map": 262, "set_object_typ": 262, "use_bn": 262, "quantizedlinear": 262, "012136868201196194": 262, "zero_point": 262, "qscheme": 262, "per_tensor_affin": 262, "quantizedconvrelu2d": 262, "0029353597201406956": 262, "linear_input_scale_0": 262, "linear_input_zero_point_0": 262, "quantize_per_tensor": 262, "dequantize_2": 262, "015307803638279438": 262, "track_running_stat": 262, "dequantize_1": 262, "get_fbgemm_backend_config": 262, "get_qnnpack_backend_config": 262, "get_native_backend_config": 262, "union": 262, "rfc": [262, 275, 278, 282], "llama3": 263, "freq_ci": 263, "context_parallel": 263, "buffer_seq_dim": 263, "miscalcul": 263, "set_rotate_method": 263, "sdpbackend": 263, "sdpa_exampl": 263, "nhead": 263, "qkv_len": 263, "flash_attent": 263, "cudnn_attent": 263, "qkv": 263, "cp_sdpa_exampl": 263, "_attent": 263, "context_parallel_unshard": 263, "context_parallel_sdpa_exampl": 263, "mesh_shap": 263, "cp_qkv": 263, "cp_out": 263, "atol": [263, 283], "junji": 265, "impedi": 265, "starvat": 265, "deadlock": 265, "indefinit": 265, "diagnost": 265, "flight_record": 265, "torch_nccl_trace_buffer_s": 265, "torch_nccl_dump_on_timeout": 265, "torch_fr_dump_temp_fil": 265, "nccl_trace_rank_": 265, "torch_nccl_trace_cpp_stack": 265, "torch_symbolize_mod": 265, "torch_nccl_enable_tim": 265, "dladdr": 265, "addr2lin": 265, "debuginfowrit": 265, "registerwrit": 265, "_distributed_c10d": 265, "_dump_nccl_trac": 265, "includecollect": 265, "includestacktrac": 265, "onlyact": 265, "pg_config": 265, "default_pg": 265, "pg_statu": 265, "last_enqueued_collect": 265, "last_started_collect": 265, "last_completed_collect": 265, "test_short_pickl": 265, "test_c10d_nccl": 265, "3647": 265, "spawn_main": 265, "record_id": 265, "pg_id": 265, "collective_seq_id": 265, "p2p_seq_id": 265, "op_id": 265, "profiling_nam": 265, "time_created_n": 265, "1724779239936775119": 265, "input_s": 265, "time_discovered_started_n": 265, "time_discovered_completed_n": 265, "1724779239975811724": 265, "retir": 265, "timeout_m": 265, "600000": 265, "is_p2p": 265, "fr_trace": 265, "use_distribut": 265, "torchfrtrac": 265, "culprit": 265, "recod": 265, "torch_nccl_debug_info_temp_fil": 265, "trace_": 265, "trace_0": 265, "trace_1": 265, "bounc": 266, "gd": 266, "cufil": 266, "4kb": 266, "storage_align": 266, "gdsfile": 266, "skip_data": 266, "faketensormod": 266, "gds_register_buff": 266, "cufilebufregist": 266, "save_storag": 266, "cufilewrit": 266, "load_storag": 266, "cufileread": 266, "hdcharl": 267, "pg509": 267, "myenv": 267, "facebookresearch": 267, "vit_h": 267, "fbaipublicfil": 267, "segment_anyth": 267, "sam_vit_h_4b8939": 267, "sam_checkpoint_base_path": 267, "image_encod": 267, "instant": 267, "protect": 267, "43m": 267, "17gb": 267, "7x": 267, "16m": 267, "95m": 267, "24gb": 267, "int4": 267, "int8dynamicactivationint8weightconfig": 267, "int8weightonlyconfig": 267, "int4weightonlyconfig": 267, "apply_dynamic_qu": 267, "apply_weight_only_int8_qu": 267, "04m": 267, "58gb": 267, "int32": 267, "force_fuse_int_mm_with_mul": 267, "78m": 267, "37gb": 267, "unquant": 267, "epilogu": [267, 278], "enlarg": 267, "39gb": 267, "appl": 267, "677": 267, "729": 267, "65m": 267, "chunyuan": [268, 278], "cpp_wrapper": 268, "opt_fn": 268, "assert_size_strid": 268, "cpp_fused_add_lift_fresh_0": 268, "c_void_p": 268, "constant0": 268, "inductor_entry_cpp": 268, "19l": 268, "cppwrappercodecach": 268, "cpp_wrapper_src": 268, "c2buojsvlqbywxe3itb43hldieh4jqulk72iswa2awalwev7hjn2": 268, "_wrap_func": 268, "args_tensor": 268, "constants_tensor": 268, "_deviceguard": 268, "lift_fresh": 268, "stream0": 268, "get_cuda_stream": 268, "triton_poi_fused_add_lift_fresh_0": 268, "run_intermediate_hook": 268, "cudaguard": 268, "device_guard": 268, "loadkernel": 268, "torchinductor_us": 268, "cmm6xjgijjffxjku4akv55eyzibirvw6bti6uqmfnruujm5cvvmw": 268, "triton_poi_fused_add_lift_fresh_0_0d1d2d3": 268, "cudeviceptr": 268, "var_0": 268, "reinterpret_cast": 268, "var_1": 268, "var_2": 268, "var_3": 268, "kernel_args_var_0": 268, "cudastream_t": 268, "getcurrentcudastream": 268, "launchkernel": 268, "czbpeilh4qqmbyejdgsbpdfuk2ss5jigl2qjb7xs4gearrjvuwem": 268, "zhaoqiong": 269, "zheng": 269, "xu": 269, "han": 269, "msvc": 269, "desktop": 269, "checkmark": 269, "cmd": 269, "vc": 269, "vcvars64": 269, "opt_foo1": 269, "9074e": 269, "3994e": 269, "3894e": 269, "2630e": 269, "3060e": 269, "1833e": 269, "4016e": 269, "1905e": 269, "0637e": 269, "3648e": 269, "3728e": 269, "2863e": 269, "6888e": 269, "5442e": 269, "6790e": 269, "2025e": 269, "2647e": 269, "2684e": 269, "2483e": 269, "2845e": 269, "7747e": 269, "2028e": 269, "1431e": 269, "7196e": 269, "5304e": 269, "1945e": 269, "6654e": 269, "7376e": 269, "3644e": 269, "3600e": 269, "0157e": 269, "7200e": 269, "0146e": 269, "8175e": 269, "4057e": 269, "8119e": 269, "2853e": 269, "2773e": 269, "5082e": 269, "4615e": 269, "4140e": 269, "2130e": 269, "0762e": 269, "3914e": 269, "1122e": 269, "6895e": 269, "8852e": 269, "3310e": 269, "4101e": 269, "8318e": 269, "2355e": 269, "9290e": 269, "3707e": 269, "3754e": 269, "3768e": 269, "8970e": 269, "1171e": 269, "9944e": 269, "2553e": 269, "3394e": 269, "3428e": 269, "8400e": 269, "1756e": 269, "0654e": 269, "7973e": 269, "4019e": 269, "1886e": 269, "9194e": 269, "3632e": 269, "1811e": 269, "1615e": 269, "6622e": 269, "2089e": 269, "2011e": 269, "0659e": 269, "0892e": 269, "1932e": 269, "3888e": 269, "3898e": 269, "3218e": 269, "4139e": 269, "4000e": 269, "1192e": 269, "0175e": 269, "6432e": 269, "0498e": 269, "4115e": 269, "3212e": 269, "0964e": 269, "0127e": 269, "7244e": 269, "2799e": 269, "3595e": 269, "0907e": 269, "7191e": 269, "4062e": 269, "3672e": 269, "8502e": 269, "5216e": 269, "6046e": 269, "icx": 269, "win64": 269, "inductor_window": 270, "mobile_interpret": 273, "1369": 274, "weed": 274, "state_sum": 274, "addcmul_": 274, "addcdiv_": 274, "clr": 274, "_make_spars": 274, "grad_indic": 274, "sparse_coo_tensor": [274, 277], "_indic": 274, "grad_valu": 274, "_valu": 274, "sparse_mask": [274, 277], "std_valu": 274, "sqrt_": 274, "state_sum2": 274, "masked_grad": 274, "get_data": [274, 276, 277], "std2": 274, "masked_tensor": [274, 276, 277], "to_spars": [274, 277], "param2": [274, 285], "dodg": 274, "make_spars": 274, "brittl": 274, "argu": 274, "densif": 274, "csc": [274, 277], "bsr": [274, 277], "bsc": 274, "inconveni": 274, "conflat": 274, "disentangl": 274, "purposefulli": 274, "relianc": 274, "unreli": [274, 276], "maskedarrai": [274, 289], "Their": [275, 277], "unspecifi": [275, 276, 277, 289], "intersect": 275, "logical_or": 275, "to_tensor": [275, 276], "mt0": 275, "get_mask": [275, 276], "mt1": [275, 277], "revisit": 275, "ma": 275, "masked_arrai": 275, "mask0": 275, "mask1": 275, "necessit": 275, "as_masked_tensor": 276, "as_tensor": 276, "afterthought": 276, "born": 276, "recur": 276, "inabl": 276, "10729": 276, "troubl": 276, "52248": 276, "frustrat": 276, "4132": 276, "67180": 276, "longstand": 276, "unsaf": 276, "61474": 276, "nanmax": 276, "nanmin": 276, "lend": 276, "substructur": 277, "sparse_coo": 277, "sparse_csr": 277, "ndim": 277, "nse": 277, "sparse_tensor_data": 277, "sparse_tensor_mask": 277, "dense_masked_tensor": 277, "to_sparse_coo": 277, "to_sparse_csr": 277, "nuanc": 277, "userwarn": 277, "mt": 277, "sparse_coo_mt": 277, "nnz": 277, "crow_indic": 277, "col_indic": 277, "mt_sparse_csr": 277, "1411": 277, "9589": 277, "mt2": 277, "6667": 277, "amin": 277, "to_dens": 277, "mt_sparse_coo": 277, "mt_dens": 277, "is_spars": 277, "is_sparse_coo": 277, "is_sparse_csr": 277, "surfac": 277, "mask_valu": 277, "sparse_csr_tensor": 277, "synergi": 277, "invest": 277, "lesli": 278, "fang": 278, "torchinductor_max_autotune_gemm_backend": 278, "torchinductor_freez": 278, "log_autotuning_result": 278, "amp_en": 278, "outperform": 278, "linear_unari": 278, "64x16": 278, "32x16": 278, "cpp_packed_gemm_0": 278, "_linear_pointwis": 278, "2441": 278, "cpp_fused__to_copy_relu_1": 278, "async_compil": 278, "cpp_pybind": 278, "kernel_micro_gemm_amx_kernel_32_2": 278, "amxstat": 278, "amx_stat": 278, "lda": 278, "ldb": 278, "ldc": 278, "uint8_t": 278, "tilecfg_row": 278, "kernel_micro_gemm": 278, "64l": 278, "tid": 278, "omp_get_thread_num": 278, "mc_block_id": 278, "num_mc_blocks_per_thread": 278, "n_block_start": 278, "n_block_end": 278, "nc_block": 278, "kc": 278, "k_block_start": 278, "k_block_end": 278, "kc_block": 278, "nci": 278, "nc_block_end": 278, "m_end": 278, "m_start": 278, "16l": 278, "div_floor_integ": 278, "n_end": 278, "n_start": 278, "loadu": 278, "local_acc_buf": 278, "nr": 278, "tmp4": 278, "tmp5": 278, "tmp6": 278, "tmp7": 278, "tmp8": 278, "32l": 278, "invalu": 279, "nt": 279, "poss": 279, "irregularli": 279, "legal": 279, "semnat": 279, "law": 279, "daniil": 281, "lyakhov": 281, "aamir": 281, "nazir": 281, "suslov": 281, "yamini": 281, "nimmagadda": 281, "kozlov": 281, "openvinoquant": 281, "quantize_pt2": 281, "prepare_pt2": 281, "convert_pt2": 281, "traced_b": 281, "disable_patch": 281, "asymmetr": 281, "prelu": 281, "quantizationpreset": 281, "model_typ": 281, "modeltyp": 281, "ignored_scop": 281, "layer_1": 281, "layer_2": 281, "layer_3": 281, "ignoredscop": 281, "regex": 281, "layer_": 281, "subgraph": 281, "target_devic": 281, "cpu_spr": 281, "targetdevic": 281, "fold": 281, "fold_quant": 281, "optimized_model": 281, "smoothquant": 281, "biascorrect": 281, "calibration_load": 281, "transform_fn": 281, "data_item": 281, "calibration_dataset": 281, "smooth_quant": 281, "fast_bias_correct": 281, "yuanhao": 282, "ji": 282, "effortless": 282, "huawei": 282, "torch_device_backend_autoload": 282, "torch_foo": 282, "_autoload": 282, "entry_point": 282, "habana_framework": 282, "__autoload": 282, "device_backend": 282, "is_load": 282, "entrypoint": 282, "_force_cutlass": 283, "2560": 283, "10240": 283, "dense_output": 283, "dense_t": 283, "1e3": 283, "sparse_output": 283, "sparse_t": 283, "80gb": 283, "870m": 283, "630m": 283, "382x": 283, "weightnormsparsifi": 283, "preprocess_validation_funct": 283, "only_second": 283, "return_overflowing_token": 283, "return_offsets_map": 283, "sample_map": 283, "overflow_to_sample_map": 283, "example_id": 283, "sequence_id": 283, "offset_map": 283, "preprocess_train_funct": 283, "start_posit": 283, "end_posit": 283, "start_char": 283, "answer_start": 283, "end_char": 283, "context_start": 283, "context_end": 283, "compute_metr": 283, "start_logit": 283, "end_logit": 283, "n_best": 283, "max_answer_length": 283, "example_to_featur": 283, "predicted_answ": 283, "feature_index": 283, "start_index": 283, "argsort": 283, "end_index": 283, "logit_scor": 283, "best_answ": 283, "prediction_text": 283, "theoretical_answ": 283, "measure_execution_tim": 283, "dataset_for_model": 283, "remove_column": 283, "set_format": 283, "batch_size_to_time_sec": 283, "column_nam": 283, "p50": 283, "automodelforquestionansw": 283, "squad_dataset": 283, "tokenized_squad_dataset": 283, "data_col": 283, "datacollatorwithpad": 283, "hyperparam": 283, "training_arg": 283, "trainingargu": 283, "num_train_epoch": 283, "lr_scheduler_typ": 283, "per_device_train_batch_s": 283, "per_device_eval_batch_s": 283, "eval_dataset": 283, "fp16_baselin": 283, "fp16_time": 283, "cuda_fp16": 283, "exact_match": 283, "53358561967833": 283, "9280493093186": 283, "927572380751371": 283, "607915310189128": 283, "18846387788653": 283, "91255673766136": 283, "sparsity_level": 283, "elemen": 283, "sparse_block_shap": 283, "zeros_per_block": 283, "sparse_config": 283, "tensor_fqn": 283, "named_modul": 283, "paramter": 283, "bertoutput": 283, "parametrizedlinear": 283, "fakespars": 283, "elementwise_affin": 283, "59602649006622": 283, "51610004515979": 283, "edgeitem": 283, "0237": 283, "0130": 283, "0462": 283, "0272": 283, "0436": 283, "0492": 283, "0844": 283, "0340": 283, "0302": 283, "0350": 283, "0303": 283, "0175": 283, "0529": 283, "0327": 283, "0213": 283, "0258": 283, "0239": 283, "0380": 283, "0562": 283, "0432": 283, "0598": 283, "0262": 283, "0227": 283, "0244": 283, "0921": 283, "0784": 283, "0761": 283, "0225": 283, "0395": 283, "0684": 283, "0344": 283, "metrics_spars": 283, "sparse_perf": 283, "43897824030275": 283, "48718950090766": 283, "621004460379481": 283, "368514601141214": 283, "702805917710066": 283, "19364519417286": 283, "87x": 283, "055": 284, "orthogonal_": 285, "skip_init": 285, "param1": 285, "kaiming_uniform_": 285, "register_buff": 285, "some_buff": 285, "intial": 285, "autovector": [287, 289], "42368": 287, "unsuccessfulli": 287, "rummag": 287, "shenanigin": 287, "8304": 287, "23475": 287, "performantli": 287, "7786": 287, "batch_of_sampl": 287, "grad_sampl": 287, "ivan": 288, "kobzarev": 288, "mac": 288, "use_vulkan": 288, "vulkan_wrapp": 288, "use_vulkan_wrapp": 288, "libvulkan": 288, "vulkansdk": 288, "lunarg": 288, "vulkan_sdk": 288, "vulkan_sdk_root": 288, "install_vulkan": 288, "pytorch_root": 288, "use_vulkan_shaderc_runtim": 288, "macosx_deployment_target": 288, "41237a4": 288, "android_abi": 288, "v8a": 288, "build_android": 288, "pytorch_android": 288, "aar": 288, "build_pytorch_android": 288, "script_model": 288, "mobilenet2": 288, "32bit": 288, "mobile_optim": 288, "optimize_for_mobil": 288, "script_model_vulkan": 288, "optimization_blocklist": 288, "mobileoptimizertyp": 288, "vulkan_automatic_gpu_transf": 288, "is_vulkan_avail": 288, "tensor_vulkan": 288, "tensor_output_vulkan": 288, "tensor_output": 288, "_adaptive_avg_pool2d": 288, "_cat": 288, "clamp": 288, "hardtanh_": 288, "relu_": 288, "transpose_": 288, "upsample_nearest2d": 288, "floatbuff": 288, "allocatefloatbuff": 288, "fromblob": 288, "mmodul": 288, "apploc": 288, "asset": 288, "test_app": 288, "gradl": 288, "installmbvulkanlocalbasedebug": 288, "mbq": 288, "swiftshad": 288, "googlesourc": 288, "pypi": 289, "optimizi": 289, "coo": 289, "csr": 289, "flight": 289, "flightrecord": 289, "autoload": 289}, "objects": {}, "objtypes": {}, "objnames": {}, "titleterms": {"onnx": [0, 114, 115, 116, 117, 118], "live": 0, "tutori": [0, 39, 42, 54, 55, 57, 59, 62, 92, 99, 105, 125, 128, 137, 139, 170, 176, 178, 179, 186, 194, 195, 198, 199, 215, 216, 254, 262, 268], "torchrl": [1, 17, 178], "object": [1, 107, 144, 198], "code": [1, 2, 10, 17, 39, 40, 59, 99, 222, 268, 274, 288], "ddpg": 1, "loss": [1, 15, 40, 48, 51, 54, 57, 100, 104, 105, 106, 142, 146, 155, 178, 225, 244], "overview": [1, 21, 65, 114, 118, 125, 147, 155, 160, 183, 196, 207, 216, 241, 265, 276], "prerequisit": [1, 40, 105, 114, 118, 177, 209, 213, 231, 245, 249, 250, 252, 253, 254, 255, 265, 268, 278, 281], "import": [1, 15, 49, 60, 93, 191, 228, 231, 242, 243, 244], "setup": [1, 21, 23, 93, 113, 147, 154, 155, 166, 174, 177, 188, 189, 200, 204, 205, 213, 228, 231, 242, 243, 244, 245, 256, 262, 263, 283], "lossmodul": 1, "The": [1, 8, 10, 93, 95, 104, 143, 174, 175, 184, 199, 222], "__init__": [1, 37], "method": [1, 18, 154, 166, 198, 238, 277], "valu": [1, 155, 170, 178, 195], "estim": [1, 162], "actor": 1, "put": [1, 162, 177, 198], "thing": [1, 17], "togeth": [1, 17, 142, 162, 169, 177, 198, 225], "forward": [1, 7, 8, 120, 140, 147, 158, 161, 198, 199], "call": [1, 193], "environ": [1, 17, 58, 141, 155, 162, 178, 191, 267, 269], "transform": [1, 11, 17, 45, 46, 56, 100, 129, 130, 139, 142, 161, 171, 173, 174, 178, 183, 186, 199], "parallel": [1, 11, 49, 59, 61, 65, 133, 138, 139, 140, 142, 152, 153, 165, 173, 174, 210, 241, 263], "execut": [1, 17, 23, 115, 174, 180, 188, 231, 241], "normal": [1, 48, 178, 244], "observ": 1, "stat": 1, "build": [1, 4, 5, 7, 13, 36, 100, 107, 159, 175, 192, 199, 244, 286, 288], "model": [1, 8, 11, 15, 21, 23, 24, 36, 40, 41, 42, 49, 54, 60, 65, 80, 81, 90, 96, 98, 100, 102, 104, 105, 110, 112, 114, 115, 122, 124, 128, 129, 139, 140, 142, 143, 150, 152, 155, 156, 159, 162, 163, 165, 166, 173, 174, 176, 177, 184, 186, 188, 189, 191, 198, 204, 205, 213, 220, 221, 222, 224, 228, 231, 235, 236, 241, 242, 243, 254, 255, 262, 281, 288], "explor": [1, 23], "data": [1, 8, 11, 24, 29, 37, 41, 48, 49, 54, 55, 57, 59, 60, 61, 93, 100, 103, 113, 128, 138, 139, 140, 142, 145, 146, 152, 178, 184, 186, 188, 189, 191, 195, 196, 217, 228, 241, 242, 243, 244, 265, 276], "collector": [1, 155, 178], "evalu": [1, 54, 128, 143, 144, 145, 184, 225], "your": [1, 7, 13, 17, 37, 65, 98, 102, 113, 120, 168, 198, 210, 228, 267], "record": [1, 188, 265], "replai": [1, 155, 178, 179], "buffer": [1, 155, 178, 241], "storag": [1, 255, 266], "batch": [1, 12, 17, 148, 161, 180, 192, 214, 241, 255], "size": [1, 255], "modul": [1, 8, 18, 72, 90, 100, 113, 120, 121, 155, 158, 170, 176, 196, 230, 238, 255, 285], "construct": [1, 23, 60, 276, 277], "target": [1, 162, 241], "network": [1, 8, 36, 48, 51, 57, 93, 107, 110, 145, 146, 155, 162, 178, 179, 184, 186, 199, 225, 228, 242, 243, 244], "updat": [1, 51, 162, 180, 285], "optim": [1, 40, 41, 48, 57, 74, 104, 107, 113, 121, 140, 144, 169, 182, 196, 204, 205, 214, 241, 243, 244, 246, 258, 259], "time": [1, 22, 43, 52, 69, 75, 79, 87, 91, 101, 111, 119, 120, 123, 177, 185, 231, 237, 240, 245, 247, 249, 250, 261, 284], "train": [1, 3, 4, 8, 11, 14, 17, 19, 24, 28, 36, 37, 48, 54, 57, 58, 60, 93, 95, 98, 102, 104, 107, 122, 128, 139, 142, 143, 145, 146, 150, 151, 154, 155, 162, 169, 173, 178, 179, 184, 186, 189, 196, 200, 215, 241, 244, 248, 252, 281], "polici": [1, 17, 139, 155, 178], "experi": [1, 17, 18, 144, 262], "result": [1, 3, 49, 57, 80, 115, 120, 144, 145, 149, 178, 184, 186, 188, 196, 222, 224, 226, 283], "conclus": [1, 2, 3, 4, 5, 7, 8, 17, 18, 19, 21, 24, 54, 87, 105, 114, 115, 118, 125, 141, 142, 147, 155, 159, 160, 162, 163, 169, 172, 174, 178, 183, 193, 195, 196, 199, 200, 202, 205, 207, 208, 209, 210, 213, 214, 230, 238, 241, 245, 249, 250, 251, 252, 253, 254, 255, 256, 258, 263, 265, 266, 267, 268, 269, 274, 275, 276, 277, 278, 279, 281, 282, 283], "next": [1, 48, 57, 80, 177, 178], "step": [1, 125, 169, 174, 175, 177, 178, 188, 199, 226, 228, 231, 242, 243, 244, 245], "autograd": [2, 4, 12, 13, 35, 47, 67, 68, 82, 95, 121, 143, 147, 158, 182], "c": [2, 3, 4, 7, 8, 9, 10, 12, 13, 215, 240, 268, 288], "frontend": [2, 8, 90, 92], "basic": [2, 8, 38, 39, 147, 152, 158, 172, 175, 180, 193, 195, 214, 252], "oper": [2, 4, 5, 7, 10, 12, 13, 19, 44, 53, 95, 109, 118, 172, 202, 241, 262, 276, 277, 279], "comput": [2, 17, 22, 35, 43, 47, 52, 69, 75, 79, 87, 91, 101, 109, 111, 112, 119, 123, 128, 161, 166, 185, 224, 237, 241, 247, 261, 284], "higher": 2, "order": [2, 241], "gradient": [2, 15, 35, 80, 96, 140, 171, 200, 225, 241, 244, 276], "us": [2, 3, 7, 8, 11, 14, 15, 16, 28, 39, 47, 55, 58, 88, 113, 114, 115, 118, 120, 122, 127, 138, 140, 147, 148, 150, 152, 153, 155, 156, 158, 171, 173, 175, 180, 181, 182, 183, 188, 189, 191, 203, 206, 208, 209, 210, 216, 222, 224, 230, 231, 239, 241, 242, 252, 254, 256, 258, 259, 266, 269, 272, 276, 278, 288], "custom": [2, 4, 5, 7, 9, 10, 13, 17, 18, 19, 37, 56, 72, 118, 121, 127, 128, 133, 148, 149, 158, 175, 176, 195, 198, 210], "function": [2, 15, 18, 24, 35, 40, 48, 51, 57, 68, 80, 90, 93, 100, 104, 105, 106, 107, 113, 121, 148, 149, 158, 161, 166, 171, 176, 178, 213, 226, 231, 241, 244, 251], "translat": [2, 124, 130, 184], "from": [2, 10, 24, 47, 55, 113, 115, 122, 145, 146, 150, 167, 184, 191, 196, 198, 230, 242], "python": [2, 4, 5, 7, 10, 19, 90, 175, 254, 256, 288], "cuda": [3, 4, 7, 10, 55, 87, 172, 206, 241], "graph": [3, 35, 47, 102, 109, 115, 147, 193, 195, 241, 255, 281], "pytorch": [3, 7, 8, 10, 13, 15, 18, 24, 28, 47, 50, 55, 59, 62, 65, 67, 68, 70, 72, 73, 74, 78, 86, 94, 97, 98, 99, 100, 102, 103, 104, 107, 108, 109, 110, 112, 115, 118, 120, 121, 137, 154, 163, 172, 177, 188, 191, 196, 199, 202, 203, 212, 214, 215, 216, 217, 219, 222, 223, 228, 229, 231, 232, 239, 241, 242, 243, 244, 248, 262, 264, 272, 281, 288], "api": [3, 8, 65, 95, 140, 158, 163, 169, 175, 222, 241, 256, 265, 268, 288], "get": [3, 13, 36, 87, 112, 138, 140, 152, 160, 168, 182, 208, 209, 210, 215, 216, 279], "start": [3, 87, 102, 138, 140, 152, 168, 182, 208, 209, 210, 215, 216, 240, 245, 258, 279], "set": [4, 5, 93, 141, 144, 191, 204, 205, 213, 241, 249, 262, 265, 267, 269], "up": [4, 5, 77, 121, 144, 191, 198, 204, 205, 213, 214, 240, 262, 267, 269], "system": [4, 5], "defin": [4, 5, 8, 12, 24, 36, 48, 51, 54, 68, 105, 114, 121, 144, 174, 178, 191, 198, 226, 228, 240, 242, 243, 244, 252, 262], "op": [4, 5, 7, 12, 195, 251], "ad": [4, 5, 12, 19, 93, 189, 196, 225, 252], "backend": [4, 5, 12, 13, 18, 141, 154, 160, 175, 216, 241, 248, 258, 262, 281, 288], "implement": [4, 5, 12, 40, 57, 80, 106, 118, 148, 170, 175, 180, 181, 183, 213, 274, 276, 285], "an": [4, 13, 17, 48, 110, 112, 118, 122, 143, 155, 178, 196, 205, 230, 258, 265], "regist": [4, 8, 12, 13, 18, 200], "torch": [4, 9, 35, 47, 86, 100, 109, 113, 114, 122, 145, 147, 152, 176, 183, 192, 193, 194, 195, 199, 204, 213, 225, 226, 230, 238, 245, 250, 251, 252, 253, 254, 255, 256, 258, 266, 269, 276, 281, 287], "compil": [4, 7, 9, 131, 147, 160, 183, 192, 193, 199, 204, 205, 213, 245, 249, 250, 251, 252, 253, 254, 256, 269, 278, 281], "support": [4, 9, 12, 13, 19, 93, 102, 118, 183, 252, 277, 285], "hybrid": [4, 90, 92], "registr": 4, "test": [4, 5, 13, 17, 19, 48, 80, 93, 148, 192, 198, 228, 240, 288], "creat": [4, 5, 10, 16, 37, 41, 49, 54, 103, 107, 109, 113, 144, 145, 146, 159, 166, 176, 241], "mutabl": [4, 19], "sycl": 5, "interfac": 5, "initi": [5, 44, 53, 57, 58, 140, 141, 152, 154, 162, 170, 228, 242, 243, 279, 285], "packag": [5, 15, 83], "extens": [5, 7, 13, 16, 133, 136, 175, 202, 205, 215, 238, 248, 282], "motiv": [7, 8, 90, 274], "exampl": [7, 16, 19, 80, 84, 90, 95, 96, 107, 110, 112, 121, 122, 143, 199, 215, 216, 248, 253, 258, 265, 268, 278, 282], "write": [7, 8, 17, 56, 154, 189, 198, 274], "setuptool": 7, "pass": [7, 14, 120, 141, 147, 169, 192, 228], "backward": [7, 13, 139, 140, 147, 148, 149, 169], "bind": 7, "perform": [7, 120, 141, 156, 159, 160, 163, 171, 177, 183, 188, 207, 214, 219, 241, 253, 258, 269, 278], "comparison": [7, 148, 152, 171, 193], "gpu": [7, 8, 48, 49, 60, 84, 93, 122, 172, 188, 196, 215, 241, 267, 272], "devic": [7, 15, 18, 36, 122, 139, 206, 227, 230, 233, 241, 288], "jit": [7, 13, 114, 177], "mix": [7, 139, 140, 150, 225, 241], "accessor": 7, "integr": [7, 10, 18, 96], "applic": [8, 154, 175, 203, 238], "neural": [8, 15, 36, 48, 51, 93, 113, 162, 166, 216, 228, 242, 243, 244], "paramet": [8, 16, 36, 40, 41, 49, 100, 122, 176, 178, 180, 181, 226, 241, 242, 285], "submodul": 8, "travers": 8, "hierarchi": [8, 222], "run": [8, 39, 49, 54, 55, 58, 59, 60, 80, 90, 99, 105, 144, 152, 188, 191, 195, 204, 205, 213, 231, 239], "mode": [8, 23, 24, 158, 161, 251, 278], "ownership": 8, "dcgan": [8, 57], "what": [8, 13, 14, 18, 21, 48, 57, 61, 62, 95, 113, 122, 149, 156, 171, 172, 205, 206, 209, 210, 222, 243, 254, 258, 259, 265, 283, 287], "wa": 8, "gan": [8, 57], "agan": 8, "gener": [8, 18, 57, 80, 122, 144, 146, 226, 234, 241], "discrimin": [8, 57, 106], "load": [8, 15, 37, 41, 42, 48, 54, 58, 105, 122, 128, 150, 152, 184, 186, 208, 217, 226, 228, 230, 233, 234, 235, 241, 242, 243, 244, 266], "loop": [8, 17, 40, 104, 155, 178, 179], "move": [8, 103], "checkpoint": [8, 60, 122, 139, 152, 162, 207, 208, 230, 234, 241], "recov": 8, "state": [8, 140, 259], "inspect": [8, 147, 170, 176, 189, 225], "imag": [8, 15, 48, 63, 64, 102, 115, 128, 177, 191, 255], "class": [9, 14, 17, 36, 56, 105, 170, 196], "export": [9, 114, 115, 118, 122, 194, 195, 254, 255, 281], "why": [9, 10, 58, 61, 142, 143, 209, 210, 276, 279], "do": [9, 12, 48, 95, 149, 163], "we": [9, 95], "need": [9, 12, 95, 199], "make": [9, 14, 106, 203], "fake": 9, "author": [10, 115], "manual": 10, "when": [10, 142, 149, 150, 254, 276], "should": [10, 61, 142], "i": [10, 14, 18, 33, 48, 57, 61, 62, 113, 122, 149, 150, 156, 169, 171, 199, 202, 206, 209, 210, 222, 225, 243, 255, 259, 276, 287], "distribut": [11, 14, 20, 23, 58, 59, 60, 61, 65, 87, 133, 152, 153, 154, 174, 181, 182, 196, 207, 208, 241], "pipelin": [11, 153, 173, 174], "dispatch": [12, 13, 183], "schema": 12, "For": [12, 95, 235], "In": [12, 95, 103, 236], "place": [12, 95, 103], "view": [12, 188], "go": [12, 48, 57, 80, 191, 199], "beyond": 12, "autocast": [12, 225], "tracer": 12, "extend": [13, 118, 176, 199], "new": [13, 18, 68, 106, 121, 148], "": [13, 19, 109, 162, 275], "kei": [13, 255], "full": [13, 40, 93], "list": 13, "kernel": [13, 18, 87, 166, 213, 214, 252], "against": 13, "nativ": [13, 203], "compat": 13, "known": 13, "issu": 13, "addit": [13, 125, 137, 172, 174, 188, 200, 265], "note": [13, 106, 224], "futur": [13, 18], "work": [13, 14, 18, 41, 138, 139, 140, 142, 163, 208, 282], "stai": 13, "touch": 13, "uneven": 14, "input": [14, 57, 60, 80, 149, 196, 199, 226, 241], "join": 14, "context": [14, 263], "manag": [14, 172], "requir": [14, 21, 115, 143, 176, 206, 222, 255, 259, 283], "distributeddataparallel": [14, 152, 241], "zeroredundancyoptim": [14, 259], "keyword": 14, "argument": 14, "how": [14, 18, 39, 138, 139, 140, 142, 169, 206, 208, 210, 222, 228, 239, 259, 269, 282], "doe": [14, 21, 143, 283], "joinabl": 14, "joinhook": 14, "toi": 14, "transfer": [15, 128], "introduct": [15, 28, 47, 57, 65, 87, 94, 96, 97, 98, 99, 102, 103, 104, 109, 117, 141, 170, 172, 174, 188, 191, 193, 196, 197, 202, 228, 231, 242, 243, 244, 249, 250, 258, 263, 268, 269, 274, 277, 278, 281, 285, 288], "underli": 15, "principl": [15, 277], "select": [15, 155, 263, 286], "content": [15, 121, 214], "style": [15, 199], "descent": 15, "numpi": [16, 44, 53, 77, 103, 121, 275], "scipi": 16, "less": 16, "parametr": [16, 170, 176], "pendulum": 17, "effect": 17, "action": [17, 155], "_step": 17, "reset": 17, "simul": 17, "_reset": 17, "metadata": [17, 18], "env": 17, "_spec": 17, "spec": 17, "shape": [17, 42, 103, 195, 232], "reproduc": 17, "seed": [17, 103], "wrap": [17, 19, 113, 139, 198, 240, 252], "envbas": 17, "our": [17, 23, 148, 154, 169, 192, 228, 242, 243, 244], "rollout": 17, "simpl": [17, 49, 95, 115, 159, 184, 225, 231], "facilit": 18, "privateuse1": 18, "via": [18, 265], "guard": [18, 195], "serial": [18, 176], "deseri": 18, "other": [18, 23, 100, 102, 104, 172, 188], "improv": [18, 120, 188, 214, 281], "user": [18, 86, 252, 288], "renam": 18, "name": [18, 145, 146, 195], "properti": 18, "relat": [18, 42, 191, 238], "pil": 19, "crop": 19, "combin": [20, 142, 152], "dataparallel": [20, 49, 61, 93, 122, 152], "rpc": [20, 133, 153, 180, 181, 182, 206, 212, 264], "framework": [20, 181, 182], "beta": [21, 24, 158, 159, 183, 204, 205, 214, 218, 251, 254, 256, 280], "acceler": [21, 103, 113, 168, 199, 266, 283], "bert": [21, 283], "semi": [21, 28, 283], "structur": [21, 283], "2": [21, 24, 48, 49, 90, 115, 141, 166, 174, 175, 188, 189, 198, 226, 228, 231, 240, 242, 243, 244, 262, 281, 283], "4": [21, 24, 48, 90, 115, 175, 177, 188, 189, 226, 228, 231, 240, 242, 243, 244, 262, 281, 283], "sparsiti": [21, 277, 283], "problem": [21, 283], "solv": [21, 283], "intro": [21, 201, 283], "establish": 21, "baselin": 21, "prune": [21, 176, 283], "spars": [21, 274, 277, 283], "infer": [21, 46, 122, 128, 177, 214, 215, 225, 235, 241, 248, 254], "torchrec": [23, 196, 197], "shard": [23, 65, 138, 139, 140, 142, 196, 259], "instal": [23, 87, 96, 115, 177, 196, 216, 239, 269, 281], "embed": [23, 102, 112, 196], "distributedmodelparallel": [23, 196], "multiprocess": 23, "tabl": [23, 121], "wise": 23, "static": [24, 106, 216, 255], "quantiz": [24, 177, 216, 262, 267, 281], "eager": 24, "1": [24, 48, 90, 115, 141, 166, 174, 175, 188, 189, 195, 198, 226, 228, 231, 240, 242, 243, 244, 262, 281], "architectur": 24, "helper": [24, 213, 277], "3": [24, 48, 49, 90, 115, 141, 174, 175, 188, 189, 226, 228, 231, 240, 242, 243, 244, 262, 281], "dataset": [24, 30, 37, 49, 56, 98, 102, 104, 113, 127, 198, 244], "loader": [24, 93], "imagenet": 24, "post": [24, 281], "5": [24, 48, 115, 188, 189, 226, 231, 240, 244, 262], "awar": 24, "speedup": [24, 193, 225], "supervis": 28, "learn": [28, 38, 39, 50, 62, 90, 106, 107, 108, 121, 128, 133, 162, 172, 178, 179, 180, 182, 188, 226, 228, 231, 239, 242, 243, 244, 254, 258, 265], "usb": 28, "built": [28, 262], "upon": 28, "freematch": 28, "softmatch": 28, "cifar": [28, 105], "10": [28, 105, 169], "onli": [28, 215, 216], "40": 28, "label": [28, 191], "specif": [28, 191, 241], "imbalanc": 28, "algorithm": [28, 179], "audio": [29, 30, 31, 32, 33, 34], "augment": [29, 31, 87, 110, 241], "featur": [31, 32, 96, 110, 128, 139, 188, 191, 196, 215, 216], "extract": [32, 191], "o": 33, "resampl": 34, "automat": [35, 109, 158, 225, 255], "differenti": [35, 47, 109, 158], "tensor": [35, 44, 53, 67, 78, 85, 98, 103, 109, 121, 133, 142, 143, 145, 169, 183, 199, 205, 238, 241, 255, 277, 279], "disabl": [35, 241], "track": [35, 149, 189], "more": [35, 95, 103, 143, 160, 161, 180, 188, 207, 226, 228, 231, 239, 242, 243, 244], "option": [35, 47, 49, 125, 198, 200, 228, 258, 281, 288], "read": [35, 36, 37, 40, 45, 47, 58, 60, 61, 114, 115, 117, 118, 120, 125, 150, 151, 155, 191, 222, 241, 262, 274, 276, 277], "jacobian": [35, 161, 166], "product": [35, 161, 166, 183], "further": [35, 36, 37, 40, 45, 47, 58, 60, 61, 114, 115, 117, 118, 120, 125, 128, 150, 151, 155, 199, 241, 262, 274, 276, 277], "layer": [36, 96, 100, 142, 148, 199, 241], "nn": [36, 72, 73, 83, 90, 100, 113, 121, 122, 129, 130, 176, 199, 230, 238, 255], "flatten": 36, "linear": [36, 100, 107, 113], "relu": [36, 262], "sequenti": [36, 113], "softmax": [36, 107, 276], "dataload": [37, 56, 98, 104, 113], "iter": [37, 54, 56, 176], "visual": [37, 96, 102, 115, 128, 169, 184, 186, 189, 200, 222, 224], "file": [37, 54, 115, 122, 150, 184, 236, 265], "__len__": 37, "__getitem__": 37, "prepar": [37, 54, 145, 146, 184, 188, 220, 221, 262, 274, 275, 276, 288], "through": [37, 56, 90, 228, 262], "thi": [39, 62, 139, 169, 199, 282], "guid": [39, 140, 172, 241], "hyperparamet": [40, 93, 178, 179], "quickstart": 41, "save": [41, 42, 58, 60, 115, 122, 139, 143, 149, 150, 152, 162, 169, 207, 208, 225, 226, 233, 234, 235, 236, 242, 266], "weight": [42, 51, 57, 70, 121, 216], "attribut": [44, 53, 96, 224], "bridg": [44, 53, 103], "arrai": [44, 53], "totensor": 45, "lambda": 45, "fast": [46, 80, 214], "better": [46, 269, 278], "A": [47, 50, 62, 95, 96, 106, 148, 172, 222, 225, 234, 240, 242], "gentl": 47, "background": [47, 172], "usag": [47, 147, 148, 158, 169, 172, 193, 195, 214, 248, 252, 288], "vector": [47, 156, 161, 166], "calculu": 47, "exclus": 47, "dag": 47, "classifi": [48, 107, 115, 145, 191], "about": [48, 232], "cifar10": 48, "convolut": [48, 100, 148, 155, 192, 241], "multipl": [48, 122, 176, 236], "where": [48, 57, 80, 191, 276], "dummi": 49, "8": [49, 226, 240], "summari": [49, 139, 183, 223], "deep": [50, 62, 106, 107, 108, 132], "60": [50, 62], "minut": [50, 62], "blitz": [50, 62], "backprop": 51, "chatbot": 54, "preprocess": [54, 127, 162, 177], "format": [54, 115, 163, 208, 241, 265], "trim": 54, "seq2seq": [54, 184], "encod": [54, 112, 184], "decod": [54, 184], "procedur": 54, "mask": [54, 199, 276], "singl": [54, 165], "greedi": 54, "my": 54, "text": [54, 126, 127, 190], "googl": 55, "colab": 55, "version": [55, 166], "drive": 55, "enabl": [55, 140, 241, 263, 265, 268], "compos": [56, 161, 252], "afterword": 56, "torchvis": [56, 81, 198], "adversari": [57, 80], "fault": 58, "toler": 58, "torchrun": [58, 152], "grace": 58, "restart": 58, "process": [58, 60, 152, 174, 175, 180], "group": [58, 60, 175], "provid": 58, "variabl": [58, 141, 241], "snapshot": [58, 169], "trainer": 58, "constructor": [58, 241], "resum": [58, 122, 225], "script": [58, 90, 168, 246, 258], "video": [59, 177, 255], "section": 59, "multi": [60, 84, 93, 144], "ddp": [60, 61, 133, 150, 152, 241], "job": [60, 231, 265], "you": [61, 102, 142, 172, 199, 224, 254, 258, 265], "prefer": 61, "over": 61, "dp": 61, "goal": 62, "segment": [63, 64, 198, 255], "deeplabv3": [63, 64], "android": [63, 203, 218, 220, 273, 286, 288], "io": [64, 218, 221, 272, 273, 286], "primit": 65, "commun": [65, 87, 93, 154, 206], "launcher": 65, "appli": [65, 142, 258, 281, 282], "To": 65, "scale": [65, 142, 151, 183], "develop": 65, "control": [70, 114, 121, 183, 195, 241, 253, 258], "flow": [70, 114, 121, 195, 255], "share": [70, 121], "warm": [77, 121], "threat": 80, "sign": 80, "attack": 80, "under": 80, "fgsm": 80, "accuraci": [80, 93, 160, 216], "v": [80, 161, 172, 275], "epsilon": 80, "sampl": [80, 146, 171, 222], "finetun": [81, 128, 198], "former": 86, "holist": [87, 88], "trace": [87, 88, 90, 114, 159, 193, 222, 231, 255, 286], "analysi": [87, 88], "hta": 87, "tempor": 87, "breakdown": 87, "idl": 87, "durat": 87, "overlap": 87, "counter": 87, "memori": [87, 110, 120, 143, 148, 163, 169, 172, 179, 207, 214, 231, 241, 258], "bandwidth": 87, "queue": 87, "length": [87, 241], "launch": [87, 174, 222], "statist": 87, "diff": 88, "syntax": 90, "inform": [90, 160], "part": [90, 110], "pure": 90, "top": 90, "level": [90, 95, 110, 145, 146], "tune": [93, 139, 214, 216, 241], "rai": 93, "configur": [93, 144, 222, 249], "search": 93, "space": 93, "youtub": [94, 97, 99], "seri": [94, 99], "fundament": 95, "turn": [95, 145], "off": 95, "On": 95, "profil": [95, 120, 159, 160, 188, 212, 222, 231, 264], "advanc": [95, 106, 139, 154, 188, 202, 225, 252, 275], "topic": [95, 154, 225], "detail": [95, 285], "high": [95, 183], "understand": 96, "captum": [96, 224], "first": [96, 114, 170], "occlus": 96, "gradcam": 96, "insight": 96, "common": [100, 147, 255], "type": [100, 103, 196, 225, 255], "recurr": [100, 155], "manipul": [100, 103], "activ": [100, 104, 278], "tensorboard": [102, 188, 189, 239], "befor": [102, 191, 224], "show": 102, "scalar": [102, 239], "resourc": [102, 104, 137, 172, 174], "random": [103, 106], "math": [103, 214], "logic": 103, "brief": 103, "broadcast": 103, "alter": 103, "copi": [103, 172], "chang": [103, 227], "number": 103, "dimens": [103, 214], "per": [104, 171], "epoch": 104, "knowledg": 105, "distil": 105, "util": [105, 176, 179, 199, 202, 226, 238, 241, 251], "cross": [105, 199], "entropi": 105, "cosin": 105, "minim": 105, "intermedi": [105, 149, 241], "regressor": 105, "dynam": [106, 195, 253], "decis": 106, "bi": 106, "lstm": [106, 110, 155], "crf": 106, "versu": 106, "toolkit": 106, "condit": 106, "field": 106, "discuss": 106, "exercis": [106, 110, 112, 125, 145, 146, 184, 200], "tag": [106, 110], "block": [107, 199, 226], "affin": 107, "map": 107, "non": [107, 172, 195, 205, 241], "probabl": 107, "compon": [107, 160], "logist": 107, "regress": 107, "bag": [107, 112], "word": [107, 112], "nlp": [108, 145, 146, 167, 184], "librari": [109, 126, 191, 203, 228, 231, 241, 242, 243, 244, 258], "reshap": 109, "sequenc": [110, 142, 184], "long": [110, 231], "short": [110, 222], "term": 110, "speech": [110, 187, 190, 255], "tagger": 110, "charact": [110, 145, 146], "lexic": 112, "semant": [112, 274, 275], "dens": [112, 183], "n": 112, "gram": 112, "languag": [112, 129, 130], "continu": 112, "realli": 113, "mnist": 113, "net": 113, "scratch": [113, 145, 146, 167, 184], "without": [113, 288], "refactor": [113, 114], "add": [113, 141, 198, 251], "valid": [113, 241], "fit": [113, 169], "get_data": 113, "switch": [113, 241], "cnn": 113, "close": 113, "thought": 113, "attempt": 114, "suggest": [114, 195], "patch": [114, 191], "cond": 114, "depend": [115, 117, 183, 195, 196], "netron": 115, "6": [115, 188, 189, 226, 231, 240, 262], "runtim": [115, 241, 254, 258], "7": [115, 188, 226, 231, 240, 262], "compar": [115, 226], "ones": 115, "overrid": 118, "exist": [118, 163], "debug": [120, 160, 241, 265], "print": 120, "state_dict": [122, 243], "recommend": [122, 145, 172, 193], "entir": 122, "program": [122, 195], "One": [122, 236], "warmstart": [122, 242], "differ": [122, 147, 198, 242], "across": [122, 233], "cpu": [122, 139, 143, 159, 160, 172, 202, 215, 222, 241, 248, 252, 258, 269, 278], "t5": [124, 139], "base": [124, 212, 264, 286], "summar": 124, "sentiment": 124, "classif": [124, 126, 191, 255], "templat": 125, "torchtext": [126, 127, 129, 130], "vision": [128, 241], "few": 128, "predict": [128, 191], "convnet": 128, "fix": [128, 195], "extractor": 128, "dive": 132, "fsdp2": [133, 140], "tp": [133, 142], "devicemesh": [133, 210], "domain": 134, "ecosystem": 135, "welcom": 137, "fulli": [138, 139, 140, 142, 199], "fsdp": [138, 139], "recap": 139, "fine": 139, "hf": 139, "precis": [139, 140, 150, 225, 241], "intial": 139, "strategi": [139, 144], "prefetch": [139, 140], "stream": 139, "rank0": 139, "clip": [140, 225], "dtensor": 140, "dict": 140, "dcp": [140, 207, 208], "fsdp1": 140, "migrat": 140, "libuv": 141, "tcpstore": 141, "benchmark": [141, 192, 204, 226], "impact": 141, "exit": 141, "rout": 141, "use_libuv": 141, "fals": 141, "0": [141, 195, 276], "init_method": 141, "processgroup": 141, "larg": 142, "layernorm": 142, "rmsnorm": 142, "hook": [143, 169, 200], "typic": 143, "than": 143, "concept": [143, 195], "pack": [143, 199], "unpack": 143, "some": 143, "unconvent": 143, "return": 143, "int": 143, "tupl": 143, "str": 143, "disk": 143, "na": 144, "ax": 144, "torchx": 144, "app": [144, 288], "runner": 144, "searchspac": 144, "metric": [144, 281], "optimizationconfig": 144, "choos": [144, 258], "schedul": [144, 205], "acknowledg": 144, "rnn": [145, 146, 182], "plot": [145, 146, 184], "captur": [147, 159, 169, 177, 281], "larger": 147, "log": [147, 160, 162, 239], "flag": 147, "address": [147, 255], "certain": 147, "limit": [147, 252], "aotautograd": 147, "recompil": [147, 253], "reason": [147, 232], "fuse": [148, 169, 183, 192, 196, 241], "norm": [148, 192, 241], "formula": [148, 252], "batchnorm": 148, "out": [148, 192, 244, 282], "doubl": 149, "output": [149, 196], "real": [150, 177], "world": 150, "cloud": 150, "enough": 150, "multinod": 151, "local": 151, "global": [151, 176], "rank": 151, "heteregen": 151, "troubleshoot": [151, 177, 225], "between": [152, 276], "case": [152, 241], "skew": 152, "speed": [152, 214], "point": [154, 238], "collect": [154, 178, 226], "own": 154, "ring": 154, "allreduc": 154, "dqn": [155, 179], "mlp": 155, "q": [155, 179], "ensembl": 156, "vmap": [156, 287], "forc": 157, "align": 157, "wav2vec2": [157, 187], "fx": [159, 193, 281], "symbol": [159, 195], "interpret": [159, 218, 224, 273, 286], "investig": 159, "resnet18": [159, 192], "inductor": [160, 249, 268], "determin": 160, "error": [160, 195, 225, 255], "hessian": 161, "hvp": 161, "vhp": 161, "revers": 161, "jacrev": 161, "jacfwd": 161, "functorch": 161, "mario": 162, "plai": 162, "rl": 162, "agent": 162, "definit": 162, "act": 162, "cach": [162, 170, 249, 250], "recal": 162, "td": 162, "all": [162, 169, 199, 225, 231, 241], "let": 162, "channel": 163, "last": 163, "gain": [163, 253], "convert": [163, 262, 271, 280], "machin": 165, "best": [165, 193, 196], "practic": [165, 172, 188, 193, 196], "tangent": 166, "ntk": 166, "contract": 166, "nvfuser": 168, "dure": [169, 241], "disclaim": 169, "techniqu": 169, "register_post_accumulate_grad_hook": 169, "everyth": [169, 198], "line": 169, "hand": 170, "ar": [170, 199], "citizen": 170, "concaten": 170, "remov": [170, 176], "grad": [171, 241, 276], "effici": [171, 218, 241, 274], "wai": 171, "good": 172, "non_block": 172, "pin_memori": 172, "preambl": 172, "pageabl": 172, "asynchron": [172, 180, 207, 241], "synchron": [172, 241], "true": [172, 230, 241], "cudamemcpyasync": 172, "perspect": 172, "synergi": 172, "direct": [172, 206], "mp": 172, "consider": 172, "partit": 174, "main": 174, "cpp": 175, "subclass": [175, 183, 238], "expos": 175, "re": 176, "raspberri": 177, "pi": 177, "30": 177, "fp": 177, "opencv": 177, "choic": 177, "mobilenetv2": [177, 271, 280], "It": 177, "reinforc": [178, 179, 182], "ppo": 178, "server": [180, 181], "cartpol": 180, "solver": 180, "rref": 182, "dot": 183, "attent": [183, 184, 199], "sdpa": 183, "explicit": [183, 213], "hardwar": 183, "causal": 183, "self": 183, "nestedtensor": 183, "attn_bia": 183, "spatial": 186, "depict": 186, "stn": 186, "recognit": [187, 255], "With": 188, "event": 188, "analyz": [188, 231, 265], "help": 188, "amd": 188, "projector": 189, "assess": 189, "tacotron2": 190, "whole": 191, "slide": 191, "tiatoolbox": 191, "clean": 191, "download": 191, "patchpredictor": 191, "pathologi": 191, "here": 191, "fuser": 192, "pattern": [192, 262], "match": [192, 241], "fusion": [192, 213, 262], "nest": [193, 199, 279], "demonstr": [193, 255], "torchscript": 193, "torchdynamo": [193, 250, 255], "nightli": 194, "break": [195, 255], "strict": [195, 255], "constraint": [195, 262], "special": 195, "dim": 195, "violat": 195, "_check": 195, "ir": 195, "decomposit": 195, "exportdb": 195, "recsi": 196, "embeddingbag": 196, "embeddingbagcollect": 196, "planner": 196, "lazyawait": 196, "anatomi": 196, "lookup": 196, "detect": 198, "pennfudan": 198, "pretrain": 198, "modifi": [198, 225], "backbon": 198, "instanc": 198, "replac": 199, "me": 199, "introduc": [199, 273], "abov": 199, "octob": 199, "2024": 199, "multiheadattent": 199, "gpt": 199, "one": 199, "row": 199, "longer": 199, "caus": 199, "nan": [199, 225, 276], "flexattent": 199, "njt": 199, "project": 199, "swiglu": 199, "feed": 199, "refer": [200, 262], "leverag": 202, "intel": [202, 215, 216, 222, 241, 248, 258, 269], "matrix": 202, "amx": 202, "guidelin": 202, "workload": [202, 212, 222, 241, 264], "can": 202, "confirm": 202, "being": 202, "prebuilt": 203, "see": [204, 252, 279], "also": [204, 252, 279], "lr": 205, "happen": 205, "tensorpip": 206, "even": 207, "pin": 207, "commdebugmod": 209, "hsdp": 210, "solut": [210, 255], "horizont": 213, "foreach_map": 213, "aw": 214, "graviton": 214, "processor": 214, "bfloat16": [214, 215], "openbla": 214, "smaller": 214, "alloc": [214, 241, 258], "overhead": 214, "linux": 214, "transpar": 214, "huge": 214, "page": 214, "thp": 214, "float32": 215, "float16": 215, "eas": 216, "compressor": 216, "fp8": 216, "pt2e": 216, "driven": 216, "mobil": [218, 219, 223, 246, 286], "recip": [219, 220, 221, 223, 229, 246, 260], "instrument": 222, "technologi": 222, "itt": 222, "vtune": 222, "xpu": [222, 269], "showcas": 222, "begin": 224, "final": 224, "default": [225, 227], "gradscal": 225, "e": 225, "g": 225, "amp": [225, 241], "minor": 225, "inf": 225, "mismatch": 225, "mai": 225, "manifest": 225, "cudnn_status_bad_param": 225, "syntaxerror": 226, "timeit": 226, "timer": [226, 240], "autorang": 226, "fuzz": 226, "instruct": [226, 240], "count": [226, 240], "callgrind": [226, 240], "necessari": [228, 231, 242, 243, 244], "specifi": 228, "tip": 230, "mmap": 230, "meta": 230, "load_state_dict": [230, 238], "assign": 230, "instanti": 231, "resnet": 231, "consumpt": 231, "examin": 231, "stack": 231, "And": [234, 235], "swap_tensor": 238, "quick": [240, 258], "wall": 240, "blocked_autorang": 240, "snippet": 240, "collect_callgrind": 240, "delv": 240, "deeper": 240, "b": [240, 242], "footnot": 240, "calcul": 241, "bia": 241, "directli": 241, "follow": 241, "none": 241, "instead": 241, "zero_grad": 241, "channels_last": 241, "uniform": 241, "access": [241, 243, 258, 276], "numa": [241, 258], "openmp": [241, 258], "libiomp": 241, "core": [241, 271], "cudnn": 241, "auto": 241, "tuner": 241, "avoid": 241, "unnecessari": 241, "prealloc": 241, "skip": [241, 285], "reduc": [241, 245], "accumul": 241, "find_unused_paramet": 241, "balanc": 241, "zero": 244, "while": 244, "cold": 245, "region": 245, "fp32": 248, "bf16": 248, "torchinductor_fx_graph_cach": 249, "torchinductor_autograd_cach": 249, "torchinductor_cache_dir": 249, "torchinductor_fx_graph_remote_cach": 249, "torchinductor_autograd_remote_cach": 249, "torchinductor_autotune_remote_cach": 249, "torchinductor_force_disable_cach": 249, "offer": 250, "end": [250, 265], "mega": 250, "modular": 250, "torchinductor": 250, "triton": [250, 252], "remot": 250, "rewrit": 251, "mul": 251, "triton_op": 252, "fallback": 252, "flopcount": 252, "set_stanc": 253, "descript": 253, "prevent": 253, "measur": 253, "crash": 253, "sooner": 253, "aotinductor": 254, "challeng": 255, "them": 255, "No": 255, "caption": 255, "cannot": 255, "mutat": 255, "frozen": 255, "promptabl": 255, "torch_log": 256, "xeon": 258, "run_cpu": 258, "Will": 258, "command": 258, "explan": 258, "prototyp": [262, 266, 267, 271, 272, 273, 283, 286], "backendconfig": 262, "deriv": 262, "each": 262, "dtypeconfig": 262, "conv": 262, "qconfigmap": 262, "satisfi": 262, "faulti": 262, "rotat": 263, "approach": 263, "flight": 265, "stuck": 265, "retriev": 265, "dump": 265, "gpudirect": 266, "torchao": 267, "wrapper": [268, 288], "window": 269, "softwar": 269, "altern": 269, "llvm": 269, "ml": 271, "lite": 273, "workflow": [273, 288], "adagrad": 274, "maskedtensor": [274, 275, 276, 277], "simpler": 274, "origin": 274, "maskedarrai": 275, "reduct": [275, 277], "index": 276, "slice": 276, "distinguish": 276, "anoth": 276, "x": 276, "yield": 276, "nansum": 276, "nanmean": 276, "safe": 276, "miss": 276, "coo": 277, "csr": 277, "unari": 277, "binari": 277, "appendix": 277, "max": 278, "autotun": 278, "nnapi": 280, "openvino": 281, "nncf": 281, "lower": 281, "represent": 281, "autoload": 282, "tree": 282, "mechan": 282, "so": 287, "vulkan": 288, "desktop": 288, "sdk": 288, "java": 288, "upload": 288, "unstabl": 289}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 60}, "alltitles": {"ONNX Live Tutorial": [[0, "onnx-live-tutorial"]], "TorchRL objectives: Coding a DDPG loss": [[1, "torchrl-objectives-coding-a-ddpg-loss"]], "Overview": [[1, "overview"], [21, "overview"], [114, "overview"], [118, "overview"], [125, "overview"], [147, "overview"], [155, "overview"], [160, "overview"], [183, "overview"], [216, "overview"], [241, "overview"], [265, "overview"]], "Prerequisites": [[1, "prerequisites"], [105, "prerequisites"], [114, "prerequisites"], [118, "prerequisites"], [177, "prerequisites"], [209, "prerequisites"], [213, "prerequisites"], [231, "prerequisites"], [245, "prerequisites"], [249, "prerequisites"], [250, "prerequisites"], [252, "prerequisites"], [253, "prerequisites"], [254, "prerequisites"], [255, "prerequisites"], [265, "prerequisites"], [281, "prerequisites"]], "Imports and setup": [[1, "imports-and-setup"]], "TorchRL LossModule": [[1, "torchrl-lossmodule"]], "The __init__ method": [[1, "the-init-method"]], "The value estimator loss method": [[1, "the-value-estimator-loss-method"]], "The actor loss method": [[1, "the-actor-loss-method"]], "The value loss method": [[1, "the-value-loss-method"]], "Putting things together in a forward call": [[1, "putting-things-together-in-a-forward-call"]], "Environment": [[1, "environment"], [155, "environment"], [162, "environment"]], "Transforms": [[1, "transforms"], [45, "transforms"], [56, "transforms"], [178, "transforms"]], "Parallel execution": [[1, "parallel-execution"]], "Normalization of the observations": [[1, "normalization-of-the-observations"]], "Normalization stats": [[1, "normalization-stats"]], "Building the model": [[1, "building-the-model"]], "Exploration": [[1, "exploration"]], "Data collector": [[1, "data-collector"], [178, "data-collector"]], "Evaluator: building your recorder object": [[1, "evaluator-building-your-recorder-object"]], "Replay buffer": [[1, "replay-buffer"], [178, "replay-buffer"]], "Replay buffer storage and batch size": [[1, "replay-buffer-storage-and-batch-size"]], "Loss module construction": [[1, "loss-module-construction"]], "Target network updater": [[1, "target-network-updater"]], "Optimizer": [[1, "optimizer"], [40, "optimizer"], [104, "optimizer"]], "Time to train the policy": [[1, "time-to-train-the-policy"]], "Experiment results": [[1, "experiment-results"]], "Conclusion": [[1, "conclusion"], [2, "conclusion"], [3, "conclusion"], [4, "conclusion"], [5, "conclusion"], [7, "conclusion"], [8, "conclusion"], [17, "conclusion"], [18, "conclusion"], [19, "conclusion"], [21, "conclusion"], [24, "conclusion"], [54, "conclusion"], [87, "conclusion"], [105, "conclusion"], [114, "conclusion"], [115, "conclusion"], [118, "conclusion"], [125, "conclusion"], [141, "conclusion"], [142, "conclusion"], [147, "conclusion"], [155, "conclusion"], [159, "conclusion"], [160, "conclusion"], [162, "conclusion"], [163, "conclusion"], [169, "conclusion"], [172, "conclusion"], [174, "conclusion"], [183, "conclusion"], [193, "conclusion"], [195, "conclusion"], [196, "conclusion"], [199, "conclusion"], [200, "conclusion"], [202, "conclusion"], [205, "conclusion"], [207, "conclusion"], [208, "conclusion"], [209, "conclusion"], [210, "conclusion"], [213, "conclusion"], [214, "conclusion"], [230, "conclusion"], [238, "conclusion"], [241, "conclusion"], [245, "conclusion"], [249, "conclusion"], [250, "conclusion"], [251, "conclusion"], [252, "conclusion"], [253, "conclusion"], [254, "conclusion"], [255, "conclusion"], [256, "conclusion"], [258, "conclusion"], [263, "conclusion"], [265, "conclusion"], [266, "conclusion"], [267, "conclusion"], [268, "conclusion"], [269, "conclusion"], [274, "conclusion"], [275, "conclusion"], [276, "conclusion"], [277, "conclusion"], [278, "conclusion"], [279, "conclusion"], [281, "conclusion"], [282, "conclusion"], [283, "conclusion"]], "Next Steps": [[1, "next-steps"], [177, "next-steps"]], "Autograd in C++ Frontend": [[2, "autograd-in-c-frontend"]], "Basic autograd operations": [[2, "basic-autograd-operations"]], "Computing higher-order gradients in C++": [[2, "computing-higher-order-gradients-in-c"]], "Using custom autograd function in C++": [[2, "using-custom-autograd-function-in-c"]], "Translating autograd code from Python to C++": [[2, "translating-autograd-code-from-python-to-c"]], "Using CUDA Graphs in PyTorch C++ API": [[3, "using-cuda-graphs-in-pytorch-c-api"]], "Getting Started": [[3, "getting-started"], [87, "getting-started"], [215, "getting-started"], [216, "getting-started"]], "Training Results": [[3, "training-results"]], "Custom C++ and CUDA Operators": [[4, "custom-c-and-cuda-operators"]], "Setting up the Build System": [[4, "setting-up-the-build-system"], [5, "setting-up-the-build-system"]], "Defining the custom op and adding backend implementations": [[4, "defining-the-custom-op-and-adding-backend-implementations"], [5, "defining-the-custom-op-and-adding-backend-implementations"]], "Defining an operator": [[4, "defining-an-operator"]], "Registering backend implementations for an operator": [[4, "registering-backend-implementations-for-an-operator"]], "Adding torch.compile support for an operator": [[4, "adding-torch-compile-support-for-an-operator"]], "Setting up hybrid Python/C++ registration": [[4, "setting-up-hybrid-python-c-registration"]], "Adding training (autograd) support for an operator": [[4, "adding-training-autograd-support-for-an-operator"]], "Testing an operator": [[4, "testing-an-operator"]], "Creating mutable operators": [[4, "creating-mutable-operators"]], "Custom SYCL Operators": [[5, "custom-sycl-operators"]], "Create a Python Interface": [[5, "create-a-python-interface"]], "Initialize Package": [[5, "initialize-package"]], "Testing SYCL extension operator": [[5, "testing-sycl-extension-operator"]], "Custom C++ and CUDA Extensions": [[7, "custom-c-and-cuda-extensions"]], "Motivation and Example": [[7, "motivation-and-example"]], "Writing a C++ Extension": [[7, "writing-a-c-extension"]], "Building with setuptools": [[7, "building-with-setuptools"]], "Writing the C++ Op": [[7, "writing-the-c-op"]], "Forward Pass": [[7, "forward-pass"]], "Backward Pass": [[7, "backward-pass"]], "Binding to Python": [[7, "binding-to-python"]], "Using Your Extension": [[7, "using-your-extension"]], "Performance Comparison": [[7, "performance-comparison"], [7, "id4"]], "Performance on GPU Devices": [[7, "performance-on-gpu-devices"]], "JIT Compiling Extensions": [[7, "jit-compiling-extensions"]], "Writing a Mixed C++/CUDA extension": [[7, "writing-a-mixed-c-cuda-extension"]], "Using accessors": [[7, "using-accessors"]], "Integrating a C++/CUDA Operation with PyTorch": [[7, "integrating-a-c-cuda-operation-with-pytorch"]], "Using the PyTorch C++ Frontend": [[8, "using-the-pytorch-c-frontend"]], "Motivation": [[8, "motivation"]], "Writing a Basic Application": [[8, "writing-a-basic-application"]], "Defining the Neural Network Models": [[8, "defining-the-neural-network-models"]], "Module API Basics": [[8, "module-api-basics"]], "Defining a Module and Registering Parameters": [[8, "defining-a-module-and-registering-parameters"]], "Registering Submodules and Traversing the Module Hierarchy": [[8, "registering-submodules-and-traversing-the-module-hierarchy"]], "Running the Network in Forward Mode": [[8, "running-the-network-in-forward-mode"]], "Module Ownership": [[8, "module-ownership"]], "Defining the DCGAN Modules": [[8, "defining-the-dcgan-modules"]], "What was a GAN aGAN?": [[8, "what-was-a-gan-agan"]], "The Generator Module": [[8, "the-generator-module"]], "The Discriminator Module": [[8, "the-discriminator-module"]], "Loading Data": [[8, "loading-data"]], "Writing the Training Loop": [[8, "writing-the-training-loop"]], "Moving to the GPU": [[8, "moving-to-the-gpu"]], "Checkpointing and Recovering the Training State": [[8, "checkpointing-and-recovering-the-training-state"]], "Inspecting Generated Images": [[8, "inspecting-generated-images"]], "Supporting Custom C++ Classes in torch.compile/torch.export": [[9, "supporting-custom-c-classes-in-torch-compile-torch-export"]], "Why do we need to make a Fake Class?": [[9, "why-do-we-need-to-make-a-fake-class"]], "PyTorch Custom Operators": [[10, "pytorch-custom-operators"]], "Authoring a custom operator from Python": [[10, "authoring-a-custom-operator-from-python"]], "Integrating custom C++ and/or CUDA code with PyTorch": [[10, "integrating-custom-c-and-or-cuda-code-with-pytorch"]], "The Custom Operators Manual": [[10, "the-custom-operators-manual"]], "When should I create a Custom Operator?": [[10, "when-should-i-create-a-custom-operator"]], "Why should I create a Custom Operator?": [[10, "why-should-i-create-a-custom-operator"]], "Training Transformer models using Distributed Data Parallel and Pipeline Parallelism": [[11, "training-transformer-models-using-distributed-data-parallel-and-pipeline-parallelism"]], "Registering a Dispatched Operator in C++": [[12, "registering-a-dispatched-operator-in-c"]], "Defining schema and backend implementations": [[12, "defining-schema-and-backend-implementations"]], "For operators that do not need autograd": [[12, "for-operators-that-do-not-need-autograd"]], "In-place or view ops": [[12, "in-place-or-view-ops"]], "Adding autograd support": [[12, "adding-autograd-support"]], "Going beyond autograd": [[12, "going-beyond-autograd"]], "Autocast": [[12, "autocast"]], "Batched": [[12, "batched"]], "Tracer": [[12, "tracer"]], "Extending dispatcher for a new backend in C++": [[13, "extending-dispatcher-for-a-new-backend-in-c"]], "What\u2019s a new backend?": [[13, "what-s-a-new-backend"]], "Get a dispatch key for your backend": [[13, "get-a-dispatch-key-for-your-backend"]], "Get the full list of PyTorch operators": [[13, "get-the-full-list-of-pytorch-operators"]], "Register kernels for the new backend": [[13, "register-kernels-for-the-new-backend"], [18, "register-kernels-for-the-new-backend"]], "Autograd support for the new backend": [[13, "autograd-support-for-the-new-backend"]], "Build an extension": [[13, "build-an-extension"]], "Custom operator support": [[13, "custom-operator-support"]], "JIT support": [[13, "jit-support"]], "Testing your backend against native PyTorch backends": [[13, "testing-your-backend-against-native-pytorch-backends"]], "Backward Compatibility": [[13, "backward-compatibility"]], "Known issues & additional notes": [[13, "known-issues-additional-notes"]], "Future Work": [[13, "future-work"], [18, "future-work"]], "Stay in touch": [[13, "stay-in-touch"]], "Distributed Training with Uneven Inputs Using the Join Context Manager": [[14, "distributed-training-with-uneven-inputs-using-the-join-context-manager"]], "Requirements": [[14, "requirements"], [21, "requirements"], [176, "requirements"], [206, "requirements"], [222, "requirements"], [259, "requirements"], [283, "requirements"]], "What is Join?": [[14, "what-is-join"]], "Using Join with DistributedDataParallel": [[14, "using-join-with-distributeddataparallel"]], "Using Join with DistributedDataParallel and ZeroRedundancyOptimizer": [[14, "using-join-with-distributeddataparallel-and-zeroredundancyoptimizer"]], "Passing Keyword Arguments": [[14, "passing-keyword-arguments"]], "How Does Join Work?": [[14, "how-does-join-work"]], "Joinable": [[14, "joinable"]], "JoinHook": [[14, "joinhook"]], "Join": [[14, "join"]], "Making a Toy Class Work with Join": [[14, "making-a-toy-class-work-with-join"]], "Neural Transfer Using PyTorch": [[15, "neural-transfer-using-pytorch"]], "Introduction": [[15, "introduction"], [57, "introduction"], [65, "introduction"], [96, "id1"], [102, "id1"], [104, "id1"], [141, "introduction"], [172, "introduction"], [188, "introduction"], [191, "introduction"], [202, "introduction"], [228, "introduction"], [231, "introduction"], [242, "introduction"], [243, "introduction"], [244, "introduction"], [249, "introduction"], [250, "introduction"], [263, "introduction"], [268, "introduction"], [269, "introduction"], [277, "introduction"], [278, "introduction"], [281, "introduction"], [285, "introduction"], [288, "introduction"]], "Underlying Principle": [[15, "underlying-principle"]], "Importing Packages and Selecting a Device": [[15, "importing-packages-and-selecting-a-device"]], "Loading the Images": [[15, "loading-the-images"]], "Loss Functions": [[15, "loss-functions"], [100, "loss-functions"]], "Content Loss": [[15, "content-loss"]], "Style Loss": [[15, "style-loss"]], "Importing the Model": [[15, "importing-the-model"]], "Gradient Descent": [[15, "gradient-descent"]], "Creating Extensions Using NumPy and SciPy": [[16, "creating-extensions-using-numpy-and-scipy"]], "Parameter-less example": [[16, "parameter-less-example"]], "Parametrized example": [[16, "parametrized-example"]], "Pendulum: Writing your environment and transforms with TorchRL": [[17, "pendulum-writing-your-environment-and-transforms-with-torchrl"]], "Coding the effect of an action: _step()": [[17, "coding-the-effect-of-an-action-step"]], "Resetting the simulator: _reset()": [[17, "resetting-the-simulator-reset"]], "Environment metadata: env.*_spec": [[17, "environment-metadata-env-spec"]], "Specs shape": [[17, "specs-shape"]], "Reproducible experiments: seeding": [[17, "reproducible-experiments-seeding"]], "Wrapping things together: the EnvBase class": [[17, "wrapping-things-together-the-envbase-class"]], "Testing our environment": [[17, "testing-our-environment"]], "Transforming an environment": [[17, "transforming-an-environment"]], "Writing custom transforms": [[17, "writing-custom-transforms"]], "Executing a rollout": [[17, "executing-a-rollout"]], "Batching computations": [[17, "batching-computations"]], "Training a simple policy": [[17, "training-a-simple-policy"]], "Training loop": [[17, "training-loop"], [155, "training-loop"], [178, "training-loop"], [179, "training-loop"]], "Facilitating New Backend Integration by PrivateUse1": [[18, "facilitating-new-backend-integration-by-privateuse1"]], "What is PrivateUse1?": [[18, "what-is-privateuse1"]], "How to integrate new backend via PrivateUse1": [[18, "how-to-integrate-new-backend-via-privateuse1"]], "Register generator for the new backend": [[18, "register-generator-for-the-new-backend"]], "Register device guard for the new backend": [[18, "register-device-guard-for-the-new-backend"]], "Register serialization and deserialization functions for new backend metadata": [[18, "register-serialization-and-deserialization-functions-for-new-backend-metadata"]], "Other Modules": [[18, "other-modules"]], "How to Improve User Experience with Privateuse1": [[18, "how-to-improve-user-experience-with-privateuse1"]], "Register new backend module to Pytorch": [[18, "register-new-backend-module-to-pytorch"]], "Rename PrivateUse1 to a custom name for the new backend": [[18, "rename-privateuse1-to-a-custom-name-for-the-new-backend"]], "Generate methods and properties related to the new backend": [[18, "generate-methods-and-properties-related-to-the-new-backend"]], "Custom Python Operators": [[19, "custom-python-operators"]], "Example: Wrapping PIL\u2019s crop into a custom operator": [[19, "example-wrapping-pil-s-crop-into-a-custom-operator"]], "Adding training support for crop": [[19, "adding-training-support-for-crop"]], "Testing Python Custom operators": [[19, "testing-python-custom-operators"]], "Mutable Python Custom operators": [[19, "mutable-python-custom-operators"]], "Combining Distributed DataParallel with Distributed RPC Framework": [[20, "combining-distributed-dataparallel-with-distributed-rpc-framework"]], "(beta) Accelerating BERT with semi-structured (2:4) sparsity": [[21, "beta-accelerating-bert-with-semi-structured-2-4-sparsity"]], "What problem does semi-structured sparsity solve?": [[21, "what-problem-does-semi-structured-sparsity-solve"], [283, "what-problem-does-semi-structured-sparsity-solve"]], "Intro & Setup": [[21, "intro-setup"], [283, "intro-setup"]], "Establishing a baseline": [[21, "establishing-a-baseline"]], "Pruning BERT to be 2:4 sparse": [[21, "pruning-bert-to-be-2-4-sparse"], [283, "pruning-bert-to-be-2-4-sparse"]], "Accelerating 2:4 sparse models for inference": [[21, "accelerating-2-4-sparse-models-for-inference"]], "Computation times": [[22, "computation-times"], [43, "computation-times"], [52, "computation-times"], [69, "computation-times"], [75, "computation-times"], [79, "computation-times"], [91, "computation-times"], [101, "computation-times"], [111, "computation-times"], [119, "computation-times"], [123, "computation-times"], [185, "computation-times"], [237, "computation-times"], [247, "computation-times"], [261, "computation-times"], [284, "computation-times"]], "Exploring TorchRec sharding": [[23, "exploring-torchrec-sharding"]], "Installation": [[23, "installation"], [96, "installation"], [216, "installation"], [239, "installation"]], "Distributed Setup": [[23, "distributed-setup"]], "Constructing our embedding model": [[23, "constructing-our-embedding-model"]], "DistributedModelParallel in multiprocessing": [[23, "distributedmodelparallel-in-multiprocessing"]], "Multiprocessing Execution": [[23, "multiprocessing-execution"]], "Table Wise Sharding": [[23, "table-wise-sharding"]], "Explore other sharding modes": [[23, "explore-other-sharding-modes"]], "(beta) Static Quantization with Eager Mode in PyTorch": [[24, "beta-static-quantization-with-eager-mode-in-pytorch"]], "1. Model architecture": [[24, "model-architecture"]], "2. Helper functions": [[24, "helper-functions"]], "3. Define dataset and data loaders": [[24, "define-dataset-and-data-loaders"]], "ImageNet Data": [[24, "imagenet-data"]], "4. Post-training static quantization": [[24, "post-training-static-quantization"]], "5. Quantization-aware training": [[24, "quantization-aware-training"]], "Speedup from quantization": [[24, "speedup-from-quantization"]], "Semi-Supervised Learning using USB built upon PyTorch": [[28, "semi-supervised-learning-using-usb-built-upon-pytorch"]], "Introduction to FreeMatch and SoftMatch in Semi-Supervised Learning": [[28, "introduction-to-freematch-and-softmatch-in-semi-supervised-learning"]], "Use USB to Train FreeMatch/SoftMatch on CIFAR-10 with only 40 labels": [[28, "use-usb-to-train-freematch-softmatch-on-cifar-10-with-only-40-labels"]], "Use USB to Train SoftMatch with specific imbalanced algorithm on imbalanced CIFAR-10": [[28, "use-usb-to-train-softmatch-with-specific-imbalanced-algorithm-on-imbalanced-cifar-10"]], "Audio Data Augmentation": [[29, "audio-data-augmentation"]], "Audio Datasets": [[30, "audio-datasets"]], "Audio Feature Augmentation": [[31, "audio-feature-augmentation"]], "Audio Feature Extractions": [[32, "audio-feature-extractions"]], "Audio I/O": [[33, "audio-i-o"]], "Audio Resampling": [[34, "audio-resampling"]], "Automatic Differentiation with torch.autograd": [[35, "automatic-differentiation-with-torch-autograd"]], "Tensors, Functions and Computational graph": [[35, "tensors-functions-and-computational-graph"]], "Computing Gradients": [[35, "computing-gradients"]], "Disabling Gradient Tracking": [[35, "disabling-gradient-tracking"]], "More on Computational Graphs": [[35, "more-on-computational-graphs"]], "Optional Reading: Tensor Gradients and Jacobian Products": [[35, "optional-reading-tensor-gradients-and-jacobian-products"]], "Further Reading": [[35, "further-reading"], [36, "further-reading"], [37, "further-reading"], [40, "further-reading"], [45, "further-reading"], [58, "further-reading"], [60, "further-reading"], [61, "further-reading"], [120, "further-reading"], [125, "further-reading"], [150, "further-reading"], [151, "further-reading"], [155, "further-reading"], [241, "further-reading"], [262, "further-reading"], [274, "further-reading"], [276, "further-reading"], [277, "further-reading"]], "Build the Neural Network": [[36, "build-the-neural-network"]], "Get Device for Training": [[36, "get-device-for-training"]], "Define the Class": [[36, "define-the-class"]], "Model Layers": [[36, "model-layers"]], "nn.Flatten": [[36, "nn-flatten"]], "nn.Linear": [[36, "nn-linear"]], "nn.ReLU": [[36, "nn-relu"]], "nn.Sequential": [[36, "nn-sequential"]], "nn.Softmax": [[36, "nn-softmax"]], "Model Parameters": [[36, "model-parameters"]], "Datasets & DataLoaders": [[37, "datasets-dataloaders"]], "Loading a Dataset": [[37, "loading-a-dataset"]], "Iterating and Visualizing the Dataset": [[37, "iterating-and-visualizing-the-dataset"]], "Creating a Custom Dataset for your files": [[37, "creating-a-custom-dataset-for-your-files"]], "__init__": [[37, "init"]], "__len__": [[37, "len"]], "__getitem__": [[37, "getitem"]], "Preparing your data for training with DataLoaders": [[37, "preparing-your-data-for-training-with-dataloaders"]], "Iterate through the DataLoader": [[37, "iterate-through-the-dataloader"]], "Learn the Basics": [[38, "learn-the-basics"], [39, "learn-the-basics"]], "Running the Tutorial Code": [[39, "running-the-tutorial-code"], [99, "running-the-tutorial-code"]], "How to Use this Guide": [[39, "how-to-use-this-guide"]], "Optimizing Model Parameters": [[40, "optimizing-model-parameters"]], "Prerequisite Code": [[40, "prerequisite-code"]], "Hyperparameters": [[40, "hyperparameters"]], "Optimization Loop": [[40, "optimization-loop"]], "Loss Function": [[40, "loss-function"], [51, "loss-function"], [104, "loss-function"]], "Full Implementation": [[40, "full-implementation"]], "Quickstart": [[41, "quickstart"]], "Working with data": [[41, "working-with-data"]], "Creating Models": [[41, "creating-models"]], "Optimizing the Model Parameters": [[41, "optimizing-the-model-parameters"]], "Saving Models": [[41, "saving-models"]], "Loading Models": [[41, "loading-models"]], "Save and Load the Model": [[42, "save-and-load-the-model"]], "Saving and Loading Model Weights": [[42, "saving-and-loading-model-weights"]], "Saving and Loading Models with Shapes": [[42, "saving-and-loading-models-with-shapes"]], "Related Tutorials": [[42, "related-tutorials"]], "Tensors": [[44, "tensors"], [53, "tensors"], [85, "tensors"], [121, "tensors"], [121, "id1"]], "Initializing a Tensor": [[44, "initializing-a-tensor"]], "Attributes of a Tensor": [[44, "attributes-of-a-tensor"]], "Operations on Tensors": [[44, "operations-on-tensors"]], "Bridge with NumPy": [[44, "bridge-with-numpy"], [53, "bridge-with-numpy"]], "Tensor to NumPy array": [[44, "tensor-to-numpy-array"], [53, "tensor-to-numpy-array"]], "NumPy array to Tensor": [[44, "numpy-array-to-tensor"], [53, "numpy-array-to-tensor"]], "ToTensor()": [[45, "totensor"]], "Lambda Transforms": [[45, "lambda-transforms"]], "Fast Transformer Inference with Better Transformer": [[46, "fast-transformer-inference-with-better-transformer"]], "A Gentle Introduction to torch.autograd": [[47, "a-gentle-introduction-to-torch-autograd"]], "Background": [[47, "background"], [172, "background"]], "Usage in PyTorch": [[47, "usage-in-pytorch"]], "Differentiation in Autograd": [[47, "differentiation-in-autograd"]], "Optional Reading - Vector Calculus using autograd": [[47, "optional-reading-vector-calculus-using-autograd"]], "Computational Graph": [[47, "computational-graph"]], "Exclusion from the DAG": [[47, "exclusion-from-the-dag"]], "Further readings:": [[47, "further-readings"]], "Training a Classifier": [[48, "training-a-classifier"]], "What about data?": [[48, "what-about-data"]], "Training an image classifier": [[48, "training-an-image-classifier"]], "1. Load and normalize CIFAR10": [[48, "load-and-normalize-cifar10"]], "2. Define a Convolutional Neural Network": [[48, "define-a-convolutional-neural-network"]], "3. Define a Loss function and optimizer": [[48, "define-a-loss-function-and-optimizer"]], "4. Train the network": [[48, "train-the-network"]], "5. Test the network on the test data": [[48, "test-the-network-on-the-test-data"]], "Training on GPU": [[48, "training-on-gpu"]], "Training on multiple GPUs": [[48, "training-on-multiple-gpus"]], "Where do I go next?": [[48, "where-do-i-go-next"]], "Optional: Data Parallelism": [[49, "optional-data-parallelism"]], "Imports and parameters": [[49, "imports-and-parameters"]], "Dummy DataSet": [[49, "dummy-dataset"]], "Simple Model": [[49, "simple-model"]], "Create Model and DataParallel": [[49, "create-model-and-dataparallel"]], "Run the Model": [[49, "run-the-model"]], "Results": [[49, "results"], [57, "results"], [80, "results"], [178, "results"]], "2 GPUs": [[49, "gpus"]], "3 GPUs": [[49, "id1"]], "8 GPUs": [[49, "id2"]], "Summary": [[49, "summary"], [139, "summary"], [183, "summary"]], "Deep Learning with PyTorch: A 60 Minute Blitz": [[50, "deep-learning-with-pytorch-a-60-minute-blitz"], [62, "deep-learning-with-pytorch-a-60-minute-blitz"]], "Neural Networks": [[51, "neural-networks"]], "Define the network": [[51, "define-the-network"]], "Backprop": [[51, "backprop"]], "Update the weights": [[51, "update-the-weights"]], "Tensor Initialization": [[53, "tensor-initialization"]], "Tensor Attributes": [[53, "tensor-attributes"]], "Tensor Operations": [[53, "tensor-operations"]], "Chatbot Tutorial": [[54, "chatbot-tutorial"]], "Preparations": [[54, "preparations"]], "Load & Preprocess Data": [[54, "load-preprocess-data"]], "Create formatted data file": [[54, "create-formatted-data-file"]], "Load and trim data": [[54, "load-and-trim-data"]], "Prepare Data for Models": [[54, "prepare-data-for-models"]], "Define Models": [[54, "define-models"]], "Seq2Seq Model": [[54, "seq2seq-model"]], "Encoder": [[54, "encoder"]], "Decoder": [[54, "decoder"]], "Define Training Procedure": [[54, "define-training-procedure"]], "Masked loss": [[54, "masked-loss"]], "Single training iteration": [[54, "single-training-iteration"]], "Training iterations": [[54, "training-iterations"]], "Define Evaluation": [[54, "define-evaluation"]], "Greedy decoding": [[54, "greedy-decoding"]], "Evaluate my text": [[54, "evaluate-my-text"]], "Run Model": [[54, "run-model"]], "Run Training": [[54, "run-training"]], "Run Evaluation": [[54, "run-evaluation"]], "Running Tutorials in Google Colab": [[55, "running-tutorials-in-google-colab"]], "PyTorch Version in Google Colab": [[55, "pytorch-version-in-google-colab"]], "Using Tutorial Data from Google Drive in Colab": [[55, "using-tutorial-data-from-google-drive-in-colab"]], "Enabling CUDA": [[55, "enabling-cuda"]], "Writing Custom Datasets, DataLoaders and Transforms": [[56, "writing-custom-datasets-dataloaders-and-transforms"]], "Dataset class": [[56, "dataset-class"]], "Compose transforms": [[56, "compose-transforms"]], "Iterating through the dataset": [[56, "iterating-through-the-dataset"]], "Afterword: torchvision": [[56, "afterword-torchvision"]], "DCGAN Tutorial": [[57, "dcgan-tutorial"]], "Generative Adversarial Networks": [[57, "generative-adversarial-networks"]], "What is a GAN?": [[57, "what-is-a-gan"]], "What is a DCGAN?": [[57, "what-is-a-dcgan"]], "Inputs": [[57, "inputs"], [80, "inputs"]], "Data": [[57, "data"]], "Implementation": [[57, "implementation"], [80, "implementation"]], "Weight Initialization": [[57, "weight-initialization"]], "Generator": [[57, "generator"]], "Discriminator": [[57, "discriminator"]], "Loss Functions and Optimizers": [[57, "loss-functions-and-optimizers"]], "Training": [[57, "training"], [145, "training"], [146, "training"], [179, "training"], [184, "training"], [215, "training"], [215, "id3"]], "Where to Go Next": [[57, "where-to-go-next"]], "Fault-tolerant Distributed Training with torchrun": [[58, "fault-tolerant-distributed-training-with-torchrun"]], "Why use torchrun": [[58, "why-use-torchrun"]], "Graceful restarts": [[58, "graceful-restarts"]], "Process group initialization": [[58, "process-group-initialization"]], "Use torchrun-provided environment variables": [[58, "use-torchrun-provided-environment-variables"]], "Saving and loading snapshots": [[58, "saving-and-loading-snapshots"]], "Loading a snapshot in the Trainer constructor": [[58, "loading-a-snapshot-in-the-trainer-constructor"]], "Resuming training": [[58, "resuming-training"]], "Running the script": [[58, "running-the-script"]], "Distributed Data Parallel in PyTorch - Video Tutorials": [[59, "distributed-data-parallel-in-pytorch-video-tutorials"]], "Running the code": [[59, "running-the-code"]], "Tutorial sections": [[59, "tutorial-sections"]], "Multi GPU training with DDP": [[60, "multi-gpu-training-with-ddp"]], "Imports": [[60, "imports"]], "Constructing the process group": [[60, "constructing-the-process-group"]], "Constructing the DDP model": [[60, "constructing-the-ddp-model"]], "Distributing input data": [[60, "distributing-input-data"]], "Saving model checkpoints": [[60, "saving-model-checkpoints"]], "Running the distributed training job": [[60, "running-the-distributed-training-job"]], "What is Distributed Data Parallel (DDP)": [[61, "what-is-distributed-data-parallel-ddp"]], "Why you should prefer DDP over DataParallel (DP)": [[61, "why-you-should-prefer-ddp-over-dataparallel-dp"]], "What is PyTorch?": [[62, "what-is-pytorch"]], "Goal of this tutorial:": [[62, "goal-of-this-tutorial"]], "Image Segmentation DeepLabV3 on Android": [[63, "image-segmentation-deeplabv3-on-android"]], "Image Segmentation DeepLabV3 on iOS": [[64, "image-segmentation-deeplabv3-on-ios"]], "PyTorch Distributed Overview": [[65, "pytorch-distributed-overview"]], "Parallelism APIs": [[65, "parallelism-apis"]], "Sharding primitives": [[65, "sharding-primitives"]], "Communications APIs": [[65, "communications-apis"]], "Launcher": [[65, "launcher"]], "Applying Parallelism To Scale Your Model": [[65, "applying-parallelism-to-scale-your-model"]], "PyTorch Distributed Developers": [[65, "pytorch-distributed-developers"]], "PyTorch: Tensors and autograd": [[67, "pytorch-tensors-and-autograd"], [121, "pytorch-tensors-and-autograd"]], "PyTorch: Defining New autograd Functions": [[68, "pytorch-defining-new-autograd-functions"]], "PyTorch: Control Flow + Weight Sharing": [[70, "pytorch-control-flow-weight-sharing"], [121, "pytorch-control-flow-weight-sharing"]], "PyTorch: Custom nn Modules": [[72, "pytorch-custom-nn-modules"], [121, "pytorch-custom-nn-modules"]], "PyTorch: nn": [[73, "pytorch-nn"], [121, "pytorch-nn"]], "PyTorch: optim": [[74, "pytorch-optim"], [121, "pytorch-optim"]], "Warm-up: numpy": [[77, "warm-up-numpy"], [121, "warm-up-numpy"]], "PyTorch: Tensors": [[78, "pytorch-tensors"], [121, "pytorch-tensors"]], "Adversarial Example Generation": [[80, "adversarial-example-generation"]], "Threat Model": [[80, "threat-model"]], "Fast Gradient Sign Attack": [[80, "fast-gradient-sign-attack"]], "Model Under Attack": [[80, "model-under-attack"]], "FGSM Attack": [[80, "fgsm-attack"]], "Testing Function": [[80, "testing-function"]], "Run Attack": [[80, "run-attack"]], "Accuracy vs Epsilon": [[80, "accuracy-vs-epsilon"]], "Sample Adversarial Examples": [[80, "sample-adversarial-examples"]], "Where to go next?": [[80, "where-to-go-next"]], "Finetuning Torchvision Models": [[81, "finetuning-torchvision-models"]], "Autograd": [[82, "autograd"], [121, "autograd"], [121, "id2"]], "nn Package": [[83, "nn-package"]], "Multi-GPU Examples": [[84, "multi-gpu-examples"]], "PyTorch for Former Torch Users": [[86, "pytorch-for-former-torch-users"]], "Introduction to Holistic Trace Analysis": [[87, "introduction-to-holistic-trace-analysis"]], "Installing HTA": [[87, "installing-hta"]], "Temporal Breakdown": [[87, "temporal-breakdown"]], "Idle Time Breakdown": [[87, "idle-time-breakdown"]], "Kernel Breakdown": [[87, "kernel-breakdown"]], "Kernel Duration Distribution": [[87, "kernel-duration-distribution"]], "Communication Computation Overlap": [[87, "communication-computation-overlap"]], "Augmented Counters": [[87, "augmented-counters"]], "Memory Bandwidth & Queue Length Counters": [[87, "memory-bandwidth-queue-length-counters"]], "CUDA Kernel Launch Statistics": [[87, "cuda-kernel-launch-statistics"]], "Trace Diff using Holistic Trace Analysis": [[88, "trace-diff-using-holistic-trace-analysis"]], "Learning Hybrid Frontend Syntax Through Example": [[90, "learning-hybrid-frontend-syntax-through-example"]], "Hybrid Frontend Information": [[90, "hybrid-frontend-information"]], "Motivating Example": [[90, "motivating-example"]], "Part 1 - Tracing a pure python function": [[90, "part-1-tracing-a-pure-python-function"]], "Part 2 - Scripting a pure python function": [[90, "part-2-scripting-a-pure-python-function"]], "Part 3 - Tracing a nn.Module": [[90, "part-3-tracing-a-nn-module"]], "Part 4 - Scripting a nn.Module": [[90, "part-4-scripting-a-nn-module"]], "Top-Level Module": [[90, "top-level-module"]], "Running the Model": [[90, "running-the-model"]], "Tracing the Top-Level Model": [[90, "tracing-the-top-level-model"]], "Hybrid Frontend Tutorials": [[92, "hybrid-frontend-tutorials"]], "Hyperparameter tuning with Ray Tune": [[93, "hyperparameter-tuning-with-ray-tune"]], "Setup / Imports": [[93, "setup-imports"]], "Data loaders": [[93, "data-loaders"]], "Configurable neural network": [[93, "configurable-neural-network"]], "The train function": [[93, "the-train-function"]], "Adding (multi) GPU support with DataParallel": [[93, "adding-multi-gpu-support-with-dataparallel"]], "Communicating with Ray Tune": [[93, "communicating-with-ray-tune"]], "Full training function": [[93, "full-training-function"]], "Test set accuracy": [[93, "test-set-accuracy"]], "Configuring the search space": [[93, "configuring-the-search-space"]], "Introduction to PyTorch - YouTube Series": [[94, "introduction-to-pytorch-youtube-series"], [99, "introduction-to-pytorch-youtube-series"]], "The Fundamentals of Autograd": [[95, "the-fundamentals-of-autograd"]], "What Do We Need Autograd For?": [[95, "what-do-we-need-autograd-for"]], "A Simple Example": [[95, "a-simple-example"]], "Autograd in Training": [[95, "autograd-in-training"]], "Turning Autograd Off and On": [[95, "turning-autograd-off-and-on"]], "Autograd and In-place Operations": [[95, "autograd-and-in-place-operations"]], "Autograd Profiler": [[95, "autograd-profiler"]], "Advanced Topic: More Autograd Detail and the High-Level API": [[95, "advanced-topic-more-autograd-detail-and-the-high-level-api"]], "The High-Level API": [[95, "the-high-level-api"]], "Model Understanding with Captum": [[96, "model-understanding-with-captum"]], "A First Example": [[96, "a-first-example"]], "Feature Attribution with Integrated Gradients": [[96, "feature-attribution-with-integrated-gradients"]], "Feature Attribution with Occlusion": [[96, "feature-attribution-with-occlusion"]], "Layer Attribution with Layer GradCAM": [[96, "layer-attribution-with-layer-gradcam"]], "Visualization with Captum Insights": [[96, "visualization-with-captum-insights"]], "Introduction to PyTorch on YouTube": [[97, "introduction-to-pytorch-on-youtube"]], "Introduction to PyTorch": [[98, "introduction-to-pytorch"], [109, "introduction-to-pytorch"]], "PyTorch Tensors": [[98, "pytorch-tensors"]], "PyTorch Models": [[98, "pytorch-models"]], "Datasets and Dataloaders": [[98, "datasets-and-dataloaders"]], "Training Your PyTorch Model": [[98, "training-your-pytorch-model"]], "Building Models with PyTorch": [[100, "building-models-with-pytorch"]], "torch.nn.Module and torch.nn.Parameter": [[100, "torch-nn-module-and-torch-nn-parameter"]], "Common Layer Types": [[100, "common-layer-types"]], "Linear Layers": [[100, "linear-layers"]], "Convolutional Layers": [[100, "convolutional-layers"]], "Recurrent Layers": [[100, "recurrent-layers"]], "Transformers": [[100, "transformers"]], "Other Layers and Functions": [[100, "other-layers-and-functions"]], "Data Manipulation Layers": [[100, "data-manipulation-layers"]], "Activation Functions": [[100, "activation-functions"]], "PyTorch TensorBoard Support": [[102, "pytorch-tensorboard-support"]], "Before You Start": [[102, "before-you-start"]], "Showing Images in TensorBoard": [[102, "showing-images-in-tensorboard"]], "Graphing Scalars to Visualize Training": [[102, "graphing-scalars-to-visualize-training"]], "Visualizing Your Model": [[102, "visualizing-your-model"]], "Visualizing Your Dataset with Embeddings": [[102, "visualizing-your-dataset-with-embeddings"]], "Other Resources": [[102, "other-resources"], [104, "other-resources"]], "Introduction to PyTorch Tensors": [[103, "introduction-to-pytorch-tensors"]], "Creating Tensors": [[103, "creating-tensors"], [109, "creating-tensors"]], "Random Tensors and Seeding": [[103, "random-tensors-and-seeding"]], "Tensor Shapes": [[103, "tensor-shapes"]], "Tensor Data Types": [[103, "tensor-data-types"]], "Math & Logic with PyTorch Tensors": [[103, "math-logic-with-pytorch-tensors"]], "In Brief: Tensor Broadcasting": [[103, "in-brief-tensor-broadcasting"]], "More Math with Tensors": [[103, "more-math-with-tensors"]], "Altering Tensors in Place": [[103, "altering-tensors-in-place"]], "Copying Tensors": [[103, "copying-tensors"]], "Moving to Accelerator": [[103, "moving-to-accelerator"]], "Manipulating Tensor Shapes": [[103, "manipulating-tensor-shapes"]], "Changing the Number of Dimensions": [[103, "changing-the-number-of-dimensions"]], "NumPy Bridge": [[103, "numpy-bridge"]], "Training with PyTorch": [[104, "training-with-pytorch"]], "Dataset and DataLoader": [[104, "dataset-and-dataloader"]], "The Model": [[104, "the-model"]], "The Training Loop": [[104, "the-training-loop"]], "Per-Epoch Activity": [[104, "per-epoch-activity"]], "Knowledge Distillation Tutorial": [[105, "knowledge-distillation-tutorial"]], "Loading CIFAR-10": [[105, "loading-cifar-10"]], "Defining model classes and utility functions": [[105, "defining-model-classes-and-utility-functions"]], "Cross-entropy runs": [[105, "cross-entropy-runs"]], "Knowledge distillation run": [[105, "knowledge-distillation-run"]], "Cosine loss minimization run": [[105, "cosine-loss-minimization-run"]], "Intermediate regressor run": [[105, "intermediate-regressor-run"]], "Advanced: Making Dynamic Decisions and the Bi-LSTM CRF": [[106, "advanced-making-dynamic-decisions-and-the-bi-lstm-crf"]], "Dynamic versus Static Deep Learning Toolkits": [[106, "dynamic-versus-static-deep-learning-toolkits"]], "Bi-LSTM Conditional Random Field Discussion": [[106, "bi-lstm-conditional-random-field-discussion"]], "Implementation Notes": [[106, "implementation-notes"]], "Exercise: A new loss function for discriminative tagging": [[106, "exercise-a-new-loss-function-for-discriminative-tagging"]], "Deep Learning with PyTorch": [[107, "deep-learning-with-pytorch"]], "Deep Learning Building Blocks: Affine maps, non-linearities and objectives": [[107, "deep-learning-building-blocks-affine-maps-non-linearities-and-objectives"]], "Affine Maps": [[107, "affine-maps"]], "Non-Linearities": [[107, "non-linearities"]], "Softmax and Probabilities": [[107, "softmax-and-probabilities"]], "Objective Functions": [[107, "objective-functions"]], "Optimization and Training": [[107, "optimization-and-training"]], "Creating Network Components in PyTorch": [[107, "creating-network-components-in-pytorch"]], "Example: Logistic Regression Bag-of-Words classifier": [[107, "example-logistic-regression-bag-of-words-classifier"]], "Deep Learning for NLP with Pytorch": [[108, "deep-learning-for-nlp-with-pytorch"]], "Introduction to Torch\u2019s tensor library": [[109, "introduction-to-torch-s-tensor-library"]], "Operations with Tensors": [[109, "operations-with-tensors"]], "Reshaping Tensors": [[109, "reshaping-tensors"]], "Computation Graphs and Automatic Differentiation": [[109, "computation-graphs-and-automatic-differentiation"]], "Sequence Models and Long Short-Term Memory Networks": [[110, "sequence-models-and-long-short-term-memory-networks"]], "LSTMs in Pytorch": [[110, "lstms-in-pytorch"]], "Example: An LSTM for Part-of-Speech Tagging": [[110, "example-an-lstm-for-part-of-speech-tagging"]], "Exercise: Augmenting the LSTM part-of-speech tagger with character-level features": [[110, "exercise-augmenting-the-lstm-part-of-speech-tagger-with-character-level-features"]], "Word Embeddings: Encoding Lexical Semantics": [[112, "word-embeddings-encoding-lexical-semantics"]], "Getting Dense Word Embeddings": [[112, "getting-dense-word-embeddings"]], "Word Embeddings in Pytorch": [[112, "word-embeddings-in-pytorch"]], "An Example: N-Gram Language Modeling": [[112, "an-example-n-gram-language-modeling"]], "Exercise: Computing Word Embeddings: Continuous Bag-of-Words": [[112, "exercise-computing-word-embeddings-continuous-bag-of-words"]], "What is torch.nn really?": [[113, "what-is-torch-nn-really"]], "MNIST data setup": [[113, "mnist-data-setup"]], "Neural net from scratch (without torch.nn)": [[113, "neural-net-from-scratch-without-torch-nn"]], "Using torch.nn.functional": [[113, "using-torch-nn-functional"]], "Refactor using nn.Module": [[113, "refactor-using-nn-module"]], "Refactor using nn.Linear": [[113, "refactor-using-nn-linear"]], "Refactor using torch.optim": [[113, "refactor-using-torch-optim"]], "Refactor using Dataset": [[113, "refactor-using-dataset"]], "Refactor using DataLoader": [[113, "refactor-using-dataloader"]], "Add validation": [[113, "add-validation"]], "Create fit() and get_data()": [[113, "create-fit-and-get-data"]], "Switch to CNN": [[113, "switch-to-cnn"]], "Using nn.Sequential": [[113, "using-nn-sequential"]], "Wrapping DataLoader": [[113, "wrapping-dataloader"]], "Using your Accelerator": [[113, "using-your-accelerator"]], "Closing thoughts": [[113, "closing-thoughts"]], "Export a model with control flow to ONNX": [[114, "export-a-model-with-control-flow-to-onnx"]], "Define the Models": [[114, "define-the-models"]], "Exporting the Model: First Attempt": [[114, "exporting-the-model-first-attempt"]], "Using torch.onnx.export() with JIT Tracing": [[114, "using-torch-onnx-export-with-jit-tracing"]], "Suggested Patch: Refactoring with torch.cond()": [[114, "suggested-patch-refactoring-with-torch-cond"]], "Further reading": [[114, "further-reading"], [115, "further-reading"], [117, "further-reading"], [118, "further-reading"]], "Export a PyTorch model to ONNX": [[115, "export-a-pytorch-model-to-onnx"]], "1. Install the required dependencies": [[115, "install-the-required-dependencies"]], "2. Author a simple image classifier model": [[115, "author-a-simple-image-classifier-model"]], "3. Export the model to ONNX format": [[115, "export-the-model-to-onnx-format"]], "4. Save the ONNX model in a file": [[115, "save-the-onnx-model-in-a-file"]], "5. Visualize the ONNX model graph using Netron": [[115, "visualize-the-onnx-model-graph-using-netron"]], "6. Execute the ONNX model with ONNX Runtime": [[115, "execute-the-onnx-model-with-onnx-runtime"]], "7. Compare the PyTorch results with the ones from the ONNX Runtime": [[115, "compare-the-pytorch-results-with-the-ones-from-the-onnx-runtime"]], "ONNX": [[116, "onnx"]], "Introduction to ONNX": [[117, "introduction-to-onnx"]], "Dependencies": [[117, "dependencies"]], "Extending the ONNX Exporter Operator Support": [[118, "extending-the-onnx-exporter-operator-support"]], "Overriding the implementation of an existing PyTorch operator": [[118, "overriding-the-implementation-of-an-existing-pytorch-operator"]], "Using custom ONNX operators": [[118, "using-custom-onnx-operators"]], "Supporting a custom PyTorch operator": [[118, "supporting-a-custom-pytorch-operator"]], "Profiling your PyTorch Module": [[120, "profiling-your-pytorch-module"]], "Performance debugging using Profiler": [[120, "performance-debugging-using-profiler"]], "Profile the forward pass": [[120, "profile-the-forward-pass"]], "Print profiler results": [[120, "print-profiler-results"]], "Improve memory performance": [[120, "improve-memory-performance"]], "Improve time performance": [[120, "improve-time-performance"]], "Learning PyTorch with Examples": [[121, "learning-pytorch-with-examples"]], "Table of Contents": [[121, "table-of-contents"]], "PyTorch: Defining new autograd functions": [[121, "pytorch-defining-new-autograd-functions"]], "nn module": [[121, "nn-module"], [121, "id3"]], "Examples": [[121, "examples"], [216, "examples"], [253, "examples"], [282, "examples"]], "Saving and Loading Models": [[122, "saving-and-loading-models"]], "What is a state_dict?": [[122, "what-is-a-state-dict"]], "Example:": [[122, "example"]], "Saving & Loading Model for Inference": [[122, "saving-loading-model-for-inference"]], "Save/Load state_dict (Recommended)": [[122, "save-load-state-dict-recommended"]], "Save/Load Entire Model": [[122, "save-load-entire-model"]], "Saving an Exported Program": [[122, "saving-an-exported-program"]], "Saving & Loading a General Checkpoint for Inference and/or Resuming Training": [[122, "saving-loading-a-general-checkpoint-for-inference-and-or-resuming-training"]], "Save:": [[122, "save"], [122, "id1"], [122, "id3"]], "Load:": [[122, "load"], [122, "id2"], [122, "id4"]], "Saving Multiple Models in One File": [[122, "saving-multiple-models-in-one-file"]], "Warmstarting Model Using Parameters from a Different Model": [[122, "warmstarting-model-using-parameters-from-a-different-model"]], "Saving & Loading Model Across Devices": [[122, "saving-loading-model-across-devices"]], "Save on GPU, Load on CPU": [[122, "save-on-gpu-load-on-cpu"]], "Save on GPU, Load on GPU": [[122, "save-on-gpu-load-on-gpu"]], "Save on CPU, Load on GPU": [[122, "save-on-cpu-load-on-gpu"]], "Saving torch.nn.DataParallel Models": [[122, "saving-torch-nn-dataparallel-models"]], "T5-Base Model for Summarization, Sentiment Classification, and Translation": [[124, "t5-base-model-for-summarization-sentiment-classification-and-translation"]], "Template Tutorial": [[125, "template-tutorial"]], "Steps": [[125, "steps"], [188, "steps"], [226, "steps"], [228, "steps"], [231, "steps"], [242, "steps"], [243, "steps"], [244, "steps"], [245, "steps"]], "(Optional) Additional Exercises": [[125, "optional-additional-exercises"]], "Text classification with the torchtext library": [[126, "text-classification-with-the-torchtext-library"]], "Preprocess custom text dataset using torchtext": [[127, "preprocess-custom-text-dataset-using-torchtext"]], "Transfer Learning for Computer Vision Tutorial": [[128, "transfer-learning-for-computer-vision-tutorial"]], "Load Data": [[128, "load-data"]], "Visualize a few images": [[128, "visualize-a-few-images"]], "Training the model": [[128, "training-the-model"], [186, "training-the-model"]], "Visualizing the model predictions": [[128, "visualizing-the-model-predictions"]], "Finetuning the ConvNet": [[128, "finetuning-the-convnet"]], "Train and evaluate": [[128, "train-and-evaluate"], [128, "id1"]], "ConvNet as fixed feature extractor": [[128, "convnet-as-fixed-feature-extractor"]], "Inference on custom images": [[128, "inference-on-custom-images"]], "Further Learning": [[128, "further-learning"]], "Language Modeling with nn.Transformer and torchtext": [[129, "language-modeling-with-nn-transformer-and-torchtext"]], "Language Translation with nn.Transformer and torchtext": [[130, "language-translation-with-nn-transformer-and-torchtext"]], "Compilers": [[131, "compilers"]], "Deep Dive": [[132, "deep-dive"]], "Distributed": [[133, "distributed"]], "Learn DDP": [[133, "learn-ddp"]], "Learn FSDP2": [[133, "learn-fsdp2"]], "Learn Tensor Parallel (TP)": [[133, "learn-tensor-parallel-tp"]], "Learn DeviceMesh": [[133, "learn-devicemesh"]], "Learn RPC": [[133, "learn-rpc"]], "Custom Extensions": [[133, "custom-extensions"]], "Domains": [[134, "domains"]], "Ecosystem": [[135, "ecosystem"]], "Extension": [[136, "extension"]], "Welcome to PyTorch Tutorials": [[137, "welcome-to-pytorch-tutorials"]], "Additional Resources": [[137, "additional-resources"], [174, "additional-resources"]], "Getting Started with Fully Sharded Data Parallel(FSDP)": [[138, "getting-started-with-fully-sharded-data-parallel-fsdp"]], "How FSDP works": [[138, "how-fsdp-works"]], "How to use FSDP": [[138, "how-to-use-fsdp"]], "Advanced Model Training with Fully Sharded Data Parallel (FSDP)": [[139, "advanced-model-training-with-fully-sharded-data-parallel-fsdp"]], "FSDP Features in This Tutorial": [[139, "fsdp-features-in-this-tutorial"]], "Recap on How FSDP Works": [[139, "recap-on-how-fsdp-works"]], "Fine-tuning HF T5": [[139, "fine-tuning-hf-t5"]], "Transformer Wrapping Policy": [[139, "transformer-wrapping-policy"]], "Mixed Precision": [[139, "mixed-precision"]], "Intializing FSDP Model on Device": [[139, "intializing-fsdp-model-on-device"]], "Sharding Strategy": [[139, "sharding-strategy"]], "Backward Prefetch": [[139, "backward-prefetch"]], "Model Checkpoint Saving, by streaming to the Rank0 CPU": [[139, "model-checkpoint-saving-by-streaming-to-the-rank0-cpu"]], "Getting Started with Fully Sharded Data Parallel (FSDP2)": [[140, "getting-started-with-fully-sharded-data-parallel-fsdp2"]], "How FSDP2 works": [[140, "how-fsdp2-works"]], "How to use FSDP2": [[140, "how-to-use-fsdp2"]], "Model Initialization": [[140, "model-initialization"]], "Forward/Backward with Prefetching": [[140, "forward-backward-with-prefetching"]], "Enabling Mixed Precision": [[140, "enabling-mixed-precision"]], "Gradient Clipping and Optimizer with DTensor": [[140, "gradient-clipping-and-optimizer-with-dtensor"]], "State Dicts with DTensor APIs": [[140, "state-dicts-with-dtensor-apis"]], "State Dict with DCP APIs": [[140, "state-dict-with-dcp-apis"]], "FSDP1-to-FSDP2 migration guide": [[140, "fsdp1-to-fsdp2-migration-guide"]], "Introduction to Libuv TCPStore Backend": [[141, "introduction-to-libuv-tcpstore-backend"]], "Performance Benchmark": [[141, "performance-benchmark"]], "Impact": [[141, "impact"]], "Exit Route 1: Pass use_libuv=False to TCPStore Initialization": [[141, "exit-route-1-pass-use-libuv-false-to-tcpstore-initialization"]], "Exit Route 2: Add use_libuv=0 to init_method at ProcessGroup Initialization": [[141, "exit-route-2-add-use-libuv-0-to-init-method-at-processgroup-initialization"]], "Exit Route 3: Set Environment Variable USE_LIBUV to 0": [[141, "exit-route-3-set-environment-variable-use-libuv-to-0"]], "Large Scale Transformer model training with Tensor Parallel (TP)": [[142, "large-scale-transformer-model-training-with-tensor-parallel-tp"]], "How Tensor Parallel works?": [[142, "how-tensor-parallel-works"]], "When and Why you should apply Tensor Parallel": [[142, "when-and-why-you-should-apply-tensor-parallel"]], "How to apply Tensor Parallel": [[142, "how-to-apply-tensor-parallel"]], "Apply Sequence Parallel to LayerNorm/RMSNorm layers": [[142, "apply-sequence-parallel-to-layernorm-rmsnorm-layers"]], "Apply Loss Parallel": [[142, "apply-loss-parallel"]], "Combine Tensor Parallel with Fully Sharded Data Parallel together": [[142, "combine-tensor-parallel-with-fully-sharded-data-parallel-together"]], "Hooks for autograd saved tensors": [[143, "hooks-for-autograd-saved-tensors"]], "Saved tensors": [[143, "saved-tensors"]], "Why does training a model (typically) requires more memory than evaluating it?": [[143, "why-does-training-a-model-typically-requires-more-memory-than-evaluating-it"]], "The concept of packing / unpacking": [[143, "the-concept-of-packing-unpacking"]], "Saved tensors hooks": [[143, "saved-tensors-hooks"]], "Some unconventional examples": [[143, "some-unconventional-examples"]], "Returning an int": [[143, "returning-an-int"]], "Returning a tuple": [[143, "returning-a-tuple"]], "Returning a str": [[143, "returning-a-str"]], "Saving tensors to CPU": [[143, "saving-tensors-to-cpu"]], "Saving tensors to disk": [[143, "saving-tensors-to-disk"]], "Multi-Objective NAS with Ax": [[144, "multi-objective-nas-with-ax"]], "Defining the TorchX App": [[144, "defining-the-torchx-app"]], "Setting up the Runner": [[144, "setting-up-the-runner"]], "Setting up the SearchSpace": [[144, "setting-up-the-searchspace"]], "Setting up Metrics": [[144, "setting-up-metrics"]], "Setting up the OptimizationConfig": [[144, "setting-up-the-optimizationconfig"]], "Creating the Ax Experiment": [[144, "creating-the-ax-experiment"]], "Choosing the Generation Strategy": [[144, "choosing-the-generation-strategy"]], "Configuring the Scheduler": [[144, "configuring-the-scheduler"]], "Running the optimization": [[144, "running-the-optimization"]], "Evaluating the results": [[144, "evaluating-the-results"]], "Acknowledgments": [[144, "acknowledgments"]], "NLP From Scratch: Classifying Names with a Character-Level RNN": [[145, "nlp-from-scratch-classifying-names-with-a-character-level-rnn"]], "Recommended Preparation": [[145, "recommended-preparation"]], "Preparing Torch": [[145, "preparing-torch"]], "Preparing the Data": [[145, "preparing-the-data"], [146, "preparing-the-data"]], "Turning Names into Tensors": [[145, "turning-names-into-tensors"]], "Creating the Network": [[145, "creating-the-network"], [146, "creating-the-network"]], "Training the Network": [[145, "training-the-network"], [146, "training-the-network"]], "Plotting the Results": [[145, "plotting-the-results"]], "Evaluating the Results": [[145, "evaluating-the-results"]], "Exercises": [[145, "exercises"], [146, "exercises"], [184, "exercises"]], "NLP From Scratch: Generating Names with a Character-Level RNN": [[146, "nlp-from-scratch-generating-names-with-a-character-level-rnn"]], "Preparing for Training": [[146, "preparing-for-training"]], "Plotting the Losses": [[146, "plotting-the-losses"]], "Sampling the Network": [[146, "sampling-the-network"]], "Compiled Autograd: Capturing a larger backward graph for torch.compile": [[147, "compiled-autograd-capturing-a-larger-backward-graph-for-torch-compile"]], "Setup": [[147, "setup"], [154, "setup"], [155, "setup"], [166, "setup"], [174, "setup"], [188, "setup"], [200, "setup"], [228, "setup"], [231, "setup"], [242, "setup"], [243, "setup"], [244, "setup"], [245, "setup"], [256, "setup"], [263, "setup"]], "Basic usage": [[147, "basic-usage"]], "Inspecting the compiled autograd logs": [[147, "inspecting-the-compiled-autograd-logs"]], "Compiling the forward and backward pass using different flags": [[147, "compiling-the-forward-and-backward-pass-using-different-flags"]], "Compiled Autograd addresses certain limitations of AOTAutograd": [[147, "compiled-autograd-addresses-certain-limitations-of-aotautograd"]], "Common recompilation reasons for Compiled Autograd": [[147, "common-recompilation-reasons-for-compiled-autograd"]], "Fusing Convolution and Batch Norm using Custom Function": [[148, "fusing-convolution-and-batch-norm-using-custom-function"]], "Backward Formula Implementation for Convolution": [[148, "backward-formula-implementation-for-convolution"]], "Backward Formula Implementation for Batch Norm": [[148, "backward-formula-implementation-for-batch-norm"]], "Fusing Convolution and BatchNorm": [[148, "fusing-convolution-and-batchnorm"]], "Testing out our new Layer": [[148, "testing-out-our-new-layer"]], "A Comparison of Memory Usage": [[148, "a-comparison-of-memory-usage"]], "Double Backward with Custom Functions": [[149, "double-backward-with-custom-functions"]], "Saving the Inputs": [[149, "saving-the-inputs"]], "Saving the Outputs": [[149, "saving-the-outputs"]], "Saving Intermediate Results": [[149, "saving-intermediate-results"]], "Saving Intermediate Results: What not to do": [[149, "saving-intermediate-results-what-not-to-do"]], "When Backward is not Tracked": [[149, "when-backward-is-not-tracked"]], "Training \u201creal-world\u201d models with DDP": [[150, "training-real-world-models-with-ddp"]], "Files used for training": [[150, "files-used-for-training"]], "Saving and Loading from the cloud": [[150, "saving-and-loading-from-the-cloud"]], "Using Mixed Precision": [[150, "using-mixed-precision"]], "When is DDP not enough?": [[150, "when-is-ddp-not-enough"]], "Multinode Training": [[151, "multinode-training"]], "Local and Global ranks": [[151, "local-and-global-ranks"]], "Heteregeneous Scaling": [[151, "heteregeneous-scaling"]], "Troubleshooting": [[151, "troubleshooting"], [225, "troubleshooting"]], "Getting Started with Distributed Data Parallel": [[152, "getting-started-with-distributed-data-parallel"]], "Comparison between DataParallel and DistributedDataParallel": [[152, "comparison-between-dataparallel-and-distributeddataparallel"]], "Basic Use Case": [[152, "basic-use-case"]], "Skewed Processing Speeds": [[152, "skewed-processing-speeds"]], "Save and Load Checkpoints": [[152, "save-and-load-checkpoints"]], "Combining DDP with Model Parallelism": [[152, "combining-ddp-with-model-parallelism"]], "Initialize DDP with torch.distributed.run/torchrun": [[152, "initialize-ddp-with-torch-distributed-run-torchrun"]], "Distributed Pipeline Parallelism Using RPC": [[153, "distributed-pipeline-parallelism-using-rpc"]], "Writing Distributed Applications with PyTorch": [[154, "writing-distributed-applications-with-pytorch"]], "Point-to-Point Communication": [[154, "point-to-point-communication"]], "Collective Communication": [[154, "collective-communication"]], "Distributed Training": [[154, "distributed-training"]], "Our Own Ring-Allreduce": [[154, "our-own-ring-allreduce"]], "Advanced Topics": [[154, "advanced-topics"]], "Communication Backends": [[154, "communication-backends"]], "Initialization Methods": [[154, "initialization-methods"]], "Recurrent DQN: Training recurrent policies": [[155, "recurrent-dqn-training-recurrent-policies"]], "Policy": [[155, "policy"], [178, "policy"]], "Convolutional network": [[155, "convolutional-network"]], "LSTM Module": [[155, "lstm-module"]], "MLP": [[155, "mlp"]], "Using the Q-Values to select an action": [[155, "using-the-q-values-to-select-an-action"]], "Using the model for the loss": [[155, "using-the-model-for-the-loss"]], "DQN Loss": [[155, "dqn-loss"]], "Collector and replay buffer": [[155, "collector-and-replay-buffer"]], "Model ensembling": [[156, "model-ensembling"]], "What is model ensembling?": [[156, "what-is-model-ensembling"]], "Using vmap to vectorize the ensemble": [[156, "using-vmap-to-vectorize-the-ensemble"]], "Performance": [[156, "performance"]], "Forced Alignment with Wav2Vec2": [[157, "forced-alignment-with-wav2vec2"]], "Forward-mode Automatic Differentiation (Beta)": [[158, "forward-mode-automatic-differentiation-beta"]], "Basic Usage": [[158, "basic-usage"], [193, "basic-usage"], [195, "basic-usage"], [214, "basic-usage"], [252, "basic-usage"]], "Usage with Modules": [[158, "usage-with-modules"]], "Using the functional Module API (beta)": [[158, "using-the-functional-module-api-beta"]], "Custom autograd Function": [[158, "custom-autograd-function"]], "Functional API (beta)": [[158, "functional-api-beta"]], "Using the functional API with Modules": [[158, "using-the-functional-api-with-modules"]], "(beta) Building a Simple CPU Performance Profiler with FX": [[159, "beta-building-a-simple-cpu-performance-profiler-with-fx"]], "Capturing the Model with Symbolic Tracing": [[159, "capturing-the-model-with-symbolic-tracing"]], "Creating a Profiling Interpreter": [[159, "creating-a-profiling-interpreter"]], "Investigating the Performance of ResNet18": [[159, "investigating-the-performance-of-resnet18"]], "Inductor CPU backend debugging and profiling": [[160, "inductor-cpu-backend-debugging-and-profiling"]], "Debugging": [[160, "debugging"]], "Get more logging information": [[160, "get-more-logging-information"]], "Determine component of error": [[160, "determine-component-of-error"]], "Compilation error": [[160, "compilation-error"]], "Accuracy debugging": [[160, "accuracy-debugging"]], "Performance profiling": [[160, "performance-profiling"]], "Jacobians, Hessians, hvp, vhp, and more: composing function transforms": [[161, "jacobians-hessians-hvp-vhp-and-more-composing-function-transforms"]], "Computing the Jacobian": [[161, "computing-the-jacobian"]], "Reverse-mode Jacobian (jacrev) vs forward-mode Jacobian (jacfwd)": [[161, "reverse-mode-jacobian-jacrev-vs-forward-mode-jacobian-jacfwd"]], "Hessian computation with functorch.hessian": [[161, "hessian-computation-with-functorch-hessian"]], "Batch Jacobian and Batch Hessian": [[161, "batch-jacobian-and-batch-hessian"]], "Computing Hessian-vector products": [[161, "computing-hessian-vector-products"]], "Train a Mario-playing RL Agent": [[162, "train-a-mario-playing-rl-agent"]], "RL Definitions": [[162, "rl-definitions"]], "Initialize Environment": [[162, "initialize-environment"]], "Preprocess Environment": [[162, "preprocess-environment"]], "Agent": [[162, "agent"]], "Act": [[162, "act"]], "Cache and Recall": [[162, "cache-and-recall"]], "Learn": [[162, "learn"]], "Neural Network": [[162, "neural-network"]], "TD Estimate & TD Target": [[162, "td-estimate-td-target"]], "Updating the model": [[162, "updating-the-model"]], "Save checkpoint": [[162, "save-checkpoint"]], "Putting it all together": [[162, "putting-it-all-together"]], "Logging": [[162, "logging"]], "Let\u2019s play!": [[162, "lets-play"]], "Channels Last Memory Format in PyTorch": [[163, "channels-last-memory-format-in-pytorch"]], "Memory Format API": [[163, "memory-format-api"]], "Performance Gains": [[163, "performance-gains"]], "Converting existing models": [[163, "converting-existing-models"]], "Work to do": [[163, "work-to-do"]], "Single-Machine Model Parallel Best Practices": [[165, "single-machine-model-parallel-best-practices"]], "Neural Tangent Kernels": [[166, "neural-tangent-kernels"]], "Create a function version of the model": [[166, "create-a-function-version-of-the-model"]], "Compute the NTK: method 1 (Jacobian contraction)": [[166, "compute-the-ntk-method-1-jacobian-contraction"]], "Compute the NTK: method 2 (NTK-vector products)": [[166, "compute-the-ntk-method-2-ntk-vector-products"]], "NLP from Scratch": [[167, "nlp-from-scratch"]], "Getting Started - Accelerate Your Scripts with nvFuser": [[168, "getting-started-accelerate-your-scripts-with-nvfuser"]], "How to save memory by fusing the optimizer step into the backward pass": [[169, "how-to-save-memory-by-fusing-the-optimizer-step-into-the-backward-pass"]], "Memory usage during training": [[169, "memory-usage-during-training"]], "Capturing and visualizing memory snapshots": [[169, "capturing-and-visualizing-memory-snapshots"]], "DISCLAIMER: This technique is not for all": [[169, "disclaimer-this-technique-is-not-for-all"]], "Tensor.register_post_accumulate_grad_hook(hook) API and our technique": [[169, "tensor-register-post-accumulate-grad-hook-hook-api-and-our-technique"]], "How everything fits together in 10 lines": [[169, "how-everything-fits-together-in-10-lines"]], "Parametrizations Tutorial": [[170, "parametrizations-tutorial"]], "Implementing parametrizations by hand": [[170, "implementing-parametrizations-by-hand"]], "Introduction to parametrizations": [[170, "introduction-to-parametrizations"]], "Inspecting a parametrized module": [[170, "inspecting-a-parametrized-module"]], "Parametrizations are first-class citizens": [[170, "parametrizations-are-first-class-citizens"]], "Caching the value of a parametrization": [[170, "caching-the-value-of-a-parametrization"]], "Concatenating parametrizations": [[170, "concatenating-parametrizations"]], "Initializing parametrizations": [[170, "initializing-parametrizations"]], "Removing parametrizations": [[170, "removing-parametrizations"]], "Per-sample-gradients": [[171, "per-sample-gradients"]], "What is it?": [[171, "what-is-it"]], "Per-sample-grads, the efficient way, using function transforms": [[171, "per-sample-grads-the-efficient-way-using-function-transforms"]], "Performance comparison": [[171, "performance-comparison"]], "A guide on good usage of non_blocking and pin_memory() in PyTorch": [[172, "a-guide-on-good-usage-of-non-blocking-and-pin-memory-in-pytorch"]], "What you will learn": [[172, "what-you-will-learn"], [254, "what-you-will-learn"], [265, "what-you-will-learn"]], "Preamble": [[172, "preamble"]], "Memory management basics": [[172, "memory-management-basics"]], "CUDA and (non-)pageable memory": [[172, "cuda-and-non-pageable-memory"]], "Asynchronous vs. Synchronous Operations with non_blocking=True (CUDA cudaMemcpyAsync)": [[172, "asynchronous-vs-synchronous-operations-with-non-blocking-true-cuda-cudamemcpyasync"]], "A PyTorch perspective": [[172, "a-pytorch-perspective"]], "pin_memory()": [[172, "pin-memory"]], "non_blocking=True": [[172, "non-blocking-true"]], "Synergies": [[172, "synergies"]], "Other copy directions (GPU -> CPU, CPU -> MPS)": [[172, "other-copy-directions-gpu-cpu-cpu-mps"]], "Practical recommendations": [[172, "practical-recommendations"]], "Additional considerations": [[172, "additional-considerations"]], "Additional resources": [[172, "additional-resources"]], "Training Transformer models using Pipeline Parallelism": [[173, "training-transformer-models-using-pipeline-parallelism"]], "Introduction to Distributed Pipeline Parallelism": [[174, "introduction-to-distributed-pipeline-parallelism"]], "Step 1: Partition the Transformer Model": [[174, "step-1-partition-the-transformer-model"]], "Step 2: Define The Main Execution": [[174, "step-2-define-the-main-execution"]], "Step 3: Launch the Distributed Processes": [[174, "step-3-launch-the-distributed-processes"]], "Customize Process Group Backends Using Cpp Extensions": [[175, "customize-process-group-backends-using-cpp-extensions"]], "Basics": [[175, "basics"], [180, "basics"]], "Step 1: Implement a Subclass of Backend": [[175, "step-1-implement-a-subclass-of-backend"]], "Step 2: Expose The Extension Python APIs": [[175, "step-2-expose-the-extension-python-apis"]], "Step 3: Build The Custom Extension": [[175, "step-3-build-the-custom-extension"]], "Step 4: Use The Extension in Application": [[175, "step-4-use-the-extension-in-application"]], "Pruning Tutorial": [[176, "pruning-tutorial"]], "Create a model": [[176, "create-a-model"]], "Inspect a Module": [[176, "inspect-a-module"]], "Pruning a Module": [[176, "pruning-a-module"]], "Iterative Pruning": [[176, "iterative-pruning"]], "Serializing a pruned model": [[176, "serializing-a-pruned-model"]], "Remove pruning re-parametrization": [[176, "remove-pruning-re-parametrization"]], "Pruning multiple parameters in a model": [[176, "pruning-multiple-parameters-in-a-model"]], "Global pruning": [[176, "global-pruning"]], "Extending torch.nn.utils.prune with custom pruning functions": [[176, "extending-torch-nn-utils-prune-with-custom-pruning-functions"]], "Real Time Inference on Raspberry Pi 4 (30 fps!)": [[177, "real-time-inference-on-raspberry-pi-4-30-fps"]], "Raspberry Pi 4 Setup": [[177, "raspberry-pi-4-setup"]], "Installing PyTorch and OpenCV": [[177, "installing-pytorch-and-opencv"]], "Video Capture": [[177, "video-capture"]], "Image Preprocessing": [[177, "image-preprocessing"]], "Model Choices": [[177, "model-choices"]], "MobileNetV2: Quantization and JIT": [[177, "mobilenetv2-quantization-and-jit"]], "Putting It Together": [[177, "putting-it-together"]], "Troubleshooting: Performance": [[177, "troubleshooting-performance"]], "Reinforcement Learning (PPO) with TorchRL Tutorial": [[178, "reinforcement-learning-ppo-with-torchrl-tutorial"]], "Define Hyperparameters": [[178, "define-hyperparameters"]], "Data collection parameters": [[178, "data-collection-parameters"]], "PPO parameters": [[178, "ppo-parameters"]], "Define an environment": [[178, "define-an-environment"]], "Normalization": [[178, "normalization"]], "Value network": [[178, "value-network"]], "Loss function": [[178, "loss-function"]], "Conclusion and next steps": [[178, "conclusion-and-next-steps"]], "Reinforcement Learning (DQN) Tutorial": [[179, "reinforcement-learning-dqn-tutorial"]], "Replay Memory": [[179, "replay-memory"]], "DQN algorithm": [[179, "dqn-algorithm"]], "Q-network": [[179, "q-network"]], "Hyperparameters and utilities": [[179, "hyperparameters-and-utilities"]], "Implementing Batch RPC Processing Using Asynchronous Executions": [[180, "implementing-batch-rpc-processing-using-asynchronous-executions"]], "Batch-Updating Parameter Server": [[180, "batch-updating-parameter-server"]], "Batch-Processing CartPole Solver": [[180, "batch-processing-cartpole-solver"]], "Learn More": [[180, "learn-more"], [188, "learn-more"], [226, "learn-more"], [228, "learn-more"], [231, "learn-more"], [239, "learn-more"], [242, "learn-more"], [243, "learn-more"], [244, "learn-more"]], "Implementing a Parameter Server Using Distributed RPC Framework": [[181, "implementing-a-parameter-server-using-distributed-rpc-framework"]], "Getting Started with Distributed RPC Framework": [[182, "getting-started-with-distributed-rpc-framework"]], "Distributed Reinforcement Learning using RPC and RRef": [[182, "distributed-reinforcement-learning-using-rpc-and-rref"]], "Distributed RNN using Distributed Autograd and Distributed Optimizer": [[182, "distributed-rnn-using-distributed-autograd-and-distributed-optimizer"]], "(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)": [[183, "beta-implementing-high-performance-transformers-with-scaled-dot-product-attention-sdpa"]], "Fused implementations": [[183, "fused-implementations"]], "Explicit Dispatcher Control": [[183, "explicit-dispatcher-control"]], "Hardware dependence": [[183, "hardware-dependence"]], "Causal Self Attention": [[183, "causal-self-attention"]], "NestedTensor and Dense tensor support": [[183, "nestedtensor-and-dense-tensor-support"]], "Using SDPA with torch.compile": [[183, "using-sdpa-with-torch-compile"]], "Using SDPA with attn_bias subclasses": [[183, "using-sdpa-with-attn-bias-subclasses"]], "NLP From Scratch: Translation with a Sequence to Sequence Network and Attention": [[184, "nlp-from-scratch-translation-with-a-sequence-to-sequence-network-and-attention"]], "Loading data files": [[184, "loading-data-files"]], "The Seq2Seq Model": [[184, "the-seq2seq-model"]], "The Encoder": [[184, "the-encoder"]], "The Decoder": [[184, "the-decoder"]], "Simple Decoder": [[184, "simple-decoder"]], "Attention Decoder": [[184, "attention-decoder"]], "Preparing Training Data": [[184, "preparing-training-data"]], "Training the Model": [[184, "training-the-model"]], "Plotting results": [[184, "plotting-results"]], "Evaluation": [[184, "evaluation"]], "Training and Evaluating": [[184, "training-and-evaluating"]], "Visualizing Attention": [[184, "visualizing-attention"]], "Spatial Transformer Networks Tutorial": [[186, "spatial-transformer-networks-tutorial"]], "Loading the data": [[186, "loading-the-data"]], "Depicting spatial transformer networks": [[186, "depicting-spatial-transformer-networks"]], "Visualizing the STN results": [[186, "visualizing-the-stn-results"]], "Speech Recognition with Wav2Vec2": [[187, "speech-recognition-with-wav2vec2"]], "PyTorch Profiler With TensorBoard": [[188, "pytorch-profiler-with-tensorboard"]], "1. Prepare the data and model": [[188, "prepare-the-data-and-model"]], "2. Use profiler to record execution events": [[188, "use-profiler-to-record-execution-events"]], "3. Run the profiler": [[188, "run-the-profiler"]], "4. Use TensorBoard to view results and analyze model performance": [[188, "use-tensorboard-to-view-results-and-analyze-model-performance"]], "5. Improve performance with the help of profiler": [[188, "improve-performance-with-the-help-of-profiler"]], "6. Analyze performance with other advanced features": [[188, "analyze-performance-with-other-advanced-features"]], "7. Additional Practices: Profiling PyTorch on AMD GPUs": [[188, "additional-practices-profiling-pytorch-on-amd-gpus"]], "Visualizing Models, Data, and Training with TensorBoard": [[189, "visualizing-models-data-and-training-with-tensorboard"]], "1. TensorBoard setup": [[189, "tensorboard-setup"]], "2. Writing to TensorBoard": [[189, "writing-to-tensorboard"]], "3. Inspect the model using TensorBoard": [[189, "inspect-the-model-using-tensorboard"]], "4. Adding a \u201cProjector\u201d to TensorBoard": [[189, "adding-a-projector-to-tensorboard"]], "5. Tracking model training with TensorBoard": [[189, "tracking-model-training-with-tensorboard"]], "6. Assessing trained models with TensorBoard": [[189, "assessing-trained-models-with-tensorboard"]], "Text-to-speech with Tacotron2": [[190, "text-to-speech-with-tacotron2"]], "Whole Slide Image Classification Using PyTorch and TIAToolbox": [[191, "whole-slide-image-classification-using-pytorch-and-tiatoolbox"]], "Setting up the environment": [[191, "setting-up-the-environment"]], "Importing related libraries": [[191, "importing-related-libraries"]], "Clean-up before a run": [[191, "clean-up-before-a-run"]], "Downloading the data": [[191, "downloading-the-data"]], "Reading the data": [[191, "reading-the-data"]], "Classify image patches": [[191, "classify-image-patches"]], "Define PatchPredictor model": [[191, "define-patchpredictor-model"]], "Predict patch labels": [[191, "predict-patch-labels"]], "Predict patch labels for a whole slide": [[191, "predict-patch-labels-for-a-whole-slide"]], "Feature extraction with a pathology-specific model": [[191, "feature-extraction-with-a-pathology-specific-model"]], "Where to Go From Here": [[191, "where-to-go-from-here"]], "Building a Convolution/Batch Norm fuser with torch.compile": [[192, "building-a-convolution-batch-norm-fuser-with-torch-compile"]], "Fusing Convolution with Batch Norm": [[192, "fusing-convolution-with-batch-norm"], [192, "id1"]], "Pattern Matching with torch.compile": [[192, "pattern-matching-with-torch-compile"]], "Testing out our Fusion Pass": [[192, "testing-out-our-fusion-pass"]], "Benchmarking our Fusion on ResNet18": [[192, "benchmarking-our-fusion-on-resnet18"]], "Introduction to torch.compile": [[193, "introduction-to-torch-compile"]], "torch.compile and Nested Calls": [[193, "torch-compile-and-nested-calls"]], "Best Practices and Recommendations": [[193, "best-practices-and-recommendations"]], "Demonstrating Speedups": [[193, "demonstrating-speedups"]], "Comparison to TorchScript and FX Tracing": [[193, "comparison-to-torchscript-and-fx-tracing"]], "TorchDynamo and FX Graphs": [[193, "torchdynamo-and-fx-graphs"]], "torch.export Nightly Tutorial": [[194, "torch-export-nightly-tutorial"]], "torch.export Tutorial": [[195, "torch-export-tutorial"]], "Graph Breaks": [[195, "graph-breaks"]], "Non-Strict Export": [[195, "non-strict-export"]], "Control Flow Ops": [[195, "control-flow-ops"]], "Constraints/Dynamic Shapes": [[195, "constraints-dynamic-shapes"]], "Basic concepts: symbols and guards": [[195, "basic-concepts-symbols-and-guards"]], "0/1 specialization": [[195, "specialization"]], "Named Dims": [[195, "named-dims"]], "Constraint violations, suggested fixes": [[195, "constraint-violations-suggested-fixes"]], "Data-dependent errors": [[195, "data-dependent-errors"]], "Guards, torch._check()": [[195, "guards-torch-check"]], "Specialized values": [[195, "specialized-values"]], "Custom Ops": [[195, "custom-ops"]], "IR/Decompositions": [[195, "ir-decompositions"]], "ExportDB": [[195, "exportdb"]], "Running the Exported Program": [[195, "running-the-exported-program"]], "Introduction to TorchRec": [[196, "introduction-to-torchrec"], [197, "introduction-to-torchrec"]], "Install Dependencies": [[196, "install-dependencies"]], "Embeddings": [[196, "embeddings"]], "Embeddings in RecSys": [[196, "embeddings-in-recsys"]], "Embeddings in PyTorch": [[196, "embeddings-in-pytorch"]], "TorchRec Features Overview": [[196, "torchrec-features-overview"]], "From EmbeddingBag to EmbeddingBagCollection": [[196, "from-embeddingbag-to-embeddingbagcollection"]], "TorchRec Input/Output Data Types": [[196, "torchrec-input-output-data-types"]], "Distributed Training and Sharding": [[196, "distributed-training-and-sharding"]], "Distributed Embeddings": [[196, "distributed-embeddings"]], "Sharding": [[196, "sharding"]], "Sharded Modules": [[196, "sharded-modules"]], "Planner": [[196, "planner"]], "Planner Result": [[196, "planner-result"]], "GPU Training with LazyAwaitable": [[196, "gpu-training-with-lazyawaitable"]], "Anatomy of Sharded TorchRec modules": [[196, "anatomy-of-sharded-torchrec-modules"]], "Optimizing Embedding Lookups": [[196, "optimizing-embedding-lookups"]], "DistributedModelParallel": [[196, "distributedmodelparallel"]], "Sharding Best Practices": [[196, "sharding-best-practices"]], "Adding in the Optimizer": [[196, "adding-in-the-optimizer"]], "Optimizer Classes": [[196, "optimizer-classes"]], "Fused optimizer in TorchRec": [[196, "fused-optimizer-in-torchrec"]], "Adding an Optimizer to EmbeddingBagCollection": [[196, "adding-an-optimizer-to-embeddingbagcollection"]], "TorchVision Object Detection Finetuning Tutorial": [[198, "torchvision-object-detection-finetuning-tutorial"]], "Defining the Dataset": [[198, "defining-the-dataset"]], "Writing a custom dataset for PennFudan": [[198, "writing-a-custom-dataset-for-pennfudan"]], "Defining your model": [[198, "defining-your-model"]], "1 - Finetuning from a pretrained model": [[198, "finetuning-from-a-pretrained-model"]], "2 - Modifying the model to add a different backbone": [[198, "modifying-the-model-to-add-a-different-backbone"]], "Object detection and instance segmentation model for PennFudan Dataset": [[198, "object-detection-and-instance-segmentation-model-for-pennfudan-dataset"]], "Putting everything together": [[198, "putting-everything-together"]], "Testing forward() method (Optional)": [[198, "testing-forward-method-optional"]], "Wrapping up": [[198, "wrapping-up"]], "Accelerating PyTorch Transformers by replacing nn.Transformer with Nested Tensors and torch.compile()": [[199, "accelerating-pytorch-transformers-by-replacing-nn-transformer-with-nested-tensors-and-torch-compile"]], "Is this tutorial for me?": [[199, "is-this-tutorial-for-me"]], "Introducing the Building Blocks": [[199, "introducing-the-building-blocks"]], "The above building blocks are \u201cAll You Need\u201d (as of October 2024)": [[199, "the-above-building-blocks-are-all-you-need-as-of-october-2024"]], "MultiheadAttention": [[199, "multiheadattention"]], "Utilities": [[199, "utilities"]], "GPT-style layer": [[199, "gpt-style-layer"]], "Going one step further": [[199, "going-one-step-further"]], "Cross Attention": [[199, "cross-attention"]], "Fully masked rows no longer cause NaNs": [[199, "fully-masked-rows-no-longer-cause-nans"]], "FlexAttention + NJT": [[199, "flexattention-njt"]], "Packed Projection": [[199, "packed-projection"]], "Input projection for MultiheadAttention": [[199, "input-projection-for-multiheadattention"]], "SwiGLU feed forward network of Transformer Layer": [[199, "swiglu-feed-forward-network-of-transformer-layer"]], "Extended examples": [[199, "extended-examples"]], "Visualizing Gradients": [[200, "visualizing-gradients"]], "Registering hooks": [[200, "registering-hooks"]], "Training and visualization": [[200, "training-and-visualization"]], "(Optional) Additional exercises": [[200, "optional-additional-exercises"]], "References": [[200, "references"]], "Intro": [[201, "intro"]], "Leverage Intel\u00ae Advanced Matrix Extensions": [[202, "leverage-intel-advanced-matrix-extensions"]], "AMX in PyTorch": [[202, "amx-in-pytorch"]], "Guidelines of leveraging AMX with workloads": [[202, "guidelines-of-leveraging-amx-with-workloads"]], "CPU operators that can leverage AMX:": [[202, "cpu-operators-that-can-leverage-amx"]], "Confirm AMX is being utilized": [[202, "confirm-amx-is-being-utilized"]], "Making Native Android Application that uses PyTorch prebuilt libraries": [[203, "making-native-android-application-that-uses-pytorch-prebuilt-libraries"]], "(beta) Compiling the optimizer with torch.compile": [[204, "beta-compiling-the-optimizer-with-torch-compile"]], "Model Setup": [[204, "model-setup"], [205, "model-setup"], [213, "model-setup"]], "Setting up and running the optimizer benchmark": [[204, "setting-up-and-running-the-optimizer-benchmark"]], "See Also": [[204, "see-also"], [252, "see-also"], [279, "see-also"]], "(beta) Running the compiled optimizer with an LR Scheduler": [[205, "beta-running-the-compiled-optimizer-with-an-lr-scheduler"]], "Setting up and running the compiled optimizer with LR Scheduler": [[205, "setting-up-and-running-the-compiled-optimizer-with-lr-scheduler"]], "Extension: What happens with a non-tensor LR?": [[205, "extension-what-happens-with-a-non-tensor-lr"]], "Direct Device-to-Device Communication with TensorPipe CUDA RPC": [[206, "direct-device-to-device-communication-with-tensorpipe-cuda-rpc"]], "What is CUDA RPC?": [[206, "what-is-cuda-rpc"]], "How to use CUDA RPC?": [[206, "how-to-use-cuda-rpc"]], "Asynchronous Saving with Distributed Checkpoint (DCP)": [[207, "asynchronous-saving-with-distributed-checkpoint-dcp"]], "Asynchronous Checkpointing Overview": [[207, "asynchronous-checkpointing-overview"]], "Even more performance with Pinned Memory": [[207, "even-more-performance-with-pinned-memory"]], "Getting Started with Distributed Checkpoint (DCP)": [[208, "getting-started-with-distributed-checkpoint-dcp"]], "How DCP works": [[208, "how-dcp-works"]], "How to use DCP": [[208, "how-to-use-dcp"]], "Saving": [[208, "saving"]], "Loading": [[208, "loading"]], "Formats": [[208, "formats"]], "Getting Started with CommDebugMode": [[209, "getting-started-with-commdebugmode"]], "What is CommDebugMode and why is it useful": [[209, "what-is-commdebugmode-and-why-is-it-useful"]], "Using CommDebugMode": [[209, "using-commdebugmode"]], "Getting Started with DeviceMesh": [[210, "getting-started-with-devicemesh"]], "What is DeviceMesh": [[210, "what-is-devicemesh"]], "Why DeviceMesh is Useful": [[210, "why-devicemesh-is-useful"]], "How to use DeviceMesh with HSDP": [[210, "how-to-use-devicemesh-with-hsdp"]], "How to use DeviceMesh for your custom parallel solutions": [[210, "how-to-use-devicemesh-for-your-custom-parallel-solutions"]], "Profiling PyTorch RPC-Based Workloads": [[212, "profiling-pytorch-rpc-based-workloads"], [264, "profiling-pytorch-rpc-based-workloads"]], "Explicit horizontal fusion with foreach_map and torch.compile": [[213, "explicit-horizontal-fusion-with-foreach-map-and-torch-compile"]], "Helper functions for foreach_map implementation": [[213, "helper-functions-for-foreach-map-implementation"]], "Setting up and running the compiled kernel": [[213, "setting-up-and-running-the-compiled-kernel"]], "(Beta) PyTorch Inference Performance Tuning on AWS Graviton Processors": [[214, "beta-pytorch-inference-performance-tuning-on-aws-graviton-processors"]], "Contents": [[214, "contents"]], "Speed up Inference with bfloat16 Fast Math Kernels": [[214, "speed-up-inference-with-bfloat16-fast-math-kernels"]], "Improve Inference Performance with OpenBLAS for Smaller Batch Dimensions": [[214, "improve-inference-performance-with-openblas-for-smaller-batch-dimensions"]], "Optimize Memory Allocation Overhead with Linux Transparent Huge Pages (THP)": [[214, "optimize-memory-allocation-overhead-with-linux-transparent-huge-pages-thp"]], "Intel\u00ae Extension for PyTorch*": [[215, "intel-extension-for-pytorch"]], "Features": [[215, "features"], [216, "features"]], "Examples \u2013 CPU": [[215, "examples-cpu"]], "Float32": [[215, "float32"], [215, "id1"], [215, "id4"], [215, "id7"]], "BFloat16": [[215, "bfloat16"], [215, "id2"], [215, "id5"], [215, "id8"]], "Inference": [[215, "inference"], [215, "id6"]], "Examples \u2013 GPU": [[215, "examples-gpu"]], "Float16": [[215, "float16"]], "C++ (CPU only)": [[215, "c-cpu-only"]], "Tutorials": [[215, "tutorials"], [216, "tutorials"]], "Ease-of-use quantization for PyTorch with Intel\u00ae Neural Compressor": [[216, "ease-of-use-quantization-for-pytorch-with-intel-neural-compressor"]], "FP8 Quantization": [[216, "fp8-quantization"]], "Weight-only Quantization": [[216, "weight-only-quantization"]], "Static Quantization with PT2E Backend": [[216, "static-quantization-with-pt2e-backend"]], "Accuracy-driven Tuning": [[216, "accuracy-driven-tuning"]], "Loading data in PyTorch": [[217, "loading-data-in-pytorch"]], "(beta) Efficient mobile interpreter in Android and iOS": [[218, "beta-efficient-mobile-interpreter-in-android-and-ios"]], "Pytorch Mobile Performance Recipes": [[219, "pytorch-mobile-performance-recipes"]], "Model Preparation for Android Recipe": [[220, "model-preparation-for-android-recipe"]], "Model Preparation for iOS Recipe": [[221, "model-preparation-for-ios-recipe"]], "Profiling PyTorch workloads with The Instrumentation and Tracing Technology (ITT) API": [[222, "profiling-pytorch-workloads-with-the-instrumentation-and-tracing-technology-itt-api"]], "What is Intel\u00ae VTune\u2122 Profiler": [[222, "what-is-intel-vtune-profiler"]], "What is Instrumentation and Tracing Technology (ITT) API": [[222, "what-is-instrumentation-and-tracing-technology-itt-api"]], "How to visualize PyTorch model hierarchy in Intel\u00ae VTune\u2122 Profiler": [[222, "how-to-visualize-pytorch-model-hierarchy-in-intel-vtune-profiler"]], "Launch Intel\u00ae VTune\u2122 Profiler": [[222, "launch-intel-vtune-profiler"]], "Configure Profiling for CPU": [[222, "configure-profiling-for-cpu"]], "Configure Profiling for XPU": [[222, "configure-profiling-for-xpu"]], "Read Profiling Result": [[222, "read-profiling-result"]], "Read XPU Profiling Result": [[222, "read-xpu-profiling-result"]], "A short sample code showcasing how to use PyTorch ITT APIs": [[222, "a-short-sample-code-showcasing-how-to-use-pytorch-itt-apis"]], "Summary of PyTorch Mobile Recipes": [[223, "summary-of-pytorch-mobile-recipes"]], "Model Interpretability using Captum": [[224, "model-interpretability-using-captum"]], "Before you begin": [[224, "before-you-begin"]], "Computing Attribution": [[224, "computing-attribution"]], "Visualizing the Results": [[224, "visualizing-the-results"]], "Final Notes": [[224, "final-notes"]], "Automatic Mixed Precision": [[225, "automatic-mixed-precision"]], "A simple network": [[225, "a-simple-network"]], "Default Precision": [[225, "default-precision"]], "Adding torch.autocast": [[225, "adding-torch-autocast"]], "Adding GradScaler": [[225, "adding-gradscaler"]], "All together: \u201cAutomatic Mixed Precision\u201d": [[225, "all-together-automatic-mixed-precision"]], "Inspecting/modifying gradients (e.g., clipping)": [[225, "inspecting-modifying-gradients-e-g-clipping"]], "Saving/Resuming": [[225, "saving-resuming"]], "Inference/Evaluation": [[225, "inference-evaluation"]], "Advanced topics": [[225, "advanced-topics"]], "Speedup with Amp is minor": [[225, "speedup-with-amp-is-minor"]], "Loss is inf/NaN": [[225, "loss-is-inf-nan"]], "Type mismatch error (may manifest as CUDNN_STATUS_BAD_PARAM)": [[225, "type-mismatch-error-may-manifest-as-cudnn-status-bad-param"]], "SyntaxError": [[226, "syntaxerror"]], "1. Defining functions to benchmark": [[226, "defining-functions-to-benchmark"]], "2. Benchmarking with timeit.Timer": [[226, "benchmarking-with-timeit-timer"]], "3. Benchmarking with torch.utils.benchmark.Timer": [[226, "benchmarking-with-torch-utils-benchmark-timer"]], "4. Benchmarking with Blocked Autorange": [[226, "benchmarking-with-blocked-autorange"]], "5. Comparing benchmark results": [[226, "comparing-benchmark-results"]], "6. Saving/Loading benchmark results": [[226, "saving-loading-benchmark-results"]], "7. Generating inputs with Fuzzed Parameters": [[226, "generating-inputs-with-fuzzed-parameters"]], "8. Collecting instruction counts with Callgrind": [[226, "collecting-instruction-counts-with-callgrind"]], "Changing default device": [[227, "changing-default-device"]], "Defining a Neural Network in PyTorch": [[228, "defining-a-neural-network-in-pytorch"]], "1. Import necessary libraries for loading our data": [[228, "import-necessary-libraries-for-loading-our-data"], [242, "import-necessary-libraries-for-loading-our-data"], [243, "import-necessary-libraries-for-loading-our-data"], [244, "import-necessary-libraries-for-loading-our-data"]], "2. Define and initialize the neural network": [[228, "define-and-initialize-the-neural-network"], [243, "define-and-initialize-the-neural-network"]], "3. Specify how data will pass through your model": [[228, "specify-how-data-will-pass-through-your-model"]], "4. [Optional] Pass data through your model to test": [[228, "optional-pass-data-through-your-model-to-test"]], "PyTorch Recipes": [[229, "pytorch-recipes"]], "Tips for Loading an nn.Module from a Checkpoint": [[230, "tips-for-loading-an-nn-module-from-a-checkpoint"]], "Using torch.load(mmap=True)": [[230, "using-torch-load-mmap-true"]], "Using torch.device('meta')": [[230, "using-torch-device-meta"]], "Using load_state_dict(assign=True)": [[230, "using-load-state-dict-assign-true"]], "PyTorch Profiler": [[231, "pytorch-profiler"]], "1. Import all necessary libraries": [[231, "import-all-necessary-libraries"]], "2. Instantiate a simple Resnet model": [[231, "instantiate-a-simple-resnet-model"]], "3. Using profiler to analyze execution time": [[231, "using-profiler-to-analyze-execution-time"]], "4. Using profiler to analyze memory consumption": [[231, "using-profiler-to-analyze-memory-consumption"]], "5. Using tracing functionality": [[231, "using-tracing-functionality"]], "6. Examining stack traces": [[231, "examining-stack-traces"]], "7. Using profiler to analyze long-running jobs": [[231, "using-profiler-to-analyze-long-running-jobs"]], "Reasoning about Shapes in PyTorch": [[232, "reasoning-about-shapes-in-pytorch"]], "Save Load Across Devices": [[233, "save-load-across-devices"]], "Saving And Loading A General Checkpoint": [[234, "saving-and-loading-a-general-checkpoint"]], "Saving And Loading Models For Inference": [[235, "saving-and-loading-models-for-inference"]], "Saving Multiple Models In One File": [[236, "saving-multiple-models-in-one-file"]], "Extension points in nn.Module for load_state_dict and tensor subclasses": [[238, "extension-points-in-nn-module-for-load-state-dict-and-tensor-subclasses"]], "torch.utils.swap_tensors": [[238, "torch-utils-swap-tensors"]], "Application to nn.Module": [[238, "application-to-nn-module"]], "nn.Module.to() and related methods": [[238, "nn-module-to-and-related-methods"]], "nn.Module.load_state_dict()": [[238, "nn-module-load-state-dict"]], "How to use TensorBoard with PyTorch": [[239, "how-to-use-tensorboard-with-pytorch"]], "Using TensorBoard in PyTorch": [[239, "using-tensorboard-in-pytorch"]], "Log scalars": [[239, "log-scalars"]], "Run TensorBoard": [[239, "run-tensorboard"]], "Timer quick start": [[240, "timer-quick-start"]], "1. Defining a Timer": [[240, "defining-a-timer"]], "2. Wall time: Timer.blocked_autorange(...)": [[240, "wall-time-timer-blocked-autorange"]], "3. C++ snippets": [[240, "c-snippets"]], "4. Instruction counts: Timer.collect_callgrind(...)": [[240, "instruction-counts-timer-collect-callgrind"]], "5. Instruction counts: Delving deeper": [[240, "instruction-counts-delving-deeper"]], "6. A/B testing with Callgrind": [[240, "a-b-testing-with-callgrind"]], "7. Wrapping up": [[240, "wrapping-up"]], "8. Footnotes": [[240, "footnotes"]], "Performance Tuning Guide": [[241, "performance-tuning-guide"]], "General optimizations": [[241, "general-optimizations"]], "Enable asynchronous data loading and augmentation": [[241, "enable-asynchronous-data-loading-and-augmentation"]], "Disable gradient calculation for validation or inference": [[241, "disable-gradient-calculation-for-validation-or-inference"]], "Disable bias for convolutions directly followed by a batch norm": [[241, "disable-bias-for-convolutions-directly-followed-by-a-batch-norm"]], "Use parameter.grad = None instead of model.zero_grad() or optimizer.zero_grad()": [[241, "use-parameter-grad-none-instead-of-model-zero-grad-or-optimizer-zero-grad"]], "Fuse operations": [[241, "fuse-operations"]], "Enable channels_last memory format for computer vision models": [[241, "enable-channels-last-memory-format-for-computer-vision-models"]], "Checkpoint intermediate buffers": [[241, "checkpoint-intermediate-buffers"]], "Disable debugging APIs": [[241, "disable-debugging-apis"]], "CPU specific optimizations": [[241, "cpu-specific-optimizations"]], "Utilize Non-Uniform Memory Access (NUMA) Controls": [[241, "utilize-non-uniform-memory-access-numa-controls"]], "Utilize OpenMP": [[241, "utilize-openmp"]], "Intel OpenMP Runtime Library (libiomp)": [[241, "intel-openmp-runtime-library-libiomp"]], "Switch Memory allocator": [[241, "switch-memory-allocator"]], "Train a model on CPU with PyTorch ``DistributedDataParallel``(DDP) functionality": [[241, "train-a-model-on-cpu-with-pytorch-distributeddataparallel-ddp-functionality"]], "GPU specific optimizations": [[241, "gpu-specific-optimizations"]], "Enable Tensor cores": [[241, "enable-tensor-cores"]], "Use CUDA Graphs": [[241, "use-cuda-graphs"]], "Enable cuDNN auto-tuner": [[241, "enable-cudnn-auto-tuner"]], "Avoid unnecessary CPU-GPU synchronization": [[241, "avoid-unnecessary-cpu-gpu-synchronization"]], "Create tensors directly on the target device": [[241, "create-tensors-directly-on-the-target-device"]], "Use mixed precision and AMP": [[241, "use-mixed-precision-and-amp"]], "Preallocate memory in case of variable input length": [[241, "preallocate-memory-in-case-of-variable-input-length"]], "Distributed optimizations": [[241, "distributed-optimizations"]], "Use efficient data-parallel backend": [[241, "use-efficient-data-parallel-backend"]], "Skip unnecessary all-reduce if training with DistributedDataParallel and gradient accumulation": [[241, "skip-unnecessary-all-reduce-if-training-with-distributeddataparallel-and-gradient-accumulation"]], "Match the order of layers in constructors and during the execution if using DistributedDataParallel(find_unused_parameters=True)": [[241, "match-the-order-of-layers-in-constructors-and-during-the-execution-if-using-distributeddataparallel-find-unused-parameters-true"]], "Load-balance workload in a distributed setting": [[241, "load-balance-workload-in-a-distributed-setting"]], "Warmstarting model using parameters from a different model in PyTorch": [[242, "warmstarting-model-using-parameters-from-a-different-model-in-pytorch"]], "2. Define and initialize the neural network A and B": [[242, "define-and-initialize-the-neural-network-a-and-b"]], "3. Save model A": [[242, "save-model-a"]], "4. Load into model B": [[242, "load-into-model-b"]], "What is a state_dict in PyTorch": [[243, "what-is-a-state-dict-in-pytorch"]], "3. Initialize the optimizer": [[243, "initialize-the-optimizer"]], "4. Access the model and optimizer state_dict": [[243, "access-the-model-and-optimizer-state-dict"]], "Zeroing out gradients in PyTorch": [[244, "zeroing-out-gradients-in-pytorch"]], "2. Load and normalize the dataset": [[244, "load-and-normalize-the-dataset"]], "3. Build the neural network": [[244, "build-the-neural-network"]], "4. Define a Loss function and optimizer": [[244, "define-a-loss-function-and-optimizer"]], "5. Zero the gradients while training the network": [[244, "zero-the-gradients-while-training-the-network"]], "Reducing torch.compile cold start compilation time with regional compilation": [[245, "reducing-torch-compile-cold-start-compilation-time-with-regional-compilation"]], "Script and Optimize for Mobile Recipe": [[246, "script-and-optimize-for-mobile-recipe"]], "Intel\u00ae Extension for PyTorch* Backend on Intel\u00ae CPUs": [[248, "intel-extension-for-pytorch-backend-on-intel-cpus"]], "Usage Example": [[248, "usage-example"]], "Train FP32": [[248, "train-fp32"]], "Train BF16": [[248, "train-bf16"]], "Inference FP32": [[248, "inference-fp32"]], "Inference BF16": [[248, "inference-bf16"]], "Compile Time Caching Configuration": [[249, "compile-time-caching-configuration"]], "Inductor Cache Settings": [[249, "inductor-cache-settings"]], "TORCHINDUCTOR_FX_GRAPH_CACHE": [[249, "torchinductor-fx-graph-cache"]], "TORCHINDUCTOR_AUTOGRAD_CACHE": [[249, "torchinductor-autograd-cache"]], "TORCHINDUCTOR_CACHE_DIR": [[249, "torchinductor-cache-dir"]], "TORCHINDUCTOR_FX_GRAPH_REMOTE_CACHE": [[249, "torchinductor-fx-graph-remote-cache"]], "TORCHINDUCTOR_AUTOGRAD_REMOTE_CACHE": [[249, "torchinductor-autograd-remote-cache"]], "TORCHINDUCTOR_AUTOTUNE_REMOTE_CACHE": [[249, "torchinductor-autotune-remote-cache"]], "TORCHINDUCTOR_FORCE_DISABLE_CACHES": [[249, "torchinductor-force-disable-caches"]], "Compile Time Caching in torch.compile": [[250, "compile-time-caching-in-torch-compile"]], "Caching Offerings": [[250, "caching-offerings"]], "torch.compile end-to-end caching (Mega-Cache)": [[250, "torch-compile-end-to-end-caching-mega-cache"]], "Modular caching of TorchDynamo, TorchInductor, and Triton": [[250, "modular-caching-of-torchdynamo-torchinductor-and-triton"]], "Remote Caching": [[250, "remote-caching"]], "(beta) Utilizing Torch Function modes with torch.compile": [[251, "beta-utilizing-torch-function-modes-with-torch-compile"]], "Rewriting a torch op (torch.add -> torch.mul)": [[251, "rewriting-a-torch-op-torch-add-torch-mul"]], "Using User-Defined Triton Kernels with torch.compile": [[252, "using-user-defined-triton-kernels-with-torch-compile"]], "Advanced Usage": [[252, "advanced-usage"]], "Composability": [[252, "composability"]], "Wrapping Triton kernels with triton_op": [[252, "wrapping-triton-kernels-with-triton-op"]], "Adding training support": [[252, "adding-training-support"]], "Adding a CPU Fallback": [[252, "adding-a-cpu-fallback"]], "Adding a FlopCounter Formula": [[252, "adding-a-flopcounter-formula"]], "Limitations": [[252, "limitations"]], "Dynamic Compilation Control with torch.compiler.set_stance": [[253, "dynamic-compilation-control-with-torch-compiler-set-stance"]], "Description": [[253, "description"]], "Preventing recompilation": [[253, "preventing-recompilation"]], "Measuring performance gains": [[253, "measuring-performance-gains"]], "Crashing sooner": [[253, "crashing-sooner"]], "torch.export AOTInductor Tutorial for Python runtime (Beta)": [[254, "torch-export-aotinductor-tutorial-for-python-runtime-beta"]], "Model Compilation": [[254, "model-compilation"]], "Model Inference in Python": [[254, "model-inference-in-python"]], "When to use AOTInductor with a Python Runtime": [[254, "when-to-use-aotinductor-with-a-python-runtime"]], "Demonstration of torch.export flow, common challenges and the solutions to address them": [[255, "demonstration-of-torch-export-flow-common-challenges-and-the-solutions-to-address-them"]], "Key requirement for torch.export: No graph break": [[255, "key-requirement-for-torch-export-no-graph-break"]], "Video Classification": [[255, "video-classification"]], "Error: Static batch size": [[255, "error-static-batch-size"]], "Solution": [[255, "solution"], [255, "id1"], [255, "id2"], [255, "id3"]], "Automatic Speech Recognition": [[255, "automatic-speech-recognition"]], "Error: strict tracing with TorchDynamo": [[255, "error-strict-tracing-with-torchdynamo"]], "Image Captioning": [[255, "image-captioning"]], "Error: Cannot mutate tensors with frozen storage": [[255, "error-cannot-mutate-tensors-with-frozen-storage"]], "Promptable Image Segmentation": [[255, "promptable-image-segmentation"]], "Error: Model is not of type torch.nn.Module": [[255, "error-model-is-not-of-type-torch-nn-module"]], "(beta) Using TORCH_LOGS python API with torch.compile": [[256, "beta-using-torch-logs-python-api-with-torch-compile"]], "Optimizing CPU Performance on Intel\u00ae Xeon\u00ae with run_cpu Script": [[258, "optimizing-cpu-performance-on-intel-xeon-with-run-cpu-script"]], "What You Will Learn": [[258, "what-you-will-learn"]], "Introduction of the Optimizations": [[258, "introduction-of-the-optimizations"]], "Applying NUMA Access Control": [[258, "applying-numa-access-control"]], "Using Intel\u00ae OpenMP Runtime Library": [[258, "using-intel-openmp-runtime-library"]], "Choosing an Optimized Memory Allocator": [[258, "choosing-an-optimized-memory-allocator"]], "Quick Start Example Commands": [[258, "quick-start-example-commands"]], "Using torch.backends.xeon.run_cpu": [[258, "using-torch-backends-xeon-run-cpu"]], "Explanation of the options": [[258, "explanation-of-the-options"]], "Shard Optimizer States with ZeroRedundancyOptimizer": [[259, "shard-optimizer-states-with-zeroredundancyoptimizer"]], "What is ZeroRedundancyOptimizer?": [[259, "what-is-zeroredundancyoptimizer"]], "How to use ZeroRedundancyOptimizer?": [[259, "how-to-use-zeroredundancyoptimizer"]], "Recipes": [[260, "recipes"]], "(prototype) PyTorch BackendConfig Tutorial": [[262, "prototype-pytorch-backendconfig-tutorial"]], "1. Derive reference pattern for each quantized operator": [[262, "derive-reference-pattern-for-each-quantized-operator"]], "2. Set DTypeConfigs with backend constraints": [[262, "set-dtypeconfigs-with-backend-constraints"]], "3. Set up fusion for conv-relu": [[262, "set-up-fusion-for-conv-relu"]], "4. Define the BackendConfig": [[262, "define-the-backendconfig"]], "5. Set up QConfigMapping that satisfies the backend constraints": [[262, "set-up-qconfigmapping-that-satisfies-the-backend-constraints"]], "6. Quantize the model through prepare and convert": [[262, "quantize-the-model-through-prepare-and-convert"]], "(7. Experiment with faulty BackendConfig setups)": [[262, "experiment-with-faulty-backendconfig-setups"]], "Built-in BackendConfigs": [[262, "built-in-backendconfigs"]], "Introduction to Context Parallel": [[263, "introduction-to-context-parallel"]], "Enable Context Parallel": [[263, "enable-context-parallel"]], "Select Rotation Approach": [[263, "select-rotation-approach"]], "Flight Recorder for Debugging Stuck Jobs": [[265, "flight-recorder-for-debugging-stuck-jobs"]], "Enabling Flight Recorder": [[265, "enabling-flight-recorder"]], "Additional Settings": [[265, "additional-settings"]], "Retrieving Flight Recorder Data via an API": [[265, "retrieving-flight-recorder-data-via-an-api"]], "Flight Recorder File Formats": [[265, "flight-recorder-file-formats"]], "Analyzing Flight Recorder Dumps": [[265, "analyzing-flight-recorder-dumps"]], "An End-to-End Example": [[265, "an-end-to-end-example"]], "(prototype) Accelerating torch.save and torch.load with GPUDirect Storage": [[266, "prototype-accelerating-torch-save-and-torch-load-with-gpudirect-storage"]], "Using GPUDirect Storage with torch.save and torch.load": [[266, "using-gpudirect-storage-with-torch-save-and-torch-load"]], "(prototype) GPU Quantization with TorchAO": [[267, "prototype-gpu-quantization-with-torchao"]], "Set up Your Environment": [[267, "set-up-your-environment"]], "Inductor C++ Wrapper Tutorial": [[268, "inductor-c-wrapper-tutorial"]], "Prerequisites:": [[268, "prerequisites"], [278, "prerequisites"]], "Enabling the API": [[268, "enabling-the-api"]], "Example code": [[268, "example-code"]], "How to use torch.compile on Windows CPU/XPU": [[269, "how-to-use-torch-compile-on-windows-cpu-xpu"]], "Software Installation": [[269, "software-installation"]], "Install a Compiler": [[269, "install-a-compiler"]], "Set Up Environment": [[269, "set-up-environment"]], "Alternative Compiler for better performance on CPU": [[269, "id1"]], "Intel Compiler": [[269, "id2"]], "LLVM Compiler": [[269, "id4"]], "(Prototype) Convert Mobilenetv2 to Core ML": [[271, "prototype-convert-mobilenetv2-to-core-ml"]], "(Prototype) Use iOS GPU in PyTorch": [[272, "prototype-use-ios-gpu-in-pytorch"]], "(Prototype) Introduce lite interpreter workflow in Android and iOS": [[273, "prototype-introduce-lite-interpreter-workflow-in-android-and-ios"]], "Efficiently writing \u201csparse\u201d semantics for Adagrad with MaskedTensor": [[274, "efficiently-writing-sparse-semantics-for-adagrad-with-maskedtensor"]], "Introduction and Motivation": [[274, "introduction-and-motivation"]], "Preparation": [[274, "preparation"], [275, "preparation"], [276, "preparation"]], "Simpler Code with MaskedTensor": [[274, "simpler-code-with-maskedtensor"]], "Original Sparse Implementation": [[274, "original-sparse-implementation"]], "MaskedTensor Sparse Implementation": [[274, "maskedtensor-sparse-implementation"]], "MaskedTensor Advanced Semantics": [[275, "maskedtensor-advanced-semantics"]], "MaskedTensor vs NumPy\u2019s MaskedArray": [[275, "maskedtensor-vs-numpy-s-maskedarray"]], "Reduction Semantics": [[275, "reduction-semantics"]], "MaskedTensor Overview": [[276, "maskedtensor-overview"]], "Using MaskedTensor": [[276, "using-maskedtensor"]], "Construction": [[276, "construction"]], "Accessing the data and mask": [[276, "accessing-the-data-and-mask"]], "Indexing and slicing": [[276, "indexing-and-slicing"]], "Why is MaskedTensor useful?": [[276, "why-is-maskedtensor-useful"]], "Distinguishing between 0 and NaN gradient": [[276, "distinguishing-between-0-and-nan-gradient"]], "torch.where": [[276, "torch-where"]], "Another torch.where": [[276, "another-torch-where"]], "When using mask, x/0 yields NaN grad": [[276, "when-using-mask-x-0-yields-nan-grad"]], "torch.nansum() and torch.nanmean()": [[276, "torch-nansum-and-torch-nanmean"]], "Safe Softmax": [[276, "safe-softmax"]], "Implementing missing torch.nan* operators": [[276, "implementing-missing-torch-nan-operators"]], "MaskedTensor Sparsity": [[277, "maskedtensor-sparsity"]], "Principles": [[277, "principles"]], "Sparse COO tensors": [[277, "sparse-coo-tensors"]], "Sparse CSR tensors": [[277, "sparse-csr-tensors"]], "Supported Operations": [[277, "supported-operations"]], "Unary": [[277, "unary"]], "Binary": [[277, "binary"]], "Reductions": [[277, "reductions"]], "MaskedTensor Helper Methods": [[277, "maskedtensor-helper-methods"]], "Appendix": [[277, "appendix"]], "Sparse COO Construction": [[277, "sparse-coo-construction"]], "Sparse CSR Construction": [[277, "sparse-csr-construction"]], "Using Max-Autotune Compilation on CPU for Better Performance": [[278, "using-max-autotune-compilation-on-cpu-for-better-performance"]], "Activating the max-autotune mode": [[278, "activating-the-max-autotune-mode"]], "Example": [[278, "example"]], "Getting Started with Nested Tensors": [[279, "getting-started-with-nested-tensors"]], "Nested tensor initialization": [[279, "nested-tensor-initialization"]], "Nested Tensor Operations": [[279, "nested-tensor-operations"]], "Why Nested Tensor": [[279, "why-nested-tensor"]], "(Beta) Convert MobileNetV2 to NNAPI": [[280, "beta-convert-mobilenetv2-to-nnapi"]], "PyTorch 2 Export Quantization for OpenVINO torch.compile Backend": [[281, "pytorch-2-export-quantization-for-openvino-torch-compile-backend"]], "Post Training Quantization": [[281, "post-training-quantization"]], "Prerequisite: OpenVINO and NNCF installation": [[281, "prerequisite-openvino-and-nncf-installation"]], "1. Capture FX Graph": [[281, "capture-fx-graph"]], "2. Apply Quantization": [[281, "apply-quantization"]], "3. Lower into OpenVINO representation": [[281, "lower-into-openvino-representation"]], "4. Optional: Improve quantized model metrics": [[281, "optional-improve-quantized-model-metrics"]], "Autoloading Out-of-Tree Extension": [[282, "autoloading-out-of-tree-extension"]], "How to apply this mechanism to out-of-tree extensions?": [[282, "how-to-apply-this-mechanism-to-out-of-tree-extensions"]], "How it works": [[282, "how-it-works"]], "(prototype) Accelerating BERT with semi-structured (2:4) sparsity": [[283, "prototype-accelerating-bert-with-semi-structured-2-4-sparsity"]], "results": [[283, "id1"]], "Skipping Module Parameter Initialization": [[285, "skipping-module-parameter-initialization"]], "Skipping Initialization": [[285, "skipping-initialization"]], "Updating Modules to Support Skipping Initialization": [[285, "updating-modules-to-support-skipping-initialization"]], "Implementation Details": [[285, "implementation-details"]], "(prototype) Tracing-based Selective Build Mobile Interpreter in Android and iOS": [[286, "prototype-tracing-based-selective-build-mobile-interpreter-in-android-and-ios"]], "torch.vmap": [[287, "torch-vmap"]], "So, what is vmap?": [[287, "so-what-is-vmap"]], "PyTorch Vulkan Backend User Workflow": [[288, "pytorch-vulkan-backend-user-workflow"]], "Building PyTorch with Vulkan backend": [[288, "building-pytorch-with-vulkan-backend"]], "Optional usage of vulkan wrapper": [[288, "optional-usage-of-vulkan-wrapper"]], "Desktop build": [[288, "desktop-build"]], "Vulkan SDK": [[288, "vulkan-sdk"]], "Android build": [[288, "android-build"]], "Model preparation": [[288, "model-preparation"]], "Using Vulkan backend in code": [[288, "using-vulkan-backend-in-code"]], "C++ API": [[288, "c-api"]], "Python API": [[288, "python-api"]], "Android Java API": [[288, "android-java-api"]], "Building android test app with Vulkan": [[288, "building-android-test-app-with-vulkan"]], "Testing models without uploading to android device": [[288, "testing-models-without-uploading-to-android-device"]], "Unstable": [[289, "unstable"]]}, "indexentries": {}})