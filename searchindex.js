Search.setIndex({"docnames": ["advanced/ONNXLive", "advanced/coding_ddpg", "advanced/cpp_autograd", "advanced/cpp_cuda_graphs", "advanced/cpp_custom_ops", "advanced/cpp_custom_ops_sycl", "advanced/cpp_export", "advanced/cpp_frontend", "advanced/custom_class_pt2", "advanced/custom_classes", "advanced/custom_ops_landing_page", "advanced/ddp_pipeline", "advanced/dispatcher", "advanced/extend_dispatcher", "advanced/generic_join", "advanced/neural_style_tutorial", "advanced/numpy_extensions_tutorial", "advanced/pendulum", "advanced/privateuseone", "advanced/python_custom_ops", "advanced/rpc_ddp_tutorial", "advanced/semi_structured_sparse", "advanced/sg_execution_times", "advanced/sharding", "advanced/static_quantization_tutorial", "advanced/torch-script-parallelism", "advanced/torch_script_custom_ops", "advanced/usb_semisup_learn", "beginner/audio_data_augmentation_tutorial", "beginner/audio_datasets_tutorial", "beginner/audio_feature_augmentation_tutorial", "beginner/audio_feature_extractions_tutorial", "beginner/audio_io_tutorial", "beginner/audio_resampling_tutorial", "beginner/basics/autogradqs_tutorial", "beginner/basics/buildmodel_tutorial", "beginner/basics/data_tutorial", "beginner/basics/index", "beginner/basics/intro", "beginner/basics/optimization_tutorial", "beginner/basics/quickstart_tutorial", "beginner/basics/saveloadrun_tutorial", "beginner/basics/sg_execution_times", "beginner/basics/tensorqs_tutorial", "beginner/basics/transforms_tutorial", "beginner/bettertransformer_tutorial", "beginner/blitz/autograd_tutorial", "beginner/blitz/cifar10_tutorial", "beginner/blitz/data_parallel_tutorial", "beginner/blitz/index", "beginner/blitz/neural_networks_tutorial", "beginner/blitz/sg_execution_times", "beginner/blitz/tensor_tutorial", "beginner/chatbot_tutorial", "beginner/colab", "beginner/data_loading_tutorial", "beginner/dcgan_faces_tutorial", "beginner/ddp_series_fault_tolerance", "beginner/ddp_series_intro", "beginner/ddp_series_multigpu", "beginner/ddp_series_theory", "beginner/deep_learning_60min_blitz", "beginner/deeplabv3_on_android", "beginner/deeplabv3_on_ios", "beginner/dist_overview", "beginner/examples_autograd/index", "beginner/examples_autograd/polynomial_autograd", "beginner/examples_autograd/polynomial_custom_function", "beginner/examples_autograd/sg_execution_times", "beginner/examples_nn/dynamic_net", "beginner/examples_nn/index", "beginner/examples_nn/polynomial_module", "beginner/examples_nn/polynomial_nn", "beginner/examples_nn/polynomial_optim", "beginner/examples_nn/sg_execution_times", "beginner/examples_tensor/index", "beginner/examples_tensor/polynomial_numpy", "beginner/examples_tensor/polynomial_tensor", "beginner/examples_tensor/sg_execution_times", "beginner/fgsm_tutorial", "beginner/finetuning_torchvision_models_tutorial", "beginner/former_torchies/autograd_tutorial_old", "beginner/former_torchies/nnft_tutorial", "beginner/former_torchies/parallelism_tutorial", "beginner/former_torchies/tensor_tutorial_old", "beginner/former_torchies_tutorial", "beginner/hta_intro_tutorial", "beginner/hta_trace_diff_tutorial", "beginner/hybrid_frontend/index", "beginner/hybrid_frontend/learning_hybrid_frontend_through_example_tutorial", "beginner/hybrid_frontend/sg_execution_times", "beginner/hybrid_frontend_tutorial", "beginner/hyperparameter_tuning_tutorial", "beginner/introyt", "beginner/introyt/autogradyt_tutorial", "beginner/introyt/captumyt", "beginner/introyt/index", "beginner/introyt/introyt1_tutorial", "beginner/introyt/introyt_index", "beginner/introyt/modelsyt_tutorial", "beginner/introyt/sg_execution_times", "beginner/introyt/tensorboardyt_tutorial", "beginner/introyt/tensors_deeper_tutorial", "beginner/introyt/trainingyt", "beginner/knowledge_distillation_tutorial", "beginner/nlp/advanced_tutorial", "beginner/nlp/deep_learning_tutorial", "beginner/nlp/index", "beginner/nlp/pytorch_tutorial", "beginner/nlp/sequence_models_tutorial", "beginner/nlp/sg_execution_times", "beginner/nlp/word_embeddings_tutorial", "beginner/nn_tutorial", "beginner/onnx/export_control_flow_model_to_onnx_tutorial", "beginner/onnx/export_simple_model_to_onnx_tutorial", "beginner/onnx/index", "beginner/onnx/intro_onnx", "beginner/onnx/onnx_registry_tutorial", "beginner/onnx/sg_execution_times", "beginner/profiler", "beginner/pytorch_with_examples", "beginner/saving_loading_models", "beginner/sg_execution_times", "beginner/t5_tutoria", "beginner/template_tutorial", "beginner/text_sentiment_ngrams_tutorial", "beginner/torchtext_custom_dataset_tutorial", "beginner/transfer_learning_tutorial", "beginner/transformer_tutorial", "beginner/translation_transformer", "beginner/understanding_leaf_vs_nonleaf_tutorial", "compilers_index", "deep-dive", "distributed", "domains", "ecosystem", "extension", "index", "intermediate/FSDP1_tutorial", "intermediate/FSDP_advanced_tutorial", "intermediate/FSDP_tutorial", "intermediate/TCPStore_libuv_backend", "intermediate/TP_tutorial", "intermediate/autograd_saved_tensors_hooks_tutorial", "intermediate/ax_multiobjective_nas_tutorial", "intermediate/char_rnn_classification_tutorial", "intermediate/char_rnn_generation_tutorial", "intermediate/compiled_autograd_tutorial", "intermediate/custom_function_conv_bn_tutorial", "intermediate/custom_function_double_backward_tutorial", "intermediate/ddp_series_minGPT", "intermediate/ddp_series_multinode", "intermediate/ddp_tutorial", "intermediate/dist_pipeline_parallel_tutorial", "intermediate/dist_tuto", "intermediate/dqn_with_rnn_tutorial", "intermediate/ensembling", "intermediate/forced_alignment_with_torchaudio_tutorial", "intermediate/forward_ad_usage", "intermediate/fx_profiling_tutorial", "intermediate/inductor_debug_cpu", "intermediate/jacobians_hessians", "intermediate/mario_rl_tutorial", "intermediate/memory_format_tutorial", "intermediate/mnist_train_nas", "intermediate/model_parallel_tutorial", "intermediate/neural_tangent_kernels", "intermediate/nlp_from_scratch_index", "intermediate/nvfuser_intro_tutorial", "intermediate/optimizer_step_in_backward_tutorial", "intermediate/parametrizations", "intermediate/per_sample_grads", "intermediate/pinmem_nonblock", "intermediate/pipeline_tutorial", "intermediate/pipelining_tutorial", "intermediate/process_group_cpp_extension_tutorial", "intermediate/pruning_tutorial", "intermediate/realtime_rpi", "intermediate/reinforcement_ppo", "intermediate/reinforcement_q_learning", "intermediate/rpc_async_execution", "intermediate/rpc_param_server_tutorial", "intermediate/rpc_tutorial", "intermediate/scaled_dot_product_attention_tutorial", "intermediate/seq2seq_translation_tutorial", "intermediate/sg_execution_times", "intermediate/spatial_transformer_tutorial", "intermediate/speech_recognition_pipeline_tutorial", "intermediate/tensorboard_profiler_tutorial", "intermediate/tensorboard_tutorial", "intermediate/text_to_speech_with_torchaudio", "intermediate/tiatoolbox_tutorial", "intermediate/torch_compile_conv_bn_fuser", "intermediate/torch_compile_tutorial", "intermediate/torch_export_nightly_tutorial", "intermediate/torch_export_tutorial", "intermediate/torchrec_intro_tutorial", "intermediate/torchrec_tutorial", "intermediate/torchvision_tutorial", "intermediate/transformer_building_blocks", "intermediate/visualizing_gradients_tutorial", "intro", "recipes/amx", "recipes/android_native_app_with_custom_op", "recipes/compiling_optimizer", "recipes/compiling_optimizer_lr_scheduler", "recipes/distributed_async_checkpoint_recipe", "recipes/distributed_checkpoint_recipe", "recipes/distributed_comm_debug_mode", "recipes/distributed_device_mesh", "recipes/distributed_optim_torchscript", "recipes/distributed_rpc_profiling", "recipes/foreach_map", "recipes/inference_tuning_on_aws_graviton", "recipes/intel_extension_for_pytorch", "recipes/intel_neural_compressor_for_pytorch", "recipes/loading_data_recipe", "recipes/mobile_interpreter", "recipes/mobile_perf", "recipes/model_preparation_android", "recipes/model_preparation_ios", "recipes/profile_with_itt", "recipes/ptmobile_recipes_summary", "recipes/recipes/Captum_Recipe", "recipes/recipes/amp_recipe", "recipes/recipes/benchmark", "recipes/recipes/changing_default_device", "recipes/recipes/defining_a_neural_network", "recipes/recipes/index", "recipes/recipes/module_load_state_dict_tips", "recipes/recipes/profiler_recipe", "recipes/recipes/reasoning_about_shapes", "recipes/recipes/save_load_across_devices", "recipes/recipes/saving_and_loading_a_general_checkpoint", "recipes/recipes/saving_and_loading_models_for_inference", "recipes/recipes/saving_multiple_models_in_one_file", "recipes/recipes/sg_execution_times", "recipes/recipes/swap_tensors", "recipes/recipes/tensorboard_with_pytorch", "recipes/recipes/timer_quick_start", "recipes/recipes/tuning_guide", "recipes/recipes/warmstarting_model_using_parameters_from_a_different_model", "recipes/recipes/what_is_state_dict", "recipes/recipes/zeroing_out_gradients", "recipes/regional_aot", "recipes/regional_compilation", "recipes/script_optimized", "recipes/sg_execution_times", "recipes/torch_compile_backend_ipex", "recipes/torch_compile_caching_configuration_tutorial", "recipes/torch_compile_caching_tutorial", "recipes/torch_compile_torch_function_modes", "recipes/torch_compile_user_defined_triton_kernel_tutorial", "recipes/torch_compiler_set_stance_tutorial", "recipes/torch_export_aoti_python", "recipes/torch_export_challenges_solutions", "recipes/torch_logs", "recipes/torchscript_inference", "recipes/xeon_run_cpu", "recipes/zero_redundancy_optimizer", "recipes_index", "sg_execution_times", "unstable/backend_config_tutorial", "unstable/context_parallel", "unstable/distributed_rpc_profiling", "unstable/flight_recorder_tutorial", "unstable/gpu_direct_storage", "unstable/gpu_quantization_torchao_tutorial", "unstable/inductor_cpp_wrapper_tutorial", "unstable/inductor_windows", "unstable/inductor_windows_cpu", "unstable/ios_coreml_workflow", "unstable/ios_gpu_workflow", "unstable/lite_interpreter", "unstable/maskedtensor_adagrad", "unstable/maskedtensor_advanced_semantics", "unstable/maskedtensor_overview", "unstable/maskedtensor_sparsity", "unstable/max_autotune_on_CPU_tutorial", "unstable/nestedtensor", "unstable/nnapi_mobilenetv2", "unstable/openvino_quantizer", "unstable/python_extension_autoload", "unstable/semi_structured_sparse", "unstable/sg_execution_times", "unstable/tracing_based_selective_build", "unstable/vmap_recipe", "unstable_index"], "filenames": ["advanced/ONNXLive.rst", "advanced/coding_ddpg.rst", "advanced/cpp_autograd.rst", "advanced/cpp_cuda_graphs.rst", "advanced/cpp_custom_ops.rst", "advanced/cpp_custom_ops_sycl.rst", "advanced/cpp_export.rst", "advanced/cpp_frontend.rst", "advanced/custom_class_pt2.rst", "advanced/custom_classes.rst", "advanced/custom_ops_landing_page.rst", "advanced/ddp_pipeline.rst", "advanced/dispatcher.rst", "advanced/extend_dispatcher.rst", "advanced/generic_join.rst", "advanced/neural_style_tutorial.rst", "advanced/numpy_extensions_tutorial.rst", "advanced/pendulum.rst", "advanced/privateuseone.rst", "advanced/python_custom_ops.rst", "advanced/rpc_ddp_tutorial.rst", "advanced/semi_structured_sparse.rst", "advanced/sg_execution_times.rst", "advanced/sharding.rst", "advanced/static_quantization_tutorial.rst", "advanced/torch-script-parallelism.rst", "advanced/torch_script_custom_ops.rst", "advanced/usb_semisup_learn.rst", "beginner/audio_data_augmentation_tutorial.rst", "beginner/audio_datasets_tutorial.rst", "beginner/audio_feature_augmentation_tutorial.rst", "beginner/audio_feature_extractions_tutorial.rst", "beginner/audio_io_tutorial.rst", "beginner/audio_resampling_tutorial.rst", "beginner/basics/autogradqs_tutorial.rst", "beginner/basics/buildmodel_tutorial.rst", "beginner/basics/data_tutorial.rst", "beginner/basics/index.rst", "beginner/basics/intro.rst", "beginner/basics/optimization_tutorial.rst", "beginner/basics/quickstart_tutorial.rst", "beginner/basics/saveloadrun_tutorial.rst", "beginner/basics/sg_execution_times.rst", "beginner/basics/tensorqs_tutorial.rst", "beginner/basics/transforms_tutorial.rst", "beginner/bettertransformer_tutorial.rst", "beginner/blitz/autograd_tutorial.rst", "beginner/blitz/cifar10_tutorial.rst", "beginner/blitz/data_parallel_tutorial.rst", "beginner/blitz/index.rst", "beginner/blitz/neural_networks_tutorial.rst", "beginner/blitz/sg_execution_times.rst", "beginner/blitz/tensor_tutorial.rst", "beginner/chatbot_tutorial.rst", "beginner/colab.rst", "beginner/data_loading_tutorial.rst", "beginner/dcgan_faces_tutorial.rst", "beginner/ddp_series_fault_tolerance.rst", "beginner/ddp_series_intro.rst", "beginner/ddp_series_multigpu.rst", "beginner/ddp_series_theory.rst", "beginner/deep_learning_60min_blitz.rst", "beginner/deeplabv3_on_android.rst", "beginner/deeplabv3_on_ios.rst", "beginner/dist_overview.rst", "beginner/examples_autograd/index.rst", "beginner/examples_autograd/polynomial_autograd.rst", "beginner/examples_autograd/polynomial_custom_function.rst", "beginner/examples_autograd/sg_execution_times.rst", "beginner/examples_nn/dynamic_net.rst", "beginner/examples_nn/index.rst", "beginner/examples_nn/polynomial_module.rst", "beginner/examples_nn/polynomial_nn.rst", "beginner/examples_nn/polynomial_optim.rst", "beginner/examples_nn/sg_execution_times.rst", "beginner/examples_tensor/index.rst", "beginner/examples_tensor/polynomial_numpy.rst", "beginner/examples_tensor/polynomial_tensor.rst", "beginner/examples_tensor/sg_execution_times.rst", "beginner/fgsm_tutorial.rst", "beginner/finetuning_torchvision_models_tutorial.rst", "beginner/former_torchies/autograd_tutorial_old.rst", "beginner/former_torchies/nnft_tutorial.rst", "beginner/former_torchies/parallelism_tutorial.rst", "beginner/former_torchies/tensor_tutorial_old.rst", "beginner/former_torchies_tutorial.rst", "beginner/hta_intro_tutorial.rst", "beginner/hta_trace_diff_tutorial.rst", "beginner/hybrid_frontend/index.rst", "beginner/hybrid_frontend/learning_hybrid_frontend_through_example_tutorial.rst", "beginner/hybrid_frontend/sg_execution_times.rst", "beginner/hybrid_frontend_tutorial.rst", "beginner/hyperparameter_tuning_tutorial.rst", "beginner/introyt.rst", "beginner/introyt/autogradyt_tutorial.rst", "beginner/introyt/captumyt.rst", "beginner/introyt/index.rst", "beginner/introyt/introyt1_tutorial.rst", "beginner/introyt/introyt_index.rst", "beginner/introyt/modelsyt_tutorial.rst", "beginner/introyt/sg_execution_times.rst", "beginner/introyt/tensorboardyt_tutorial.rst", "beginner/introyt/tensors_deeper_tutorial.rst", "beginner/introyt/trainingyt.rst", "beginner/knowledge_distillation_tutorial.rst", "beginner/nlp/advanced_tutorial.rst", "beginner/nlp/deep_learning_tutorial.rst", "beginner/nlp/index.rst", "beginner/nlp/pytorch_tutorial.rst", "beginner/nlp/sequence_models_tutorial.rst", "beginner/nlp/sg_execution_times.rst", "beginner/nlp/word_embeddings_tutorial.rst", "beginner/nn_tutorial.rst", "beginner/onnx/export_control_flow_model_to_onnx_tutorial.rst", "beginner/onnx/export_simple_model_to_onnx_tutorial.rst", "beginner/onnx/index.rst", "beginner/onnx/intro_onnx.rst", "beginner/onnx/onnx_registry_tutorial.rst", "beginner/onnx/sg_execution_times.rst", "beginner/profiler.rst", "beginner/pytorch_with_examples.rst", "beginner/saving_loading_models.rst", "beginner/sg_execution_times.rst", "beginner/t5_tutoria.rst", "beginner/template_tutorial.rst", "beginner/text_sentiment_ngrams_tutorial.rst", "beginner/torchtext_custom_dataset_tutorial.rst", "beginner/transfer_learning_tutorial.rst", "beginner/transformer_tutorial.rst", "beginner/translation_transformer.rst", "beginner/understanding_leaf_vs_nonleaf_tutorial.rst", "compilers_index.rst", "deep-dive.rst", "distributed.rst", "domains.rst", "ecosystem.rst", "extension.rst", "index.rst", "intermediate/FSDP1_tutorial.rst", "intermediate/FSDP_advanced_tutorial.rst", "intermediate/FSDP_tutorial.rst", "intermediate/TCPStore_libuv_backend.rst", "intermediate/TP_tutorial.rst", "intermediate/autograd_saved_tensors_hooks_tutorial.rst", "intermediate/ax_multiobjective_nas_tutorial.rst", "intermediate/char_rnn_classification_tutorial.rst", "intermediate/char_rnn_generation_tutorial.rst", "intermediate/compiled_autograd_tutorial.rst", "intermediate/custom_function_conv_bn_tutorial.rst", "intermediate/custom_function_double_backward_tutorial.rst", "intermediate/ddp_series_minGPT.rst", "intermediate/ddp_series_multinode.rst", "intermediate/ddp_tutorial.rst", "intermediate/dist_pipeline_parallel_tutorial.rst", "intermediate/dist_tuto.rst", "intermediate/dqn_with_rnn_tutorial.rst", "intermediate/ensembling.rst", "intermediate/forced_alignment_with_torchaudio_tutorial.rst", "intermediate/forward_ad_usage.rst", "intermediate/fx_profiling_tutorial.rst", "intermediate/inductor_debug_cpu.rst", "intermediate/jacobians_hessians.rst", "intermediate/mario_rl_tutorial.rst", "intermediate/memory_format_tutorial.rst", "intermediate/mnist_train_nas.rst", "intermediate/model_parallel_tutorial.rst", "intermediate/neural_tangent_kernels.rst", "intermediate/nlp_from_scratch_index.rst", "intermediate/nvfuser_intro_tutorial.rst", "intermediate/optimizer_step_in_backward_tutorial.rst", "intermediate/parametrizations.rst", "intermediate/per_sample_grads.rst", "intermediate/pinmem_nonblock.rst", "intermediate/pipeline_tutorial.rst", "intermediate/pipelining_tutorial.rst", "intermediate/process_group_cpp_extension_tutorial.rst", "intermediate/pruning_tutorial.rst", "intermediate/realtime_rpi.rst", "intermediate/reinforcement_ppo.rst", "intermediate/reinforcement_q_learning.rst", "intermediate/rpc_async_execution.rst", "intermediate/rpc_param_server_tutorial.rst", "intermediate/rpc_tutorial.rst", "intermediate/scaled_dot_product_attention_tutorial.rst", "intermediate/seq2seq_translation_tutorial.rst", "intermediate/sg_execution_times.rst", "intermediate/spatial_transformer_tutorial.rst", "intermediate/speech_recognition_pipeline_tutorial.rst", "intermediate/tensorboard_profiler_tutorial.rst", "intermediate/tensorboard_tutorial.rst", "intermediate/text_to_speech_with_torchaudio.rst", "intermediate/tiatoolbox_tutorial.rst", "intermediate/torch_compile_conv_bn_fuser.rst", "intermediate/torch_compile_tutorial.rst", "intermediate/torch_export_nightly_tutorial.rst", "intermediate/torch_export_tutorial.rst", "intermediate/torchrec_intro_tutorial.rst", "intermediate/torchrec_tutorial.rst", "intermediate/torchvision_tutorial.rst", "intermediate/transformer_building_blocks.rst", "intermediate/visualizing_gradients_tutorial.rst", "intro.rst", "recipes/amx.rst", "recipes/android_native_app_with_custom_op.rst", "recipes/compiling_optimizer.rst", "recipes/compiling_optimizer_lr_scheduler.rst", "recipes/distributed_async_checkpoint_recipe.rst", "recipes/distributed_checkpoint_recipe.rst", "recipes/distributed_comm_debug_mode.rst", "recipes/distributed_device_mesh.rst", "recipes/distributed_optim_torchscript.rst", "recipes/distributed_rpc_profiling.rst", "recipes/foreach_map.rst", "recipes/inference_tuning_on_aws_graviton.rst", "recipes/intel_extension_for_pytorch.rst", "recipes/intel_neural_compressor_for_pytorch.rst", "recipes/loading_data_recipe.rst", "recipes/mobile_interpreter.rst", "recipes/mobile_perf.rst", "recipes/model_preparation_android.rst", "recipes/model_preparation_ios.rst", "recipes/profile_with_itt.rst", "recipes/ptmobile_recipes_summary.rst", "recipes/recipes/Captum_Recipe.rst", "recipes/recipes/amp_recipe.rst", "recipes/recipes/benchmark.rst", "recipes/recipes/changing_default_device.rst", "recipes/recipes/defining_a_neural_network.rst", "recipes/recipes/index.rst", "recipes/recipes/module_load_state_dict_tips.rst", "recipes/recipes/profiler_recipe.rst", "recipes/recipes/reasoning_about_shapes.rst", "recipes/recipes/save_load_across_devices.rst", "recipes/recipes/saving_and_loading_a_general_checkpoint.rst", "recipes/recipes/saving_and_loading_models_for_inference.rst", "recipes/recipes/saving_multiple_models_in_one_file.rst", "recipes/recipes/sg_execution_times.rst", "recipes/recipes/swap_tensors.rst", "recipes/recipes/tensorboard_with_pytorch.rst", "recipes/recipes/timer_quick_start.rst", "recipes/recipes/tuning_guide.rst", "recipes/recipes/warmstarting_model_using_parameters_from_a_different_model.rst", "recipes/recipes/what_is_state_dict.rst", "recipes/recipes/zeroing_out_gradients.rst", "recipes/regional_aot.rst", "recipes/regional_compilation.rst", "recipes/script_optimized.rst", "recipes/sg_execution_times.rst", "recipes/torch_compile_backend_ipex.rst", "recipes/torch_compile_caching_configuration_tutorial.rst", "recipes/torch_compile_caching_tutorial.rst", "recipes/torch_compile_torch_function_modes.rst", "recipes/torch_compile_user_defined_triton_kernel_tutorial.rst", "recipes/torch_compiler_set_stance_tutorial.rst", "recipes/torch_export_aoti_python.rst", "recipes/torch_export_challenges_solutions.rst", "recipes/torch_logs.rst", "recipes/torchscript_inference.rst", "recipes/xeon_run_cpu.rst", "recipes/zero_redundancy_optimizer.rst", "recipes_index.rst", "sg_execution_times.rst", "unstable/backend_config_tutorial.rst", "unstable/context_parallel.rst", "unstable/distributed_rpc_profiling.rst", "unstable/flight_recorder_tutorial.rst", "unstable/gpu_direct_storage.rst", "unstable/gpu_quantization_torchao_tutorial.rst", "unstable/inductor_cpp_wrapper_tutorial.rst", "unstable/inductor_windows.rst", "unstable/inductor_windows_cpu.rst", "unstable/ios_coreml_workflow.rst", "unstable/ios_gpu_workflow.rst", "unstable/lite_interpreter.rst", "unstable/maskedtensor_adagrad.rst", "unstable/maskedtensor_advanced_semantics.rst", "unstable/maskedtensor_overview.rst", "unstable/maskedtensor_sparsity.rst", "unstable/max_autotune_on_CPU_tutorial.rst", "unstable/nestedtensor.rst", "unstable/nnapi_mobilenetv2.rst", "unstable/openvino_quantizer.rst", "unstable/python_extension_autoload.rst", "unstable/semi_structured_sparse.rst", "unstable/sg_execution_times.rst", "unstable/tracing_based_selective_build.rst", "unstable/vmap_recipe.rst", "unstable_index.rst"], "titles": ["ONNX Live Tutorial", "TorchRL objectives: Coding a DDPG loss", "Autograd in C++ Frontend", "Using CUDA Graphs in PyTorch C++ API", "Custom C++ and CUDA Operators", "Custom SYCL Operators", "&lt;no title&gt;", "Using the PyTorch C++ Frontend", "Supporting Custom C++ Classes in torch.compile/torch.export", "Extending PyTorch with Custom C++ Classes", "PyTorch Custom Operators", "Training Transformer models using Distributed Data Parallel and Pipeline Parallelism", "Registering a Dispatched Operator in C++", "Extending dispatcher for a new backend in C++", "Distributed Training with Uneven Inputs Using the Join Context Manager", "Neural Transfer Using PyTorch", "Creating Extensions Using NumPy and SciPy", "Pendulum: Writing your environment and transforms with TorchRL", "Facilitating New Backend Integration by PrivateUse1", "Custom Python Operators", "Combining Distributed DataParallel with Distributed RPC Framework", "(beta) Accelerating BERT with semi-structured (2:4) sparsity", "Computation times", "Exploring TorchRec sharding", "(beta) Static Quantization with Eager Mode in PyTorch", "&lt;no title&gt;", "&lt;no title&gt;", "Semi-Supervised Learning using USB built upon PyTorch", "Audio Data Augmentation", "Audio Datasets", "Audio Feature Augmentation", "Audio Feature Extractions", "Audio I/O", "Audio Resampling", "Automatic Differentiation with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.autograd</span></code>", "Build the Neural Network", "Datasets &amp; DataLoaders", "Learn the Basics", "Learn the Basics", "Optimizing Model Parameters", "Quickstart", "Save and Load the Model", "Computation times", "Tensors", "Transforms", "Fast Transformer Inference with Better Transformer", "A Gentle Introduction to <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.autograd</span></code>", "Training a Classifier", "Optional: Data Parallelism", "Deep Learning with PyTorch: A 60 Minute Blitz", "Neural Networks", "Computation times", "Tensors", "Chatbot Tutorial", "Running Tutorials in Google Colab", "Writing Custom Datasets, DataLoaders and Transforms", "DCGAN Tutorial", "Fault-tolerant Distributed Training with <code class=\"docutils literal notranslate\"><span class=\"pre\">torchrun</span></code>", "Distributed Data Parallel in PyTorch - Video Tutorials", "Multi GPU training with DDP", "What is Distributed Data Parallel (DDP)", "Deep Learning with PyTorch: A 60 Minute Blitz", "Image Segmentation DeepLabV3 on Android", "Image Segmentation DeepLabV3 on iOS", "PyTorch Distributed Overview", "&lt;no title&gt;", "PyTorch: Tensors and autograd", "PyTorch: Defining New autograd Functions", "Computation times", "PyTorch: Control Flow + Weight Sharing", "&lt;no title&gt;", "PyTorch: Custom nn Modules", "PyTorch: nn", "PyTorch: optim", "Computation times", "&lt;no title&gt;", "Warm-up: numpy", "PyTorch: Tensors", "Computation times", "Adversarial Example Generation", "Finetuning Torchvision Models", "Autograd", "nn Package", "Multi-GPU Examples", "Tensors", "PyTorch for Former Torch Users", "Introduction to Holistic Trace Analysis", "Trace Diff using Holistic Trace Analysis", "&lt;no title&gt;", "Learning Hybrid Frontend Syntax Through Example", "Computation times", "Hybrid Frontend Tutorials", "Hyperparameter tuning with Ray Tune", "Introduction to PyTorch - YouTube Series", "The Fundamentals of Autograd", "Model Understanding with Captum", "Introduction to PyTorch on YouTube", "Introduction to PyTorch", "Introduction to PyTorch - YouTube Series", "Building Models with PyTorch", "Computation times", "PyTorch TensorBoard Support", "Introduction to PyTorch Tensors", "Training with PyTorch", "Knowledge Distillation Tutorial", "Advanced: Making Dynamic Decisions and the Bi-LSTM CRF", "Deep Learning with PyTorch", "Deep Learning for NLP with Pytorch", "Introduction to PyTorch", "Sequence Models and Long Short-Term Memory Networks", "Computation times", "Word Embeddings: Encoding Lexical Semantics", "What is <cite>torch.nn</cite> <em>really</em>?", "Export a model with control flow to ONNX", "Export a PyTorch model to ONNX", "ONNX", "Introduction to ONNX", "Extending the ONNX Exporter Operator Support", "Computation times", "Profiling your PyTorch Module", "Learning PyTorch with Examples", "Saving and Loading Models", "Computation times", "T5-Base Model for Summarization, Sentiment Classification, and Translation", "Template Tutorial", "Text classification with the torchtext library", "Preprocess custom text dataset using torchtext", "Transfer Learning for Computer Vision Tutorial", "Language Modeling with <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> and torchtext", "Language Translation with <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> and torchtext", "Understanding requires_grad, retain_grad, Leaf, and Non-leaf Tensors", "Compilers", "Deep Dive", "Distributed", "Domains", "Ecosystem", "Extension", "Welcome to PyTorch Tutorials", "Getting Started with Fully Sharded Data Parallel(FSDP)", "Advanced Model Training with Fully Sharded Data Parallel (FSDP)", "Getting Started with Fully Sharded Data Parallel (FSDP2)", "Introduction to Libuv TCPStore Backend", "Large Scale Transformer model training with Tensor Parallel (TP)", "Hooks for autograd saved tensors", "Multi-Objective NAS with Ax", "NLP From Scratch: Classifying Names with a Character-Level RNN", "NLP From Scratch: Generating Names with a Character-Level RNN", "Compiled Autograd: Capturing a larger backward graph for <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "Fusing Convolution and Batch Norm using Custom Function", "Double Backward with Custom Functions", "Training \u201creal-world\u201d models with DDP", "Multinode Training", "Getting Started with Distributed Data Parallel", "Distributed Pipeline Parallelism Using RPC", "Writing Distributed Applications with PyTorch", "Recurrent DQN: Training recurrent policies", "Model ensembling", "Forced Alignment with Wav2Vec2", "Forward-mode Automatic Differentiation (Beta)", "(beta) Building a Simple CPU Performance Profiler with FX", "Inductor CPU backend debugging and profiling", "Jacobians, Hessians, hvp, vhp, and more: composing function transforms", "Train a Mario-playing RL Agent", "Channels Last Memory Format in PyTorch", "&lt;no title&gt;", "Single-Machine Model Parallel Best Practices", "Neural Tangent Kernels", "NLP from Scratch", "Getting Started - Accelerate Your Scripts with nvFuser", "How to save memory by fusing the optimizer step into the backward pass", "Parametrizations Tutorial", "Per-sample-gradients", "A guide on good usage of <code class=\"docutils literal notranslate\"><span class=\"pre\">non_blocking</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">pin_memory()</span></code> in PyTorch", "Training Transformer models using Pipeline Parallelism", "Introduction to Distributed Pipeline Parallelism", "Customize Process Group Backends Using Cpp Extensions", "Pruning Tutorial", "Real Time Inference on Raspberry Pi 4 (30 fps!)", "Reinforcement Learning (PPO) with TorchRL Tutorial", "Reinforcement Learning (DQN) Tutorial", "Implementing Batch RPC Processing Using Asynchronous Executions", "Implementing a Parameter Server Using Distributed RPC Framework", "Getting Started with Distributed RPC Framework", "(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)", "NLP From Scratch: Translation with a Sequence to Sequence Network and Attention", "Computation times", "Spatial Transformer Networks Tutorial", "Speech Recognition with Wav2Vec2", "PyTorch Profiler With TensorBoard", "Visualizing Models, Data, and Training with TensorBoard", "Text-to-speech with Tacotron2", "Whole Slide Image Classification Using PyTorch and TIAToolbox", "Building a Convolution/Batch Norm fuser with torch.compile", "Introduction to <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "torch.export Nightly Tutorial", "torch.export Tutorial", "Introduction to TorchRec", "Introduction to TorchRec", "TorchVision Object Detection Finetuning Tutorial", "Accelerating PyTorch Transformers by replacing <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> with Nested Tensors and <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile()</span></code>", "Visualizing Gradients", "Intro", "Leverage Intel\u00ae Advanced Matrix Extensions", "Making Native Android Application that uses PyTorch prebuilt libraries", "(beta) Compiling the optimizer with torch.compile", "(beta) Running the compiled optimizer with an LR Scheduler", "Asynchronous Saving with Distributed Checkpoint (DCP)", "Getting Started with Distributed Checkpoint (DCP)", "Getting Started with <code class=\"docutils literal notranslate\"><span class=\"pre\">CommDebugMode</span></code>", "Getting Started with DeviceMesh", "&lt;no title&gt;", "Profiling PyTorch RPC-Based Workloads", "Explicit horizontal fusion with foreach_map and torch.compile", "(Beta) PyTorch Inference Performance Tuning on AWS Graviton Processors", "Intel\u00ae Extension for PyTorch*", "Ease-of-use quantization for PyTorch with Intel\u00ae Neural Compressor", "Loading data in PyTorch", "(beta) Efficient mobile interpreter in Android and iOS", "Pytorch Mobile Performance Recipes", "Model Preparation for Android Recipe", "Model Preparation for iOS Recipe", "Profiling PyTorch workloads with The Instrumentation and Tracing Technology (ITT) API", "Summary of PyTorch Mobile Recipes", "Model Interpretability using Captum", "Automatic Mixed Precision", "SyntaxError", "Changing default device", "Defining a Neural Network in PyTorch", "PyTorch Recipes", "Tips for Loading an <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Module</span></code> from a Checkpoint", "PyTorch Profiler", "Reasoning about Shapes in PyTorch", "Save Load Across Devices", "Saving And Loading A General Checkpoint", "Saving And Loading Models For Inference", "Saving Multiple Models In One File", "Computation times", "Extension points in <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Module</span></code> for <code class=\"docutils literal notranslate\"><span class=\"pre\">load_state_dict</span></code> and tensor subclasses", "How to use TensorBoard with PyTorch", "Timer quick start", "Performance Tuning Guide", "Warmstarting model using parameters from a different model in PyTorch", "What is a state_dict in PyTorch", "Zeroing out gradients in PyTorch", "Reducing AoT cold start compilation time with regional compilation", "Reducing torch.compile cold start compilation time with regional compilation", "Script and Optimize for Mobile Recipe", "Computation times", "Intel\u00ae Extension for PyTorch* Backend on Intel\u00ae CPUs", "Compile Time Caching Configuration", "Compile Time Caching in <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "(beta) Utilizing Torch Function modes with torch.compile", "Using User-Defined Triton Kernels with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "Dynamic Compilation Control with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compiler.set_stance</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">torch.export</span></code> AOTInductor Tutorial for Python runtime (Beta)", "Demonstration of torch.export flow, common challenges and the solutions to address them", "(beta) Using TORCH_LOGS python API with torch.compile", "&lt;no title&gt;", "Optimizing CPU Performance on Intel\u00ae Xeon\u00ae with run_cpu Script", "Shard Optimizer States with ZeroRedundancyOptimizer", "Recipes", "Computation times", "(prototype) PyTorch BackendConfig Tutorial", "Introduction to Context Parallel", "Profiling PyTorch RPC-Based Workloads", "Flight Recorder for Debugging Stuck Jobs", "(prototype) Accelerating <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.save</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.load</span></code> with GPUDirect Storage", "(prototype) GPU Quantization with TorchAO", "Inductor C++ Wrapper Tutorial", "How to use <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code> on Windows CPU/XPU", "&lt;no title&gt;", "(Prototype) Convert Mobilenetv2 to Core ML", "(Prototype) Use iOS GPU in PyTorch", "(Prototype) Introduce lite interpreter workflow in Android and iOS", "Efficiently writing \u201csparse\u201d semantics for Adagrad with MaskedTensor", "MaskedTensor Advanced Semantics", "MaskedTensor Overview", "MaskedTensor Sparsity", "Using Max-Autotune Compilation on CPU for Better Performance", "Getting Started with Nested Tensors", "(Beta) Convert MobileNetV2 to NNAPI", "PyTorch 2 Export Quantization for OpenVINO torch.compile Backend", "Autoloading Out-of-Tree Extension", "(prototype) Accelerating BERT with semi-structured (2:4) sparsity", "Computation times", "(prototype) Tracing-based Selective Build Mobile Interpreter in Android and iOS", "torch.vmap", "Unstable"], "terms": {"thi": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 43, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 64, 66, 67, 69, 71, 72, 73, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 123, 124, 125, 126, 127, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 221, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 275, 276, 277, 278, 279, 281, 283, 285, 286, 287], "ha": [0, 1, 2, 4, 7, 8, 9, 11, 13, 14, 15, 16, 17, 19, 21, 27, 28, 29, 30, 31, 32, 33, 34, 38, 40, 45, 46, 47, 50, 53, 54, 66, 72, 79, 80, 87, 89, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 106, 108, 109, 111, 112, 116, 119, 120, 123, 125, 126, 129, 130, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 165, 166, 168, 169, 170, 172, 173, 174, 176, 177, 178, 179, 182, 183, 184, 187, 188, 189, 190, 191, 192, 194, 195, 196, 198, 199, 200, 205, 208, 211, 214, 223, 225, 226, 230, 237, 239, 240, 244, 245, 246, 251, 252, 254, 255, 258, 259, 263, 264, 266, 267, 270, 273, 274, 275, 276, 277, 279, 281, 282, 283, 285], "been": [0, 1, 3, 7, 9, 11, 17, 18, 21, 28, 29, 30, 31, 32, 33, 45, 54, 73, 79, 80, 87, 89, 92, 93, 94, 95, 97, 102, 108, 112, 123, 125, 126, 129, 130, 138, 141, 146, 148, 149, 150, 153, 154, 155, 157, 160, 161, 165, 166, 168, 169, 170, 173, 176, 177, 178, 179, 183, 187, 188, 189, 190, 191, 194, 195, 196, 199, 205, 211, 214, 221, 225, 237, 238, 246, 254, 255, 258, 263, 264, 270, 273, 274, 277, 279, 282, 283, 285], "deprec": [0, 6, 11, 12, 25, 26, 45, 114, 123, 125, 126, 128, 129, 138, 140, 141, 153, 165, 168, 173, 188, 189, 195, 210, 211, 216, 232, 233, 234, 235, 246, 257, 264], "redirect": [0, 11, 28, 29, 30, 31, 32, 33, 45, 62, 63, 80, 81, 82, 83, 84, 85, 93, 123, 125, 126, 129, 153, 157, 165, 168, 173, 187, 190, 194, 197, 203, 211, 217, 218, 219, 220, 222, 232, 233, 234, 235, 246, 264, 270, 271, 272, 280, 285], "3": [0, 2, 3, 4, 5, 7, 8, 9, 11, 17, 20, 21, 23, 27, 28, 29, 30, 31, 32, 33, 35, 38, 44, 45, 46, 56, 62, 63, 66, 67, 71, 72, 73, 79, 80, 81, 82, 83, 84, 85, 94, 95, 97, 99, 102, 104, 105, 106, 108, 109, 111, 112, 113, 116, 117, 119, 120, 121, 123, 124, 125, 126, 129, 138, 139, 140, 142, 147, 148, 149, 153, 154, 155, 156, 157, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 176, 177, 178, 180, 181, 182, 183, 187, 190, 191, 193, 194, 195, 196, 198, 199, 202, 203, 205, 208, 209, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 229, 232, 233, 234, 235, 237, 240, 246, 248, 252, 254, 255, 263, 265, 267, 269, 270, 271, 272, 279, 280, 283, 285], "second": [0, 1, 4, 7, 9, 11, 12, 15, 16, 17, 19, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 43, 44, 45, 46, 47, 48, 50, 52, 53, 55, 56, 62, 63, 72, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 117, 123, 124, 125, 126, 127, 129, 130, 137, 138, 141, 143, 144, 145, 146, 147, 148, 149, 153, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 183, 184, 186, 187, 188, 189, 190, 193, 194, 195, 198, 199, 200, 203, 205, 208, 212, 217, 218, 219, 220, 222, 225, 226, 229, 231, 232, 233, 234, 235, 237, 239, 240, 244, 245, 246, 251, 252, 253, 254, 256, 258, 265, 267, 270, 271, 272, 274, 275, 276, 277, 279, 280, 285, 286], "go": [1, 9, 14, 15, 16, 17, 19, 20, 21, 23, 24, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 48, 50, 52, 53, 55, 66, 67, 69, 71, 72, 73, 76, 77, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 130, 137, 139, 143, 144, 145, 146, 148, 151, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 169, 170, 171, 172, 174, 176, 177, 178, 179, 181, 183, 184, 186, 188, 189, 192, 193, 195, 196, 198, 200, 205, 207, 212, 223, 224, 225, 226, 227, 229, 230, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 252, 253, 254, 256, 262, 266, 267, 274, 275, 276, 277, 279, 286], "end": [1, 4, 7, 8, 9, 12, 15, 16, 17, 19, 21, 24, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 55, 56, 58, 64, 66, 67, 69, 71, 72, 73, 76, 77, 79, 86, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 124, 127, 130, 131, 132, 137, 139, 141, 142, 143, 144, 145, 146, 148, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 182, 183, 184, 186, 188, 189, 192, 193, 195, 196, 198, 199, 200, 205, 212, 214, 223, 224, 225, 226, 227, 229, 230, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 252, 253, 254, 256, 259, 260, 263, 266, 267, 274, 275, 276, 277, 279, 282, 283, 286], "download": [1, 7, 15, 16, 17, 19, 21, 24, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 54, 55, 56, 66, 67, 69, 71, 72, 73, 76, 77, 79, 86, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 130, 138, 139, 143, 144, 145, 146, 148, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 169, 170, 171, 172, 176, 177, 178, 179, 181, 183, 184, 186, 188, 189, 192, 193, 195, 196, 198, 199, 200, 205, 212, 214, 223, 224, 225, 226, 227, 229, 230, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 248, 250, 251, 252, 253, 254, 256, 266, 267, 269, 274, 275, 276, 277, 279, 286], "full": [1, 3, 4, 7, 12, 14, 15, 16, 17, 19, 21, 24, 27, 34, 35, 36, 38, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 54, 55, 56, 66, 67, 69, 71, 72, 73, 76, 77, 79, 89, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 130, 138, 139, 140, 143, 144, 145, 146, 147, 148, 150, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 169, 170, 171, 172, 175, 176, 178, 179, 180, 183, 184, 186, 188, 192, 193, 195, 196, 198, 199, 200, 205, 212, 223, 224, 225, 226, 227, 229, 230, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 252, 253, 254, 256, 258, 260, 263, 265, 266, 267, 274, 275, 276, 277, 279, 281, 286], "exampl": [1, 2, 3, 4, 5, 7, 8, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 27, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 64, 66, 67, 68, 69, 71, 72, 73, 74, 76, 77, 78, 86, 87, 88, 90, 92, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 110, 112, 113, 114, 116, 117, 118, 119, 122, 124, 127, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 195, 196, 198, 200, 202, 204, 205, 206, 207, 208, 209, 212, 213, 221, 223, 224, 225, 226, 227, 229, 230, 231, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 249, 250, 251, 252, 254, 255, 256, 259, 260, 261, 262, 263, 266, 267, 269, 274, 275, 276, 277, 279, 281, 283, 284, 286], "author": [1, 4, 5, 7, 14, 15, 16, 17, 20, 21, 24, 27, 38, 48, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 79, 86, 87, 89, 91, 98, 104, 105, 106, 108, 109, 111, 112, 113, 116, 117, 119, 120, 121, 124, 127, 130, 138, 139, 140, 141, 142, 144, 145, 146, 147, 150, 151, 152, 154, 155, 159, 160, 162, 163, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 192, 193, 195, 199, 200, 204, 205, 206, 207, 208, 209, 212, 213, 224, 229, 230, 237, 240, 244, 245, 249, 250, 251, 252, 253, 254, 255, 256, 262, 263, 265, 267, 268, 269, 278, 281, 282, 283, 286], "vincent": [1, 17, 155, 172, 178], "moen": [1, 17, 155, 172, 178], "separ": [1, 4, 5, 7, 9, 12, 19, 36, 53, 56, 89, 94, 101, 102, 103, 104, 112, 119, 142, 156, 160, 162, 170, 172, 181, 184, 191, 198, 225, 240, 250, 253, 256, 262, 274], "rl": [1, 134, 137, 178, 179, 180, 185, 261], "algorithm": [1, 7, 13, 14, 15, 34, 39, 44, 53, 56, 60, 73, 86, 92, 95, 97, 103, 105, 106, 107, 108, 112, 120, 134, 137, 139, 142, 144, 148, 154, 155, 162, 172, 175, 178, 181, 186, 204, 205, 223, 227, 240, 263, 281], "variou": [1, 4, 12, 18, 43, 50, 52, 53, 54, 87, 89, 92, 97, 101, 109, 112, 119, 121, 144, 154, 159, 161, 176, 178, 181, 182, 191, 196, 199, 202, 208, 212, 239, 243, 244, 249, 252, 255, 265, 267, 276, 279], "piec": [1, 12, 17, 89, 97, 112, 177, 178, 182, 191, 198, 262], "assembl": [1, 12, 53, 97], "script": [1, 7, 8, 9, 13, 15, 16, 17, 19, 24, 34, 35, 36, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 55, 56, 59, 64, 72, 76, 77, 79, 92, 94, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 124, 127, 130, 138, 139, 140, 143, 144, 145, 146, 147, 148, 150, 151, 152, 154, 156, 158, 159, 160, 161, 162, 163, 166, 169, 170, 171, 172, 174, 176, 177, 178, 179, 181, 183, 184, 186, 191, 193, 195, 198, 199, 200, 205, 212, 213, 214, 221, 224, 225, 226, 229, 230, 231, 237, 240, 244, 245, 251, 252, 253, 254, 256, 260, 265, 267, 274, 275, 276, 277, 279, 286], "collect": [1, 5, 7, 14, 17, 18, 23, 24, 39, 46, 48, 53, 59, 64, 97, 102, 103, 106, 111, 137, 138, 139, 142, 152, 155, 159, 175, 179, 182, 195, 196, 201, 207, 208, 209, 221, 239, 240, 260, 263, 265, 283], "final": [1, 7, 9, 13, 14, 15, 17, 18, 20, 21, 24, 27, 44, 46, 50, 53, 56, 79, 89, 92, 94, 97, 99, 102, 103, 104, 109, 112, 114, 117, 119, 121, 127, 137, 138, 139, 140, 142, 144, 145, 146, 148, 149, 154, 159, 160, 161, 162, 166, 169, 171, 174, 176, 178, 179, 180, 181, 182, 184, 188, 189, 195, 196, 215, 262, 263, 265, 267, 274, 277, 281, 283], "function": [1, 3, 4, 5, 7, 9, 10, 12, 13, 16, 17, 19, 20, 21, 23, 27, 36, 40, 41, 43, 44, 46, 52, 53, 55, 57, 59, 64, 65, 68, 69, 71, 72, 73, 86, 87, 94, 95, 97, 101, 102, 108, 111, 113, 116, 117, 119, 121, 127, 130, 131, 132, 133, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 154, 155, 156, 159, 160, 162, 169, 170, 172, 174, 175, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 201, 204, 205, 213, 214, 221, 224, 226, 227, 237, 239, 241, 247, 249, 252, 253, 254, 256, 259, 260, 261, 262, 263, 268, 274, 275, 276, 277, 281, 283, 286], "ar": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 27, 34, 35, 36, 39, 43, 44, 46, 47, 50, 52, 53, 54, 55, 56, 57, 59, 60, 64, 71, 72, 73, 79, 86, 87, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 127, 130, 133, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 169, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 191, 192, 193, 195, 196, 198, 200, 202, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 221, 223, 224, 225, 227, 229, 230, 237, 238, 239, 240, 241, 242, 243, 244, 245, 249, 250, 251, 252, 254, 255, 256, 258, 259, 260, 262, 263, 265, 266, 267, 274, 275, 276, 277, 278, 279, 281, 282, 283, 286, 287], "state": [1, 4, 8, 9, 12, 13, 14, 17, 21, 40, 41, 47, 53, 56, 57, 59, 92, 95, 97, 99, 103, 104, 105, 109, 112, 120, 121, 130, 138, 139, 145, 146, 148, 150, 152, 155, 156, 158, 162, 169, 171, 176, 178, 179, 180, 181, 182, 184, 188, 195, 200, 206, 207, 212, 223, 224, 229, 242, 260, 265, 266, 277, 282, 283], "contain": [1, 2, 7, 12, 13, 15, 17, 18, 21, 35, 36, 40, 44, 50, 53, 54, 59, 71, 72, 73, 86, 89, 94, 95, 99, 102, 103, 108, 109, 112, 113, 120, 121, 127, 134, 137, 138, 139, 143, 144, 145, 150, 152, 155, 170, 174, 176, 178, 179, 180, 182, 183, 184, 186, 188, 189, 191, 192, 195, 196, 198, 199, 221, 224, 227, 229, 237, 239, 240, 242, 244, 254, 255, 258, 262, 265, 266, 277, 283], "trainabl": [1, 7, 72, 104, 106], "paramet": [1, 9, 13, 14, 15, 17, 18, 20, 21, 24, 27, 34, 36, 37, 38, 41, 43, 44, 46, 47, 50, 52, 53, 55, 56, 71, 72, 79, 89, 92, 94, 97, 103, 104, 106, 108, 111, 112, 117, 119, 120, 127, 130, 132, 133, 137, 138, 139, 140, 142, 144, 145, 150, 152, 154, 155, 156, 158, 160, 161, 162, 166, 169, 170, 171, 182, 183, 186, 188, 189, 191, 195, 196, 200, 204, 206, 207, 212, 213, 214, 221, 224, 228, 229, 230, 231, 236, 237, 238, 242, 243, 244, 248, 252, 258, 259, 260, 261, 267, 274, 281, 283], "tutori": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 27, 28, 29, 30, 31, 32, 33, 37, 40, 45, 46, 47, 48, 49, 55, 57, 59, 60, 64, 79, 80, 81, 82, 83, 84, 85, 86, 88, 92, 95, 96, 99, 101, 103, 105, 107, 108, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 125, 126, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 177, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 196, 197, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 212, 213, 223, 224, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 244, 246, 247, 255, 256, 258, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 285, 286, 287], "guid": [1, 8, 12, 21, 64, 86, 89, 117, 134, 135, 137, 138, 154, 163, 177, 185, 188, 195, 196, 212, 221, 223, 225, 228, 236, 258, 260, 261, 267, 281, 283], "you": [1, 2, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 24, 27, 33, 34, 35, 36, 38, 39, 41, 43, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64, 71, 72, 79, 81, 82, 83, 84, 85, 86, 89, 91, 92, 94, 95, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 117, 119, 120, 121, 124, 127, 130, 131, 133, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 167, 169, 170, 171, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 186, 188, 189, 191, 192, 193, 195, 196, 198, 200, 201, 202, 204, 206, 207, 208, 209, 213, 214, 221, 224, 225, 226, 227, 229, 230, 238, 240, 241, 242, 243, 244, 245, 249, 250, 252, 253, 255, 256, 259, 260, 263, 266, 267, 268, 269, 274, 275, 276, 277, 278, 279, 281, 282, 283, 286], "through": [1, 3, 7, 9, 12, 13, 16, 17, 18, 20, 24, 27, 34, 35, 39, 40, 46, 50, 53, 56, 58, 59, 88, 90, 92, 94, 97, 99, 101, 103, 104, 106, 107, 108, 109, 112, 113, 114, 116, 117, 120, 124, 132, 133, 137, 139, 140, 141, 142, 143, 145, 147, 148, 149, 154, 156, 159, 160, 161, 162, 163, 166, 169, 171, 172, 174, 175, 178, 179, 180, 181, 182, 183, 184, 188, 189, 191, 192, 193, 195, 196, 200, 201, 206, 207, 213, 214, 224, 225, 230, 238, 243, 255, 258, 261, 266, 267, 268, 269, 274, 276, 281, 283, 286], "from": [1, 3, 4, 5, 7, 8, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 27, 34, 36, 39, 40, 41, 42, 43, 44, 47, 50, 51, 52, 53, 55, 56, 57, 59, 66, 67, 68, 71, 72, 73, 74, 76, 77, 78, 79, 86, 87, 89, 90, 92, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 116, 117, 118, 119, 120, 122, 124, 127, 130, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 151, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 188, 189, 192, 193, 195, 199, 200, 201, 206, 207, 209, 212, 213, 214, 215, 221, 224, 225, 227, 228, 230, 236, 237, 238, 239, 240, 242, 244, 247, 250, 251, 252, 254, 255, 258, 259, 260, 261, 262, 263, 265, 266, 267, 269, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 287], "ground": [1, 17, 47, 79, 198], "up": [1, 3, 7, 9, 12, 13, 17, 19, 21, 23, 24, 34, 36, 39, 53, 56, 59, 64, 75, 78, 86, 89, 94, 95, 97, 98, 99, 102, 104, 105, 106, 108, 109, 111, 112, 114, 119, 130, 131, 137, 138, 139, 140, 141, 142, 145, 146, 150, 151, 152, 154, 155, 156, 159, 160, 166, 169, 171, 172, 174, 177, 178, 179, 180, 181, 184, 188, 189, 193, 195, 196, 200, 202, 206, 208, 209, 214, 225, 230, 240, 243, 244, 254, 255, 256, 258, 259, 260, 261, 268, 279, 281, 283, 287], "us": [1, 4, 5, 6, 8, 10, 12, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 34, 35, 36, 39, 40, 41, 43, 44, 47, 48, 50, 52, 53, 55, 56, 58, 59, 60, 61, 64, 66, 67, 69, 71, 72, 73, 76, 77, 79, 86, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 113, 116, 120, 124, 127, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 144, 145, 146, 149, 151, 154, 159, 160, 161, 162, 163, 166, 167, 169, 170, 172, 174, 176, 177, 178, 179, 184, 185, 186, 192, 193, 195, 196, 198, 199, 200, 202, 204, 205, 206, 210, 212, 213, 214, 224, 225, 226, 227, 228, 231, 236, 237, 239, 242, 243, 244, 245, 247, 249, 250, 251, 253, 255, 257, 260, 261, 262, 263, 265, 267, 268, 274, 275, 277, 279, 281, 282, 283, 286, 287], "To": [1, 4, 7, 12, 13, 14, 15, 17, 19, 20, 21, 24, 34, 35, 39, 40, 41, 44, 50, 53, 54, 55, 61, 69, 77, 86, 87, 89, 92, 95, 101, 103, 104, 105, 106, 108, 109, 111, 112, 113, 116, 120, 121, 124, 130, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 154, 155, 158, 160, 169, 170, 172, 175, 176, 177, 178, 179, 180, 181, 183, 184, 188, 189, 191, 195, 196, 199, 200, 208, 209, 213, 214, 215, 221, 224, 225, 227, 229, 230, 237, 238, 239, 240, 241, 242, 243, 248, 252, 254, 255, 256, 258, 263, 265, 267, 268, 269, 274, 276, 277, 278, 283, 287], "aim": [1, 7, 104, 107, 141, 169, 179, 182, 215, 277], "we": [1, 2, 3, 4, 5, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 54, 55, 56, 59, 66, 67, 69, 71, 72, 73, 79, 86, 87, 89, 92, 95, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 117, 119, 120, 127, 130, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 212, 213, 221, 223, 225, 227, 229, 230, 231, 237, 238, 239, 241, 242, 243, 244, 245, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 262, 263, 265, 266, 267, 268, 269, 274, 275, 276, 277, 278, 279, 281, 282, 283, 286, 287], "focus": [1, 3, 95, 104, 107, 132, 134, 175, 184, 196], "which": [1, 3, 4, 5, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 34, 35, 38, 39, 40, 41, 43, 44, 46, 47, 50, 52, 53, 54, 55, 56, 59, 60, 64, 66, 67, 71, 72, 73, 79, 86, 87, 89, 92, 94, 95, 97, 98, 99, 102, 103, 104, 105, 106, 108, 109, 111, 112, 114, 117, 119, 120, 121, 127, 130, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 166, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 191, 193, 195, 196, 198, 199, 200, 202, 205, 206, 207, 208, 209, 212, 221, 223, 224, 225, 226, 227, 229, 230, 237, 239, 240, 241, 242, 243, 244, 245, 249, 250, 252, 253, 254, 255, 256, 258, 259, 262, 263, 266, 267, 274, 275, 276, 277, 278, 279, 281, 282, 283], "i": [1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 62, 63, 64, 66, 67, 69, 72, 76, 77, 79, 81, 82, 83, 84, 85, 86, 89, 91, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 113, 114, 116, 117, 119, 120, 122, 124, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 154, 155, 158, 159, 160, 161, 162, 163, 166, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 191, 192, 193, 195, 196, 197, 198, 200, 201, 203, 204, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 252, 253, 254, 256, 257, 258, 260, 261, 262, 263, 265, 266, 267, 268, 269, 271, 272, 274, 275, 277, 278, 279, 280, 281, 282, 283], "rel": [1, 7, 95, 103, 127, 143, 161, 166, 182, 184, 199, 268], "straightforward": [1, 5, 7, 20, 21, 53, 94, 97, 102, 104, 105, 160, 172, 195, 199], "deep": [1, 5, 7, 15, 16, 38, 50, 53, 56, 73, 76, 77, 97, 98, 99, 102, 104, 108, 110, 111, 120, 131, 133, 134, 137, 145, 146, 147, 148, 152, 160, 161, 162, 170, 176, 179, 184, 191, 196, 200, 201, 202, 204, 205, 215, 221, 227, 239, 240, 245, 258, 261], "determinist": [1, 14, 17, 140, 155, 179, 239, 240], "gradient": [1, 4, 7, 13, 14, 16, 17, 19, 20, 39, 46, 47, 50, 53, 56, 60, 64, 66, 67, 69, 71, 72, 76, 77, 94, 97, 99, 102, 103, 104, 105, 106, 108, 112, 120, 127, 130, 132, 137, 138, 139, 142, 143, 145, 147, 149, 150, 152, 154, 158, 161, 162, 169, 176, 178, 180, 181, 182, 185, 189, 191, 196, 207, 223, 228, 236, 259, 260, 261, 274, 286], "simpl": [1, 3, 4, 5, 7, 9, 12, 15, 18, 20, 21, 24, 27, 50, 53, 55, 58, 60, 71, 79, 89, 92, 95, 97, 99, 102, 103, 104, 112, 113, 116, 120, 121, 130, 131, 133, 137, 138, 143, 144, 147, 149, 154, 156, 160, 161, 166, 171, 172, 174, 176, 178, 180, 181, 182, 183, 185, 186, 188, 193, 195, 196, 202, 204, 205, 207, 209, 212, 214, 225, 229, 238, 239, 240, 242, 252, 255, 256, 259, 261, 263, 278, 281, 283], "continu": [1, 53, 57, 89, 92, 97, 102, 104, 109, 112, 140, 141, 142, 146, 150, 154, 178, 182, 184, 188, 193, 208, 225, 227, 230, 240, 241, 242, 243, 245, 265, 266, 274, 276, 277, 283], "control": [1, 12, 13, 17, 34, 36, 39, 46, 70, 74, 87, 89, 94, 104, 114, 115, 116, 117, 124, 131, 137, 139, 140, 141, 143, 144, 154, 158, 170, 178, 179, 180, 193, 208, 221, 225, 244, 245, 247, 260, 261, 282], "It": [1, 4, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 27, 28, 29, 30, 31, 32, 34, 44, 46, 47, 48, 50, 53, 55, 56, 79, 80, 86, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 116, 121, 127, 130, 136, 138, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 166, 169, 170, 171, 172, 176, 179, 180, 182, 184, 186, 187, 188, 190, 191, 194, 195, 196, 198, 199, 206, 207, 209, 225, 226, 238, 240, 243, 248, 250, 252, 254, 255, 258, 262, 263, 265, 279, 283, 286], "consist": [1, 3, 4, 7, 9, 17, 18, 27, 34, 35, 36, 39, 46, 104, 106, 112, 140, 142, 150, 159, 162, 166, 169, 178, 179, 183, 184, 188, 192, 196, 199, 205, 225, 230, 240, 262, 263, 265, 276, 277], "learn": [1, 4, 5, 7, 16, 17, 19, 21, 22, 34, 35, 36, 39, 40, 41, 43, 44, 46, 48, 50, 53, 55, 56, 57, 58, 59, 60, 64, 73, 76, 77, 79, 86, 88, 90, 91, 92, 94, 95, 97, 98, 99, 102, 103, 104, 108, 110, 111, 112, 113, 114, 116, 117, 121, 122, 124, 130, 131, 132, 134, 135, 136, 137, 138, 139, 141, 144, 145, 146, 147, 150, 151, 152, 154, 155, 160, 161, 163, 167, 169, 170, 171, 174, 176, 177, 181, 184, 185, 186, 189, 191, 192, 195, 196, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 212, 213, 215, 221, 223, 229, 237, 240, 244, 245, 248, 249, 250, 253, 255, 259, 260, 261, 263, 266, 267, 274, 275, 276, 277, 278, 279, 282, 283, 287], "parametr": [1, 2, 21, 132, 137, 178, 185, 261, 283], "an": [1, 2, 3, 5, 7, 8, 9, 10, 12, 14, 15, 16, 18, 19, 20, 21, 23, 24, 27, 34, 35, 36, 38, 39, 40, 41, 43, 46, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66, 69, 71, 73, 79, 86, 87, 89, 91, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 112, 113, 114, 116, 119, 120, 127, 130, 131, 132, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 151, 152, 154, 156, 158, 159, 160, 161, 162, 163, 166, 167, 169, 170, 171, 172, 175, 176, 177, 179, 180, 181, 182, 183, 184, 186, 188, 189, 191, 192, 193, 195, 198, 199, 200, 202, 204, 206, 207, 209, 212, 213, 214, 215, 221, 223, 224, 225, 226, 227, 228, 230, 231, 236, 237, 239, 240, 242, 244, 245, 247, 249, 252, 253, 254, 255, 256, 260, 261, 262, 263, 266, 267, 268, 269, 274, 276, 277, 278, 279, 281, 282, 283, 286, 287], "action": [1, 24, 99, 103, 108, 112, 138, 139, 162, 176, 178, 179, 180, 181, 182, 188, 230, 239, 255, 260, 263], "pair": [1, 7, 50, 53, 56, 95, 145, 146, 148, 171, 178, 179, 184, 188, 198, 205, 215, 221, 239, 262], "output": [1, 2, 3, 4, 5, 7, 8, 13, 14, 15, 17, 19, 20, 21, 24, 34, 35, 39, 43, 46, 47, 48, 50, 52, 53, 56, 66, 67, 69, 71, 72, 73, 76, 77, 79, 86, 87, 89, 92, 94, 95, 97, 99, 102, 103, 104, 106, 108, 109, 111, 112, 114, 117, 119, 120, 121, 124, 127, 130, 138, 139, 140, 142, 143, 145, 146, 147, 152, 154, 155, 156, 158, 160, 161, 163, 166, 171, 172, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 186, 189, 191, 193, 195, 198, 199, 200, 202, 204, 208, 212, 213, 214, 215, 223, 225, 227, 230, 231, 238, 240, 248, 256, 259, 262, 263, 265, 267, 269, 278, 279, 281, 283], "maxim": [1, 17, 56, 79, 86, 104, 106, 144, 162, 179, 193, 240, 258], "given": [1, 4, 7, 9, 12, 13, 15, 17, 19, 21, 34, 36, 39, 43, 44, 46, 52, 53, 56, 59, 79, 86, 89, 95, 99, 103, 104, 107, 108, 111, 112, 121, 139, 145, 146, 154, 156, 158, 161, 162, 163, 171, 176, 178, 179, 181, 182, 184, 193, 195, 196, 198, 213, 215, 225, 231, 240, 251, 255, 259, 266, 277, 283], "certain": [1, 7, 13, 14, 18, 53, 59, 95, 108, 133, 139, 142, 143, 148, 158, 161, 163, 178, 183, 193, 195, 196, 223, 227, 251, 252, 255, 258, 265, 274, 277, 279], "what": [1, 2, 3, 4, 5, 9, 12, 17, 19, 23, 24, 34, 35, 36, 46, 48, 49, 57, 58, 59, 64, 79, 91, 92, 95, 97, 99, 102, 103, 105, 106, 108, 109, 111, 113, 117, 122, 124, 136, 137, 139, 141, 142, 143, 144, 146, 147, 150, 151, 154, 155, 162, 163, 169, 174, 176, 178, 179, 180, 183, 189, 191, 192, 195, 196, 198, 199, 200, 204, 206, 224, 225, 226, 227, 228, 229, 236, 239, 240, 255, 260, 261, 263, 266, 276, 282], "how": [1, 2, 4, 5, 7, 8, 9, 12, 13, 15, 17, 19, 20, 21, 23, 24, 34, 36, 39, 40, 41, 46, 47, 48, 50, 53, 54, 55, 56, 59, 60, 61, 79, 86, 89, 91, 92, 94, 95, 97, 99, 102, 103, 104, 106, 107, 108, 109, 111, 112, 113, 114, 117, 119, 127, 130, 131, 132, 133, 134, 135, 136, 137, 141, 143, 144, 145, 146, 147, 149, 150, 152, 154, 155, 156, 158, 159, 160, 162, 163, 166, 167, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 202, 205, 206, 208, 212, 213, 223, 224, 225, 228, 229, 230, 236, 237, 239, 240, 242, 243, 244, 245, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 260, 261, 262, 263, 265, 266, 267, 274, 275, 276, 277, 278, 279, 281, 283, 287], "write": [1, 4, 5, 8, 9, 10, 12, 13, 19, 22, 47, 53, 64, 67, 101, 105, 106, 107, 108, 112, 120, 122, 127, 134, 136, 137, 141, 143, 144, 149, 150, 152, 155, 158, 160, 166, 170, 172, 175, 178, 181, 182, 184, 188, 191, 193, 195, 199, 207, 224, 225, 226, 227, 231, 240, 255, 261, 265, 266, 277, 281, 284, 286], "custom": [1, 7, 12, 14, 21, 22, 53, 56, 67, 70, 74, 95, 112, 119, 122, 132, 134, 136, 137, 140, 144, 155, 162, 172, 178, 181, 185, 191, 192, 193, 196, 199, 212, 214, 221, 224, 228, 237, 240, 248, 251, 252, 261, 262, 281, 283], "its": [1, 2, 3, 4, 5, 7, 8, 9, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 34, 35, 39, 44, 46, 50, 53, 55, 56, 57, 59, 72, 86, 94, 95, 97, 99, 102, 104, 106, 108, 109, 111, 112, 114, 119, 120, 121, 130, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 152, 154, 155, 156, 158, 159, 160, 162, 163, 169, 170, 174, 176, 178, 179, 180, 181, 182, 184, 188, 189, 193, 195, 196, 200, 202, 207, 209, 214, 215, 221, 224, 225, 227, 229, 230, 237, 240, 241, 242, 243, 259, 267, 276, 277, 279, 282, 283], "includ": [1, 2, 3, 4, 5, 7, 8, 9, 12, 17, 18, 19, 27, 39, 40, 43, 52, 53, 57, 59, 64, 73, 79, 86, 89, 92, 94, 95, 97, 99, 102, 103, 104, 105, 112, 114, 116, 117, 119, 132, 142, 144, 145, 146, 147, 149, 150, 152, 154, 155, 160, 162, 172, 174, 175, 176, 178, 181, 184, 188, 189, 192, 193, 195, 196, 198, 199, 207, 208, 212, 213, 214, 215, 221, 223, 224, 225, 227, 230, 237, 240, 250, 252, 253, 258, 265, 267, 274, 276, 278, 281, 282], "design": [1, 7, 17, 21, 27, 56, 60, 79, 89, 95, 111, 112, 146, 152, 155, 172, 178, 179, 180, 182, 183, 188, 189, 195, 202, 213, 225, 227, 240, 248, 252, 255, 258, 262, 263, 274, 275, 276, 281, 283, 286], "effici": [1, 5, 13, 15, 18, 21, 34, 53, 55, 79, 86, 102, 104, 108, 111, 131, 132, 138, 139, 142, 144, 152, 154, 155, 161, 166, 176, 178, 182, 183, 188, 191, 196, 206, 225, 229, 248, 252, 258, 261, 265, 268, 277, 278, 279, 283, 284], "store": [1, 7, 9, 20, 21, 24, 34, 35, 36, 40, 41, 43, 46, 52, 55, 57, 72, 92, 94, 101, 102, 105, 106, 108, 111, 112, 114, 120, 130, 141, 143, 144, 146, 154, 155, 160, 162, 163, 170, 172, 174, 175, 176, 178, 179, 180, 181, 182, 184, 195, 196, 212, 230, 239, 240, 249, 250, 263, 267, 277, 278, 283], "them": [1, 2, 3, 4, 7, 12, 13, 14, 15, 17, 21, 23, 24, 34, 36, 39, 46, 47, 50, 52, 53, 55, 57, 59, 64, 71, 72, 92, 94, 95, 97, 99, 101, 102, 103, 104, 107, 108, 109, 111, 112, 113, 114, 116, 117, 120, 121, 130, 131, 132, 137, 139, 140, 142, 144, 145, 146, 148, 149, 154, 155, 156, 159, 160, 161, 166, 169, 170, 171, 172, 176, 177, 179, 180, 181, 182, 191, 192, 193, 195, 198, 199, 200, 205, 213, 214, 224, 225, 229, 237, 239, 240, 249, 250, 258, 260, 263, 267, 276, 278, 279, 282, 283], "trajectori": [1, 17, 155, 178, 179], "transit": [1, 17, 89, 91, 105, 155, 172, 179], "assum": [1, 2, 7, 8, 12, 13, 17, 18, 24, 38, 46, 47, 55, 58, 79, 94, 97, 98, 104, 105, 107, 109, 112, 117, 130, 142, 143, 145, 146, 154, 155, 170, 176, 178, 181, 183, 184, 198, 207, 229, 230, 237, 239, 255, 276, 277, 279], "have": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 27, 34, 35, 36, 39, 43, 44, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 59, 61, 72, 73, 79, 86, 87, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 124, 127, 130, 133, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 191, 192, 193, 195, 196, 198, 199, 200, 202, 205, 206, 207, 208, 209, 212, 213, 214, 221, 224, 225, 226, 227, 237, 238, 239, 240, 241, 242, 243, 244, 245, 249, 250, 252, 253, 254, 255, 258, 259, 262, 263, 265, 266, 267, 268, 274, 275, 276, 277, 278, 279, 281, 282, 283, 286], "complet": [1, 7, 18, 38, 89, 92, 94, 97, 105, 106, 108, 117, 137, 139, 141, 142, 144, 145, 147, 149, 154, 172, 174, 176, 177, 178, 181, 191, 193, 198, 223, 240, 254, 255, 265, 267, 276, 277, 281], "ppo": [1, 134, 137, 185, 261], "give": [1, 2, 7, 14, 17, 21, 39, 48, 50, 53, 54, 56, 79, 94, 95, 97, 99, 104, 106, 108, 109, 111, 112, 121, 146, 150, 156, 159, 160, 161, 162, 171, 177, 181, 184, 188, 191, 193, 195, 196, 199, 213, 225, 275, 279, 283], "compon": [1, 7, 12, 13, 17, 56, 89, 99, 104, 108, 121, 132, 136, 137, 144, 145, 147, 155, 162, 178, 182, 186, 188, 192, 193, 195, 199, 202, 250, 279], "depend": [1, 7, 9, 12, 14, 50, 54, 56, 79, 86, 89, 94, 95, 101, 102, 104, 105, 109, 112, 142, 144, 145, 148, 149, 154, 155, 158, 159, 161, 162, 172, 175, 177, 178, 181, 188, 193, 199, 202, 204, 213, 225, 226, 231, 237, 240, 244, 245, 258, 267, 276, 287], "tensordict": [1, 17, 155, 162, 172, 178], "nn": [1, 2, 7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 23, 24, 39, 40, 41, 46, 47, 48, 50, 53, 59, 70, 73, 74, 92, 94, 97, 103, 106, 111, 116, 119, 122, 127, 130, 132, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 152, 155, 156, 158, 166, 170, 171, 174, 178, 179, 180, 181, 182, 183, 185, 189, 191, 193, 195, 196, 200, 204, 206, 207, 209, 212, 213, 214, 221, 224, 227, 228, 230, 231, 236, 238, 240, 241, 242, 244, 245, 248, 259, 260, 261, 262, 263, 266, 275, 278, 279, 283], "tensordictmodul": [1, 155, 178], "although": [1, 15, 20, 46, 53, 105, 106, 111, 112, 114, 117, 130, 141, 143, 162, 170, 172, 181, 193, 195, 213], "should": [1, 2, 4, 7, 8, 9, 12, 13, 14, 17, 18, 19, 20, 23, 24, 34, 46, 47, 53, 54, 55, 56, 57, 59, 73, 79, 86, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 109, 111, 112, 114, 120, 127, 136, 137, 139, 140, 141, 143, 144, 147, 149, 152, 154, 155, 156, 159, 162, 163, 166, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 189, 191, 192, 193, 195, 196, 198, 200, 206, 207, 213, 221, 224, 225, 230, 238, 239, 240, 243, 251, 255, 258, 260, 265, 266, 267, 269, 274, 275, 276, 281, 282, 286], "suffici": [1, 7, 53, 56, 104, 105, 127, 150, 152, 169, 172, 195], "transpar": [1, 15, 95, 106, 155, 181, 208, 214, 249], "understood": [1, 4, 19, 252], "without": [1, 7, 12, 13, 17, 19, 21, 34, 53, 57, 59, 99, 102, 104, 105, 116, 137, 138, 140, 142, 143, 146, 147, 154, 156, 158, 159, 161, 162, 163, 169, 172, 175, 176, 177, 178, 179, 180, 183, 188, 191, 195, 200, 205, 206, 209, 224, 229, 231, 237, 240, 250, 251, 253, 259, 266, 274, 276, 277, 279, 282, 283], "understand": [1, 2, 4, 5, 7, 10, 18, 46, 47, 56, 61, 86, 89, 94, 96, 97, 98, 99, 101, 102, 103, 105, 108, 112, 113, 117, 122, 127, 132, 137, 140, 143, 144, 145, 146, 149, 154, 158, 160, 172, 184, 191, 195, 196, 200, 201, 206, 209, 221, 223, 238, 242, 245, 249, 250, 252, 254, 255, 258, 261, 266, 275, 278], "class": [1, 2, 5, 7, 12, 13, 16, 18, 24, 27, 34, 36, 38, 40, 41, 47, 50, 53, 56, 57, 69, 71, 79, 87, 89, 95, 97, 99, 101, 102, 103, 106, 107, 111, 112, 117, 120, 121, 127, 137, 138, 139, 140, 144, 145, 147, 149, 150, 152, 154, 155, 156, 159, 160, 162, 163, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 189, 191, 195, 198, 200, 206, 207, 209, 213, 221, 223, 225, 227, 239, 243, 244, 245, 255, 262, 265, 274, 275, 276, 278], "do": [1, 2, 3, 4, 7, 9, 10, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 34, 35, 41, 50, 53, 54, 55, 56, 58, 66, 67, 73, 89, 92, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 114, 120, 121, 124, 130, 132, 137, 138, 142, 143, 144, 145, 151, 152, 154, 155, 156, 159, 160, 161, 162, 166, 169, 170, 172, 175, 176, 177, 178, 179, 182, 184, 189, 191, 195, 196, 198, 199, 200, 207, 221, 224, 225, 226, 229, 237, 238, 239, 240, 241, 243, 252, 253, 254, 260, 263, 265, 267, 275, 276, 277, 282, 283, 286], "sota": 1, "implement": [1, 2, 3, 7, 8, 13, 14, 15, 16, 17, 18, 21, 27, 35, 36, 38, 46, 48, 50, 53, 55, 59, 61, 64, 66, 67, 69, 71, 72, 73, 76, 77, 89, 94, 97, 103, 111, 112, 113, 120, 132, 133, 134, 137, 140, 142, 143, 145, 147, 149, 154, 155, 156, 158, 160, 161, 162, 163, 166, 171, 172, 174, 176, 178, 179, 182, 185, 188, 192, 195, 196, 198, 199, 202, 206, 213, 214, 225, 229, 237, 240, 248, 249, 251, 252, 255, 258, 261, 262, 263, 265, 268, 275, 277, 278, 279, 281, 282, 283], "rather": [1, 16, 53, 56, 73, 79, 89, 99, 102, 104, 111, 112, 121, 137, 146, 148, 160, 170, 171, 172, 178, 191, 195, 199, 202, 225, 240, 249, 253, 265, 267, 274], "provid": [1, 4, 7, 8, 12, 13, 14, 17, 18, 19, 20, 21, 23, 24, 27, 35, 36, 47, 53, 55, 56, 59, 60, 79, 86, 87, 89, 92, 94, 95, 97, 102, 103, 104, 105, 106, 112, 113, 116, 117, 120, 121, 133, 136, 137, 139, 141, 142, 143, 144, 150, 151, 152, 154, 155, 159, 160, 161, 162, 172, 176, 177, 178, 180, 181, 183, 188, 191, 192, 193, 195, 196, 198, 199, 202, 207, 208, 212, 213, 214, 215, 221, 223, 224, 225, 227, 229, 230, 238, 239, 240, 244, 245, 250, 253, 254, 255, 258, 265, 276, 277, 283, 286, 287], "high": [1, 2, 7, 18, 24, 47, 53, 56, 57, 59, 61, 64, 86, 89, 99, 106, 111, 114, 119, 132, 137, 138, 139, 142, 144, 147, 148, 154, 185, 188, 189, 191, 195, 196, 215, 239, 240, 252, 258, 259, 261, 268, 277, 281, 287], "level": [1, 2, 4, 7, 19, 21, 24, 47, 53, 57, 59, 61, 64, 72, 99, 107, 114, 120, 137, 138, 139, 142, 147, 150, 152, 154, 158, 160, 163, 167, 183, 184, 185, 188, 191, 193, 195, 196, 199, 208, 209, 249, 259, 261, 281, 283, 287], "illustr": [1, 24, 35, 47, 50, 60, 127, 142, 143, 144, 156, 172, 179, 189, 191, 198, 200, 209, 221, 223, 230, 237, 276, 277], "": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 14, 15, 17, 20, 21, 23, 24, 27, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 50, 52, 53, 55, 56, 57, 59, 61, 72, 79, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 127, 130, 133, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 148, 149, 150, 152, 154, 155, 156, 158, 159, 160, 161, 163, 166, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 204, 206, 207, 208, 209, 212, 213, 223, 224, 225, 227, 229, 230, 237, 238, 239, 240, 242, 243, 244, 245, 249, 250, 252, 258, 259, 260, 262, 263, 265, 267, 268, 269, 274, 276, 277, 279, 282, 283, 286, 287], "librari": [1, 3, 4, 5, 7, 8, 9, 10, 12, 15, 17, 19, 23, 36, 40, 47, 54, 55, 61, 64, 92, 95, 112, 116, 117, 130, 134, 137, 141, 144, 148, 149, 159, 172, 174, 175, 177, 178, 182, 188, 196, 199, 200, 202, 209, 213, 214, 221, 244, 245, 252, 254, 265, 269, 278, 285], "featur": [1, 7, 8, 9, 13, 14, 15, 17, 24, 36, 40, 44, 53, 54, 55, 56, 86, 87, 89, 94, 97, 99, 102, 104, 105, 111, 112, 116, 120, 137, 138, 143, 147, 155, 160, 161, 162, 169, 172, 175, 177, 178, 182, 183, 189, 193, 195, 198, 199, 202, 212, 213, 221, 223, 227, 229, 237, 239, 240, 243, 245, 249, 252, 255, 260, 268, 277, 278, 279, 281, 282, 283, 286, 287], "context": [1, 2, 12, 17, 20, 21, 46, 53, 79, 94, 99, 111, 112, 119, 130, 133, 142, 147, 158, 170, 172, 178, 181, 182, 183, 184, 188, 193, 199, 208, 224, 226, 229, 230, 231, 240, 253, 255, 258, 266, 268, 278, 283, 287], "bash": [1, 23, 162, 179, 221], "pip3": [1, 23, 54, 139, 155, 172, 178, 179, 188, 196, 267], "instal": [1, 4, 5, 7, 12, 21, 27, 38, 54, 55, 57, 59, 61, 92, 98, 101, 112, 116, 130, 138, 139, 142, 145, 146, 150, 151, 154, 155, 158, 159, 162, 167, 172, 175, 178, 179, 180, 184, 188, 191, 193, 198, 200, 213, 221, 223, 225, 227, 230, 239, 241, 242, 243, 244, 245, 252, 258, 265, 266, 267, 282], "mujoco": [1, 155, 178], "glfw": 1, "cuda": [1, 5, 7, 12, 13, 14, 15, 18, 21, 23, 24, 27, 35, 40, 43, 46, 47, 48, 57, 58, 59, 66, 67, 77, 79, 87, 92, 102, 106, 112, 119, 120, 121, 127, 131, 136, 137, 138, 139, 140, 141, 142, 145, 148, 150, 151, 152, 154, 156, 163, 169, 170, 174, 175, 179, 180, 181, 182, 183, 188, 191, 193, 196, 198, 204, 205, 206, 207, 209, 212, 215, 224, 225, 226, 230, 250, 253, 254, 255, 259, 260, 263, 265, 266, 267, 268, 278, 283], "avail": [1, 2, 3, 4, 5, 7, 9, 13, 15, 18, 21, 23, 24, 34, 35, 36, 39, 40, 41, 43, 46, 47, 52, 53, 54, 55, 56, 57, 66, 79, 92, 95, 97, 99, 102, 103, 104, 108, 112, 114, 120, 127, 139, 143, 145, 154, 155, 158, 162, 163, 172, 176, 177, 178, 179, 182, 183, 184, 188, 191, 192, 195, 196, 198, 207, 214, 215, 221, 223, 225, 226, 227, 240, 241, 242, 243, 244, 245, 254, 256, 265, 281, 283, 286, 287], "seri": [1, 7, 18, 56, 57, 58, 59, 60, 86, 96, 99, 102, 103, 133, 137, 141, 145, 146, 150, 151, 159, 167, 176, 178, 184, 199, 201, 213, 258, 276], "easili": [1, 15, 24, 27, 35, 48, 64, 79, 95, 102, 103, 104, 112, 119, 120, 121, 139, 142, 144, 145, 152, 154, 159, 160, 166, 176, 178, 179, 182, 191, 193, 195, 198, 206, 207, 209, 225, 242, 263, 267, 281, 287], "reusabl": [1, 7], "swappabl": 1, "signatur": [1, 12, 13, 17, 18, 117, 154, 170, 181, 192, 195, 212], "main": [1, 3, 5, 7, 14, 20, 24, 39, 56, 57, 59, 92, 104, 117, 120, 138, 139, 145, 150, 154, 160, 172, 179, 180, 181, 182, 186, 195, 196, 198, 199, 206, 214, 221, 240, 259, 267, 268, 286, 287], "characterist": [1, 17, 46, 147, 159, 161, 162, 177, 183, 195, 255], "thei": [1, 3, 7, 12, 13, 15, 17, 19, 20, 24, 35, 36, 43, 47, 52, 53, 56, 59, 79, 86, 89, 94, 97, 99, 102, 103, 104, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 130, 139, 143, 144, 145, 146, 149, 152, 154, 155, 160, 161, 163, 169, 170, 178, 179, 180, 182, 184, 191, 195, 196, 199, 202, 207, 209, 214, 225, 229, 230, 238, 239, 242, 243, 262, 269, 274, 275, 276, 277, 279], "copi": [1, 7, 15, 23, 38, 43, 47, 48, 54, 59, 79, 86, 94, 98, 103, 104, 119, 121, 124, 137, 138, 143, 148, 152, 154, 155, 156, 159, 162, 170, 181, 188, 191, 192, 195, 206, 212, 213, 229, 240, 263, 265, 281], "loss_modul": 1, "whatev": [1, 9, 12, 97, 102, 103, 106, 108, 112, 121, 221], "need": [1, 3, 4, 5, 7, 9, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 27, 34, 35, 36, 39, 40, 41, 43, 44, 46, 47, 48, 50, 53, 54, 55, 57, 58, 59, 64, 66, 67, 71, 86, 87, 92, 95, 97, 101, 102, 103, 104, 106, 108, 109, 111, 112, 114, 120, 121, 127, 130, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 191, 192, 193, 195, 196, 198, 200, 206, 207, 209, 212, 213, 214, 221, 224, 225, 227, 230, 237, 238, 239, 240, 241, 242, 243, 244, 245, 249, 253, 254, 255, 262, 265, 266, 267, 274, 278, 279, 282, 283], "follow": [1, 2, 3, 4, 5, 7, 8, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 34, 35, 36, 38, 39, 43, 47, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 79, 86, 87, 89, 91, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 114, 116, 117, 121, 124, 127, 130, 137, 138, 139, 140, 142, 143, 144, 147, 150, 151, 152, 154, 155, 159, 160, 161, 162, 163, 167, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 183, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 207, 209, 213, 214, 221, 224, 227, 229, 230, 231, 237, 238, 244, 245, 248, 249, 250, 252, 254, 255, 258, 262, 263, 265, 266, 268, 275, 277, 278, 279, 281, 282, 283, 286], "convent": [1, 17, 56, 112, 121, 130, 155, 191, 199, 225], "torch": [1, 2, 3, 5, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 19, 21, 23, 24, 25, 26, 35, 36, 37, 39, 40, 41, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 61, 64, 66, 67, 71, 77, 79, 89, 92, 94, 95, 97, 101, 102, 103, 104, 106, 109, 111, 114, 116, 117, 119, 120, 122, 127, 130, 131, 132, 136, 137, 138, 139, 140, 141, 142, 146, 149, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 182, 184, 185, 188, 189, 191, 196, 198, 200, 202, 205, 206, 207, 209, 210, 213, 214, 215, 221, 226, 227, 228, 230, 231, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 257, 259, 260, 261, 262, 263, 265, 267, 268, 274, 275, 277, 278, 279, 282, 283, 284, 287], "receiv": [1, 7, 17, 20, 59, 92, 102, 108, 120, 154, 172, 174, 178, 180, 181, 182, 193, 196, 224, 227, 240, 265], "input": [1, 2, 4, 7, 8, 12, 13, 15, 16, 17, 19, 20, 34, 35, 38, 39, 43, 46, 47, 48, 50, 52, 53, 60, 64, 66, 67, 69, 71, 72, 73, 76, 77, 87, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 117, 119, 120, 121, 130, 133, 138, 139, 142, 144, 145, 146, 147, 148, 150, 152, 154, 155, 156, 158, 160, 161, 162, 163, 166, 169, 171, 174, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 191, 192, 193, 195, 198, 202, 204, 207, 212, 213, 214, 215, 223, 224, 227, 230, 231, 243, 244, 249, 253, 255, 258, 262, 263, 267, 277, 279, 281, 283, 286], "all": [1, 2, 3, 5, 7, 9, 12, 13, 14, 15, 17, 18, 20, 21, 23, 24, 34, 35, 36, 39, 40, 43, 44, 46, 47, 48, 50, 53, 54, 55, 56, 57, 59, 60, 64, 79, 86, 89, 94, 95, 97, 99, 102, 103, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 158, 159, 160, 163, 166, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 191, 192, 193, 195, 196, 198, 200, 208, 212, 214, 221, 223, 225, 227, 229, 237, 238, 239, 241, 242, 243, 244, 245, 249, 250, 252, 253, 255, 256, 258, 259, 260, 261, 262, 263, 265, 266, 267, 274, 275, 277, 279, 281, 282, 283, 286, 287], "necessari": [1, 4, 7, 12, 13, 15, 18, 23, 24, 27, 41, 47, 56, 57, 59, 89, 92, 102, 103, 105, 112, 121, 130, 138, 139, 142, 148, 152, 162, 174, 180, 181, 182, 188, 195, 200, 215, 224, 240, 244, 245, 253, 262, 263, 276, 279, 281, 282], "inform": [1, 2, 4, 9, 10, 12, 13, 17, 19, 34, 48, 53, 57, 79, 86, 92, 94, 99, 101, 102, 104, 108, 109, 111, 121, 138, 143, 144, 145, 146, 152, 154, 155, 158, 159, 162, 177, 178, 179, 181, 183, 184, 188, 189, 191, 193, 195, 196, 198, 200, 202, 207, 208, 209, 221, 224, 225, 239, 240, 242, 243, 253, 256, 258, 262, 265, 266, 267, 277, 279, 281, 286], "return": [1, 2, 4, 5, 7, 8, 12, 13, 14, 15, 17, 18, 19, 20, 23, 24, 35, 36, 40, 43, 48, 50, 53, 55, 56, 71, 79, 86, 94, 95, 97, 102, 103, 104, 106, 108, 109, 112, 114, 117, 119, 120, 121, 130, 138, 139, 140, 142, 146, 147, 149, 152, 154, 155, 156, 158, 160, 162, 163, 166, 170, 174, 175, 177, 178, 179, 180, 181, 182, 183, 188, 189, 191, 193, 195, 196, 198, 204, 206, 207, 209, 212, 213, 214, 215, 221, 223, 225, 227, 230, 239, 250, 253, 255, 262, 268, 269, 274, 276, 278, 281, 282, 283, 286], "replay_buff": 1, "sampl": [1, 4, 5, 7, 12, 35, 36, 39, 40, 43, 47, 50, 52, 53, 55, 56, 59, 64, 92, 97, 99, 101, 102, 104, 121, 127, 132, 137, 138, 145, 148, 154, 161, 162, 169, 170, 178, 179, 180, 182, 185, 191, 195, 198, 199, 204, 223, 230, 239, 240, 244, 253, 261, 279, 286], "loss_dict": 1, "instanc": [1, 7, 9, 14, 15, 17, 35, 41, 48, 57, 58, 59, 64, 86, 92, 97, 99, 102, 103, 104, 105, 106, 109, 111, 112, 113, 120, 138, 139, 143, 144, 147, 150, 151, 152, 155, 160, 162, 172, 174, 178, 180, 181, 182, 193, 200, 212, 213, 214, 221, 224, 230, 238, 239, 240, 244, 245, 255, 258, 259, 282], "written": [1, 4, 5, 7, 8, 9, 12, 13, 17, 19, 89, 101, 107, 112, 113, 149, 155, 159, 166, 170, 171, 174, 183, 188, 191, 212, 214, 238, 250, 252, 265, 266, 267, 274], "under": [1, 12, 23, 24, 34, 50, 53, 54, 56, 58, 60, 64, 101, 104, 106, 119, 120, 140, 142, 143, 147, 154, 161, 162, 170, 172, 176, 182, 188, 189, 198, 207, 208, 221, 224, 249, 252, 262, 266, 275, 277], "loss_": 1, "smth": 1, "where": [1, 3, 4, 7, 12, 14, 15, 16, 17, 20, 21, 23, 27, 34, 36, 50, 53, 55, 64, 67, 72, 87, 89, 92, 94, 95, 97, 99, 101, 102, 104, 105, 106, 108, 109, 111, 120, 137, 139, 142, 144, 145, 146, 149, 151, 152, 154, 156, 160, 163, 166, 169, 170, 171, 172, 174, 177, 178, 179, 180, 181, 182, 183, 184, 189, 193, 195, 196, 198, 199, 206, 209, 212, 221, 224, 225, 227, 237, 238, 239, 243, 255, 258, 262, 263, 265, 267, 274, 277, 278, 283], "string": [1, 4, 8, 9, 12, 18, 53, 71, 102, 114, 120, 144, 145, 146, 155, 176, 178, 184, 191, 196, 221, 225, 239, 265], "describ": [1, 7, 12, 13, 17, 18, 20, 24, 41, 43, 52, 53, 56, 64, 79, 97, 104, 114, 117, 124, 133, 154, 166, 174, 178, 179, 182, 188, 191, 195, 196, 200, 209, 212, 225, 258], "addit": [1, 2, 4, 8, 12, 14, 18, 21, 24, 54, 59, 79, 95, 97, 102, 104, 109, 112, 114, 119, 139, 142, 143, 145, 152, 154, 156, 160, 163, 176, 180, 181, 184, 189, 192, 193, 195, 199, 206, 213, 225, 230, 240, 251, 252, 254, 255, 258, 274, 275, 276, 277, 281, 282, 283, 287], "kei": [1, 4, 7, 8, 12, 14, 17, 18, 53, 86, 107, 111, 114, 119, 121, 124, 139, 140, 141, 144, 155, 162, 172, 177, 178, 180, 183, 184, 188, 189, 191, 195, 196, 199, 204, 205, 212, 214, 215, 229, 238, 240, 241, 244, 251, 252, 263, 266, 279, 282, 283], "mai": [1, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 21, 24, 39, 53, 54, 56, 72, 79, 89, 94, 95, 97, 99, 102, 106, 113, 117, 120, 121, 138, 141, 142, 143, 144, 147, 148, 149, 154, 155, 156, 158, 160, 161, 166, 169, 170, 172, 177, 178, 181, 184, 188, 191, 193, 195, 199, 202, 204, 207, 209, 215, 225, 230, 240, 243, 244, 250, 252, 253, 255, 262, 265, 276, 279, 283], "metric": [1, 21, 92, 101, 102, 104, 119, 139, 188, 191, 198, 221, 225, 238, 283], "log": [1, 23, 39, 53, 54, 56, 57, 101, 105, 106, 109, 111, 112, 138, 141, 144, 151, 177, 178, 180, 182, 188, 189, 191, 195, 196, 205, 208, 250, 256, 258, 260, 278], "dure": [1, 3, 12, 15, 17, 23, 24, 34, 35, 39, 40, 41, 53, 56, 66, 67, 89, 94, 97, 99, 102, 103, 104, 106, 111, 112, 113, 120, 121, 131, 137, 138, 139, 140, 142, 143, 146, 147, 148, 149, 150, 152, 155, 159, 160, 166, 170, 177, 178, 179, 180, 182, 188, 192, 193, 195, 198, 200, 207, 214, 221, 230, 237, 238, 244, 245, 265, 266, 269, 278, 281], "reason": [1, 7, 12, 17, 18, 19, 21, 34, 56, 86, 94, 97, 104, 106, 109, 112, 121, 127, 143, 148, 154, 160, 178, 183, 184, 195, 196, 207, 225, 228, 229, 236, 254, 260, 261, 265, 267, 276, 283], "independ": [1, 53, 111, 112, 161, 162, 166, 181, 212, 274, 282], "let": [1, 2, 4, 5, 7, 9, 12, 13, 14, 15, 17, 19, 20, 21, 23, 24, 27, 35, 39, 46, 47, 48, 50, 53, 55, 56, 72, 79, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 117, 119, 120, 121, 127, 130, 131, 140, 142, 144, 149, 152, 154, 155, 156, 159, 160, 161, 163, 166, 169, 170, 171, 172, 174, 176, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 204, 207, 209, 212, 213, 223, 225, 227, 229, 230, 237, 238, 239, 240, 243, 244, 245, 254, 255, 263, 267, 269, 274, 275, 279, 283], "user": [1, 3, 8, 9, 17, 21, 23, 24, 27, 44, 47, 53, 54, 86, 87, 89, 95, 104, 108, 117, 124, 130, 131, 139, 140, 141, 142, 145, 146, 152, 160, 163, 172, 180, 182, 183, 184, 188, 191, 195, 196, 198, 199, 202, 206, 207, 208, 209, 212, 214, 215, 221, 230, 245, 247, 249, 250, 251, 258, 260, 261, 262, 263, 274, 275, 276, 277, 282, 283], "differ": [1, 3, 4, 7, 9, 12, 13, 14, 15, 16, 17, 20, 21, 23, 24, 27, 34, 39, 43, 50, 52, 53, 55, 56, 64, 77, 79, 86, 87, 89, 92, 95, 97, 99, 102, 103, 104, 105, 106, 111, 112, 114, 130, 137, 138, 139, 140, 142, 144, 145, 146, 148, 151, 152, 154, 156, 159, 160, 161, 163, 166, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 191, 192, 193, 195, 196, 199, 206, 207, 208, 209, 212, 213, 221, 225, 228, 230, 236, 238, 239, 240, 245, 250, 253, 255, 258, 259, 260, 261, 262, 265, 267, 268, 274, 275, 276, 277, 278, 279, 283], "set": [1, 2, 3, 7, 9, 12, 13, 14, 15, 17, 18, 19, 21, 23, 24, 27, 34, 39, 41, 46, 47, 50, 52, 53, 54, 56, 57, 59, 64, 66, 67, 72, 79, 86, 87, 91, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 109, 111, 112, 114, 116, 120, 121, 127, 130, 135, 137, 138, 139, 140, 142, 145, 146, 147, 150, 151, 152, 154, 155, 160, 162, 169, 170, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 192, 193, 195, 196, 198, 199, 200, 202, 206, 207, 209, 213, 214, 221, 225, 226, 229, 237, 239, 241, 243, 250, 256, 258, 274, 276, 278, 279, 281, 282, 283], "sum": [1, 2, 4, 5, 10, 14, 17, 19, 23, 24, 35, 46, 53, 56, 71, 86, 94, 95, 97, 105, 106, 108, 120, 138, 139, 140, 146, 147, 149, 154, 161, 170, 179, 180, 181, 182, 188, 193, 195, 196, 204, 206, 207, 212, 225, 243, 259, 275], "can": [1, 2, 3, 4, 5, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 27, 34, 35, 36, 38, 39, 40, 41, 43, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64, 71, 72, 77, 79, 86, 87, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 124, 127, 130, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 204, 205, 206, 207, 208, 209, 212, 213, 214, 221, 223, 224, 225, 226, 227, 229, 230, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 262, 263, 265, 266, 267, 269, 274, 275, 276, 277, 278, 279, 281, 282, 283, 286, 287], "simpli": [1, 3, 7, 12, 16, 24, 46, 47, 53, 57, 89, 97, 108, 111, 120, 121, 130, 141, 142, 144, 146, 149, 154, 160, 161, 169, 175, 176, 178, 179, 180, 181, 184, 186, 188, 189, 193, 195, 196, 199, 207, 225, 239, 241, 242, 243, 262, 263, 265, 275, 282, 286], "done": [1, 4, 7, 9, 12, 13, 17, 20, 21, 24, 53, 58, 86, 89, 99, 102, 104, 105, 106, 112, 138, 139, 142, 143, 146, 148, 155, 156, 159, 160, 162, 163, 172, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 189, 191, 195, 196, 200, 214, 229, 240, 254, 265, 267, 283], "via": [1, 3, 4, 7, 9, 10, 20, 21, 23, 41, 58, 59, 79, 89, 104, 137, 138, 139, 142, 144, 154, 155, 161, 170, 177, 178, 183, 189, 191, 193, 195, 196, 198, 209, 213, 214, 221, 229, 237, 238, 240, 249, 252, 266, 269, 278, 281, 283], "loss_val": 1, "item": [1, 2, 5, 7, 13, 14, 18, 43, 53, 71, 72, 97, 108, 120, 121, 124, 138, 139, 140, 145, 146, 154, 155, 177, 178, 180, 181, 182, 189, 191, 195, 224, 240, 262, 266], "startswith": [1, 87], "parent": [1, 4, 5, 17, 97, 209], "As": [1, 2, 3, 7, 9, 12, 13, 14, 15, 17, 20, 24, 41, 46, 53, 54, 56, 79, 89, 92, 95, 97, 99, 102, 103, 104, 112, 114, 120, 121, 138, 139, 140, 141, 142, 143, 144, 152, 154, 155, 158, 159, 160, 161, 162, 169, 170, 172, 174, 176, 178, 179, 180, 181, 182, 183, 188, 191, 192, 195, 196, 198, 199, 202, 208, 213, 221, 225, 229, 240, 245, 252, 258, 259, 262, 267, 277, 279, 282], "mani": [1, 2, 7, 13, 17, 18, 19, 21, 23, 34, 35, 39, 40, 53, 55, 56, 69, 73, 79, 86, 94, 95, 97, 99, 102, 104, 106, 107, 108, 112, 114, 116, 120, 139, 142, 144, 148, 154, 156, 161, 163, 166, 171, 172, 178, 180, 181, 184, 192, 193, 195, 196, 199, 223, 224, 225, 227, 240, 244, 245, 252, 258, 276, 283, 286], "other": [1, 7, 8, 9, 12, 13, 14, 17, 21, 24, 34, 35, 38, 43, 47, 50, 52, 53, 56, 57, 59, 60, 61, 72, 73, 79, 86, 87, 92, 94, 95, 97, 102, 104, 106, 108, 109, 111, 112, 120, 121, 124, 130, 132, 134, 138, 140, 141, 142, 145, 146, 148, 150, 151, 152, 154, 155, 158, 159, 160, 161, 162, 166, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 189, 192, 193, 195, 196, 198, 199, 200, 207, 209, 224, 225, 227, 229, 230, 237, 238, 239, 240, 241, 242, 243, 244, 245, 249, 250, 251, 252, 253, 259, 262, 265, 267, 274, 275, 276, 277, 279, 283], "expect": [1, 4, 5, 7, 9, 13, 14, 17, 48, 50, 53, 55, 79, 89, 92, 94, 95, 97, 99, 102, 103, 104, 108, 109, 111, 112, 113, 121, 127, 141, 144, 148, 152, 155, 161, 162, 169, 170, 176, 177, 178, 179, 180, 181, 183, 191, 195, 196, 198, 208, 214, 221, 223, 224, 225, 230, 237, 240, 244, 253, 255, 259, 262, 265, 281], "ani": [1, 2, 4, 7, 8, 9, 12, 13, 14, 15, 16, 17, 19, 20, 21, 24, 34, 44, 46, 48, 50, 53, 55, 57, 59, 71, 94, 97, 99, 102, 104, 105, 107, 108, 111, 112, 114, 116, 120, 121, 130, 133, 138, 140, 142, 143, 145, 147, 149, 150, 154, 156, 158, 159, 162, 163, 169, 170, 171, 172, 174, 177, 178, 179, 181, 182, 186, 188, 191, 192, 195, 196, 200, 202, 204, 205, 206, 207, 209, 212, 221, 224, 227, 229, 231, 237, 239, 243, 249, 250, 252, 253, 254, 256, 258, 266, 268, 274, 275, 276, 277, 278, 281, 283], "similar": [1, 3, 4, 5, 7, 9, 12, 13, 14, 17, 18, 24, 43, 52, 53, 86, 87, 95, 97, 99, 102, 104, 105, 111, 112, 117, 120, 142, 145, 149, 154, 155, 170, 178, 180, 181, 182, 183, 184, 188, 189, 191, 195, 198, 200, 213, 224, 225, 239, 240, 244, 249, 255, 259, 262, 266, 274, 275, 276, 277, 278, 279], "structur": [1, 5, 7, 9, 12, 17, 22, 23, 24, 35, 40, 41, 43, 52, 53, 56, 57, 89, 94, 97, 99, 103, 104, 105, 109, 114, 121, 137, 147, 150, 156, 159, 162, 163, 170, 171, 176, 178, 182, 189, 191, 193, 198, 238, 244, 252, 254, 261, 277, 286, 287], "format": [1, 15, 21, 24, 44, 112, 116, 121, 132, 137, 138, 139, 141, 159, 160, 177, 180, 182, 185, 188, 189, 191, 196, 198, 202, 214, 215, 223, 225, 261, 274, 276, 277, 283], "make": [1, 4, 5, 7, 9, 12, 13, 15, 17, 23, 24, 35, 39, 40, 44, 46, 47, 48, 53, 54, 55, 57, 58, 59, 61, 72, 79, 92, 94, 97, 99, 101, 102, 104, 106, 107, 108, 110, 111, 112, 113, 116, 117, 121, 124, 127, 130, 132, 137, 138, 139, 140, 142, 144, 145, 146, 147, 148, 152, 154, 155, 159, 160, 161, 162, 169, 170, 172, 175, 176, 178, 179, 180, 181, 182, 184, 189, 191, 192, 193, 195, 196, 198, 199, 200, 207, 208, 209, 213, 214, 223, 224, 225, 229, 231, 238, 239, 240, 249, 250, 252, 255, 261, 263, 265, 267, 274, 275, 276, 277, 279, 286], "possibl": [1, 2, 4, 7, 10, 12, 13, 17, 18, 21, 94, 95, 99, 102, 105, 108, 116, 140, 143, 147, 148, 149, 155, 156, 158, 159, 161, 162, 172, 177, 178, 180, 181, 184, 192, 193, 195, 196, 198, 199, 202, 212, 214, 224, 229, 240, 252, 258, 265, 279, 283], "re": [1, 4, 7, 8, 9, 10, 13, 17, 20, 24, 27, 38, 40, 43, 47, 52, 53, 54, 95, 97, 99, 101, 102, 103, 104, 105, 112, 120, 127, 130, 143, 145, 146, 155, 156, 158, 161, 166, 169, 171, 172, 177, 178, 179, 180, 181, 184, 195, 196, 198, 207, 209, 215, 224, 225, 229, 239, 240, 244, 266, 267, 274, 286], "across": [1, 4, 12, 14, 17, 20, 23, 27, 43, 53, 56, 58, 59, 60, 86, 95, 102, 104, 114, 133, 138, 139, 140, 142, 150, 151, 152, 154, 156, 162, 172, 174, 176, 179, 181, 182, 192, 195, 196, 205, 207, 209, 212, 223, 238, 240, 241, 243, 249, 253, 255, 258, 259, 263], "modal": [1, 172, 223], "complex": [1, 7, 35, 36, 54, 71, 72, 94, 95, 99, 104, 114, 120, 121, 133, 138, 152, 166, 170, 172, 180, 182, 189, 192, 193, 195, 196, 208, 209, 231, 241, 252, 265, 279], "read": [1, 2, 7, 8, 9, 10, 17, 24, 40, 50, 53, 55, 79, 97, 108, 109, 112, 121, 127, 133, 139, 140, 141, 143, 144, 145, 146, 147, 154, 160, 169, 172, 177, 178, 179, 181, 184, 186, 189, 192, 193, 199, 224, 225, 255, 258, 266], "multipl": [1, 4, 12, 13, 14, 17, 19, 20, 21, 23, 24, 43, 48, 52, 53, 57, 58, 59, 60, 64, 69, 86, 92, 94, 95, 97, 99, 102, 103, 104, 108, 112, 120, 133, 138, 140, 142, 143, 144, 145, 146, 152, 154, 156, 160, 162, 172, 174, 177, 178, 180, 181, 182, 184, 188, 189, 191, 193, 195, 196, 199, 202, 207, 212, 213, 224, 225, 230, 239, 240, 241, 254, 258, 263, 265, 267, 278, 279, 283], "entri": [1, 14, 17, 57, 108, 111, 119, 121, 150, 155, 160, 176, 178, 180, 188, 195, 242, 249, 265, 276, 277, 279, 282], "In": [1, 2, 3, 4, 5, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 27, 34, 35, 36, 38, 40, 41, 43, 46, 48, 52, 53, 54, 55, 56, 57, 59, 60, 61, 67, 71, 72, 79, 86, 87, 89, 91, 92, 95, 97, 99, 101, 103, 104, 105, 106, 108, 109, 111, 112, 114, 117, 119, 120, 121, 127, 130, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 159, 160, 161, 162, 163, 166, 167, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 212, 213, 214, 221, 223, 224, 225, 227, 229, 230, 237, 238, 239, 240, 241, 242, 243, 244, 245, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 262, 263, 265, 266, 267, 268, 269, 274, 275, 276, 277, 278, 279, 281, 282, 283], "word": [1, 7, 13, 14, 17, 47, 53, 79, 86, 95, 99, 104, 105, 107, 109, 110, 121, 137, 145, 146, 154, 167, 169, 170, 176, 182, 184, 196, 255, 261, 275, 277, 279], "allow": [1, 2, 7, 8, 9, 12, 13, 14, 15, 17, 24, 27, 34, 35, 36, 46, 53, 54, 55, 56, 57, 86, 87, 89, 92, 94, 95, 97, 99, 102, 104, 106, 108, 109, 111, 112, 114, 120, 138, 139, 140, 141, 142, 144, 145, 146, 147, 149, 152, 154, 155, 162, 163, 166, 169, 170, 172, 175, 176, 178, 179, 180, 182, 183, 184, 186, 191, 192, 193, 195, 196, 198, 199, 209, 212, 221, 224, 225, 230, 237, 238, 239, 249, 258, 263, 265, 268, 274, 275, 279, 281], "u": [1, 4, 7, 8, 12, 13, 14, 17, 19, 21, 24, 34, 36, 47, 50, 53, 55, 56, 73, 86, 89, 92, 94, 95, 97, 99, 102, 104, 105, 106, 108, 111, 112, 117, 120, 130, 139, 142, 145, 148, 150, 154, 155, 156, 159, 160, 161, 162, 163, 166, 169, 170, 171, 172, 174, 177, 178, 179, 181, 184, 189, 191, 192, 193, 195, 196, 199, 204, 212, 223, 225, 227, 229, 237, 239, 244, 253, 267, 274, 275, 277, 279, 281, 283, 286], "oblivi": [1, 178], "type": [1, 4, 7, 9, 12, 13, 17, 23, 24, 43, 52, 53, 54, 79, 86, 89, 95, 97, 98, 101, 103, 108, 112, 114, 117, 133, 138, 139, 142, 144, 154, 156, 160, 171, 172, 175, 176, 178, 180, 181, 182, 183, 188, 191, 193, 195, 199, 202, 206, 207, 212, 214, 215, 221, 223, 237, 238, 240, 241, 244, 248, 251, 258, 262, 274, 278, 281], "being": [1, 3, 4, 7, 13, 15, 17, 21, 50, 53, 56, 86, 95, 103, 104, 105, 106, 108, 112, 114, 127, 130, 139, 142, 144, 148, 154, 155, 170, 172, 174, 176, 178, 179, 181, 193, 195, 196, 200, 206, 214, 225, 229, 240, 254, 258, 275, 276, 279, 283], "run": [1, 2, 3, 4, 8, 9, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 27, 34, 35, 36, 39, 40, 41, 43, 44, 46, 47, 50, 52, 55, 56, 60, 61, 64, 67, 72, 76, 77, 86, 92, 94, 95, 97, 99, 101, 102, 103, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 124, 127, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 189, 192, 193, 196, 198, 199, 200, 202, 206, 207, 208, 209, 213, 215, 221, 224, 225, 226, 229, 231, 237, 239, 240, 244, 245, 247, 249, 251, 252, 253, 254, 255, 256, 258, 260, 261, 265, 267, 268, 274, 275, 276, 277, 278, 279, 281, 282, 283, 286, 287], "elementari": [1, 2], "onli": [1, 4, 7, 9, 10, 12, 13, 14, 16, 17, 18, 23, 24, 34, 41, 46, 47, 48, 50, 53, 57, 59, 60, 79, 86, 92, 94, 97, 99, 102, 104, 105, 106, 111, 112, 119, 121, 124, 127, 130, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 158, 159, 163, 166, 169, 170, 171, 172, 174, 175, 176, 177, 178, 181, 182, 183, 184, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 204, 205, 209, 212, 221, 224, 225, 230, 237, 240, 241, 242, 245, 249, 252, 253, 255, 258, 259, 262, 266, 267, 274, 275, 276, 277, 278, 279, 281, 282, 286, 287], "those": [1, 4, 7, 10, 13, 14, 17, 21, 34, 41, 46, 92, 94, 102, 105, 111, 112, 117, 130, 141, 142, 143, 145, 156, 159, 169, 170, 174, 175, 176, 182, 184, 189, 191, 195, 196, 201, 202, 207, 221, 224, 225, 239, 249, 252, 254, 258, 267, 275, 283, 286], "keep": [1, 4, 7, 13, 14, 17, 34, 43, 46, 53, 56, 79, 86, 89, 97, 99, 102, 104, 106, 108, 109, 112, 120, 121, 130, 136, 137, 138, 139, 140, 141, 142, 143, 146, 151, 152, 155, 160, 166, 172, 182, 184, 195, 196, 199, 225, 240, 259], "didact": [1, 154], "ll": [1, 4, 7, 9, 12, 13, 19, 21, 24, 35, 36, 38, 43, 52, 53, 54, 81, 82, 83, 84, 92, 94, 95, 97, 99, 101, 102, 103, 105, 112, 114, 130, 140, 145, 146, 152, 154, 155, 156, 158, 161, 166, 169, 171, 177, 178, 179, 181, 184, 189, 195, 196, 199, 200, 204, 205, 212, 225, 251, 256, 267, 274, 276, 278, 283], "displai": [1, 2, 7, 15, 36, 47, 95, 101, 103, 119, 127, 148, 184, 188, 208, 224, 225, 238], "each": [1, 2, 4, 7, 8, 12, 13, 14, 15, 17, 19, 20, 21, 23, 24, 27, 34, 35, 36, 38, 39, 40, 43, 46, 47, 48, 52, 53, 55, 56, 57, 59, 60, 64, 69, 79, 86, 87, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 109, 111, 112, 116, 119, 120, 121, 127, 130, 133, 137, 138, 139, 140, 142, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 158, 159, 161, 162, 163, 166, 169, 170, 171, 172, 174, 176, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 191, 195, 196, 198, 199, 200, 205, 208, 209, 212, 214, 221, 223, 224, 225, 227, 229, 230, 231, 237, 238, 239, 240, 242, 243, 244, 255, 256, 258, 259, 263, 265, 266, 268, 274, 277, 279, 283], "popul": [1, 34, 46, 53, 92, 102, 130, 139, 155, 162, 178, 180, 205, 212, 239, 250, 265], "later": [1, 3, 4, 5, 7, 14, 19, 34, 43, 50, 53, 79, 92, 95, 99, 104, 108, 109, 112, 121, 138, 139, 141, 142, 146, 147, 149, 154, 156, 158, 159, 160, 161, 162, 166, 171, 174, 178, 179, 182, 183, 184, 189, 191, 192, 195, 196, 199, 204, 205, 206, 208, 212, 221, 224, 225, 226, 229, 237, 240, 244, 245, 249, 250, 251, 252, 254, 255, 256, 263, 265, 266, 269, 274, 282], "stage": [1, 17, 20, 99, 112, 174, 206, 212, 268, 278], "start": [1, 5, 7, 14, 20, 21, 23, 24, 27, 34, 38, 46, 47, 53, 54, 56, 57, 58, 59, 64, 79, 92, 94, 95, 98, 99, 102, 103, 104, 107, 108, 112, 113, 114, 117, 130, 131, 133, 137, 139, 141, 142, 143, 144, 145, 146, 147, 148, 154, 160, 161, 162, 169, 170, 172, 177, 179, 180, 181, 184, 188, 189, 191, 193, 195, 196, 198, 200, 201, 206, 213, 221, 225, 228, 230, 236, 238, 243, 247, 249, 250, 252, 259, 260, 261, 263, 265, 267, 269, 276, 281, 283, 284], "solv": [1, 7, 17, 53, 55, 104, 111, 127, 170, 178, 180, 182, 225, 229, 240, 276], "task": [1, 7, 16, 17, 21, 27, 39, 40, 53, 103, 104, 105, 111, 119, 127, 133, 134, 137, 138, 145, 155, 170, 172, 178, 179, 184, 186, 191, 198, 225, 230, 239, 240, 249, 255, 258, 283], "strategi": [1, 21, 23, 27, 56, 86, 137, 146, 154, 160, 161, 171, 172, 180, 181, 202, 206, 208, 209, 215, 240, 283], "predict": [1, 24, 35, 38, 39, 40, 41, 46, 47, 53, 56, 66, 67, 71, 72, 73, 76, 77, 94, 95, 97, 99, 103, 104, 105, 109, 111, 112, 120, 130, 142, 144, 145, 146, 156, 161, 162, 172, 179, 184, 189, 196, 198, 213, 223, 227, 255, 260, 283], "henc": [1, 17, 21, 43, 46, 52, 86, 138, 143, 152, 163, 166, 172, 175, 178, 180, 182, 196, 213, 225, 255, 283], "our": [1, 2, 3, 4, 5, 7, 9, 10, 12, 13, 15, 20, 21, 24, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 52, 53, 54, 55, 56, 57, 59, 64, 66, 67, 69, 71, 72, 73, 79, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 109, 111, 112, 114, 117, 119, 120, 127, 130, 137, 138, 139, 141, 144, 145, 146, 147, 149, 150, 151, 155, 158, 159, 160, 161, 162, 163, 166, 170, 171, 172, 174, 176, 178, 179, 180, 181, 183, 184, 186, 189, 191, 193, 195, 196, 198, 199, 200, 201, 205, 206, 207, 212, 213, 223, 225, 239, 244, 245, 250, 251, 259, 260, 262, 263, 267, 269, 274, 275, 276, 277, 282, 283, 286], "two": [1, 4, 7, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 27, 34, 36, 39, 40, 43, 44, 46, 52, 53, 54, 56, 61, 79, 87, 89, 92, 94, 95, 97, 99, 102, 104, 105, 106, 108, 109, 111, 112, 113, 114, 119, 120, 127, 130, 138, 139, 144, 145, 147, 148, 149, 151, 152, 154, 155, 158, 159, 160, 161, 162, 163, 166, 170, 171, 172, 174, 175, 176, 178, 179, 180, 182, 183, 184, 191, 196, 198, 199, 200, 202, 209, 212, 213, 221, 225, 227, 229, 230, 237, 239, 240, 241, 250, 252, 254, 258, 259, 262, 263, 265, 267, 268, 275, 277, 279, 281, 283], "constructor": [1, 7, 9, 13, 14, 15, 71, 73, 89, 99, 103, 120, 130, 138, 139, 152, 172, 175, 176, 178, 180, 182, 224, 225, 277], "both": [1, 2, 7, 9, 12, 13, 14, 15, 17, 20, 24, 27, 36, 53, 55, 56, 64, 79, 86, 89, 95, 102, 103, 104, 111, 112, 119, 120, 139, 140, 142, 144, 148, 151, 152, 154, 158, 160, 161, 163, 166, 172, 176, 178, 180, 181, 182, 183, 184, 192, 195, 196, 198, 199, 206, 207, 209, 213, 214, 221, 223, 224, 225, 237, 239, 244, 249, 250, 255, 258, 262, 267, 268, 274, 277, 278], "compat": [1, 5, 7, 8, 12, 14, 21, 54, 101, 102, 108, 113, 141, 147, 155, 183, 193, 195, 254, 255, 282], "comput": [1, 3, 4, 5, 7, 12, 14, 15, 16, 19, 20, 21, 24, 27, 39, 43, 47, 50, 52, 53, 55, 56, 57, 61, 64, 66, 67, 69, 71, 72, 76, 77, 79, 87, 89, 94, 95, 97, 99, 102, 103, 104, 105, 106, 107, 112, 114, 116, 120, 130, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 154, 155, 158, 160, 162, 169, 170, 171, 172, 174, 176, 177, 178, 179, 181, 183, 184, 188, 191, 192, 193, 195, 196, 198, 199, 200, 202, 204, 205, 212, 213, 221, 224, 225, 227, 229, 231, 239, 244, 252, 255, 258, 263, 265, 267, 278, 279, 283, 286, 287], "fit": [1, 7, 13, 14, 27, 64, 92, 111, 120, 138, 139, 140, 142, 152, 172, 182, 196, 224, 258], "gener": [1, 9, 12, 13, 14, 17, 20, 21, 23, 27, 41, 46, 47, 53, 55, 57, 76, 77, 86, 89, 94, 95, 97, 101, 102, 103, 104, 106, 108, 111, 112, 113, 120, 122, 124, 127, 132, 134, 137, 142, 143, 145, 147, 152, 154, 156, 160, 161, 162, 163, 166, 167, 169, 170, 171, 172, 176, 178, 180, 182, 183, 184, 185, 186, 188, 189, 191, 193, 195, 196, 198, 199, 202, 206, 207, 212, 213, 214, 221, 230, 239, 242, 244, 250, 254, 255, 256, 258, 261, 265, 266, 267, 268, 269, 274, 275, 276, 278, 279, 281, 283], "crucial": [1, 2, 15, 17, 86, 108, 155, 172, 178, 196, 240], "convert_to_funct": 1, "extract": [1, 53, 56, 79, 101, 104, 127, 130, 137, 145, 146, 158, 160, 171, 178, 184, 193, 195, 198, 200, 212, 227], "convert": [1, 13, 15, 24, 35, 36, 43, 44, 47, 53, 55, 56, 59, 97, 99, 102, 104, 112, 114, 116, 121, 131, 137, 140, 145, 146, 177, 178, 180, 181, 189, 196, 207, 214, 215, 223, 237, 240, 267, 274, 275, 277, 278, 279, 281], "strictli": [1, 102, 178], "speak": [1, 12, 46, 102, 143, 154, 240], "one": [1, 4, 5, 7, 8, 9, 10, 12, 14, 15, 17, 18, 21, 23, 24, 34, 36, 38, 43, 44, 48, 50, 52, 53, 55, 56, 59, 60, 64, 79, 89, 92, 94, 95, 97, 99, 102, 103, 104, 105, 107, 108, 109, 111, 112, 117, 120, 121, 124, 127, 130, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 151, 152, 154, 155, 156, 158, 159, 160, 161, 169, 170, 171, 172, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 191, 192, 195, 196, 198, 200, 206, 207, 208, 209, 225, 227, 229, 230, 240, 241, 243, 252, 253, 254, 255, 258, 259, 262, 265, 266, 267, 274, 275, 276, 278, 279, 283, 286], "perfectli": [1, 17], "howev": [1, 4, 5, 7, 8, 9, 10, 12, 13, 15, 17, 18, 19, 21, 34, 41, 48, 50, 53, 55, 56, 79, 89, 92, 104, 105, 120, 127, 142, 143, 147, 148, 149, 154, 155, 156, 159, 163, 169, 172, 175, 176, 179, 180, 181, 182, 183, 184, 189, 191, 192, 193, 195, 196, 200, 202, 207, 208, 212, 213, 225, 229, 237, 239, 240, 245, 252, 255, 258, 262, 268, 269, 275, 276, 279, 283, 286], "encourag": [1, 7, 24, 99, 179, 184, 191], "usag": [1, 3, 4, 14, 16, 18, 86, 94, 119, 131, 132, 136, 137, 138, 140, 143, 154, 155, 160, 161, 174, 178, 180, 182, 183, 185, 188, 199, 202, 206, 214, 215, 221, 224, 238, 240, 253, 258, 260, 261, 263, 267, 269, 278, 279], "doe": [1, 2, 4, 7, 12, 16, 17, 18, 19, 24, 34, 44, 46, 50, 76, 77, 79, 89, 94, 95, 97, 99, 101, 102, 103, 104, 106, 108, 111, 112, 114, 117, 120, 121, 127, 130, 138, 139, 140, 141, 147, 149, 152, 154, 155, 161, 162, 163, 169, 170, 172, 174, 177, 178, 179, 181, 182, 183, 184, 188, 189, 192, 193, 195, 196, 198, 199, 200, 206, 221, 224, 225, 229, 237, 239, 240, 252, 254, 258, 265, 266, 267, 275, 276, 277, 286], "often": [1, 7, 13, 17, 21, 43, 53, 79, 92, 94, 95, 97, 102, 104, 106, 108, 111, 112, 120, 121, 142, 143, 144, 146, 162, 170, 195, 196, 204, 206, 224, 239, 240, 265, 279, 283], "same": [1, 2, 3, 4, 5, 7, 8, 9, 12, 13, 14, 15, 18, 21, 24, 34, 35, 41, 43, 46, 47, 53, 55, 56, 57, 59, 69, 77, 79, 89, 92, 94, 97, 102, 103, 104, 106, 108, 109, 111, 112, 114, 117, 119, 120, 121, 130, 138, 139, 140, 141, 142, 143, 145, 147, 148, 151, 152, 154, 156, 158, 160, 161, 162, 163, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 191, 193, 195, 196, 199, 206, 207, 221, 224, 225, 230, 232, 233, 234, 235, 237, 240, 243, 244, 249, 250, 253, 254, 258, 259, 262, 263, 266, 268, 274, 275, 276, 277, 279, 283], "usual": [1, 7, 12, 19, 24, 46, 95, 97, 99, 101, 102, 106, 107, 109, 111, 112, 127, 142, 143, 146, 148, 149, 152, 154, 155, 160, 163, 169, 172, 176, 178, 195, 199, 224, 229, 230, 240, 258, 286], "former": [1, 145, 146, 184], "some": [1, 3, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 21, 24, 34, 35, 36, 39, 43, 44, 46, 47, 50, 52, 53, 54, 55, 56, 66, 72, 79, 86, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 117, 119, 120, 121, 130, 137, 138, 139, 141, 144, 145, 146, 147, 148, 149, 150, 152, 154, 155, 156, 158, 159, 160, 161, 166, 169, 171, 172, 174, 176, 178, 179, 181, 182, 184, 186, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 207, 214, 224, 225, 227, 229, 230, 231, 239, 240, 241, 244, 245, 252, 253, 255, 258, 263, 265, 267, 274, 275, 276, 277, 279, 281, 282, 283, 286], "lag": [1, 178], "absolut": [1, 7, 13, 86, 97, 106, 176, 179, 200, 239], "dilut": 1, "move": [1, 9, 10, 15, 28, 29, 30, 31, 32, 33, 35, 40, 43, 46, 50, 52, 80, 93, 94, 106, 112, 138, 139, 140, 142, 151, 152, 155, 157, 169, 170, 172, 175, 179, 181, 182, 187, 188, 190, 194, 198, 206, 207, 213, 225, 239, 240, 270, 273, 275], "averag": [1, 3, 24, 53, 56, 64, 86, 92, 95, 97, 103, 104, 112, 138, 141, 146, 154, 171, 179, 182, 184, 188, 200, 225, 240], "These": [1, 12, 14, 15, 17, 21, 24, 41, 46, 53, 56, 59, 64, 86, 92, 99, 107, 109, 111, 112, 119, 127, 134, 135, 154, 162, 178, 181, 183, 184, 191, 192, 195, 196, 199, 201, 213, 225, 239, 240, 249, 250, 252, 267, 281, 283], "associ": [1, 4, 7, 12, 13, 35, 36, 54, 86, 95, 149, 158, 172, 176, 183, 191, 196, 227, 237, 240, 254, 266, 275, 283], "One": [1, 2, 4, 7, 13, 14, 18, 53, 55, 79, 86, 94, 99, 102, 104, 105, 106, 108, 138, 139, 140, 141, 142, 143, 146, 152, 154, 156, 169, 170, 172, 186, 189, 192, 193, 195, 196, 198, 199, 206, 207, 225, 231, 237, 239, 240, 255, 265, 276, 286], "advantag": [1, 3, 7, 17, 21, 53, 89, 102, 105, 112, 133, 139, 140, 143, 154, 155, 170, 172, 178, 193, 206, 207, 214, 221, 240, 244, 250, 254, 277, 283], "match": [1, 13, 17, 21, 24, 72, 97, 102, 104, 112, 114, 117, 120, 121, 156, 160, 163, 169, 171, 178, 181, 193, 195, 213, 214, 215, 224, 227, 231, 241, 258, 275, 277, 283], "exactli": [1, 12, 13, 15, 21, 34, 46, 55, 56, 97, 108, 111, 112, 114, 120, 155, 160, 170, 195, 196, 283], "current": [1, 4, 7, 9, 12, 13, 14, 15, 17, 18, 24, 35, 40, 43, 53, 56, 66, 79, 86, 95, 104, 112, 120, 127, 138, 139, 141, 143, 144, 145, 146, 154, 155, 158, 162, 163, 171, 172, 174, 176, 178, 179, 180, 181, 182, 183, 184, 188, 195, 196, 199, 207, 213, 230, 240, 249, 252, 262, 265, 274, 276, 277, 279], "configur": [1, 5, 7, 9, 17, 23, 24, 27, 53, 54, 86, 95, 103, 131, 139, 142, 150, 152, 160, 169, 178, 181, 188, 191, 196, 200, 213, 214, 215, 240, 245, 250, 252, 255, 258, 260, 267, 269, 278], "pessimist": [1, 178], "bound": [1, 53, 121, 140, 144, 160, 178, 179, 188, 195, 196, 198, 199, 224, 225, 230, 240, 258, 267], "pai": [1, 13, 48, 53, 141, 240, 253], "attent": [1, 13, 48, 53, 99, 132, 134, 137, 141, 142, 145, 146, 167, 185, 186, 252, 261, 263, 267, 279, 287], "create_target_param": 1, "keyword": [1, 176, 178, 191, 229, 237], "argument": [1, 2, 4, 5, 7, 9, 12, 17, 19, 34, 40, 43, 46, 47, 52, 55, 59, 73, 86, 94, 95, 99, 101, 102, 104, 106, 109, 111, 113, 119, 120, 121, 138, 139, 146, 151, 152, 154, 155, 156, 160, 161, 171, 172, 174, 175, 176, 178, 180, 181, 182, 183, 188, 191, 193, 195, 196, 200, 208, 212, 224, 225, 229, 230, 237, 238, 240, 241, 252, 258, 262, 263, 265, 276, 278, 286], "below": [1, 2, 4, 7, 13, 14, 15, 17, 20, 23, 24, 27, 36, 41, 43, 46, 48, 52, 55, 56, 57, 58, 59, 60, 61, 86, 89, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 124, 130, 140, 141, 142, 144, 147, 148, 150, 151, 152, 154, 155, 158, 160, 163, 169, 175, 178, 179, 180, 181, 182, 183, 188, 189, 191, 193, 195, 196, 198, 200, 205, 206, 207, 208, 212, 213, 215, 221, 224, 225, 229, 230, 245, 248, 249, 252, 253, 254, 255, 258, 259, 265, 267, 268, 269, 275, 276, 277, 278, 279, 281, 282], "tell": [1, 8, 19, 23, 73, 92, 94, 97, 99, 103, 111, 112, 120, 130, 144, 145, 155, 156, 158, 169, 179, 180, 182, 184, 195, 225, 230], "creat": [1, 2, 7, 8, 9, 13, 15, 17, 19, 20, 22, 23, 24, 27, 34, 35, 38, 41, 43, 44, 46, 47, 50, 52, 54, 55, 56, 66, 67, 69, 71, 72, 73, 76, 77, 79, 86, 89, 94, 95, 97, 99, 101, 103, 104, 105, 107, 109, 111, 113, 114, 117, 120, 121, 124, 130, 136, 137, 139, 140, 141, 142, 147, 149, 152, 154, 155, 158, 162, 163, 167, 170, 171, 172, 174, 175, 177, 178, 179, 181, 182, 184, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 204, 205, 206, 207, 209, 212, 213, 221, 224, 225, 227, 230, 231, 237, 238, 241, 242, 243, 244, 245, 252, 254, 255, 259, 260, 261, 263, 266, 267, 269, 274, 277, 279, 281], "If": [1, 2, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 27, 34, 35, 38, 40, 43, 46, 47, 48, 50, 52, 53, 54, 56, 57, 59, 64, 66, 79, 86, 92, 94, 97, 99, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 124, 127, 130, 138, 139, 140, 141, 142, 143, 146, 148, 152, 154, 155, 156, 158, 160, 161, 163, 169, 170, 171, 172, 175, 177, 178, 179, 180, 181, 182, 183, 184, 188, 191, 193, 195, 196, 198, 199, 200, 202, 206, 207, 214, 221, 223, 224, 226, 229, 230, 237, 238, 239, 240, 241, 243, 244, 245, 252, 253, 258, 262, 265, 266, 267, 268, 274, 275, 277, 278, 279, 282, 283, 286], "fals": [1, 2, 4, 5, 7, 8, 13, 14, 17, 24, 27, 41, 46, 59, 66, 67, 86, 87, 94, 97, 108, 120, 121, 127, 130, 138, 139, 140, 142, 148, 158, 160, 163, 169, 170, 172, 177, 180, 181, 189, 191, 193, 195, 204, 212, 213, 214, 215, 224, 237, 240, 241, 244, 248, 255, 258, 259, 262, 265, 268, 275, 276, 278, 281, 282, 283], "see": [1, 2, 3, 4, 5, 7, 10, 12, 13, 14, 17, 19, 21, 23, 24, 27, 35, 39, 40, 43, 47, 48, 50, 52, 53, 54, 55, 56, 59, 64, 79, 86, 87, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 119, 121, 130, 138, 139, 140, 142, 144, 145, 146, 147, 148, 149, 152, 154, 155, 156, 158, 159, 160, 162, 163, 166, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 202, 205, 207, 208, 209, 212, 213, 216, 221, 223, 224, 225, 230, 237, 238, 239, 240, 241, 242, 243, 244, 249, 250, 251, 253, 254, 256, 258, 262, 263, 265, 267, 274, 276, 277, 278, 281, 282, 283, 286, 287], "target_actor_network_param": 1, "attribut": [1, 7, 9, 14, 17, 34, 46, 50, 57, 86, 89, 99, 111, 112, 117, 130, 143, 155, 158, 163, 170, 174, 176, 195, 202, 224, 243, 255, 260, 279], "still": [1, 7, 12, 13, 14, 15, 17, 18, 21, 23, 24, 50, 56, 79, 92, 94, 102, 104, 108, 112, 119, 121, 139, 145, 146, 147, 152, 154, 155, 158, 159, 163, 169, 172, 182, 193, 195, 196, 206, 207, 209, 213, 239, 240, 253, 259, 262, 263, 267, 268, 274, 276, 278, 283], "access": [1, 7, 13, 17, 21, 24, 35, 36, 54, 72, 79, 92, 94, 97, 99, 102, 103, 104, 109, 112, 120, 121, 130, 139, 143, 150, 154, 170, 172, 177, 179, 181, 191, 192, 195, 200, 206, 209, 221, 239, 243, 249, 266, 274, 275, 277, 278, 281, 283], "just": [1, 2, 3, 4, 7, 9, 12, 13, 17, 19, 20, 21, 24, 34, 47, 48, 50, 53, 54, 55, 56, 57, 60, 71, 76, 77, 89, 92, 94, 95, 97, 99, 102, 104, 105, 106, 108, 109, 111, 112, 120, 121, 127, 130, 138, 139, 142, 144, 145, 146, 152, 155, 160, 161, 166, 169, 170, 172, 175, 176, 177, 178, 179, 180, 181, 182, 189, 191, 192, 193, 195, 196, 198, 201, 207, 209, 214, 225, 226, 227, 239, 240, 243, 244, 245, 258, 267, 268, 276, 283], "detach": [1, 2, 7, 14, 34, 94, 102, 108, 141, 166, 171, 263], "version": [1, 3, 4, 7, 9, 12, 13, 15, 17, 95, 97, 99, 102, 103, 112, 113, 114, 116, 117, 138, 139, 143, 154, 155, 156, 158, 161, 163, 170, 172, 174, 175, 176, 177, 178, 186, 188, 189, 191, 196, 198, 199, 200, 212, 213, 214, 215, 224, 225, 229, 239, 245, 250, 254, 265, 266, 267, 269, 274, 282], "q": [1, 46, 53, 134, 137, 142, 162, 183, 191, 215, 283], "base": [1, 7, 13, 14, 17, 20, 21, 23, 27, 36, 47, 53, 61, 79, 89, 92, 94, 95, 99, 103, 104, 106, 114, 119, 121, 133, 134, 137, 138, 139, 140, 141, 144, 145, 147, 155, 162, 172, 174, 175, 176, 179, 181, 184, 188, 189, 191, 192, 195, 196, 198, 213, 224, 237, 239, 240, 250, 254, 255, 263, 268, 276, 278, 281, 282, 283, 287], "empir": [1, 166, 178], "bootstrap": [1, 155], "td": 1, "0": [1, 2, 3, 4, 5, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 55, 56, 59, 67, 68, 72, 74, 76, 77, 78, 79, 86, 89, 90, 92, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 124, 127, 130, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 196, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 221, 225, 226, 227, 229, 230, 231, 236, 237, 238, 239, 240, 244, 245, 247, 248, 251, 252, 253, 254, 255, 256, 258, 259, 261, 262, 263, 265, 266, 267, 268, 274, 275, 277, 278, 279, 282, 283, 284, 286], "low": [1, 4, 7, 17, 19, 27, 53, 56, 72, 86, 99, 106, 120, 132, 137, 145, 188, 195, 199, 214, 215, 239, 281], "varianc": [1, 7, 24, 101, 178], "bia": [1, 2, 7, 24, 46, 50, 72, 97, 106, 112, 120, 121, 138, 147, 148, 155, 161, 170, 176, 178, 182, 183, 199, 237, 262, 278, 279, 283], "mean": [1, 2, 4, 7, 13, 15, 17, 24, 39, 50, 53, 55, 56, 72, 79, 86, 89, 94, 97, 99, 102, 104, 105, 106, 108, 111, 119, 120, 121, 130, 139, 142, 144, 145, 148, 152, 154, 163, 170, 172, 177, 178, 179, 181, 182, 184, 188, 189, 191, 195, 196, 200, 202, 204, 207, 212, 225, 229, 230, 239, 240, 245, 255, 258, 266, 274, 276, 279, 282, 286], "obtain": [1, 27, 34, 39, 53, 72, 92, 112, 120, 144, 145, 148, 154, 161, 171, 178, 179, 181, 188, 191, 198, 230, 244, 254, 266], "reward": [1, 17, 155, 162, 178, 179, 180, 182], "noth": [1, 79, 97, 112, 149, 172, 182, 188, 262], "els": [1, 5, 8, 12, 14, 23, 24, 50, 53, 92, 94, 111, 113, 130, 139, 140, 154, 174, 175, 180, 181, 182, 189, 191, 193, 195, 209, 212, 224, 255, 259, 263, 268, 278, 283], "mont": 1, "carlo": 1, "1": [1, 2, 3, 4, 5, 7, 8, 9, 12, 14, 15, 17, 18, 19, 20, 21, 23, 27, 34, 35, 38, 44, 46, 53, 56, 57, 59, 67, 72, 79, 90, 92, 94, 95, 97, 99, 102, 104, 105, 106, 108, 109, 111, 112, 113, 116, 117, 119, 120, 121, 124, 127, 130, 138, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 158, 159, 160, 161, 162, 163, 167, 169, 170, 171, 176, 177, 178, 179, 180, 181, 182, 183, 191, 193, 196, 199, 202, 206, 207, 208, 209, 212, 213, 214, 215, 221, 224, 229, 231, 238, 240, 248, 249, 254, 255, 258, 259, 263, 265, 267, 268, 269, 274, 275, 276, 277, 278, 279, 282, 283], "case": [1, 2, 3, 4, 7, 8, 9, 12, 13, 14, 16, 17, 20, 21, 34, 41, 46, 53, 55, 64, 72, 79, 86, 89, 94, 95, 101, 102, 104, 105, 106, 108, 109, 111, 112, 117, 120, 121, 133, 138, 139, 140, 142, 143, 144, 147, 148, 149, 154, 155, 156, 158, 160, 161, 163, 166, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 191, 193, 195, 196, 198, 199, 207, 223, 224, 225, 230, 231, 237, 239, 243, 244, 245, 250, 252, 253, 255, 258, 262, 263, 267, 274, 276, 277, 278, 279, 281, 282, 283, 286], "whole": [1, 3, 47, 50, 99, 112, 121, 137, 141, 154, 176, 178, 184, 196, 245, 275, 286], "sequenc": [1, 7, 15, 43, 52, 53, 71, 72, 99, 105, 107, 110, 111, 120, 121, 137, 145, 146, 155, 167, 170, 178, 183, 185, 192, 199, 204, 205, 209, 212, 224, 230, 240, 261, 263, 267, 279, 286, 287], "upcom": 1, "intermedi": [1, 80, 94, 99, 102, 130, 133, 150, 158, 160, 161, 162, 167, 169, 172, 185, 194, 199, 200, 225, 231, 283], "lambda": [1, 9, 112, 147, 177, 180, 195, 212, 224, 225, 283], "also": [1, 2, 4, 5, 7, 8, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 27, 34, 40, 43, 46, 50, 52, 53, 55, 56, 57, 58, 64, 71, 72, 79, 86, 89, 92, 94, 95, 97, 99, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 119, 120, 121, 130, 138, 139, 141, 142, 143, 144, 145, 146, 148, 149, 152, 154, 155, 158, 160, 161, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 188, 191, 193, 195, 196, 198, 199, 200, 202, 205, 206, 207, 208, 209, 212, 213, 214, 215, 221, 224, 225, 226, 229, 230, 237, 238, 239, 240, 242, 243, 244, 245, 249, 250, 251, 253, 254, 256, 258, 259, 262, 263, 265, 269, 274, 275, 276, 277, 282, 283, 286], "compromis": 1, "easi": [1, 2, 7, 27, 36, 47, 48, 55, 72, 94, 95, 102, 104, 106, 139, 140, 142, 144, 154, 161, 166, 170, 174, 178, 188, 192, 195, 196, 214, 225, 239, 255, 268, 283, 286], "valueestim": 1, "enum": 1, "pointer": [1, 7, 9, 10, 181], "defin": [1, 2, 8, 15, 17, 18, 19, 20, 21, 23, 34, 39, 40, 41, 44, 46, 48, 56, 65, 68, 69, 71, 72, 73, 79, 89, 92, 94, 99, 101, 103, 105, 106, 111, 112, 114, 117, 121, 131, 138, 139, 143, 145, 147, 150, 154, 155, 156, 159, 162, 166, 169, 171, 172, 179, 180, 181, 183, 186, 188, 189, 192, 193, 195, 199, 200, 204, 206, 207, 212, 213, 214, 228, 229, 230, 236, 237, 245, 247, 251, 253, 254, 255, 259, 260, 261, 265, 274, 281, 282, 283], "default": [1, 3, 4, 5, 7, 12, 13, 14, 18, 21, 24, 27, 34, 39, 43, 46, 48, 53, 55, 56, 59, 66, 67, 86, 97, 99, 101, 102, 106, 108, 113, 117, 120, 127, 130, 137, 138, 139, 140, 141, 142, 145, 154, 155, 156, 158, 160, 163, 169, 172, 175, 177, 180, 181, 182, 188, 189, 191, 193, 195, 196, 199, 202, 206, 207, 213, 214, 221, 225, 228, 229, 230, 236, 238, 240, 243, 245, 248, 249, 250, 253, 255, 258, 259, 261, 262, 263, 265, 268, 277, 278, 281, 282], "here": [1, 2, 3, 4, 7, 8, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 27, 36, 39, 40, 43, 44, 47, 50, 52, 54, 55, 56, 57, 59, 73, 79, 85, 86, 89, 92, 94, 95, 97, 99, 102, 103, 104, 106, 108, 109, 111, 112, 119, 120, 121, 124, 127, 130, 138, 139, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 169, 170, 171, 172, 176, 178, 179, 181, 182, 183, 184, 188, 189, 192, 193, 195, 196, 198, 199, 205, 207, 208, 213, 214, 224, 225, 226, 229, 230, 240, 244, 245, 250, 252, 255, 258, 262, 269, 274, 276, 277, 278, 279, 281, 283], "take": [1, 2, 3, 4, 7, 8, 12, 14, 15, 17, 18, 19, 20, 21, 24, 35, 36, 43, 46, 47, 50, 52, 53, 54, 55, 56, 72, 79, 86, 89, 94, 95, 97, 99, 101, 102, 103, 104, 106, 108, 109, 111, 112, 117, 120, 121, 127, 141, 142, 143, 144, 145, 146, 147, 149, 152, 154, 159, 161, 162, 169, 170, 172, 177, 178, 179, 180, 181, 182, 184, 188, 189, 191, 193, 195, 196, 198, 199, 206, 207, 213, 214, 215, 225, 226, 227, 230, 237, 239, 240, 241, 242, 243, 244, 245, 250, 255, 258, 263, 267, 269, 274, 277, 279, 281, 283, 286], "simplest": [1, 7, 34, 50, 94, 102, 106, 155, 178, 184, 240], "show": [1, 13, 14, 19, 21, 23, 24, 27, 47, 55, 56, 64, 79, 86, 87, 89, 92, 94, 95, 97, 99, 102, 103, 112, 117, 119, 138, 141, 144, 145, 146, 148, 149, 152, 155, 156, 160, 163, 172, 175, 177, 179, 180, 182, 188, 189, 191, 193, 195, 196, 200, 205, 206, 207, 209, 214, 215, 221, 224, 225, 230, 238, 239, 240, 244, 245, 254, 255, 258, 259, 262, 274, 283], "chang": [1, 2, 7, 8, 9, 13, 14, 15, 17, 24, 27, 34, 43, 46, 52, 54, 55, 56, 57, 59, 86, 87, 89, 92, 94, 95, 97, 98, 103, 104, 105, 107, 108, 109, 114, 121, 130, 131, 137, 138, 141, 142, 144, 145, 147, 150, 151, 154, 155, 158, 160, 161, 162, 169, 170, 172, 175, 176, 180, 188, 191, 193, 195, 196, 199, 200, 202, 205, 206, 207, 212, 214, 224, 225, 228, 236, 237, 238, 240, 241, 244, 248, 253, 254, 255, 256, 258, 261, 267, 268, 276, 278, 279, 281, 282], "instruct": [1, 7, 24, 27, 38, 95, 98, 101, 103, 145, 146, 155, 158, 174, 176, 178, 180, 182, 184, 202, 213, 214, 221, 223, 240, 258, 260], "queri": [1, 9, 17, 53, 97, 102, 121, 141, 181, 183, 198, 199, 263, 279], "correspond": [1, 2, 3, 4, 7, 12, 13, 15, 17, 18, 35, 36, 40, 46, 53, 59, 86, 94, 95, 99, 101, 106, 109, 119, 121, 138, 143, 144, 147, 160, 169, 174, 176, 178, 181, 184, 186, 188, 189, 191, 193, 195, 196, 198, 199, 207, 223, 229, 230, 240, 258, 260, 266, 277, 282], "make_value_estim": 1, "central": [1, 12, 79, 94, 102, 103, 109, 111, 150, 243], "quit": [1, 7, 21, 53, 79, 143, 154, 169, 178, 182, 195, 196, 206, 209, 212, 225, 239, 274, 283], "weight": [1, 2, 3, 7, 15, 16, 17, 21, 24, 27, 34, 35, 46, 47, 53, 66, 67, 70, 71, 72, 73, 74, 76, 77, 79, 94, 97, 99, 102, 103, 104, 106, 107, 109, 112, 121, 127, 138, 145, 147, 148, 150, 155, 156, 160, 161, 163, 169, 170, 171, 176, 178, 179, 182, 184, 188, 191, 192, 196, 199, 206, 213, 227, 237, 242, 243, 248, 255, 261, 262, 267, 278, 281, 283], "when": [1, 4, 7, 9, 12, 13, 14, 15, 17, 18, 19, 21, 23, 34, 36, 39, 41, 43, 46, 47, 48, 50, 52, 53, 54, 56, 57, 59, 64, 79, 86, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 108, 111, 112, 113, 116, 117, 119, 120, 121, 130, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 151, 152, 154, 155, 158, 159, 160, 162, 163, 166, 169, 170, 172, 175, 176, 178, 179, 180, 182, 183, 184, 188, 191, 193, 195, 196, 198, 199, 200, 202, 205, 207, 208, 209, 213, 215, 221, 224, 225, 227, 229, 230, 231, 237, 239, 240, 241, 243, 244, 249, 250, 252, 253, 255, 258, 259, 260, 265, 267, 274, 277, 278, 279, 281, 282, 283], "must": [1, 2, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 35, 36, 53, 56, 71, 79, 89, 94, 95, 102, 105, 111, 116, 117, 120, 121, 139, 152, 154, 155, 156, 158, 172, 178, 181, 188, 191, 193, 195, 196, 208, 229, 231, 237, 240, 252, 262, 265, 266, 274, 275, 277, 279, 286], "sure": [1, 7, 9, 12, 13, 14, 17, 24, 41, 55, 61, 92, 97, 101, 104, 105, 111, 117, 121, 130, 138, 142, 147, 152, 154, 155, 159, 172, 178, 180, 191, 196, 200, 214, 223, 224, 229, 238, 240, 249, 250, 252, 275, 277, 286], "out": [1, 2, 4, 7, 8, 9, 12, 13, 14, 17, 18, 19, 21, 27, 34, 38, 39, 43, 44, 46, 47, 48, 52, 53, 55, 56, 62, 63, 64, 79, 81, 82, 83, 84, 85, 87, 89, 92, 94, 95, 97, 99, 102, 104, 105, 107, 109, 112, 116, 119, 130, 136, 137, 138, 140, 141, 142, 143, 144, 145, 149, 150, 152, 154, 155, 156, 159, 160, 161, 169, 170, 172, 175, 176, 177, 178, 180, 181, 182, 184, 188, 189, 191, 195, 196, 199, 200, 201, 202, 203, 209, 215, 217, 218, 219, 220, 222, 223, 228, 230, 236, 237, 240, 244, 250, 253, 254, 255, 258, 260, 261, 263, 265, 271, 272, 274, 275, 276, 277, 279, 280, 281, 283, 286, 287], "graph": [1, 13, 17, 19, 50, 53, 66, 69, 72, 76, 77, 86, 89, 91, 94, 105, 107, 113, 116, 117, 120, 130, 131, 137, 143, 145, 149, 159, 160, 161, 163, 181, 182, 188, 189, 191, 192, 199, 200, 202, 212, 214, 215, 227, 238, 244, 245, 249, 250, 254, 256, 262, 268, 269], "otherwis": [1, 4, 12, 13, 24, 35, 40, 53, 59, 66, 79, 86, 89, 102, 112, 120, 121, 127, 130, 138, 143, 149, 152, 155, 160, 161, 163, 169, 178, 179, 181, 193, 196, 200, 239, 253, 258, 283, 286], "mix": [1, 12, 18, 64, 119, 163, 214, 228, 236, 260, 261, 281], "For": [1, 2, 4, 5, 7, 8, 9, 10, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 34, 39, 40, 43, 44, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 59, 66, 67, 72, 79, 86, 87, 92, 95, 99, 101, 102, 103, 104, 105, 106, 107, 109, 111, 112, 114, 120, 121, 124, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 154, 155, 156, 159, 160, 162, 163, 170, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 191, 192, 193, 195, 196, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 221, 223, 224, 225, 227, 229, 231, 237, 238, 239, 240, 241, 242, 243, 245, 251, 252, 253, 256, 258, 259, 262, 263, 265, 266, 267, 268, 274, 275, 276, 277, 279, 281, 282, 283], "hold_out_param": 1, "now": [1, 2, 7, 8, 9, 12, 13, 14, 15, 18, 19, 20, 21, 23, 27, 39, 40, 46, 47, 48, 50, 53, 54, 55, 56, 59, 79, 89, 92, 93, 94, 95, 101, 102, 104, 106, 108, 111, 112, 114, 117, 120, 127, 130, 137, 139, 142, 143, 144, 145, 147, 148, 149, 152, 154, 155, 159, 160, 161, 162, 166, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 186, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 205, 206, 207, 226, 227, 237, 238, 239, 242, 244, 250, 262, 263, 267, 269, 274, 275, 279, 281, 282, 283, 286], "reli": [1, 3, 4, 7, 12, 17, 41, 53, 94, 111, 114, 143, 162, 169, 172, 176, 178, 195, 202, 240, 269, 276, 278], "miss": [1, 55, 121, 147, 152, 155, 188, 193, 224, 239, 241, 258, 263, 275], "glue": [1, 182], "cost": [1, 17, 53, 104, 106, 119, 138, 139, 142, 143, 147, 166, 188, 195, 206, 226, 240, 253, 254], "deliv": [1, 202, 214, 252], "most": [1, 2, 9, 14, 17, 21, 34, 38, 46, 53, 55, 56, 79, 92, 94, 95, 97, 99, 102, 106, 108, 109, 112, 119, 120, 121, 127, 133, 138, 142, 143, 144, 146, 148, 149, 154, 159, 160, 162, 163, 169, 172, 177, 178, 180, 181, 182, 183, 184, 188, 191, 193, 195, 196, 199, 206, 214, 215, 223, 230, 237, 239, 240, 245, 249, 253, 255, 258, 276, 277, 278, 283], "first": [1, 2, 3, 4, 5, 7, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 27, 38, 41, 44, 47, 48, 53, 54, 55, 56, 57, 59, 64, 72, 73, 79, 86, 87, 89, 92, 94, 97, 99, 102, 104, 106, 108, 109, 111, 112, 117, 119, 120, 121, 130, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 154, 155, 156, 158, 159, 160, 161, 166, 169, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 184, 188, 191, 192, 193, 195, 196, 198, 199, 200, 206, 207, 209, 213, 215, 224, 225, 227, 229, 230, 237, 240, 244, 245, 250, 252, 253, 254, 255, 258, 262, 263, 265, 267, 269, 274, 276, 277, 279, 283, 286], "taken": [1, 7, 9, 12, 17, 24, 86, 87, 99, 155, 169, 178, 191, 195, 231, 254, 267, 281], "care": [1, 4, 17, 79, 92, 94, 104, 149, 154, 172, 178, 182, 199, 206, 225, 226, 239, 274], "condit": [1, 17, 53, 59, 102, 109, 113, 138, 154, 170, 172, 193, 195, 282], "remaind": [1, 97, 158], "cheetah": 1, "goal": [1, 7, 17, 18, 47, 53, 56, 64, 79, 89, 104, 143, 144, 154, 155, 159, 178, 180, 182, 265, 274], "half": [1, 12, 21, 127, 174, 224, 259, 283], "fast": [1, 7, 21, 23, 53, 94, 112, 138, 142, 152, 166, 172, 178, 183, 191, 196, 199, 239, 265, 267, 283, 287], "dm_control": 1, "gym": [1, 17, 134, 137, 155, 162, 178, 179, 180, 182, 199], "env": [1, 23, 141, 151, 154, 155, 178, 179, 180, 182, 225, 239, 255, 263, 265], "gymenv": [1, 178], "halfcheetah": 1, "v4": 1, "dmcontrolenv": 1, "By": [1, 12, 21, 24, 34, 43, 46, 66, 67, 86, 92, 94, 102, 108, 111, 112, 113, 120, 130, 139, 142, 144, 154, 156, 158, 159, 160, 169, 176, 179, 188, 192, 195, 200, 206, 207, 212, 221, 227, 230, 240, 245, 249, 250, 252, 255, 258, 265, 268, 275, 277, 279, 283], "disabl": [1, 8, 14, 18, 130, 138, 139, 147, 162, 166, 177, 181, 183, 188, 193, 207, 224, 249, 258, 267, 274, 275, 276, 277, 282], "render": [1, 7, 86, 95, 101, 162, 172, 178], "easier": [1, 21, 23, 27, 54, 55, 105, 112, 138, 144, 160, 169, 180, 184, 189, 207, 225, 239, 252, 267, 274, 277, 283, 286], "than": [1, 3, 4, 7, 12, 13, 14, 15, 16, 17, 21, 24, 47, 52, 53, 54, 56, 57, 64, 71, 73, 79, 86, 89, 94, 97, 99, 102, 104, 105, 106, 108, 111, 112, 114, 120, 121, 127, 137, 138, 139, 141, 144, 146, 148, 151, 152, 154, 156, 160, 161, 162, 166, 169, 170, 171, 172, 177, 178, 179, 180, 188, 189, 191, 192, 193, 196, 198, 199, 202, 225, 229, 240, 241, 249, 255, 258, 260, 265, 267, 274, 279, 283], "imag": [1, 24, 35, 36, 38, 44, 46, 50, 53, 55, 56, 61, 79, 86, 92, 95, 97, 99, 102, 103, 104, 112, 131, 132, 134, 135, 137, 142, 147, 156, 162, 163, 169, 171, 179, 186, 188, 189, 196, 198, 202, 209, 223, 227, 238, 241, 242, 260, 279, 281], "focu": [1, 4, 7, 13, 23, 95, 104, 106, 130, 139, 142, 143, 178, 180, 182, 184, 195, 215, 267, 275], "pass": [1, 2, 3, 4, 7, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 24, 34, 35, 36, 39, 40, 41, 46, 47, 53, 55, 56, 57, 60, 66, 67, 69, 71, 76, 77, 86, 89, 92, 94, 95, 97, 99, 102, 103, 104, 106, 108, 109, 112, 113, 120, 121, 130, 131, 137, 138, 139, 142, 143, 144, 145, 148, 149, 150, 152, 154, 155, 156, 158, 159, 162, 163, 166, 170, 171, 174, 176, 178, 179, 180, 181, 182, 184, 185, 188, 191, 193, 195, 196, 199, 200, 205, 207, 208, 212, 213, 224, 225, 229, 230, 231, 237, 240, 243, 244, 259, 261, 262, 263, 267, 274, 277], "pixel": [1, 35, 44, 47, 79, 99, 102, 104, 155, 163, 186, 191, 255], "from_pixel": 1, "true": [1, 2, 4, 5, 7, 8, 9, 13, 14, 15, 18, 19, 24, 27, 34, 36, 39, 41, 44, 46, 50, 53, 55, 66, 67, 86, 92, 94, 97, 102, 108, 114, 116, 119, 120, 121, 127, 130, 138, 139, 140, 141, 144, 147, 148, 149, 152, 154, 155, 158, 160, 163, 170, 177, 180, 181, 182, 183, 188, 189, 191, 193, 195, 198, 199, 206, 207, 212, 214, 215, 230, 237, 243, 245, 248, 252, 258, 259, 262, 263, 265, 268, 275, 276, 277, 278, 281, 282, 283], "pixels_onli": 1, "make_env": 1, "helper": [1, 12, 20, 21, 50, 55, 59, 95, 101, 103, 104, 105, 113, 138, 139, 144, 145, 146, 154, 155, 179, 180, 181, 182, 184, 186, 189, 191, 198, 204, 205, 230, 255, 283], "either": [1, 2, 4, 7, 12, 19, 24, 47, 53, 77, 92, 103, 104, 112, 114, 121, 127, 139, 142, 152, 155, 163, 176, 179, 180, 181, 188, 193, 195, 199, 214, 221, 224, 230, 237, 240, 252, 277, 279, 282, 283], "backend": [1, 7, 8, 10, 14, 17, 23, 27, 57, 59, 131, 132, 133, 136, 137, 144, 147, 151, 152, 155, 163, 177, 178, 185, 188, 193, 195, 196, 202, 213, 221, 224, 251, 255, 260, 261, 263, 269, 278, 282], "consid": [1, 4, 7, 13, 14, 17, 34, 41, 53, 72, 79, 86, 120, 130, 138, 140, 149, 152, 154, 163, 166, 169, 170, 172, 175, 180, 184, 188, 193, 195, 196, 198, 206, 229, 230, 231, 250, 265, 274, 275, 276, 278, 286], "abov": [1, 3, 4, 7, 9, 10, 12, 13, 14, 17, 18, 20, 24, 46, 47, 53, 55, 56, 69, 71, 72, 79, 86, 94, 95, 97, 99, 101, 102, 104, 105, 106, 108, 109, 111, 112, 120, 130, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 154, 158, 160, 161, 162, 163, 166, 169, 170, 171, 172, 174, 176, 178, 180, 181, 182, 183, 188, 191, 193, 195, 196, 198, 206, 207, 208, 209, 213, 214, 221, 223, 225, 229, 230, 237, 238, 244, 249, 255, 258, 262, 263, 265, 267, 269, 274, 275, 276, 277, 278, 282], "dm": 1, "want": [1, 2, 4, 7, 8, 9, 10, 12, 13, 15, 17, 18, 20, 24, 27, 34, 35, 36, 39, 41, 46, 47, 50, 53, 55, 56, 64, 66, 67, 71, 79, 89, 92, 94, 95, 97, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 120, 121, 127, 141, 142, 143, 144, 154, 155, 156, 158, 159, 161, 163, 166, 170, 172, 174, 176, 177, 178, 181, 183, 184, 186, 191, 192, 193, 195, 196, 198, 199, 200, 207, 208, 221, 224, 225, 229, 237, 239, 241, 252, 254, 274, 276, 281, 286, 287], "modifi": [1, 3, 7, 13, 14, 17, 24, 40, 44, 46, 47, 56, 79, 104, 105, 142, 145, 154, 159, 160, 175, 178, 180, 184, 195, 199, 200, 237, 253, 255, 262, 263], "represent": [1, 13, 17, 46, 56, 89, 95, 99, 101, 104, 106, 109, 111, 113, 114, 116, 131, 144, 159, 162, 184, 188, 189, 192, 195, 196, 199, 225, 237, 239, 254, 279], "more": [1, 2, 3, 4, 7, 9, 10, 12, 13, 14, 17, 18, 19, 21, 24, 36, 38, 39, 40, 43, 46, 47, 48, 52, 53, 54, 55, 56, 57, 59, 60, 64, 71, 79, 89, 95, 97, 99, 101, 103, 104, 105, 106, 108, 109, 111, 112, 114, 116, 119, 120, 121, 127, 130, 132, 133, 137, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 158, 159, 162, 166, 169, 170, 172, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 189, 191, 192, 193, 195, 196, 198, 199, 200, 202, 207, 208, 209, 213, 214, 215, 221, 223, 229, 237, 239, 240, 244, 245, 250, 252, 253, 254, 255, 256, 258, 259, 261, 262, 265, 267, 274, 275, 276, 277, 279, 281, 283, 286, 287], "friendli": [1, 18, 201, 224], "append": [1, 8, 12, 17, 20, 23, 24, 53, 102, 119, 121, 139, 154, 176, 178, 180, 181, 182, 184, 189, 212, 258, 283], "special": [1, 9, 13, 23, 43, 52, 97, 99, 106, 108, 111, 112, 117, 134, 143, 155, 163, 175, 176, 188, 191, 207, 237, 240, 255, 279, 281], "torchr": 1, "transformedenv": [1, 17, 178], "common": [1, 7, 12, 13, 17, 19, 21, 24, 39, 40, 47, 53, 55, 64, 86, 97, 102, 104, 106, 108, 111, 113, 121, 127, 131, 137, 142, 152, 156, 159, 162, 170, 172, 176, 177, 178, 183, 191, 195, 196, 198, 225, 226, 239, 240, 241, 245, 251, 260, 276, 279, 283], "rescal": [1, 55, 198, 267], "heurist": [1, 86, 213, 252, 265], "multipli": [1, 4, 15, 24, 52, 53, 94, 95, 97, 102, 112, 184, 192, 239, 251], "5": [1, 2, 3, 7, 14, 21, 27, 38, 44, 48, 51, 53, 56, 69, 86, 89, 92, 97, 99, 101, 103, 106, 108, 109, 110, 111, 116, 119, 120, 121, 138, 139, 148, 152, 154, 156, 160, 163, 170, 177, 180, 181, 182, 191, 195, 196, 198, 199, 202, 204, 209, 212, 213, 214, 221, 238, 245, 248, 265, 266, 269, 282, 283, 286], "interfac": [1, 4, 7, 9, 17, 18, 53, 102, 112, 144, 151, 154, 178, 191, 196, 214, 221, 255, 268], "between": [1, 7, 9, 12, 14, 15, 17, 20, 21, 24, 35, 43, 50, 52, 53, 69, 77, 79, 86, 87, 89, 92, 94, 97, 99, 102, 104, 105, 106, 109, 111, 112, 120, 130, 135, 137, 138, 140, 142, 144, 154, 155, 159, 163, 166, 172, 174, 176, 179, 181, 182, 183, 184, 189, 191, 193, 195, 196, 198, 199, 200, 206, 208, 224, 225, 226, 230, 240, 245, 255, 256, 259, 263, 265, 266, 267, 268, 274, 275, 277, 281, 283, 287], "simul": [1, 21, 23, 24, 99, 147, 178, 209, 215, 283], "work": [1, 2, 4, 5, 7, 9, 10, 15, 17, 19, 21, 23, 38, 39, 46, 53, 54, 55, 56, 59, 60, 64, 79, 89, 92, 94, 95, 97, 99, 102, 103, 104, 105, 107, 111, 112, 113, 116, 130, 137, 143, 145, 146, 148, 149, 150, 152, 154, 155, 156, 158, 159, 161, 169, 170, 171, 172, 175, 176, 177, 178, 180, 182, 183, 184, 188, 191, 192, 195, 196, 198, 199, 200, 202, 206, 209, 213, 214, 215, 224, 225, 230, 237, 239, 240, 245, 248, 249, 252, 255, 265, 267, 274, 275, 276, 277, 283, 286], "doubl": [1, 2, 4, 5, 7, 39, 94, 101, 112, 119, 134, 136, 137, 148, 155, 162, 171, 178, 189, 213, 224], "precis": [1, 12, 13, 18, 64, 143, 148, 149, 163, 172, 178, 189, 213, 214, 215, 228, 236, 245, 260, 261, 281], "number": [1, 4, 7, 14, 15, 18, 23, 24, 36, 39, 44, 47, 55, 56, 57, 59, 69, 86, 89, 92, 94, 97, 99, 104, 106, 108, 111, 112, 119, 120, 121, 138, 139, 141, 142, 143, 144, 145, 151, 152, 154, 155, 156, 158, 160, 161, 166, 170, 172, 174, 176, 177, 178, 179, 180, 181, 182, 188, 191, 193, 196, 198, 200, 204, 207, 213, 225, 227, 230, 239, 240, 244, 250, 256, 258, 265, 267, 277, 278, 279, 286], "presum": 1, "singl": [1, 2, 4, 7, 9, 12, 13, 14, 18, 21, 23, 40, 43, 46, 50, 55, 57, 58, 59, 60, 64, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 106, 112, 137, 138, 139, 140, 142, 145, 147, 148, 149, 150, 151, 152, 154, 155, 161, 162, 166, 171, 172, 174, 178, 179, 180, 181, 182, 184, 188, 191, 193, 195, 196, 199, 207, 213, 225, 239, 240, 244, 255, 258, 262, 263, 265, 267, 279, 283, 286], "ones": [1, 2, 4, 7, 8, 14, 17, 19, 24, 97, 99, 102, 104, 130, 154, 156, 159, 170, 171, 172, 174, 175, 178, 179, 188, 195, 199, 239, 255, 262, 275], "goe": [1, 55, 102, 105, 106, 137, 141, 149, 161, 175, 178, 181, 196], "wai": [1, 2, 4, 7, 9, 12, 13, 14, 15, 17, 34, 38, 40, 43, 46, 47, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 71, 76, 79, 86, 92, 94, 95, 97, 98, 102, 105, 106, 108, 111, 112, 114, 116, 117, 121, 130, 133, 138, 142, 143, 144, 145, 149, 151, 152, 158, 159, 160, 161, 162, 163, 166, 169, 170, 174, 176, 178, 180, 181, 183, 186, 189, 192, 195, 196, 198, 199, 207, 223, 226, 230, 231, 237, 240, 252, 262, 263, 267, 275, 276, 277, 279, 287], "repres": [1, 4, 13, 15, 16, 23, 35, 46, 53, 55, 56, 64, 66, 79, 86, 89, 94, 95, 97, 99, 103, 104, 111, 113, 114, 116, 119, 120, 138, 139, 140, 142, 144, 145, 147, 155, 158, 159, 162, 163, 178, 179, 182, 184, 191, 195, 196, 198, 199, 225, 227, 237, 239, 244, 265, 274, 279], "doubletofloat": [1, 178], "in_kei": [1, 17, 155, 178], "list": [1, 4, 5, 7, 8, 12, 14, 15, 17, 18, 20, 24, 27, 36, 40, 43, 47, 50, 52, 53, 54, 56, 72, 79, 92, 95, 99, 102, 108, 109, 111, 113, 114, 116, 117, 120, 143, 146, 154, 163, 170, 172, 177, 180, 181, 182, 184, 188, 189, 191, 193, 195, 196, 209, 212, 223, 225, 229, 230, 249, 255, 258, 268, 276, 279, 281, 283], "refer": [1, 4, 5, 7, 9, 10, 12, 16, 18, 21, 27, 34, 40, 64, 79, 86, 89, 94, 95, 102, 104, 106, 108, 109, 111, 113, 114, 116, 117, 119, 121, 138, 139, 140, 142, 143, 146, 147, 151, 152, 154, 160, 169, 172, 176, 178, 180, 181, 182, 188, 191, 195, 196, 198, 199, 213, 215, 223, 224, 225, 227, 229, 230, 237, 240, 250, 252, 255, 258, 265, 269, 274, 277, 281, 282, 283], "float": [1, 4, 5, 7, 12, 14, 24, 44, 97, 102, 108, 111, 119, 138, 139, 142, 144, 154, 163, 175, 176, 180, 182, 195, 196, 198, 212, 213, 215, 224, 230, 237, 262, 265, 267, 268, 276, 277, 278], "while": [1, 2, 3, 7, 8, 14, 15, 16, 17, 21, 24, 36, 39, 53, 56, 59, 86, 95, 102, 113, 114, 119, 131, 133, 137, 139, 140, 141, 143, 144, 147, 150, 152, 154, 155, 160, 161, 163, 169, 172, 176, 177, 178, 181, 182, 183, 184, 186, 193, 195, 196, 206, 215, 224, 225, 229, 230, 237, 244, 245, 249, 252, 255, 262, 265, 267, 274, 275, 276, 277, 278, 279, 281, 283], "in_keys_inv": [1, 17], "befor": [1, 3, 4, 7, 12, 13, 14, 15, 17, 20, 24, 34, 39, 41, 46, 47, 48, 50, 53, 55, 56, 59, 64, 79, 89, 94, 95, 99, 104, 105, 106, 108, 109, 111, 112, 114, 116, 117, 119, 120, 121, 127, 130, 131, 137, 139, 140, 142, 144, 145, 147, 152, 154, 155, 158, 160, 162, 167, 169, 170, 172, 174, 176, 177, 178, 180, 181, 182, 184, 188, 189, 192, 193, 195, 196, 198, 200, 206, 209, 224, 225, 227, 229, 238, 240, 241, 242, 243, 244, 245, 249, 250, 252, 253, 258, 259, 262, 265, 274, 275, 277, 282], "concaten": [1, 17, 43, 52, 53, 108, 109, 142, 146, 179], "cattensor": 1, "leav": [1, 12, 19, 21, 34, 46, 53, 55, 57, 89, 94, 130, 144, 169, 170, 177, 213, 237, 283], "constant": [1, 2, 7, 43, 52, 86, 92, 94, 102, 106, 141, 155, 170, 179, 189, 193, 195, 212, 240, 278, 283], "significantli": [1, 24, 109, 133, 142, 148, 172, 193, 231, 244, 250, 258, 267, 281], "speed": [1, 7, 13, 17, 24, 34, 36, 39, 52, 53, 89, 94, 97, 98, 104, 112, 131, 132, 133, 137, 139, 140, 142, 145, 150, 155, 156, 160, 163, 172, 177, 178, 180, 183, 193, 202, 206, 225, 238, 240, 244, 254, 255, 258, 260, 267, 268, 281, 287], "throughput": [1, 139, 172, 240, 258], "choos": [1, 12, 13, 15, 18, 53, 56, 59, 64, 69, 92, 95, 106, 120, 121, 141, 142, 146, 152, 154, 162, 170, 177, 178, 179, 184, 188, 191, 196, 198, 221, 224, 230, 245, 263, 267, 269], "whether": [1, 7, 12, 13, 14, 17, 53, 56, 94, 95, 97, 101, 102, 104, 112, 114, 121, 130, 149, 154, 159, 162, 169, 172, 178, 180, 188, 189, 191, 195, 225, 230, 240, 241, 262, 277], "individu": [1, 7, 15, 35, 53, 89, 94, 95, 99, 120, 140, 142, 144, 148, 171, 172, 176, 181, 184, 189, 193, 195, 196, 199, 221, 224, 225, 240, 250, 262], "approach": [1, 4, 7, 9, 10, 41, 60, 95, 112, 114, 116, 121, 141, 145, 150, 170, 171, 172, 178, 179, 181, 184, 193, 195, 198, 225, 237, 245, 265, 274, 277, 278, 281, 286], "parallelenv": [1, 178], "num_work": [1, 27, 47, 55, 92, 97, 138, 139, 188, 240], "4": [1, 2, 3, 4, 7, 12, 15, 19, 20, 22, 27, 38, 44, 48, 55, 57, 58, 59, 66, 67, 69, 74, 79, 92, 95, 97, 99, 101, 102, 103, 105, 106, 108, 111, 112, 118, 120, 135, 137, 138, 139, 141, 147, 148, 150, 151, 154, 155, 160, 162, 163, 169, 170, 174, 176, 179, 180, 181, 182, 191, 193, 195, 198, 199, 202, 206, 209, 213, 238, 245, 249, 250, 255, 258, 261, 263, 265, 267, 269, 277, 287], "leverag": [1, 7, 53, 79, 104, 114, 117, 121, 135, 137, 139, 142, 152, 154, 161, 198, 208, 209, 212, 215, 240, 241, 254, 258, 260, 268, 278, 282, 287], "vector": [1, 2, 7, 8, 9, 15, 17, 34, 53, 56, 86, 94, 95, 99, 101, 102, 104, 106, 108, 109, 111, 112, 145, 146, 147, 155, 158, 171, 175, 184, 196, 202, 213, 214, 240, 252, 268, 278, 286], "capabl": [1, 3, 14, 18, 21, 53, 79, 136, 142, 163, 172, 183, 188, 192, 202, 204, 205, 212, 224, 240, 283], "pytorch": [1, 2, 4, 5, 8, 12, 14, 17, 19, 21, 22, 23, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 47, 48, 52, 53, 55, 56, 57, 59, 60, 62, 63, 65, 68, 70, 74, 75, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 92, 94, 95, 104, 105, 110, 112, 113, 115, 116, 121, 122, 124, 127, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 166, 167, 169, 171, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 200, 201, 204, 205, 206, 207, 208, 209, 212, 217, 219, 220, 223, 224, 225, 226, 229, 232, 233, 234, 235, 236, 237, 239, 244, 245, 249, 250, 251, 252, 254, 255, 256, 258, 259, 260, 261, 263, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 285, 286, 287], "adopt": [1, 27, 64, 169, 175, 181, 215, 282], "frame_skip": [1, 178], "frame": [1, 7, 155, 162, 177, 178, 188, 255, 265], "count": [1, 7, 9, 14, 24, 39, 47, 53, 86, 106, 154, 155, 178, 182, 184, 188, 191, 208], "frames_per_batch": [1, 178], "total_fram": [1, 178], "adjust": [1, 5, 17, 24, 34, 39, 40, 46, 56, 79, 94, 97, 103, 142, 144, 145, 166, 180, 240], "total": [1, 14, 15, 16, 17, 19, 20, 21, 22, 34, 35, 36, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 59, 68, 72, 74, 76, 77, 78, 79, 87, 89, 90, 92, 94, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 122, 124, 127, 130, 139, 141, 143, 144, 145, 146, 148, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 169, 170, 171, 172, 176, 177, 178, 179, 181, 183, 184, 185, 186, 188, 191, 193, 195, 196, 198, 199, 200, 205, 212, 213, 225, 226, 229, 230, 231, 236, 237, 239, 244, 245, 247, 251, 252, 253, 254, 256, 258, 261, 267, 274, 275, 276, 277, 279, 284, 286], "rais": [1, 12, 14, 19, 24, 79, 113, 141, 142, 143, 160, 163, 177, 178, 193, 195, 206, 240, 253, 255], "skip": [1, 13, 17, 21, 24, 46, 105, 121, 149, 158, 162, 180, 182, 188, 193, 195, 199, 214, 225, 230, 243, 258, 282, 283], "unchang": [1, 12, 87, 94], "seem": [1, 47, 56, 143, 145, 155, 172, 174, 196, 225], "like": [1, 3, 4, 7, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 35, 36, 39, 40, 43, 46, 47, 48, 50, 52, 53, 55, 56, 57, 59, 64, 71, 72, 86, 89, 92, 94, 95, 97, 99, 102, 104, 105, 106, 108, 109, 111, 112, 113, 114, 117, 119, 120, 124, 127, 130, 131, 133, 134, 136, 137, 138, 142, 143, 144, 146, 149, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 166, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 183, 184, 188, 189, 191, 192, 195, 196, 198, 199, 200, 202, 207, 208, 209, 213, 214, 221, 223, 224, 225, 226, 227, 230, 239, 240, 244, 249, 250, 251, 252, 253, 255, 258, 262, 268, 275, 276, 277, 281, 282, 283, 286, 287], "cheat": [1, 102, 184], "compar": [1, 5, 13, 18, 21, 24, 39, 47, 87, 95, 102, 104, 109, 112, 117, 127, 138, 140, 141, 142, 144, 154, 159, 160, 161, 163, 166, 169, 171, 172, 176, 178, 179, 180, 182, 184, 188, 191, 193, 195, 199, 200, 202, 206, 212, 213, 214, 215, 229, 238, 239, 240, 253, 254, 258, 260, 263, 266, 267, 268, 274, 283, 287], "dataset": [1, 7, 21, 27, 34, 35, 37, 38, 39, 40, 41, 43, 44, 46, 47, 50, 53, 56, 57, 59, 61, 79, 95, 99, 104, 106, 122, 127, 137, 138, 139, 144, 145, 146, 150, 154, 156, 171, 172, 177, 181, 183, 184, 186, 188, 189, 191, 196, 200, 214, 216, 227, 240, 248, 255, 260, 261, 281, 283], "10m": 1, "element": [1, 7, 8, 15, 21, 24, 40, 43, 52, 53, 94, 95, 97, 99, 102, 106, 108, 109, 111, 130, 143, 154, 160, 166, 170, 178, 191, 195, 198, 225, 227, 240, 275, 276, 277, 279, 283], "2": [1, 2, 3, 4, 5, 7, 8, 12, 14, 15, 17, 18, 19, 20, 22, 23, 27, 35, 38, 44, 46, 53, 55, 56, 57, 59, 66, 67, 68, 71, 72, 73, 78, 79, 92, 94, 95, 97, 102, 104, 105, 106, 108, 111, 113, 116, 117, 120, 121, 124, 127, 130, 137, 138, 139, 140, 142, 144, 147, 148, 149, 150, 151, 152, 154, 155, 156, 160, 161, 163, 167, 169, 170, 171, 176, 177, 178, 179, 180, 181, 182, 183, 191, 193, 195, 196, 199, 202, 204, 205, 208, 209, 212, 213, 214, 215, 224, 226, 229, 237, 240, 244, 245, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 261, 263, 265, 266, 267, 268, 269, 274, 279, 282, 287], "anoth": [1, 4, 12, 14, 17, 34, 43, 46, 52, 53, 56, 66, 79, 89, 97, 99, 102, 103, 105, 109, 112, 119, 120, 121, 130, 137, 146, 147, 148, 149, 151, 154, 155, 158, 170, 172, 176, 178, 180, 181, 182, 183, 184, 192, 193, 195, 196, 198, 200, 223, 225, 230, 240, 241, 258, 262, 267], "actual": [1, 3, 7, 9, 12, 14, 16, 17, 18, 24, 34, 41, 53, 55, 56, 79, 89, 97, 104, 105, 108, 111, 117, 130, 136, 137, 140, 143, 144, 145, 148, 152, 154, 159, 169, 172, 178, 184, 188, 189, 193, 195, 196, 215, 225, 244, 251, 266, 267, 274, 276, 286], "ratio": [1, 86, 104, 160, 172, 178, 188, 198], "interact": [1, 7, 17, 53, 95, 101, 102, 144, 147, 149, 162, 178, 181, 189, 193, 195, 196, 201, 208, 252], "nutshel": [1, 276], "cautiou": 1, "about": [1, 4, 7, 9, 12, 13, 17, 18, 21, 24, 38, 39, 40, 43, 46, 53, 56, 57, 58, 59, 61, 76, 77, 79, 92, 94, 97, 99, 101, 102, 104, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 127, 130, 131, 133, 137, 139, 141, 144, 145, 146, 149, 151, 152, 154, 156, 159, 160, 161, 169, 171, 172, 177, 178, 179, 180, 182, 183, 184, 186, 188, 191, 193, 195, 196, 198, 199, 200, 206, 208, 209, 228, 229, 236, 237, 239, 242, 250, 254, 255, 260, 261, 265, 266, 267, 275, 276, 277, 282, 283, 287], "deal": [1, 47, 53, 55, 56, 97, 104, 112, 120, 121, 139, 161, 172, 178, 195, 196, 200, 208, 242], "lead": [1, 4, 7, 17, 19, 53, 56, 79, 86, 92, 104, 112, 145, 147, 149, 155, 156, 172, 195, 206, 237, 240, 244, 245, 258, 276, 286], "bias": [1, 35, 46, 99, 104, 121, 183, 199, 237, 242, 243], "comparison": [1, 21, 87, 95, 102, 103, 104, 105, 138, 160, 161, 239, 263, 267, 274, 276, 279, 281, 283], "scale": [1, 7, 24, 35, 44, 55, 60, 79, 99, 101, 104, 114, 132, 133, 137, 138, 139, 141, 152, 154, 155, 162, 174, 178, 179, 185, 186, 196, 208, 209, 224, 240, 245, 252, 261, 262, 263, 267], "help": [1, 4, 9, 12, 13, 18, 21, 23, 24, 34, 35, 46, 53, 56, 72, 86, 92, 95, 104, 105, 108, 109, 111, 112, 121, 132, 133, 135, 137, 138, 139, 144, 151, 152, 155, 156, 160, 161, 166, 169, 175, 178, 179, 180, 181, 182, 183, 184, 191, 193, 195, 196, 200, 201, 204, 206, 207, 209, 212, 215, 221, 223, 224, 225, 227, 238, 240, 241, 250, 252, 253, 256, 258, 260, 265, 267, 275, 276, 277, 279, 281, 282, 283, 286], "signal": [1, 46, 95, 97, 178, 180, 230, 239], "magnitud": [1, 21, 94, 176, 196, 224, 283], "truncat": [1, 102, 119, 160, 178, 283], "A": [1, 7, 8, 9, 12, 14, 15, 17, 21, 34, 35, 36, 40, 43, 50, 51, 52, 53, 55, 56, 57, 59, 66, 67, 71, 72, 73, 76, 77, 79, 86, 87, 97, 99, 102, 103, 104, 106, 108, 109, 111, 112, 113, 120, 121, 130, 133, 137, 139, 143, 144, 145, 146, 149, 150, 154, 156, 159, 163, 169, 170, 171, 178, 179, 180, 181, 183, 184, 185, 186, 189, 191, 193, 195, 196, 199, 200, 201, 207, 213, 214, 215, 225, 229, 237, 240, 242, 250, 252, 255, 258, 261, 265, 266, 278, 279, 282, 283], "thousand": [1, 111, 133, 142, 145, 155, 184, 191], "500": [1, 7, 27, 163, 174, 179, 182, 225], "good": [1, 2, 7, 47, 54, 56, 97, 101, 102, 104, 111, 114, 137, 138, 144, 154, 155, 160, 166, 177, 179, 183, 185, 189, 191, 195, 196, 198, 199, 221, 225, 240, 245, 258, 261, 278], "statist": [1, 56, 97, 131, 137, 148, 159, 176, 178, 184, 188, 189, 191, 225], "arbitrari": [1, 12, 17, 19, 34, 71, 77, 95, 104, 109, 120, 139, 156, 162, 171, 189, 193, 199, 230, 231], "random": [1, 7, 17, 20, 24, 43, 46, 47, 48, 50, 52, 55, 56, 66, 67, 69, 76, 77, 79, 95, 97, 101, 108, 109, 112, 113, 114, 119, 120, 127, 138, 139, 144, 146, 147, 152, 154, 156, 162, 166, 169, 170, 176, 178, 179, 180, 182, 184, 189, 193, 212, 225, 227, 231, 240], "standard": [1, 12, 43, 47, 52, 56, 86, 92, 95, 97, 104, 105, 106, 112, 114, 116, 117, 131, 154, 177, 186, 193, 195, 196, 198, 227, 240, 267, 279], "deviat": [1, 86, 97, 104], "observationnorm": [1, 178], "init_stat": 1, "purpos": [1, 9, 61, 79, 89, 94, 99, 103, 120, 138, 143, 144, 146, 154, 155, 159, 160, 169, 174, 177, 178, 181, 182, 188, 192, 193, 196, 207, 237, 240, 244, 245, 249, 265, 267, 275, 278], "get": [1, 2, 5, 7, 9, 10, 12, 14, 17, 18, 19, 20, 21, 24, 27, 36, 38, 46, 47, 48, 53, 54, 55, 56, 59, 60, 64, 79, 87, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 119, 120, 121, 127, 130, 132, 133, 136, 137, 139, 141, 142, 144, 145, 146, 147, 154, 156, 159, 161, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 184, 188, 189, 191, 192, 195, 196, 198, 201, 202, 206, 213, 221, 225, 230, 240, 243, 245, 255, 258, 259, 260, 261, 265, 266, 267, 269, 274, 281, 282, 283, 284], "summari": [1, 86, 111, 144, 155, 172, 178, 188, 195, 238, 239], "dummi": [1, 4, 12, 19, 89, 97, 103, 152, 156, 161, 171, 174, 175, 196, 200, 207, 255, 281], "over": [1, 4, 7, 9, 13, 14, 17, 19, 21, 23, 24, 35, 36, 39, 40, 43, 47, 50, 52, 53, 54, 55, 56, 57, 59, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 112, 119, 120, 135, 137, 138, 139, 140, 141, 142, 145, 147, 151, 152, 154, 156, 159, 160, 161, 162, 163, 166, 171, 176, 178, 179, 180, 181, 182, 183, 184, 188, 189, 191, 193, 195, 196, 198, 199, 200, 213, 224, 240, 243, 253, 254, 263, 267, 278, 283, 286], "earlier": [1, 7, 9, 79, 97, 99, 102, 105, 106, 109, 112, 138, 140, 142, 155, 169, 172, 178, 184, 195, 224, 225], "turn": [1, 7, 12, 17, 18, 24, 44, 53, 95, 99, 102, 119, 146, 155, 161, 169, 170, 172, 176, 180, 184, 196, 268, 275, 276, 278], "seen": [1, 13, 14, 23, 24, 47, 50, 53, 55, 99, 102, 104, 109, 111, 112, 119, 155, 171, 181, 193, 195, 196, 225, 244, 252, 278], "requir": [1, 2, 4, 5, 7, 8, 9, 12, 13, 15, 17, 18, 19, 23, 24, 27, 38, 44, 46, 53, 54, 55, 56, 59, 64, 87, 89, 92, 94, 98, 103, 111, 112, 116, 117, 130, 138, 142, 144, 146, 148, 149, 151, 152, 154, 155, 156, 158, 161, 166, 169, 170, 171, 172, 174, 177, 178, 180, 181, 182, 183, 184, 191, 192, 193, 195, 196, 198, 199, 202, 204, 205, 206, 207, 209, 213, 214, 215, 224, 226, 227, 229, 230, 237, 239, 240, 244, 245, 249, 250, 251, 252, 253, 256, 265, 266, 267, 268, 269, 275, 276, 277, 281, 286], "select": [1, 4, 13, 54, 86, 92, 101, 104, 112, 114, 154, 163, 176, 179, 180, 182, 188, 189, 193, 195, 213, 230, 240, 250, 252, 265, 269, 276, 278, 283], "recal": [1, 7, 56, 94, 102, 105, 111, 152, 178, 189, 237, 239, 275, 276, 277], "wrap": [1, 4, 7, 13, 20, 36, 40, 48, 92, 97, 106, 108, 109, 114, 119, 138, 140, 143, 148, 152, 155, 162, 172, 178, 181, 182, 191, 192, 195, 196, 200, 204, 205, 207, 208, 221, 224, 230, 259, 266], "flow": [1, 17, 34, 46, 56, 70, 74, 89, 101, 104, 114, 115, 116, 117, 131, 137, 140, 178, 179, 188, 193, 200, 240, 260, 261, 266, 281], "handl": [1, 5, 12, 13, 19, 53, 56, 57, 89, 99, 102, 112, 113, 117, 131, 137, 138, 142, 145, 156, 167, 171, 172, 174, 176, 177, 178, 181, 182, 183, 191, 192, 193, 195, 196, 202, 206, 207, 214, 223, 229, 230, 239, 255, 258, 274, 276, 279, 286], "specifi": [1, 4, 7, 9, 12, 14, 19, 21, 24, 27, 36, 40, 55, 56, 86, 92, 94, 95, 97, 99, 102, 103, 108, 113, 120, 138, 139, 140, 141, 142, 144, 145, 149, 155, 156, 158, 175, 176, 178, 181, 182, 188, 191, 195, 215, 229, 230, 238, 240, 241, 244, 249, 252, 254, 255, 258, 262, 263, 274, 275, 276, 277, 279, 281, 283, 286, 287], "scenario": [1, 7, 17, 113, 114, 116, 117, 121, 127, 130, 143, 172, 179, 182, 195, 213, 237, 241, 258, 265, 278], "tensordictsequenti": [1, 155], "valueoper": 1, "automat": [1, 2, 4, 5, 7, 9, 12, 13, 18, 35, 37, 38, 40, 43, 46, 48, 49, 50, 52, 57, 61, 64, 101, 103, 105, 112, 120, 124, 130, 132, 137, 138, 139, 140, 142, 143, 144, 149, 160, 163, 172, 174, 178, 179, 182, 185, 186, 188, 191, 192, 195, 196, 200, 202, 206, 207, 213, 214, 215, 221, 226, 228, 229, 230, 236, 239, 240, 252, 260, 261, 263, 265, 282], "out_kei": [1, 17, 155, 178], "state_action_valu": 1, "state_valu": 1, "built": [1, 4, 7, 9, 10, 12, 22, 34, 50, 94, 95, 97, 99, 106, 130, 137, 145, 154, 155, 178, 183, 189, 193, 195, 198, 223, 225, 227, 243, 250, 261], "present": [1, 7, 9, 12, 23, 39, 86, 87, 104, 113, 170, 175, 176, 179, 180, 182, 191, 193, 195, 198, 200, 240, 259, 279], "origin": [1, 7, 8, 12, 15, 17, 21, 24, 34, 53, 56, 79, 92, 95, 102, 104, 109, 114, 140, 142, 143, 145, 146, 166, 167, 170, 171, 172, 176, 179, 191, 192, 193, 195, 212, 214, 221, 255, 262, 267, 268, 277, 281, 283], "paper": [1, 15, 20, 21, 56, 79, 124, 139, 142, 178, 179, 181, 183, 184, 186, 196, 199, 200, 279, 283], "found": [1, 4, 5, 7, 9, 13, 20, 53, 54, 95, 104, 144, 152, 154, 155, 159, 163, 172, 181, 182, 183, 191, 195, 214, 221, 240, 255, 279], "ddpgmlpactor": 1, "ddpgmlpqnet": 1, "sinc": [1, 3, 4, 8, 12, 13, 14, 16, 17, 20, 24, 47, 53, 55, 56, 57, 79, 89, 94, 95, 97, 104, 105, 106, 108, 109, 111, 112, 127, 130, 140, 141, 142, 144, 145, 146, 147, 149, 150, 154, 155, 159, 169, 170, 172, 176, 177, 178, 179, 180, 181, 182, 183, 184, 189, 191, 193, 195, 196, 198, 199, 202, 204, 206, 207, 221, 225, 229, 230, 231, 243, 244, 245, 253, 255, 259, 262, 267, 274, 275, 276], "lazi": 1, "materi": [1, 138, 142, 161, 196, 199, 231, 237, 266, 274], "abl": [1, 3, 4, 7, 17, 18, 21, 34, 35, 53, 66, 79, 89, 97, 104, 105, 107, 111, 112, 120, 127, 144, 148, 149, 150, 151, 154, 155, 156, 160, 162, 163, 169, 171, 178, 181, 189, 193, 195, 196, 198, 199, 202, 212, 227, 237, 243, 252, 255, 265, 276, 283], "devic": [1, 3, 4, 5, 7, 12, 13, 14, 17, 19, 20, 21, 23, 24, 27, 43, 46, 47, 48, 52, 53, 54, 56, 57, 59, 60, 64, 67, 77, 92, 102, 104, 106, 114, 120, 133, 136, 137, 138, 140, 142, 144, 145, 151, 152, 154, 155, 156, 160, 163, 169, 172, 174, 176, 177, 178, 181, 182, 188, 196, 198, 204, 205, 206, 207, 209, 212, 213, 214, 215, 225, 228, 230, 231, 236, 237, 241, 243, 250, 251, 252, 254, 255, 256, 259, 260, 261, 262, 263, 265, 266, 268, 269, 281, 282, 283], "achiev": [1, 3, 4, 7, 17, 21, 24, 27, 34, 47, 53, 60, 86, 92, 104, 137, 140, 143, 148, 154, 155, 160, 169, 170, 172, 176, 178, 179, 188, 196, 199, 213, 240, 252, 254, 258, 260, 262, 266, 267, 283], "oper": [1, 7, 8, 16, 17, 18, 21, 22, 23, 24, 34, 35, 40, 46, 48, 50, 53, 55, 64, 66, 67, 71, 77, 86, 87, 89, 97, 98, 102, 104, 105, 106, 111, 112, 113, 114, 115, 116, 119, 120, 130, 131, 136, 137, 138, 140, 141, 142, 143, 145, 147, 149, 154, 155, 156, 158, 160, 161, 163, 166, 171, 174, 175, 177, 178, 180, 184, 188, 189, 191, 192, 193, 195, 196, 199, 200, 201, 207, 208, 212, 213, 214, 215, 221, 223, 224, 225, 227, 230, 231, 239, 243, 250, 251, 252, 255, 258, 259, 260, 261, 267, 274, 275, 278, 281, 283, 286, 287], "practic": [1, 7, 14, 41, 50, 53, 55, 56, 94, 95, 97, 102, 104, 106, 112, 113, 120, 124, 127, 132, 135, 137, 142, 143, 150, 155, 160, 163, 170, 176, 178, 179, 195, 199, 225, 226, 229, 240, 244, 245, 254, 255, 258, 274, 275, 279], "small": [1, 3, 7, 21, 23, 27, 46, 47, 50, 61, 79, 94, 97, 99, 101, 102, 104, 106, 107, 109, 114, 120, 127, 138, 139, 141, 144, 145, 146, 148, 159, 169, 170, 172, 177, 178, 179, 182, 184, 186, 191, 196, 198, 213, 224, 225, 227, 240, 255, 256, 265, 267, 274, 283], "fake": [1, 7, 21, 24, 50, 56, 169, 195, 279, 283], "spec": [1, 117, 155, 178, 182, 195, 225, 262], "ornsteinuhlenbeckprocessmodul": 1, "suggest": [1, 4, 15, 56, 91, 104, 140, 146, 160, 161, 162, 163, 166, 188, 191, 215, 265], "ou": 1, "nois": [1, 7, 15, 56, 79, 208, 239], "reach": [1, 8, 13, 21, 56, 64, 104, 130, 145, 152, 154, 162, 163, 178, 182, 195, 200, 225, 283], "minimum": [1, 4, 86, 140, 178, 182, 276], "iter": [1, 3, 7, 14, 15, 17, 27, 34, 35, 39, 40, 46, 47, 50, 56, 57, 59, 89, 92, 94, 95, 97, 99, 105, 112, 114, 121, 144, 147, 150, 152, 155, 160, 178, 179, 180, 181, 182, 188, 189, 193, 196, 198, 205, 215, 221, 224, 238, 240, 243, 253, 255, 259], "reset": [1, 24, 39, 97, 102, 112, 127, 155, 178, 179, 180, 182, 188, 193, 256, 268], "develop": [1, 3, 4, 12, 13, 15, 18, 27, 86, 89, 95, 108, 112, 114, 116, 131, 134, 147, 154, 163, 175, 182, 188, 193, 199, 207, 208, 212, 214, 228, 240, 262, 267, 268, 269, 274, 277, 278], "tight": [1, 113, 114, 116, 117], "per": [1, 4, 7, 12, 14, 24, 104, 111, 132, 137, 139, 145, 146, 148, 152, 154, 155, 161, 163, 169, 174, 176, 182, 183, 184, 185, 188, 189, 191, 195, 196, 198, 202, 206, 207, 225, 229, 239, 249, 258, 259, 261, 263, 265, 266, 274, 286], "sync": [1, 13, 14, 20, 59, 136, 137, 138, 139, 140, 141, 162, 196], "natur": [1, 7, 21, 23, 27, 48, 79, 99, 104, 112, 144, 145, 155, 172, 181, 191, 202, 276, 279, 283], "resourc": [1, 57, 79, 92, 114, 116, 138, 152, 154, 169, 178, 188, 191, 201, 212, 225, 240, 245, 248, 258, 265], "alloc": [1, 7, 9, 23, 43, 52, 59, 102, 148, 154, 169, 172, 188, 195, 196, 207, 229, 230, 259, 279], "gpu": [1, 3, 5, 10, 15, 21, 23, 24, 27, 43, 46, 50, 52, 53, 54, 56, 57, 58, 60, 61, 64, 67, 77, 86, 87, 97, 98, 102, 103, 104, 106, 114, 120, 124, 127, 133, 137, 138, 139, 140, 142, 143, 145, 150, 151, 152, 154, 155, 156, 160, 163, 166, 169, 171, 174, 178, 179, 181, 182, 183, 191, 193, 198, 202, 204, 206, 207, 215, 221, 224, 225, 230, 243, 250, 252, 260, 261, 263, 265, 266, 268, 269, 281, 283, 284], "worker": [1, 7, 14, 20, 55, 56, 97, 133, 138, 139, 141, 154, 163, 178, 181, 182, 188, 240], "so": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 21, 23, 24, 27, 34, 47, 50, 53, 55, 56, 57, 69, 72, 79, 87, 89, 92, 94, 95, 97, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 114, 119, 120, 127, 130, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 154, 155, 160, 161, 162, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 191, 193, 195, 196, 198, 199, 200, 212, 213, 214, 215, 221, 224, 225, 229, 239, 240, 243, 244, 253, 254, 255, 258, 259, 260, 262, 265, 266, 267, 274, 276, 277, 278, 279, 283], "syncdatacollector": [1, 178], "process": [1, 4, 5, 7, 9, 14, 15, 17, 18, 20, 21, 23, 27, 36, 39, 40, 44, 50, 53, 54, 55, 56, 60, 64, 79, 86, 89, 94, 95, 97, 99, 103, 104, 112, 113, 114, 121, 124, 131, 133, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 150, 151, 154, 155, 159, 160, 162, 163, 171, 172, 177, 179, 181, 182, 183, 184, 188, 191, 195, 196, 202, 206, 207, 209, 215, 225, 227, 229, 230, 239, 240, 241, 243, 249, 254, 255, 256, 258, 259, 260, 265, 266, 267, 278, 281, 282, 283], "offer": [1, 4, 5, 10, 14, 17, 19, 23, 40, 44, 46, 57, 64, 94, 95, 106, 139, 140, 142, 154, 156, 158, 160, 161, 172, 196, 199, 207, 223, 225, 230, 239, 240, 244, 245, 258], "multiasyncdatacollector": [1, 178], "rollout": [1, 178], "asynchron": [1, 133, 137, 141, 144, 175, 178, 182, 230, 260], "manner": [1, 12, 17, 24, 34, 94, 112, 178, 191, 196], "therebi": [1, 255, 268, 274, 279], "decoupl": [1, 36, 170], "factori": [1, 7, 102, 108, 226, 229, 275, 276], "empti": [1, 4, 7, 8, 12, 17, 24, 102, 146, 160, 170, 177, 184, 188, 191, 195, 199, 230, 239, 266], "maximum": [1, 14, 53, 86, 97, 99, 109, 144, 146, 155, 160, 178, 183, 184, 240, 278], "non": [1, 2, 3, 9, 12, 14, 17, 24, 35, 53, 55, 57, 58, 60, 86, 89, 99, 102, 104, 105, 107, 111, 112, 121, 122, 137, 139, 140, 144, 148, 149, 154, 155, 158, 161, 163, 166, 176, 180, 183, 184, 188, 193, 196, 199, 200, 207, 225, 237, 241, 254, 258, 261, 267, 274, 281], "termin": [1, 17, 57, 92, 178, 179, 181, 182, 191], "max_frames_per_traj": [1, 178], "effect": [1, 7, 8, 12, 14, 19, 59, 79, 86, 95, 99, 102, 104, 112, 117, 142, 145, 146, 152, 156, 169, 171, 172, 176, 179, 183, 184, 191, 196, 200, 206, 208, 224, 240, 244, 245, 254, 276, 286], "regist": [1, 5, 8, 9, 10, 19, 39, 46, 50, 99, 117, 119, 121, 136, 137, 139, 140, 142, 152, 158, 169, 170, 178, 192, 195, 202, 214, 221, 224, 231, 242, 265, 266], "new": [1, 2, 4, 5, 7, 9, 10, 12, 15, 17, 19, 27, 33, 34, 38, 43, 46, 48, 52, 53, 54, 56, 59, 65, 68, 79, 81, 82, 83, 84, 86, 89, 97, 101, 102, 103, 104, 106, 109, 111, 116, 117, 119, 121, 127, 130, 132, 134, 136, 137, 138, 139, 140, 141, 143, 147, 155, 158, 160, 162, 169, 170, 171, 172, 175, 176, 178, 179, 180, 183, 184, 188, 191, 192, 195, 196, 198, 202, 221, 230, 237, 240, 241, 246, 260, 261, 262, 265, 266, 268, 269, 274, 279, 286, 287], "stepcount": [1, 155, 178], "infer": [1, 3, 5, 7, 10, 12, 13, 24, 41, 43, 52, 53, 95, 97, 99, 103, 104, 108, 111, 112, 114, 131, 135, 137, 140, 143, 144, 147, 148, 160, 178, 180, 191, 192, 193, 195, 196, 198, 202, 207, 215, 221, 227, 228, 242, 244, 245, 252, 255, 258, 260, 278, 279, 281, 283, 287], "manual": [1, 4, 9, 12, 15, 19, 36, 50, 53, 57, 73, 76, 77, 102, 104, 112, 120, 121, 140, 149, 155, 156, 170, 171, 172, 174, 195, 196, 202, 209, 212, 221, 224, 240, 258, 279], "around": [1, 7, 14, 27, 36, 40, 53, 59, 95, 97, 99, 102, 104, 127, 137, 146, 156, 160, 161, 166, 171, 184, 188, 189, 195, 196, 213, 231, 266, 274, 275], "1m": [1, 44, 97, 155, 178, 263], "outer": [1, 7, 139, 161], "loop": [1, 3, 12, 14, 20, 24, 38, 40, 47, 50, 53, 55, 56, 79, 89, 94, 97, 101, 104, 112, 120, 138, 140, 144, 145, 147, 156, 160, 161, 162, 169, 171, 172, 181, 182, 189, 196, 213, 225, 230, 240, 243, 283], "equal": [1, 13, 94, 102, 104, 143, 163, 176, 178, 179, 191, 195, 255, 258, 265, 266, 277], "length": [1, 15, 17, 53, 56, 94, 95, 99, 111, 112, 142, 146, 178, 183, 184, 196, 199, 254, 260, 263, 276, 279, 283, 286, 287], "sub": [1, 7, 94, 119, 142, 147, 174, 178, 182, 188, 193, 196, 209, 249, 258], "shape": [1, 4, 5, 8, 19, 21, 34, 43, 46, 52, 53, 56, 72, 89, 94, 97, 104, 105, 108, 111, 119, 120, 139, 142, 145, 146, 147, 156, 158, 161, 171, 178, 188, 191, 192, 196, 198, 199, 213, 221, 225, 228, 230, 236, 249, 250, 252, 253, 255, 260, 261, 267, 277, 279, 283], "env_per_collector": 1, "traj_len": 1, "perform": [1, 3, 5, 7, 12, 13, 14, 15, 17, 18, 19, 20, 21, 24, 34, 35, 39, 40, 44, 46, 47, 48, 53, 60, 67, 71, 76, 79, 86, 89, 92, 94, 97, 99, 102, 103, 104, 105, 106, 111, 112, 120, 121, 130, 131, 132, 133, 135, 137, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 154, 155, 158, 161, 162, 166, 172, 174, 175, 178, 179, 180, 182, 185, 186, 189, 191, 192, 193, 195, 196, 198, 199, 200, 202, 204, 209, 212, 214, 215, 221, 224, 225, 226, 228, 229, 230, 236, 239, 243, 244, 245, 248, 252, 254, 255, 256, 260, 261, 263, 266, 267, 268, 274, 275, 279, 281, 283, 287], "assess": [1, 172, 196], "mode": [1, 15, 41, 46, 53, 56, 59, 79, 86, 89, 91, 95, 101, 121, 132, 137, 139, 147, 148, 149, 155, 160, 162, 163, 166, 174, 180, 183, 184, 185, 189, 191, 192, 193, 195, 196, 199, 207, 213, 214, 225, 240, 247, 254, 255, 258, 260, 261, 262, 265, 266, 281, 287], "dedic": [1, 13, 59, 102, 181, 182, 223, 224, 259], "frequenc": [1, 87, 144], "everi": [1, 2, 7, 12, 13, 17, 18, 21, 23, 24, 27, 34, 35, 36, 40, 46, 47, 50, 53, 55, 56, 59, 64, 94, 97, 99, 101, 102, 103, 127, 142, 143, 145, 146, 148, 154, 155, 158, 163, 169, 170, 171, 172, 176, 178, 179, 180, 182, 184, 188, 189, 193, 195, 196, 204, 226, 238, 240, 251, 259, 279, 283], "10": [1, 3, 7, 8, 12, 14, 21, 24, 35, 36, 44, 46, 47, 48, 53, 57, 79, 87, 92, 97, 103, 119, 121, 138, 139, 141, 147, 152, 154, 156, 163, 177, 180, 181, 182, 183, 184, 188, 189, 191, 195, 196, 199, 204, 206, 209, 212, 213, 215, 221, 225, 227, 230, 238, 239, 255, 262, 265, 266, 267, 269, 283], "come": [1, 5, 7, 9, 13, 21, 24, 44, 55, 56, 79, 89, 92, 94, 99, 102, 104, 105, 117, 121, 138, 142, 144, 154, 155, 160, 169, 170, 172, 175, 178, 183, 193, 195, 196, 199, 215, 225, 250, 259, 267, 283], "flavor": [1, 4], "priorit": [1, 240, 279], "error": [1, 4, 7, 9, 12, 13, 14, 15, 19, 39, 40, 46, 50, 53, 54, 57, 72, 94, 97, 99, 102, 104, 108, 112, 116, 117, 120, 130, 139, 141, 143, 149, 169, 175, 178, 179, 193, 196, 199, 209, 214, 225, 237, 240, 243, 253, 265, 267, 274, 282], "higher": [1, 24, 47, 52, 57, 86, 94, 95, 99, 104, 106, 120, 138, 139, 145, 146, 149, 158, 161, 177, 178, 179, 188, 189, 191, 195, 196, 202, 205, 209, 212, 281, 286], "likelihood": [1, 39, 53, 99, 106, 112], "regular": [1, 7, 12, 13, 24, 27, 104, 112, 124, 142, 145, 146, 161, 170, 171, 172, 186, 196, 199, 214, 240, 252, 274, 276, 279, 281], "circular": [1, 265, 282], "compos": [1, 4, 7, 10, 13, 19, 21, 24, 64, 97, 99, 106, 137, 138, 154, 158, 166, 171, 177, 178, 181, 183, 185, 189, 191, 199, 209, 214, 227, 230, 244, 245, 248, 250, 261], "pick": [1, 7, 24, 47, 105, 145, 179, 184, 221, 239, 250], "tensor": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 21, 24, 35, 36, 37, 38, 39, 40, 41, 44, 46, 47, 48, 49, 50, 51, 53, 61, 64, 65, 67, 68, 69, 71, 72, 73, 75, 78, 79, 89, 94, 95, 96, 98, 99, 101, 103, 104, 106, 109, 112, 113, 114, 117, 119, 121, 122, 132, 137, 138, 139, 140, 146, 147, 148, 149, 152, 154, 155, 156, 158, 160, 161, 163, 166, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 188, 189, 191, 192, 193, 195, 196, 198, 200, 208, 209, 212, 213, 214, 223, 224, 225, 227, 228, 229, 230, 231, 236, 239, 242, 243, 244, 249, 252, 260, 261, 263, 265, 266, 267, 268, 269, 274, 275, 276, 283, 284, 286, 287], "physic": [1, 17, 111, 172, 229, 240, 258], "memori": [1, 7, 12, 13, 20, 21, 23, 24, 43, 52, 53, 55, 59, 92, 99, 102, 103, 104, 107, 110, 112, 114, 121, 132, 136, 137, 138, 139, 140, 142, 150, 154, 155, 160, 161, 162, 166, 176, 181, 183, 185, 188, 191, 195, 196, 198, 199, 202, 214, 224, 225, 229, 231, 249, 259, 260, 261, 263, 265, 266, 267, 274, 277, 279, 283], "map": [1, 7, 15, 35, 53, 56, 95, 97, 99, 104, 109, 111, 121, 140, 145, 155, 156, 161, 169, 170, 171, 178, 179, 182, 191, 195, 198, 207, 212, 229, 239, 240, 242, 283, 286], "arrai": [1, 7, 34, 35, 46, 47, 50, 55, 64, 76, 77, 89, 94, 95, 102, 111, 112, 119, 120, 145, 146, 162, 177, 184, 191, 223, 277], "desir": [1, 4, 12, 15, 17, 20, 53, 56, 79, 86, 104, 121, 140, 154, 176, 188, 191, 195, 221, 224, 227, 255, 258, 263, 265, 267, 275], "hyperparamet": [1, 7, 17, 21, 56, 112, 121, 122, 132, 135, 137, 144, 145, 242, 261, 274, 279], "temporari": [1, 144], "directori": [1, 7, 9, 15, 36, 53, 55, 56, 92, 101, 104, 121, 124, 127, 144, 145, 146, 160, 184, 188, 191, 207, 215, 221, 238, 249, 258, 265, 267], "disk": [1, 8, 36, 97, 101, 114, 121, 155, 172, 225, 229, 230, 238, 249, 250, 265, 266], "along": [1, 7, 12, 17, 21, 34, 35, 43, 46, 52, 53, 57, 58, 59, 60, 87, 94, 95, 97, 98, 99, 101, 102, 103, 104, 108, 109, 112, 113, 127, 138, 139, 145, 146, 150, 151, 155, 169, 176, 179, 181, 189, 191, 195, 196, 254, 263, 276, 281, 283, 287], "dimens": [1, 7, 15, 17, 23, 35, 43, 50, 52, 53, 95, 97, 99, 101, 108, 109, 111, 112, 132, 137, 142, 145, 155, 156, 163, 171, 177, 178, 180, 192, 195, 196, 224, 240, 255, 263, 275, 279, 286, 287], "feed": [1, 7, 15, 24, 47, 50, 53, 97, 99, 103, 104, 107, 109, 114, 121, 142, 145, 146, 152, 162, 179, 184, 189, 207, 227, 243], "adapt": [1, 2, 17, 21, 27, 92, 97, 114, 144, 200, 225, 263, 283], "divid": [1, 12, 13, 14, 15, 17, 18, 24, 89, 104, 106, 141, 154, 170, 172, 182, 255, 258], "yield": [1, 7, 14, 15, 21, 24, 39, 41, 102, 121, 142, 143, 180, 182, 199, 213, 240, 244, 267, 277, 283], "regard": [1, 7, 8, 14, 17, 121, 160, 161, 178, 188, 196, 254], "200": [1, 7, 155, 163, 182, 213, 267], "random_crop_len": 1, "25": [1, 44, 79, 94, 104, 119, 127, 138, 181, 191, 212, 213, 225, 230, 267], "balanc": [1, 7, 23, 152, 188, 196, 221], "choic": [1, 4, 7, 12, 19, 92, 144, 146, 154, 172, 196, 204, 240], "heterogen": [1, 287], "figur": [1, 9, 12, 15, 17, 53, 79, 86, 97, 104, 136, 137, 141, 142, 144, 155, 160, 172, 180, 188, 189, 191, 195], "dataflow": 1, "8": [1, 3, 5, 7, 8, 21, 24, 92, 97, 99, 100, 108, 109, 119, 120, 139, 142, 148, 152, 160, 163, 170, 174, 177, 188, 191, 195, 196, 202, 206, 207, 208, 209, 212, 213, 224, 230, 240, 258, 259, 263, 265, 267, 269, 283, 284], "1000": [1, 2, 24, 46, 101, 103, 127, 138, 139, 143, 160, 178, 189, 221, 225, 239, 283], "known": [1, 4, 15, 21, 94, 142, 154, 158, 159, 176, 179, 184, 195, 196, 202, 225, 239, 250, 265, 283], "utd": 1, "64": [1, 7, 18, 21, 23, 24, 36, 40, 46, 92, 102, 109, 112, 138, 139, 142, 155, 156, 171, 177, 180, 181, 196, 202, 212, 213, 225, 230, 244, 245, 263, 278, 283, 286], "reproduc": [1, 15, 56, 79, 97, 102, 104, 160, 178, 179, 182, 193, 213, 225, 240], "realiz": [1, 21, 283], "sever": [1, 2, 3, 4, 8, 9, 13, 14, 18, 20, 24, 34, 40, 44, 48, 50, 56, 57, 58, 79, 104, 106, 137, 139, 142, 145, 151, 154, 162, 169, 170, 172, 175, 178, 180, 181, 188, 189, 193, 195, 199, 213, 214, 225, 239, 249, 250, 258, 276, 281], "qnet": 1, "ve": [1, 7, 9, 12, 21, 48, 50, 54, 94, 95, 97, 99, 102, 103, 112, 143, 155, 159, 161, 169, 171, 172, 181, 189, 195, 196, 206, 207, 225, 267, 274, 276, 277, 278, 283], "becaus": [1, 2, 4, 7, 9, 12, 15, 17, 18, 19, 20, 21, 24, 34, 36, 41, 43, 46, 47, 50, 52, 53, 55, 56, 59, 60, 79, 89, 92, 94, 95, 97, 99, 102, 104, 105, 106, 108, 112, 113, 114, 117, 121, 127, 130, 139, 140, 143, 145, 148, 149, 152, 155, 158, 161, 162, 163, 166, 171, 172, 176, 180, 182, 184, 186, 188, 193, 195, 198, 199, 200, 204, 212, 213, 225, 237, 240, 242, 243, 255, 267, 274, 276, 283, 286], "_must_": 1, "off": [1, 12, 20, 24, 27, 34, 46, 53, 99, 102, 121, 138, 144, 145, 160, 169, 178, 180, 181, 182, 191, 206, 274], "dictat": [1, 17], "introduc": [1, 8, 9, 14, 18, 20, 21, 27, 35, 38, 58, 92, 95, 104, 106, 119, 120, 137, 139, 141, 147, 152, 160, 163, 169, 180, 182, 183, 184, 191, 193, 195, 196, 202, 206, 214, 237, 240, 255, 256, 258, 266, 268, 269, 274, 276, 277, 278, 281, 283, 286], "outdat": 1, "trick": [1, 4, 7, 13, 53, 102, 149, 154, 161], "multi": [1, 7, 17, 23, 50, 53, 56, 57, 58, 60, 64, 94, 95, 99, 102, 106, 135, 137, 139, 140, 142, 150, 151, 152, 155, 178, 180, 183, 185, 188, 198, 207, 209, 240, 258, 261, 279], "altern": [1, 7, 13, 52, 53, 109, 127, 138, 156, 159, 163, 175, 178, 184, 188, 191, 193, 199, 200, 207, 237, 240, 256, 267, 277, 278], "hack": [1, 237, 274], "find": [1, 2, 4, 7, 9, 12, 13, 21, 34, 36, 43, 52, 79, 86, 87, 89, 92, 97, 99, 102, 105, 108, 112, 135, 137, 138, 141, 145, 154, 158, 160, 170, 179, 182, 184, 188, 195, 196, 215, 221, 223, 225, 238, 274, 275, 276, 277, 278, 283], "well": [1, 3, 4, 7, 12, 13, 14, 24, 36, 43, 47, 52, 53, 57, 71, 86, 89, 92, 95, 97, 104, 106, 108, 112, 114, 120, 121, 127, 130, 131, 138, 139, 140, 143, 144, 145, 148, 149, 154, 155, 158, 169, 170, 172, 174, 177, 180, 181, 182, 183, 184, 188, 189, 191, 193, 196, 198, 206, 207, 209, 214, 221, 225, 229, 237, 239, 242, 250, 251, 252, 255, 256, 258, 274, 275, 276, 279], "despit": [1, 79, 147, 152], "fact": [1, 3, 4, 7, 12, 15, 17, 24, 34, 43, 79, 94, 95, 97, 99, 102, 104, 106, 111, 143, 170, 178, 179, 189, 195, 196, 199], "part": [1, 3, 7, 12, 13, 16, 17, 18, 20, 39, 46, 48, 53, 56, 79, 92, 94, 95, 99, 105, 107, 111, 112, 113, 137, 139, 142, 143, 145, 146, 149, 150, 154, 155, 159, 160, 167, 169, 170, 178, 184, 195, 196, 221, 223, 224, 237, 239, 245, 249, 252, 255, 263, 265, 267, 268, 274, 276, 278, 287], "made": [1, 7, 13, 18, 24, 56, 92, 95, 102, 104, 139, 141, 143, 154, 155, 172, 184, 189, 191, 195, 223, 240, 277, 287], "thank": [1, 24, 53, 112, 144, 145, 146, 154, 184, 199], "hardupd": 1, "softupd": [1, 155], "appropri": [1, 7, 12, 53, 95, 112, 144, 152, 170, 181, 189, 196, 199, 213, 214, 224, 266, 281], "locat": [1, 4, 7, 33, 36, 43, 52, 86, 95, 97, 111, 119, 154, 172, 178, 188, 198, 207, 221, 230, 240, 249, 265], "adam": [1, 7, 14, 16, 39, 50, 56, 73, 103, 106, 120, 130, 140, 154, 169, 179, 180, 182, 204, 205, 206, 207, 212, 259], "pretti": [1, 20, 47, 102, 119, 120, 161, 182, 286], "plot": [1, 7, 56, 79, 86, 94, 144, 155, 172, 179, 180, 189, 191, 200], "alreadi": [1, 2, 4, 7, 9, 13, 14, 18, 94, 97, 102, 104, 105, 112, 130, 142, 144, 152, 163, 169, 172, 174, 177, 178, 183, 189, 196, 209, 213, 225, 227, 240, 241, 242, 243, 244, 245, 259, 276, 278, 282], "mention": [1, 4, 7, 13, 14, 18, 20, 56, 79, 89, 102, 104, 105, 121, 138, 142, 154, 155, 172, 179, 181, 188, 191, 195, 199, 207, 221, 229, 237, 244, 249, 258], "greater": [1, 14, 53, 56, 95, 120, 143, 258], "concret": [1, 7, 8, 12, 14, 94, 172, 178, 195, 274], "takeawai": [1, 124, 199, 240], "further": [1, 7, 12, 24, 50, 79, 92, 99, 104, 112, 142, 154, 160, 172, 176, 178, 191, 192, 193, 195, 206, 214, 229, 248, 267, 279, 281, 282, 287], "might": [1, 4, 8, 12, 13, 18, 19, 20, 34, 41, 47, 54, 55, 56, 57, 94, 97, 102, 104, 105, 109, 111, 114, 117, 119, 130, 140, 149, 150, 151, 152, 154, 159, 161, 170, 172, 179, 182, 183, 184, 188, 193, 195, 196, 198, 199, 209, 225, 226, 230, 237, 240, 245, 255, 258, 265, 267, 274, 282], "dispatch": [1, 4, 18, 136, 137, 140, 175, 199, 202, 213, 221, 224, 251], "distpatch": 1, "iql": 1, "flexibl": [1, 2, 7, 27, 53, 89, 94, 112, 114, 121, 132, 137, 139, 140, 150, 199, 207, 225, 281], "runnable_code_remov": [1, 9, 15, 16, 17, 19, 21, 34, 35, 36, 38, 39, 40, 41, 43, 46, 47, 48, 50, 52, 53, 55, 56, 66, 67, 69, 72, 73, 76, 77, 79, 89, 92, 94, 95, 98, 99, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 116, 117, 119, 120, 124, 127, 130, 143, 144, 145, 146, 148, 155, 158, 159, 160, 161, 162, 163, 164, 166, 169, 171, 172, 176, 178, 179, 183, 184, 186, 188, 192, 193, 195, 196, 198, 199, 200, 205, 223, 224, 225, 226, 227, 229, 230, 231, 237, 239, 240, 241, 242, 243, 244, 245, 251, 252, 253, 254, 256, 267, 274, 275, 276, 277, 279, 286], "minut": [1, 15, 16, 17, 19, 34, 35, 36, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 55, 56, 72, 76, 77, 79, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 117, 124, 127, 130, 141, 143, 144, 145, 146, 148, 156, 158, 159, 160, 161, 162, 163, 166, 169, 170, 171, 172, 176, 177, 178, 179, 183, 184, 186, 189, 193, 195, 198, 199, 200, 205, 212, 226, 229, 231, 237, 244, 245, 251, 252, 253, 254, 256, 267, 274, 275, 276, 277, 279, 286], "002": [1, 15, 16, 17, 19, 22, 34, 35, 36, 39, 40, 41, 42, 43, 46, 47, 48, 50, 51, 52, 55, 72, 74, 76, 77, 78, 79, 92, 94, 99, 100, 102, 105, 109, 110, 111, 112, 113, 114, 117, 118, 122, 124, 127, 130, 139, 143, 144, 145, 146, 148, 158, 159, 161, 162, 163, 166, 169, 171, 176, 178, 179, 184, 185, 186, 198, 200, 205, 226, 229, 231, 236, 237, 244, 245, 247, 251, 252, 253, 254, 256, 261, 267, 274, 275, 276, 277, 279, 284, 286], "jupyt": [1, 15, 16, 17, 19, 21, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 55, 56, 66, 67, 69, 71, 72, 73, 76, 77, 79, 86, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 130, 143, 144, 145, 146, 148, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 169, 170, 171, 172, 176, 178, 179, 183, 184, 186, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 205, 212, 223, 224, 225, 226, 227, 229, 230, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 252, 253, 254, 256, 266, 267, 274, 275, 276, 277, 279, 286], "notebook": [1, 15, 16, 17, 19, 21, 23, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 54, 55, 56, 66, 67, 69, 71, 72, 73, 76, 77, 79, 86, 87, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 130, 143, 144, 145, 146, 148, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 169, 170, 171, 172, 176, 178, 179, 183, 184, 186, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 205, 212, 223, 224, 225, 226, 227, 229, 230, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 252, 253, 254, 256, 266, 267, 274, 275, 276, 277, 279, 286], "coding_ddpg": [1, 22, 261], "ipynb": [1, 15, 16, 17, 19, 21, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 55, 56, 66, 67, 69, 71, 72, 73, 76, 77, 79, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 130, 143, 144, 145, 146, 148, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 169, 170, 171, 172, 176, 178, 179, 183, 184, 186, 188, 192, 193, 195, 196, 198, 199, 200, 205, 212, 223, 224, 225, 226, 227, 229, 230, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 252, 253, 254, 256, 266, 267, 274, 275, 276, 277, 279, 286], "python": [1, 3, 7, 8, 13, 15, 16, 17, 18, 21, 22, 23, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 55, 56, 57, 59, 60, 61, 66, 67, 69, 71, 72, 73, 76, 77, 79, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 124, 127, 130, 131, 136, 137, 138, 139, 143, 144, 145, 146, 147, 148, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 169, 170, 171, 172, 176, 177, 178, 179, 181, 183, 184, 186, 188, 192, 193, 195, 196, 198, 199, 200, 205, 207, 208, 209, 212, 214, 221, 223, 224, 225, 226, 227, 229, 230, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 251, 252, 253, 255, 258, 260, 261, 263, 265, 266, 267, 268, 274, 275, 276, 277, 279, 281, 282, 286, 287], "sourc": [1, 3, 5, 7, 13, 14, 15, 16, 17, 19, 20, 21, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 55, 56, 59, 66, 67, 69, 71, 72, 73, 76, 77, 79, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 130, 139, 142, 143, 144, 145, 146, 148, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 169, 170, 171, 172, 175, 176, 178, 179, 180, 182, 183, 184, 186, 188, 191, 192, 193, 195, 196, 198, 199, 200, 205, 212, 214, 215, 223, 224, 225, 226, 227, 229, 230, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 252, 253, 254, 256, 265, 266, 267, 268, 274, 275, 276, 277, 279, 286, 287], "py": [1, 4, 5, 7, 9, 12, 13, 15, 16, 17, 19, 21, 22, 24, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 66, 67, 68, 69, 71, 72, 73, 74, 76, 77, 78, 79, 88, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 124, 127, 130, 138, 139, 140, 143, 144, 145, 146, 147, 148, 150, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 169, 170, 171, 172, 174, 175, 176, 178, 179, 181, 183, 184, 185, 186, 188, 192, 193, 195, 196, 198, 199, 200, 205, 208, 209, 212, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 251, 252, 253, 254, 255, 256, 258, 261, 263, 265, 266, 267, 274, 275, 276, 277, 279, 282, 284, 286], "zip": [1, 7, 15, 16, 17, 19, 21, 23, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 54, 55, 56, 66, 67, 69, 71, 72, 73, 76, 77, 79, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 130, 143, 144, 145, 146, 148, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 169, 170, 171, 172, 176, 178, 179, 180, 182, 183, 184, 186, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 205, 212, 223, 224, 225, 226, 227, 229, 230, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 252, 253, 254, 256, 266, 267, 274, 275, 276, 277, 279, 283, 286], "The": [2, 3, 4, 5, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 27, 34, 35, 36, 39, 40, 43, 44, 46, 47, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 64, 71, 72, 73, 77, 79, 86, 87, 89, 95, 96, 97, 99, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 124, 127, 128, 130, 132, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 169, 170, 171, 172, 176, 177, 178, 179, 180, 181, 182, 183, 186, 188, 191, 192, 193, 195, 196, 198, 200, 202, 204, 205, 206, 207, 208, 209, 213, 214, 215, 216, 224, 225, 227, 229, 230, 237, 238, 239, 240, 243, 244, 245, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 262, 263, 265, 266, 267, 268, 274, 275, 276, 277, 278, 279, 281, 282, 283, 286], "packag": [2, 4, 7, 21, 23, 27, 47, 50, 55, 61, 64, 72, 73, 92, 103, 104, 106, 112, 116, 120, 127, 132, 133, 137, 138, 139, 152, 154, 159, 175, 177, 179, 182, 188, 191, 193, 209, 214, 223, 227, 230, 239, 243, 255, 260, 282, 283], "build": [2, 7, 8, 17, 24, 34, 36, 37, 38, 39, 40, 41, 43, 44, 50, 53, 64, 72, 73, 92, 94, 95, 96, 97, 98, 101, 102, 103, 105, 111, 112, 119, 120, 124, 130, 131, 132, 133, 137, 145, 146, 154, 155, 158, 167, 169, 171, 172, 178, 179, 180, 181, 182, 185, 195, 196, 201, 214, 225, 227, 239, 240, 252, 255, 261, 265, 269, 279, 286, 287], "highli": [2, 7, 13, 23, 53, 92, 184, 196, 240, 286], "dynam": [2, 7, 8, 9, 12, 15, 17, 18, 24, 34, 46, 57, 69, 94, 104, 107, 110, 113, 120, 121, 130, 131, 132, 137, 147, 163, 176, 178, 214, 224, 228, 240, 247, 250, 252, 255, 260, 261, 262, 267], "neural": [2, 16, 17, 21, 22, 34, 37, 38, 40, 46, 49, 51, 53, 55, 61, 72, 79, 94, 95, 97, 99, 103, 104, 105, 106, 107, 108, 109, 111, 114, 116, 120, 127, 132, 134, 135, 137, 144, 145, 146, 147, 148, 155, 167, 176, 178, 179, 181, 184, 185, 186, 189, 191, 200, 202, 213, 214, 221, 228, 236, 240, 245, 260, 261, 278, 281, 283], "network": [2, 3, 8, 12, 15, 16, 17, 21, 24, 34, 37, 38, 39, 40, 41, 46, 49, 51, 53, 55, 61, 72, 73, 79, 94, 95, 97, 99, 103, 104, 105, 107, 108, 110, 111, 112, 114, 116, 120, 127, 130, 132, 134, 137, 143, 144, 147, 148, 151, 152, 166, 167, 170, 172, 176, 181, 185, 188, 189, 191, 200, 202, 213, 214, 221, 228, 231, 236, 240, 245, 260, 261, 265, 278, 281, 283], "api": [2, 4, 5, 9, 10, 11, 12, 13, 14, 17, 18, 19, 23, 27, 35, 36, 38, 40, 43, 44, 52, 60, 86, 95, 116, 119, 121, 131, 132, 136, 137, 138, 139, 141, 142, 143, 144, 147, 152, 154, 159, 160, 161, 165, 171, 173, 174, 180, 181, 182, 188, 189, 193, 195, 196, 198, 206, 207, 208, 209, 214, 215, 223, 225, 226, 230, 239, 247, 248, 249, 250, 251, 252, 253, 254, 255, 258, 260, 261, 262, 263, 266, 267, 278, 281, 286, 287], "explor": [2, 7, 12, 17, 48, 53, 79, 117, 131, 132, 135, 137, 144, 149, 155, 160, 162, 169, 172, 174, 178, 179, 183, 184, 196, 199, 208, 223, 249, 252, 255, 258, 265, 278], "note": [2, 4, 7, 9, 12, 15, 18, 19, 20, 21, 23, 24, 27, 34, 46, 47, 48, 50, 53, 54, 56, 79, 89, 94, 95, 97, 99, 102, 103, 106, 107, 108, 109, 111, 112, 117, 119, 121, 127, 130, 138, 139, 140, 142, 143, 148, 149, 151, 152, 154, 156, 158, 160, 161, 163, 169, 171, 172, 175, 176, 180, 181, 182, 183, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 202, 206, 207, 209, 215, 230, 239, 242, 245, 249, 250, 251, 252, 258, 259, 262, 265, 266, 274, 275, 276, 277, 279, 283, 286], "pleas": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 19, 24, 25, 26, 47, 48, 50, 55, 62, 63, 85, 92, 130, 138, 139, 142, 152, 154, 156, 158, 159, 160, 163, 169, 171, 175, 180, 181, 182, 188, 191, 193, 195, 196, 198, 199, 200, 203, 207, 209, 210, 213, 214, 215, 217, 218, 219, 220, 221, 222, 224, 226, 255, 257, 258, 262, 265, 266, 268, 269, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 286], "differenti": [2, 7, 17, 23, 37, 38, 43, 49, 50, 61, 94, 120, 130, 132, 137, 155, 171, 179, 185, 186, 200, 261, 276], "requires_grad": [2, 4, 5, 7, 12, 34, 46, 50, 66, 67, 94, 102, 108, 112, 120, 122, 127, 137, 147, 149, 170, 229, 243, 261, 263, 283], "track": [2, 12, 17, 35, 39, 46, 56, 86, 94, 99, 101, 102, 106, 108, 112, 120, 130, 139, 141, 146, 147, 151, 155, 182, 184, 188, 208, 230, 238, 243, 254, 255, 282], "auto": [2, 3, 7, 8, 9, 12, 13, 15, 59, 138, 139, 160, 175, 195, 196, 212, 214, 215, 225, 239, 258, 268, 278], "x": [2, 4, 7, 8, 9, 15, 23, 24, 34, 43, 46, 50, 52, 53, 56, 66, 67, 71, 72, 73, 76, 77, 79, 89, 94, 97, 99, 102, 104, 105, 106, 108, 112, 120, 121, 130, 138, 140, 142, 143, 145, 146, 147, 149, 152, 154, 156, 161, 170, 172, 174, 175, 177, 180, 181, 182, 189, 191, 192, 193, 195, 198, 206, 207, 209, 212, 213, 214, 221, 225, 238, 239, 250, 252, 255, 262, 267, 268, 269, 278, 279, 281, 283], "std": [2, 7, 8, 9, 15, 18, 24, 55, 97, 104, 175, 177, 182, 191, 214, 225, 268, 274], "cout": [2, 7, 214], "endl": [2, 7, 214], "cpufloattyp": [2, 7], "y": [2, 9, 23, 34, 43, 44, 46, 52, 56, 66, 67, 71, 72, 73, 76, 77, 79, 86, 89, 94, 97, 99, 102, 104, 105, 108, 109, 112, 120, 130, 139, 143, 174, 175, 188, 191, 193, 195, 238, 239, 250, 252, 268, 269, 276, 278], "wa": [2, 3, 4, 9, 14, 19, 21, 47, 55, 56, 79, 94, 95, 97, 99, 102, 103, 104, 105, 106, 108, 112, 117, 121, 130, 138, 142, 144, 147, 152, 154, 162, 166, 169, 170, 171, 172, 174, 176, 177, 178, 179, 182, 183, 184, 189, 195, 196, 199, 207, 221, 224, 225, 230, 232, 233, 234, 235, 244, 255, 258, 267, 276, 277, 283], "result": [2, 4, 5, 7, 8, 12, 13, 15, 17, 21, 24, 27, 34, 39, 41, 43, 46, 47, 55, 67, 71, 86, 87, 92, 94, 95, 97, 102, 103, 104, 108, 112, 117, 120, 121, 124, 130, 139, 140, 141, 142, 143, 146, 152, 154, 155, 158, 160, 161, 162, 166, 171, 172, 175, 176, 177, 179, 180, 181, 182, 183, 189, 191, 192, 193, 195, 198, 199, 204, 206, 212, 213, 215, 227, 229, 230, 237, 239, 240, 244, 245, 249, 250, 252, 253, 254, 258, 259, 260, 262, 263, 265, 267, 275, 276, 277, 278, 279], "grad_fn": [2, 34, 46, 50, 94, 97, 108, 130, 143, 149, 170], "name": [2, 4, 5, 7, 9, 12, 13, 15, 16, 17, 19, 21, 23, 24, 34, 54, 55, 56, 86, 105, 111, 112, 114, 117, 119, 121, 137, 139, 142, 144, 147, 152, 155, 160, 167, 170, 174, 175, 176, 178, 179, 180, 181, 183, 184, 185, 188, 191, 193, 196, 198, 200, 207, 209, 213, 215, 225, 229, 230, 239, 241, 254, 258, 261, 265, 281, 282, 283], "addbackward1": 2, "z": [2, 56, 89, 97, 102, 108, 130, 195, 276], "27": [2, 55, 97, 160, 182, 212, 213, 225, 254, 267], "mulbackward1": 2, "meanbackward0": 2, "requires_grad_": [2, 34, 108, 130], "exist": [2, 7, 9, 12, 13, 14, 19, 21, 50, 56, 57, 64, 71, 87, 89, 102, 108, 120, 137, 147, 154, 176, 177, 182, 183, 184, 186, 188, 191, 193, 195, 199, 206, 208, 224, 225, 237, 240, 244, 274, 275, 277, 282, 283], "flag": [2, 4, 17, 46, 94, 108, 170, 184, 195, 229, 239, 245, 258, 287], "place": [2, 7, 9, 14, 17, 23, 43, 46, 48, 52, 56, 89, 95, 99, 101, 106, 108, 112, 139, 144, 152, 154, 156, 169, 171, 172, 178, 184, 191, 193, 195, 196, 199, 200, 207, 212, 229, 237, 239, 240, 263, 274, 281, 286], "randn": [2, 4, 5, 7, 8, 15, 71, 108, 120, 121, 147, 152, 156, 180, 182, 215, 225, 238, 255, 259, 268, 269, 278, 281, 286], "b": [2, 4, 5, 7, 21, 23, 34, 44, 46, 66, 67, 71, 87, 94, 97, 102, 106, 109, 111, 112, 119, 120, 130, 143, 145, 146, 160, 161, 163, 177, 179, 193, 195, 196, 199, 225, 230, 250, 265, 269, 278, 283], "sumbackward0": [2, 108], "backprop": [2, 46, 108, 112, 145, 162], "scalar": [2, 17, 18, 34, 46, 53, 56, 66, 94, 97, 102, 108, 120, 130, 189, 195, 212], "backward": [2, 3, 4, 5, 7, 8, 12, 14, 15, 16, 18, 19, 20, 24, 34, 39, 46, 48, 50, 56, 66, 67, 71, 76, 77, 94, 95, 97, 103, 108, 109, 112, 120, 127, 130, 131, 136, 137, 138, 142, 143, 146, 150, 152, 154, 158, 161, 166, 171, 174, 180, 181, 182, 185, 188, 189, 195, 196, 199, 200, 204, 205, 206, 207, 212, 214, 224, 230, 238, 240, 243, 248, 252, 254, 259, 261], "equival": [2, 9, 14, 34, 46, 94, 106, 120, 140, 158, 171, 174, 179, 181, 191, 195, 196, 199, 240, 256, 268, 274, 276, 279, 283], "print": [2, 7, 9, 14, 17, 23, 24, 35, 40, 47, 48, 53, 55, 56, 57, 71, 79, 89, 92, 94, 97, 99, 102, 104, 106, 108, 111, 112, 113, 116, 120, 121, 130, 138, 139, 140, 141, 146, 147, 148, 151, 152, 154, 155, 156, 160, 170, 174, 175, 177, 180, 181, 182, 184, 189, 192, 193, 195, 196, 199, 204, 206, 207, 208, 209, 212, 213, 214, 215, 224, 225, 230, 231, 240, 242, 256, 259, 262, 265, 266, 269, 274, 276, 282, 283], "d": [2, 4, 7, 9, 12, 24, 40, 44, 56, 64, 66, 67, 71, 94, 95, 97, 99, 102, 106, 111, 112, 120, 139, 142, 144, 146, 148, 152, 154, 161, 162, 169, 174, 188, 191, 195, 199, 209, 253, 277], "dx": [2, 67, 106, 120, 149], "grad": [2, 4, 7, 15, 19, 34, 46, 50, 66, 94, 108, 112, 120, 130, 138, 143, 147, 149, 152, 154, 158, 161, 166, 169, 180, 181, 182, 199, 205, 212, 224, 243, 274, 286], "5000": [2, 225], "got": [2, 18, 24, 59, 95, 97, 102, 105, 106, 108, 112, 152, 175, 181, 195, 255], "matrix": [2, 7, 15, 21, 34, 43, 46, 52, 86, 94, 97, 99, 102, 105, 106, 108, 111, 112, 119, 142, 145, 146, 161, 166, 170, 183, 184, 191, 195, 196, 199, 200, 213, 214, 215, 221, 227, 240, 254, 260, 277, 279, 283, 286], "explan": [2, 56, 189, 229], "arriv": [2, 7, 18, 139, 152, 180, 240], "valu": [2, 4, 7, 8, 9, 15, 17, 23, 24, 34, 35, 39, 43, 44, 46, 50, 52, 53, 54, 59, 66, 79, 86, 89, 92, 94, 95, 97, 99, 102, 103, 104, 106, 108, 109, 111, 112, 114, 120, 130, 142, 143, 144, 147, 151, 152, 154, 156, 159, 162, 174, 175, 179, 180, 181, 182, 183, 184, 188, 191, 193, 196, 199, 200, 205, 212, 224, 225, 230, 237, 238, 244, 249, 258, 259, 263, 265, 274, 275, 276, 277, 279, 281, 287], "section": [2, 4, 7, 12, 14, 18, 23, 24, 35, 36, 38, 39, 40, 41, 43, 46, 47, 50, 54, 55, 56, 79, 95, 98, 102, 103, 104, 105, 106, 109, 111, 112, 117, 130, 132, 134, 136, 140, 143, 147, 148, 154, 160, 162, 166, 172, 179, 180, 182, 188, 191, 195, 196, 198, 199, 202, 205, 212, 214, 215, 221, 224, 225, 229, 240, 250, 254, 262, 275, 276], "look": [2, 4, 7, 9, 12, 13, 14, 15, 17, 20, 23, 36, 41, 43, 46, 47, 50, 52, 53, 54, 55, 56, 59, 79, 89, 92, 94, 95, 97, 99, 101, 102, 103, 105, 106, 108, 109, 111, 112, 113, 114, 121, 127, 130, 134, 138, 140, 142, 143, 144, 149, 154, 155, 156, 163, 166, 169, 172, 176, 177, 178, 181, 182, 183, 184, 188, 189, 191, 195, 196, 198, 199, 201, 208, 212, 213, 225, 227, 230, 238, 239, 241, 242, 243, 245, 250, 254, 268, 274, 277, 279, 281], "jacobian": [2, 46, 94, 132, 137, 158, 185, 261, 286], "product": [2, 3, 7, 43, 46, 52, 89, 94, 106, 114, 131, 132, 135, 137, 139, 154, 158, 174, 184, 185, 196, 252, 261, 263, 286], "norm": [2, 17, 21, 24, 56, 99, 104, 131, 136, 137, 142, 170, 174, 176, 185, 191, 199, 261, 283], "1021": 2, "4020": 2, "314": 2, "6695": 2, "613": [2, 213], "4944": 2, "v": [2, 21, 23, 24, 27, 34, 46, 56, 57, 59, 94, 97, 101, 103, 108, 109, 111, 139, 142, 158, 179, 181, 188, 189, 199, 213, 253, 266, 267, 276, 283, 287], "0001": [2, 24, 92, 160], "kfloat": [2, 3, 4, 5, 268], "102": 2, "4000": [2, 97, 239], "1024": [2, 23, 86, 104, 141, 204, 212, 225], "0000": [2, 170, 283], "stop": [2, 34, 92, 94, 108, 146, 163, 169, 178, 180, 184, 188, 215, 230, 265], "histori": [2, 34, 43, 50, 52, 94, 102, 108, 147, 176], "put": [2, 7, 12, 15, 17, 20, 35, 48, 53, 55, 89, 97, 99, 102, 132, 137, 138, 139, 154, 155, 170, 178, 179, 181, 182, 191], "nogradguard": 2, "block": [2, 4, 5, 7, 9, 12, 13, 15, 21, 24, 34, 35, 50, 53, 86, 94, 108, 113, 138, 141, 142, 154, 155, 160, 172, 174, 180, 181, 182, 183, 188, 191, 202, 240, 244, 245, 263, 267, 278, 283], "pow": [2, 212, 274], "no_grad": [2, 24, 34, 46, 94, 97, 106, 108, 109, 112, 120, 138, 139, 162, 177, 181, 189, 195, 212, 214, 240, 248, 278, 281], "Or": [2, 147, 169, 182, 262], "content": [2, 4, 17, 54, 60, 101, 102, 103, 121, 128, 143, 152, 154, 172, 177, 178, 182, 184, 193, 195, 216, 225, 239, 254, 255, 265], "eq": [2, 24, 53, 138, 181, 195, 230], "bool": [2, 14, 17, 18, 175, 191, 258, 262, 278, 283], "is_leaf": [2, 130], "detach_": [2, 182], "register_hook": [2, 147], "retain_grad": [2, 122, 137, 200, 261], "doc": [2, 4, 7, 10, 53, 66, 79, 94, 102, 103, 104, 119, 120, 127, 140, 151, 154, 159, 172, 180, 182, 191, 195, 196, 215, 221, 224, 238, 253, 254, 279, 286], "applic": [2, 3, 14, 15, 17, 18, 36, 53, 64, 95, 99, 104, 114, 127, 132, 133, 134, 137, 138, 143, 144, 148, 152, 159, 169, 172, 176, 180, 182, 191, 195, 206, 207, 212, 213, 215, 221, 240, 254, 258, 267, 276, 282], "calcul": [2, 15, 21, 34, 39, 46, 47, 53, 56, 60, 79, 86, 89, 92, 94, 95, 97, 103, 104, 112, 130, 145, 146, 162, 179, 180, 182, 183, 184, 191, 196, 199, 209, 243, 263, 276, 283], "penalti": [2, 170, 177, 224], "h": [2, 4, 5, 7, 8, 9, 12, 13, 53, 142, 160, 163, 174, 175, 198, 212, 214, 239, 258], "model": [2, 3, 9, 12, 14, 17, 20, 27, 34, 36, 37, 38, 43, 44, 46, 47, 50, 52, 56, 57, 58, 60, 66, 69, 71, 72, 73, 91, 92, 94, 96, 98, 102, 105, 106, 107, 108, 110, 112, 115, 116, 117, 119, 120, 122, 131, 132, 133, 134, 135, 137, 138, 144, 145, 146, 147, 148, 151, 154, 158, 160, 161, 167, 169, 170, 171, 178, 179, 180, 181, 182, 183, 185, 192, 193, 195, 196, 199, 200, 202, 206, 207, 208, 209, 213, 214, 215, 224, 228, 229, 231, 236, 237, 238, 243, 245, 248, 250, 252, 253, 258, 259, 260, 261, 263, 265, 267, 268, 278, 279, 282, 283, 286, 287], "linear": [2, 7, 14, 20, 21, 24, 43, 46, 48, 50, 52, 72, 79, 97, 102, 107, 119, 120, 121, 127, 138, 140, 142, 145, 146, 147, 152, 156, 160, 161, 170, 174, 180, 181, 182, 184, 189, 195, 199, 200, 202, 204, 205, 206, 207, 208, 209, 212, 213, 214, 221, 224, 229, 231, 237, 238, 242, 245, 259, 262, 266, 267, 274, 278, 279, 281, 283], "loss": [2, 3, 7, 14, 17, 20, 21, 22, 24, 34, 40, 43, 46, 52, 69, 71, 72, 73, 76, 77, 79, 92, 94, 97, 101, 106, 111, 112, 120, 121, 130, 134, 137, 138, 139, 140, 145, 147, 154, 162, 163, 171, 174, 179, 181, 182, 184, 188, 189, 196, 214, 215, 238, 248, 259, 261, 283], "target": [2, 3, 7, 9, 17, 20, 23, 24, 39, 47, 50, 53, 59, 79, 95, 102, 104, 106, 109, 111, 112, 117, 138, 146, 154, 155, 156, 160, 169, 171, 172, 174, 175, 177, 179, 180, 181, 182, 184, 189, 191, 193, 195, 198, 214, 215, 221, 225, 227, 248, 262, 281], "mseloss": [2, 15, 39, 50, 71, 120, 152, 180, 206, 207, 238, 259], "grad_output": [2, 12, 13], "ones_lik": [2, 102], "create_graph": [2, 149], "gradient_penalti": 2, "dim": [2, 14, 35, 44, 97, 102, 138, 140, 174, 176, 177, 180, 181, 182, 189, 191, 213, 214, 255, 263, 275, 276], "add": [2, 4, 5, 7, 8, 9, 10, 12, 13, 15, 17, 18, 19, 21, 24, 39, 47, 50, 54, 79, 89, 92, 99, 102, 103, 106, 109, 117, 124, 136, 137, 138, 139, 142, 146, 147, 148, 154, 155, 159, 160, 161, 169, 171, 172, 175, 177, 178, 180, 181, 182, 184, 188, 192, 195, 199, 207, 212, 225, 227, 230, 252, 256, 263, 267, 268, 274, 276, 282, 283], "combined_loss": 2, "1042": 2, "0638": 2, "0103": 2, "0723": 2, "2543": 2, "1222": 2, "0071": 2, "0814": 2, "1683": 2, "1052": 2, "0355": 2, "document": [2, 4, 7, 19, 34, 50, 56, 64, 86, 89, 92, 94, 95, 99, 101, 102, 103, 108, 121, 127, 137, 152, 154, 155, 158, 159, 160, 181, 182, 183, 188, 191, 193, 195, 198, 207, 214, 215, 240, 249, 250, 252, 253, 256, 262, 266, 276, 281, 286], "link": [2, 7, 9, 13, 15, 38, 40, 56, 86, 98, 112, 114, 124, 154, 158, 214, 255, 276, 278], "ad": [2, 7, 8, 13, 18, 23, 27, 34, 53, 54, 57, 79, 87, 89, 94, 97, 99, 101, 102, 103, 106, 108, 121, 138, 139, 145, 146, 147, 152, 155, 158, 161, 166, 169, 175, 179, 183, 184, 195, 198, 214, 237, 239, 242, 253, 282], "subclass": [2, 7, 17, 21, 35, 36, 71, 94, 97, 99, 112, 120, 140, 144, 155, 176, 181, 189, 198, 213, 223, 224, 228, 236, 252, 260, 261, 276, 279, 283], "encod": [2, 17, 43, 44, 50, 52, 99, 107, 110, 139, 144, 155, 170, 178, 182, 191, 199, 224, 255, 261, 267, 283], "method": [2, 4, 7, 8, 12, 13, 14, 15, 17, 20, 21, 24, 34, 35, 41, 43, 47, 50, 53, 55, 59, 71, 79, 87, 89, 94, 95, 97, 99, 101, 102, 104, 106, 108, 112, 113, 120, 121, 133, 137, 141, 144, 145, 149, 152, 155, 158, 159, 160, 161, 162, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 189, 191, 193, 195, 196, 199, 200, 206, 207, 215, 223, 224, 227, 238, 239, 240, 245, 255, 258, 274, 278, 281, 283], "forward": [2, 3, 8, 9, 12, 13, 14, 15, 17, 18, 20, 24, 34, 35, 40, 46, 48, 50, 53, 56, 60, 66, 67, 69, 71, 76, 77, 89, 94, 97, 99, 102, 104, 105, 106, 107, 109, 112, 113, 120, 121, 127, 130, 132, 137, 138, 139, 142, 143, 145, 148, 149, 150, 152, 154, 156, 166, 169, 170, 171, 174, 176, 179, 180, 181, 182, 184, 185, 188, 189, 191, 193, 195, 196, 200, 205, 206, 207, 208, 209, 212, 213, 214, 221, 224, 227, 230, 231, 240, 255, 259, 261, 262, 278], "detail": [2, 4, 5, 7, 12, 13, 15, 18, 19, 20, 36, 39, 46, 47, 48, 56, 57, 79, 86, 87, 89, 99, 102, 103, 113, 117, 138, 140, 142, 144, 146, 148, 150, 152, 160, 166, 169, 182, 183, 188, 189, 192, 193, 195, 196, 202, 205, 208, 212, 213, 214, 215, 221, 223, 224, 225, 229, 239, 240, 250, 255, 262, 263, 265, 274, 275, 276, 277, 281, 282, 286], "namespac": [2, 4, 5, 7, 8, 9, 12, 13, 35, 112, 117, 175, 193, 262, 279], "inherit": [2, 9, 14, 18, 40, 55, 89, 97, 102, 103, 106, 159, 162, 178, 191, 198, 255, 265, 276, 279], "linearfunct": 2, "public": [2, 5, 12, 13, 18, 140, 175], "static": [2, 4, 5, 12, 13, 17, 94, 158, 175, 195, 196, 240, 267], "option": [2, 4, 5, 7, 12, 13, 14, 38, 47, 49, 51, 55, 57, 86, 92, 94, 95, 98, 99, 102, 104, 114, 117, 119, 131, 133, 140, 141, 144, 150, 155, 156, 160, 163, 172, 174, 176, 177, 191, 193, 195, 196, 212, 224, 225, 230, 240, 248, 249, 250, 253, 254, 256, 261, 265, 267], "autogradcontext": [2, 12, 13], "ctx": [2, 4, 12, 13, 23, 149], "save_for_backward": [2, 4, 149], "mm": [2, 202, 268], "t": [2, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 21, 24, 27, 34, 38, 39, 43, 46, 47, 50, 54, 56, 57, 59, 64, 71, 79, 92, 94, 95, 97, 99, 102, 104, 105, 106, 108, 109, 111, 112, 114, 117, 120, 121, 127, 130, 138, 139, 143, 149, 155, 156, 158, 159, 160, 161, 162, 163, 166, 169, 170, 171, 172, 176, 177, 178, 179, 180, 182, 183, 184, 189, 191, 192, 193, 195, 196, 199, 200, 204, 205, 212, 213, 221, 224, 225, 227, 239, 240, 241, 242, 243, 251, 252, 253, 255, 256, 258, 262, 263, 265, 267, 274, 275, 276, 278, 283, 286], "unsqueez": [2, 17, 50, 72, 102, 120, 171, 177, 180, 182, 189], "expand_a": [2, 24], "tensor_list": [2, 12, 13, 154], "save": [2, 4, 7, 9, 14, 15, 24, 34, 35, 36, 37, 38, 39, 43, 44, 47, 52, 53, 54, 56, 79, 92, 101, 103, 104, 122, 127, 137, 138, 140, 142, 144, 148, 160, 161, 174, 176, 180, 181, 182, 184, 185, 188, 191, 196, 214, 215, 227, 228, 229, 230, 238, 239, 240, 242, 243, 245, 250, 254, 260, 261, 265, 284], "get_saved_vari": 2, "grad_input": [2, 149], "grad_weight": 2, "grad_bia": 2, "Then": [2, 4, 9, 15, 18, 21, 27, 47, 48, 56, 79, 89, 105, 106, 109, 111, 112, 117, 124, 138, 152, 169, 174, 175, 176, 178, 179, 180, 182, 184, 188, 209, 237, 263, 282, 283], "appli": [2, 3, 7, 12, 13, 17, 18, 21, 24, 34, 35, 44, 55, 56, 72, 86, 89, 94, 97, 99, 102, 104, 106, 120, 134, 137, 138, 140, 145, 147, 148, 149, 152, 154, 156, 161, 162, 163, 166, 169, 170, 171, 174, 176, 178, 180, 181, 182, 184, 186, 191, 192, 195, 196, 198, 199, 200, 202, 204, 207, 208, 209, 214, 215, 223, 237, 240, 244, 245, 248, 249, 252, 254, 256, 263, 265, 267, 274, 275, 279, 283, 286], "5314": 2, "2807": 2, "4864": 2, "7608": 2, "9101": 2, "0073": 2, "mulconst": 2, "object": [2, 4, 7, 8, 9, 13, 14, 17, 22, 24, 34, 35, 36, 39, 40, 46, 53, 56, 94, 95, 97, 99, 102, 104, 108, 112, 120, 121, 127, 134, 135, 137, 143, 145, 148, 154, 156, 158, 159, 172, 175, 180, 181, 182, 183, 185, 188, 189, 191, 195, 206, 207, 214, 225, 237, 239, 240, 242, 245, 255, 260, 261, 263, 279], "stash": 2, "saved_data": 2, "were": [2, 3, 7, 15, 21, 23, 34, 56, 87, 89, 94, 99, 102, 104, 106, 108, 112, 124, 144, 147, 151, 152, 156, 163, 170, 178, 179, 181, 183, 184, 192, 195, 196, 199, 212, 221, 225, 229, 230, 237, 255, 258, 266, 274, 283, 286], "todoubl": 2, "On": [2, 7, 9, 12, 24, 98, 102, 112, 127, 139, 152, 154, 163, 170, 176, 180, 181, 193, 196, 198, 199, 200, 213, 221, 224, 240, 258, 283, 287], "easiest": [2, 38, 98, 112, 161, 178, 195, 240], "your": [2, 4, 5, 7, 9, 10, 12, 14, 15, 18, 19, 21, 22, 23, 24, 34, 35, 38, 40, 46, 47, 48, 50, 53, 54, 55, 57, 58, 59, 71, 79, 86, 92, 94, 95, 98, 99, 102, 103, 106, 108, 109, 111, 113, 114, 116, 117, 120, 121, 122, 124, 131, 132, 134, 135, 137, 138, 139, 140, 143, 145, 148, 149, 150, 151, 152, 154, 155, 158, 159, 161, 162, 163, 167, 169, 170, 172, 175, 176, 177, 178, 181, 182, 183, 186, 188, 189, 191, 193, 195, 196, 199, 201, 204, 208, 223, 224, 225, 230, 238, 239, 241, 242, 243, 244, 245, 252, 253, 254, 255, 260, 261, 265, 268, 269, 278, 282, 283, 286, 287], "tabl": [2, 20, 111, 119, 137, 139, 154, 160, 181, 182, 188, 195, 196, 213, 225, 230], "set_data": 2, "data": [2, 3, 4, 8, 9, 10, 14, 15, 17, 20, 21, 23, 27, 34, 35, 38, 39, 43, 44, 46, 49, 50, 51, 52, 55, 64, 71, 76, 77, 79, 86, 89, 94, 95, 97, 101, 103, 104, 105, 106, 107, 108, 109, 111, 114, 120, 121, 133, 134, 137, 143, 144, 150, 154, 155, 156, 159, 160, 161, 162, 163, 166, 167, 169, 171, 172, 174, 177, 179, 180, 181, 182, 193, 198, 199, 200, 202, 207, 208, 209, 213, 214, 215, 221, 223, 224, 225, 229, 230, 231, 237, 238, 244, 245, 248, 254, 255, 259, 260, 261, 266, 267, 275, 277, 278, 279, 281, 283, 286, 287], "output_nr": 2, "after": [2, 3, 7, 8, 13, 15, 17, 18, 19, 21, 23, 24, 27, 34, 35, 36, 43, 46, 48, 50, 53, 56, 57, 92, 94, 95, 99, 104, 105, 106, 109, 111, 112, 114, 121, 130, 137, 139, 140, 141, 142, 145, 146, 147, 148, 151, 152, 154, 155, 156, 160, 162, 163, 169, 170, 172, 174, 175, 176, 177, 178, 179, 181, 182, 184, 186, 188, 189, 195, 196, 198, 200, 207, 224, 225, 229, 230, 237, 238, 240, 250, 252, 254, 259, 262, 281, 282, 283], "file": [2, 4, 5, 7, 9, 12, 13, 18, 22, 24, 42, 51, 54, 55, 56, 59, 68, 74, 78, 86, 87, 90, 92, 94, 95, 100, 108, 110, 112, 118, 119, 122, 124, 139, 143, 145, 146, 152, 154, 160, 169, 172, 175, 177, 185, 188, 191, 195, 198, 202, 207, 208, 209, 214, 224, 225, 229, 230, 236, 238, 239, 241, 247, 249, 250, 254, 255, 258, 261, 263, 266, 268, 269, 277, 278, 279, 282, 284], "bug": [2, 13, 101, 160, 199, 255, 265, 268, 278], "report": [2, 13, 21, 56, 79, 92, 94, 97, 99, 103, 131, 137, 141, 160, 172, 180, 182, 183, 230, 252, 265, 268, 278, 283], "github": [2, 3, 7, 8, 9, 13, 14, 20, 24, 27, 53, 57, 58, 59, 64, 117, 138, 139, 141, 142, 150, 151, 152, 154, 156, 162, 171, 174, 175, 180, 181, 182, 188, 198, 202, 207, 209, 214, 215, 223, 255, 263, 266, 267, 268, 278], "issu": [2, 7, 8, 9, 12, 24, 55, 130, 139, 140, 151, 156, 159, 160, 163, 171, 172, 177, 188, 193, 195, 196, 199, 200, 202, 207, 208, 221, 224, 226, 237, 255, 265, 266, 267, 268, 274, 276, 278, 279, 282], "fix": [2, 17, 21, 27, 34, 53, 54, 55, 56, 104, 130, 143, 179, 180, 200, 221, 239, 240, 253, 267, 283], "soon": [2, 56, 163, 169, 206, 214], "overview": [2, 7, 14, 57, 59, 97, 132, 133, 137, 145, 146, 152, 154, 175, 178, 180, 181, 182, 184, 188, 199, 202, 204, 261, 274, 275, 277, 284, 287], "alwai": [2, 3, 4, 5, 7, 9, 17, 20, 23, 24, 44, 56, 97, 99, 103, 109, 111, 112, 140, 141, 142, 143, 148, 154, 155, 172, 177, 178, 179, 180, 182, 195, 196, 198, 202, 253, 274, 278], "problem": [2, 7, 9, 14, 17, 18, 23, 53, 55, 56, 105, 107, 111, 112, 120, 127, 144, 155, 160, 161, 170, 178, 180, 182, 188, 192, 193, 196, 202, 225, 226, 229, 240, 255, 258, 274, 276], "question": [2, 7, 9, 12, 13, 21, 53, 95, 139, 154, 159, 184, 196, 202, 225, 275, 283], "forum": [2, 7, 9, 47, 130, 159, 200, 202], "touch": [2, 7, 9, 17, 202], "view": [3, 13, 14, 17, 18, 20, 24, 54, 57, 59, 60, 64, 86, 95, 97, 101, 102, 108, 111, 112, 114, 120, 121, 138, 141, 142, 144, 150, 151, 152, 154, 160, 174, 175, 180, 181, 182, 183, 184, 189, 205, 207, 208, 209, 212, 221, 223, 231, 238, 256, 263, 265, 279], "edit": [3, 7, 14, 15, 20, 24, 52, 54, 64, 141, 142, 152, 154, 159, 160, 174, 175, 177, 180, 181, 182, 207, 209, 263, 267], "code": [3, 4, 5, 7, 8, 9, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 27, 34, 35, 36, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 59, 60, 61, 66, 67, 69, 71, 72, 73, 76, 77, 79, 86, 87, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 124, 127, 130, 131, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 205, 207, 208, 209, 212, 214, 223, 224, 225, 226, 227, 229, 230, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 248, 249, 251, 252, 253, 254, 255, 256, 259, 260, 261, 263, 265, 266, 267, 275, 276, 277, 278, 279, 282, 283, 286], "prerequisit": [3, 4, 5, 7, 19, 57, 59, 60, 107, 124, 139, 141, 142, 147, 150, 151, 152, 154, 155, 163, 174, 175, 180, 181, 182, 191, 192, 196, 199, 206, 207, 209, 240, 263, 266, 282], "frontend": [3, 4, 5, 13, 88, 90, 132, 136, 137, 214, 248, 261, 268, 279, 287], "semant": [3, 4, 7, 9, 53, 72, 102, 107, 109, 110, 120, 140, 154, 195, 196, 261, 276, 277, 279, 284, 286, 287], "11": [3, 7, 14, 21, 23, 119, 138, 139, 158, 177, 182, 191, 193, 196, 208, 209, 212, 213, 225, 230], "nvidia": [3, 21, 54, 148, 154, 163, 193, 209, 224, 240, 260, 283], "toolkit": [3, 107, 162, 172, 195, 238], "releas": [3, 4, 7, 13, 21, 27, 54, 119, 121, 138, 139, 143, 169, 181, 183, 188, 206, 213, 214, 230, 240, 245, 255, 283], "greatli": [3, 7, 53, 94, 112, 179], "reduc": [3, 7, 14, 21, 24, 36, 39, 46, 60, 97, 99, 104, 119, 131, 138, 139, 140, 142, 144, 145, 148, 150, 152, 154, 161, 162, 163, 169, 172, 176, 177, 180, 182, 188, 191, 193, 196, 200, 208, 224, 225, 228, 229, 247, 249, 250, 258, 259, 260, 261, 263, 268, 283], "cpu": [3, 4, 7, 8, 12, 13, 14, 17, 18, 23, 24, 35, 40, 43, 46, 47, 52, 53, 56, 66, 77, 79, 86, 87, 92, 102, 104, 106, 112, 114, 119, 120, 127, 131, 132, 137, 138, 140, 141, 142, 145, 152, 154, 163, 170, 174, 175, 177, 178, 180, 181, 182, 183, 184, 185, 188, 191, 196, 198, 206, 212, 213, 215, 224, 225, 226, 229, 230, 237, 255, 260, 261, 265, 266, 268, 281, 287], "overhead": [3, 7, 13, 21, 60, 86, 119, 138, 139, 142, 147, 152, 161, 163, 172, 177, 180, 182, 183, 188, 193, 199, 206, 225, 230, 240, 251, 258, 265, 267, 268, 279, 283], "increas": [3, 7, 23, 24, 27, 39, 40, 47, 79, 86, 87, 92, 95, 104, 112, 138, 139, 140, 142, 144, 145, 146, 150, 169, 172, 177, 188, 196, 200, 208, 213, 223, 224, 225, 239, 240, 243, 245, 258, 260, 267, 279], "mostli": [3, 13, 24, 89, 94, 104, 145, 182, 184, 262], "util": [3, 4, 5, 7, 9, 13, 18, 24, 27, 36, 40, 47, 53, 55, 57, 59, 86, 97, 101, 103, 112, 119, 120, 121, 127, 132, 137, 138, 139, 140, 142, 145, 147, 154, 156, 158, 160, 161, 163, 170, 172, 174, 175, 177, 178, 181, 183, 184, 188, 189, 191, 193, 198, 204, 206, 207, 212, 214, 221, 223, 224, 238, 239, 247, 248, 250, 252, 254, 258, 260, 261, 266, 279, 281, 283], "deploy": [3, 104, 131, 135, 144, 214, 244, 254, 268, 281], "import": [3, 4, 5, 7, 8, 9, 12, 13, 14, 17, 21, 23, 24, 27, 34, 44, 46, 50, 53, 54, 55, 56, 57, 71, 79, 86, 89, 94, 95, 97, 99, 101, 102, 104, 106, 108, 109, 112, 116, 120, 121, 124, 130, 138, 139, 140, 141, 142, 147, 148, 149, 152, 154, 155, 156, 158, 159, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 188, 189, 192, 193, 195, 196, 200, 202, 204, 205, 206, 207, 209, 212, 213, 214, 215, 221, 225, 237, 238, 239, 240, 244, 245, 248, 250, 255, 256, 258, 259, 262, 263, 265, 266, 268, 269, 274, 276, 277, 278, 279, 281, 282, 283], "appear": [3, 9, 14, 17, 111, 195, 221], "won": [3, 13, 46, 112, 120, 138, 149, 158, 166, 171, 178, 195, 196, 224, 278], "heart": [3, 53, 213], "veri": [3, 4, 5, 7, 9, 12, 17, 18, 23, 24, 27, 43, 48, 50, 52, 53, 69, 79, 89, 95, 99, 106, 108, 112, 120, 127, 138, 142, 143, 145, 169, 170, 179, 180, 182, 183, 184, 186, 188, 189, 196, 198, 200, 221, 230, 239, 253, 274, 276], "time": [3, 4, 7, 8, 12, 14, 15, 16, 17, 18, 19, 21, 24, 34, 35, 36, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 54, 55, 56, 64, 69, 72, 76, 77, 79, 87, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 117, 120, 121, 124, 127, 130, 131, 135, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 169, 170, 171, 172, 176, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 191, 193, 195, 196, 198, 199, 200, 205, 206, 207, 212, 213, 215, 221, 224, 225, 226, 228, 229, 231, 237, 240, 251, 252, 253, 254, 256, 260, 265, 267, 274, 275, 276, 277, 278, 279, 281, 283, 286, 287], "tool": [3, 7, 12, 17, 55, 86, 92, 94, 95, 99, 103, 105, 120, 135, 138, 152, 154, 155, 160, 172, 180, 183, 188, 189, 191, 199, 208, 221, 229, 252, 258, 265], "compil": [3, 5, 7, 9, 10, 12, 13, 19, 21, 89, 105, 132, 136, 137, 154, 159, 185, 195, 202, 214, 215, 225, 228, 230, 239, 240, 247, 248, 255, 260, 261, 267, 268, 279, 287], "boost": [3, 104, 106, 160, 161, 202, 214, 215, 267, 278, 287], "would": [3, 4, 7, 9, 12, 17, 19, 20, 23, 24, 34, 46, 53, 57, 59, 79, 92, 94, 97, 99, 102, 104, 108, 111, 112, 117, 121, 127, 130, 138, 141, 142, 143, 144, 145, 146, 148, 149, 152, 155, 159, 160, 161, 163, 169, 170, 171, 175, 177, 178, 179, 180, 181, 182, 184, 191, 193, 195, 196, 198, 199, 200, 202, 207, 209, 221, 249, 250, 254, 258, 265, 266, 276, 277, 286, 287], "demonstr": [3, 4, 5, 9, 17, 19, 20, 21, 41, 46, 54, 61, 86, 89, 95, 97, 103, 113, 117, 131, 133, 134, 137, 138, 139, 141, 142, 143, 148, 149, 152, 156, 158, 159, 160, 163, 166, 172, 174, 175, 178, 180, 181, 182, 183, 188, 191, 192, 195, 196, 199, 200, 205, 206, 207, 209, 212, 213, 224, 225, 229, 230, 243, 244, 249, 251, 252, 253, 254, 256, 258, 259, 260, 262, 263, 265, 266, 267, 268, 276, 278, 279, 281, 282, 283], "mnist": [3, 7, 36, 47, 50, 79, 97, 101, 103, 132, 137, 138, 144, 154, 156, 171, 181, 186, 189, 200, 227, 260], "libtorch": [3, 4, 7, 9, 214], "counterpart": [3, 21, 160, 195, 209, 214, 283], "syntax": [3, 52, 88, 90, 91, 121, 225, 261], "step": [3, 4, 7, 8, 12, 13, 14, 15, 17, 18, 20, 21, 23, 24, 34, 38, 39, 46, 47, 50, 53, 56, 64, 71, 79, 86, 89, 94, 97, 103, 104, 105, 106, 112, 114, 117, 120, 133, 137, 138, 139, 140, 145, 146, 147, 148, 150, 152, 154, 155, 160, 162, 166, 170, 172, 179, 180, 181, 182, 183, 184, 185, 189, 191, 193, 195, 196, 201, 204, 205, 206, 207, 212, 214, 215, 221, 224, 237, 238, 240, 248, 254, 259, 261, 262, 265, 266, 267, 269, 278, 279, 281, 283], "depict": [3, 101, 196], "chunk": [3, 59, 154, 169, 172, 174, 263], "batch": [3, 7, 20, 21, 24, 36, 39, 40, 41, 48, 50, 53, 55, 56, 57, 59, 60, 79, 86, 92, 94, 95, 97, 101, 102, 103, 104, 109, 112, 121, 127, 131, 133, 136, 137, 138, 139, 140, 142, 143, 144, 145, 150, 154, 155, 156, 162, 163, 166, 169, 171, 172, 174, 177, 178, 179, 181, 182, 183, 185, 186, 188, 189, 191, 193, 196, 198, 199, 200, 224, 225, 261, 263, 267, 276, 279, 283, 286, 287], "data_load": [3, 7, 24], "optim": [3, 7, 12, 13, 14, 15, 17, 18, 20, 21, 23, 24, 27, 34, 35, 36, 37, 38, 41, 43, 44, 46, 50, 53, 57, 59, 64, 69, 70, 71, 74, 86, 89, 92, 94, 97, 101, 104, 105, 113, 117, 121, 127, 130, 131, 132, 134, 135, 137, 138, 139, 142, 147, 148, 150, 152, 154, 155, 156, 160, 162, 163, 170, 171, 172, 176, 177, 178, 179, 180, 181, 184, 185, 188, 189, 191, 192, 193, 195, 198, 199, 200, 202, 206, 207, 212, 214, 215, 224, 225, 229, 237, 238, 241, 244, 245, 247, 248, 249, 252, 254, 255, 260, 261, 267, 269, 274, 279, 281, 283, 287], "zero_grad": [3, 7, 24, 39, 50, 71, 94, 97, 112, 120, 138, 139, 140, 152, 154, 169, 180, 182, 189, 196, 206, 207, 214, 238, 243, 248], "nll_loss": [3, 138, 154, 181], "updat": [3, 7, 13, 14, 15, 16, 17, 20, 21, 24, 39, 46, 47, 53, 56, 71, 73, 86, 94, 104, 106, 111, 112, 113, 120, 121, 138, 139, 140, 144, 148, 152, 155, 163, 169, 178, 179, 181, 182, 188, 196, 199, 202, 204, 207, 212, 224, 237, 242, 259, 274, 282, 283], "captur": [3, 7, 9, 56, 94, 113, 114, 116, 131, 137, 138, 158, 191, 192, 193, 195, 196, 199, 215, 225, 255, 265, 268], "But": [3, 7, 12, 13, 47, 48, 56, 79, 95, 102, 108, 111, 143, 152, 163, 169, 170, 171, 179, 195, 198, 215, 225, 274, 277, 286], "slightli": [3, 17, 139, 154, 155, 172, 177, 184, 225, 240, 277], "prealloc": 3, "reus": [3, 13, 69, 112, 120, 149, 158, 170, 179, 196, 240, 244, 245, 258], "tensoropt": [3, 268], "floatcuda": 3, "dtype": [3, 4, 5, 12, 13, 17, 18, 19, 44, 97, 102, 108, 140, 149, 174, 195, 212, 214, 224, 237, 248, 250, 262, 263, 266, 268, 277], "longcuda": 3, "klong": 3, "zero": [3, 7, 8, 14, 21, 24, 34, 39, 44, 50, 53, 71, 94, 95, 97, 99, 102, 103, 111, 112, 120, 130, 138, 139, 146, 154, 155, 166, 170, 172, 175, 176, 180, 182, 184, 189, 200, 224, 228, 230, 236, 239, 240, 255, 259, 260, 261, 274, 276, 277, 282, 283], "ktrainbatchs": 3, "28": [3, 7, 21, 36, 99, 101, 112, 156, 171, 189, 212, 213, 225, 239, 283], "copy_": [3, 43, 52, 119, 140, 160, 180, 229, 237], "training_step": 3, "call": [3, 4, 7, 9, 10, 12, 13, 14, 16, 17, 18, 20, 21, 27, 34, 35, 36, 39, 41, 43, 44, 46, 47, 48, 50, 53, 55, 56, 57, 59, 71, 79, 89, 94, 95, 97, 99, 101, 102, 104, 106, 108, 111, 112, 117, 119, 120, 121, 130, 131, 133, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 152, 154, 155, 158, 159, 160, 162, 163, 166, 169, 170, 171, 172, 174, 175, 176, 178, 180, 181, 182, 183, 184, 186, 188, 191, 195, 196, 202, 205, 206, 207, 208, 212, 213, 224, 225, 226, 227, 229, 230, 238, 239, 240, 243, 250, 251, 252, 253, 255, 258, 265, 268, 282, 283, 286], "void": [3, 4, 5, 7, 8, 9, 18, 160, 175, 212, 225, 230, 239, 268, 278], "net": [3, 7, 24, 27, 47, 48, 50, 53, 56, 79, 89, 92, 97, 101, 102, 104, 138, 154, 166, 177, 181, 188, 189, 227], "stream": [3, 18, 86, 102, 105, 140, 172, 177, 212, 214, 268], "cudagraph": 3, "cudastream": 3, "capturestream": 3, "getstreamfrompool": 3, "setcurrentcudastream": 3, "capture_begin": 3, "capture_end": 3, "warm": [3, 75, 78, 119, 188, 193, 212, 213, 225, 230, 261, 279], "side": [3, 8, 55, 56, 86, 111, 156, 163, 169, 171, 172, 175, 179, 180, 188, 221], "prepar": [3, 14, 21, 24, 47, 55, 56, 72, 73, 101, 109, 120, 121, 156, 169, 174, 175, 178, 180, 215, 230, 244, 281, 283], "cach": [3, 131, 147, 160, 188, 199, 215, 240, 253, 258, 260, 267, 278], "cubla": [3, 225], "cudnn": [3, 145, 148, 155, 163, 224], "warmupstream": 3, "int": [3, 4, 5, 7, 14, 23, 24, 27, 55, 57, 59, 138, 139, 141, 152, 154, 160, 174, 175, 180, 181, 182, 188, 193, 195, 198, 209, 214, 258, 263, 265, 278], "num_warmup_it": 3, "success": [3, 7, 17, 79, 108, 144, 160, 184, 221], "replac": [3, 4, 7, 24, 27, 46, 59, 61, 95, 106, 112, 113, 117, 119, 127, 137, 138, 140, 154, 158, 176, 182, 184, 185, 188, 192, 195, 198, 214, 215, 225, 255, 261, 263, 267, 276, 279, 285], "replai": [3, 17, 162], "spin": [3, 97], "ordinari": 3, "epoch": [3, 7, 20, 24, 27, 36, 39, 40, 56, 57, 59, 92, 97, 101, 104, 106, 112, 121, 127, 138, 139, 140, 144, 145, 154, 163, 169, 178, 182, 189, 198, 200, 238], "59584": 3, "60000": [3, 154], "3921": 3, "test": [3, 9, 12, 24, 27, 36, 39, 40, 53, 87, 89, 95, 97, 103, 104, 106, 107, 113, 124, 137, 138, 139, 145, 154, 156, 158, 160, 163, 172, 177, 181, 184, 186, 189, 193, 195, 212, 213, 225, 265, 267, 286, 287], "2051": 3, "accuraci": [3, 21, 24, 27, 40, 47, 97, 103, 104, 112, 132, 133, 135, 137, 138, 139, 140, 144, 166, 176, 177, 181, 186, 189, 191, 213, 224, 238, 243, 260, 281, 283], "938": [3, 7, 163], "1826": 3, "1273": 3, "960": 3, "1796": 3, "1012": [3, 163], "968": 3, "1603": 3, "0869": 3, "973": 3, "2315": 3, "0736": [3, 97], "978": 3, "6": [3, 7, 14, 24, 38, 44, 53, 71, 89, 95, 97, 99, 102, 108, 111, 113, 117, 119, 120, 121, 148, 149, 154, 160, 163, 166, 170, 175, 176, 177, 180, 182, 191, 193, 195, 199, 209, 212, 213, 224, 244, 252, 253, 254, 258, 267, 269, 283], "0511": 3, "0704": 3, "977": [3, 163, 213], "7": [3, 7, 9, 21, 22, 23, 24, 38, 44, 55, 89, 97, 108, 119, 127, 138, 139, 154, 162, 163, 177, 191, 192, 193, 196, 202, 204, 205, 209, 212, 213, 224, 251, 255, 263, 266, 267, 269, 278], "0802": 3, "0654": 3, "979": 3, "0774": 3, "0604": 3, "980": 3, "9": [3, 4, 7, 21, 23, 24, 36, 42, 46, 53, 92, 97, 108, 111, 112, 119, 121, 160, 170, 177, 180, 189, 191, 196, 212, 213, 214, 225, 227, 230, 247, 248, 269, 283], "0669": 3, "0544": 3, "984": [3, 213], "0219": 3, "0517": 3, "983": 3, "real": [3, 7, 8, 17, 34, 40, 56, 58, 94, 104, 105, 106, 107, 111, 135, 138, 145, 146, 154, 155, 169, 175, 179, 184, 193, 195, 196, 213, 225, 244, 265, 276, 279], "0m44": 3, "287": 3, "018": 3, "sy": [3, 23, 24, 57, 59, 152, 154, 175, 204, 212], "0m1": 3, "116": [3, 265], "produc": [3, 7, 9, 14, 72, 104, 113, 120, 144, 147, 155, 156, 158, 159, 161, 163, 172, 178, 179, 184, 191, 195, 196, 207, 224, 240, 245, 262, 281], "4092": 3, "2037": 3, "2039": 3, "1274": 3, "961": 3, "1779": 3, "1017": [3, 108], "1559": 3, "0871": 3, "972": 3, "2240": 3, "0735": [3, 283], "0520": 3, "0710": 3, "0935": [3, 108], "0666": [3, 170], "0744": 3, "0603": 3, "981": 3, "0762": 3, "0547": 3, "0207": 3, "0525": 3, "0m6": 3, "952": [3, 160], "0m7": 3, "048": [3, 202], "0m0": 3, "619": 3, "gain": [3, 21, 86, 188, 263, 283, 287], "six": [3, 178], "kind": [3, 7, 24, 39, 47, 50, 53, 79, 95, 103, 105, 109, 121, 132, 137, 215, 258], "larg": [3, 4, 5, 7, 10, 15, 19, 20, 21, 23, 39, 43, 53, 64, 92, 95, 99, 101, 104, 109, 111, 112, 114, 120, 127, 133, 137, 138, 139, 141, 144, 148, 152, 154, 156, 166, 172, 174, 178, 179, 181, 182, 183, 191, 193, 196, 198, 204, 209, 213, 224, 230, 231, 240, 244, 245, 263, 265, 276, 283], "improv": [3, 7, 12, 13, 21, 24, 27, 39, 53, 60, 97, 102, 104, 112, 117, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 145, 148, 163, 170, 179, 183, 184, 191, 192, 193, 199, 200, 202, 204, 212, 214, 224, 225, 238, 240, 248, 252, 265, 266, 267, 278, 283, 287], "due": [3, 7, 9, 21, 23, 56, 86, 89, 102, 117, 138, 142, 147, 152, 169, 170, 181, 193, 199, 205, 208, 215, 255, 258, 265, 267, 276, 281, 283], "size": [3, 4, 5, 7, 8, 12, 14, 15, 17, 21, 23, 24, 34, 35, 39, 40, 44, 46, 47, 48, 50, 53, 55, 56, 59, 86, 92, 95, 97, 99, 102, 103, 104, 108, 109, 111, 112, 121, 127, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 154, 155, 156, 160, 161, 162, 163, 166, 169, 171, 172, 175, 177, 178, 179, 180, 181, 184, 188, 191, 192, 193, 195, 196, 198, 199, 201, 206, 207, 208, 214, 224, 225, 229, 231, 238, 239, 240, 259, 260, 263, 265, 266, 267, 274, 277, 279, 283], "larger": [3, 12, 15, 79, 86, 94, 104, 112, 116, 121, 131, 137, 138, 139, 142, 144, 150, 172, 179, 182, 184, 188, 191, 192, 193, 206, 207, 213, 225, 245, 267, 279], "heavi": [3, 7, 53, 104, 108], "less": [3, 7, 10, 12, 19, 24, 60, 86, 99, 104, 105, 112, 116, 127, 139, 144, 155, 158, 169, 172, 178, 179, 180, 188, 189, 193, 195, 196, 199, 209, 225, 229, 265, 267], "impact": [3, 15, 21, 39, 92, 104, 155, 172, 180, 183, 223, 258, 259, 267, 283], "smaller": [3, 39, 99, 104, 111, 112, 138, 142, 178, 180, 191, 225, 229, 245], "nevertheless": [3, 24, 163, 178], "richard": 4, "zou": 4, "integr": [4, 5, 7, 13, 17, 19, 38, 92, 113, 117, 119, 136, 137, 144, 147, 174, 188, 189, 193, 199, 206, 213, 221, 223, 237, 242, 252, 258, 262, 278, 282, 287], "opcheck": [4, 19], "basic": [4, 5, 12, 14, 18, 19, 20, 27, 34, 35, 36, 39, 40, 41, 42, 43, 44, 53, 58, 60, 61, 77, 81, 84, 91, 94, 97, 98, 99, 102, 104, 107, 111, 112, 113, 114, 116, 117, 120, 130, 131, 137, 142, 145, 148, 160, 167, 174, 178, 183, 196, 199, 200, 201, 206, 207, 225, 238, 249, 250, 254, 255, 260, 261, 275, 279], "program": [4, 5, 7, 10, 23, 64, 99, 105, 107, 108, 111, 137, 142, 145, 159, 172, 174, 181, 193, 207, 225, 240, 244, 254, 255, 258, 263, 265, 269, 282], "amd": 4, "rocm": [4, 188], "modif": [4, 17, 18, 24, 92, 105, 112, 148, 154, 176, 178, 181, 186, 189, 195, 199, 239, 245, 255], "e": [4, 5, 7, 8, 9, 10, 12, 13, 14, 19, 23, 34, 35, 40, 46, 47, 53, 55, 56, 64, 79, 89, 92, 94, 97, 99, 102, 104, 107, 111, 112, 121, 127, 130, 132, 137, 138, 140, 141, 142, 144, 145, 146, 149, 151, 152, 154, 156, 163, 170, 171, 175, 176, 180, 182, 184, 188, 192, 193, 195, 199, 200, 209, 212, 214, 215, 225, 227, 230, 239, 240, 242, 243, 262, 276, 277, 279, 281, 286, 287], "g": [4, 5, 7, 8, 10, 12, 13, 14, 17, 19, 23, 46, 53, 55, 56, 64, 92, 94, 97, 99, 102, 104, 106, 107, 111, 127, 130, 132, 137, 138, 140, 144, 145, 146, 152, 154, 156, 160, 169, 171, 175, 178, 180, 182, 184, 188, 193, 195, 199, 200, 209, 212, 215, 225, 230, 239, 240, 262, 268, 277, 281, 286, 287], "etc": [4, 5, 10, 13, 19, 47, 48, 50, 53, 55, 73, 97, 99, 102, 105, 106, 107, 108, 112, 121, 130, 142, 172, 176, 178, 179, 184, 195, 196, 199, 200, 213, 214, 225, 227, 240, 242, 276, 281], "wish": [4, 5, 7, 10, 19, 56, 79, 95, 102, 121, 141, 166, 171, 181, 191, 196, 207, 224, 253, 262, 275], "bring": [4, 5, 10, 95, 141, 172, 178, 188, 191, 196, 230, 240, 258, 267, 277, 286], "bless": 4, "path": [4, 5, 7, 9, 23, 24, 36, 53, 54, 56, 57, 79, 86, 92, 94, 97, 102, 103, 104, 105, 112, 121, 138, 139, 160, 175, 191, 193, 199, 202, 206, 207, 212, 215, 221, 225, 237, 239, 240, 241, 244, 258, 265, 266, 267, 274, 281], "fuse": [4, 5, 21, 24, 131, 135, 136, 137, 160, 177, 185, 199, 212, 260, 261, 262, 267, 278, 283], "subsystem": [4, 10, 19, 195, 252], "def": [4, 5, 7, 8, 9, 12, 14, 17, 23, 24, 57, 59, 71, 89, 97, 120, 121, 138, 139, 140, 141, 142, 147, 149, 152, 154, 156, 160, 170, 174, 175, 180, 181, 182, 189, 191, 204, 206, 207, 209, 212, 213, 215, 221, 225, 238, 250, 255, 259, 262, 263, 268, 269, 274, 278, 281, 282, 283], "mymuladd": [4, 5], "bind": [4, 5, 7, 8, 10, 13, 141, 240, 258, 266], "precompil": 4, "instead": [4, 6, 7, 10, 12, 13, 19, 21, 24, 25, 26, 34, 47, 48, 53, 55, 56, 57, 67, 94, 97, 102, 105, 106, 111, 112, 119, 120, 127, 138, 139, 140, 143, 144, 146, 149, 150, 154, 159, 161, 162, 163, 166, 169, 175, 176, 177, 180, 181, 182, 184, 186, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 207, 210, 213, 216, 221, 231, 245, 251, 253, 257, 259, 262, 267, 274, 276, 277, 278, 279, 283, 286], "cpp_extens": [4, 5, 13, 175, 225], "extens": [4, 7, 10, 18, 22, 56, 95, 121, 135, 137, 140, 147, 149, 154, 191, 213, 225, 228, 236, 251, 260, 261, 268, 274, 276, 287], "ahead": [4, 9, 39, 97, 147, 169, 189, 195, 207, 240, 254, 262], "setuptool": [4, 5, 13, 175, 188], "load_inlin": [4, 225], "setup": [4, 5, 7, 13, 20, 24, 38, 56, 57, 59, 138, 139, 144, 152, 169, 175, 182, 206, 207, 209, 225, 239, 265, 267, 276, 277, 282, 286], "extension_cpp": 4, "ext_modul": [4, 5, 13, 175], "cppextens": [4, 13, 175], "muladd": [4, 5], "cpp": [4, 7, 9, 12, 133, 137, 160, 214, 239, 254, 278, 287], "py_limited_api": [4, 5], "min": [4, 24, 56, 86, 99, 104, 127, 154, 175, 178, 180, 182, 191, 195, 255], "expos": [4, 7, 9, 12, 103, 140, 182, 196, 240, 282], "stabl": [4, 28, 29, 30, 31, 32, 53, 66, 79, 104, 105, 120, 127, 141, 157, 177, 187, 188, 190, 215, 224, 285], "limit": [4, 7, 13, 14, 18, 21, 24, 41, 53, 64, 79, 138, 142, 145, 155, 156, 162, 163, 171, 172, 184, 192, 193, 195, 196, 206, 225, 237, 267, 283], "subset": [4, 17, 89, 92, 97, 101, 104, 116, 127, 154, 175, 191, 213, 225, 276, 277], "extra_compile_arg": [4, 5, 13], "cxx": [4, 5, 7, 9, 214, 269], "dpy_limited_api": [4, 5], "0x03090000": [4, 5], "wheel": [4, 53, 104, 178, 188, 287], "cmdclass": [4, 5, 13, 175], "build_ext": [4, 5, 13, 175], "buildextens": [4, 5, 13, 175], "bdist_wheel": [4, 5], "cp39": [4, 5], "cu": 4, "cudaextens": [4, 175], "cpython": [4, 239], "agnost": [4, 192, 226], "pure": [4, 7, 13, 145, 149, 156, 171, 195, 198, 268, 278], "agnostic": 4, "minim": [4, 7, 13, 15, 21, 39, 56, 66, 67, 71, 72, 73, 76, 77, 79, 86, 94, 106, 111, 112, 120, 131, 137, 139, 144, 151, 160, 174, 179, 193, 240, 243, 245, 274, 281, 283], "oldest": 4, "hexcod": 4, "throughout": [4, 15, 56, 109, 154, 169, 172, 178, 189, 237, 276], "environ": [4, 5, 7, 8, 10, 14, 19, 22, 23, 38, 59, 86, 89, 95, 98, 101, 114, 124, 134, 137, 138, 139, 142, 147, 151, 152, 154, 160, 172, 174, 175, 179, 180, 181, 182, 193, 195, 196, 199, 202, 206, 207, 208, 209, 213, 215, 221, 223, 225, 239, 240, 249, 254, 256, 258, 259, 261, 263, 265, 278, 282], "unknown": 4, "behavior": [4, 8, 9, 12, 13, 14, 15, 17, 39, 53, 55, 99, 109, 112, 113, 130, 155, 159, 160, 163, 169, 172, 193, 195, 229, 240, 251, 253, 258, 275, 276], "runnabl": [4, 144, 160, 243], "three": [4, 7, 13, 15, 17, 18, 36, 39, 55, 56, 67, 79, 86, 89, 94, 95, 97, 101, 102, 105, 112, 117, 120, 121, 137, 141, 142, 145, 146, 163, 167, 170, 172, 175, 178, 182, 183, 184, 186, 188, 189, 196, 221, 230, 265, 267, 277, 278], "line": [4, 7, 9, 12, 15, 19, 53, 54, 55, 59, 60, 86, 97, 101, 102, 103, 104, 106, 112, 119, 144, 145, 146, 152, 154, 160, 177, 179, 181, 182, 184, 188, 189, 193, 195, 206, 207, 209, 214, 229, 238, 240, 255, 256, 258, 265, 268, 269, 274, 276], "specif": [4, 5, 7, 9, 12, 13, 14, 21, 23, 24, 36, 40, 47, 59, 79, 86, 92, 94, 95, 97, 99, 101, 103, 106, 107, 108, 112, 113, 114, 116, 117, 121, 124, 130, 134, 138, 139, 142, 145, 146, 148, 154, 155, 160, 172, 174, 176, 178, 180, 181, 182, 183, 184, 188, 189, 192, 195, 196, 198, 199, 202, 206, 207, 213, 214, 221, 223, 230, 237, 239, 249, 252, 254, 258, 259, 260, 262, 275, 278, 279, 281, 282, 283], "verifi": [4, 5, 7, 89, 94, 102, 117, 124, 130, 149, 156, 158, 161, 163, 176, 177, 192, 196, 198, 200, 213, 214, 221, 266], "met": [4, 17, 138, 172], "crash": [4, 7, 265], "wors": [4, 24], "silent": [4, 19, 160, 193, 237], "incorrect": [4, 19, 56, 94, 97, 143, 149, 172, 193], "avoid": [4, 20, 47, 92, 101, 104, 138, 139, 140, 142, 148, 152, 154, 163, 166, 169, 178, 180, 193, 195, 200, 206, 224, 225, 229, 230, 237, 249, 258, 266, 267, 274, 275, 279, 282, 283], "unstabl": [4, 284], "libtorch_python": 4, "particular": [4, 7, 12, 14, 36, 47, 55, 86, 87, 92, 94, 95, 97, 99, 111, 134, 144, 145, 147, 154, 156, 166, 171, 174, 181, 191, 195, 198, 199, 229, 240, 249, 262, 274, 275, 277, 279], "aten": [4, 5, 12, 13, 18, 117, 119, 160, 188, 195, 212, 213, 214, 221, 230, 239, 268, 278, 281], "strongli": [4, 18, 155, 170, 199], "recommend": [4, 7, 10, 12, 13, 18, 23, 24, 64, 86, 95, 101, 112, 114, 116, 137, 140, 146, 152, 167, 177, 184, 188, 195, 196, 198, 199, 202, 206, 213, 214, 221, 229, 238, 239, 240, 244, 263, 265, 276, 281, 287], "ascertain": [4, 266], "compliant": [4, 198, 206, 207], "safe": [4, 8, 24, 104, 172], "guarante": [4, 13, 104, 151, 154, 163, 172, 176, 181, 182, 195, 255, 275], "better": [4, 7, 17, 21, 24, 36, 39, 40, 47, 56, 60, 94, 97, 99, 101, 104, 111, 112, 116, 119, 132, 137, 140, 141, 144, 145, 146, 147, 160, 161, 162, 169, 171, 172, 178, 179, 184, 188, 189, 191, 195, 202, 225, 240, 248, 258, 263, 267, 274, 275, 283], "wild": 4, "west": 4, "There": [4, 7, 9, 12, 13, 17, 18, 21, 34, 50, 79, 89, 94, 95, 97, 99, 102, 103, 104, 105, 106, 109, 111, 112, 127, 130, 133, 146, 147, 151, 155, 156, 159, 161, 163, 166, 169, 171, 174, 177, 178, 181, 182, 184, 195, 196, 197, 198, 199, 215, 225, 227, 232, 233, 234, 235, 239, 240, 243, 244, 246, 249, 254, 256, 258, 262, 265, 276, 283], "caveat": [4, 8, 152, 180, 225, 229, 265], "yourself": [4, 7, 12, 38, 97, 108, 137, 162, 196], "truli": [4, 7, 53, 162], "relev": [4, 7, 17, 57, 105, 107, 111, 124, 139, 142, 176, 191, 195, 240, 242, 249, 255, 266], "third": [4, 7, 8, 9, 12, 15, 19, 56, 66, 67, 69, 71, 72, 73, 76, 77, 99, 102, 109, 120, 131, 137, 141, 149, 175, 184, 274, 286], "intend": [4, 7, 12, 15, 94, 104, 138, 142, 160, 163, 183, 193, 195, 199, 200, 227, 240, 250, 274], "influenc": [4, 7, 56, 99, 172, 258], "accordingli": [4, 9, 13, 23, 155, 169, 180, 191, 202], "command": [4, 7, 17, 54, 95, 101, 103, 116, 124, 137, 140, 151, 152, 172, 175, 178, 180, 181, 182, 184, 188, 189, 191, 198, 207, 209, 213, 214, 230, 238, 240, 254, 255, 256, 263, 265, 269], "consequ": [4, 142, 172, 179, 195], "properli": [4, 12, 13, 17, 54, 59, 104, 149, 152, 154, 163, 169, 170, 178, 180, 181, 182, 184, 199, 237, 274, 276], "could": [4, 7, 8, 12, 13, 14, 56, 92, 94, 99, 104, 105, 106, 108, 109, 111, 114, 119, 138, 139, 142, 143, 146, 154, 163, 169, 172, 178, 179, 180, 181, 182, 184, 188, 189, 191, 195, 198, 207, 208, 209, 214, 215, 221, 229, 230, 258, 262, 274, 276, 278, 281, 286], "outsid": [4, 8, 13, 17, 18, 48, 136, 137, 140, 142, 148, 188, 191, 195, 237, 245, 253, 274], "cannot": [4, 7, 8, 9, 14, 17, 23, 53, 64, 86, 102, 113, 117, 120, 121, 140, 141, 149, 152, 154, 155, 163, 172, 178, 193, 195, 212, 252, 267, 286], "mymuladd_cpu": 4, "const": [4, 5, 7, 8, 9, 12, 13, 18, 160, 175, 212, 214, 225, 239, 268, 278], "torch_check": [4, 5, 12], "torch_internal_assert": [4, 12], "devicetyp": [4, 12, 18], "a_contig": [4, 5], "contigu": [4, 5, 12, 35, 163, 240, 278], "b_contig": [4, 5], "a_ptr": [4, 5], "data_ptr": [4, 5, 12, 268], "b_ptr": [4, 5], "result_ptr": [4, 12], "int64_t": [4, 7, 8, 12, 212, 278], "numel": [4, 5, 12, 180, 239, 274], "order": [4, 5, 7, 9, 10, 14, 15, 18, 19, 21, 34, 35, 36, 47, 48, 53, 54, 59, 66, 67, 69, 71, 72, 73, 76, 77, 79, 86, 92, 94, 95, 97, 102, 112, 113, 114, 116, 117, 119, 120, 132, 137, 138, 140, 143, 144, 146, 149, 152, 154, 159, 160, 161, 163, 175, 176, 181, 184, 186, 191, 193, 195, 196, 198, 199, 212, 229, 239, 249, 250, 258, 262, 263, 276, 279, 283, 286], "torch_librari": [4, 5, 7, 8, 9, 10, 12, 19, 214], "ensur": [4, 5, 9, 12, 13, 14, 15, 17, 18, 24, 40, 53, 57, 60, 67, 104, 112, 113, 119, 120, 121, 138, 142, 151, 152, 154, 158, 172, 174, 178, 179, 181, 183, 191, 192, 193, 196, 206, 225, 227, 237, 243, 252, 258, 266, 268, 278, 282], "awar": [4, 79, 94, 102, 142, 144, 154, 155, 183, 195, 252, 274], "top": [4, 7, 9, 12, 21, 24, 38, 54, 56, 86, 87, 95, 98, 101, 104, 112, 142, 154, 177, 182, 183, 188, 189, 193, 198, 213, 221, 223, 281, 283], "project": [4, 7, 56, 94, 101, 121, 142, 175, 179, 184, 189, 214, 215, 221, 259, 279], "schema": [4, 8, 13], "mutat": [4, 8, 12, 13, 19, 120, 156, 171, 172, 195, 205, 212, 286], "m": [4, 5, 7, 8, 9, 12, 13, 17, 18, 24, 34, 46, 53, 94, 99, 108, 112, 138, 139, 156, 160, 161, 175, 177, 180, 182, 207, 213, 221, 240, 258, 266, 278, 283], "torch_library_impl": [4, 5, 8, 12, 13, 18], "impl": [4, 5, 8, 12, 13, 18, 239], "myaddmul": [4, 5], "__global__": 4, "muladd_kernel": [4, 5], "idx": [4, 5, 24, 36, 177, 189, 283], "blockidx": 4, "blockdim": 4, "threadidx": 4, "mymuladd_cuda": 4, "255": [4, 7, 15, 97, 104, 191, 230, 262], "256": [4, 5, 7, 21, 24, 55, 92, 142, 143, 162, 184, 195, 202, 212, 213, 230, 283], "faketensor": [4, 19, 195, 266], "kernel": [4, 5, 7, 10, 12, 16, 19, 21, 23, 87, 97, 99, 102, 112, 117, 131, 132, 137, 140, 145, 156, 160, 163, 170, 171, 172, 183, 184, 185, 188, 192, 193, 195, 196, 199, 202, 221, 225, 227, 229, 230, 240, 247, 250, 255, 260, 261, 267, 268, 269, 278, 281, 283, 285], "meta": [4, 19, 23, 140, 142, 144, 156, 171, 178, 195, 231, 237, 260], "abstract": [4, 7, 14, 17, 36, 55, 64, 92, 102, 103, 107, 112, 120, 142, 144, 154, 172, 175, 178, 196, 208, 209], "metadata": [4, 9, 13, 19, 21, 147, 178, 189, 195, 229, 244, 266, 283], "correct": [4, 5, 7, 12, 13, 14, 15, 16, 19, 24, 39, 46, 47, 50, 53, 67, 79, 89, 92, 94, 95, 97, 99, 102, 103, 105, 106, 112, 120, 138, 139, 143, 148, 155, 160, 163, 170, 178, 180, 181, 184, 186, 188, 189, 196, 209, 224, 237, 255, 263, 266, 279], "stride": [4, 7, 19, 24, 56, 95, 97, 99, 138, 148, 160, 163, 191, 195, 229, 262, 266, 277], "register_fak": [4, 8, 19], "though": [4, 7, 13, 50, 79, 94, 102, 104, 105, 127, 148, 149, 156, 159, 171, 178, 189, 195, 196, 214, 225, 239, 244, 267, 274], "definit": [4, 7, 9, 12, 13, 41, 50, 72, 79, 89, 106, 120, 130, 132, 137, 159, 170, 179, 183, 239, 240, 275], "load": [4, 8, 9, 21, 23, 24, 27, 34, 35, 37, 38, 39, 43, 44, 46, 50, 55, 56, 59, 79, 92, 97, 102, 103, 105, 112, 114, 122, 137, 138, 140, 145, 160, 163, 169, 172, 174, 178, 188, 189, 191, 195, 198, 206, 212, 214, 215, 224, 228, 236, 237, 239, 244, 245, 254, 255, 260, 261, 265, 267, 268, 282, 283, 284], "strive": 4, "load_librari": [4, 8, 9], "next": [4, 7, 9, 12, 14, 15, 17, 18, 20, 21, 24, 36, 46, 53, 55, 57, 59, 60, 86, 89, 94, 97, 99, 102, 104, 105, 109, 112, 114, 121, 130, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 151, 155, 156, 159, 160, 162, 166, 169, 171, 172, 179, 180, 181, 182, 184, 188, 189, 195, 196, 200, 213, 214, 215, 221, 229, 230, 244, 245, 250, 263, 267, 269, 276, 277, 283], "_c": [4, 5, 108, 141, 212, 265], "_": [4, 14, 15, 17, 18, 24, 43, 52, 53, 56, 97, 102, 105, 112, 130, 140, 141, 145, 154, 156, 166, 178, 180, 182, 189, 204, 212, 213, 224, 229, 255, 259, 263, 281], "_check": 4, "empty_lik": [4, 5, 102, 163, 274], "formula": [4, 13, 19, 104, 158, 178], "matter": [4, 191, 204, 224, 274, 276], "wrong": [4, 56, 79, 106, 145, 160, 193], "hold": [4, 17, 20, 23, 50, 66, 67, 69, 71, 72, 73, 92, 112, 120, 138, 139, 140, 145, 151, 169, 179, 180, 182, 229, 237, 240], "happen": [4, 12, 34, 35, 36, 39, 46, 56, 94, 97, 99, 102, 104, 106, 112, 114, 139, 140, 142, 149, 152, 154, 172, 176, 180, 188, 189, 195, 196, 208, 225, 229, 240, 243, 253, 255, 267], "modul": [4, 8, 9, 15, 16, 17, 20, 23, 24, 27, 35, 40, 41, 44, 47, 48, 50, 53, 57, 59, 64, 70, 72, 74, 94, 95, 97, 102, 103, 106, 111, 116, 121, 122, 127, 130, 131, 137, 138, 139, 140, 142, 143, 147, 148, 152, 154, 156, 159, 160, 163, 166, 169, 171, 174, 175, 177, 178, 180, 181, 182, 183, 186, 189, 191, 192, 193, 195, 199, 200, 206, 207, 208, 209, 213, 214, 221, 225, 227, 228, 230, 236, 240, 242, 244, 245, 258, 260, 261, 262, 265, 267, 268, 278, 281, 282, 283], "initi": [4, 7, 9, 12, 14, 17, 20, 23, 24, 35, 36, 39, 46, 53, 59, 67, 76, 77, 79, 95, 97, 102, 103, 104, 106, 109, 111, 112, 119, 120, 121, 127, 138, 139, 142, 145, 146, 155, 156, 160, 163, 169, 172, 174, 176, 177, 179, 180, 181, 182, 184, 188, 192, 193, 196, 199, 200, 206, 207, 209, 213, 221, 223, 225, 229, 237, 240, 244, 245, 263, 265, 277], "pybind11_modul": [4, 175], "notic": [4, 9, 12, 17, 34, 46, 47, 56, 79, 89, 94, 97, 102, 104, 106, 121, 130, 149, 154, 160, 162, 170, 171, 178, 188, 193, 195, 199, 200, 243, 255, 274, 276], "pybind11": [4, 9, 12, 175, 225], "promis": [4, 112, 278], "With": [4, 12, 13, 18, 20, 21, 23, 24, 43, 52, 56, 79, 89, 94, 95, 101, 108, 140, 142, 149, 152, 154, 160, 166, 169, 174, 180, 181, 182, 183, 184, 185, 200, 202, 205, 206, 209, 221, 223, 229, 237, 240, 254, 258, 259, 261, 263, 267, 268, 283], "sadli": 4, "foreshadow": 4, "wonder": [4, 106, 130, 169, 172, 196, 199], "sai": [4, 7, 19, 27, 46, 55, 102, 106, 108, 111, 140, 143, 156, 161, 169, 176, 188, 267], "not_agnost": 4, "csrc": [4, 9, 175, 212], "extension_bad": 4, "__init__": [4, 5, 7, 8, 9, 14, 17, 24, 35, 40, 55, 57, 71, 97, 99, 106, 120, 121, 138, 145, 147, 152, 154, 156, 170, 174, 176, 180, 181, 182, 189, 191, 206, 207, 209, 213, 221, 227, 229, 255, 262, 278, 282], "successfulli": [4, 7, 9, 54, 114, 141, 144, 154, 160, 174, 181, 195, 196, 212, 213, 227, 241, 242, 243, 276], "extern": [4, 55, 104, 121, 144, 159, 160, 212, 240, 268, 278], "pyobject": 4, "pyinit__c": 4, "struct": [4, 7, 8, 9, 18], "pymoduledef": 4, "module_def": 4, "pymoduledef_head_init": 4, "null": [4, 7, 221, 265], "interpret": [4, 7, 60, 86, 89, 95, 111, 131, 137, 146, 147, 184, 193, 195, 225, 228, 236, 239, 255, 258, 260, 261, 268], "global": [4, 7, 53, 60, 92, 142, 156, 169, 174, 181, 186, 195, 204, 208, 212, 226, 237, 239, 240, 282, 283], "variabl": [4, 7, 9, 12, 34, 53, 86, 92, 94, 102, 105, 106, 108, 112, 124, 147, 151, 154, 160, 174, 180, 183, 195, 196, 199, 202, 213, 221, 249, 256, 258, 265, 267, 269, 276, 278, 279, 282, 286], "pymodule_cr": 4, "entir": [4, 7, 17, 20, 23, 24, 50, 53, 57, 104, 106, 109, 112, 127, 137, 138, 139, 145, 147, 148, 169, 171, 174, 176, 178, 182, 184, 192, 195, 196, 207, 224, 229, 231, 240, 245, 255, 274, 275, 276], "statement": [4, 12, 34, 46, 48, 113, 184, 195, 224, 226, 282], "trigger": [4, 140, 152, 160, 172, 180, 182, 192, 240], "challeng": [4, 17, 108, 109, 113, 131, 138, 141, 142, 154, 170, 179, 191, 192, 207, 208, 209, 225, 260], "shift": [4, 178, 200], "toward": [4, 24, 53, 104, 146, 179], "trivial": [4, 17, 55, 60, 102, 143, 196, 208], "pathlib": [4, 5, 112, 139, 191], "so_fil": [4, 5], "__file__": [4, 5, 175, 225], "glob": [4, 5], "assert": [4, 5, 8, 14, 23, 24, 140, 147, 152, 156, 160, 170, 181, 183, 189, 195, 204, 212, 250, 263, 265, 266, 283], "len": [4, 5, 8, 24, 55, 59, 112, 127, 138, 139, 140, 154, 180, 181, 189, 191, 209, 283], "f": [4, 5, 9, 12, 14, 15, 19, 23, 24, 34, 46, 50, 57, 59, 71, 94, 97, 106, 112, 120, 121, 130, 138, 139, 141, 142, 143, 152, 154, 156, 160, 161, 170, 174, 175, 177, 180, 181, 182, 189, 191, 204, 206, 207, 209, 212, 213, 221, 225, 259, 263, 265, 266, 268, 283, 286], "register_autograd": [4, 19, 252], "prefer": [4, 7, 12, 19, 57, 161, 166, 175, 178, 193, 196, 200, 201, 224, 252, 265, 278], "directli": [4, 7, 9, 12, 14, 15, 17, 19, 35, 43, 52, 56, 89, 92, 94, 95, 97, 102, 113, 114, 116, 117, 140, 141, 142, 147, 149, 150, 161, 172, 177, 178, 182, 184, 196, 200, 207, 258, 265, 267, 276, 277], "_backward": 4, "saved_tensor": [4, 149], "grad_a": 4, "grad_b": 4, "none": [4, 8, 14, 17, 18, 23, 24, 27, 53, 92, 94, 104, 108, 112, 130, 138, 139, 140, 154, 156, 160, 163, 171, 174, 181, 191, 195, 202, 206, 207, 209, 212, 238, 250, 262, 281, 283], "needs_input_grad": 4, "_setup_context": 4, "saved_a": 4, "saved_b": 4, "setup_context": 4, "composit": [4, 7, 10, 14, 19, 106, 107, 161, 174, 178, 209, 252], "had": [4, 7, 50, 55, 94, 97, 102, 109, 112, 114, 120, 130, 169, 170, 179, 189, 214, 221, 237], "own": [4, 7, 12, 13, 14, 17, 20, 21, 23, 35, 36, 53, 56, 67, 79, 92, 94, 95, 97, 112, 117, 119, 120, 132, 137, 138, 139, 140, 146, 147, 148, 152, 160, 169, 170, 176, 177, 178, 181, 182, 184, 191, 193, 195, 196, 198, 199, 206, 208, 225, 237, 262, 265, 267, 283], "mymul": 4, "mymul_cpu": 4, "correctli": [4, 5, 15, 19, 53, 56, 79, 94, 95, 97, 124, 137, 140, 158, 163, 169, 172, 174, 176, 177, 191, 193, 196, 199, 209, 243, 276], "mathemat": [4, 13, 16, 19, 46, 52, 67, 94, 97, 99, 108, 154, 178, 195], "plan": [4, 7, 10, 13, 23, 121, 139, 142, 191, 196, 277], "gradcheck": [4, 19, 148, 149, 158, 240], "sample_input": [4, 5, 121], "make_tensor": [4, 5], "make_nondiff_tensor": [4, 5], "20": [4, 5, 7, 24, 86, 89, 92, 97, 102, 119, 138, 144, 145, 152, 154, 155, 163, 169, 176, 180, 182, 188, 212, 225, 230, 239, 255, 259, 283], "14": [4, 5, 9, 27, 97, 138, 160, 191, 199, 213, 225, 230, 258], "123": [4, 5, 55, 182, 213], "reference_muladd": [4, 5], "extend": [4, 7, 8, 12, 24, 27, 56, 92, 113, 114, 115, 116, 131, 132, 136, 137, 138, 146, 155, 177, 181, 182, 191, 192, 196, 214, 215, 240, 245, 249, 251, 262, 265, 268, 287], "arg": [4, 5, 23, 24, 57, 59, 108, 121, 138, 139, 152, 154, 159, 179, 180, 181, 182, 191, 193, 195, 204, 206, 207, 212, 214, 255, 259, 268], "assert_clos": [4, 5], "check": [4, 5, 7, 9, 12, 16, 17, 18, 24, 38, 39, 40, 43, 46, 47, 48, 53, 54, 56, 59, 62, 63, 79, 85, 89, 94, 97, 99, 102, 103, 104, 105, 108, 112, 114, 119, 130, 137, 138, 139, 140, 141, 144, 145, 152, 154, 155, 158, 160, 163, 170, 171, 172, 176, 177, 178, 181, 191, 192, 193, 195, 196, 198, 199, 203, 207, 213, 214, 217, 218, 219, 220, 221, 222, 224, 230, 244, 248, 250, 254, 255, 269, 271, 272, 277, 278, 279, 280, 281, 282], "undefin": [4, 8, 154, 199, 274, 275, 276], "myadd_out": 4, "myadd_out_cpu": 4, "is_contigu": [4, 163, 239], "caus": [4, 9, 15, 18, 79, 86, 94, 102, 112, 143, 160, 172, 177, 180, 184, 188, 191, 195, 196, 221, 226, 240, 253, 258, 265, 274, 282], "incompat": [4, 141, 195, 244, 255], "went": [4, 56, 99, 102, 147, 160], "fairli": [4, 104, 112, 154, 169, 179, 199], "serv": [5, 7, 10, 61, 64, 89, 97, 104, 109, 120, 137, 152, 159, 162, 175, 181, 182, 196, 208, 212, 224, 225, 239, 249, 266, 276], "languag": [5, 7, 10, 27, 47, 53, 99, 105, 107, 109, 137, 142, 144, 145, 146, 167, 182, 184, 202, 212, 213, 240, 244, 245, 250, 252, 255, 263, 268], "intel": [5, 10, 137, 154, 160, 163, 260, 281, 282], "label": [5, 7, 36, 39, 40, 44, 46, 47, 55, 56, 79, 92, 94, 95, 97, 101, 102, 103, 106, 111, 119, 127, 130, 139, 142, 145, 152, 172, 177, 180, 184, 189, 196, 198, 221, 225, 227, 230, 255, 259, 260, 283], "xpu": [5, 35, 40, 43, 66, 79, 102, 120, 127, 154, 198, 214, 230], "bundl": [5, 250], "essenti": [5, 7, 13, 17, 19, 34, 53, 105, 106, 108, 147, 154, 167, 172, 179, 195, 201, 258, 281], "activ": [5, 7, 13, 15, 17, 18, 21, 24, 35, 56, 62, 63, 86, 94, 95, 97, 104, 106, 112, 130, 131, 139, 142, 147, 150, 154, 161, 169, 176, 177, 188, 199, 200, 202, 203, 213, 214, 217, 218, 219, 220, 221, 222, 223, 230, 240, 262, 263, 268, 269, 271, 272, 280, 281, 283], "prior": [5, 14, 18, 24, 54, 56, 94, 99, 104, 152, 162, 176, 189, 199, 207], "execut": [5, 7, 12, 14, 18, 20, 22, 34, 35, 41, 42, 46, 48, 51, 54, 68, 74, 78, 86, 90, 94, 97, 100, 102, 105, 110, 113, 117, 118, 122, 133, 137, 140, 141, 143, 144, 147, 154, 155, 159, 160, 163, 172, 175, 178, 179, 181, 182, 183, 185, 193, 195, 199, 202, 213, 214, 221, 224, 236, 239, 247, 250, 254, 255, 258, 261, 263, 265, 268, 278, 284], "best": [5, 7, 12, 41, 46, 56, 64, 79, 92, 114, 117, 119, 121, 127, 132, 135, 137, 150, 154, 156, 160, 171, 172, 177, 180, 182, 186, 195, 199, 213, 214, 215, 230, 239, 240, 243, 250, 252, 258, 260, 267, 278, 283], "c": [5, 15, 18, 19, 23, 24, 46, 66, 67, 71, 89, 94, 95, 101, 102, 104, 111, 120, 132, 136, 137, 139, 146, 147, 149, 154, 160, 163, 172, 177, 182, 183, 191, 193, 195, 196, 212, 221, 224, 225, 237, 238, 254, 265, 269, 278], "sycl_exampl": 5, "sycl_extens": 5, "test_sycl_extens": 5, "syclextens": 5, "except": [5, 12, 14, 21, 43, 46, 52, 53, 56, 95, 97, 99, 102, 106, 109, 113, 127, 130, 140, 141, 145, 156, 158, 161, 163, 171, 175, 184, 195, 214, 249, 255, 266, 279, 283, 286, 287], "o": [5, 7, 9, 14, 23, 24, 53, 54, 57, 59, 104, 138, 139, 141, 152, 154, 166, 169, 172, 174, 175, 177, 180, 181, 182, 191, 206, 207, 209, 212, 225, 229, 259, 263, 265, 266, 282, 283], "find_packag": [5, 7, 9, 214], "library_nam": 5, "o3": [5, 225], "fdiagnost": 5, "color": [5, 47, 56, 95, 97, 99, 101, 102, 144, 162, 163, 177, 189, 191, 198], "is_avail": [5, 7, 15, 92, 102, 174, 175, 179, 181, 255, 263, 282], "this_dir": 5, "dirnam": [5, 160, 175, 221], "curdir": 5, "extensions_dir": 5, "join": [5, 13, 23, 43, 52, 53, 54, 57, 97, 133, 138, 145, 152, 154, 180, 181, 182, 206, 207, 225, 259, 265], "construct": [5, 7, 17, 34, 50, 56, 69, 71, 89, 104, 120, 127, 132, 137, 140, 146, 149, 155, 156, 161, 167, 171, 178, 179, 181, 184, 196, 198, 199, 213, 224, 227, 242, 259, 279, 286], "install_requir": 5, "descript": [5, 7, 54, 138, 139, 160, 178, 180, 181, 182, 183, 191, 195, 200, 225, 240, 255, 256, 281], "c10": [5, 8, 9, 12, 13, 18, 175, 213, 214, 225, 239, 268, 278], "xpustream": 5, "hpp": [5, 175], "nd_item": 5, "get_global_id": 5, "muladdkernelfunctor": 5, "_numel": 5, "_a": 5, "_b": 5, "_result": 5, "privat": [5, 8, 17, 18, 141, 175, 176, 274], "mymuladd_xpu": 5, "is_xpu": 5, "res_ptr": 5, "queue": [5, 8, 221, 240], "getcurrentxpustream": 5, "constexpr": [5, 212, 278], "thread": [5, 7, 8, 9, 12, 56, 119, 140, 141, 152, 156, 172, 177, 180, 181, 182, 221, 225, 230, 239, 240, 258], "submit": [5, 13, 214], "handler": [5, 12, 191, 237], "cgh": 5, "parallel_for": 5, "nd_rang": 5, "static_cast": [5, 160, 212, 278], "__all__": 5, "ctype": [5, 212], "current_dir": 5, "build_dir": 5, "_op": [5, 117], "dl_open_guard": 5, "loaded_lib": 5, "cdll": 5, "_intern": 5, "common_util": 5, "testcas": 5, "unittest": 5, "testmymuladd": 5, "self": [5, 7, 8, 9, 12, 13, 14, 17, 18, 24, 27, 36, 53, 57, 59, 71, 97, 106, 112, 119, 120, 121, 137, 138, 142, 147, 152, 154, 156, 160, 162, 170, 174, 180, 181, 182, 188, 189, 191, 195, 199, 206, 207, 209, 213, 221, 230, 237, 245, 255, 262, 278], "_test_correct": 5, "skipif": 5, "test_correctness_xpu": 5, "__name__": [5, 14, 55, 57, 59, 138, 139, 141, 152, 154, 174, 180, 181, 182, 206, 207, 212, 221, 259, 263], "__main__": [5, 14, 55, 57, 59, 138, 139, 152, 154, 174, 180, 181, 182, 206, 207, 212, 221, 225, 259, 263], "against": [5, 9, 19, 39, 40, 47, 99, 101, 114, 141, 154, 163, 178, 199, 214, 225], "showcas": [5, 17, 69, 139, 140, 166, 169, 196, 268, 287], "support": [5, 7, 9, 14, 17, 18, 20, 21, 23, 24, 27, 34, 40, 50, 55, 60, 62, 63, 79, 87, 89, 94, 95, 96, 97, 98, 99, 102, 103, 104, 113, 114, 115, 116, 119, 131, 136, 137, 138, 139, 140, 141, 144, 149, 151, 152, 154, 155, 158, 160, 163, 170, 172, 174, 175, 176, 177, 178, 180, 181, 182, 188, 191, 193, 195, 198, 202, 203, 204, 205, 207, 212, 213, 214, 215, 217, 218, 219, 220, 222, 223, 225, 230, 240, 249, 251, 254, 255, 256, 258, 260, 262, 265, 266, 269, 271, 272, 274, 275, 276, 278, 279, 280, 281, 282, 283], "enabl": [5, 7, 12, 14, 17, 18, 20, 23, 24, 27, 36, 50, 59, 60, 86, 94, 102, 104, 116, 121, 138, 139, 141, 142, 144, 147, 148, 149, 152, 154, 160, 163, 172, 174, 176, 177, 178, 188, 189, 191, 192, 195, 196, 200, 202, 206, 207, 208, 213, 214, 221, 224, 230, 237, 245, 249, 250, 251, 253, 254, 258, 259, 262, 266, 267, 274, 276, 278, 279, 282, 287], "torchscript": [6, 8, 9, 25, 26, 114, 131, 210, 214, 230, 257], "export": [6, 10, 12, 25, 26, 50, 89, 94, 115, 116, 131, 137, 151, 152, 160, 183, 185, 193, 202, 210, 213, 215, 224, 240, 244, 247, 257, 260, 261, 278, 282], "peter": 7, "goldsborough": 7, "ubuntu": [7, 188, 258], "linux": [7, 9, 23, 114, 142, 152, 154, 177, 188, 198, 214, 240, 258], "cmake": [7, 214], "maco": [7, 114, 154, 191, 240], "window": [7, 47, 55, 97, 99, 111, 114, 152, 181, 188, 198, 221, 240, 287], "machin": [7, 23, 38, 40, 44, 47, 53, 54, 55, 57, 58, 59, 60, 64, 79, 92, 94, 95, 98, 114, 116, 137, 138, 139, 144, 150, 151, 152, 154, 159, 171, 172, 177, 181, 182, 183, 184, 196, 198, 204, 212, 213, 221, 238, 240, 249, 250, 255, 258, 265], "framework": [7, 13, 27, 38, 56, 94, 106, 107, 120, 133, 135, 137, 172, 174, 180, 183, 191, 199, 202, 255, 265, 281], "primari": [7, 18, 172, 192, 208, 239, 240, 258, 268, 278, 279], "sit": [7, 113, 114, 116, 117, 170], "atop": 7, "substanti": [7, 144, 172], "codebas": [7, 13, 17], "foundat": [7, 145, 178, 191, 196, 201], "17": [7, 97, 119, 160, 195, 212, 213, 214, 225], "underli": [7, 12, 17, 43, 52, 64, 79, 102, 104, 121, 144, 156, 160, 171, 181, 195, 209, 240, 265, 276, 277, 279], "popular": [7, 72, 79, 104, 120, 131, 144, 154, 155, 196, 199, 214, 215, 255, 260, 267, 278], "stochast": [7, 39, 50, 56, 69, 94, 97, 103, 112, 120, 154, 178, 179], "descent": [7, 39, 46, 50, 69, 94, 97, 103, 112, 120, 130, 154, 196, 243, 267], "parallel": [7, 14, 20, 23, 47, 49, 51, 53, 55, 59, 79, 92, 97, 121, 137, 144, 150, 154, 166, 178, 181, 182, 196, 206, 207, 208, 212, 224, 230, 258, 259, 261, 265, 278, 287], "loader": [7, 27, 40, 47, 103, 112, 178, 181, 198, 225], "serial": [7, 13, 40, 41, 112, 121, 195, 221, 225, 244, 254, 266], "routin": [7, 196], "walk": [7, 9, 13, 18, 20, 27, 46, 58, 94, 107, 112, 124, 132, 133, 137, 143, 160, 162, 181, 224, 238, 262, 267, 268, 269, 281], "digit": [7, 50, 97, 112, 132, 137, 138, 139, 191, 255], "conceptu": [7, 34, 46, 53, 120, 239], "enough": [7, 21, 53, 86, 97, 108, 112, 120, 143, 148, 177, 195, 206, 213, 224, 265, 283], "whirlwind": 7, "wet": 7, "appetit": 7, "begin": [7, 8, 9, 14, 15, 21, 24, 34, 46, 53, 54, 56, 59, 79, 89, 94, 97, 109, 111, 139, 142, 167, 169, 179, 181, 188, 189, 196, 212, 224, 225, 227, 230, 241, 242, 243, 244, 245, 276, 283], "why": [7, 12, 14, 17, 19, 47, 56, 89, 95, 104, 106, 111, 121, 124, 149, 152, 160, 169, 184, 193, 195, 196, 225, 254, 255, 275, 277], "dive": [7, 14, 40, 131, 147, 152, 160, 239, 278], "straight": [7, 184], "watch": [7, 103, 150, 154], "lightn": [7, 144], "talk": [7, 12, 53, 56, 59, 97, 108, 172, 178, 181, 195, 196], "cppcon": 7, "2018": 7, "quick": [7, 21, 35, 52, 94, 104, 106, 109, 111, 139, 152, 156, 161, 170, 171, 196, 225, 228, 236, 260, 261, 267, 283], "humor": 7, "sweep": [7, 183], "philosophi": 7, "ecosystem": [7, 117, 147], "http": [7, 23, 24, 27, 28, 29, 30, 31, 32, 37, 48, 49, 53, 66, 79, 80, 81, 82, 83, 84, 85, 88, 96, 101, 104, 107, 114, 115, 117, 120, 127, 133, 138, 145, 146, 148, 157, 158, 159, 167, 169, 170, 177, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 201, 223, 224, 225, 228, 229, 232, 233, 234, 235, 238, 255, 267, 270, 273, 275, 277, 285], "org": [7, 28, 29, 30, 31, 32, 37, 48, 49, 53, 66, 79, 80, 81, 82, 83, 84, 85, 88, 96, 99, 101, 103, 104, 107, 115, 120, 127, 133, 145, 146, 157, 158, 159, 167, 169, 170, 177, 184, 187, 188, 190, 193, 194, 195, 196, 201, 221, 224, 228, 229, 232, 233, 234, 235, 267, 270, 273, 275, 277, 285, 286, 287], "cppdoc": 7, "embark": 7, "excit": [7, 159, 169], "journei": [7, 56, 201], "back": [7, 9, 12, 13, 17, 18, 24, 34, 47, 50, 55, 79, 92, 94, 102, 104, 108, 112, 114, 119, 140, 143, 163, 169, 172, 178, 180, 181, 182, 184, 191, 193, 195, 196, 199, 207, 237, 240, 252, 253, 274, 279], "discuss": [7, 12, 13, 18, 20, 47, 79, 94, 97, 99, 103, 108, 109, 130, 138, 139, 147, 154, 159, 160, 166, 172, 174, 193, 199, 229, 250, 252, 265, 274, 275, 276, 277], "team": [7, 117, 144, 179, 191, 199], "research": [7, 21, 24, 53, 56, 79, 89, 95, 102, 106, 124, 154, 166, 171, 176, 191, 215, 255, 283], "right": [7, 12, 13, 15, 17, 34, 38, 43, 46, 52, 53, 56, 67, 86, 94, 99, 101, 104, 106, 108, 111, 120, 145, 154, 162, 166, 169, 178, 179, 180, 183, 184, 188, 191, 198, 199, 213, 221, 286], "job": [7, 48, 56, 57, 58, 64, 86, 104, 141, 144, 150, 151, 152, 154, 174, 287], "latenc": [7, 21, 135, 137, 142, 144, 151, 160, 172, 177, 193, 213, 244, 249, 250, 258, 283], "system": [7, 9, 12, 13, 15, 17, 18, 59, 104, 130, 137, 140, 144, 154, 170, 172, 177, 178, 180, 192, 193, 195, 196, 200, 202, 206, 227, 240, 249, 258, 265], "reinforc": [7, 17, 103, 134, 137, 162, 180, 181, 185, 261], "game": [7, 47, 56, 162, 255], "engin": [7, 17, 34, 46, 92, 94, 130, 138, 147, 172, 177, 182, 191, 195, 196, 198, 202, 214, 255, 265, 286], "much": [7, 12, 13, 15, 17, 21, 24, 39, 56, 60, 94, 95, 104, 105, 106, 111, 112, 121, 139, 143, 144, 161, 162, 169, 172, 177, 178, 181, 182, 184, 188, 189, 192, 193, 195, 196, 221, 224, 225, 229, 238, 240, 241, 245, 258, 260, 265, 267, 274, 277, 283], "tractabl": [7, 105], "slow": [7, 12, 39, 138, 140, 172, 196, 199, 230, 240], "multithread": [7, 46, 60, 119, 172, 221, 225, 258], "lock": [7, 8, 17, 60, 154, 172, 180, 181, 206], "gil": [7, 60, 152], "multiprocess": [7, 14, 17, 36, 40, 55, 57, 59, 60, 138, 139, 152, 154, 178, 181, 182, 206, 207, 258, 259, 265], "scalabl": [7, 137, 141, 144, 196, 202, 213, 214, 240, 258, 274], "signific": [7, 24, 56, 86, 95, 139, 141, 145, 148, 160, 161, 163, 169, 172, 178, 183, 188, 193, 196, 207, 208, 209, 213, 215, 224, 225, 240, 252, 265], "shortcom": [7, 276], "constraint": [7, 15, 21, 23, 89, 106, 132, 137, 142, 144, 170, 178, 191, 196, 206, 224, 225, 237, 255, 263, 265, 283], "neuroevolut": 7, "benefit": [7, 21, 23, 46, 89, 92, 139, 141, 158, 163, 169, 172, 183, 199, 213, 214, 224, 240, 244, 251, 258, 267, 283], "owner": [7, 180, 181, 182], "anyth": [7, 16, 19, 47, 76, 77, 97, 99, 102, 105, 108, 109, 111, 112, 120, 177, 199, 221, 237, 238, 255, 267], "web": [7, 114, 221], "page": [7, 9, 10, 13, 19, 54, 58, 64, 93, 112, 119, 120, 136, 137, 145, 147, 172, 182, 188, 195, 196, 202, 206, 211, 240, 253], "server": [7, 20, 133, 137, 141, 152, 175, 182, 207, 214, 221, 249, 255, 258, 262], "3d": [7, 64, 99, 101, 108, 109, 174, 191, 240], "graphic": [7, 183], "photo": [7, 95], "softwar": [7, 175, 188, 265], "remain": [7, 92, 94, 104, 130, 140, 141, 154, 169, 172, 176, 184, 240, 262, 263, 265, 267, 276, 279], "spare": 7, "hassl": 7, "forth": [7, 112], "retain": [7, 43, 52, 102, 121, 130, 244], "intuit": [7, 56, 79, 97, 102, 106, 121, 160, 184, 191, 195, 221, 237, 275], "tradit": [7, 56, 104, 106, 161, 181, 195, 196, 199, 265, 278], "experi": [7, 13, 104, 105, 139, 141, 154, 162, 172, 175, 178, 179, 183, 184, 186, 191, 193, 195, 196, 199, 208, 224, 239, 241, 249, 255, 256, 258, 267, 274, 282, 286, 287], "compet": [7, 144, 172], "meant": [7, 10, 14, 89, 94, 99, 139, 196, 240, 265, 276], "complement": 7, "know": [7, 9, 12, 14, 23, 24, 34, 46, 53, 76, 77, 79, 97, 99, 102, 106, 108, 111, 112, 120, 143, 145, 146, 149, 154, 155, 156, 160, 162, 163, 166, 171, 172, 174, 178, 179, 180, 184, 189, 195, 196, 198, 225, 251, 262, 275], "alik": 7, "love": 7, "simplic": [7, 79, 139, 148, 172, 178, 179, 209, 225, 278], "core": [7, 12, 13, 14, 48, 105, 106, 107, 120, 121, 137, 142, 154, 155, 160, 163, 172, 177, 188, 195, 201, 221, 224, 239, 258, 265], "principl": [7, 12, 109, 111, 144, 244], "interest": [7, 13, 17, 21, 47, 53, 55, 92, 94, 95, 104, 106, 113, 114, 116, 117, 127, 139, 144, 161, 169, 170, 178, 186, 195, 196, 198, 199, 225, 239, 242, 243, 283, 286], "curiou": [7, 156, 169, 171, 205], "paragraph": 7, "tri": [7, 23, 56, 94, 105, 111, 179, 195, 224, 255], "close": [7, 17, 21, 24, 56, 94, 99, 102, 104, 105, 139, 144, 169, 189, 238, 240, 283], "experienc": [7, 89], "ever": [7, 143, 152, 195, 229], "ask": [7, 9, 21, 95, 97, 99, 146, 155, 172, 178, 195, 196, 225, 282, 283], "rememb": [7, 47, 56, 79, 109, 112, 119, 121, 130, 161, 162, 169, 172, 184, 196, 199, 225], "dot": [7, 17, 34, 56, 109, 111, 130, 132, 137, 161, 184, 185, 225, 252, 261, 263, 286], "colon": [7, 191], "grab": [7, 10, 56, 101, 177, 182], "distribut": [7, 17, 18, 24, 27, 56, 79, 92, 97, 102, 103, 104, 106, 111, 137, 138, 139, 140, 141, 142, 144, 150, 151, 163, 169, 175, 178, 180, 188, 199, 208, 209, 225, 258, 259, 260, 263, 265, 281, 287], "readi": [7, 9, 13, 20, 53, 95, 97, 103, 105, 106, 111, 112, 137, 139, 154, 166, 174, 175, 178, 180, 181, 182, 196, 198, 230, 255], "archiv": [7, 140, 163, 195, 254], "header": [7, 9, 12, 175, 225], "websit": [7, 95, 179, 221, 223], "rest": [7, 17, 47, 127, 140, 155, 159, 178, 180, 181, 196, 199, 237, 276], "free": [7, 9, 13, 24, 39, 46, 53, 79, 89, 104, 113, 114, 116, 117, 121, 139, 140, 144, 154, 159, 162, 163, 169, 172, 178, 180, 184, 188, 195, 239], "too": [7, 13, 17, 24, 47, 67, 72, 86, 92, 97, 99, 104, 105, 111, 112, 119, 120, 140, 142, 152, 169, 172, 176, 179, 180, 182, 184, 195, 239, 253, 274], "debug": [7, 12, 24, 64, 105, 131, 132, 137, 143, 179, 185, 195, 200, 208, 225, 239, 249, 261, 268, 287], "abi": [7, 9, 214], "try": [7, 9, 15, 17, 18, 21, 24, 39, 43, 47, 50, 52, 53, 56, 57, 64, 79, 94, 102, 103, 104, 105, 106, 107, 108, 112, 113, 114, 119, 130, 141, 144, 145, 146, 147, 155, 160, 162, 166, 169, 172, 174, 175, 176, 178, 179, 184, 188, 192, 193, 195, 199, 200, 213, 214, 224, 225, 237, 238, 255, 258, 263, 267, 275, 283], "local": [7, 9, 12, 20, 23, 24, 38, 53, 54, 64, 94, 98, 105, 113, 121, 124, 130, 139, 140, 142, 144, 152, 154, 169, 176, 180, 181, 182, 184, 186, 196, 215, 224, 227, 240, 249, 250, 258, 259, 263, 265, 266], "retriev": [7, 17, 20, 34, 36, 53, 143, 144, 174, 178, 180, 181, 196, 221, 258], "vanilla": [7, 53, 69, 106, 120, 191, 199, 259, 274], "cu90": 7, "url": [7, 24, 188, 193, 196, 238, 267], "wget": [7, 23, 198, 267], "nightli": [7, 23, 158, 193, 198, 255, 265, 267, 286, 287], "share": [7, 9, 13, 14, 23, 43, 52, 59, 70, 74, 92, 104, 108, 139, 143, 152, 154, 155, 162, 172, 178, 181, 182, 195, 207, 214, 225, 229, 239, 244, 249, 254, 258, 261, 265], "dep": 7, "latest": [7, 11, 13, 17, 92, 95, 120, 121, 131, 137, 139, 147, 154, 165, 173, 177, 178, 181, 184, 186, 191, 193, 215], "unzip": [7, 24, 54, 191, 198, 254], "tini": [7, 138, 169, 255], "ident": [7, 21, 59, 89, 94, 102, 103, 112, 120, 142, 151, 166, 189, 192, 195, 200, 225, 277, 283], "iostream": [7, 8, 214], "ey": [7, 170, 172], "fledg": 7, "cmakelist": [7, 9, 214], "txt": [7, 9, 53, 145, 146, 160, 177, 184, 208, 214], "cmake_minimum_requir": [7, 9, 214], "fatal_error": [7, 9, 214], "add_execut": [7, 214], "target_link_librari": [7, 9, 214], "set_properti": [7, 214], "properti": [7, 14, 17, 34, 43, 52, 94, 97, 102, 108, 111, 130, 144, 170, 184, 195, 214, 224, 225, 237, 242, 275], "cxx_standard": [7, 214], "hard": [7, 12, 18, 36, 106, 144, 172, 176, 195, 225, 249], "visual": [7, 17, 46, 56, 79, 86, 87, 97, 103, 134, 137, 139, 143, 144, 149, 159, 170, 178, 185, 188, 191, 208, 230, 238, 260, 261, 268, 269, 276], "studio": [7, 269], "qmake": 7, "plain": [7, 53, 112, 140, 145, 146, 184, 198, 237, 239], "makefil": 7, "feel": [7, 13, 24, 39, 46, 53, 104, 113, 114, 116, 117, 121, 139, 159, 160, 162, 163, 169, 188, 195], "comfort": 7, "box": [7, 12, 13, 14, 19, 21, 44, 79, 136, 137, 140, 144, 147, 149, 154, 177, 180, 188, 195, 198, 199, 202, 221, 223, 255, 283, 286], "cmake_prefix_path": [7, 9], "invok": [7, 9, 12, 104, 152, 154, 158, 159, 160, 172, 175, 181, 182, 202, 221, 237, 248, 252, 258, 268, 276], "agre": [7, 259], "someth": [7, 14, 17, 24, 47, 92, 97, 102, 106, 108, 154, 160, 177, 184, 195, 199, 225, 239, 286], "break": [7, 8, 12, 13, 14, 19, 24, 35, 36, 86, 94, 99, 113, 121, 140, 141, 147, 169, 180, 182, 193, 254, 263, 274], "unexpect": [7, 55, 240, 276], "pwd": [7, 221], "root": [7, 9, 17, 34, 36, 44, 46, 55, 56, 97, 105, 130, 140, 148, 155, 160, 181, 182, 214, 221, 238, 248, 265], "fa350df05ecf": 7, "home": [7, 43, 52, 211, 274], "mkdir": [7, 188, 191], "cd": [7, 9, 188, 198, 221], "dcmake_prefix_path": [7, 9, 214], "identif": [7, 9, 214], "gnu": [7, 9, 214, 240, 258], "usr": [7, 9, 23, 154, 214], "bin": [7, 9, 97, 154, 214, 221, 254, 268], "cc": [7, 9, 46, 212, 214], "detect": [7, 9, 14, 15, 23, 56, 99, 134, 137, 177, 185, 188, 193, 195, 214, 215, 227, 240, 253, 258, 261], "info": [7, 9, 86, 141, 151, 154, 162, 191, 195, 202, 214], "pthread": [7, 9], "pthread_creat": [7, 9], "lib": [7, 9, 13, 23, 160, 214, 239, 255, 258, 265], "config": [7, 13, 21, 27, 92, 138, 140, 144, 147, 177, 192, 212, 214, 215, 237, 245, 249, 252, 255, 262, 266, 267, 268, 278, 283], "scan": [7, 9, 97, 99, 191, 195], "50": [7, 9, 21, 24, 27, 56, 57, 97, 112, 155, 163, 176, 179, 182, 198, 212, 213, 240, 281, 283], "cmakefil": [7, 9], "dir": [7, 9, 86, 101, 144, 239, 249, 265], "100": [7, 9, 24, 44, 52, 71, 97, 106, 120, 138, 141, 147, 152, 156, 160, 163, 177, 178, 179, 182, 189, 191, 209, 213, 225, 239, 250, 278, 283], "folder": [7, 24, 54, 56, 86, 87, 95, 97, 139, 189, 198, 265], "insid": [7, 9, 13, 20, 23, 35, 39, 48, 140, 142, 188, 193, 198, 202, 278, 283, 286], "enter": [7, 53, 139, 152, 154], "ran": [7, 111, 141, 178, 181, 183, 225], "binari": [7, 53, 56, 102, 114, 154, 163, 193, 214, 244, 254, 275, 287], "me": [7, 21, 53, 169, 184, 283], "deriv": [7, 13, 19, 21, 34, 39, 43, 46, 52, 94, 102, 106, 108, 109, 111, 120, 143, 145, 149, 158, 161, 240, 283], "besid": [7, 97, 111, 170, 180, 223, 240], "encapsul": [7, 39, 50, 99, 103, 147, 169, 180], "buffer": [7, 17, 47, 50, 121, 139, 140, 148, 152, 156, 158, 162, 166, 169, 170, 171, 172, 176, 179, 195, 206, 229, 242, 243, 244, 263, 265, 266], "form": [7, 15, 18, 21, 44, 50, 53, 56, 64, 105, 112, 114, 143, 146, 160, 184, 191, 199, 206, 207, 221, 240, 250, 258, 267, 279, 283], "record": [7, 12, 24, 34, 46, 53, 112, 121, 130, 131, 137, 138, 139, 147, 148, 149, 169, 178, 179, 181, 182, 195, 215, 230, 255, 287], "normal": [7, 12, 14, 15, 24, 39, 41, 44, 53, 55, 56, 89, 95, 97, 99, 103, 104, 106, 111, 120, 121, 127, 138, 148, 154, 155, 170, 172, 177, 180, 181, 183, 184, 189, 191, 193, 196, 199, 200, 214, 240, 248, 253, 267, 275], "logic": [7, 14, 21, 39, 44, 89, 105, 113, 131, 137, 138, 144, 151, 174, 176, 181, 182, 191, 192, 200, 207, 258, 283], "nest": [7, 17, 35, 46, 97, 102, 137, 140, 178, 180, 182, 183, 185, 192, 261, 284, 287], "term": [7, 18, 43, 56, 64, 79, 94, 95, 99, 103, 106, 107, 108, 110, 119, 139, 141, 142, 166, 176, 178, 195, 196, 199, 231, 258, 261, 267, 277], "explicitli": [7, 23, 39, 43, 46, 52, 56, 57, 92, 94, 108, 130, 140, 141, 142, 151, 155, 163, 182, 183, 186, 195, 221, 240, 277, 279, 282], "onc": [7, 9, 12, 13, 14, 17, 20, 21, 34, 36, 39, 55, 56, 60, 86, 95, 97, 101, 102, 103, 104, 105, 109, 114, 150, 155, 163, 169, 170, 176, 177, 178, 179, 181, 184, 188, 189, 195, 196, 208, 212, 214, 221, 224, 225, 240, 254, 255, 266, 267, 279, 283], "similarli": [7, 15, 55, 87, 95, 102, 140, 143, 144, 145, 160, 161, 169, 172, 174, 207, 262, 266, 277], "kcuda": [7, 268], "n": [7, 8, 15, 21, 24, 34, 46, 64, 76, 77, 86, 89, 94, 99, 102, 104, 112, 120, 138, 139, 140, 152, 154, 161, 162, 166, 170, 174, 176, 180, 181, 182, 184, 189, 195, 196, 198, 214, 240, 265, 267, 278, 283, 286], "super": [7, 9, 14, 23, 24, 71, 97, 120, 121, 138, 141, 147, 152, 156, 162, 170, 174, 180, 181, 182, 189, 191, 206, 207, 209, 213, 221, 255, 262, 278], "w": [7, 34, 39, 46, 50, 79, 109, 111, 130, 139, 163, 182, 188, 195, 198, 267, 278], "addmm": [7, 119, 160, 202, 213, 230], "register_paramet": 7, "reflect": [7, 12, 43, 52, 97, 102, 178, 195], "magic": [7, 106, 146, 154, 161], "assign": [7, 9, 44, 48, 50, 57, 71, 95, 99, 102, 104, 105, 106, 109, 111, 113, 120, 140, 154, 170, 178, 196, 209, 221, 237, 240, 258], "behind": [7, 12, 21, 48, 86, 104, 106, 112, 120, 148, 179, 262, 275, 277, 283, 287], "scene": [7, 112, 120, 255], "another_bia": 7, "rand": [7, 18, 89, 97, 102, 149, 170, 204, 206, 207, 212, 213, 214, 221, 240, 248, 250, 262, 263, 283], "recurs": [7, 20, 47, 140, 147, 193, 238], "0808": 7, "8613": 7, "2017": [7, 79], "5206": 7, "5353": 7, "3740": 7, "0976": 7, "4786": 7, "4928": 7, "1434": 7, "4713": 7, "1735": 7, "3293": 7, "3467": 7, "3858": [7, 97], "1980": 7, "1986": 7, "1975": 7, "4278": 7, "1831": 7, "2709": 7, "3730": 7, "4307": 7, "3236": 7, "0629": 7, "2038": 7, "4638": 7, "2023": [7, 191], "1230": 7, "0516": 7, "aptli": [7, 16], "register_modul": 7, "dropout": [7, 24, 41, 53, 79, 99, 112, 121, 138, 142, 144, 146, 155, 180, 182, 184, 279, 283], "conv2d": [7, 15, 24, 47, 50, 56, 97, 112, 121, 138, 148, 170, 177, 181, 189, 192, 195, 202, 214, 221, 230, 240, 262, 281], "subtleti": [7, 130, 137, 277], "bodi": [7, 160], "upon": [7, 22, 53, 60, 127, 154, 158, 184, 189, 193, 199, 223, 240, 261, 265], "tree": [7, 9, 13, 18, 105, 111, 208, 287], "p": [7, 23, 24, 53, 72, 99, 105, 111, 112, 120, 138, 139, 148, 154, 156, 163, 166, 169, 180, 181, 182, 192, 198, 202, 212, 283], "0345": 7, "4456": 7, "6313": 7, "3585": 7, "4008": 7, "1647": 7, "2891": 7, "0527": 7, "0354": 7, "3084": 7, "2025": [7, 254], "0343": 7, "1824": 7, "4630": 7, "2862": 7, "2500": 7, "0420": 7, "3679": 7, "1482": 7, "0460": 7, "1967": 7, "2132": 7, "1992": 7, "4257": 7, "0739": 7, "01": [7, 14, 24, 44, 46, 50, 97, 100, 119, 154, 182, 185, 199, 204, 212, 213, 254, 259, 261, 269], "6861": 7, "1166": 7, "45": [7, 97, 144, 160, 182, 212, 213], "0333": 7, "9983": 7, "0705": 7, "named_paramet": [7, 35, 170, 196], "ordereddict": [7, 198], "again": [7, 47, 54, 94, 95, 99, 101, 102, 104, 105, 112, 113, 143, 148, 154, 155, 169, 180, 182, 184, 188, 191, 193, 196, 225, 266, 267, 282], "13": [7, 44, 97, 119, 182, 191, 199, 212, 213, 221], "48": [7, 21, 160, 163, 189, 212, 213, 230, 283], "1863": 7, "8611": 7, "1228": 7, "3269": 7, "9858": 7, "0339": 7, "2484": 7, "2035": 7, "2103": 7, "0715": 7, "2975": 7, "4350": 7, "1878": 7, "3616": 7, "1050": 7, "4982": 7, "0335": 7, "1605": 7, "4963": 7, "4099": 7, "2883": [7, 108], "1818": 7, "3447": 7, "1501": 7, "0215": 7, "0250": 7, "0408": [7, 170], "3756": 7, "2149": 7, "3636": 7, "ourselv": [7, 39, 53, 148, 178], "8559": 7, "1572": 7, "1069": 7, "1247": [7, 97], "8060": 7, "At": [7, 12, 17, 18, 21, 46, 50, 53, 54, 89, 92, 109, 112, 120, 138, 139, 142, 155, 158, 162, 178, 179, 180, 183, 184, 188, 230, 237, 240, 254, 274, 277, 283], "point": [7, 12, 13, 14, 17, 21, 23, 24, 46, 50, 53, 54, 55, 56, 57, 86, 89, 94, 97, 99, 102, 104, 105, 107, 108, 109, 111, 112, 120, 138, 140, 142, 143, 144, 149, 150, 152, 159, 162, 166, 172, 178, 180, 184, 189, 191, 195, 196, 215, 228, 236, 238, 240, 251, 255, 260, 261, 265, 267, 274, 276, 277, 282, 283], "topic": [7, 53, 64, 79, 95, 102, 113, 114, 116, 117, 124, 130, 131, 133, 136, 197, 232, 233, 234, 235, 246, 285], "devour": 7, "menu": [7, 54], "concept": [7, 9, 14, 38, 39, 59, 98, 107, 108, 112, 120, 124, 137, 144, 162, 172, 180, 183, 184, 196, 201, 230, 239, 258, 265, 268, 278], "pipelin": [7, 20, 64, 112, 137, 178, 191, 198, 265], "briefli": [7, 39, 64, 137, 142, 178, 193, 199, 202], "determin": [7, 8, 12, 14, 21, 24, 43, 52, 95, 97, 102, 103, 104, 105, 108, 111, 114, 130, 141, 142, 144, 156, 169, 170, 171, 176, 193, 195, 196, 225, 230, 231, 240, 265, 279, 282, 283], "who": [7, 53, 79, 104, 107, 141, 154, 169, 195, 201, 207, 221, 225, 250, 254], "heap": 7, "forget": [7, 112, 121, 193], "live": [7, 13, 18, 102, 136, 137, 143, 172, 181, 182, 277], "referenc": [7, 182], "thing": [7, 9, 12, 18, 19, 34, 46, 47, 50, 53, 89, 92, 94, 97, 102, 103, 104, 105, 106, 108, 109, 111, 112, 136, 137, 140, 142, 143, 144, 149, 150, 151, 154, 155, 159, 160, 163, 170, 177, 178, 186, 195, 206, 225, 243, 267, 282], "lower": [7, 17, 21, 54, 79, 86, 99, 101, 137, 139, 140, 141, 144, 152, 158, 160, 169, 170, 178, 179, 183, 189, 191, 195, 196, 199, 239, 240, 255, 262, 277, 283], "realm": 7, "heavili": [7, 172, 184, 267], "ergonom": 7, "shown": [7, 12, 21, 24, 56, 94, 102, 112, 130, 140, 142, 144, 160, 162, 179, 180, 182, 183, 188, 191, 193, 196, 207, 213, 214, 221, 254, 255, 256, 258, 259, 265, 275, 276, 277, 282, 283], "thu": [7, 12, 13, 24, 34, 41, 53, 89, 92, 104, 112, 130, 139, 156, 169, 172, 184, 221, 225, 230, 240, 258, 278], "far": [7, 9, 17, 50, 53, 67, 94, 97, 99, 102, 104, 105, 106, 120, 143, 154, 169, 176, 179, 184, 195, 196, 199, 225, 274], "stack": [7, 12, 17, 18, 43, 52, 97, 119, 137, 142, 156, 162, 166, 172, 175, 180, 184, 188, 189, 191, 196, 265], "shared_ptr": [7, 9], "cognit": 7, "think": [7, 9, 47, 56, 72, 95, 97, 105, 106, 108, 109, 111, 120, 161, 178, 181, 183, 196, 199, 277, 286], "declar": [7, 16, 79], "everywher": [7, 102, 111], "make_shar": 7, "even": [7, 12, 13, 17, 20, 46, 47, 55, 79, 94, 97, 99, 102, 111, 112, 121, 130, 138, 139, 142, 147, 149, 152, 159, 161, 170, 172, 178, 180, 183, 191, 195, 196, 199, 213, 225, 240, 241, 244, 267, 274, 276, 277], "latter": [7, 144, 180], "nativ": [7, 12, 18, 19, 59, 92, 116, 117, 136, 137, 139, 142, 155, 174, 182, 199, 213, 214, 230, 239, 240, 262, 263, 267, 274, 277], "stai": [7, 86, 141, 142, 147, 178, 179, 180], "shorten": 7, "therefor": [7, 8, 18, 24, 53, 55, 104, 121, 133, 145, 152, 163, 166, 172, 175, 176, 181, 182, 195, 224, 258, 269, 276, 277], "wait": [7, 20, 86, 141, 146, 152, 154, 155, 172, 175, 180, 181, 182, 188, 191, 196, 206, 212, 229, 230, 240, 265], "don": [7, 8, 12, 13, 19, 46, 47, 56, 57, 59, 92, 97, 99, 102, 105, 106, 109, 112, 117, 121, 127, 130, 143, 149, 159, 161, 162, 169, 172, 178, 179, 182, 183, 192, 195, 196, 200, 205, 212, 221, 224, 252, 253, 274, 275, 276], "mymodul": 7, "hell": 7, "lot": [7, 12, 13, 18, 24, 55, 94, 105, 112, 138, 140, 154, 166, 181, 184, 188, 193, 196, 224, 225, 239, 267, 274], "came": [7, 56, 275], "elabor": [7, 142, 160, 180], "scheme": [7, 23, 103, 104, 137, 196, 229, 237, 274, 281], "hide": [7, 148, 178, 286], "reserv": [7, 13, 18, 188, 266], "simplifi": [7, 13, 17, 27, 112, 145, 152, 174, 184, 191, 198, 209, 265, 274, 277, 281, 287], "linearimpl": 7, "torch_modul": 7, "brief": [7, 27, 86, 94, 105, 178, 196, 199], "macro": [7, 12, 18], "wrapper": [7, 12, 59, 112, 121, 138, 139, 149, 155, 162, 178, 191, 196, 200, 206, 207, 252, 266, 287], "typedef": 7, "among": [7, 9, 12, 57, 86, 92, 103, 142, 176, 188, 223, 258], "holder": 7, "arrow": [7, 46, 142], "resembl": [7, 15, 105, 150, 179], "becom": [7, 14, 27, 56, 79, 89, 95, 104, 142, 149, 161, 163, 172, 188, 189, 196, 204, 213, 224, 244, 258, 265, 268, 279], "extra": [7, 12, 60, 97, 102, 104, 108, 109, 112, 116, 140, 145, 146, 148, 155, 158, 170, 178, 184, 191, 193, 198, 214, 230, 239, 240], "netimpl": 7, "subtl": [7, 102, 224], "deserv": 7, "tricki": [7, 21, 149, 192, 195, 196, 283], "decid": [7, 12, 13, 21, 23, 56, 64, 92, 94, 179, 195, 196, 243, 277, 283, 287], "nullptr": [7, 268], "familiar": [7, 9, 12, 13, 38, 39, 43, 47, 52, 57, 58, 60, 89, 97, 98, 102, 103, 105, 107, 112, 121, 137, 139, 143, 150, 151, 154, 162, 174, 181, 195, 221, 225, 239, 244, 282], "pythonista": 7, "disadvantag": [7, 121], "mechan": [7, 14, 17, 18, 27, 34, 53, 60, 103, 130, 134, 137, 149, 159, 170, 184, 186, 188, 195, 200, 214, 221, 249, 250, 281, 287], "boilerpl": [7, 24, 47, 106, 189, 274], "That": [7, 8, 21, 46, 47, 48, 53, 94, 95, 97, 102, 106, 108, 109, 111, 112, 114, 142, 145, 152, 158, 159, 161, 163, 166, 169, 178, 179, 183, 188, 195, 196, 198, 239, 274, 275, 277, 283], "said": [7, 162, 169, 178, 179, 274, 275], "introduct": [7, 14, 19, 21, 49, 51, 57, 58, 59, 60, 61, 88, 89, 94, 99, 106, 107, 110, 113, 114, 115, 117, 130, 137, 147, 150, 151, 160, 185, 199, 200, 201, 214, 225, 240, 252, 255, 260, 261, 276, 283], "awai": [7, 50, 99, 101, 105, 106, 108, 178, 179, 180, 196, 208, 277], "sooner": [7, 139], "technic": [7, 154, 155, 169, 196, 204, 205, 212, 274], "henceforth": 7, "background": [7, 35, 79, 101, 177, 189, 191, 198, 250, 251], "post": [7, 14, 53, 104, 138, 139, 140, 144, 163, 186, 196, 223, 263], "recap": [7, 50, 179, 229, 277], "adversari": [7, 47, 103, 122, 134, 137, 261], "architectur": [7, 21, 35, 56, 60, 79, 89, 99, 104, 105, 135, 137, 139, 142, 144, 150, 156, 166, 172, 174, 176, 183, 189, 191, 193, 199, 200, 221, 224, 240, 278, 281, 283], "repositori": [7, 13, 58, 87, 124, 139, 142, 154, 174, 175, 182, 183, 184, 198, 265], "distinct": [7, 21, 56, 86, 102, 111, 130, 139, 182, 189, 195, 196, 255, 283], "transform": [7, 15, 21, 22, 24, 27, 34, 35, 36, 37, 38, 39, 40, 41, 43, 47, 53, 56, 92, 94, 95, 97, 102, 103, 119, 122, 132, 133, 134, 137, 138, 140, 154, 155, 156, 158, 160, 162, 166, 169, 170, 177, 181, 184, 185, 188, 189, 191, 192, 198, 200, 213, 214, 225, 227, 237, 239, 240, 244, 245, 248, 252, 255, 261, 263, 267, 279, 281, 283], "emit": [7, 105, 195], "probabl": [7, 9, 12, 35, 53, 56, 95, 99, 102, 104, 105, 108, 111, 138, 143, 144, 146, 170, 177, 179, 189, 191, 213, 279], "judg": 7, "closer": [7, 94, 104, 179], "feedback": [7, 24, 130, 139, 159, 162, 163, 200, 212, 266, 287], "authent": 7, "theori": [7, 53, 56, 94, 104, 143, 172], "delic": 7, "tandem": [7, 251], "indistinguish": 7, "fool": [7, 53, 79], "excel": [7, 55, 189, 206], "realist": [7, 199, 279], "transpos": [7, 15, 43, 52, 53, 56, 97, 160, 170, 189, 255, 279], "2d": [7, 35, 56, 99, 112, 140, 145, 180, 191, 192, 196, 209], "convolut": [7, 12, 15, 16, 56, 95, 97, 102, 104, 112, 121, 127, 131, 132, 134, 136, 137, 163, 166, 176, 185, 186, 195, 202, 213, 214, 221, 224, 227, 230, 231, 242, 243, 254, 261], "relu": [7, 15, 24, 50, 56, 97, 99, 106, 112, 121, 130, 138, 152, 156, 160, 177, 180, 181, 182, 189, 206, 207, 208, 209, 213, 214, 224, 240, 278, 281], "unit": [7, 53, 99, 102, 138, 139, 161, 172, 176, 178, 179, 184, 191, 195, 199, 227, 240], "dcgangeneratorimpl": 7, "knoises": 7, "conv1": [7, 50, 97, 99, 121, 138, 171, 176, 181, 189], "convtranspose2dopt": 7, "batch_norm1": 7, "conv2": [7, 97, 99, 121, 138, 181, 189], "128": [7, 9, 55, 56, 59, 92, 104, 138, 142, 145, 154, 156, 177, 180, 181, 182, 185, 196, 199, 202, 214, 215, 225, 239, 248, 261], "pad": [7, 24, 53, 99, 148, 183, 199, 240, 276, 279, 283], "batch_norm2": 7, "conv3": 7, "batch_norm3": 7, "conv4": 7, "tanh": [7, 56, 99, 106, 178, 240], "convtranspose2d": 7, "batchnorm2d": [7, 24, 56, 112, 148, 240, 262], "dcgangener": 7, "chosen": [7, 9, 95, 99, 141, 179, 193, 224, 225, 255], "outlin": [7, 172, 196], "cours": [7, 17, 21, 24, 57, 94, 95, 102, 104, 107, 108, 111, 112, 143, 154, 189, 221, 283], "student": [7, 104], "No": [7, 57, 117, 140, 160, 205, 252, 262], "harm": [7, 104], "discoveri": [7, 195], "fed": [7, 15, 40, 53, 56, 191, 196], "soylent": 7, "regularli": [7, 57], "channel": [7, 13, 15, 24, 46, 47, 56, 95, 97, 99, 102, 104, 112, 132, 137, 142, 176, 185, 189, 192, 198, 214, 227, 240, 261], "moduleopt": 7, "linearopt": 7, "leaki": [7, 56], "alpha": [7, 18, 162, 191, 212, 274], "sigmoid": [7, 56, 99, 200, 240, 262], "squash": [7, 155, 162], "rang": [7, 8, 14, 15, 17, 23, 24, 44, 47, 55, 56, 57, 71, 79, 86, 92, 95, 97, 104, 112, 113, 114, 116, 117, 120, 138, 139, 140, 141, 144, 154, 156, 174, 177, 180, 182, 184, 188, 189, 195, 198, 204, 206, 209, 212, 213, 221, 223, 224, 230, 238, 240, 252, 255, 258, 259, 262, 263, 265, 267, 268, 283], "sequenti": [7, 15, 24, 53, 72, 99, 111, 120, 155, 170, 192, 204, 212, 213, 240, 258, 259, 279, 286], "orient": [7, 186], "layer": [7, 12, 13, 14, 15, 16, 18, 20, 21, 24, 34, 40, 41, 46, 50, 53, 56, 59, 64, 72, 79, 92, 94, 97, 101, 102, 103, 104, 106, 112, 120, 121, 127, 130, 138, 139, 140, 144, 145, 146, 147, 155, 163, 170, 174, 176, 177, 178, 181, 182, 184, 186, 195, 196, 198, 200, 204, 205, 208, 212, 213, 223, 224, 227, 229, 231, 237, 241, 242, 244, 245, 263, 267, 278, 281, 283], "conv2dopt": 7, "leakyrelu": [7, 56], "leakyreluopt": 7, "negative_slop": 7, "fourth": [7, 69, 120, 149], "power": [7, 46, 53, 61, 69, 79, 92, 94, 97, 104, 106, 112, 120, 132, 137, 138, 144, 152, 154, 160, 162, 166, 175, 176, 177, 184, 191, 192, 212, 225, 252, 258, 267, 277], "knob": [7, 258], "launch": [7, 57, 64, 141, 144, 151, 152, 180, 181, 182, 183, 188, 213, 225, 230, 240, 258, 263], "few": [7, 8, 9, 12, 13, 18, 24, 50, 55, 60, 89, 94, 95, 97, 102, 104, 106, 107, 108, 109, 111, 121, 133, 139, 140, 143, 145, 146, 147, 152, 154, 155, 170, 172, 177, 178, 181, 184, 193, 199, 200, 205, 207, 214, 224, 239, 240, 241, 244, 249, 262, 267, 275, 276, 277], "sampler": [7, 24, 36, 59, 103, 138, 139, 178, 186], "indic": [7, 13, 14, 17, 35, 53, 66, 67, 86, 94, 95, 97, 99, 101, 105, 106, 111, 117, 119, 120, 144, 145, 155, 160, 176, 178, 179, 181, 188, 189, 191, 196, 202, 223, 225, 255, 265, 274, 276, 277], "index": [7, 8, 18, 36, 43, 44, 47, 52, 53, 55, 87, 102, 105, 106, 108, 109, 111, 112, 119, 138, 143, 144, 145, 154, 170, 174, 180, 184, 188, 191, 193, 195, 196, 212, 258, 267, 279, 286], "instanti": [7, 9, 13, 17, 36, 41, 55, 56, 69, 71, 89, 97, 104, 112, 114, 120, 130, 144, 175, 176, 179, 191, 200, 212, 229], "collat": [7, 55], "wherev": 7, "make_data_load": 7, "unique_ptr": 7, "spawn": [7, 14, 23, 53, 56, 57, 59, 64, 138, 152, 154, 180, 181, 182, 206, 207, 259, 265], "concurr": [7, 119, 142, 144, 172, 206, 240, 258, 263], "kbatchsiz": 7, "dataloaderopt": 7, "batch_siz": [7, 17, 24, 27, 36, 53, 55, 56, 59, 92, 97, 138, 139, 140, 142, 154, 179, 180, 181, 188, 189, 191, 192, 196, 214, 224, 248, 255, 278, 283], "consol": [7, 189, 191], "field": [7, 13, 14, 17, 18, 35, 53, 99, 109, 111, 130, 134, 154, 169, 180, 188, 195, 198, 265, 276], "rebuild": [7, 225], "finish": [7, 20, 48, 97, 152, 180, 182, 189, 206, 214, 221, 227, 240, 281], "danc": [7, 15], "generator_optim": 7, "adamopt": 7, "2e": [7, 94], "beta": [7, 22, 131, 132, 137, 185, 247, 260, 261, 277], "make_tupl": 7, "discriminator_optim": 7, "5e": [7, 27], "adagrad": [7, 103, 120, 261, 277, 284, 287], "lbfg": [7, 15], "rmsprop": [7, 39, 50, 73, 106, 120], "sgd": [7, 24, 39, 46, 47, 50, 71, 73, 92, 97, 103, 106, 112, 120, 121, 130, 152, 154, 180, 181, 182, 186, 189, 214, 238, 242, 243, 248], "date": [7, 12, 13, 79, 81, 82, 83, 84, 85, 139, 181, 214, 237, 254], "exhaust": [7, 14, 195], "knumberofepoch": 7, "batch_index": 7, "real_imag": 7, "real_label": 7, "uniform_": [7, 182], "real_output": 7, "reshap": [7, 15, 24, 99, 102, 111, 112, 174, 279], "d_loss_real": 7, "binary_cross_entropi": [7, 224], "fake_imag": 7, "fake_label": 7, "fake_output": 7, "d_loss_fak": 7, "d_loss": 7, "fill_": [7, 8, 188], "g_loss": 7, "printf": 7, "r": [7, 14, 17, 24, 39, 46, 50, 79, 89, 97, 105, 134, 137, 160, 161, 162, 163, 166, 179, 180, 182, 191, 198, 214, 225, 240, 258, 286], "2ld": 7, "3ld": 7, "4f": [7, 138, 139], "batches_per_epoch": 7, "evalu": [7, 15, 21, 24, 27, 39, 41, 79, 94, 95, 101, 104, 114, 121, 147, 161, 166, 174, 179, 181, 189, 193, 195, 198, 215, 255, 283], "uniformli": [7, 92, 179, 240], "robust": [7, 53, 57, 58, 79, 102, 141, 179, 213], "smooth": [7, 104, 113, 191], "propag": [7, 13, 20, 34, 39, 46, 48, 50, 56, 104, 108, 109, 112, 149, 158, 163, 178, 240], "repeat": [7, 17, 23, 24, 94, 97, 145, 146, 178, 188, 195, 200, 212, 230, 239, 244, 245, 263, 274], "spiel": 7, "ideal": [7, 17, 36, 94, 97, 102, 104, 172, 184, 195, 202, 250], "progress": [7, 12, 18, 27, 56, 57, 101, 103, 155, 184, 189, 207, 265, 278], "fill": [7, 17, 97, 111, 112, 145, 155, 275, 276], "yet": [7, 13, 14, 23, 54, 79, 94, 97, 102, 116, 117, 147, 154, 172, 181, 184, 196, 207, 214, 255, 262, 279], "moment": [7, 14, 212, 262, 277], "observ": [7, 17, 24, 50, 55, 86, 103, 127, 138, 139, 144, 147, 155, 162, 163, 169, 172, 178, 179, 180, 182, 183, 184, 193, 199, 204, 213, 215, 224, 225, 231, 237, 245, 256, 259, 260, 262, 277, 281], "meaning": [7, 53, 104, 163, 265], "3c0711f20896": 7, "dcga": 7, "6876": 7, "1304": 7, "3776": 7, "3101": 7, "300": [7, 139, 182, 213, 225, 239], "3652": 7, "6626": 7, "400": [7, 97, 121, 225, 239, 255], "8057": 7, "2795": [7, 225], "3531": 7, "4452": 7, "600": [7, 163, 179], "3501": [7, 108], "0811": 7, "700": 7, "3581": 7, "5623": 7, "800": 7, "6423": 7, "7385": 7, "900": 7, "3592": 7, "7333": 7, "4660": 7, "5242": 7, "6364": 7, "0886": 7, "3717": 7, "8103": 7, "0201": 7, "3544": 7, "4522": 7, "6545": 7, "fine": [7, 21, 24, 53, 55, 94, 105, 143, 154, 160, 177, 188, 193, 196, 224, 225, 239, 240, 258, 274, 283], "faster": [7, 12, 15, 24, 53, 60, 79, 99, 102, 104, 112, 121, 137, 139, 141, 151, 152, 155, 156, 161, 163, 171, 172, 180, 184, 193, 198, 224, 225, 239, 240, 241, 258, 260, 265, 278], "quickli": [7, 38, 47, 86, 104, 105, 106, 111, 112, 120, 142, 169, 179, 184, 200, 201, 215, 265], "onto": [7, 12, 17, 20, 23, 47, 99, 101, 102, 137, 155, 169, 181, 182, 196, 240, 265], "somewher": [7, 99, 105, 106, 121], "kcpu": [7, 268], "last": [7, 14, 17, 24, 35, 46, 53, 56, 57, 79, 87, 89, 92, 97, 99, 102, 103, 106, 109, 114, 127, 132, 137, 142, 143, 146, 154, 155, 160, 169, 178, 179, 180, 182, 183, 184, 185, 189, 195, 198, 214, 224, 240, 255, 261, 274, 277, 281], "whose": [7, 86, 89, 94, 95, 104, 111, 139, 143, 163, 172, 191, 223, 225], "creation": [7, 13, 102, 229, 277], "hand": [7, 12, 17, 21, 23, 79, 102, 105, 111, 112, 146, 154, 171, 172, 193, 195, 196, 206, 207, 244, 245, 275, 283], "insert": [7, 15, 21, 24, 99, 182, 195, 215, 262, 281, 283], "explicit": [7, 8, 140, 163, 172, 182, 195, 199, 221, 224, 247, 252, 260, 261, 275, 282], "suppli": [7, 108, 163, 177], "op": [7, 8, 9, 13, 14, 18, 52, 86, 117, 130, 131, 137, 138, 139, 140, 142, 147, 148, 152, 154, 160, 163, 177, 188, 199, 202, 212, 224, 229, 260, 262, 267, 268, 275, 276, 278, 279], "previou": [7, 14, 17, 18, 20, 21, 39, 53, 57, 59, 102, 103, 104, 112, 117, 127, 139, 140, 141, 145, 146, 149, 150, 151, 155, 162, 169, 172, 174, 176, 178, 179, 180, 182, 183, 184, 188, 189, 191, 193, 195, 196, 202, 225, 231, 240, 255, 283], "resid": [7, 104, 172], "And": [7, 13, 19, 27, 56, 95, 108, 114, 145, 149, 160, 161, 163, 166, 177, 188, 189, 193, 195, 225, 239], "downstream": [7, 191], "portabl": [7, 250], "augment": [7, 27, 55, 112, 127, 134, 137, 186, 195, 198], "period": [7, 53, 56, 141, 144, 162, 188, 265], "middl": 7, "procedur": [7, 50, 133, 179, 186], "restor": [7, 79, 121, 152, 163, 242], "long": [7, 13, 53, 54, 86, 92, 99, 102, 106, 107, 108, 110, 112, 139, 141, 143, 146, 155, 159, 160, 170, 174, 179, 182, 188, 196, 199, 200, 225, 239, 240, 243, 253, 261, 263, 265, 268], "session": [7, 104, 114], "fortun": [7, 13, 18, 92, 154, 155, 225], "deseri": [7, 121], "filenam": [7, 119, 191, 224, 265], "interv": [7, 17, 94, 144, 182], "kcheckpointeveri": 7, "pt": [7, 57, 121, 138, 139, 140, 214, 215, 250, 266], "str": [7, 8, 23, 24, 87, 139, 174, 178, 181, 191, 195, 258], "checkpoint_count": 7, "integ": [7, 12, 44, 97, 102, 106, 108, 111, 144, 176, 195, 198, 202, 230, 267, 277], "counter": [7, 14, 53, 56, 147, 154, 192, 252], "bump": 7, "beta1": [7, 56, 212], "krestorefromcheckpoint": 7, "intermediari": [7, 143], "xxx": [7, 18, 55], "matplotlib": [7, 15, 36, 56, 61, 94, 95, 97, 101, 179, 184, 189, 191], "argpars": [7, 138, 139, 180, 181, 182], "pyplot": [7, 15, 97, 112, 189, 191], "plt": [7, 15, 97, 184, 189, 191], "parser": [7, 105, 138, 139, 180, 181, 182], "argumentpars": [7, 138, 139, 180, 181, 182], "add_argu": [7, 138, 139, 180, 181, 182], "png": [7, 55, 137, 198], "parse_arg": [7, 138, 139, 180, 181, 182], "jit": [7, 8, 9, 12, 18, 24, 89, 193, 202, 212, 214, 225, 230, 244, 245, 252, 254, 255], "sample_fil": 7, "mul": [7, 147, 160, 195, 212, 225, 239], "uint8": [7, 198], "numpi": [7, 15, 19, 22, 24, 44, 47, 55, 61, 75, 77, 78, 94, 97, 112, 114, 119, 149, 177, 182, 189, 191, 193, 223, 239, 255, 261, 274, 283, 287], "axi": [7, 86, 108, 109, 145, 172, 176, 191], "subplot": 7, "imshow": [7, 15, 97, 189, 191], "cmap": [7, 189], "grai": [7, 162], "get_xaxi": 7, "set_vis": 7, "get_yaxi": 7, "savefig": 7, "out_fil": 7, "30": [7, 24, 44, 48, 86, 97, 106, 135, 139, 141, 163, 176, 180, 182, 212, 225, 230, 283], "57": [7, 21, 44, 97, 119, 160, 212, 230], "4953": 7, "0195": 7, "3610": 7, "8148": 7, "4072": 7, "36760": 7, "4444": 7, "3761": 7, "8790": 7, "3977": 7, "3315": 7, "120": [7, 97, 121, 127, 182, 189, 230], "8084": 7, "hoorai": 7, "ball": 7, "court": 7, "hopefulli": [7, 54, 55, 79, 89, 106, 121, 241], "digest": [7, 239], "necess": [7, 53, 101], "broad": [7, 61, 95, 103], "did": [7, 12, 19, 24, 47, 56, 94, 97, 99, 102, 114, 130, 141, 154, 158, 170, 178, 181, 184, 196, 225, 265], "space": [7, 9, 17, 53, 56, 79, 94, 95, 99, 104, 105, 109, 111, 144, 155, 162, 169, 172, 178, 179, 182, 184, 188, 189, 191, 196, 199, 215, 266], "consult": [7, 169, 223], "stuck": [7, 287], "whenev": [7, 9, 57, 71, 102, 105, 106, 202, 243], "rate": [7, 39, 46, 56, 92, 97, 99, 103, 104, 106, 127, 138, 139, 144, 145, 162, 179, 181, 196, 198, 238, 240, 265], "prototyp": [8, 13, 14, 18, 36, 195, 196, 212, 261, 268, 270, 274, 275, 276, 277, 278, 279, 284, 286, 287], "statu": [8, 27, 141, 144, 147, 182, 195, 254], "subject": [8, 14, 17, 138, 158, 184, 195, 202, 212, 225, 254, 278, 279, 281, 286], "snapshot": [8, 137, 150, 195], "__obj_flatten__": 8, "inspect": [8, 94, 104, 117, 139, 140, 144, 159, 183, 186, 193, 195, 196, 200, 225, 254], "guard": [8, 12, 152, 205, 212], "tupl": [8, 36, 43, 52, 86, 97, 99, 102, 104, 109, 111, 114, 179, 195, 198, 239, 263, 277], "attribute_nam": 8, "_librari": 8, "register_fake_class": 8, "addition": [8, 14, 15, 39, 86, 143, 144, 152, 172, 195, 198, 206, 207, 249, 258, 265, 282], "__obj_unflatten__": 8, "classmethod": 8, "flatten": [8, 50, 72, 104, 112, 120, 138, 142, 156, 181, 195, 213], "breakdown": [8, 188], "diff": [8, 57, 59, 86, 137, 225, 239], "custom_class": [8, 9], "tensorqueu": 8, "customclasshold": [8, 9], "init_tensor_": 8, "dict": [8, 23, 53, 55, 169, 170, 178, 195, 198, 206, 207, 212, 224, 229], "init_tensor": 8, "size_tensor": 8, "size_tensor_acc": 8, "const_data_ptr": 8, "queue_siz": 8, "irang": 8, "val": [8, 9, 21, 24, 139, 177, 283], "queue_": 8, "to_str": 8, "push_back": [8, 9, 214], "push": [8, 9, 56, 79, 99, 104, 161, 267, 286], "rear": 8, "lock_guard": 8, "mutex": 8, "mutex_": 8, "pop": [8, 9, 99, 283], "front": [8, 156, 176, 195], "pop_front": 8, "get_raw_queu": 8, "raw_queu": 8, "dequ": 8, "mycustomclass": 8, "class_": [8, 9], "init": [8, 9, 24, 141, 170, 200, 282], "clone": [8, 9, 14, 58, 102, 145, 149, 150, 154, 160, 163, 174, 255, 263], "2a": 8, "class_nam": [8, 127, 191], "faketensorqueu": 8, "2b": [8, 46], "cl": [8, 15, 269], "flattened_tq": 8, "libcustom_class": [8, 9], "tq": 8, "mod": [8, 193, 195, 255], "sin": [8, 17, 19, 66, 67, 71, 72, 73, 76, 77, 94, 102, 120, 240, 250, 269], "co": [8, 94, 111, 230, 240, 269], "poped_t": 8, "allclos": [8, 156, 160, 170, 212, 263, 283], "eager": [8, 13, 89, 91, 147, 160, 163, 183, 193, 195, 199, 204, 212, 215, 240, 253, 255, 281], "fullgraph": [8, 19, 147, 193, 204, 252], "exported_program": [8, 121, 255], "strict": [8, 121, 191, 241, 275], "for_each_add_": 8, "inc": 8, "add_": [8, 102, 195, 274], "torch_library_frag": 8, "__torch__": [8, 9], "foo": [8, 9, 170, 181, 239, 269, 282], "intrusive_ptr": [8, 9, 175, 225, 239], "fake_for_each_add_": 8, "foreachadd": 8, "scriptobject": 8, "empty_tensor_queu": 8, "qlen": 8, "ep": [8, 148, 182, 195, 212, 255, 262, 274, 283], "trace": [8, 12, 13, 19, 34, 46, 94, 101, 119, 137, 147, 160, 166, 172, 183, 188, 192, 195, 208, 251, 252, 256, 260, 265, 278], "major": [8, 13, 14, 24, 99, 102, 111, 127, 141, 160, 169, 183, 193, 196, 212, 213, 245, 252, 259, 277], "downsid": [8, 158, 172], "consum": [8, 116, 119, 143, 160, 172, 178, 180, 182, 183, 230, 240], "difficult": [8, 105, 161, 170, 184, 196, 212, 276, 286], "parti": [8, 9, 12, 19, 131, 140, 141, 175], "complic": [8, 17, 105, 106, 111, 112, 120, 144, 195, 209, 224, 225, 286], "fakif": 8, "tracing_mod": 8, "alias": [8, 12, 13, 195], "within": [8, 17, 23, 64, 89, 94, 95, 101, 112, 113, 114, 119, 130, 142, 147, 149, 160, 170, 176, 179, 181, 191, 192, 193, 196, 199, 209, 213, 225, 231, 240, 244, 249, 251, 254, 258, 266, 268, 277, 278, 279, 282], "torchbind": 8, "transfer": [9, 12, 22, 47, 55, 104, 112, 121, 122, 134, 137, 154, 172, 177, 181, 188, 198, 226, 241, 261, 266], "maintain": [9, 13, 17, 34, 35, 36, 46, 53, 79, 99, 104, 109, 136, 137, 141, 150, 154, 162, 179, 182, 195, 200, 206, 224, 259, 282], "persist": [9, 14, 41, 206, 224], "member": [9, 71, 120, 282, 287], "portion": [9, 86, 169, 172, 174, 176, 213, 221, 239, 265], "registr": [9, 10, 12, 13, 18, 19, 214, 221], "templat": [9, 12, 122, 154, 160, 192, 261, 278], "mystackclass": 9, "stack_": 9, "pop_back": 9, "make_intrus": [9, 175], "merg": [9, 17, 48, 95, 99, 177, 191, 214], "elem": [9, 237], "smart": [9, 195], "oppos": [9, 10, 53, 56, 127, 154, 161, 166, 181, 225], "intern": [9, 12, 13, 14, 18, 40, 41, 53, 60, 72, 99, 104, 120, 136, 137, 138, 140, 144, 154, 188, 200, 202, 206, 239, 265, 274], "manag": [9, 35, 46, 53, 64, 94, 112, 119, 130, 133, 140, 142, 147, 150, 151, 152, 170, 183, 188, 193, 196, 206, 207, 208, 209, 224, 225, 226, 229, 230, 231, 240, 253, 258, 266], "visibl": [9, 47, 92, 101, 191], "qualifi": [9, 12, 207], "my_class": 9, "contructor": 9, "overload": [9, 12], "stateless": [9, 17, 156, 158], "yourclass": 9, "ref": 9, "four": [9, 17, 23, 71, 89, 97, 99, 102, 120, 139, 154, 174, 189, 199, 215, 255, 281], "examin": [9, 14, 86, 94, 95, 101, 103, 104, 154, 159, 172, 196], "address": [9, 15, 23, 27, 86, 99, 131, 137, 141, 154, 172, 180, 181, 195, 196, 199, 208, 215, 237, 258, 260, 282], "fulli": [9, 14, 15, 17, 18, 38, 64, 86, 92, 97, 98, 99, 112, 127, 133, 137, 144, 147, 150, 163, 166, 179, 181, 183, 188, 200, 202, 207, 212, 214, 227, 276, 283], "unari": 9, "rule": [9, 12, 34, 46, 50, 94, 102, 109, 130, 143, 156, 161, 170, 171, 178, 179, 195, 224], "cover": [9, 10, 17, 18, 20, 23, 36, 50, 102, 107, 117, 124, 130, 135, 136, 137, 139, 144, 154, 174, 175, 178, 181, 182, 189, 193, 195, 201, 213, 214, 224, 232, 233, 234, 235, 238, 239, 240, 251, 258, 276, 278, 279], "add_librari": 9, "cmake_cxx_standard": 9, "custom_class_project": 9, "opt": [9, 12, 112, 144, 163, 175, 181, 182, 188, 204, 267], "rh": 9, "devtoolset": 9, "torchbind_tutori": 9, "j": [9, 34, 46, 79, 94, 97, 104, 105, 109, 140, 184, 265], "annot": [9, 12, 13, 23, 36, 55, 106, 117, 191, 193, 195, 225], "futur": [9, 23, 53, 112, 117, 119, 130, 138, 158, 162, 169, 175, 179, 180, 181, 182, 206, 213, 242, 253, 262, 277], "scriptmodul": [9, 89], "export_attr": 9, "runtimeerror": [9, 130, 141, 175, 177, 255], "def_pickl": 9, "pushivalueimpl": 9, "pickler": 9, "__getstate__": 9, "__setstate__": 9, "pickl": [9, 41, 92, 112, 121, 169, 225, 265], "salient": 9, "preserv": [9, 12, 21, 102, 132, 137, 140, 163, 176, 237, 242, 275, 281, 283], "conveni": [9, 12, 17, 47, 50, 53, 95, 108, 112, 143, 146, 156, 161, 175, 178, 207, 214, 224, 225, 239, 265, 275, 277], "wherea": [9, 112, 147, 189, 191, 267, 275, 276], "didn": [9, 12, 95, 114, 159, 180, 286], "confus": [9, 112, 145, 158, 191, 196, 267, 275, 276, 277], "de": [9, 21, 23, 184, 283], "suppos": [9, 13, 104, 105, 106, 111, 138, 193, 198, 214, 262, 282], "manipulate_inst": 9, "trycustomop": 9, "bar": [9, 53, 86, 170, 181, 191, 193, 221], "enforc": [9, 13, 17, 144, 170, 274, 275], "relax": [9, 170, 255], "standalon": [9, 57, 224, 252, 263], "blend": 9, "smoothli": 9, "frequent": [9, 34, 86, 111, 120, 138, 214, 253, 276], "faq": 9, "autograd": [10, 15, 18, 19, 20, 35, 36, 38, 39, 40, 41, 43, 44, 49, 50, 51, 61, 65, 68, 72, 95, 96, 97, 98, 99, 101, 102, 103, 107, 108, 112, 130, 131, 132, 136, 137, 145, 146, 149, 152, 160, 161, 166, 171, 179, 180, 181, 184, 185, 195, 200, 221, 224, 240, 252, 261, 286], "vmap": [10, 12, 132, 137, 158, 161, 166, 171, 261, 284, 287], "treat": [10, 19, 94, 111, 171, 180, 193, 195, 196], "opaqu": [10, 19, 239, 252], "callabl": [10, 19, 44, 55, 112, 188, 193, 195, 223, 252], "especi": [10, 21, 24, 53, 56, 79, 95, 102, 139, 141, 152, 159, 166, 169, 172, 195, 199, 267, 275, 283], "respect": [10, 19, 20, 34, 36, 38, 39, 40, 46, 53, 56, 66, 67, 94, 95, 106, 108, 120, 124, 130, 142, 143, 155, 158, 160, 161, 171, 172, 178, 182, 184, 188, 196, 237, 242, 252, 258, 263], "aotinductor": [10, 131, 195, 244, 247, 252, 255, 260, 261], "sycl": [10, 137], "site": [10, 23, 54, 56, 159, 184, 230, 239, 255], "head": [10, 21, 38, 87, 99, 119, 152, 183, 198, 279, 283], "toe": 10, "express": [10, 19, 94, 97, 99, 102, 105, 116, 124, 142, 195, 199, 212, 276, 281], "doesn": [10, 12, 13, 16, 19, 21, 64, 106, 108, 111, 112, 143, 161, 163, 172, 176, 191, 193, 195, 204, 205, 212, 239, 240, 251, 255, 256, 258, 262, 267, 274, 283, 286], "pybind": 10, "ed": [10, 254], "newest": 12, "respons": [12, 14, 20, 23, 53, 94, 95, 103, 112, 136, 137, 142, 148, 152, 154, 180, 181, 184, 193, 195, 204, 223], "nontrivi": 12, "cross": [12, 16, 47, 56, 97, 99, 103, 142, 144, 240, 243, 258], "cut": [12, 174, 195], "concern": [12, 106, 196, 215, 274], "switch": [12, 18, 24, 101, 102, 121, 169, 196, 213, 224, 226, 230, 243], "organ": [12, 17, 55, 97, 121, 145, 225, 258, 263], "convers": [12, 53, 94, 102, 163, 184, 212, 237, 274], "highest": [12, 24, 47, 53, 101, 141, 146, 179, 191, 193, 240], "prioriti": [12, 141], "redispatch": 12, "involv": [12, 18, 21, 24, 38, 41, 54, 89, 94, 95, 102, 105, 108, 114, 121, 130, 133, 143, 145, 151, 162, 169, 182, 184, 195, 231, 240, 245, 252, 255, 265, 266, 267, 279, 283], "unlik": [12, 15, 21, 95, 102, 104, 120, 142, 143, 158, 163, 184, 192, 195, 252, 258, 282, 283], "style": [12, 142, 174, 195, 198, 207], "abid": [12, 56], "myop": 12, "myadd": [12, 13], "realli": [12, 47, 94, 99, 102, 105, 106, 111, 120, 122, 137, 143, 189, 225, 261, 274, 276, 286], "myadd_cpu": 12, "self_": 12, "other_": 12, "self_ptr": 12, "other_ptr": 12, "catch": [12, 14, 193, 195, 214, 253], "previous": [12, 34, 89, 108, 112, 147, 158, 174, 176, 178, 179, 180, 188, 195, 237, 254, 274, 286], "myadd_cuda": 12, "split": [12, 23, 24, 48, 53, 56, 89, 92, 97, 101, 103, 137, 145, 146, 152, 174, 178, 181, 182, 184, 196, 198, 221], "boundari": [12, 140, 178, 249], "myops_cpu": 12, "myops_cuda": 12, "subdivid": 12, "xla": [12, 13, 18, 237], "torch_xla": [12, 13], "useabl": 12, "behav": [12, 19, 102, 112, 163, 170, 180, 221], "autogradnotimplementedfallback": 12, "notimpl": 12, "node": [12, 23, 34, 46, 50, 57, 58, 59, 60, 64, 66, 94, 101, 105, 117, 120, 130, 133, 139, 140, 141, 145, 147, 150, 151, 152, 159, 160, 181, 184, 195, 209, 212, 240, 258, 263, 268, 281], "require_grad": [12, 130], "ness": 12, "pin": [12, 103, 143, 172, 240], "lost": [12, 21, 283], "adinplaceorview": 12, "bookkeep": [12, 225], "autogradnotimplementedinplaceorviewfallback": 12, "logi": 12, "guess": [12, 39, 46, 53, 56, 145, 184], "twist": 12, "constitut": [12, 17], "hood": [12, 24, 53, 56, 58, 60, 64, 120, 142, 143, 161, 162, 172, 182, 208, 277], "singleton": [12, 181], "findschemaorthrow": 12, "decltyp": 12, "down": [12, 13, 14, 24, 35, 36, 54, 86, 92, 94, 99, 101, 106, 112, 138, 155, 160, 161, 162, 181, 186, 189, 195, 239, 240, 265, 274], "typic": [12, 14, 17, 24, 36, 46, 50, 52, 58, 59, 86, 97, 105, 106, 111, 140, 142, 144, 148, 150, 160, 169, 172, 178, 181, 191, 193, 195, 196, 212, 213, 214, 224, 226, 240, 244, 245, 255, 258], "cast": [12, 21, 23, 77, 119, 139, 140, 172, 195, 224, 283], "runtim": [12, 17, 23, 43, 54, 86, 89, 94, 97, 98, 102, 116, 117, 119, 131, 137, 141, 142, 147, 148, 159, 169, 172, 174, 188, 193, 195, 196, 202, 204, 212, 213, 224, 225, 230, 243, 247, 251, 260, 261, 267, 269, 278], "lookup": [12, 20, 111, 147, 182], "typo": [12, 130, 200], "myaddfunct": [12, 13], "autononvariabletypemod": [12, 13], "myadd_autograd": [12, 13], "raii": 12, "infinit": 12, "overflow": [12, 53, 224, 267], "send": [12, 13, 14, 15, 47, 48, 64, 92, 154, 162, 172, 174, 175, 180, 181, 182, 196, 230], "exclud": [12, 46, 140, 193, 230, 281], "consider": [12, 13, 138, 195, 196, 255], "autogradcpu": 12, "autogradcuda": 12, "pythondispatch": 12, "_python_dispatch": 12, "sens": [12, 15, 17, 104, 111, 112, 130, 156, 172, 189], "isn": [12, 94, 105, 158, 172, 177, 189, 195, 196, 225, 227, 241, 242, 276], "glorifi": 12, "add_cpu": 12, "add_cuda": 12, "unsupport": [12, 113, 117, 131, 137, 193, 195, 255], "decentr": 12, "importantli": [12, 24, 149, 169, 172, 225, 274], "aspect": [12, 18, 79, 154, 198, 225], "patch": [12, 13, 179], "dispatchkei": [12, 13], "varieti": [12, 27, 35, 53, 94, 95, 99, 103, 112, 121, 146, 172, 199, 215, 258, 277], "fallback": [12, 13, 18, 199], "amp": [12, 18, 64, 140, 163, 202, 214, 248, 260, 278], "incom": [12, 97, 188], "float16": [12, 18, 139, 163, 202, 224], "float32": [12, 17, 97, 139, 140, 177, 182, 212, 224, 237, 263, 268, 278], "matmul": [12, 142, 160, 195, 202, 213, 224, 267, 283, 286], "impair": 12, "converg": [12, 39, 53, 56, 67, 103, 104, 120, 121, 142, 154, 170, 179, 184, 205, 224, 241, 260], "hypothet": 12, "autocast_mod": 12, "mymatmul_autocast": 12, "excludedispatchkeyguard": 12, "no_autocast": 12, "mymatmul": 12, "cached_cast": 12, "khalf": 12, "elig": [12, 240], "polici": [12, 18, 134, 137, 138, 140, 162, 179, 180, 182, 185, 215, 258, 261], "mixtur": [12, 212], "meanwhil": [12, 143, 160, 214, 275], "float64": 12, "unaffect": [12, 104], "forc": [12, 17, 21, 53, 99, 137, 184, 193, 199, 224, 240, 249, 274, 276, 283], "fallthrough": 12, "occur": [12, 14, 19, 24, 57, 86, 104, 160, 163, 172, 180, 181, 188, 191, 195, 196, 200, 208, 230, 251, 265, 267], "pointwis": [12, 163, 192, 212, 240, 260], "fall": [12, 18, 95, 170, 179, 200, 253], "unfortun": [12, 120, 154, 195], "aren": [12, 149, 155, 195, 196, 240, 243, 276], "dri": [12, 188], "guidanc": [12, 141, 201, 224, 258], "reduct": [12, 71, 102, 120, 138, 139, 140, 143, 148, 169, 175, 188, 191, 199, 224, 240, 274, 276, 287], "gemm": [12, 160, 213, 278], "unless": [12, 43, 52, 102, 106, 113, 178, 195, 229, 267, 286], "categori": [12, 13, 24, 79, 86, 95, 102, 127, 145, 146, 188, 195], "promote_typ": 12, "widest": 12, "safest": 12, "my_multiple_input_op_autocast": 12, "t0": [12, 139, 204, 212, 225], "t1": [12, 225], "optimist": 12, "exec_typ": 12, "my_multiple_input_op": 12, "myadd_autocast": 12, "gymnast": 12, "suitabl": [12, 44, 150, 154, 191, 239], "invoc": [12, 159, 180, 221, 245, 251], "stabil": [12, 104, 179], "41478": 12, "repo": [13, 18, 23, 24, 58, 86, 136, 137, 150, 154, 172, 180, 181, 196, 266, 267], "mainten": [13, 191], "solut": [13, 21, 56, 113, 121, 131, 137, 160, 171, 172, 191, 193, 196, 208, 225, 240, 250, 260, 276, 279, 283], "pr": [13, 189, 199, 214, 239], "propos": [13, 27, 142, 155, 170, 208, 274, 276], "request": [13, 34, 46, 92, 102, 112, 139, 170, 177, 180, 181, 206, 268, 276, 277, 278, 282], "hardwar": [13, 18, 21, 43, 52, 54, 102, 104, 114, 145, 154, 156, 161, 163, 171, 172, 175, 176, 196, 199, 202, 213, 214, 215, 226, 240, 248, 252, 255, 267, 283], "googl": [13, 21, 27, 38, 53, 56, 101, 137, 154, 155, 178, 179, 188, 196, 258], "tpu": [13, 175, 243], "chip": 13, "layout": [13, 21, 142, 199, 209, 240, 274, 277, 283, 287], "spars": [13, 20, 99, 106, 111, 137, 155, 176, 196, 237, 261, 276, 284, 287], "quantiz": [13, 104, 127, 132, 135, 169, 202, 228, 237, 260, 261, 284], "mainli": [13, 17, 18, 23, 160, 188, 193, 254, 281], "haven": [13, 92, 94, 97, 102, 105, 109, 111, 130, 156, 159, 171], "identifi": [13, 21, 36, 57, 59, 79, 86, 87, 95, 112, 119, 151, 162, 163, 167, 176, 181, 195, 198, 208, 255, 265, 277, 283], "carri": [13, 17, 53, 56, 94, 102, 104, 108, 150, 155, 163, 184, 229], "privateuse1": [13, 136, 137, 282], "autogradprivateuse1": [13, 18], "privateuse2": [13, 18], "autogradprivateuse2": [13, 18], "privateuse3": [13, 18], "autogradprivateuse3": [13, 18], "tensorimpl": [13, 18, 225, 239], "storag": [13, 18, 19, 103, 108, 121, 137, 143, 155, 156, 163, 172, 178, 188, 206, 207, 224, 229, 237, 261, 265, 274, 276, 277, 284, 287], "dispatchkeyset": [13, 18], "k": [13, 15, 24, 86, 95, 105, 130, 142, 180, 181, 183, 265, 266, 278, 283], "caffe2": [13, 89], "typemeta": 13, "data_typ": [13, 108], "opaquetensorimpl": 13, "tweak": [13, 53, 243], "overrid": [13, 18, 55, 97, 106, 141, 159, 163, 175, 191, 251, 260], "vulkan": 13, "src": [13, 14, 117, 154, 175, 239], "registrationdeclar": 13, "snippet": [13, 138, 139, 141, 147, 154, 160, 175, 183, 209, 224, 229, 240, 260, 263, 266, 274, 278, 282], "ab": [13, 97, 193, 202, 230], "abs_": 13, "abs_out": 13, "absolute_": 13, "absolute_out": 13, "angl": [13, 17, 111], "angle_out": 13, "sgn": 13, "uniqu": [13, 21, 53, 57, 59, 105, 106, 107, 109, 111, 139, 151, 181, 184, 196, 198, 255, 274, 283], "boolean": [13, 155, 195], "impli": [13, 104, 109, 195, 206, 229, 239, 252], "schema_my_op1": 13, "my_op1": 13, "schema_my_op2": 13, "my_op2": 13, "schema_my_op2_backward": 13, "my_op2_backward": 13, "zoom": [13, 86, 101, 144, 188, 191], "1600": [13, 225, 239], "grow": [13, 53, 106, 141, 143, 150, 206], "unrealist": 13, "decompos": [13, 21, 138, 195, 283], "combin": [13, 39, 59, 64, 92, 94, 97, 99, 104, 105, 108, 111, 112, 133, 137, 138, 143, 145, 146, 148, 156, 166, 172, 176, 179, 182, 184, 195, 196, 208, 209, 225, 240, 268, 279], "classifi": [13, 15, 24, 27, 35, 46, 49, 50, 51, 56, 61, 79, 86, 92, 97, 99, 104, 121, 127, 131, 137, 140, 146, 162, 167, 184, 185, 198, 199, 223, 255, 260, 261], "accompani": 13, "comment": [13, 154, 169, 184, 214, 226, 274, 286], "sacrif": [13, 176], "max_pool2d": [13, 97, 138, 181, 230], "alia": [13, 102], "worri": [13, 56, 106, 149, 152, 169, 182, 209], "my_op": 13, "squeez": [13, 17, 102, 189, 267], "max": [13, 14, 24, 53, 56, 86, 97, 99, 138, 144, 154, 178, 189, 191, 195, 199, 240, 255, 258, 259, 267, 279, 283, 287], "op_backward": 13, "proper": [13, 34, 139, 142, 152, 163, 178, 182, 191, 196, 240, 274], "rare": [13, 18, 53, 127, 172, 184, 240], "assumpt": [13, 17, 79, 104, 111, 112, 166, 172], "myadd_schema": 13, "train": [13, 15, 20, 21, 23, 34, 38, 39, 40, 44, 46, 49, 50, 51, 55, 58, 60, 61, 64, 66, 67, 69, 71, 72, 73, 76, 77, 79, 86, 89, 95, 96, 98, 99, 102, 104, 105, 107, 109, 111, 112, 114, 120, 131, 132, 133, 134, 137, 138, 140, 141, 144, 147, 148, 152, 163, 164, 166, 167, 170, 171, 174, 175, 177, 180, 181, 182, 183, 185, 188, 191, 192, 193, 195, 198, 202, 204, 205, 206, 207, 208, 209, 215, 224, 227, 230, 238, 241, 242, 245, 255, 259, 260, 261, 263, 265, 266, 276, 283], "my_add": 13, "_xlac": 13, "torch_xla_sourc": 13, "include_dir": [13, 175], "library_dir": 13, "extra_link_arg": 13, "make_relative_rpath": 13, "seamlessli": [13, 17, 57, 142, 196, 199, 225, 250], "nm": [13, 214], "torchvsion": 13, "torchvis": [13, 15, 24, 36, 38, 40, 44, 46, 47, 54, 61, 92, 95, 97, 98, 101, 103, 104, 127, 134, 137, 138, 139, 159, 169, 177, 180, 181, 185, 188, 189, 191, 193, 214, 215, 230, 238, 240, 243, 248, 254, 255, 261, 267, 281], "adhoc": 13, "unbox": 13, "potenti": [13, 17, 79, 94, 105, 139, 141, 147, 172, 181, 193, 195, 198, 244, 250, 252, 265, 281, 287], "wiki": [13, 158, 170], "suit": [13, 95, 119, 178, 213, 278], "ship": [13, 47, 97], "delet": [13, 87, 143, 152, 169, 174, 182, 191, 267], "old": [13, 24, 121, 141, 176, 188, 279], "until": [13, 53, 86, 94, 139, 141, 145, 146, 154, 155, 160, 169, 172, 178, 180, 181, 182, 188, 225, 263, 274], "interrupt": [13, 57, 92, 184], "quarterli": 13, "cadenc": 13, "announc": 13, "slack": [13, 47], "com": [13, 23, 24, 27, 53, 117, 138, 145, 146, 148, 184, 192, 198, 223, 225, 255, 267], "Not": [13, 152, 177, 259], "search": [13, 23, 53, 135, 137, 144, 160, 176, 195, 258, 267], "instantiate_device_type_test": 13, "testtorchdevicetyp": 13, "testviewop": 13, "testtensordeviceop": 13, "testtypepromot": 13, "__reduce_ex__": 13, "monkei": 13, "direct": [13, 34, 46, 50, 56, 79, 94, 95, 97, 103, 111, 130, 144, 154, 158, 162, 166, 170, 184, 206, 253, 260, 266, 267, 277], "vice": [13, 43, 52], "versa": [13, 43, 52], "Such": [13, 14, 94], "seamless": [13, 196, 208, 287], "coverag": [13, 158, 161, 163, 224, 279, 281], "math": [13, 71, 89, 94, 108, 120, 166, 177, 212, 240], "comprehens": [13, 27, 43, 52, 95, 117, 160, 195, 212, 239, 240], "refactor": [13, 121, 150], "codegen": [13, 160, 212], "dev": [13, 106, 147, 177, 188, 191, 193, 221, 224, 287], "andrew": [14, 262], "gu": 14, "shard": [14, 133, 137, 150, 207, 208, 209, 260, 263], "saw": [14, 17, 39, 53, 97, 99, 102, 106, 108, 158, 161, 162], "skeleton": [14, 17, 237], "implicitli": [14, 46, 53, 94, 138, 149, 183, 195, 221], "schedul": [14, 86, 92, 103, 127, 131, 138, 139, 140, 152, 174, 179, 188, 198, 230, 240, 247, 258, 260, 261], "synchron": [14, 20, 59, 60, 86, 138, 140, 152, 154, 178, 180, 181, 188, 193, 206, 221, 224, 225, 253, 259, 265, 266], "rank": [14, 20, 23, 48, 57, 59, 86, 132, 137, 138, 139, 140, 141, 152, 154, 174, 175, 180, 181, 182, 196, 206, 207, 209, 258, 259, 263, 265], "commun": [14, 18, 23, 59, 137, 138, 139, 140, 142, 144, 150, 151, 152, 174, 175, 178, 180, 181, 182, 188, 191, 195, 196, 208, 209, 240, 260, 263, 265, 269, 287], "particip": [14, 99, 151, 181, 224, 240], "group": [14, 23, 24, 27, 53, 64, 87, 99, 102, 119, 133, 137, 138, 139, 140, 141, 146, 148, 150, 152, 154, 160, 174, 188, 196, 198, 199, 206, 207, 209, 212, 225, 255, 258, 259, 265], "fewer": [14, 148, 161], "hang": [14, 59, 146], "facilit": [14, 17, 53, 95, 102, 104, 121, 136, 137, 140, 142, 155, 240, 279, 282], "earli": [14, 56, 92, 152, 154, 172, 212, 262, 276], "shadow": 14, "hook": [14, 140, 142, 147, 152, 176, 185, 212, 231, 261], "dist": [14, 23, 138, 139, 141, 152, 154, 170, 174, 175, 181, 206, 207, 209, 259, 263, 265], "mp": [14, 18, 35, 40, 43, 57, 59, 66, 79, 102, 120, 127, 137, 138, 139, 152, 154, 180, 181, 182, 198, 206, 207, 259], "ddp": [14, 20, 57, 58, 64, 137, 138, 139, 140, 142, 151, 188, 209, 259], "nccl": [14, 23, 57, 59, 86, 138, 139, 141, 142, 152, 154, 188, 196, 207, 209, 263, 265], "world_siz": [14, 20, 23, 27, 57, 59, 138, 139, 141, 152, 154, 174, 175, 180, 181, 182, 206, 207, 209, 259, 263, 265], "num_input": 14, "master_addr": [14, 23, 57, 59, 138, 141, 152, 154, 175, 180, 181, 182, 206, 207, 259, 265], "localhost": [14, 23, 57, 59, 101, 138, 141, 152, 175, 180, 181, 182, 188, 189, 196, 206, 207, 209, 238, 249, 259], "master_port": [14, 23, 57, 59, 138, 141, 152, 154, 175, 180, 181, 182, 206, 207, 259, 265], "29500": [14, 23, 154, 175, 180, 181, 182, 259], "init_process_group": [14, 20, 23, 57, 59, 138, 139, 141, 152, 154, 174, 175, 206, 207, 209, 259, 263, 265], "device_id": [14, 59, 121, 139, 140, 152, 259], "nproc": [14, 57, 59, 138, 152, 180, 182, 206, 207, 259, 263], "arbitrarili": [14, 53, 104, 231], "togeth": [14, 21, 35, 41, 53, 55, 64, 89, 97, 99, 102, 103, 104, 108, 112, 138, 140, 148, 152, 155, 156, 172, 180, 182, 184, 191, 199, 239, 252, 283], "lr": [14, 24, 27, 50, 56, 71, 92, 97, 112, 120, 121, 127, 131, 138, 139, 140, 152, 154, 160, 162, 179, 180, 181, 182, 189, 204, 206, 207, 212, 214, 238, 247, 248, 259, 260, 261], "notabl": [14, 24, 92, 237], "divide_by_initial_world_s": 14, "world": [14, 17, 23, 40, 58, 94, 102, 106, 142, 154, 159, 162, 175, 179, 180, 181, 195, 196, 206, 207, 209, 213, 265, 279], "nonetheless": [14, 104], "mind": [14, 43, 53, 56, 89, 104, 151, 166], "preliminari": [14, 154], "delv": [14, 160, 252], "deeper": [14, 15, 40, 95, 102, 104, 106, 159, 160, 183, 195, 205, 212], "insight": [14, 79, 86, 136, 154, 183, 225, 239], "join_hook": 14, "kwarg": [14, 121, 140, 159, 163, 178, 181, 195, 196, 204, 212, 255, 278], "join_devic": 14, "join_process_group": 14, "processgroup": [14, 20, 23, 64, 133, 137, 142, 182, 196, 209, 240, 265], "throw_on_early_termin": 14, "explain": [14, 15, 21, 46, 50, 56, 79, 95, 106, 112, 130, 141, 142, 160, 193, 195, 200, 230, 250, 255, 268, 278, 281, 283], "joinconfig": 14, "_join_config": 14, "main_hook": 14, "repeatedli": [14, 99, 178, 182, 266], "post_hook": 14, "is_last_join": 14, "broadcast": [14, 72, 112, 120, 140, 152, 154, 175, 195, 239, 259], "itself": [14, 34, 35, 46, 86, 89, 97, 99, 102, 104, 108, 109, 112, 117, 121, 130, 142, 143, 145, 149, 154, 162, 178, 181, 182, 184, 196, 224, 230, 254], "vacuou": 14, "contextlib": [14, 191], "nullcontext": 14, "relat": [14, 17, 56, 94, 95, 102, 103, 108, 111, 136, 137, 142, 160, 170, 195, 199, 225, 240, 278], "conform": [14, 191], "interleav": [14, 263], "syncbatchnorm": [14, 59], "proce": [14, 104, 106, 160, 195, 240, 265], "__exit__": 14, "heartbeat": 14, "notify_join_context": 14, "serializ": 14, "proceed": [14, 50, 104, 117, 172], "overlap": [14, 60, 138, 139, 140, 145, 150, 152, 172, 188, 191, 240, 263], "moreov": [14, 172, 214, 225, 274], "permit": [14, 224], "customiz": [14, 155], "idea": [14, 27, 79, 89, 104, 106, 107, 108, 111, 120, 142, 148, 155, 160, 170, 179, 182, 184, 221, 225, 240, 258, 259, 274, 286], "counterjoinhook": 14, "sync_max_count": 14, "all_reduc": [14, 64, 138, 139, 154, 175, 208, 265], "get_rank": [14, 140, 152, 154], "process_group": [14, 209, 265], "common_rank": 14, "find_common_rank": 14, "max_count": 14, "__call__": [14, 55, 176], "increment": [14, 89, 108, 112, 154, 179], "meth": [14, 17], "to_consid": 14, "reduceop": [14, 138, 139, 154], "device_count": [14, 57, 59, 92, 102, 138, 152, 206, 207, 209], "highlight": [14, 53, 89, 113, 124, 133, 139, 140, 183, 188, 193, 195, 196, 214, 252], "alexi": 15, "jacq": 15, "winston": 15, "her": [15, 175], "leon": 15, "gati": 15, "alexand": [15, 281], "ecker": 15, "matthia": 15, "bethg": 15, "artist": 15, "distanc": [15, 66, 67, 71, 72, 73, 76, 77, 94, 104, 120], "d_c": 15, "d_": 15, "measur": [15, 39, 86, 94, 95, 97, 99, 104, 111, 138, 141, 156, 159, 161, 172, 178, 179, 183, 186, 193, 213, 224, 225, 230, 239, 245, 254, 260, 267, 278], "indispens": [15, 178], "pil": [15, 44, 55, 177, 191, 198], "pretrain": [15, 27, 46, 79, 95, 111, 127, 137, 177, 184, 191, 214, 254, 255, 281], "longer": [15, 56, 62, 63, 94, 106, 112, 114, 120, 131, 140, 143, 147, 160, 169, 176, 179, 180, 193, 195, 203, 205, 217, 218, 219, 220, 222, 225, 240, 271, 272, 278, 279, 280], "resiz": [15, 24, 50, 56, 155, 214, 248], "unabl": [15, 19, 156, 171, 195, 276], "caff": 15, "picasso": 15, "jpg": [15, 36, 55, 56, 95], "reconvert": 15, "f_": [15, 178], "xl": [15, 213], "l": [15, 17, 46, 55, 56, 94, 106, 130, 178, 179, 195, 225, 254, 265], "w_": [15, 111], "squar": [15, 39, 50, 55, 66, 67, 71, 72, 73, 76, 77, 94, 97, 99, 102, 104, 120, 148, 149, 162, 170, 179, 183, 262], "contentloss": 15, "recomput": [15, 104, 148, 150, 170, 240], "act": [15, 46, 53, 94, 99, 102, 144, 155, 176, 179, 181, 195, 196], "gram": 15, "g_": 15, "hat": [15, 109], "counteract": 15, "matric": [15, 21, 43, 52, 94, 108, 161, 170, 202, 283], "pool": [15, 23, 56, 97, 99, 104, 112, 121, 189, 196], "tend": [15, 21, 94, 99, 104, 267, 283], "almost": [15, 24, 109, 111, 138, 142, 155, 177, 195, 244, 267], "sl": 15, "19": [15, 21, 44, 97, 160, 179, 195, 213, 230, 267, 268, 283], "vgg": 15, "child": [15, 119, 188, 209], "connect": [15, 50, 92, 97, 99, 111, 127, 137, 141, 142, 154, 158, 159, 166, 176, 177, 179, 199, 200, 209, 227, 265], "eval": [15, 21, 24, 27, 41, 53, 112, 121, 138, 139, 148, 181, 184, 191, 192, 214, 248, 255, 281, 283], "485": [15, 24, 55, 104, 177], "456": [15, 24, 55, 104, 177], "406": [15, 24, 55, 104, 177], "229": [15, 24, 55, 104, 177], "224": [15, 24, 55, 104, 177, 191, 214, 215, 248, 255, 258, 281], "225": [15, 24, 55, 104, 119, 177], "vgg19": [15, 163], "maxpool2d": [15, 50, 97, 121, 159, 189], "align": [15, 137, 183, 184, 212, 221, 266, 275], "depth": [15, 46, 56, 60, 94, 97, 102, 108, 143, 160, 195, 200, 204, 240], "immedi": [15, 23, 43, 52, 56, 99, 102, 109, 154, 169, 180, 181, 188, 267], "white": [15, 19, 21, 79, 97, 99, 112, 189, 191, 283], "input_img": 15, "content_img": 15, "bfg": 15, "closur": [15, 195, 200], "reevalu": 15, "exce": [15, 79, 148, 196], "sphinx_gallery_thumbnail_numb": 15, "neural_style_tutori": [15, 22, 261], "paszk": [16, 154, 179], "dziedzic": 16, "shall": [16, 50, 56], "learnabl": [16, 50, 71, 120, 121, 242], "particularli": [16, 21, 57, 112, 170, 184, 240, 278, 283], "badfftfunct": 16, "literatur": [16, 179], "confusingli": 16, "correl": [16, 86, 99, 112, 160], "filter": [16, 27, 53, 87, 95, 104, 143, 184, 196, 239, 265], "flip": [16, 161], "wrt": [16, 149], "numpy_extensions_tutori": [16, 22, 261], "freeli": 17, "inspir": [17, 154, 161, 166, 183, 286], "v1": [17, 21, 163, 179, 180, 182, 225, 283], "openai": [17, 134, 137, 162, 178, 179, 180, 182, 255], "farama": [17, 178], "gymnasium": [17, 178, 179], "encount": [17, 53, 139, 147, 160, 193, 195, 196, 199, 240, 249, 255, 282], "undertaken": 17, "broader": 17, "wider": [17, 161], "algebra": [17, 43, 52, 97, 102, 106, 213], "acquaint": 17, "set_se": 17, "avenu": [17, 89], "backpropag": [17, 39, 40, 46, 50, 53, 79, 94, 105, 106, 107, 109, 111, 112, 120, 130, 143, 162, 196], "_set_se": 17, "torqu": 17, "upward": 17, "posit": [17, 95, 99, 106, 132, 137, 170, 178, 179, 183, 184, 191, 195, 199, 223, 258, 265, 283], "angular": 17, "stand": [17, 89, 94, 97, 112, 162, 199, 277], "equat": [17, 56, 179, 227, 231], "motion": 17, "veloc": [17, 179], "theta": [17, 79, 106, 178], "_t": [17, 162], "theta_t": 17, "dt": 17, "rad": 17, "sec": [17, 138], "gravit": 17, "mass": 17, "accord": [17, 18, 27, 34, 102, 103, 121, 160, 162, 174, 176, 179, 183, 191, 202, 249, 277], "theta_": [17, 162], "001": [17, 27, 97, 121, 152, 180, 189, 212, 214, 248], "deleg": [17, 137], "is_shar": 17, "new_th": 17, "th": [17, 55, 106, 111, 154, 162], "plu": [17, 106], "new_thdot": 17, "neg": [17, 39, 53, 95, 99, 105, 106, 112, 113, 160, 172, 176, 178, 212, 223], "inde": [17, 19, 104, 148, 161, 172, 178, 183, 193, 196, 225, 276, 277], "discourag": [17, 43, 52, 178], "possibli": [17, 56, 140, 178, 195, 250, 265], "omit": [17, 94, 119, 140, 160, 178, 199, 230, 237, 239], "agent": [17, 134, 137, 179, 180, 182, 185, 261], "albeit": 17, "param": [17, 24, 55, 121, 138, 139, 140, 149, 152, 154, 156, 158, 171, 181, 182, 212, 237, 259, 262, 274], "mandatori": [17, 158, 178], "domain": [17, 27, 36, 40, 53, 54, 79, 103, 117, 137, 178, 192, 240, 279], "accur": [17, 24, 79, 92, 97, 119, 144, 159, 172, 182, 193, 253, 276, 281], "lazili": [17, 169], "costli": [17, 143, 240], "observation_spec": [17, 178], "compositespec": 17, "dictionari": [17, 40, 41, 53, 86, 111, 114, 121, 146, 169, 171, 178, 180, 181, 184, 191, 196, 229, 242, 260, 266], "action_spec": [17, 178], "reward_spec": [17, 178], "done_spec": 17, "input_spec": [17, 178], "state_spec": 17, "output_spec": 17, "neither": [17, 102, 258, 262], "shortcut": 17, "tensorspec": 17, "irrelev": [17, 175], "incorpor": [17, 104, 113, 137, 155, 183], "pseudo": [17, 27], "_make_spec": 17, "pendulumenv": 17, "gen_param": 17, "batch_lock": 17, "homonym": [17, 172], "check_env_spec": [17, 178], "coupl": [17, 38, 53, 98, 102, 103, 111, 139, 149, 155, 156, 169, 172, 189, 195, 240], "rand_step": 17, "randomli": [17, 47, 55, 56, 76, 77, 92, 97, 99, 120, 146, 162, 179, 184, 196], "invers": [17, 97, 102, 266, 275], "thdot": 17, "effort": [17, 53, 55, 56, 117, 239], "summar": [17, 53, 55, 112, 124, 130, 139, 144, 188, 195], "_apply_transform": 17, "_call": 17, "inv": 17, "_inv_apply_transform": 17, "eventu": [17, 141, 148, 155], "out_keys_inv": 17, "unitari": 17, "sine": [17, 97, 120], "cosin": [17, 213], "raw": [17, 35, 47, 53, 72, 86, 97, 120, 200, 253, 265], "del_kei": 17, "mdp": 17, "gather": [17, 59, 95, 101, 138, 140, 142, 152, 154, 155, 159, 178, 200, 224, 263, 286, 287], "unexplor": 17, "abil": [17, 102, 112, 121, 142, 143, 154, 186, 189, 193, 199, 276], "fly": [17, 55, 105, 178, 199], "recreat": [17, 34, 46], "Of": [17, 104, 108, 112, 143, 154, 189, 221, 254, 275, 277], "clip": [17, 53, 79, 97, 178], "scratch": [17, 34, 46, 53, 57, 104, 105, 121, 124, 127, 137, 185, 241, 260, 261, 265], "advanc": [18, 21, 22, 24, 46, 92, 107, 110, 113, 114, 116, 117, 131, 132, 133, 136, 137, 140, 152, 172, 191, 196, 199, 208, 214, 240, 258, 260, 261, 274, 277, 278, 281, 283, 284, 286, 287], "verif": [18, 181], "rapid": [18, 94, 277], "manufactur": 18, "bit": [18, 72, 97, 102, 119, 120, 155, 177, 178, 184, 196, 202, 215, 225, 267, 274], "imposs": [18, 97, 105, 169, 286], "simultan": [18, 34, 46, 60, 144, 154, 172, 177, 240], "began": 18, "lack": [18, 86, 95, 208, 274], "enhanc": [18, 95, 131, 132, 141, 145, 172, 186, 202, 240, 255, 258, 269, 278, 282], "rapidli": 18, "situat": [18, 94, 102, 140, 148, 149, 152, 154, 198, 267], "wrapper_custom_tensor_add": 18, "torch_fn": 18, "custom_cpu_fallback": 18, "operatorhandl": 18, "hint": [18, 23, 94, 104, 105, 109, 117, 143, 154, 180, 188, 195, 200, 212], "cpu_fallback": 18, "cppfunction": 18, "makefromboxedfunct": 18, "cumtomselufunct": 18, "selu": 18, "wrapper_autogradcumstom__selu": 18, "wrapper_autogradcustom__selu": 18, "autocastprivateuse1": 18, "autocast": [18, 202, 214, 248, 278, 283], "kernel_privateuseon": 18, "makefallthrough": 18, "backendmodul": 18, "_register_device_modul": 18, "backend_nam": 18, "get_amp_supported_dtyp": 18, "is_autocast_en": 18, "get_autocast_dtyp": 18, "set_autocast_dtyp": 18, "set_autocast_en": 18, "generatorimpl": 18, "builder": [18, 195], "register_generator_privateuse1": 18, "customgeneratorimpl": 18, "make_custom_gener": 18, "deviceindex": 18, "device_index": 18, "make_gener": 18, "make_cumstom_gener": 18, "event": [18, 86, 119, 138, 139, 180, 193, 230, 238, 253, 265], "deviceguard": 18, "deviceguardimplinterfac": 18, "c10_register_guard_impl": 18, "customguardimpl": 18, "backend_meta_": 18, "extrameta": 18, "backendmeta": 18, "custombackendmetadata": 18, "unordered_map": 18, "tensorbackendmetaregistri": 18, "for_seri": 18, "for_deseri": 18, "expand": [18, 94, 108, 114, 160, 167, 189, 206, 255, 279], "benchmark": [18, 21, 27, 36, 119, 137, 144, 156, 160, 161, 172, 177, 183, 193, 199, 212, 230, 236, 239, 240, 250, 255, 258, 260, 261, 267, 278, 279, 281, 283], "timer": [18, 56, 156, 184, 204, 212, 228, 236, 261, 283], "ascend": [18, 56, 87, 282], "npu": [18, 281, 282], "meet": [18, 54, 56, 215, 225], "usabl": [18, 121, 130, 155, 241, 265], "compli": 18, "habit": 18, "torch_npu": [18, 282], "exclus": [18, 176], "rename_privateuse1_backend": 18, "register_privateuse1_backend": 18, "unsupported_dtyp": 18, "quint8": [18, 262], "generate_methods_for_privateuse1_backend": 18, "for_tensor": 18, "for_modul": 18, "for_storag": 18, "is_npu": 18, "perhap": [19, 79, 145, 176, 207], "prevent": [19, 39, 53, 59, 112, 119, 143, 146, 152, 160, 162, 172, 195, 196, 224, 225, 240, 245, 258, 282], "custom_op": [19, 117, 252], "land": [19, 136, 137, 147, 162, 199, 214, 259, 276], "everyth": [19, 46, 92, 102, 104, 106, 130, 135, 144, 145, 149, 155, 177, 178, 179, 180, 184, 189, 196, 266], "induc": [19, 176, 265], "bad": [19, 92, 143, 240, 267], "uncom": [19, 53, 55, 67, 77, 97, 101, 108, 112, 120, 174, 179], "cropped_img": 19, "img": [19, 95, 97, 137, 189, 191], "black": [19, 79, 86, 97, 99, 112, 136, 137, 142, 144, 180, 184], "aka": [19, 161, 163, 172, 199, 214, 254], "mutates_arg": 19, "led": 19, "messag": [19, 53, 94, 117, 147, 154, 191, 195, 202, 258], "past": [19, 53, 54, 103, 108, 195, 199], "exercis": [19, 24, 47, 154, 224], "reader": [19, 109, 154, 199, 239], "region": [19, 95, 102, 131, 144, 159, 186, 191, 198, 221, 224, 228, 240, 247, 251, 253, 260, 261], "unus": [19, 160, 175], "forgot": [19, 265], "python_custom_op": [19, 22, 261], "pritam": 20, "damania": 20, "yi": [20, 195, 244, 254], "wang": [20, 27, 114, 116, 117, 160, 162, 265], "distributeddataparallel": [20, 59, 60, 64, 133, 138, 139, 140, 154, 175, 182, 224, 259], "paradigm": [20, 21, 64, 104, 120, 133, 181, 182, 283], "techniqu": [20, 21, 24, 53, 64, 104, 105, 111, 113, 132, 137, 142, 148, 149, 150, 159, 167, 170, 172, 174, 176, 182, 191, 196, 199, 200, 240, 255, 258, 267, 274, 279, 283], "embed": [20, 53, 99, 105, 107, 109, 110, 121, 137, 139, 140, 142, 174, 181, 182, 184, 189, 199, 208, 261, 263], "dens": [20, 21, 196, 199, 274, 279, 283], "fc": [20, 46, 162], "replic": [20, 23, 60, 64, 137, 138, 142, 150, 152, 154, 181, 182, 196, 209], "trainer": [20, 27, 59, 144, 150, 180, 181, 182, 207, 283], "hybrid": [20, 88, 90, 209, 261], "pipedream": 20, "master": [20, 24, 138, 154, 159, 163, 181, 182, 198, 214, 265], "embeddingbag": [20, 23], "drive": [20, 56, 94, 97, 99, 137, 162, 172, 274], "respond": [20, 95, 162, 181], "amongst": [20, 196, 275], "themselv": [20, 99, 196, 200, 276], "remotemodul": 20, "kick": [20, 34, 46, 169, 180, 181, 182], "remot": [20, 64, 133, 144, 180, 181, 182, 188, 221, 249, 258], "hybridmodel": 20, "allreduc": [20, 86, 138, 142, 152, 175, 240, 265], "firstli": [20, 117, 160, 179], "tcp": [20, 59, 141, 150, 151, 154], "init_method": [20, 152, 154, 263], "_run_train": [20, 182], "rpc_async": [20, 180, 182], "exit": [20, 158, 180, 181, 182, 204, 205, 212, 215, 251, 256, 258, 265], "port": [20, 141, 154, 181, 196, 221, 249, 265], "conflict": [20, 160, 195], "remote_emb_modul": 20, "rref": [20, 180, 181], "distributedoptim": [20, 181, 182], "remote_paramet": 20, "cannnot": 20, "crossentropyloss": [20, 24, 39, 97, 106, 142, 174, 182, 189, 214, 248], "get_next_batch": [20, 180, 182], "jess": [21, 283], "cai": [21, 283], "seek": [21, 89, 95, 208, 283], "expens": [21, 43, 104, 119, 182, 195, 230, 239, 253, 267, 283], "grain": [21, 36, 94, 139, 154, 188, 193, 224, 225, 239, 283], "pattern": [21, 99, 101, 137, 142, 154, 160, 170, 181, 209, 214, 215, 244, 274, 276, 281, 283], "2n": [21, 283], "degrad": [21, 79, 244, 283], "sparsifi": [21, 132, 137, 176, 283], "answer": [21, 39, 95, 99, 106, 154, 159, 169, 184, 195, 196, 283], "tune": [21, 24, 39, 86, 104, 112, 122, 132, 135, 137, 138, 144, 147, 177, 228, 236, 239, 258, 260, 261, 267, 278, 281, 283], "recov": [21, 138, 139, 152, 163, 283], "nearli": [21, 112, 189, 225, 283], "f1": [21, 193, 283], "86": [21, 160, 177, 182, 199, 212, 213, 225, 283], "92": [21, 213, 225, 283], "3x": [21, 67, 120, 202, 224, 240, 283], "speedup": [21, 47, 120, 137, 156, 160, 171, 199, 213, 240, 245, 254, 267, 278, 279, 283], "beginn": [21, 37, 42, 48, 49, 51, 68, 74, 78, 81, 82, 83, 84, 88, 90, 96, 98, 100, 107, 110, 115, 118, 120, 122, 133, 137, 201, 232, 233, 234, 235, 283], "to_sparse_semi_structur": [21, 283], "mask": [21, 95, 99, 119, 134, 137, 155, 170, 176, 183, 191, 198, 214, 255, 267, 274, 275, 277, 279, 283, 287], "motiv": [21, 79, 141, 160, 181, 262, 268, 275, 276, 279, 283], "affect": [21, 95, 99, 103, 104, 149, 172, 174, 240, 283], "swap": [21, 55, 106, 142, 172, 178, 199, 237, 267, 279, 283], "compress": [21, 95, 176, 274, 277, 281, 283], "arrang": [21, 120, 283], "drawback": [21, 111, 195, 206, 207, 283], "2020": [21, 283], "amper": [21, 139, 166, 171, 224, 283], "cutlass": [21, 278, 283], "cusparselt": [21, 283], "milder": [21, 283], "account": [21, 54, 112, 155, 169, 172, 184, 189, 199, 254, 281, 283], "retrain": [21, 283], "sweet": [21, 283], "spot": [21, 97, 101, 102, 145, 283], "2x": [21, 89, 137, 149, 169, 213, 283], "theoret": [21, 56, 172, 245, 274, 283], "granular": [21, 139, 160, 196, 230, 240, 258, 283], "fp16": [21, 139, 163, 267, 278, 283], "resnet": [21, 46, 47, 95, 143, 188, 240, 283], "imagenet": [21, 47, 55, 95, 127, 177, 283], "76": [21, 97, 163, 182, 199, 212, 225, 283], "resnext": [21, 283], "101_32x8d": [21, 283], "79": [21, 97, 160, 212, 225, 230, 283], "xception": [21, 283], "ssd": [21, 240, 283], "rn50": [21, 283], "coco2017": [21, 283], "bbap": [21, 283], "24": [21, 24, 44, 160, 177, 199, 213, 225, 283], "maskrcnn": [21, 283], "37": [21, 97, 119, 177, 182, 212, 213, 230, 283], "fairseq": [21, 283], "en": [21, 158, 170, 184, 191, 283], "wmt14": [21, 283], "bleu": [21, 283], "squad": [21, 283], "91": [21, 97, 182, 213, 225, 283], "workflow": [21, 24, 38, 86, 91, 92, 113, 137, 138, 196, 201, 277, 283], "perspect": [21, 108, 178, 258, 283], "subproblem": [21, 283], "bmatrix": [21, 109, 283], "handoff": [21, 283], "anticip": [21, 283], "area": [21, 95, 99, 134, 189, 198, 223, 267, 277, 283], "littl": [21, 56, 97, 104, 106, 112, 155, 178, 180, 182, 183, 186, 188, 283], "colab": [21, 23, 27, 38, 43, 52, 98, 101, 112, 137, 154, 155, 161, 178, 179, 191, 196], "pip": [21, 27, 54, 86, 95, 101, 114, 116, 162, 177, 179, 188, 191, 193, 198, 213, 215, 223, 225, 227, 230, 238, 241, 242, 243, 244, 245, 252, 258, 265, 267, 281], "panda": [21, 55, 79, 191], "hug": [21, 160], "face": [21, 47, 55, 56, 79, 160, 255], "token": [21, 53, 111, 139, 142, 146, 174, 183, 184, 199, 240, 255, 283], "span": [21, 105, 152, 188, 221, 283], "segment": [21, 137, 199, 267, 283], "text": [21, 36, 47, 56, 79, 89, 95, 105, 106, 108, 109, 111, 130, 137, 139, 145, 146, 154, 167, 172, 178, 179, 184, 188, 191, 199, 221, 223, 255, 283], "wikipedia": [21, 158, 170, 283], "articl": [21, 36, 283], "score": [21, 53, 95, 105, 109, 111, 119, 183, 184, 198, 199, 223, 255, 263, 283], "fair": [21, 104, 279, 283], "remov": [21, 24, 53, 56, 57, 87, 112, 117, 119, 124, 140, 143, 152, 160, 169, 177, 183, 184, 191, 192, 193, 195, 196, 199, 225, 239, 267, 274, 275, 279, 283], "lowest": [21, 138, 176, 283], "l1": [21, 92, 176, 283], "ao": [21, 24, 262, 267, 281, 283], "satisfi": [21, 144, 240, 283], "anytim": [21, 283], "pruner": [21, 283], "update_mask": [21, 283], "shot": [21, 180, 255, 283], "wouldn": [21, 111, 138, 155, 283], "squash_mask": [21, 283], "left": [21, 34, 46, 50, 53, 56, 67, 89, 94, 101, 102, 106, 111, 120, 121, 154, 162, 166, 178, 179, 181, 183, 188, 189, 221, 283], "quickstart": [21, 34, 35, 36, 37, 38, 39, 41, 43, 44, 137, 283], "28x": [21, 283], "16": [21, 24, 27, 92, 97, 99, 104, 121, 152, 155, 163, 177, 182, 189, 191, 195, 198, 206, 207, 212, 213, 225, 230, 254, 255, 267, 278, 283], "amen": [21, 283], "spent": [21, 86, 183, 188, 225, 230, 245, 283], "slower": [21, 60, 152, 172, 177, 179, 193, 198, 267, 268, 279, 283], "delta": [21, 160, 179, 225, 239, 283], "exact": [21, 104, 121, 148, 183, 195, 199, 204, 265, 283], "78": [21, 212, 225, 283], "53": [21, 97, 163, 212, 213, 230, 283], "44": [21, 160, 182, 261, 283], "09": [21, 53, 97, 160, 182, 213, 283], "93": [21, 119, 182, 213, 225, 230, 283], "49": [21, 97, 163, 182, 225, 283], "15": [21, 27, 44, 48, 79, 97, 99, 127, 189, 191, 198, 212, 213, 225, 230, 236, 247, 261, 283], "54": [21, 97, 163, 212, 225], "71x": 21, "35": [21, 97, 142, 163, 212, 213], "74": [21, 44, 182, 212, 213, 225, 230], "23x": 21, "72": [21, 44, 97, 177, 212, 225, 230], "71": [21, 24, 55, 160, 182, 212], "59": [21, 177, 191, 212, 225, 230], "41": [21, 97, 138, 177, 212, 225, 230], "22x": 21, "286": [21, 163, 191, 283], "65": [21, 44, 55, 97, 182, 198, 199, 212, 225], "247": [21, 182], "63": [21, 97, 212, 230], "14x": 21, "46": [21, 97, 160, 163, 177, 212], "02x": 21, "ye": [21, 54, 169, 252], "47": [21, 44, 92, 163, 212, 213, 225, 230], "68": [21, 55, 97, 160, 212, 225], "18x": [21, 283], "36": [21, 156, 177, 212, 213], "13x": 21, "159": 21, "22": [21, 97, 100, 160, 163, 182, 212, 213, 225, 261], "142": [21, 213], "23": [21, 97, 160, 182, 212, 213, 225, 230, 239], "12x": [21, 199], "sparsesemistructuredtensor": [21, 283], "semi_structured_spars": [21, 22, 261], "00": [22, 42, 44, 51, 68, 74, 78, 90, 97, 100, 110, 118, 119, 122, 160, 182, 185, 191, 213, 230, 236, 247, 261, 267, 269, 284], "011": [22, 51], "mem": [22, 42, 51, 68, 74, 78, 86, 90, 100, 110, 118, 119, 122, 185, 230, 236, 247, 261, 284], "mb": [22, 24, 42, 51, 68, 74, 78, 90, 100, 110, 118, 119, 122, 138, 185, 230, 236, 247, 259, 261, 284], "torchrl": [22, 134, 137, 155, 162, 185, 261], "ddpg": [22, 134, 137, 261], "pendulum": [22, 134, 137, 178, 261], "scipi": [22, 47, 149, 193, 261], "acceler": [22, 35, 40, 43, 52, 53, 54, 61, 64, 66, 79, 104, 116, 120, 127, 137, 145, 154, 163, 172, 185, 198, 200, 202, 205, 213, 214, 215, 240, 261, 279, 284, 287], "bert": [22, 99, 137, 138, 261, 281, 287], "semi": [22, 134, 137, 199, 261, 287], "sparsiti": [22, 111, 137, 176, 261, 274, 276, 284, 287], "000": [22, 24, 36, 42, 68, 74, 100, 118, 122, 144, 162, 163, 185, 189, 191, 236, 261, 284], "supervis": [22, 106, 134, 137, 186, 191, 261], "usb": [22, 134, 137, 177, 261], "usb_semisup_learn": [22, 27, 261], "embeddingplann": [23, 137], "conda": [23, 86, 95, 101, 154, 160, 223, 238, 239, 258, 265, 267, 287], "cudatoolkit": 23, "sudo": [23, 188], "rm": 23, "miniconda3": [23, 239], "py37_4": 23, "x86_64": 23, "sh": [23, 152, 221], "anaconda": [23, 86, 95, 154, 238], "miniconda": 23, "chmod": 23, "fbgemm": [23, 24, 196, 262], "ipython": [23, 119], "cp": [23, 263], "restart": [23, 95, 101, 151, 179], "newli": [23, 127, 154], "python37": 23, "python3": [23, 188, 213, 239, 255, 265], "dynload": 23, "enviro": 23, "spmd": [23, 142, 207], "mimic": [23, 24, 104, 244, 267, 274], "launcher": 23, "embeddingbagcollect": 23, "bag": [23, 38, 189, 196], "ebc": [23, 196], "row": [23, 55, 79, 94, 99, 102, 106, 108, 109, 111, 112, 140, 142, 144, 145, 161, 180, 196, 221, 275, 277, 286], "4096": [23, 196, 213, 266], "parameterconstraint": 23, "placement": [23, 140, 258, 281], "evenli": [23, 94], "column": [23, 94, 102, 106, 108, 119, 142, 145, 160, 161, 166, 188, 191, 196, 230, 275, 276, 277], "intra": [23, 139, 142, 209], "host": [23, 38, 58, 86, 98, 105, 138, 139, 142, 152, 154, 172, 174, 181, 182, 188, 209, 230, 240, 249], "interconnect": [23, 227], "nvlink": [23, 142], "data_parallel": 23, "planner": 23, "embedding_typ": 23, "embeddingcomputekernel": 23, "shardingtyp": 23, "large_table_cnt": 23, "small_table_cnt": 23, "large_t": 23, "embeddingbagconfig": 23, "large_table_": 23, "embedding_dim": [23, 99], "num_embed": 23, "feature_nam": 23, "large_table_feature_": 23, "poolingtyp": 23, "small_tabl": 23, "small_table_": 23, "small_table_feature_": 23, "gen_constraint": 23, "sharding_typ": 23, "table_wis": 23, "large_table_constraint": 23, "small_table_constraint": 23, "mimick": 23, "single_rank_execut": 23, "embeddingbagcollectionshard": [23, 196], "model_parallel": 23, "embeddingshardingplann": 23, "topologi": [23, 196, 207, 209, 214, 221], "moduleshard": 23, "shardingenv": 23, "init_distributed_single_host": 23, "pyre": 23, "fixm": 23, "set_devic": [23, 57, 59, 138, 139, 152, 206, 207, 209, 212, 263, 268], "compute_devic": 23, "pg": [23, 265], "sharder": [23, 196], "shardingplan": 23, "collective_plan": 23, "sharded_model": 23, "from_process_group": 23, "spmd_sharing_simul": 23, "get_context": [23, 154], "exitcod": 23, "factor": [23, 99, 127, 172, 179, 180, 193, 196, 206, 267], "medium": [23, 141, 198, 240], "large_table_0": 23, "parametershard": 23, "compute_kernel": 23, "batched_fus": 23, "sharding_spec": 23, "enumerableshardingspec": 23, "shardmetadata": 23, "shard_offset": 23, "shard_siz": 23, "large_table_1": 23, "small_table_0": 23, "small_table_1": 23, "finer": [23, 36, 230], "halv": [23, 119], "row_wis": 23, "2048": [23, 104], "512": [23, 139, 174, 195, 202, 214, 225, 230, 283], "imbal": [23, 240], "vertic": 23, "column_wis": 23, "32": [23, 24, 27, 59, 92, 97, 99, 102, 104, 109, 119, 138, 166, 171, 174, 177, 181, 182, 188, 191, 195, 212, 213, 215, 225, 263, 278], "unfortu": 23, "batched_dens": 23, "raghuraman": 24, "krishnamoorthi": 24, "seth": [24, 38], "weidman": 24, "jerri": 24, "zhang": [24, 206, 207, 209], "decreas": [24, 40, 53, 79, 87, 104, 112, 142, 145, 196, 277], "furthermor": [24, 104, 156, 161, 189, 208, 225, 268], "hit": [24, 79, 142, 188], "warn": [24, 55, 130, 160, 191, 225, 230, 239, 274, 275, 276, 277], "mobilenetv2": 24, "np": [24, 55, 97, 105, 177, 182, 189, 191, 239, 255, 275, 283], "dataload": [24, 34, 35, 37, 38, 39, 40, 41, 43, 44, 47, 48, 56, 59, 79, 92, 104, 122, 138, 139, 145, 154, 172, 174, 181, 188, 189, 191, 214, 216, 228, 240, 248, 261, 281], "filterwarn": [24, 191], "ignor": [24, 55, 104, 109, 111, 121, 175, 189, 191, 195, 198, 224, 230, 241, 253, 262, 275, 276, 279], "deprecationwarn": 24, "seed": [24, 56, 79, 97, 104, 138, 139, 154, 179, 180, 182], "manual_se": [24, 97, 102, 108, 138, 139, 154, 156, 179, 180, 259, 263, 283], "191009": 24, "floatfunct": 24, "quantstub": 24, "dequantstub": 24, "relu6": 24, "_make_divis": 24, "divisor": 24, "min_valu": 24, "tf": [24, 101], "divis": [24, 102, 195, 212], "tensorflow": [24, 101, 105, 107, 120], "blob": [24, 117, 138, 188], "slim": [24, 120], "mobilenet": [24, 137, 177], "new_v": 24, "round": [24, 117, 139, 180, 225, 239], "convbnrelu": 24, "in_plan": 24, "out_plan": 24, "kernel_s": [24, 97, 138, 170, 262], "momentum": [24, 46, 47, 69, 73, 92, 97, 103, 112, 120, 121, 148, 154, 180, 189, 196, 214, 242, 243, 248, 262], "inplac": [24, 138, 283], "invertedresidu": 24, "inp": [24, 181, 195, 208, 278], "oup": 24, "expand_ratio": 24, "hidden_dim": [24, 99], "use_res_connect": 24, "pw": 24, "dw": 24, "conv": [24, 56, 99, 148, 163, 181, 192, 221, 230], "skip_add": 24, "num_class": [24, 27, 180, 189, 191, 198], "width_mult": 24, "inverted_residual_set": 24, "round_nearest": 24, "v2": [24, 104, 124, 155, 177, 192, 196, 202, 206, 212, 282], "width": [24, 46, 47, 50, 99, 102, 144, 166, 191, 192, 198, 255], "amount": [24, 79, 86, 121, 142, 152, 172, 176, 193, 196, 230, 240, 267], "input_channel": 24, "last_channel": 24, "1280": [24, 198], "96": [24, 97, 160, 182, 213], "160": [24, 182, 191, 225, 230], "320": 24, "valueerror": [24, 255], "invert": [24, 134, 137, 178, 275], "residu": [24, 142], "output_channel": 24, "quant": [24, 262], "dequant": [24, 262, 267], "isinst": [24, 140, 268, 283], "kaiming_normal_": 24, "fan_out": 24, "zeros_": 24, "elif": [24, 174, 212], "ones_": 24, "normal_": 24, "bn": [24, 148, 192, 262], "numer": [24, 43, 53, 76, 77, 102, 104, 105, 114, 120, 140, 144, 224, 240, 263, 283], "fuse_model": 24, "is_qat": [24, 262], "fuse_modul": 24, "fuse_modules_qat": 24, "averagemet": 24, "fmt": 24, "avg": [24, 213, 230], "__str__": [24, 196], "fmtstr": 24, "__dict__": [24, 237, 281], "topk": 24, "maxk": 24, "pred": [24, 112, 130, 138, 142, 181, 189], "correct_k": 24, "keepdim": [24, 138, 181], "mul_": 24, "criterion": [24, 50, 71, 97, 120, 182, 184, 189, 214, 238, 248], "neval_batch": 24, "top1": 24, "acc": [24, 191], "2f": [24, 138, 177, 180, 182], "top5": 24, "cnt": 24, "acc1": 24, "acc5": 24, "load_model": 24, "model_fil": 24, "state_dict": [24, 41, 53, 57, 59, 92, 138, 139, 140, 152, 176, 193, 206, 207, 214, 224, 227, 228, 236, 237, 241, 244, 260, 261, 266], "weights_onli": [24, 41, 121, 140, 152, 191], "load_state_dict": [24, 41, 57, 92, 103, 121, 140, 152, 191, 206, 207, 224, 228, 236, 241, 261], "print_size_of_model": 24, "temp": [24, 147, 249], "getsiz": 24, "1e6": [24, 204, 212, 259], "data_path": [24, 92], "prepare_data_load": 24, "randomresizedcrop": [24, 55], "randomhorizontalflip": [24, 55], "totensor": [24, 55, 97, 138, 154, 177, 181, 189, 191, 214, 248], "dataset_test": 24, "centercrop": 24, "train_sampl": 24, "randomsampl": 24, "test_sampl": 24, "sequentialsampl": 24, "train_batch_s": 24, "data_loader_test": 24, "eval_batch_s": [24, 27], "pre": [24, 36, 105, 134, 137, 139, 142, 154, 177, 191, 196, 198, 199, 207, 215, 250, 258, 267, 278], "saved_model_dir": 24, "float_model_fil": 24, "mobilenet_pretrained_float": 24, "pth": [24, 27, 121, 191, 207, 214, 255, 267], "scripted_float_model_fil": 24, "mobilenet_quantization_script": 24, "scripted_quantized_model_fil": 24, "mobilenet_quantization_scripted_quant": 24, "float_model": [24, 281], "fusion": [24, 86, 160, 196, 214, 240, 247, 256, 260, 261, 267, 278], "baselin": [24, 27, 95, 104, 191, 215, 225, 239, 267, 283], "un": [24, 102, 184], "num_eval_batch": 24, "sophist": [24, 120, 178], "num_calibration_batch": 24, "mymodel": [24, 262], "estim": [24, 50, 55, 56, 99, 144, 178, 179, 184, 196, 225, 245, 267], "qconfig": [24, 215, 262], "default_qconfig": 24, "calibr": [24, 172, 215, 262, 281], "56": [24, 97, 163, 177, 212, 225, 230, 258, 283], "4x": [24, 139], "x86": [24, 202, 262, 278], "basi": [24, 139], "histogram": [24, 238], "per_channel_quantized_model": 24, "get_default_qconfig": 24, "67": [24, 119, 160, 212, 213, 262], "qat": [24, 262], "int8": [24, 177, 202, 215, 267, 278], "ultim": [24, 53, 56, 89, 202, 274], "overal": [24, 53, 99, 138, 139, 154, 172, 179, 191, 195, 196, 213, 225, 240], "train_one_epoch": 24, "ntrain_batch": 24, "avgloss": 24, "5f": 24, "start_tim": 24, "3f": [24, 97, 283], "global_avg": 24, "qat_model": 24, "get_default_qat_qconfig": 24, "prepare_qat": 24, "freez": [24, 46, 127, 215], "num_train_batch": 24, "nepoch": 24, "disable_observ": 24, "intrins": [24, 262], "freeze_bn_stat": 24, "quantized_model": [24, 281], "analyz": [24, 86, 135, 137, 169, 178, 193, 195, 239, 255], "arithmet": [24, 43, 97, 102, 172], "confirm": [24, 92, 95, 112, 113, 139, 161, 180], "allud": [24, 79], "run_benchmark": 24, "img_load": 24, "elaps": [24, 138, 184], "num_batch": [24, 154], "enumer": [24, 92, 97, 103, 138, 140, 142, 177, 181, 188, 189, 214, 248, 283], "num_imag": 24, "0f": 24, "macbook": [24, 184], "pro": [24, 98], "61": [24, 97, 119, 163, 212, 213, 283], "welcom": 24, "hao": 27, "chen": [27, 195], "unifi": [27, 137, 148, 208, 223, 255], "ssl": 27, "modular": [27, 36, 121, 193, 242], "fixmatch": 27, "defixmatch": 27, "vision": [27, 40, 47, 55, 95, 99, 122, 134, 137, 163, 169, 223, 255, 261], "speech": [27, 79, 99, 105, 107, 111, 137, 146, 240], "light": [27, 56, 97, 101, 102, 148, 223], "vit": [27, 255], "famou": [27, 79], "strong": [27, 105, 195, 255, 277], "unlabel": [27, 102], "confid": [27, 56, 95, 97, 103, 106, 144, 178, 179, 189, 224], "threshold": [27, 53, 86, 144, 178, 182, 191, 213, 240], "absorb": 27, "gaussian": [27, 56, 144, 178], "overcom": [27, 113], "quantiti": [27, 104, 132, 137, 142, 161, 166, 171], "qualiti": [27, 162, 184], "trade": [27, 144, 169, 278], "afford": 27, "cv": [27, 279], "nlp": [27, 97, 99, 106, 109, 110, 111, 124, 137, 185, 224, 240, 261, 279], "audio": [27, 36, 47, 137, 157, 187, 190], "semilearn": 27, "get_dataset": 27, "get_data_load": 27, "weak": 27, "get_net_build": 27, "get_algorithm": 27, "get_config": 27, "hyper": [27, 183, 258], "vit_tiny_patch2_32": 27, "use_pretrain": 27, "pretrain_path": 27, "microsoft": [27, 38, 116, 117, 188, 269], "vit_tiny_patch2_32_mlp_im_1k_32": 27, "num_train_it": 27, "num_eval_it": 27, "num_log_it": 27, "adamw": [27, 139, 179], "layer_decai": 27, "cifar10": [27, 61, 92, 97, 188, 214, 243, 248], "num_label": 27, "img_siz": 27, "crop_ratio": 27, "875": 27, "data_dir": [27, 92, 139], "ulb_samples_per_class": 27, "hard_label": 27, "ema_p": 27, "999": [27, 189, 212], "ent_loss_ratio": 27, "uratio": 27, "ulb_loss_ratio": 27, "dataset_dict": 27, "include_lb_to_ulb": 27, "train_lb_load": 27, "train_lb": 27, "train_ulb_load": 27, "train_ulb": 27, "eval_load": 27, "from_nam": 27, "tb_log": 27, "logger": [27, 141, 191], "valid": [27, 39, 53, 92, 97, 99, 101, 103, 104, 116, 119, 121, 127, 130, 138, 139, 144, 145, 148, 149, 172, 175, 191, 192, 195, 198, 225, 250, 253, 275, 276, 283], "87": [27, 97, 119, 182, 213, 225, 278], "lb_imb_ratio": 27, "ulb_imb_ratio": 27, "1500": [27, 139, 225], "ulb_num_label": 27, "3000": [27, 189, 195, 255], "kihyuk": 27, "sohn": 27, "et": [27, 53, 56, 79, 154, 176, 184], "al": [27, 53, 56, 79, 176, 184, 212], "yidong": 27, "audio_data_augmentation_tutori": [28, 30], "html": [28, 29, 30, 31, 32, 37, 48, 49, 53, 61, 66, 79, 80, 81, 82, 83, 84, 88, 96, 104, 107, 115, 120, 124, 127, 133, 157, 159, 167, 187, 190, 191, 194, 195, 196, 201, 224, 228, 229, 232, 233, 234, 235, 270, 273, 275, 277, 285], "audio_datasets_tutori": 29, "audio_feature_extractions_tutori": 31, "audio_io_tutori": 32, "frac": [34, 46, 67, 89, 94, 105, 106, 108, 111, 120, 130, 143, 149, 154, 178, 179, 199], "partial": [34, 46, 92, 94, 108, 121, 130, 138, 139, 140, 142, 143, 147, 155, 161, 214, 241, 260, 263], "leaf": [34, 46, 94, 122, 137, 193, 261], "retain_graph": [34, 147], "surround": [34, 172], "mark": [34, 53, 142, 147, 163, 179, 180, 195, 221, 276], "frozen": [34, 46, 140, 162, 278], "acycl": [34, 46, 130], "dag": [34, 130], "chain": [34, 46, 94, 102, 106, 107, 130, 140, 148, 160, 180, 276], "accumul": [34, 46, 50, 53, 56, 94, 97, 108, 130, 149, 162, 169, 179, 180, 181, 182, 224, 243], "vec": [34, 46, 94, 278], "langl": 34, "x_1": [34, 108, 166], "x_n": [34, 56], "rangl": 34, "y_1": [34, 108], "y_m": 34, "ccc": [34, 46, 94], "y_": [34, 46, 94, 105], "x_": [34, 46, 94], "cdot": [34, 46, 56, 94, 111, 130, 143], "vdot": [34, 46, 94], "ddot": [34, 46, 94], "v_1": 34, "v_m": 34, "life": [34, 104, 145, 146, 206], "autogradqs_tutori": [34, 37, 42, 81, 261], "compris": [35, 36, 56, 121], "fashionmnist": [35, 36, 38, 40, 44, 189], "mtia": [35, 40, 43, 66, 79, 102, 120, 127, 198], "neuralnetwork": 35, "dimension": [35, 43, 50, 52, 53, 56, 64, 76, 77, 94, 99, 101, 102, 104, 107, 108, 109, 111, 120, 142, 147, 163, 176, 183, 184, 189, 191, 196, 202, 209, 277], "minibatch": [35, 36, 101, 112, 145, 156, 171, 174], "28x28": [35, 112, 189, 227], "784": [35, 101, 112, 156, 189], "nonlinear": 35, "wide": [35, 64, 94, 99, 112, 141, 142, 145, 146, 154, 175, 184, 223, 240, 267], "phenomena": 35, "seq_modul": 35, "logit": [35, 39, 104, 213], "infti": [35, 179], "parameter": [35, 283], "preview": 35, "buildmodel_tutori": [35, 37, 42, 261], "messi": 36, "readabl": [36, 55, 95, 102, 105, 146, 188, 225, 239, 265], "primit": [36, 40, 120, 137, 142, 161, 172, 196, 199, 202, 265], "fashion": [36, 53, 101, 103, 116, 139, 142, 144, 181, 186, 189, 191, 193, 196, 214], "zalando": 36, "60": [36, 44, 97, 114, 139, 145, 146, 163, 177, 182, 184, 189, 195, 212, 213, 230], "grayscal": [36, 155, 162], "internet": [36, 177], "target_transform": [36, 40, 44], "training_data": [36, 109], "img_dir": 36, "csv": [36, 53, 55, 139], "annotations_fil": 36, "tshirt1": 36, "tshirt2": 36, "ankleboot999": 36, "decode_imag": 36, "img_label": 36, "reshuffl": 36, "overfit": [36, 97, 112, 121, 146], "train_featur": 36, "train_label": 36, "shuffl": [36, 40, 55, 59, 97, 103, 112, 138, 139, 154, 177, 181, 188, 189, 263], "data_tutori": [36, 37, 42, 261], "intro": [37, 38, 42, 59, 106, 107, 133, 155, 189, 205, 212, 261], "quickstart_tutori": [37, 40, 42, 261], "tensorqs_tutori": [37, 42, 43, 84, 261], "tensor_tutori": [37, 49, 51, 52, 61, 261], "transforms_tutori": [37, 42, 44, 261], "autograd_tutori": [37, 46, 49, 51, 61, 261], "optimization_tutori": [37, 39, 42, 261], "saveloadrun_tutori": [37, 41, 42, 261], "sphx_glr_beginner_basics_autogradqs_tutori": [37, 42, 261], "sphx_glr_beginner_basics_buildmodel_tutori": [37, 42, 261], "sphx_glr_beginner_basics_intro": [37, 42, 261], "sphx_glr_beginner_basics_saveloadrun_tutori": [37, 42, 261], "sphx_glr_beginner_basics_optimization_tutori": [37, 42, 261], "sphx_glr_beginner_basics_data_tutori": [37, 42, 261], "sphx_glr_beginner_basics_quickstart_tutori": [37, 42, 261], "sphx_glr_beginner_basics_tensorqs_tutori": [37, 42, 261], "sphx_glr_beginner_basics_transforms_tutori": [37, 42, 261], "suraj": [38, 57, 58, 59, 60, 119, 150, 151, 162], "subramanian": [38, 57, 58, 59, 60, 119, 150, 151, 162], "juarez": 38, "cassi": 38, "breviu": 38, "dmitri": 38, "soshnikov": 38, "ari": 38, "bornstein": 38, "ml": [38, 79, 102, 104, 133, 137, 144, 196, 212, 213], "belong": [38, 145, 196], "shirt": [38, 189], "trouser": [38, 189], "pullov": [38, 189], "dress": [38, 189], "coat": [38, 189], "sandal": [38, 189], "sneaker": [38, 189], "ankl": [38, 189], "boot": [38, 177, 189], "cloud": [38, 58, 98, 112, 114, 258], "open": [38, 40, 54, 92, 95, 97, 98, 101, 103, 111, 114, 116, 137, 139, 154, 156, 159, 169, 171, 184, 188, 191, 199, 214, 215, 221, 269], "favorit": [38, 98, 154, 159], "id": [38, 86, 98, 147, 152, 170, 180, 181, 182, 191, 195, 196, 206, 207, 212, 258, 283], "walkthrough": [39, 46, 52, 86, 119], "video": [39, 46, 47, 57, 59, 60, 94, 95, 97, 99, 101, 102, 103, 124, 132, 133, 134, 135, 137, 150, 151, 188, 201], "3blue1brown": [39, 46], "unpredict": [39, 94, 152], "jump": [39, 79, 109, 113, 114, 116, 117, 162, 250], "untrain": 39, "degre": [39, 67, 99, 120, 144, 184, 188, 263, 277], "dissimilar": [39, 102, 111], "regress": [39, 112, 186, 225, 238], "nllloss": [39, 106], "classif": [39, 47, 56, 79, 92, 95, 97, 102, 103, 104, 106, 127, 134, 137, 138, 146, 177, 186, 198, 199, 243], "logsoftmax": 39, "deposit": [39, 46], "train_loop": 39, "test_loop": 39, "warmstart": [39, 228, 236, 260, 261], "torchtext": [40, 54, 97, 103, 137], "torchaudio": [40, 54, 97, 103, 134, 137, 139, 177, 188, 267], "cifar": [40, 47, 97, 189], "coco": [40, 198], "conduct": [40, 95, 160, 175, 267], "unpickl": [41, 121, 265], "inferenc": 41, "fail": [41, 94, 102, 113, 121, 130, 160, 172, 177, 179, 183, 193, 195, 224, 255, 265, 282, 287], "inconsist": [41, 121, 160], "legaci": [41, 114, 141], "checkpoint": [41, 53, 92, 140, 150, 169, 174, 214, 224, 228, 236, 242, 260, 261, 266, 267], "tip": [41, 56, 98, 111, 189, 228, 236, 260, 261], "04": [42, 97, 188, 213, 225, 261, 269], "386": [42, 160, 182, 230], "371": [42, 44, 261], "ndarrai": [43, 44, 52, 102, 191], "elimin": [43, 119, 148, 156, 160, 161, 177, 195, 199, 279, 282], "datatyp": [43, 52, 77, 97, 102, 119, 214, 224], "overridden": [43, 52, 155, 229], "1200": [43, 225], "manipul": [43, 44, 97, 101, 120, 130, 140, 159, 169, 200], "slice": [43, 52, 109, 112, 176, 199, 209, 214, 239, 279], "breez": [43, 52], "cat": [43, 47, 52, 95, 97, 105, 108, 160, 182, 184, 189, 198, 223], "subtli": [43, 52], "y1": [43, 198, 238], "y2": 43, "y3": 43, "wise": [43, 52, 79, 97, 102, 106, 142, 154, 160, 163, 166, 195, 196, 240, 254], "z1": [43, 160], "z2": 43, "z3": 43, "aggreg": [43, 46, 97, 119, 162, 191, 230, 275], "operand": [43, 94, 195], "denot": [43, 106, 109, 196, 274, 275, 279], "suffix": [43, 52, 86, 130, 160], "t_": [43, 52], "problemat": [43, 52, 160, 170, 240], "accept": [44, 71, 92, 94, 104, 109, 120, 142, 144, 158, 161, 166, 171, 172, 178, 181, 188, 191, 213, 230, 240, 262, 286], "commonli": [44, 53, 73, 92, 99, 104, 120, 174, 177, 184, 188, 231, 240, 245, 262], "hot": [44, 53, 79, 99, 111, 145, 146, 155, 184], "scatter_": [44, 180], "26": [44, 97, 160, 162, 163, 177, 182, 212, 213], "4m": 44, "5k": 44, "12": [44, 97, 108, 119, 122, 138, 139, 160, 180, 189, 212, 213, 225, 262, 267, 283], "362kb": 44, "229k": 44, "38": [44, 97, 119, 182, 212, 213, 239], "680kb": 44, "885k": 44, "02mb": 44, "51m": 44, "02": [44, 56, 97, 160, 182, 213, 269], "73mb": 44, "68m": 44, "7mb": 44, "21": [44, 108, 119, 177, 212, 213, 225, 230, 239], "9mb": [44, 97], "9m": [44, 97], "8mb": [44, 97], "2mb": [44, 97], "94": [44, 144, 213, 230], "7m": [44, 97], "6mb": [44, 97], "3mb": [44, 97], "29": [44, 177, 182, 225], "326kb": 44, "42m": 44, "363kb": 44, "197k": 44, "07": [44, 97, 119, 139, 170, 213, 230, 239], "577kb": 44, "819k": 44, "89mb": 44, "28m": [44, 267], "51mb": 44, "10mb": 44, "15k": 44, "floattensor": [44, 102], "intens": [44, 89, 160, 172, 202, 258], "prop": 46, "proportion": [46, 169], "travers": [46, 182], "resnet18": [46, 163, 177, 188, 191, 215, 254, 281], "height": [46, 50, 99, 102, 191, 192, 198, 221, 255], "3a": [46, 177], "9a": 46, "dq": [46, 215], "bf": 46, "external_grad": 46, "blue": [46, 139, 142, 221], "finetun": [46, 134, 137, 143, 169, 185, 261], "unfrozen": 46, "exclusionari": 46, "revers": [46, 53, 94, 140, 158, 166, 170, 177, 184, 196], "autodiff": [46, 132, 137, 161], "pillow": [47, 97], "opencv": 47, "librosa": 47, "cython": 47, "nltk": 47, "spaci": 47, "viz": [47, 95], "huge": [47, 106, 111, 120, 142, 152, 155], "airplan": [47, 97, 104], "automobil": [47, 97, 104], "bird": [47, 97], "deer": [47, 97], "dog": [47, 97, 104, 198, 223], "frog": [47, 97], "hors": [47, 97], "truck": [47, 97, 104], "3x32x32": 47, "32x32": [47, 50, 97, 104, 114, 189], "extrem": [47, 111, 163, 196, 200], "pilimag": 47, "brokenpipeerror": 47, "fun": [47, 53, 113, 114, 116, 117, 178], "entropi": [47, 56, 97, 99, 103, 142, 243], "learnt": 47, "truth": [47, 79, 114, 198, 287], "okai": 47, "wasn": [47, 105, 108, 195], "energi": [47, 53], "chanc": [47, 53, 104, 162], "hmmm": 47, "massiv": [47, 108, 111, 196, 214], "plai": [47, 53, 56, 104, 106, 134, 137, 178, 185, 258, 261], "art": [47, 56, 95, 97, 99, 176, 223], "recurr": [47, 53, 105, 109, 134, 137, 145, 146, 167, 170, 184, 185, 200, 261], "lstm": [47, 53, 99, 107, 110, 145, 146, 182, 261], "chat": [47, 53, 184], "cifar10_tutori": [47, 49, 51, 61, 261], "sung": 48, "kim": 48, "jenni": 48, "kang": 48, "mytensor": 48, "my_tensor": [48, 121], "rewrit": [48, 147, 170, 195, 286], "parallelli": 48, "getitem": 48, "demo": [48, 137, 175, 188, 213], "cnn": [48, 104, 134, 137, 166, 170, 171, 186, 191, 198, 214], "rnn": [48, 53, 99, 137, 155, 167, 170, 181, 184, 185, 240, 261], "capsul": 48, "monitor": [48, 112, 154], "output_s": [48, 265], "former_torchi": 48, "parallelism_tutori": 48, "data_parallel_tutori": [48, 49, 51, 83, 261], "neural_networks_tutori": [49, 50, 51, 61, 261], "gentl": [49, 51, 60, 61, 130, 133, 200, 261], "glimps": 50, "convnet": [50, 95, 155, 162, 181], "learning_r": [50, 104], "lenet": [50, 79, 97, 101, 103, 176], "mini": [50, 53, 56, 97, 101, 109, 112, 171, 177, 189], "4d": [50, 163], "nsampl": 50, "nchannel": 50, "least": [50, 79, 102, 121, 130, 144, 146, 152, 162, 172, 177, 184, 195, 207, 225, 259], "clear": [50, 55, 79, 94, 105, 106, 111, 143, 147, 160, 172, 182, 191, 192, 212, 225, 268, 276], "sub_": 50, "nesterov": [50, 121], "blitz": [51, 83, 114, 145, 146, 184, 189, 261], "matthew": [53, 91, 121], "inkawhich": [53, 56, 79, 89, 91, 121], "movi": [53, 54, 95], "cornel": [53, 54], "dialog": [53, 54], "corpu": [53, 54], "artifici": [53, 104, 227], "intellig": 53, "servic": [53, 177, 214, 245, 258], "onlin": [53, 155, 162, 178, 181], "helpdesk": 53, "bot": 53, "predefin": [53, 104, 112, 155, 215, 240], "restrict": [53, 89, 154, 188, 193, 195, 262, 286], "compani": 53, "IT": 53, "teach": [53, 56, 104, 184], "human": [53, 79, 95, 146, 162, 184, 191, 265], "recent": [53, 109, 119, 141, 142, 154, 160, 166, 170, 179, 188, 255, 258], "boom": 53, "hello": [53, 106, 169], "am": [53, 108, 146, 184], "hospit": 53, "lawyer": 53, "friend": [53, 169], "arrest": 53, "kid": 53, "sorri": 53, "san": 53, "francisco": [53, 112], "goodby": 53, "luong": [53, 184], "jointli": [53, 184], "acknowledg": [53, 154], "borrow": [53, 182], "yuan": 53, "kuei": 53, "wu": [53, 141, 263, 268, 278], "ywk991112": 53, "sean": [53, 145, 146, 184], "robertson": [53, 145, 146, 184], "translat": [53, 114, 116, 117, 137, 145, 146, 166, 167, 185, 240, 255, 261, 276], "spro": 53, "floydhub": 53, "textutil": 53, "__": [53, 66, 79, 104, 120, 127, 191, 196], "reformat": 53, "rich": [53, 221], "charact": [53, 111, 137, 150, 167, 178, 184, 185, 261], "220": [53, 182], "579": [53, 163], "exchang": [53, 114, 116, 139, 154, 184, 188], "292": [53, 92], "035": 53, "617": 53, "304": 53, "713": [53, 97], "utter": [53, 54], "divers": 53, "great": [53, 114, 120, 121, 225, 242, 276], "variat": [53, 103, 112, 149, 199, 225, 239, 274], "formal": [53, 207, 274], "sentiment": 53, "hope": [53, 162, 169, 193, 199, 213], "datafil": 53, "nice": [53, 112, 169, 171, 195, 196, 199], "tab": [53, 101, 103, 184, 189, 221], "sentenc": [53, 99, 105, 106, 109, 111, 146, 154, 184, 199, 279], "pars": [53, 55, 111, 138, 139, 144, 225, 265], "jsonl": [53, 54], "loadlinesandconvers": 53, "lineid": 53, "characterid": 53, "conversationid": 53, "movieid": 53, "extractsentencepair": 53, "formatted_movie_lin": 53, "unescap": 53, "delimit": 53, "busi": [53, 146, 258], "vocabulari": [53, 97, 99, 111, 142, 145, 240, 279], "implicit": [53, 94, 140, 195, 221, 240], "discret": [53, 214], "voc": 53, "addword": 53, "addsent": 53, "infrequ": 53, "unicod": [53, 145, 146, 184], "ascii": [53, 111, 145, 146, 184], "unicodetoascii": 53, "letter": [53, 145, 146, 184], "lowercas": [53, 112, 184], "punctuat": [53, 184], "normalizestr": 53, "aid": [53, 121, 196, 229], "max_length": [53, 283], "filterpair": 53, "stackoverflow": [53, 145, 146, 184, 225], "518232": [53, 145, 146, 184], "2809427": [53, 145, 146, 184], "tactic": 53, "benefici": [53, 99, 133, 179, 240, 243, 244, 258, 278, 282], "soften": 53, "difficulti": [53, 178, 200], "approxim": [53, 95, 139, 148, 159, 162, 166, 176, 179, 213, 227, 240], "min_count": 53, "massag": 53, "accommod": 53, "shorter": [53, 55, 112, 184, 188, 274], "eos_token": 53, "english": [53, 106, 109, 145, 167, 184], "indexesfromsent": 53, "zeropad": 53, "inputvar": 53, "outputvar": 53, "pad_token": 53, "batch2traindata": 53, "bunch": [53, 145, 146, 221, 254], "aforement": [53, 86, 104, 199, 215, 250], "brain": 53, "sutskev": 53, "discov": [53, 117, 154, 181, 199, 282], "accomplish": [53, 56, 145, 154, 166, 209, 225, 239], "hidden": [53, 95, 99, 104, 105, 109, 112, 142, 144, 145, 146, 155, 182, 183, 184, 192, 223], "jeddy92": 53, "io": [53, 55, 101, 137, 180, 183, 191], "ts_seq2seq_intro": 53, "gate": [53, 99, 199, 237], "invent": [53, 56, 178], "cho": 53, "2014": [53, 56], "bidirect": [53, 155], "variant": [53, 97, 99, 101, 103, 142, 148, 177, 183, 196, 199, 212, 263], "gru": [53, 99, 145, 146, 184], "colah": 53, "2015": [53, 104], "fp": [53, 92, 135, 166], "hidden_s": 53, "pack": [53, 160, 178, 180, 182, 278], "unpack": 53, "pack_padded_sequ": 53, "pad_packed_sequ": 53, "input_seq": 53, "input_length": [53, 139], "n_layer": [53, 174], "num_direct": 53, "sole": [53, 188], "combat": [53, 111], "bahdanau": [53, 184], "groundwork": 53, "knowledg": [53, 56, 79, 106, 107, 122, 124, 130, 132, 137, 160, 162, 200, 261], "h_t": [53, 109], "attn": [53, 184], "softmax": [53, 99, 104, 109, 111, 112, 145, 177, 180, 182, 189, 199, 213, 279], "submodul": [53, 89, 99, 113, 140, 170, 183, 282], "unidirect": 53, "input_step": 53, "last_hidden": 53, "encoder_output": 53, "num_word": 53, "masknllloss": 53, "clever": [53, 106], "teacher": [53, 104, 132, 137, 184], "teacher_forcing_ratio": [53, 184], "instabl": [53, 184], "craft": [53, 79, 111, 146], "explod": [53, 99, 200], "essenc": [53, 108], "exponenti": [53, 94, 102, 106, 108, 170, 179, 267], "nan": [53, 212, 275], "overshoot": 53, "steep": 53, "cliff": 53, "goodfellow": [53, 56, 79], "2016": 53, "www": [53, 184, 198], "deeplearningbook": 53, "sos_token": 53, "realiti": [53, 56, 79, 108, 112, 183, 239], "tie": 53, "trainit": [53, 184], "n_iter": 53, "explanatori": 53, "lift": [53, 244, 286], "tarbal": 53, "NOT": [53, 89, 121, 147, 149, 150, 152, 169], "decoder_output": 53, "greedysearchdecod": 53, "searcher": 53, "evaluateinput": 53, "press": [53, 56], "gracefulli": [53, 57, 181, 207], "prompt": [53, 54, 255, 267], "regardless": [53, 102, 103, 161, 172, 181, 192], "attn_model": 53, "concat": [53, 108], "loadfilenam": 53, "save_dir": [53, 191], "model_nam": [53, 139, 214, 215, 281, 283], "corpus_nam": [53, 54], "encoder_n_lay": 53, "decoder_n_lay": 53, "_checkpoint": [53, 139], "tar": [53, 121], "checkpoint_it": 53, "folk": 53, "congratul": [53, 117, 143, 145, 196, 227, 241, 242, 243], "fundament": [53, 96, 99, 108, 111, 120, 137, 162, 172, 195, 196, 201, 207, 239, 275], "tailor": [53, 154, 172, 196, 258], "cool": [53, 56, 169, 171, 286], "003": [53, 56, 89, 90, 100, 101, 103, 104, 106, 110, 122, 160, 172, 183, 185, 193, 195, 199, 261], "chatbot_tutori": [53, 122, 261], "wen": [54, 193, 195, 253], "uninstal": 54, "reinstal": 54, "torchdata": 54, "chatbot": [54, 122, 261], "browser": [54, 101, 103, 114, 188, 208], "click": [54, 101, 112, 114, 188, 189, 196, 221], "subfold": 54, "visit": [54, 130, 200, 267], "in_": 54, "_colab": 54, "_name": 54, "mount": [54, 265], "gdrive": 54, "my": [54, 105, 111, 199], "upload": [54, 208], "cell": [54, 94, 95, 97, 99, 102, 103, 119, 172, 179, 183, 191, 196, 240, 267], "button": [54, 56, 114, 188, 221], "rerun": [54, 130, 147, 169], "evolv": [54, 160, 166], "drop": [54, 99, 101, 114, 150, 169, 182, 213, 267], "t4": 54, "sasank": [55, 127], "chilamkurthi": [55, 127], "preprocess": [55, 104, 112, 137, 145, 184, 191], "scikit": 55, "facial": 55, "pose": [55, 208, 209], "landmark": 55, "dlib": 55, "tag": [55, 99, 107, 111, 195, 229, 238, 266], "image_nam": 55, "part_0_x": 55, "part_0_i": 55, "part_1_x": 55, "part_1_i": 55, "part_2_x": 55, "part_67_x": 55, "part_67_i": 55, "0805personali01": 55, "83": [55, 97, 213, 239], "98": [55, 160, 182, 213], "84": [55, 97, 119, 121, 162, 189], "134": 55, "1084239450_e76e00b7e7": 55, "70": [55, 97, 163, 182, 212, 225, 283], "236": 55, "257": [55, 225], "312": [55, 163, 255], "person": [55, 196, 198], "img_nam": 55, "__len__": [55, 112, 145, 154, 198], "__getitem__": [55, 112, 145, 154, 198], "randomcrop": 55, "crop": [55, 97, 144, 186, 198], "ax": [55, 106, 109, 135, 137, 184, 185, 189, 261], "tsfm": 55, "transformed_sampl": 55, "safer": [55, 225], "stick": [55, 154, 163], "randint": [55, 56, 140, 156, 174, 214], "lose": [55, 57, 102, 104, 162], "collate_fn": 55, "indent": [55, 225], "imagefold": [55, 56, 97], "ant": [55, 127], "xxy": 55, "jpeg": 55, "xxz": 55, "bee": [55, 127], "nsdf3": 55, "asd932_": 55, "data_transform": 55, "hymenoptera_dataset": 55, "hymenoptera_data": 55, "dataset_load": 55, "data_loading_tutori": [55, 122, 261], "nathan": [56, 79, 89, 91], "celebr": [56, 134, 137], "pictur": [56, 79, 140, 142, 184], "thorough": 56, "shed": [56, 223], "spend": [56, 86, 169, 225, 230], "sake": [56, 155, 176, 179, 241, 242], "ian": 56, "constantli": [56, 79, 179], "outsmart": 56, "equilibrium": 56, "perfect": [56, 94, 152, 201, 276], "notat": [56, 79], "chw": [56, 177], "3x64x64": 56, "thought": [56, 87, 239, 275], "latent": [56, 111], "p_": 56, "p_g": 56, "minimax": 56, "logd": 56, "underset": 56, "mathbb": [56, 89, 166, 179], "sim": 56, "big": [56, 99, 105, 111, 120, 140, 146, 156, 169, 178, 184, 191], "radford": 56, "unsupervis": 56, "drawn": [56, 112, 178], "rgb": [56, 97, 104, 162, 177, 191], "volum": [56, 138], "inlin": [56, 94, 97, 101, 103, 147, 160, 192, 245, 274, 278], "manualse": 56, "10000": [56, 97, 174, 182, 225, 239], "dataroot": 56, "image_s": [56, 255], "spatial": [56, 95, 97, 99, 134, 137, 185, 192, 198, 261], "64x64": 56, "nc": [56, 278], "nz": 56, "ngf": 56, "ndf": 56, "num_epoch": 56, "0002": 56, "ngpu": 56, "celeb": 56, "img_align_celeba": 56, "celeba": 56, "188242": 56, "173822": 56, "284702": 56, "537394": 56, "subdirectori": [56, 198], "stdev": 56, "weights_init": 56, "reiniti": 56, "criteria": 56, "netg": 56, "netd": 56, "worth": [56, 169, 172, 181], "critic": [56, 89, 140, 151, 172, 206, 239, 263], "contribut": [56, 64, 86, 95, 102, 163, 188], "batchnorm": [56, 59, 121, 163, 192, 200, 240, 242, 281], "downsampl": [56, 97, 162], "promot": 56, "healthi": 56, "bceloss": 56, "ell": [56, 184], "l_1": 56, "l_n": 56, "quad": [56, 179], "y_n": 56, "bce": 56, "gt": [56, 119], "fixed_nois": 56, "establish": 56, "Be": [56, 94], "somewhat": [56, 172], "collaps": 56, "ganhack": 56, "secondli": 56, "loss_d": 56, "loss_g": 56, "versu": [56, 79, 137, 145, 202], "anim": [56, 97], "music": 56, "dcgan_faces_tutori": [56, 122, 261], "mingpt": [57, 58, 59, 60, 150, 151], "aw": [57, 59, 138, 150, 151, 260], "p3": [57, 58, 59, 67, 120, 150, 151], "8xlarg": [57, 59], "youtub": [57, 58, 59, 60, 94, 95, 97, 99, 101, 102, 103, 137, 150, 151, 201], "failur": [57, 113, 151, 152, 160, 195, 205, 255, 265], "disrupt": [57, 253, 265], "suscept": [57, 209], "elast": [57, 139, 152, 209], "attempt": [57, 94, 102, 106, 139, 172, 195, 202, 229, 253, 265], "minutia": 57, "multinod": [57, 150, 196], "load_snapshot": 57, "snapshot_path": 57, "train_step": 57, "should_checkpoint": 57, "save_snapshot": 57, "membership": [57, 151], "intervent": [57, 104, 250], "multigpu": [57, 59, 151], "multigpu_torchrun": 57, "envvari": 57, "ddp_setup": [57, 59], "12355": [57, 59, 138, 152, 206, 207], "local_rank": [57, 139, 151, 152, 174, 265], "gpu_id": [57, 59, 151], "_save_snapshot": 57, "model_st": 57, "epochs_run": 57, "_load_snapshot": 57, "max_epoch": 57, "_run_epoch": [57, 59], "total_epoch": [57, 59], "argv": [57, 59, 214], "save_everi": [57, 59], "nproc_per_nod": [57, 139, 140, 152, 174, 209, 265], "migrat": [57, 59, 240], "fault": [58, 59, 60, 92, 150, 151, 172], "toler": [58, 59, 60, 92, 94, 150, 151], "deploi": [58, 114, 131, 137, 144, 151, 176, 177], "cluster": [58, 101, 139, 144, 150, 151, 152, 154, 207, 209, 249], "torchrun": [58, 64, 139, 140, 150, 151, 174, 209, 263, 265], "amazon": 58, "ec2": [58, 138], "gentli": 58, "gpt": [58, 138, 150, 151, 174], "stat": [59, 139, 147, 178, 188, 196, 230, 239], "replica": [59, 60, 64, 138, 140, 152, 154, 259], "convert_sync_batchnorm": 59, "single_gpu": 59, "mytraindataset": 59, "distributedsampl": [59, 60, 138, 139], "destroy_process_group": [59, 138, 139, 141, 152, 174, 206, 207, 263], "excess": [59, 86, 142, 193, 214, 224], "train_data": 59, "train_dataset": [59, 104, 139, 214, 248, 283], "set_epoch": [59, 138, 139], "b_sz": 59, "_run_batch": 59, "ckp": 59, "_save_checkpoint": 59, "load_train_obj": 59, "prepare_dataload": 59, "shorthand": 59, "ring": [60, 142, 263], "older": [60, 119, 120, 156, 171, 172, 179, 267], "destroi": [60, 94, 158], "soumith": [61, 154], "chintala": [61, 154], "scientif": [61, 99, 102, 120], "mobil": [62, 63, 104, 203, 219, 220, 228, 262, 269, 271, 272, 280], "executorch": [62, 63, 137, 203, 217, 218, 219, 220, 222, 255, 271, 272, 280, 285], "Will": [64, 140, 192], "constabl": [64, 140], "wei": [64, 140], "feng": [64, 140, 162, 175, 192], "categor": [64, 86, 101, 155, 180, 182, 196], "navig": [64, 188, 189, 221], "technologi": [64, 104, 137, 154, 199, 260], "infrastructur": 64, "fsdp2": [64, 137, 138], "tp": [64, 209, 265], "pp": 64, "dtensor": [64, 142, 208, 260], "devicemesh": [64, 142, 260], "reshard": [64, 140, 207], "mesh": [64, 133, 140, 142, 209], "recip": [64, 119, 133, 137, 201, 204, 208, 212, 221, 223, 224, 225, 226, 227, 229, 230, 236, 237, 241, 242, 243, 244, 245, 247, 249, 250, 251, 252, 253, 254, 255, 259, 261, 273], "c10d": [64, 152, 175, 240, 265], "all_gath": [64, 138, 139, 154, 175], "p2p": 64, "isend": [64, 154], "guidelin": [64, 240], "fullyshardeddataparallel": [64, 138, 139, 140, 206, 207], "torchtitan": [64, 174, 263], "polynomi": [66, 67, 69, 71, 72, 73, 76, 77, 120], "pi": [66, 67, 71, 72, 73, 76, 77, 94, 120, 135, 179], "euclidean": [66, 67, 71, 72, 73, 76, 77, 94, 104, 120], "polynomial_autograd": [66, 68, 261], "bx": [67, 120], "cx": [67, 106, 120], "p_3": [67, 120], "5x": [67, 120], "legendr": [67, 120], "polynomial_custom_funct": [67, 68, 261], "examples_autograd": [68, 261], "strang": [69, 89, 120], "fifth": [69, 120], "tough": [69, 120], "dynamic_net": [69, 74, 261], "polynomial3": [71, 120], "linspac": [71, 94, 120], "2000": [71, 72, 97, 104, 120, 189, 191, 195, 225, 259, 265], "1e": [71, 92, 99, 120, 140, 148, 156, 180, 182, 212, 262, 263, 283], "y_pred": [71, 120, 130, 213], "99": [71, 97, 120, 182], "polynomial_modul": [71, 74, 261], "flaten": [72, 120], "1d": [72, 99, 120, 240, 286], "mse": [72, 99, 104, 120, 130], "polynomial_nn": [72, 74, 261], "polynomial_optim": [73, 74, 261], "examples_nn": [74, 261], "polynomial_numpi": [76, 78, 261], "biggest": [77, 265], "polynomial_tensor": [77, 78, 261], "004": 78, "examples_tensor": [78, 261], "appreci": [79, 105], "overlook": [79, 225], "secur": [79, 188], "vulner": 79, "surpris": [79, 170], "impercept": 79, "perturb": [79, 95], "drastic": [79, 195, 244, 254], "overarch": 79, "misclassif": 79, "alter": [79, 121, 231, 242, 267], "har": 79, "remark": [79, 193], "mathbf": [79, 130], "nabla_": [79, 106], "007": [79, 118], "misclassifi": 79, "gibbon": 79, "clearli": [79, 144, 265, 274, 275], "pretrained_model": [79, 191], "fgsm_attack": 79, "clean": [79, 138, 139, 145, 152, 169, 174, 196, 263, 274], "data_grad": 79, "_imag": 79, "_grad": 79, "strength": [79, 189], "_data": 79, "trend": [79, 87, 188], "curv": [79, 188, 189], "linearli": 79, "05": [79, 97, 139, 182, 213, 262], "lunch": 79, "BUT": [79, 108], "percept": 79, "tradeoff": [79, 135, 137, 143, 144, 154, 178, 245], "titl": [79, 145, 172, 184, 191], "evid": [79, 141], "subsequ": [79, 95, 104, 121, 130, 138, 145, 155, 180, 182, 184, 193, 240, 243, 249, 258, 265, 267], "defend": 79, "nip": 79, "defens": 79, "competit": [79, 156, 171, 258], "defenc": 79, "dirti": 79, "fgsm_tutori": [79, 122, 261], "torchvision_tutori": [80, 185, 198, 261], "nn_tutori": [82, 112, 122, 261], "anupam": [86, 87], "bhatnagar": [86, 87], "offici": [86, 117, 141, 154, 179, 193, 195, 214, 215], "holistictraceanalysi": 86, "env_nam": [86, 178], "deactiv": 86, "trace_dir": 86, "trace_analysi": 86, "traceanalysi": 86, "primarili": [86, 181, 193, 208, 224, 240], "engag": [86, 287], "datafram": [86, 144, 191], "time_spent_df": 86, "get_temporal_breakdown": 86, "enqueu": 86, "ineffici": [86, 279], "slowdown": [86, 139, 143], "consecut": [86, 146, 155, 162, 172, 177, 191, 258], "insuffici": [86, 179], "delai": [86, 152, 180, 196], "stall": [86, 258, 265], "gap": [86, 89], "nanosecond": 86, "consecutive_kernel_delai": 86, "get_idle_time_breakdown": 86, "idle_time_df": 86, "show_idle_interval_stat": 86, "percentag": [86, 176, 279], "visualize_pctg": 86, "comm": 86, "comp": 86, "proport": [86, 169], "pie": [86, 169], "chart": [86, 101, 252], "kernel_type_metrics_df": 86, "kernel_metrics_df": 86, "get_gpu_kernel_breakdown": 86, "bottleneck": [86, 119, 139, 142, 151, 169, 172, 180, 188, 193, 204, 221], "plotli": [86, 95, 144], "hover": [86, 144, 177], "pan": 86, "num_kernel": [86, 212], "duration_ratio": 86, "preced": [86, 94, 102, 148, 155, 192, 281], "lab": [86, 189], "image_render": 86, "jupyterlab": 86, "gpu_kernel_breakdown": 86, "tflop": 86, "oversubscrib": 86, "unresolv": [86, 276], "extent": [86, 102], "overlap_df": 86, "get_comm_comp_overlap": 86, "h2d": 86, "d2h": 86, "d2d": 86, "memcpi": 86, "memset": 86, "outstand": 86, "generate_trace_with_count": 86, "_with_count": 86, "screenshot": [86, 221], "profil": [86, 122, 131, 132, 135, 137, 138, 172, 183, 185, 213, 225, 228, 236, 240, 260, 261, 278], "get_memory_bw_summari": 86, "get_queue_length_summari": 86, "get_memory_bw_time_seri": 86, "get_queue_length_time_seri": 86, "mem_bw_summari": 86, "queue_len_summari": 86, "mem_bw_seri": 86, "queue_len_seri": 86, "get_queue_length_seri": 86, "25th": 86, "50th": 86, "75th": 86, "percentil": 86, "cudalaunchkernel": 86, "cudamemcpyasync": 86, "cudamemsetasync": 86, "kernel_info_df": 86, "get_cuda_kernel_launch_stat": 86, "short": [86, 99, 102, 105, 107, 110, 133, 146, 154, 170, 172, 178, 184, 186, 195, 240, 243, 261], "outlier": [86, 179], "microsecond": [86, 161, 183, 225], "cutoff": 86, "runtime_cutoff": 86, "launch_delay_cutoff": 86, "occasion": [87, 181, 184], "hta": [87, 188], "tracediff": 87, "cumul": [87, 179], "compare_trac": 87, "durat": [87, 175, 179, 188, 265], "ops_diff": 87, "absent": 87, "visualize_counts_diff": 87, "visualize_duration_diff": 87, "ten": [87, 97, 101, 104], "df": 87, "compare_traces_output": 87, "sort_valu": 87, "diff_count": 87, "largest": [87, 112, 191], "diff_dur": 87, "differer": 87, "overshadow": 87, "profilerstep": [87, 160], "loc": [87, 178, 224], "trace_diff_demo": 87, "learning_hybrid_frontend_through_example_tutori": [88, 89, 90, 261], "hybrid_frontend": [88, 90, 261], "introduction_to_hybrid_frontend_tutori": 88, "shini": 89, "eas": [89, 102, 103, 139, 199, 214, 229, 260], "enjoi": [89, 162], "aquaint": 89, "opportun": [89, 114, 155, 196], "bridg": [89, 208], "refin": [89, 195], "gradual": [89, 169], "proven": [89, 277], "resouc": 89, "consumpt": [89, 97, 99, 101, 103, 119, 139, 142, 144, 160, 172, 176, 188, 240, 259, 260], "discrep": [89, 281], "interwork": 89, "intrus": [89, 169], "decor": [89, 94, 117, 133, 147, 162, 180, 193, 240, 253], "broken": [89, 108], "epsilon": [89, 148, 155, 178, 179], "biggl": 89, "lfloor": 89, "sqrt": [89, 112, 199, 212, 274], "prod_": 89, "biggr": 89, "rfloor": 89, "hline": 89, "190": [89, 182, 191, 225], "4377": 89, "59051": 89, "accomod": [89, 150], "script_method": 89, "tracedmodul": 89, "workaround": [89, 149, 158, 255], "onnx": [89, 118, 131, 137, 261], "dramat": [92, 112], "industri": [92, 95], "analysi": [92, 94, 103, 137, 138, 159, 160, 183, 188, 191, 195, 221, 239, 255, 263, 267], "slight": [92, 141, 149, 213, 226], "trial": [92, 144, 224], "train_cifar": 92, "l2": [92, 99, 176], "get_checkpoint": 92, "as_directori": 92, "checkpoint_dir": [92, 206, 207], "pkl": 92, "rb": 92, "checkpoint_st": 92, "start_epoch": 92, "net_state_dict": 92, "optimizer_state_dict": [92, 121, 206, 207, 214], "80": [92, 144, 145, 163, 182, 212, 255], "luckili": [92, 160, 195, 196, 225, 276], "trainload": [92, 97, 189], "fraction": [92, 225], "checkpoint_data": 92, "tempfil": [92, 152, 212], "temporarydirectori": 92, "wb": 92, "dump": [92, 160, 202, 208], "from_directori": 92, "val_loss": [92, 139], "val_step": 92, "wast": [92, 188, 225, 229, 231, 245, 279], "lastli": [92, 169, 195], "loguniform": [92, 225], "ashaschedul": 92, "functool": [92, 138, 139], "gpus_per_tri": 92, "resources_per_tri": 92, "num_sampl": [92, 139], "checkpoint_at_end": 92, "000668163": 92, "31479": 92, "0977": 92, "0331514": 92, "31605": 92, "0983": 92, "000150295": 92, "30755": 92, "1023": 92, "0128248": 92, "66912": 92, "4391": 92, "00464561": 92, "7316": 92, "3463": 92, "00031556": 92, "19409": 92, "1736": 92, "00574329": 92, "85679": 92, "3368": 92, "00325652": 92, "30272": 92, "0984": 92, "000342987": 92, "76044": 92, "003734": 92, "53101": 92, "4761": [92, 108], "0037339984519545164": 92, "5310075663924216": 92, "4737": 92, "hyperparameter_tuning_tutori": [92, 122, 261], "tensorboard": [94, 95, 96, 97, 98, 99, 102, 103, 135, 137, 144, 185, 228, 230, 236, 260, 261], "decis": [94, 107, 110, 155, 172, 195, 202, 240, 250, 256, 261, 274, 275, 277], "branch": [94, 113, 195, 198, 214], "rigidli": 94, "sign": [94, 170], "contextu": 94, "nudg": [94, 97, 103], "calculu": [94, 130], "next_funct": 94, "drill": [94, 239], "machineri": [94, 225], "took": [94, 154, 159, 169, 183, 193, 253, 265], "ins": [94, 193], "never": [94, 105, 106, 107, 111, 130, 143, 176, 186], "ideal_output": 94, "layer2": 94, "blow": 94, "b1": 94, "b2": 94, "temporarili": 94, "enable_grad": 94, "throw": [94, 102, 130, 141, 180], "sin_": 94, "handi": [94, 97, 112, 154, 162, 189], "bake": [94, 192], "chrome": [94, 172, 183, 188, 230], "imagin": [94, 102, 105, 111, 149, 154, 169, 170, 184, 196, 225, 237], "hessian": [94, 132, 137, 185, 261, 286], "twice": [94, 112, 149, 172, 213, 225, 230, 259, 267], "jvp": [94, 158, 161], "vjp": [94, 161, 166, 286], "vhp": [94, 132, 137, 185, 261], "hvp": [94, 132, 137, 185, 261], "autogradyt_tutori": [94, 96, 100, 261], "latin": 95, "increasingli": [95, 199], "ai": [95, 106, 107, 112, 138, 144, 162, 184, 202, 207, 214, 215, 223, 240, 265, 278], "review": [95, 150, 167, 195, 214, 245, 274, 275, 277, 282], "neuron": [95, 104, 223], "analag": 95, "ablat": 95, "permut": [95, 104, 163, 177, 191, 212], "valuabl": [95, 104, 184, 212, 279], "certainli": [95, 159, 275, 277], "attr": [95, 175, 202], "widget": 95, "toolset": 95, "flask": 95, "renam": [95, 262], "virtual": [95, 172, 175, 229, 269], "pull": [95, 102, 103, 159, 282], "recogn": [95, 99, 175, 192, 227], "224x224": [95, 177], "visualize_image_attr": 95, "integrated_gradi": 95, "strongest": [95, 97, 99, 103], "visualize_image_attr_multipl": 95, "heat": [95, 177], "upsampl": 95, "interpol": 95, "layerattribut": 95, "novel": [95, 263], "teapot": 95, "trilobit": 95, "fossil": 95, "dig": [95, 106, 183, 195], "attributionvisu": 95, "imagefeatur": 95, "heatmap": 95, "captumyt": [95, 100, 261], "introyt": [96, 100, 201, 261], "introyt1_tutori": [96, 97, 100, 261], "tensors_deeper_tutori": [96, 100, 102, 261], "modelsyt_tutori": [96, 99, 100, 261], "tensorboardyt_tutori": [96, 100, 101, 261], "trainingyt_tutori": 96, "captumyt_tutori": 96, "captum": [96, 228, 236, 260, 261], "sphx_glr_beginner_introyt_introyt_index": [96, 100, 261], "sphx_glr_beginner_introyt_modelsyt_tutori": [96, 100, 261], "sphx_glr_beginner_introyt_autogradyt_tutori": [96, 100, 261], "sphx_glr_beginner_introyt_tensors_deeper_tutori": [96, 100, 261], "sphx_glr_beginner_introyt_captumyt": [96, 100, 261], "sphx_glr_beginner_introyt_trainingyt": [96, 100, 261], "sphx_glr_beginner_introyt_tensorboardyt_tutori": [96, 100, 261], "sphx_glr_beginner_introyt_introyt1_tutori": [96, 100, 261], "03": [97, 181, 182, 191, 213, 239, 263], "5x3": 97, "int16": [97, 102], "helpfulli": 97, "prng": 97, "1729": 97, "r1": 97, "r2": 97, "na": [97, 185, 261], "r3": 97, "nshould": 97, "3126": [97, 108], "3791": 97, "3087": 97, "4216": 97, "0691": 97, "2332": 97, "4047": 97, "nabsolut": 97, "trigonometr": [97, 102], "ninvers": 97, "asin": 97, "singular": [97, 170, 183, 254], "decomposit": [97, 117, 140, 160], "ndetermin": 97, "det": [97, 170], "nsingular": 97, "svd": 97, "naverag": 97, "std_mean": 97, "nmaximum": 97, "9956": 97, "2232": 97, "6593": 97, "4775": 97, "2251": 97, "3961": 97, "7199": 97, "5703": 97, "return_typ": 97, "8353": 97, "5497": 97, "1793": 97, "4836": 97, "8851": 97, "4654": 97, "7217": 97, "diagram": [97, 179], "earliest": 97, "driver": [97, 188], "explos": 97, "handwritten": [97, 138], "abridg": 97, "c1": [97, 160], "s2": [97, 195], "c3": 97, "s4": [97, 195], "f5": 97, "f6": 97, "5x5": [97, 99], "affin": [97, 109, 130, 148, 186, 240, 258, 262], "wx": 97, "fc1": [97, 121, 138, 156, 181, 189], "fc2": [97, 121, 138, 156, 181, 189], "fc3": [97, 121, 156, 189], "num_flat_featur": 97, "num_featur": [97, 192], "artifact": [97, 150, 195, 244, 249, 250, 254], "nimag": 97, "nraw": 97, "in_featur": [97, 138, 170, 231, 262, 278, 283], "out_featur": [97, 138, 170, 262, 278, 283], "0898": 97, "0318": 97, "1485": 97, "0301": 97, "0085": 97, "1135": 97, "0296": 97, "0164": 97, "0039": 97, "0616": 97, "addmmbackward0": 97, "gist": 97, "tile": [97, 101, 103, 191, 202, 283], "hasn": 97, "shouldn": [97, 176], "4914": 97, "4822": 97, "4465": [97, 108], "2470": 97, "2435": 97, "2616": 97, "center": [97, 99, 103, 179, 188, 240], "concatdataset": 97, "trainset": [97, 189], "50000": 97, "rotat": [97, 101, 186, 189], "vehicl": [97, 182], "170m": [97, 213], "459k": 97, "40mb": 97, "36m": 97, "62m": 97, "05m": 97, "08": [97, 139, 160, 170, 182, 212, 213, 225, 254, 263], "90m": 97, "5m": 97, "8m": 97, "0m": 97, "4mb": 97, "42": [97, 179, 182, 212, 225], "33": [97, 177, 182, 185, 212, 213, 225], "39": [97, 138, 182, 199, 212, 213, 225], "3m": 97, "0mb": [97, 259], "52": [97, 163, 212, 213], "34": [97, 119, 156, 177, 213, 225, 230, 239], "55": [97, 163, 212, 225, 258], "6m": 97, "1mb": 97, "89": [97, 160, 182, 230], "103m": 97, "58": [97, 145, 163, 212, 283], "110m": 97, "116m": 97, "122m": 97, "75": [97, 104, 127, 138, 212], "128m": [97, 177], "135m": 97, "5mb": 97, "142m": 97, "149m": 97, "155m": 97, "95": [97, 144, 182, 213, 262], "162m": 97, "168m": 97, "51": [97, 163, 182, 212, 213], "filesystem": [97, 154, 266], "told": [97, 178], "plane": [97, 141], "car": 97, "unnorm": [97, 189], "npimg": [97, 189], "datait": [97, 189], "make_grid": [97, 189], "49473685": 97, "5632443": 97, "strip": [97, 239, 283], "testset": [97, 189], "testload": [97, 189], "ingredi": 97, "running_loss": [97, 189], "1999": 97, "5d": 97, "195": [97, 177, 182], "879": 97, "6000": 97, "656": [97, 160, 259], "8000": [97, 239], "576": [97, 99], "517": 97, "12000": 97, "461": [97, 163], "415": 97, "368": 97, "334": 97, "327": 97, "318": 97, "261": 97, "inner": [97, 172, 178], "235": [97, 119], "940": 97, "573": 97, "507": 97, "442": 97, "378": 97, "364": 97, "349": 97, "319": [97, 213, 230], "284": [97, 182], "267": 97, "monoton": 97, "descend": 97, "memor": 97, "roughli": [97, 105, 120, 139, 152, 160, 240], "664": [97, 100, 261], "brad": 98, "heintz": 98, "introyt_index": [98, 100, 201, 261], "lin": 99, "nearbi": 99, "lenet5": 99, "1x32x32": 99, "liken": 99, "3x5": 99, "presenc": [99, 193, 195, 223], "6x28x28": 99, "2x2": 99, "resolut": [99, 191], "6x14x14": 99, "sought": 99, "3x3": 99, "16x12x12": 99, "16x6x6": 99, "edg": [99, 114, 120, 137, 159, 188, 227, 255, 262], "instrument": [99, 159, 260], "dna": 99, "nucleotid": 99, "sort": [99, 105, 109, 119, 177, 199, 230, 240], "moder": 99, "beyond": [99, 102, 108, 175, 176, 240], "scope": [99, 102, 108, 119, 143, 147, 195, 221, 244, 245], "tagger": [99, 105], "noun": 99, "verb": 99, "vocab_s": [99, 140, 174, 214], "tagset_s": 99, "log_softmax": [99, 112, 138, 181], "decod": [99, 105, 139, 174, 182, 183, 199, 224, 255, 267], "transformerencod": [99, 199], "transformerdecod": [99, 199], "subcompon": [99, 193], "transformerencoderlay": [99, 183, 199], "transformerdecoderlay": [99, 174, 199], "twin": 99, "maxpool": 99, "quadrant": 99, "6x6": 99, "vanish": [99, 106, 200], "offset": [99, 196, 206, 266, 283], "neighborhood": 99, "sometim": [99, 102, 120, 143, 149, 151, 152, 155, 161, 179, 182, 184, 195, 240, 267, 276, 277], "suffer": [99, 188], "steepest": 99, "feasibl": [99, 138, 140], "hardtanh": 99, "676": 100, "trainingyt": [100, 103, 261], "garment": 101, "tb": [101, 255], "gfile": 101, "tensorflow_stub": 101, "grid": [101, 103, 112, 127, 186, 189, 268], "add_imag": [101, 189], "summarywrit": [101, 189, 238], "flush": [101, 224, 238], "log_dir": [101, 144, 189], "logdir": [101, 188, 189, 238], "6006": [101, 188, 189, 238], "efficaci": 101, "add_graph": [101, 189], "add_embed": [101, 189], "projector": 101, "toggl": [101, 259, 266], "night": [101, 189], "icon": 101, "dark": [101, 191], "upack": 102, "attach": [102, 179, 200, 258], "terminologi": [102, 108], "likewis": [102, 169], "assur": [102, 172], "random1": 102, "random3": 102, "random2": 102, "random4": 102, "rng": [102, 154], "_like": [102, 163], "zeros_lik": [102, 180], "rand_lik": [102, 170], "cue": 102, "intent": [102, 207, 275], "subtract": [102, 104, 240], "2x4": 102, "1x4": 102, "honor": 102, "3rd": [102, 140, 147, 202, 214], "2nd": [102, 109, 140, 147, 181], "hundr": [102, 133, 142, 191, 196], "bitwis": [102, 224], "inventori": [102, 103], "occupi": [102, 221], "discard": [102, 138, 139, 188, 230, 239], "underscor": 102, "deepli": 102, "nor": [102, 154, 258, 262, 274], "mid": 102, "someplac": 102, "ram": [102, 139, 172, 196, 229], "colloqui": 102, "fragil": 102, "robustli": [102, 116], "whichev": 102, "acquir": [102, 121, 176, 178, 182], "thrown": [102, 277], "226": 102, "zeroth": 102, "bracket": [102, 262], "rescu": 102, "squeeze_": 102, "unsqueeze_": 102, "radic": 102, "parenthes": 102, "comma": 102, "convinc": [102, 169], "kinship": 102, "autom": [103, 120, 144, 159, 163, 191], "outcom": [103, 144, 265], "saniti": [103, 130, 144, 178, 191], "nb": [103, 286], "chose": [103, 177], "saved_model": 103, "garmentclassifi": 103, "alexandro": 104, "chariton": 104, "computation": [104, 191], "lightweight": [104, 132, 137, 176, 224], "drone": 104, "phone": [104, 114], "4gb": [104, 169, 177], "3072": [104, 283], "satur": [104, 224], "held": [104, 145, 181], "greedi": [104, 155, 179], "num_images_to_keep": 104, "50_000": 104, "test_dataset": 104, "10_000": 104, "extractor": [104, 191], "emploi": [104, 184, 188, 199, 206], "train_load": [104, 138, 139, 181, 188, 214, 248], "detriment": 104, "workload": [104, 119, 133, 140, 151, 152, 154, 188, 196, 206, 209, 213, 214, 258, 269, 278], "test_load": [104, 138, 181], "sensit": [104, 150, 158], "conclud": [104, 149, 154, 195], "interven": [104, 195], "soft": [104, 179], "mistaken": 104, "alon": [104, 121, 142, 184, 189], "exploit": [104, 162, 184], "meaningfulli": 104, "temperatur": 104, "smoother": 104, "soft_target_loss_weight": 104, "ce_loss_weight": 104, "train_knowledge_distil": 104, "ce": [104, 184], "coeffici": 104, "convei": 104, "naiv": [104, 143, 161, 171, 183, 279], "rational": 104, "capac": [104, 150, 178, 191, 240], "cosineembeddingloss": 104, "obvious": [104, 108, 182], "resolv": [104, 163, 192, 195, 200, 208, 255, 276], "somehow": [104, 111, 196], "hidden_represent": 104, "hidden_representation_s": 104, "avg_pool1d": 104, "harder": [104, 267], "Its": [104, 106, 279], "modifiedlightnnregressor": 104, "cosineloss": 104, "wiggl": 104, "room": [104, 172, 213], "mismatch": [104, 195, 265], "hinton": 104, "vinyal": 104, "dean": 104, "workshop": 104, "romero": 104, "balla": 104, "kahou": 104, "chassang": 104, "gatta": 104, "bengio": 104, "fitnet": 104, "thin": [104, 266], "confer": 104, "knowledge_distillation_tutori": [104, 122, 261], "kit": 105, "dynet": [105, 107], "opposit": [105, 172, 275], "theano": [105, 107], "kera": [105, 107, 120], "constitu": 105, "bottom": [105, 188, 191, 195, 221], "green": [105, 139, 142, 189], "wall": [105, 159, 225], "fat": 105, "exception": 105, "entiti": [105, 111, 196, 242, 243], "recognit": [105, 137, 202, 240], "ner": 105, "sound": [105, 108, 120], "scari": 105, "viterbi": [105, 109], "exp": [105, 106, 149, 276], "sum_": [105, 111, 179], "psi_i": 105, "sum_i": 105, "partit": [105, 137, 142, 147, 154, 207, 240], "emiss": 105, "timestep": [105, 109, 145, 146, 179], "textbf": 105, "psi_": 105, "y_i": [105, 109], "rightarrow": [105, 154, 179], "x_i": [105, 106], "tran": [105, 191], "h_i": [105, 109], "michael": [105, 204, 205, 212, 224, 251, 256], "collin": 105, "robert": [105, 106, 108, 109, 111], "guthri": [105, 106, 108, 109, 111], "prepare_sequ": 105, "anywai": [105, 108, 172], "gold": [105, 184], "perceptron": 105, "score_sent": 105, "advanced_tutori": [105, 107, 110, 261], "workhors": 106, "2x5": 106, "acx": 106, "ac": [106, 191], "sigma": [106, 178], "plenti": 106, "peopl": [106, 107, 127], "shy": 106, "linearit": 106, "sum_j": 106, "x_j": 106, "unseen": [106, 111], "eta": 106, "vari": [106, 140, 148, 162, 172, 184, 193, 195, 199, 204, 224, 244, 276, 279], "spanish": [106, 145, 146], "bow": 106, "vocab": [106, 109, 142], "word_to_ix": [106, 109, 111], "bowclassifi": 106, "creo": 106, "bigger": [106, 145, 146, 177, 191], "deep_learning_tutori": [106, 107, 110, 261], "russel": 107, "norvig": 107, "book": 107, "rip": 107, "pytorch_tutori": [107, 108, 110, 261], "word_embeddings_tutori": [107, 110, 111, 261], "lexic": [107, 110, 261], "sequence_models_tutori": [107, 109, 110, 261], "bi": [107, 110, 261], "crf": [107, 110, 261], "0x7fabecb306b0": 108, "v_data": 108, "m_data": 108, "2x2x2": 108, "t_data": 108, "5256": 108, "7502": 108, "6540": 108, "6095": 108, "1002": 108, "6092": 108, "9798": 108, "6091": 108, "7121": 108, "3037": 108, "7773": 108, "2515": 108, "2223": 108, "6871": 108, "2284": 108, "4676": 108, "6970": 108, "1608": 108, "6995": 108, "1991": 108, "8657": 108, "2444": 108, "6629": 108, "8073": 108, "1759": 108, "2456": 108, "0612": 108, "6177": 108, "7981": 108, "1316": 108, "8793": 108, "0721": 108, "1578": 108, "7735": 108, "0457": 108, "1530": 108, "4757": 108, "1110": 108, "2927": 108, "0288": 108, "4533": 108, "1422": 108, "2486": 108, "7754": 108, "0255": 108, "0233": 108, "5962": 108, "0055": 108, "4285": 108, "7869": 108, "6103": 108, "7040": 108, "1853": 108, "9962": 108, "8313": 108, "z_1": 108, "x_2": [108, 166], "y_2": 108, "z_2": 108, "complain": [108, 195], "8029": 108, "2366": 108, "2857": 108, "6898": 108, "6331": 108, "8795": 108, "6842": 108, "2912": 108, "8317": 108, "5525": 108, "6355": 108, "3968": 108, "6571": 108, "6428": 108, "9803": 108, "0421": 108, "8206": 108, "3133": 108, "1352": 108, "3773": 108, "2824": 108, "5667": 108, "4303": 108, "5009": 108, "5438": 108, "4057": 108, "1341": 108, "1473": [108, 170], "6272": 108, "0939": 108, "2381": 108, "1115": 108, "7703": 108, "3459": 108, "5119": 108, "6933": 108, "1668": 108, "9999": 108, "4175": 108, "2127": [108, 195], "8400": 108, "4200": 108, "6240": 108, "9773": 108, "8748": 108, "9873": 108, "0594": 108, "4919": 108, "2423": 108, "1095": 108, "5038": 108, "6223": 108, "4481": 108, "2856": 108, "3880": 108, "1435": 108, "6512": 108, "1032": 108, "6937": 108, "vagu": 108, "programm": [108, 111], "mayb": [108, 111, 156, 195, 287], "addbackward0": [108, 170], "0x7fab92e2ff40": 108, "0x7fab92e2c640": 108, "x_0": 108, "overbrac": [108, 109, 111], "y_0": 108, "z_0": 108, "gloss": 108, "new_z": 108, "NO": 108, "forgotten": 108, "0x7fab92e2c9a0": 108, "137": [108, 110, 182, 261], "classic": [109, 112, 163, 170, 186, 215, 237], "markov": 109, "myriad": 109, "cow": 109, "q_": [109, 111, 162], "1st": [109, 138, 140, 147], "unfamiliar": 109, "w_1": 109, "w_m": 109, "w_i": [109, 111], "_i": 109, "_1": [109, 130], "_m": 109, "argmax": [109, 138, 181, 213], "_j": 109, "ah_i": 109, "affix": [109, 111], "bear": 109, "ly": 109, "adverb": 109, "c_w": 109, "x_w": 109, "po": [109, 191], "emb": [109, 111, 182], "146": 110, "capit": 111, "enorm": [111, 191], "notion": 111, "mathematician": 111, "physicist": 111, "ok": [111, 141, 180], "role": [111, 176, 182, 196, 258], "orthograph": 111, "linguist": 111, "hypothesi": 111, "coffe": 111, "phi": 111, "gave": 111, "pain": 111, "earth": 111, "herself": 111, "longtensor": [111, 146, 180, 182], "ith": [111, 279], "shakespear": [111, 183], "sonnet": 111, "word_i": 111, "context_s": 111, "beauti": 111, "cbow": 111, "probabilist": [111, 178], "percent": 111, "q_w": 111, "raw_text": 111, "dedupl": 111, "jeremi": 112, "howard": [112, 162, 174, 175], "rachel": 112, "thoma": 112, "ingham": 112, "elegantli": [112, 227], "concis": 112, "trail": 112, "signifi": 112, "xavier": [112, 113], "initialis": 112, "prewritten": 112, "talli": 112, "debugg": 112, "set_trac": 112, "logist": 112, "cross_entropi": [112, 142], "clearer": [112, 189], "uppercas": 112, "zero_": [112, 175, 182], "prone": [112, 147, 199, 209], "gone": [112, 143], "xb": 112, "faciallandmarkdataset": 112, "tensordataset": 112, "x_train": 112, "y_train": 112, "start_i": 112, "end_i": 112, "yb": 112, "train_d": 112, "cleaner": [112, 274, 276, 287], "train_dl": 112, "phase": [112, 154, 182, 230, 256], "loss_batch": 112, "simpler": [112, 140, 142, 148, 158, 170, 225, 286], "rid": [112, 113, 140, 161, 255], "avgpool2d": 112, "adaptiveavgpool2d": [112, 155], "lucki": [112, 176], "rent": 112, "hour": [112, 255], "mnist_sampl": 112, "fastai": 112, "practition": [112, 154, 277], "dupr\u00e9": 113, "circumv": 113, "forwardwithcontrolflowtest": 113, "modelwithcontrolflowtest": 113, "mlp": [113, 142, 156, 196], "unexpectedli": [113, 221], "succe": [113, 116, 195], "assertionerror": [113, 160], "identity2": 113, "fx": [113, 114, 131, 137, 160, 185, 195, 215, 249, 261, 262, 269], "imperfect": 113, "faith": 113, "pitfal": [113, 195], "necessarili": [113, 114, 116, 117, 147, 149, 172, 195], "export_control_flow_model_to_onnx_tutori": [113, 115, 118, 261], "ti": [114, 116, 117], "tai": [114, 116, 117], "justin": [114, 117, 120, 130, 200], "chu": [114, 117], "thiago": [114, 116], "crepaldi": [114, 116], "dynamo": [114, 116, 147, 160, 215, 255, 256, 268], "gamut": 114, "platform": [114, 152, 154, 188, 202, 213, 221, 240, 248, 258], "supercomput": 114, "constrain": [114, 144, 170], "onnxscript": [114, 116, 117], "upgrad": [114, 116, 170, 177, 188, 287], "onnxprogram": [114, 117], "protobuf": 114, "app": [114, 137, 206, 207, 214], "drag": [114, 169, 188, 189, 208], "image_classifier_model": 114, "onnxruntim": [114, 116], "export_simple_model_to_onnx_tutori": [114, 115, 118, 261], "intro_onnx": [115, 116, 118, 261], "onnx_registry_tutori": [115, 117, 118, 261], "sphx_glr_beginner_onnx_intro_onnx": [115, 118, 261], "sphx_glr_beginner_onnx_export_control_flow_model_to_onnx_tutori": [115, 118, 261], "sphx_glr_beginner_onnx_export_simple_model_to_onnx_tutori": [115, 118, 261], "sphx_glr_beginner_onnx_onnx_registry_tutori": [115, 118, 261], "exportedprogram": [116, 117, 121, 195, 244, 254, 255], "newer": [116, 153, 163, 169, 171, 197, 232, 233, 234, 235, 240, 285], "__version__": [116, 177], "registri": 117, "opoverload": 117, "opset": 117, "18": [117, 119, 145, 160, 177, 182, 212, 213, 225, 254, 267], "native_funct": 117, "yaml": [117, 150], "custom_translation_t": 117, "redund": [117, 155], "node_add_0": 117, "input_i": 117, "input_x": 117, "gelu": [117, 281], "op_typ": 117, "mylibrari": 117, "add_and_round_op": 117, "json": [119, 172, 183, 188, 208, 230, 254], "quicker": 119, "record_funct": [119, 160, 213, 230], "incur": [119, 142, 206, 240, 265], "investig": [119, 130, 163, 176, 191, 193, 195, 239], "with_stack": [119, 188], "key_averag": [119, 213], "group_by_stack_n": 119, "traceback": [119, 160, 255], "sort_bi": [119, 213, 230], "193a910735e8": 119, "stacktrac": 119, "88": [119, 182], "212": 119, "953": 119, "mnt": [119, 154], "xarfus": 119, "au": 119, "715": 119, "848m": 119, "350": 119, "151u": 119, "293": [119, 163], "342u": 119, "095u": 119, "931": 119, "tackl": 119, "footprint": [119, 138, 139, 140, 150, 169, 213, 224, 259], "006": 119, "476": 119, "338": 119, "759m": 119, "as_strid": [119, 160], "281": [119, 163], "808u": 119, "275": 119, "721u": 119, "_local": 119, "268": 119, "650u": [119, 230], "_scalar_dens": 119, "347": 119, "argwher": 119, "nonzero": [119, 240], "129": 119, "089m": 119, "402m": 119, "491m": 119, "119": 119, "441": 119, "587u": 119, "_numpi": 119, "395": [119, 182], "602u": 119, "801m": 119, "rpc": [119, 137, 260], "johnson": 120, "brows": 120, "utf": 120, "modern": [120, 172, 193, 196], "50x": 120, "hairi": 120, "thankfulli": 120, "wave": 120, "tflearn": 120, "burden": [120, 184, 240], "facil": 121, "running_mean": [121, 242], "themodelclass": 121, "param_tensor": 121, "var_nam": 121, "param_group": [121, 205, 212], "dampen": 121, "weight_decai": [121, 212], "4675713712": 121, "4675713784": 121, "4675714000": 121, "4675714072": 121, "4675714216": 121, "4675714288": 121, "4675714432": 121, "4675714504": 121, "4675714648": 121, "4675714720": 121, "_use_new_zipfile_seri": 121, "best_model_st": 121, "deepcopi": [121, 156], "pt2": [121, 195, 204, 205, 209, 212, 254], "simplemodel": 121, "saved_exported_program": 121, "model_state_dict": [121, 140, 206, 207, 214], "theoptimizerclass": 121, "modela_state_dict": 121, "modela": 121, "modelb_state_dict": 121, "modelb": 121, "optimizera_state_dict": 121, "optimizera": 121, "optimizerb_state_dict": 121, "optimizerb": 121, "themodelaclass": 121, "themodelbclass": 121, "theoptimizeraclass": 121, "theoptimizerbclass": 121, "gan": [121, 134, 137, 170], "ensembl": [121, 132, 137, 185, 261], "map_loc": [121, 140, 152, 191, 224, 229], "remap": 121, "overwrit": 121, "saving_loading_model": [121, 122, 232, 233, 234, 235, 261], "025": 122, "distil": [122, 132, 137, 261], "dcgan": [122, 132, 134, 137, 261], "transfer_learning_tutori": [122, 127, 261], "understanding_leaf_vs_nonleaf_tutori": [122, 130, 261], "rai": [122, 135, 137, 261], "template_tutori": [122, 124, 261], "firstnam": 124, "lastnam": 124, "gallery_pattern": 124, "neural_style_transfer_tutori": 124, "sphinx": 124, "_build": 124, "beginner_sourc": [124, 261], "link1": [124, 139], "link2": [124, 139], "cs231n": 127, "quot": 127, "million": [127, 139, 155], "licens": [127, 186], "bsd": [127, 186], "todai": [127, 196, 212, 276], "lr_schedul": [127, 138, 139], "num_ftr": 127, "decai": [127, 155, 179], "checkout": 127, "silver": [130, 169, 200], "_k": 130, "bigl": 130, "bigr": 130, "programmat": 130, "probe": [130, 200], "phrase": [130, 184], "afterward": [130, 172, 195, 266], "retains_grad": 130, "tracker": [130, 159, 200], "streamlin": 131, "inductor": [131, 132, 137, 147, 185, 195, 212, 244, 250, 252, 256, 261, 267, 269, 278, 281, 287], "set_stanc": [131, 247, 260, 261], "usecas": [131, 260], "lrschedul": [131, 169, 260], "triton": [131, 160, 193, 212, 247, 249, 254, 260, 261, 269, 278], "cold": [131, 184, 228, 247, 249, 260, 261], "torchdynamo": [131, 137, 147, 195, 269, 281], "fuser": [131, 137, 185, 261], "orthogon": [132, 137, 170], "symmetr": [132, 137, 170, 281], "prune": [132, 137, 170, 185, 261, 287], "scaled_dot_product_attent": [132, 137, 183, 199, 263], "nchw": [132, 137, 163, 214], "func": [132, 137, 156, 158, 161, 166, 171, 251, 255, 286], "tangent": [132, 137, 158, 185, 261], "nerur": 132, "netork": [132, 137], "exploresever": 132, "spread": [133, 191], "demand": [133, 265], "ddp_series_intro": 133, "utm_sourc": 133, "distr_land": 133, "utm_medium": 133, "distributeddata": 133, "ddp_tutori": 133, "intermediate_ddp_tutori": 133, "uneven": 133, "generic_join": 133, "fsdp_tutori": 133, "fsdp_getting_start": 133, "tp_tutori": 133, "distributed_device_mesh": 133, "rpc_tutori": 133, "rpc_getting_start": 133, "rpc_param_server_tutori": 133, "async_execut": [133, 137, 180], "rpc_async_execut": 133, "dataparallel": [133, 137, 143, 224, 240], "rpc_ddp_tutori": 133, "rpc_plus_ddp": 133, "plug": [133, 175, 186], "process_group_cpp_extension_tutori": 133, "custom_extensions_cpp": 133, "dqn": [134, 137, 185, 261], "cartpol": [134, 137, 155, 179, 182], "v0": [134, 137, 162, 179, 198], "proxim": [134, 137, 178], "mario": [134, 137, 170, 185, 261], "experiment": [135, 138, 144, 182, 200, 238, 240, 262, 263, 265, 268, 281], "torchx": [135, 137], "plugin": [135, 137, 188], "raspberri": 135, "gpudirect": [137, 261, 284, 287], "bite": [137, 201, 260], "non_block": [137, 185, 261], "pin_memori": [137, 138, 139, 185, 240, 261], "slide": [137, 240], "tiatoolbox": 137, "resampl": 137, "waveform": 137, "wav2vec2": 137, "holist": 137, "_static": 137, "thumbnail": [137, 191], "matcher": [137, 192], "paral": 137, "fully_shard": [137, 140, 142, 206, 207, 209], "libuv": 137, "tcpstore": [137, 152], "sdk": 137, "v3": 137, "camera": [137, 177], "xnnpack": [137, 262], "metal": 137, "shader": 137, "android": 137, "deeplab": 137, "fp32": [137, 139, 150, 163, 183, 202, 212, 262, 267, 278], "torchrec": [137, 185, 261], "distributedmodelparallel": 137, "hamid": [138, 139], "shojanazeri": [138, 139], "yanli": [138, 139], "zhao": [138, 139], "shen": [138, 152, 175, 180, 182], "li": [138, 152, 154, 172, 175, 180, 182, 193], "fsdp1": 138, "huggingfac": [138, 139, 199, 215, 255, 283], "1t": [138, 150], "courtesi": 138, "patrick": 138, "hu": 138, "reduce_scatt": [138, 139, 142], "scatter": [138, 140, 152, 154, 191], "possess": [138, 229, 267], "toi": [138, 152, 182, 192, 195, 196, 207, 237], "fsdp_mnist": 138, "size_based_auto_wrap_polici": 138, "default_auto_wrap_polici": 138, "fsdp_auto_wrap_polici": 138, "auto_wrap_polici": [138, 139, 140], "steplr": [138, 139], "fully_sharded_data_parallel": 138, "cpuoffload": [138, 140], "backwardprefetch": [138, 139], "enable_wrap": [138, 139], "cleanup": [138, 139, 152, 206, 207], "dropout1": [138, 181], "dropout2": [138, 181], "9216": [138, 181], "ddp_loss": 138, "batch_idx": [138, 214, 248], "tloss": 138, "6f": 138, "view_a": [138, 181], "test_loss": 138, "fsdp_main": [138, 139], "1307": [138, 154, 181], "3081": [138, 154, 181], "dataset1": 138, "dataset2": 138, "sampler1": [138, 139], "num_replica": [138, 139], "sampler2": [138, 139], "train_kwarg": [138, 139], "test_kwarg": [138, 139], "test_batch_s": [138, 139], "cuda_kwarg": [138, 139], "my_auto_wrap_polici": 138, "min_num_param": 138, "init_start_ev": [138, 139], "enable_tim": [138, 139], "init_end_ev": [138, 139], "adadelta": 138, "step_siz": [138, 139, 212], "gamma": [138, 139, 162, 179, 180, 182], "elapsed_tim": 138, "save_model": [138, 139], "barrier": [138, 139, 141, 152, 154, 263], "mnist_cnn": 138, "metavar": [138, 139, 180, 182], "store_tru": [138, 139], "110": [138, 182, 225], "85": [138, 213, 225, 230], "40": [138, 162, 163, 182, 184, 199, 212, 213, 225, 254, 268, 278, 283], "67462890625sec": 138, "_fsdp_wrapped_modul": 138, "flattenparamswrapp": 138, "_fpw_modul": 138, "peak": [138, 140, 148, 169, 177, 199, 206, 252, 258, 259, 263, 267], "g4dn": 138, "xlarg": 138, "allgath": [138, 139, 142, 175, 240], "seal": 138, "20000": 138, "89130859375sec": 138, "auto_wrap": 138, "66": [138, 212, 213, 225], "offload": [138, 139, 140, 213, 221], "cpu_offload": [138, 140], "offload_param": [138, 140], "dpp": 138, "ddp_mnist": 138, "77766015625sec": 138, "blog": [138, 139, 145, 150, 199, 213, 223], "wright": 139, "rohan": [139, 181], "varma": [139, 181], "wikihow": 139, "p4dn": 139, "a100": [139, 143, 171, 193, 199, 267, 283], "pressur": [139, 206], "fdsp": 139, "xxl": 139, "billion": [139, 142], "3b": [139, 177], "wikihowal": 139, "wikihowsep": 139, "summarization_dataset": 139, "t5_train": 139, "autotoken": [139, 283], "gpt2tokenizerfast": 139, "t5token": 139, "t5forconditionalgener": 139, "modeling_t5": 139, "t5block": 139, "checkpoint_wrapp": 139, "checkpointimpl": 139, "apply_activation_checkpointing_wrapp": 139, "mixedprecis": 139, "shardingstrategi": 139, "fullstatedictconfig": 139, "statedicttyp": 139, "transformer_auto_wrap_polici": 139, "tqdm": [139, 155, 178, 283], "datetim": [139, 141, 265], "setup_model": 139, "from_pretrain": [139, 214, 255, 283], "get_date_of_run": 139, "2022": [139, 269], "31": [139, 160, 212, 213, 225, 230, 239], "12_pm": 139, "date_of_run": 139, "strftime": 139, "s_": [139, 179], "format_metrics_to_gb": 139, "gigabyt": 139, "metric_num": 139, "g_gigabyt": 139, "ndigit": 139, "fsdp_loss": 139, "inner_pbar": 139, "colour": 139, "desc": [139, 265], "r0": 139, "input_id": [139, 142, 255, 283], "source_id": 139, "attention_mask": [139, 255], "source_mask": 139, "target_id": 139, "train_accuraci": 139, "val_load": 139, "load_dataset": [139, 255, 283], "type_path": 139, "output_length": 139, "print_text": 139, "150": [139, 182], "val_dataset": 139, "t5_auto_wrap_polici": 139, "transformer_layer_cl": 139, "sharding_strategi": [139, 140], "shard_grad_op": [139, 140], "zero2": 139, "full_shard": [139, 140], "zero3": 139, "bf16_readi": 139, "is_bf16_support": 139, "loosevers": 139, "is_nccl_avail": [139, 263], "mp_polici": [139, 140], "bfsixteen": 139, "mixed_precis": [139, 140], "current_devic": [139, 224], "best_val_loss": 139, "inf": [139, 195, 212, 276, 279], "curr_val_loss": 139, "file_save_nam": 139, "time_of_run": 139, "dur": 139, "train_acc_track": 139, "val_acc_track": 139, "training_start_tim": 139, "track_memori": 139, "mem_alloc_track": 139, "mem_reserved_track": 139, "run_valid": 139, "zone": 139, "memory_alloc": 139, "memory_reserv": 139, "save_polici": 139, "offload_to_cpu": 139, "rank0_onli": 139, "state_dict_typ": 139, "full_state_dict": [139, 140], "cpu_stat": 139, "currepoch": 139, "prefix": [139, 143, 147, 155, 188, 193, 195, 225, 239, 258, 259, 265, 267], "save_nam": 139, "store_fals": 139, "nnode": [139, 152, 174, 263, 265], "transfom": 139, "mhsa": 139, "ffn": [139, 199], "bfloat16": [139, 140, 202, 215, 224, 237, 248, 263, 267, 278], "v100": [139, 193], "fpsixteen": 139, "param_dtyp": [139, 140], "reduce_dtyp": [139, 140], "buffer_dtyp": [139, 140], "fp32_polici": 139, "grad_bf16": 139, "oom": [139, 169, 224], "freed": [139, 169], "backward_pr": [139, 140], "backward_prefetch": [139, 140], "backward_post": [139, 140], "contact": [139, 286], "yifan": 140, "mao": 140, "fsdp": [140, 142, 150, 206, 207, 209], "unshard": [140, 196, 263], "recordstream": 140, "float8": 140, "nf4": 140, "qlora": 140, "eg": 140, "fsdpmodul": 140, "fsdptransform": 140, "tok_embed": [140, 142, 174], "fsdptransformerblock": 140, "joint": [140, 250], "to_loc": 140, "clip_grad_norm_": 140, "seq_len": 140, "queu": [140, 206], "set_modules_to_forward_prefetch": 140, "set_modules_to_backward_prefetch": 140, "perf": [140, 283], "layers_to_prefetch": 140, "num_to_forward_prefetch": 140, "num_to_backward_prefetch": 140, "upcast": 140, "model_arg": [140, 174], "fsdp_kwarg": 140, "mixedprecisionpolici": 140, "max_norm": 140, "resum": [140, 193, 207, 255], "distribute_tensor": 140, "mmap": 140, "full_sd": 140, "meta_sharded_sd": 140, "sharded_sd": 140, "param_nam": [140, 237], "full_tensor": 140, "sharded_meta_param": 140, "sharded_tensor": 140, "device_mesh": [140, 142, 209, 263], "full_param": 140, "cpu_state_dict": 140, "sharded_param": 140, "del": [140, 174, 212, 266, 268], "set_model_state_dict": 140, "broadcast_from_rank0": 140, "statedictopt": 140, "get_model_state_dict": 140, "set_optimizer_state_dict": 140, "get_optimizer_state_dict": 140, "modulewrappolici": 140, "transformerblock": [140, 142], "param_init_fn": 140, "itertool": [140, 182], "to_empti": [140, 237], "reset_paramet": 140, "sublay": 140, "reshard_after_forward": 140, "hybrid_shard": 140, "_hybrid_shard_zero2": 140, "offload_polici": 140, "cpuoffloadpolici": 140, "cast_forward_input": 140, "cast_root_forward_input": 140, "output_dtyp": [140, 262, 265], "sync_module_st": 140, "rank0": [140, 180, 182, 265], "forward_prefetch": 140, "fsdp_modul": 140, "limit_all_gath": 140, "use_orig_param": 140, "flat": 140, "no_sync": [140, 240], "set_requires_gradient_sync": 140, "ignored_param": 140, "ignored_st": 140, "xilun": [141, 263], "roll": 141, "1k": [141, 142], "98304": 141, "96k": 141, "perf_count": 141, "getlogg": [141, 191], "var": 141, "preset": [141, 281], "env_rank": 141, "env_world_s": 141, "env_master_addr": 141, "env_master_port": 141, "23456": [141, 154], "tcp_store": 141, "is_mast": 141, "time_elaps": 141, "client": 141, "superior": [141, 278], "timeout": [141, 152, 175, 265], "store_based_barri": 141, "timedelta": [141, 265], "diststoreerror": 141, "_diststoreerror": 141, "_store_based_barri": 141, "group_nam": 141, "rendezvous_count": 141, "default_pg_timeout": 141, "logging_interv": 141, "store_kei": 141, "store_based_barrier_kei": 141, "worker_count": 141, "last_worker_kei": 141, "last_work": 141, "num_workers_join": 141, "tcpstore_test": 141, "number_run": 141, "spectrum": 141, "listen_fd": 141, "socket": [141, 154, 160, 240, 258], "listen_sock": 141, "af_inet": 141, "sock_stream": 141, "addr": [141, 265], "getsocknam": 141, "master_listen_fd": 141, "notimplementederror": 141, "gloo": [141, 152, 154, 175, 188, 196, 206, 259], "vairabl": 141, "notifi": [141, 180], "wanchao": [142, 209], "liang": [142, 209], "tianyu": 142, "liu": 142, "megatron": 142, "lm": 142, "sp": 142, "parallelstyl": 142, "parallelize_modul": 142, "foward": 142, "aris": [142, 195, 199, 255, 267, 276], "exceed": [142, 178], "domin": [142, 163, 191], "inter": [142, 151, 166, 209, 240], "ballpark": 142, "flop": [142, 196, 252], "llm": [142, 174, 278], "trillion": [142, 150], "month": 142, "llama": [142, 199, 215, 281], "70b": 142, "2k": 142, "dai": [142, 196, 237], "llama2": 142, "colwiseparallel": 142, "rowwiseparallel": 142, "sequenceparallel": 142, "rmsnormpython": 142, "preparemoduleinput": 142, "preparemoduleoutput": 142, "init_device_mesh": [142, 209, 263], "tp_mesh": [142, 209], "feedforward": 142, "swiglu": 142, "w2": 142, "silu": 142, "w1": 142, "w3": 142, "colwis": 142, "rowwis": 142, "parallelize_plan": 142, "layer_tp_plan": 142, "feed_foward": 142, "feed_forward": 142, "wq": 142, "wk": 142, "wv": 142, "wo": 142, "tp_plan": 142, "draft": [142, 154], "use_local_output": 142, "num_head": 142, "layer_id": [142, 174], "transformer_block": 142, "input_layout": 142, "output_layout": 142, "attention_norm": 142, "ffn_norm": 142, "desired_input_layout": 142, "yellow": 142, "red": [142, 147, 189, 221], "loss_parallel": 142, "seq": 142, "dp": [142, 265], "mesh_2d": [142, 209], "submesh": 142, "dp_mesh": 142, "model_tp": 142, "model_2d": 142, "broadli": 143, "torchviz": [143, 149], "orang": [143, 177], "_save": 143, "kept": [143, 265], "_saved_self": 143, "_saved_oth": 143, "cycl": [143, 188, 202, 225, 230], "thumb": [143, 161, 178, 224], "pack_hook": 143, "unpack_hook": 143, "silli": 143, "harmless": 143, "debat": 143, "__repr__": [143, 225], "152": 143, "48gb": 143, "5gb": 143, "6x": 143, "leak": 143, "autograd_saved_tensors_hooks_tutori": [143, 185, 261], "david": 144, "eriksson": 144, "balandat": 144, "methodologi": [144, 214], "laptop": 144, "sustain": [144, 206], "studi": [144, 176, 191], "botorch": 144, "bayesian": 144, "mnist_train_na": [144, 164, 185, 261], "appdef": 144, "kubernet": 144, "local_cwd": 144, "fetch": [144, 146, 180, 181, 182, 196, 250], "proxi": [144, 225, 244, 245, 274, 277], "tensorboardcurvemetr": 144, "curve_nam": 144, "lower_is_bett": 144, "favor": [144, 166, 178, 195], "multiobjectiveoptimizationconfig": 144, "generationstrategi": 144, "scheduleropt": 144, "max_pending_tri": 144, "pareto": 144, "frontier": 144, "surrog": 144, "uncertainti": 144, "num_param": 144, "val_acc": 144, "contour": 144, "hidden_size_1": 144, "kiuk": 144, "chung": 144, "tristan": [144, 177], "rice": [144, 177], "ax_multiobjective_nas_tutori": [144, 164, 185, 261], "surnam": 145, "spell": 145, "lua": [145, 146, 184], "unreason": [145, 146], "roman": 145, "alphabet": 145, "n_letter": 145, "line_length": 145, "all_lett": 145, "linetotensor": 145, "namesdataset": 145, "20074": 145, "charrnn": 145, "label_from_output": 145, "histor": [145, 146], "all_loss": [145, 146], "minu": [145, 188], "bright": 145, "incorrectli": 145, "chines": [145, 146], "korean": 145, "italian": 145, "greek": 145, "poorli": 145, "gender": 145, "writer": [145, 177, 178, 189, 206, 238, 265], "subreddit": 145, "char_rnn_classification_tutori": [145, 167, 185, 261], "russian": 146, "ru": 146, "rovakov": 146, "uantov": 146, "shavakov": 146, "german": 146, "ger": 146, "gerren": 146, "ereng": 146, "rosher": 146, "spa": 146, "salla": 146, "parer": 146, "allan": 146, "chi": 146, "chan": 146, "iun": 146, "category_lin": 146, "o2o": 146, "muscl": [146, 191], "fuzz": 146, "chao": 146, "abcd": 146, "eo": [146, 184], "n_categori": 146, "randomtrainingexampl": 146, "contrast": [146, 152, 171, 172, 195, 274], "timesinc": 146, "timestamp": [146, 159, 221], "print_everi": 146, "plot_everi": 146, "output_nam": 146, "fiction": 146, "countri": 146, "citi": 146, "char_rnn_generation_tutori": [146, 167, 185, 261], "simon": 147, "fan": [147, 177], "torch_log": [147, 195, 245, 247, 255, 260, 261, 278], "_dynamo": [147, 160, 193, 195, 212, 245, 255], "compiled_autograd": 147, "intercept": 147, "bytecod": [147, 193], "aotdispatch": 147, "rout": [147, 160, 195], "rewritten": 147, "compiled_autograd_verbos": 147, "stderr": 147, "aot0_": 147, "aot0_view_2": 147, "view_2": 147, "aot": [147, 160, 212, 247, 252, 260, 261], "unoptim": [147, 193], "aot_eag": [147, 160], "fn": [147, 154, 158, 160, 193, 204, 212, 250, 253, 268], "graph_break": [147, 255], "unique_graph": 147, "call_hook": 147, "div": [147, 160, 212, 274], "adjac": 148, "hardcod": [148, 195], "dilat": 148, "track_running_statist": 148, "denomin": 148, "nenadmarku": [148, 192], "bulk": 148, "fusedconvbn": 148, "geforc": 148, "rtx": 148, "3070": 148, "56gb": 148, "unfus": 148, "68gb": 148, "shallow": [148, 155], "custom_function_conv_bn_tutori": [148, 185, 261], "equip": [149, 155, 258, 274], "staticmethod": [149, 180, 191], "grad_out": 149, "finit": [149, 166], "differenc": 149, "magnifi": 149, "gradgradcheck": [149, 240], "grad_x": 149, "make_dot": 149, "dout": 149, "ouptut": 149, "sinh": 149, "cosh": 149, "expx": 149, "expnegx": 149, "_grad_out_exp": 149, "_grad_out_negexp": 149, "sinhbad": 149, "cube_backward": 149, "cubebackward": 149, "cube_forward": 149, "cube_backward_backward": 149, "sav_grad_out": 149, "cube_backward_backward_grad_out": 149, "cube": 149, "dgrad_out": 149, "reachabl": [150, 151, 154], "2xlarg": [150, 151], "hydra": 150, "slurm": [150, 151, 152, 154], "char_dataset": 150, "gpt2_train_cfg": 150, "bucket": [150, 240], "aggress": 150, "rendezv": [151, 175], "nccl_debug": 151, "verbos": [151, 191, 195, 202, 208], "diagnos": 151, "nccl_socket_ifnam": 151, "eth0": 151, "joe": 152, "zhu": [152, 160], "chirag": [152, 265], "pandya": [152, 265], "fire": 152, "clarifi": 152, "filestor": 152, "libtmp": 152, "some_fil": 152, "toymodel": [152, 206, 207, 209], "net1": [152, 206, 207, 208, 209], "net2": [152, 206, 207, 208, 209], "demo_bas": 152, "ddp_model": [152, 259], "loss_fn": [152, 174, 180, 206, 207, 259], "run_demo": 152, "demo_fn": 152, "caution": 152, "straggler": [152, 188], "inevit": 152, "spike": [152, 177], "AND": 152, "recoveri": 152, "torchelast": 152, "demo_checkpoint": 152, "checkpoint_path": 152, "gettempdir": 152, "toympmodel": 152, "dev0": 152, "dev1": 152, "output_devic": 152, "demo_model_parallel": 152, "mp_model": 152, "ddp_mp_model": 152, "n_gpu": 152, "elastic_ddp": 152, "rdzv_id": [152, 209], "rdzv_backend": 152, "rdzv_endpoint": [152, 209], "29400": [152, 209], "scontrol": 152, "hostnam": 152, "slurm_nodelist": 152, "srun": 152, "torchrun_script": 152, "s\u00e9b": 154, "arnold": 154, "sysadmin": 154, "coordin": [154, 186, 198, 258, 267, 277], "pdsh": 154, "clustershel": 154, "init_process": 154, "127": [154, 262], "set_start_method": 154, "ip": 154, "recv": [154, 174, 182], "irecv": 154, "dst": 154, "req": 154, "sent": [154, 172, 180, 195], "behaviour": 154, "fanci": 154, "baidu": 154, "deepspeech": 154, "facebook": 154, "communc": 154, "new_group": [154, 174, 209], "commut": 154, "band": 154, "bor": 154, "bxor": 154, "premul_sum": 154, "scatter_list": 154, "gather_list": 154, "all_to_al": 154, "output_tensor_list": 154, "input_tensor_list": 154, "random_split": 154, "data_idx": 154, "datapartition": 154, "1234": 154, "data_len": 154, "part_len": 154, "partition_dataset": 154, "get_world_s": 154, "bsz": 154, "partition_s": 154, "train_set": [154, 188], "30000": 154, "ceil": 154, "epoch_loss": 154, "average_gradi": 154, "voil\u00e0": 154, "send_buff": 154, "recv_buff": 154, "accum": [154, 278], "send_req": 154, "bandwidth": [154, 188, 196, 213, 287], "subsect": 154, "mpi": 154, "eleg": 154, "device_typ": [154, 248, 263], "current_acceler": 154, "smi": [154, 224], "mvapich2": 154, "ipc": [154, 188], "recompil": [154, 193, 205, 245, 249, 250], "requisit": 154, "forg": [154, 258], "openmpi": 154, "mpirun": 154, "myscript": 154, "handshak": 154, "superflu": 154, "xccl": 154, "everybodi": 154, "readili": 154, "race": 154, "fcntl": 154, "nf": [154, 265], "sharedfil": 154, "everyon": 154, "unclear": [154, 195], "natalia": 154, "gimelshein": 154, "actor": 155, "carrier": [155, 178], "step_mdp": 155, "brought": [155, 172, 178, 195], "84x84": 155, "accessori": [155, 177], "inittrack": 155, "stamp": 155, "is_init": 155, "tensordictprim": 155, "primer": [155, 277], "disappear": 155, "lstmmodul": 155, "backbon": [155, 191], "flank": 155, "assist": [155, 209], "tensordictmodulebas": 155, "batch_first": 155, "make_tensordict_prim": 155, "qvaluemodul": 155, "action_valu": 155, "qvalueactor": 155, "set_recurrent_mod": 155, "uniniti": 155, "dqnloss": 155, "delay_valu": 155, "lazymemmapstorag": 155, "dqn_with_rnn_tutori": [155, 185, 261], "tradition": 156, "simplemlp": 156, "pretend": [156, 171], "num_model": 156, "6400": 156, "predictions_diff_minibatch_loop": 156, "predictions2": 156, "stack_module_st": 156, "functional_cal": [156, 166, 171], "base_model": 156, "fmodel": 156, "predictions1_vmap": 156, "atol": [156, 263, 283], "rtol": 156, "in_dim": [156, 171, 286], "predictions2_vmap": 156, "without_vmap": 156, "stmt": [156, 204, 212, 225, 283], "with_vmap": 156, "timeit": [156, 239], "0x7fab906ecd30": 156, "0x7fab906d42b0": 156, "495": [156, 225], "weren": [156, 171], "forced_alignment_tutori": 157, "incomplet": [158, 172], "eagerli": [158, 169, 195, 253], "alongsid": [158, 189, 191, 196, 224, 244], "primal": 158, "dual": 158, "dual_level": 158, "fresh": [158, 224], "check_forward_ad": 158, "check_backward_ad": 158, "check_undefined_grad": 158, "check_batched_grad": 158, "functorch": 158, "reformul": [158, 166], "ft": 158, "make_functional_with_buff": 158, "analog": [158, 195, 196, 276, 277], "consolid": [158, 180, 196], "dual_numb": 158, "forward_ad_usag": [158, 185, 261], "jame": 159, "reed": 159, "longest": 159, "nicer": 159, "tabul": [159, 193, 252, 265], "ca": 159, "graphmodul": [159, 262], "symbolic_trac": 159, "profilinginterpret": 159, "clock": [159, 225], "51393": 159, "happi": 159, "hear": 159, "fx_profiling_tutori": [159, 185, 261], "xuan": 160, "liao": 160, "haozh": 160, "jiong": [160, 268, 278], "gong": [160, 268, 278], "weihan": 160, "intricaci": 160, "troubleshoot": 160, "pinpoint": [160, 195, 208], "narrow": [160, 195, 265, 279], "torch_compile_debug": 160, "xx": [160, 214], "ir": [160, 250], "_inductor": [160, 195, 212, 215, 254, 268, 278], "model___20": 160, "tmp": [160, 191, 212, 249, 250, 265, 268], "torchinductor_root": 160, "rx": 160, "crxfi2ybd7yp5sbj2pnhw33wfhtdw7wumvrobyp5sjvdui5ktjc2": 160, "fx_graph_runn": 160, "fx_graph_transform": 160, "ir_pre_fus": 160, "ir_post_fus": 160, "output_cod": [160, 212, 256, 278], "gv": 160, "cgv6n5aotqjo5w4vknjibhengeycuattfto532hkxpozszcgxr3x": 160, "tmp2": [160, 212, 278], "tmp1": [160, 212, 278], "exc": [160, 255], "backendcompilerfail": 160, "cppcompileerror": 160, "xg": 160, "cxga5tk3b4lkwoxyigrtocjp5s7vc5cg2ikuscf6bk6pjqip2bhx": 160, "unsign": [160, 225], "char": [160, 214], "max_propagate_nan": 160, "tmp3": [160, 212, 278], "tmp0": [160, 212, 278], "candid": 160, "scalar_t": 160, "deduct": 160, "substitut": [160, 161, 169], "deduc": 160, "in_ptr0": [160, 212], "in_ptr1": [160, 212], "out_ptr0": 160, "pragma": [160, 278], "gcc": [160, 278], "ivdep": [160, 278], "i0": 160, "0l": [160, 212, 278], "8390l": 160, "1l": [160, 268, 278], "i1": 160, "8l": 160, "buf0": [160, 268], "schedulernod": 160, "computedbuff": 160, "memorydep": 160, "c0": 160, "67120": 160, "unmet_depend": 160, "met_depend": 160, "arg0_1": [160, 212, 268], "8390": 160, "arg1_1": [160, 212], "nodeus": 160, "can_inplac": 160, "buf0_loop_bodi": 160, "var_rang": 160, "z0": 160, "index0": 160, "index1": 160, "get_index": 160, "get_index_1": 160, "load_1": 160, "get_index_2": 160, "minifi": 160, "dead": 160, "minif": 160, "tol": 160, "test_script": 160, "expected_result": 160, "actual_result": 160, "torchdynamo_repro_aft": 160, "torchdynamo_repro_level": 160, "mobilebertforquestionansw": 160, "xeon": [160, 163, 202, 214, 260], "platinum": 160, "8358": 160, "60ghz": 160, "kmp_blocktim": [160, 240, 258], "kmp_set": 160, "kmp_affin": [160, 240, 258], "compact": [160, 240, 258], "ld_preload": [160, 240, 258], "conda_prefix": [160, 225], "libiomp5": [160, 240, 258], "libjemalloc": [160, 258], "malloc_conf": [160, 258], "oversize_threshold": [160, 258], "background_thread": [160, 258], "metadata_thp": [160, 258], "dirty_decay_m": 160, "muzzy_decay_m": 160, "numactl": [160, 240, 258], "bench": 160, "eager_t": 160, "num_it": 160, "inductor_t": 160, "802": 160, "1023553796113": 160, "339": 160, "95180135127157": 160, "359459053287382": 160, "355x": 160, "enable_kernel_profil": 160, "73": [160, 182, 212, 225, 283], "370": 160, "814m": 160, "362": 160, "161": 160, "276m": 160, "363": 160, "97": [160, 182, 213], "121": [160, 230], "416m": 160, "488": [160, 225], "154m": 160, "194": 160, "clamp_min": [160, 213], "81": [160, 213], "444m": 160, "bmm": [160, 202, 225, 279], "258m": [160, 213], "810": 160, "920m": 160, "447m": 160, "_softmax": 160, "087m": 160, "376": 160, "888m": 160, "77": [160, 212], "430m": 160, "502m": 160, "161m": 160, "850": 160, "377m": 160, "index_select": 160, "000u": [160, 230], "986": 160, "458": 160, "420m": 160, "703": 160, "963": 160, "864m": 160, "mkl": [160, 230, 258, 278], "_mkl_linear": [160, 278], "231": [160, 225, 230], "573m": [160, 230], "992m": 160, "336": [160, 230], "642m": 160, "graph_0_cpp_fused_constant_pad_nd_embedding_0": 160, "915": 160, "911": 160, "graph_0_cpp_fused__mkl_linear_add_mul_relu_151": 160, "901": 160, "graph_0_cpp_fused__mkl_linear_add_mul_relu_226": 160, "899": 160, "graph_0_cpp_fused__mkl_linear_add_mul_relu_361": 160, "898": 160, "graph_0_cpp_fused__mkl_linear_add_mul_relu_121": 160, "895": 160, "graph_0_cpp_fused__mkl_linear_add_mul_relu_31": 160, "893": 160, "graph_0_cpp_fused__mkl_linear_add_mul_relu_76": 160, "892": [160, 177, 225], "graph_0_cpp_fused__mkl_linear_add_mul_relu_256": 160, "graph_0_cpp_fused__mkl_linear_add_mul_relu_346": 160, "graph_0_cpp_fused__mkl_linear_add_mul_relu_241": 160, "891": 160, "graph_0_cpp_fused__mkl_linear_add_mul_relu_316": 160, "graph_0_cpp_fused__mkl_linear_add_mul_relu_91": 160, "890": 160, "graph_0_cpp_fused__mkl_linear_add_mul_relu_106": 160, "graph_0_cpp_fused__mkl_linear_add_mul_relu_211": 160, "graph_0_cpp_fused__mkl_linear_add_mul_relu_61": 160, "889": 160, "graph_0_cpp_fused__mkl_linear_add_mul_relu_286": 160, "graph_0_cpp_fused_": 160, "63x": 160, "cblas_sgemm_comput": 160, "339m": 160, "94x": 160, "impress": [160, 195], "cpp_fused__mkl_linear_add_mul_relu_151": 160, "clrlgu27q4ggd472umdzwsu6qcpqxcuusjxqvx2hwitjbujiiz7z": 160, "bottl": [160, 206], "neck": [160, 206], "780875144992024": 160, "9588955780491233": 160, "0286805751604735": 160, "smallest": [160, 176], "solid": [160, 201], "analyt": 160, "hotspot": [160, 221], "phenomenon": 160, "inductor_debug_cpu": [160, 185, 261], "annoi": 161, "jax": [161, 166, 286], "argnum": 161, "millisecond": [161, 175, 240], "get_perf": 161, "rigor": 161, "taller": 161, "hessiani": 161, "overwhelm": 161, "jacobians_hessian": [161, 185, 261], "yuansong": 162, "steven": 162, "guo": 162, "cheatsheet": 162, "companion": 162, "bro": 162, "ne": [162, 184, 230], "emul": [162, 215], "tube": 162, "mushroom": 162, "screen": [162, 179, 221], "next_stat": [162, 179], "240": [162, 182, 230], "pipe": 162, "sky": 162, "grayscaleobserv": 162, "resizeobserv": 162, "skipfram": 162, "framestack": 162, "hi": [162, 279], "movement": 162, "exploration_r": 162, "he": [162, 184, 192], "marionet": 162, "ddqn": 162, "_e": 162, "argmax_": 162, "td_target": 162, "td_t": 162, "td_e": 162, "leftarrow": 162, "nabla": 162, "episod": [162, 179, 180, 182], "mario_rl_tutori": [162, 185, 261], "vitali": 163, "fedyunin": 163, "densest": 163, "4x4": 163, "10x3x16x16": 163, "768": [163, 283], "minor": [163, 182, 189, 214], "ambigu": [163, 275, 276], "n1hw": 163, "contrari": [163, 172, 176], "restrid": 163, "unintend": 163, "apex": 163, "main_amp": 163, "resnet50": [163, 177, 180, 214, 248], "o2": 163, "opt_level": 163, "keep_batchnorm_fp32": 163, "nonetyp": 163, "loss_scal": 163, "7603": 163, "cast_model_typ": 163, "patch_torch_funct": 163, "master_weight": 163, "125": [163, 230], "866": 163, "230": [163, 182, 191], "949": 163, "6735125184": 163, "6735": 163, "prec": 163, "259": 163, "562": 163, "773": [163, 212], "481": 163, "355": 163, "693": 163, "6968704462": 163, "6852": 163, "258": 163, "775": 163, "089": 163, "433": 163, "965": 163, "7877287269": 163, "7194": 163, "833": 163, "410": 163, "771": 163, "710": 163, "487": 163, "8285319805": 163, "7467": 163, "260": [163, 182], "380": 163, "770": 163, "090": 163, "525": 163, "908": 163, "7370464802": 163, "7447": 163, "360": 163, "623": 163, "555": 163, "728": 163, "7592862844": 163, "7472": 163, "917": 163, "345": [163, 198], "774": 163, "746": [163, 225], "115": [163, 213], "9698858261": 163, "9218": 163, "335": [163, 182, 259], "324": 163, "597": 163, "659": 163, "2505953312": 163, "0879": 163, "767": 163, "785": 163, "7579724789": 163, "7580": 163, "198": 163, "482": 163, "135": [163, 177, 225], "414": 163, "716": [163, 213, 225], "7007197738": 163, "7293": 163, "250": [163, 182, 230], "387": 163, "1010": 163, "516": 163, "7113101482": 163, "7233": 163, "667": 163, "197": 163, "340": 163, "1013": 163, "023": 163, "588": 163, "333": 163, "8943189979": 163, "7661": 163, "541": 163, "641": 163, "7113249302": 163, "9551": 163, "1011": 163, "163": 163, "683": 163, "574": 163, "8537774086": 163, "7716": 163, "279": 163, "453": 163, "7595844269": 163, "3413": 163, "429": 163, "269": 163, "827": 163, "743": 163, "883": 163, "8196096420": 163, "4011": 163, "volta": [163, 224, 240], "alexnet": 163, "mnasnet0_5": 163, "mnasnet0_75": 163, "mnasnet1_0": 163, "mnasnet1_3": 163, "mobilenet_v2": [163, 177, 198], "resnet101": 163, "resnet152": 163, "resnet34": 163, "resnext50_32x4d": 163, "shufflenet_v2_x0_5": [163, 177], "shufflenet_v2_x1_0": [163, 177], "shufflenet_v2_x1_5": [163, 177], "shufflenet_v2_x2_0": [163, 177], "squeezenet1_0": 163, "squeezenet1_1": 163, "vgg11": 163, "vgg11_bn": 163, "vgg13": 163, "vgg13_bn": 163, "vgg16": 163, "vgg16_bn": 163, "vgg19_bn": 163, "wide_resnet101_2": 163, "wide_resnet50_2": 163, "ic": 163, "lake": [163, 214], "densenet121": 163, "densenet161": 163, "densenet169": 163, "googlenet": [163, 177], "inception_v3": [163, 177], "resnext101_32x8d": [163, 177], "spite": 163, "nc11": 163, "memory_format_tutori": [163, 185, 261], "year": [166, 170, 199], "j_": 166, "diagon": 166, "beforehand": 166, "asymptot": 166, "i_o": 166, "i_": 166, "e_o": 166, "textrm": 166, "_o": 166, "tensorfloat": 166, "sacrific": 166, "empirical_ntk_ntk_vp": 166, "luck": [166, 169, 196], "altogeth": [166, 276], "neural_tangent_kernel": [166, 185, 261], "french": [167, 184], "seq2seq_translation_tutori": [167, 184, 185, 261], "homepag": [168, 264], "ooz": 169, "_might_": 169, "2p": 169, "ephemer": 169, "timelin": [169, 188, 221], "memory_viz": 169, "devot": 169, "bat": [169, 269], "2gb": [169, 177], "6gb": 169, "foreach": [169, 212], "reveal": [169, 183, 193, 223, 225], "bullet": 169, "sizabl": [169, 172], "tantamount": 169, "eat": 169, "lora": 169, "win": 169, "unlock": [169, 281], "vit_l_16": 169, "neat": 169, "slate": 169, "woohoo": 169, "apart": 169, "shrunk": 169, "0gb": 169, "optimizer_step_in_backward_tutori": [169, 185, 261], "lezcano": 170, "surprisingli": 170, "ill": 170, "frobeniu": 170, "spectral": 170, "lipschitz": 170, "x\u1d40": 170, "upper": [170, 183, 195, 230], "triangular": 170, "triu": 170, "4878": 170, "8278": 170, "1007": 170, "3597": 170, "0884": 170, "1430": 170, "linearsymmetr": 170, "n_featur": 170, "reimplement": [170, 176, 195], "register_parametr": 170, "parametrizedlinear": [170, 283], "moduledict": [170, 174, 283], "parametrizationlist": [170, 283], "3925": 170, "3916": 170, "3066": 170, "1094": 170, "5691": 170, "2183": 170, "skew": [170, 188, 230], "in_channel": [170, 192], "out_channel": [170, 192], "0920": 170, "1096": 170, "selectbackward0": 170, "0695": 170, "1437": 170, "1036": 170, "unparametr": 170, "nparametr": 170, "0364": 170, "0780": 170, "3599": 170, "0506": 170, "0236": 170, "1758": 170, "2266": 170, "5106": 170, "5672": 170, "5423": 170, "2636": 170, "2700": 170, "weight_orig": [170, 176], "distbackward0": 170, "modulelist": 170, "inbuilt": 170, "noisyparametr": 170, "caylei": 170, "cayleymap": 170, "register_buff": 170, "linalg": 170, "0529e": 170, "spd": 170, "matrixexponenti": 170, "matrix_exp": 170, "layer_orthogon": 170, "layer_spd": 170, "eigvalsh": 170, "5770e": 170, "4243e": 170, "right_invers": 170, "cayley_transform": 170, "matrix_map": 170, "orthogonal_": 170, "neg_": 170, "6257": 170, "succinctli": 170, "pruningparametr": 170, "p_drop": 170, "full_lik": 170, "bernoulli": 170, "niniti": 170, "3810": 170, "2231": 170, "6164": 170, "0168": 170, "7933": 170, "7701": 170, "6658": 170, "2939": 170, "9363": 170, "8104": 170, "mulbackward0": 170, "remove_parametr": 170, "nafter": 170, "unconstrain": 170, "2293": 170, "3430": 170, "3938": 170, "1260": 170, "4767": 170, "2024": 170, "2248": 170, "1593": 170, "3326": 170, "subbackward0": 170, "parametri": 170, "leave_parametr": 170, "4205": 170, "0980": 170, "2804": [170, 225], "5591": 170, "0323": 170, "2830": 170, "1772": 170, "3358": 170, "0473": 170, "058": [170, 185, 261], "privaci": [171, 176], "sample_grad": 171, "compute_loss": 171, "ft_compute_grad": 171, "0th": [171, 176, 183, 279], "25x": [171, 191, 283], "opacu": 171, "per_sample_grad": [171, 185, 261], "cpu_tensor": 172, "cuda_tensor": [172, 240], "erron": 172, "carefulli": [172, 240], "distinguish": [172, 182, 189], "isol": [172, 193], "illus": 172, "circumst": [172, 224], "anywher": 172, "cudastreamsynchron": 172, "dma": 172, "volterra": 172, "tesla": 172, "h100": [172, 193], "t3_cuda": 172, "belief": [172, 195], "brand": 172, "cudahostalloc": 172, "cudamemcpi": 172, "doubt": 172, "interestingli": 172, "pronounc": 172, "tick": 172, "__whenev": 172, "memory__": 172, "corrupt": 172, "garbag": 172, "reliabl": [172, 225], "annihil": 172, "legitim": 172, "notori": 172, "inher": [172, 195, 196, 207], "blockag": 172, "non_blocking_pin": 172, "ration": 172, "outweigh": [172, 213], "perman": [172, 176], "shuttl": 172, "expedit": 172, "advers": 172, "bu": 172, "monopol": 172, "pinmem_nonblock": [172, 185, 261], "huang": [174, 175, 206, 207, 263], "microbatch": 174, "micro": 174, "educ": [174, 199], "dataclass": 174, "modelarg": 174, "n_head": 174, "witout": 174, "layernorm": [174, 199, 283], "splitpoint": 174, "pipelinestag": 174, "schedulegpip": 174, "pp_group": 174, "stage_index": 174, "num_stag": 174, "init_distribut": 174, "peer": [174, 259], "manual_model_split": 174, "tracer": 174, "split_spec": 174, "4th": [174, 202], "mirror": 174, "build_stag": 174, "gpipe": 174, "1f1b": 174, "interleaved1f1b": 174, "loopedbf": 174, "num_microbatch": 174, "example_input_microbatch": 174, "tracer_model_split": 174, "tokenwise_loss_fn": 174, "n_microbatch": 174, "pipelining_tutori": 174, "tian": 175, "si": 175, "zeroredundancyoptim": [175, 260], "processgroupnccl": 175, "processgroupgloo": 175, "processgroupmpi": 175, "ucc": 175, "oneccl": [175, 240], "trainum": 175, "emerg": 175, "backenddummi": 175, "chrono": 175, "outputtensor": 175, "inputtensor": 175, "allgatheropt": 175, "allreduceopt": 175, "workdummi": 175, "optyp": 175, "ivalu": [175, 214], "recvanysourc": 175, "future_": 175, "iscomplet": 175, "issuccess": 175, "kunsettimeout": 175, "getfutur": 175, "outputtensorvec": 175, "listtyp": 175, "tensortyp": 175, "markcomplet": 175, "createbackenddummi": 175, "backenddummyconstructor": 175, "__attribute__": 175, "register_backend": 175, "cpp_function": [175, 225], "torch_extension_nam": 175, "libraries_dir": 175, "abspath": 175, "dummy_collect": 175, "builtin": [175, 225, 239], "michela": 176, "paganini": 176, "biolog": 176, "batteri": 176, "subnetwork": 176, "lotteri": 176, "ticket": 176, "destruct": [176, 258], "0a0": 176, "8e8a5e0": 176, "lecun": 176, "1998": 176, "unprun": 176, "basepruningmethod": 176, "adequ": [176, 178], "_orig": 176, "intact": [176, 180, 237], "weight_mask": 176, "_mask": 176, "forward_pre_hook": 176, "l1_unstructur": 176, "bias_orig": 176, "bias_mask": 176, "pruningcontain": 176, "compute_mask": 176, "ln_structur": 176, "undo": 176, "reassign": 176, "global_unstructur": 176, "apply_mask": 176, "unstructur": 176, "preprun": 176, "pruning_typ": 176, "pruning_tutori": [176, 185, 261], "sink": 177, "5v": 177, "sd": [177, 266], "card": [177, 183], "8gb": 177, "arm": [177, 213], "64bit": 177, "aarch64": 177, "arm64": 177, "raspberrypi": 177, "raspios_arm64": 177, "rpi": 177, "sdcard": 177, "start_x": 177, "gpu_mem": 177, "commment": 177, "camera_auto_detect": 177, "v4l2": 177, "reboot": 177, "video4linux2": 177, "video0": 177, "picamera": 177, "36fp": 177, "30fp": 177, "framer": 177, "cv2": 177, "cap": [177, 178, 188], "videocaptur": 177, "cap_prop_frame_width": 177, "cap_prop_frame_height": 177, "cap_prop_fp": 177, "bgr": 177, "ret": [177, 180], "input_tensor": 177, "input_batch": 177, "qnnpack": [177, 262], "mobilenet_v3_larg": 177, "109": 177, "233": [177, 182], "885": [177, 213], "204": [177, 213, 225], "132": 177, "82": [177, 213, 230], "prequant": 177, "20fp": 177, "cap_v4l2": 177, "last_log": 177, "frame_count": 177, "ui": [177, 188, 221, 238, 260], "htop": 177, "mug": 177, "allevi": [177, 200], "set_num_thread": 177, "repetit": [178, 225], "maximis": 178, "clipppoloss": 178, "theta_k": 178, "pi_": 178, "lingua": 178, "franca": 178, "sub_batch_s": 178, "deepmind": [178, 186], "interchang": 178, "panel": [178, 188], "transmit": 178, "gymwrapp": 178, "loos": 178, "supplementari": 178, "stringent": 178, "n_step": [178, 180, 182], "mu_": 178, "d_ob": 178, "d_action": 178, "mu": [178, 191], "normalparamextractor": 178, "probabilisticactor": 178, "tanhnorm": 178, "discount": [178, 179, 180], "amort": [178, 180], "datacollector": 178, "multisyncdatacollector": 178, "refil": 178, "replaybuff": 178, "gae": 178, "value_target": 178, "videorecord": 178, "reinforcement_ppo": [178, 185, 261], "tower": 179, "cart": 179, "pole": 179, "upright": 179, "fork": [179, 258], "classic_control": 179, "action_spac": 179, "observation_spac": 179, "decorrel": 179, "replaymemori": 179, "cyclic": 179, "formul": 179, "r_": 179, "t_0": 179, "r_t": 179, "uncertain": 179, "tempor": 179, "max_a": 179, "univers": [179, 191], "obei": 179, "bellman": 179, "huber": 179, "noisi": [179, 225, 239], "mathcal": 179, "le": [179, 184], "mathrm": 179, "select_act": [179, 180, 182], "eps_start": 179, "eps_end": 179, "eps_decai": 179, "plot_dur": 179, "underneath": [179, 195], "tau": 179, "optimize_model": 179, "s_t": 179, "a_t": 179, "num_episod": [179, 180], "target_net": 179, "reinforcement_q_learn": [179, 185, 261], "calle": [180, 181], "unblock": 180, "idl": [180, 188, 230], "callback": 180, "paus": 180, "update_and_fetch_model": 180, "future_model": 180, "batch_update_s": 180, "batchupdateparameterserv": 180, "curr_update_s": 180, "get_model": 180, "ps_rref": 180, "local_valu": [180, 181], "fut": [180, 182], "setti": 180, "set_result": 180, "rpc_sync": [180, 181, 182], "image_w": 180, "image_h": 180, "one_hot_indic": 180, "random_": 180, "get_worker_info": [180, 182], "543": 180, "num": 180, "affine1": [180, 182], "affine2": [180, 182], "action_scor": [180, 182], "govern": 180, "select_action_batch": 180, "shortli": 180, "run_episod": [180, 182], "agent_rref": [180, 182], "ep_reward": [180, 182], "num_step": 180, "start_step": 180, "from_numpi": [180, 182], "curr_reward": 180, "prob": [180, 182, 189], "saved_log_prob": [180, 182], "rob": 180, "ob_rref": [180, 182], "running_reward": [180, 182], "ob_rank": [180, 182], "ob_info": [180, 182], "observer_nam": [180, 182], "future_act": 180, "pending_st": 180, "select_acion": 180, "ob_id": [180, 182], "log_prob": [180, 182], "stitch": [180, 181], "async": [180, 182, 196, 206, 240], "oberv": [180, 182], "wait_al": 180, "policy_loss": [180, 182], "passiv": [180, 182], "run_work": [180, 181, 182], "n_episod": 180, "print_log": 180, "init_rpc": [180, 181, 182], "agent_nam": [180, 182], "i_episod": [180, 182], "last_reward": [180, 182], "tlast": [180, 182], "taverag": [180, 182], "shutdown": [180, 181, 182], "tik": 180, "tok": 180, "dist_autograd": [181, 182], "num_gpu": 181, "dropout2d": 181, "next_devic": 181, "caller": 181, "call_method": 181, "remote_method": 181, "arg1": 181, "arg2": 181, "foo_inst": 181, "parameterserv": 181, "input_devic": 181, "intention": [181, 182], "miscellan": 181, "get_dist_gradi": 181, "get_gradi": 181, "get_param_rref": 181, "cid": 181, "cpu_grad": 181, "k_cpu": 181, "v_cpu": 181, "paramt": 181, "param_rref": [181, 182], "run_parameter_serv": 181, "param_serv": 181, "global_lock": 181, "get_parameter_serv": 181, "parameter_serv": 181, "shut": 181, "offlin": 181, "trainernet": 181, "param_server_rref": 181, "get_global_param_rref": 181, "paramat": 181, "remote_param": [181, 182], "model_output": 181, "run_training_loop": 181, "nueral": 181, "context_id": [181, 182], "get_accuraci": 181, "correct_sum": 181, "trainer_": 181, "traffic": 181, "listen": 181, "subprocess": [181, 225, 240], "rpc_parameter_serv": 181, "solver": 182, "formatter_class": 182, "argumentdefaultshelpformatt": 182, "log_interv": 182, "report_reward": 182, "_max_episode_step": 182, "lifetim": 182, "finfo": 182, "reward_threshold": 182, "finish_episod": 182, "min_reward": 182, "surpass": 182, "ob": 182, "ctrl": 182, "475": 182, "62": [182, 212, 283], "111": [182, 225, 258], "131": 182, "90": [182, 213], "130": [182, 213], "140": 182, "104": 182, "170": [182, 198], "126": 182, "180": [182, 195, 213, 225], "213": 182, "322": [182, 213], "165": 182, "272": [182, 213], "210": 182, "168": [182, 258], "184": 182, "208": [182, 191, 223], "270": [182, 191], "405": 182, "280": 182, "443": [182, 230], "290": 182, "464": 182, "3163778435275": 182, "embeddingt": 182, "destin": 182, "rnnmodel": 182, "ntoken": 182, "ninp": 182, "nhid": 182, "nlayer": 182, "emb_table_rref": 182, "decoder_rref": 182, "_remote_method": 182, "rremot": 182, "_parameter_rref": 182, "parameter_rref": 182, "run_train": 182, "nindic": 182, "driss": 183, "guessou": 183, "multiheadattent": 183, "flashattent": 183, "fastest": [183, 250], "flash": [183, 267], "andrej": 183, "karpathi": 183, "nanogpt": 183, "causalselfattent": 183, "mine": 183, "166": 183, "616": 183, "726": 183, "amaz": 183, "prof": [183, 213, 230], "export_chrome_trac": 183, "compiled_causal_attention_trac": 183, "concentr": 183, "6090": 183, "49m": 183, "3273": 183, "17m": 183, "commit": [183, 202, 287], "ae3a8d5": 183, "causal_upper_left": 183, "causal_lower_right": 183, "is_caus": [183, 199, 263], "causalbia": 183, "corner": 183, "attn_scor": 183, "sdpa_kernel": [183, 263], "scaled_dot_product_attention_tutori": [183, 185, 261], "il": 184, "est": [184, 188], "peindr": 184, "tableau": 184, "paint": 184, "pourquoi": 184, "pa": 184, "essay": 184, "vin": 184, "delicieux": 184, "delici": 184, "wine": 184, "poet": 184, "romancier": 184, "she": 184, "novelist": 184, "vou": 184, "trop": 184, "maigr": 184, "skinni": 184, "condens": [184, 239], "unfold": 184, "tatoeba": 184, "eng": 184, "someon": 184, "manyth": 184, "anki": 184, "fra": 184, "froid": 184, "giant": 184, "dozen": 184, "trim": [184, 239], "lang": 184, "word2index": 184, "index2word": 184, "word2count": 184, "apostroph": 184, "je": 184, "sui": 184, "noir": 184, "attn_appli": 184, "exhibit": 184, "coher": 184, "grammar": 184, "wander": 184, "freedom": 184, "plot_loss": 184, "judgement": 184, "matshow": 184, "iot": 184, "word2vec": 184, "glove": 184, "autoencod": 184, "248": 185, "torch_export_tutori": [185, 194, 195, 261], "torch_compile_tutori": [185, 193, 261], "sdpa": [185, 199, 261, 263], "transformer_building_block": [185, 199, 261], "spatial_transformer_tutori": [185, 186, 261], "visualizing_gradients_tutori": [185, 200, 261], "sphx_glr_intermediate_mnist_train_na": [185, 261], "tensorboard_profiler_tutori": [185, 188, 261], "torch_compile_conv_bn_fus": [185, 192, 261], "torchrec_intro_tutori": [185, 196, 261], "ghassen": 186, "hamrouni": 186, "geometr": 186, "invari": [186, 275], "boil": 186, "affine_grid": 186, "grid_sampl": 186, "speech_recognition_pipeline_tutori": 187, "perfetto": 188, "warmup": [188, 199, 204, 205, 212, 213, 230, 253, 254], "on_trace_readi": [188, 230], "tensorboard_trace_handl": 188, "record_shap": [188, 230], "profile_memori": [188, 230], "dealloc": [188, 240], "torch_tb_profil": 188, "safari": 188, "pytorch_profil": 188, "dropdown": 188, "callstack": 188, "sm": 188, "multiprocessor": 188, "occup": 188, "tooltip": 188, "toolbar": 188, "keyboard": 188, "mous": 188, "resnet18_4work": 188, "76m": 188, "132m": 188, "azur": 188, "torchtbprofil": 188, "memory_demo_1_10": 188, "gpu0": 188, "children": [188, 230], "distributed_bert": 188, "docker": 188, "profiler_tutori": 188, "test_cifar10": 188, "vi": 188, "hub": [188, 215], "kfd": 188, "sys_ptrac": 188, "seccomp": 188, "unconfin": 188, "shm": 188, "8g": 188, "apt": [188, 191, 258], "libjpeg": 188, "whl": [188, 193, 196, 267], "rocm5": 188, "scp": 188, "plot_classes_pr": 189, "matplotlib_imshow": 189, "one_channel": 189, "grei": 189, "fashion_mnist_experiment_1": 189, "img_grid": 189, "four_fashion_mnist_imag": 189, "pythonwarn": 189, "pkg_resourc": 189, "userwarn": 189, "refresh": [189, 196], "select_n_random": 189, "datapoint": 189, "perm": 189, "randperm": 189, "class_label": [189, 191], "label_img": 189, "thoroughli": 189, "images_to_prob": 189, "preds_tensor": 189, "el": 189, "fig": 189, "figsiz": 189, "arang": [189, 212, 238], "add_subplot": 189, "xtick": 189, "ytick": 189, "set_titl": 189, "1f": 189, "add_scalar": [189, 238], "add_figur": 189, "global_step": [189, 238], "scroll": 189, "test_siz": 189, "class_prob": 189, "class_probs_batch": 189, "test_prob": 189, "test_label": 189, "add_pr_curve_tensorboard": 189, "class_index": 189, "tensorboard_truth": 189, "tensorboard_prob": 189, "add_pr_curv": 189, "poke": 189, "tacotron2_pipeline_tutori": 190, "wsi": 191, "tissu": 191, "surgeri": 191, "biopsi": 191, "scanner": 191, "pathologist": 191, "diseas": 191, "cancer": 191, "microscop": 191, "tumor": 191, "growth": [191, 277], "treatment": [191, 276, 277], "patient": 191, "000x100": 191, "25x0": 191, "micron": 191, "pyramid": 191, "magnif": 191, "sketch": 191, "histoencod": 191, "jopo666": 191, "openjpeg": 191, "openslid": 191, "pixman": 191, "qq": 191, "libopenjp2": 191, "libpixman": 191, "echo": 191, "brew": 191, "__future__": [191, 229, 237], "hashandl": 191, "nopython": 191, "shutil": 191, "zipfil": 191, "mpl": 191, "pd": 191, "cm": 191, "sklearn": 191, "accuracy_scor": 191, "confusion_matrix": 191, "patch_predictor": 191, "iopatchpredictorconfig": 191, "misc": 191, "download_data": 191, "grab_files_from_dir": 191, "overlay_prediction_mask": 191, "wsicor": 191, "wsiread": 191, "rcparam": 191, "dpi": 191, "facecolor": 191, "on_gpu": 191, "suppress": 191, "overli": 191, "suppress_console_output": 191, "redirect_stderr": 191, "stringio": 191, "abnorm": [191, 221], "global_save_dir": 191, "rmdir": 191, "dir_path": 191, "is_dir": 191, "rmtree": 191, "kather": 191, "100k": 191, "wsi_path": 191, "sample_wsi": 191, "sv": 191, "patches_path": 191, "kather100k": 191, "weights_path": 191, "dc": 191, "warwick": 191, "uk": 191, "tcga": 191, "3l": 191, "aa1b": 191, "01z": 191, "dx1": 191, "8923a151": 191, "a690": 191, "40b7": 191, "9e5a": 191, "fcbedfc2394f": 191, "extractal": 191, "pc": 191, "label_list": 191, "patch_list": 191, "dataset_path": 191, "image_ext": 191, "tif": 191, "label_dict": 191, "glass": 191, "mucosa": 191, "deb": 191, "debri": 191, "tum": 191, "colorect": 191, "adenocarcinoma": 191, "epithelium": 191, "adi": 191, "adipos": 191, "muc": 191, "mucu": 191, "stroma": 191, "lym": 191, "lymphocyt": 191, "dataset_class_path": 191, "patch_list_single_class": 191, "file_typ": 191, "xlabel": 191, "ylabel": 191, "299": 191, "211": [191, 213, 230], "176": 191, "178": 191, "209": 191, "232": [191, 225], "abc": 191, "modelabc": 191, "tia": 191, "toolbox": 191, "readthedoc": 191, "_autosummari": 191, "models_abc": 191, "preproc_func": 191, "predictor": [191, 255], "pretrained_weight": 191, "cnnmodel": 191, "fromarrai": 191, "conf": 191, "df_cm": 191, "215": 191, "993000": 191, "000000": 191, "00000": 191, "988636": 191, "011364": 191, "991304": 191, "008696": 191, "996503": 191, "003497": 191, "004808": 191, "990385": 191, "988764": 191, "011236": 191, "996296": 191, "003704": 191, "004785": 191, "985646": 191, "004310": 191, "99569": 191, "input_resolut": 191, "patch_input_shap": 191, "stride_shap": 191, "wsi_ioconfig": 191, "mpp": 191, "return_prob": 191, "ioconfig": 191, "greatest": [191, 224], "unnecessari": [191, 195, 199, 243, 258], "merge_predict": 191, "wsi_output": 191, "wsi_predict": 191, "overlai": 191, "overlay_patch_predict": 191, "overview_resolut": 191, "overview_unit": 191, "wsi_overview": 191, "slide_thumbnail": 191, "label_color_dict": 191, "get_cmap": 191, "set1": 191, "pred_map": 191, "label_info": 191, "return_ax": 191, "histologi": 191, "pohjonen": 191, "joona": 191, "helsinki": 191, "umap": 191, "semantic_segmentor": 191, "deepfeatureextractor": 191, "iosegmentorconfig": 191, "histoencwrapp": 191, "histoenc": 191, "feat_extract": 191, "extract_featur": 191, "num_block": 191, "avg_pool": 191, "infer_batch": 191, "batch_data": 191, "img_patches_devic": 191, "inference_mod": [191, 283], "create_encod": 191, "prostate_medium": 191, "662": 191, "446": 191, "605": 191, "169": [191, 213], "155": 191, "output_resolut": 191, "patch_output_shap": 191, "auto_generate_mask": 191, "otsu": 191, "num_loader_work": 191, "num_postproc_work": 191, "wsi_featur": 191, "umap_reduc": 191, "n_neighbor": 191, "n_compon": 191, "manhattan": 191, "random_st": 191, "fit_transform": 191, "npy": 191, "feat": 191, "5mpp": 191, "4mpp": 191, "histolog": 191, "horac": 192, "clariti": 192, "batch_norm": [192, 230], "conv_bn_pattern": 192, "conv_bn_replac": 192, "conv_weight": 192, "kernel_h": 192, "kernel_w": 192, "conv_bia": 192, "bn_mean": 192, "bn_var": 192, "bn_weight": 192, "bn_bia": 192, "simplif": 192, "example_input": [192, 215, 262, 281], "conclus": 192, "william": [193, 195, 253], "devel": 193, "elsewher": 193, "torchinductor": [193, 240, 249, 268, 269, 278], "torchtriton": 193, "cu117": 193, "opt_mod": 193, "complex_funct": 193, "complex_conjug": 193, "outer_funct": 193, "_orig_": 193, "wrote": [193, 198], "dashboard": [193, 238], "struggl": 193, "fn1": 193, "fn2": 193, "f2": 193, "disallow": 193, "zhengxu": 195, "angela": [195, 244, 254], "pian": 195, "pawakapan": 195, "synonym": 195, "dynamic_shap": [195, 255], "graph_signatur": 195, "range_constraint": 195, "byte": [195, 255, 266], "stronger": [195, 255], "safeti": [195, 255], "cond": 195, "predic": 195, "true_fn": 195, "false_fn": 195, "while_loop": 195, "associative_scan": 195, "entail": 195, "adher": 195, "x0": [195, 198, 212, 278], "x1": [195, 198, 212, 278], "s0": 195, "s1": 195, "x2": [195, 212], "x3": [195, 212], "s3": 195, "s5": 195, "proof": 195, "obviou": [195, 225], "_log": [195, 212, 256], "set_log": [195, 212], "spit": 195, "create_symbol": 195, "int_oo": 195, "2841": 195, "runtime_assert": 195, "ncreate_symbol": 195, "nruntime_assert": 195, "dynamic_shapes_tutori": 195, "_subclass": [195, 255, 266], "fake_impl": 195, "845": 195, "infer_s": [195, 239], "torchdynamo_extended_debug_guard_ad": 195, "_meta_registr": 195, "meta_mm": 195, "marker": 195, "aliv": 195, "attract": 195, "friction": 195, "believ": [195, 275], "stanc": [195, 253], "constraintviol": 195, "unrel": [195, 253], "univari": 195, "diverg": [195, 225, 274, 276], "tolist": [195, 283], "unbind": 195, "unback": 195, "nomenclatur": 195, "absenc": [195, 208, 223], "u0": 195, "unhint": 195, "is_compil": 195, "invas": 195, "bypass": [195, 278], "offend": 195, "smarter": 195, "prevail": 195, "prohibit": 195, "_check_is_s": 195, "guard_size_oblivi": 195, "starter": 195, "guardondatadependentsymnod": 195, "_schema": 195, "is_mut": 195, "export_for_train": 195, "run_decomposit": 195, "mutabl": 195, "conv1d": [195, 202, 240], "cond_pred": 195, "tensorrt": [195, 262], "pt2_path": 195, "aoti_compile_and_packag": [195, 254], "compiler_aot_inductor": 195, "aoti_compil": 195, "aoti_load_packag": [195, 254], "cu121": [196, 267], "fbgemm_gpu": 196, "torchmetr": 196, "cardin": 196, "relationship": 196, "hash": 196, "conjunct": [196, 240, 265, 266], "ctr": 196, "dlrm": [196, 240], "embedding_collect": 196, "embedding_bag_collect": 196, "vast": [196, 277], "collis": [196, 239], "80g": 196, "embeddingcollect": 196, "jaggedtensor": 196, "keyedjaggedtensor": 196, "keyedtensor": 196, "product_t": 196, "user_t": 196, "id_list_featur": 196, "id_score_list_featur": 196, "id_list_feature_offset": 196, "q1": 196, "product_jt": 196, "user_jt": 196, "q2": 196, "reread": 196, "to_dict": 196, "congrat": 196, "pat": 196, "grasp": [196, 201], "scarc": [196, 206], "hbm": 196, "gb": [196, 199], "shardedembeddingbagcollect": 196, "incredibli": 196, "ton": 196, "everytim": 196, "await": 196, "input_dist": 196, "tbe": 196, "output_dist": 196, "twpooledembeddingshard": 196, "kjt": 196, "canon": 196, "dmp": 196, "hyperoptim": 196, "combinedoptim": 196, "keyedoptim": 196, "in_backward_optimizer_filt": 196, "fused_optim": 196, "fused_param": 196, "apply_optimizer_in_backward": 196, "criteo": 196, "1tb": 196, "penn": 198, "fudan": 198, "databas": [198, 249, 250], "pedestrian": 198, "keypoint": 198, "tv_tensor": 198, "boundingbox": 198, "y0": 198, "image_id": 198, "iscrowd": 198, "pycocotool": 198, "gautamchitni": 198, "git": [198, 267], "cocoapi": 198, "cocodataset": 198, "pythonapi": 198, "get_height_and_width": 198, "ci": 198, "upenn": 198, "edu": 198, "jshi": 198, "ped_html": 198, "pennfudanp": 198, "pedmask": 198, "fudanped00001_mask": 198, "fudanped00002_mask": 198, "fudanped00003_mask": 198, "fudanped00004_mask": 198, "pngimag": 198, "fudanped00001": 198, "fudanped00002": 198, "fudanped00003": 198, "fudanped00004": 198, "tvtensor": 198, "zoo": 198, "fasterrcnn": 198, "rpn": 198, "anchor": 198, "featmap_nam": 198, "rcnn": 198, "train2017": 198, "mikayla": [199, 229, 237], "gawarecki": [199, 229, 237], "flexattent": 199, "jag": [199, 279], "njt": 199, "famili": [199, 213, 258], "xformer": 199, "torchtun": 199, "rag": [199, 279], "ux": [199, 279, 281], "key_padding_mask": 199, "qk": 199, "premis": 199, "rmsnorm": 199, "sinusoid": 199, "rotari": [199, 263], "alibi": 199, "threefold": 199, "query_padding_mask": 199, "mha": [199, 275], "nestedtensor": [199, 261, 279, 284, 287], "cleanli": [199, 204, 205, 212, 251, 256], "zipf": [199, 279], "pariti": 199, "attn_mask": 199, "padded_tim": 199, "03454": 199, "padded_peak_memori": 199, "nested_tim": 199, "00612": 199, "nested_peak_memori": 199, "padded_bw_tim": 199, "09337": 199, "padded_bw_peak_mem": 199, "nested_bw_tim": 199, "01452": 199, "nested_bw_peak_mem": 199, "144": [199, 213], "out_proj": 199, "000244140625": 199, "packed_proj": 199, "001556396484375": 199, "001953125": 199, "causal": 199, "breviti": [199, 237, 274], "trust": 199, "ragged": 199, "e_q": 199, "e_tot": 199, "05x": 199, "swish": 199, "08x": [199, 213], "kv": [199, 263], "lucidrain": 199, "navit": 199, "visiontransform": 199, "norm_lay": 200, "batchnorm1d": 200, "register_full_backward_hook": 200, "grads_bn": 200, "grads_nobn": 200, "qualit": 200, "num_lay": [200, 224], "hook_forward": 200, "covari": 200, "newcom": 201, "deep_learning_60min_blitz": 201, "tmul": 202, "gen": 202, "processor": [202, 214, 240, 258, 260], "10x": [202, 267], "avx": [202, 214], "vnni": [202, 214], "024": 202, "bf16": [202, 213, 267, 278], "onednn": [202, 213, 214, 221, 278], "memory_format": [202, 214], "channels_last": [202, 214], "conv3d": [202, 240], "conv_transpose1d": 202, "conv_transpose2d": 202, "conv_transpose3d": 202, "baddbmm": 202, "addbmm": 202, "onednn_verbos": 202, "mkldnn": [202, 213, 278], "verbose_on": 202, "6dbeffbae1f23cbbeae17adb7b5b13f1f37c080": 202, "openmp": [202, 221], "nthr": 202, "isa": 202, "dl": [202, 267], "prim_templ": 202, "prop_kind": 202, "memory_descriptor": 202, "auxiliari": [202, 269], "problem_desc": 202, "exec_tim": 202, "exec": 202, "reorder": [202, 213, 221, 240], "undef": 202, "src_f32": 202, "f0": 202, "dst_f32": 202, "scratchpad": 202, "2561": 202, "avx512_core_amx_bf16": 202, "forward_train": 202, "src_bf16": 202, "acdb": 202, "wei_bf16": 202, "abcd16b16a2b": 202, "bia_f32": 202, "dst_bf16": 202, "alg": 202, "convolution_direct": 202, "mb7_ic2oc1_ih224oh111kh3sh2dh1ph1_iw224ow111kw3sw2dw1pw1": 202, "628906": 202, "brg": 202, "avx512_core_amx_int8": 202, "src_s8": 202, "wei_s8": 202, "ba16a64b4a": 202, "dst_s8": 202, "1x30522": 202, "30522x768": 202, "1x768": 202, "66382": 202, "lazo": [204, 205, 212, 251, 256], "get_device_cap": [204, 212], "benchmark_torch_function_in_microsecond": [204, 212], "blocked_autorang": [204, 212, 225, 283], "eager_runtim": [204, 212], "compiled_runtim": [204, 212], "747": 204, "2437149845064u": 204, "392": [204, 261], "07384741178u": 204, "linearlr": 205, "peek": 205, "compiling_optimizer_lr_schedul": [205, 247, 261], "luca": [206, 207], "pasqualin": [206, 207], "iri": [206, 207, 209], "rodrigo": [206, 207], "kumpera": [206, 207], "chien": [206, 207, 263], "chin": [206, 207, 263], "async_sav": 206, "checkpoint_size_per_rank": 206, "number_of_rank": 206, "pageabl": 206, "get_state_dict": [206, 207], "set_state_dict": [206, 207], "appstat": [206, 207], "protocol": [206, 207], "load_stat_dict": [206, 207], "fqn": [206, 207, 283], "sharded_state_dict": [206, 207], "optim_state_dict": [206, 207], "run_fsdp_checkpoint_save_exampl": [206, 207], "checkpoint_futur": 206, "checkpoint_id": [206, 207], "_step": 206, "attack": 206, "filesystemwrit": 206, "storagewrit": 206, "cached_state_dict": 206, "cache_staged_state_dict": 206, "storage_writ": 206, "adddition": 207, "run_fsdp_checkpoint_load_exampl": 207, "run_checkpoint_load_exampl": 207, "format_util": 207, "torch_to_dcp": 207, "dcp_to_torch": 207, "dcp_to_torch_sav": 207, "torch_save_to_dcp": 207, "torch_save_checkpoint_dir": 207, "torch_save_checkpoint": 207, "_new": 207, "anshul": 208, "sinha": 208, "distributedtensor": 208, "interoper": 208, "mlpmodul": 208, "comm_mod": 208, "generate_comm_debug_tracing_t": 208, "noise_level": 208, "log_comm_debug_tracing_table_to_fil": 208, "file_nam": [208, 255], "transformer_operation_log": 208, "generate_json_dump": 208, "c10d_function": 208, "comm_mode_features_exampl": 208, "effortlessli": 209, "homogen": 209, "num_node_devic": 209, "shard_rank_list": 209, "shard_group": 209, "current_shard_group": 209, "current_replicate_group": 209, "shard_factor": 209, "replicate_group_rank": 209, "replicate_group": 209, "2d_setup": 209, "mesh_dim_nam": [209, 263], "thru": 209, "get_group": 209, "mesh_dim": 209, "2d_setup_with_device_mesh": 209, "meshshap": 209, "dp_replic": 209, "dp_shard": 209, "mesh_3d": 209, "hsdp_mesh": 209, "tp_group": 209, "_foreach": 212, "horizton": 212, "model_copi": 212, "output_copi": 212, "_higher_order_op": 212, "get_input": 212, "exp_avg": [212, 259], "exp_avg_sq": [212, 259], "update_exp_avg_sq": 212, "beta2": 212, "addcmul": 212, "update_param": 212, "bias_correction1": 212, "bias_correction2": 212, "denom": 212, "foreach_map_adam": 212, "updated_step": 212, "_foreach_copy_": 212, "hop": 212, "exp_avgs_upd": 212, "lerp": 212, "exp_avgs_sq_upd": 212, "params_upd": 212, "opt_eag": 212, "opt_eager_copi": 212, "compiled_adam": 212, "eager_p": 212, "compile_p": 212, "v0922": 212, "029000": 212, "22821": 212, "2345": 212, "__output_cod": 212, "0_infer": 212, "c_void_p": [212, 268], "c_long": 212, "c_int": 212, "cmath": 212, "nanj": 212, "run_intermediate_hook": [212, 268], "maybe_profil": 212, "memory_plan": 212, "_align": 212, "empty_strid": [212, 230, 268], "async_compil": [212, 278], "asynccompil": 212, "select_algorithm": 212, "extern_kernel": 212, "_cuda_getcurrentrawstream": 212, "get_raw_stream": 212, "tl": 212, "triton_heurist": 212, "start_graph": 212, "end_graph": 212, "inductor_op": 212, "_quantiz": 212, "assert_size_strid": [212, 268], "assert_align": 212, "empty_strided_cpu": 212, "_empty_strided_cpu": 212, "empty_strided_cuda": 212, "_empty_strided_cuda": 212, "empty_strided_xpu": 212, "_empty_strided_xpu": 212, "reinterpret_tensor": 212, "_reinterpret_tensor": 212, "alloc_from_pool": 212, "_alloc_from_pool": 212, "empty_strided_p2p": 212, "_distributed_c10d": [212, 265], "_symmetricmemori": 212, "torchinductor_ci": 212, "calrezlmzale753uatf4r4hyoxrgj2cygyga4s35ygdnlqxtbqrk": 212, "unsort": 212, "triton_for_fused_0": 212, "triton_help": 212, "libdevic": 212, "tl_math": 212, "autotunehint": 212, "reductionhint": 212, "tilehint": 212, "deviceproperti": 212, "num_warp": 212, "triton_meta": 212, "in_ptr2": 212, "in_ptr3": 212, "in_ptr4": 212, "in_ptr5": 212, "in_ptr6": 212, "in_ptr7": 212, "in_ptr8": 212, "in_ptr9": 212, "in_ptr10": 212, "in_ptr11": 212, "in_ptr12": 212, "in_ptr13": 212, "in_ptr14": 212, "in_ptr15": 212, "in_ptr16": 212, "in_ptr17": 212, "in_ptr18": 212, "in_ptr19": 212, "in_ptr20": 212, "in_ptr21": 212, "in_ptr22": 212, "in_ptr23": 212, "in_ptr24": 212, "in_ptr25": 212, "in_ptr26": 212, "in_ptr27": 212, "in_ptr28": 212, "in_ptr29": 212, "in_ptr30": 212, "in_ptr31": 212, "in_ptr32": 212, "in_ptr33": 212, "in_ptr34": 212, "in_ptr35": 212, "in_ptr36": 212, "in_ptr37": 212, "in_ptr38": 212, "in_ptr39": 212, "in_ptr40": 212, "in_ptr41": 212, "in_ptr42": 212, "in_ptr43": 212, "in_ptr44": 212, "in_ptr45": 212, "in_ptr46": 212, "in_ptr47": 212, "in_ptr48": 212, "in_ptr49": 212, "out_ptr6": 212, "out_ptr7": 212, "out_ptr8": 212, "out_ptr15": 212, "out_ptr16": 212, "out_ptr17": 212, "out_ptr24": 212, "out_ptr25": 212, "out_ptr26": 212, "out_ptr33": 212, "out_ptr34": 212, "out_ptr35": 212, "out_ptr42": 212, "out_ptr43": 212, "out_ptr44": 212, "out_ptr51": 212, "out_ptr52": 212, "out_ptr53": 212, "out_ptr60": 212, "out_ptr61": 212, "out_ptr62": 212, "out_ptr69": 212, "out_ptr70": 212, "out_ptr71": 212, "out_ptr78": 212, "out_ptr79": 212, "out_ptr80": 212, "out_ptr87": 212, "out_ptr88": 212, "out_ptr89": 212, "multi_processor_count": 212, "regs_per_multiprocessor": 212, "65536": 212, "max_threads_per_multi_processor": 212, "1536": 212, "warp_siz": 212, "tt": 212, "43": [212, 213, 225], "69": [212, 225], "inductor_meta": 212, "grid_typ": 212, "sequentialcombokernelgrid": 212, "combo_grid_meta": 212, "min_block": 212, "default_config": 212, "xblock": 212, "no_x_dim_0": 212, "xnumel_0": 212, "1048576": 212, "no_x_dim_1": 212, "xnumel_1": 212, "no_x_dim_2": 212, "xnumel_2": 212, "no_x_dim_3": 212, "xnumel_3": 212, "no_x_dim_4": 212, "xnumel_4": 212, "no_x_dim_5": 212, "xnumel_5": 212, "no_x_dim_6": 212, "xnumel_6": 212, "no_x_dim_7": 212, "xnumel_7": 212, "no_x_dim_8": 212, "xnumel_8": 212, "no_x_dim_9": 212, "xnumel_9": 212, "kernel_nam": 212, "mutated_arg_nam": 212, "backend_hash": 212, "5521eadcb2516098f638687b39b477aa524882055648f5ae9ffb68d065b487c6": 212, "are_deterministic_algorithms_en": 212, "assert_indirect_index": 212, "autotune_local_cach": 212, "autotune_pointwis": 212, "autotune_remote_cach": 212, "force_disable_cach": 212, "dynamic_scale_rblock": 212, "max_autotun": [212, 254], "max_autotune_pointwis": 212, "min_split_scan_rblock": 212, "spill_threshold": 212, "store_cubin": 212, "pid": 212, "program_id": 212, "num_xblocks_0": 212, "cdiv": 212, "num_xblocks_1": 212, "num_xblocks_2": 212, "num_xblocks_3": 212, "num_xblocks_4": 212, "num_xblocks_5": 212, "num_xblocks_6": 212, "num_xblocks_7": 212, "num_xblocks_8": 212, "num_xblocks_9": 212, "pid_offset": 212, "xnumel": 212, "r0_numel": 212, "xoffset": 212, "xindex": 212, "xmask": 212, "int1": 212, "tmp8": [212, 278], "tmp15": 212, "tmp17": 212, "10000000149011612": 212, "tmp4": [212, 278], "tmp5": [212, 278], "tmp6": [212, 278], "tmp7": [212, 278], "tmp9": 212, "tmp10": 212, "tmp11": 212, "0010000000000000009": 212, "tmp12": 212, "tmp13": 212, "tmp14": 212, "tmp16": 212, "tmp18": 212, "tmp19": 212, "tmp20": 212, "tmp21": 212, "tmp22": 212, "tmp23": 212, "tmp24": 212, "tmp25": 212, "tmp26": 212, "int32": [212, 267], "tmp27": 212, "tmp28": 212, "tmp29": 212, "tmp30": 212, "tmp31": 212, "tmp32": 212, "tmp33": 212, "tmp34": 212, "tmp35": 212, "tmp36": 212, "tmp37": 212, "tmp38": 212, "tmp39": 212, "tmp40": 212, "tmp47": 212, "tmp54": 212, "tmp56": 212, "tmp41": 212, "tmp42": 212, "tmp43": 212, "tmp44": 212, "tmp45": 212, "tmp46": 212, "tmp48": 212, "tmp49": 212, "tmp50": 212, "tmp51": 212, "tmp52": 212, "tmp53": 212, "tmp55": 212, "tmp57": 212, "tmp58": 212, "tmp59": 212, "tmp60": 212, "tmp61": 212, "tmp62": 212, "tmp63": 212, "tmp64": 212, "tmp65": 212, "tmp66": 212, "tmp67": 212, "tmp68": 212, "tmp69": 212, "tmp70": 212, "tmp71": 212, "tmp72": 212, "tmp73": 212, "tmp74": 212, "tmp75": 212, "tmp76": 212, "tmp77": 212, "tmp78": 212, "tmp79": 212, "tmp86": 212, "tmp93": 212, "tmp95": 212, "tmp80": 212, "tmp81": 212, "tmp82": 212, "tmp83": 212, "tmp84": 212, "tmp85": 212, "tmp87": 212, "tmp88": 212, "tmp89": 212, "tmp90": 212, "tmp91": 212, "tmp92": 212, "tmp94": 212, "tmp96": 212, "tmp97": 212, "tmp98": 212, "tmp99": 212, "tmp100": 212, "tmp101": 212, "tmp102": 212, "tmp103": 212, "tmp104": 212, "tmp105": 212, "tmp106": 212, "tmp107": 212, "tmp108": 212, "tmp109": 212, "tmp110": 212, "tmp111": 212, "tmp112": 212, "tmp113": 212, "tmp114": 212, "tmp115": 212, "tmp116": 212, "tmp117": 212, "tmp118": 212, "tmp125": 212, "tmp132": 212, "tmp134": 212, "tmp119": 212, "tmp120": 212, "tmp121": 212, "tmp122": 212, "tmp123": 212, "tmp124": 212, "tmp126": 212, "tmp127": 212, "tmp128": 212, "tmp129": 212, "tmp130": 212, "tmp131": 212, "tmp133": 212, "tmp135": 212, "tmp136": 212, "tmp137": 212, "tmp138": 212, "tmp139": 212, "tmp140": 212, "tmp141": 212, "tmp142": 212, "tmp143": 212, "tmp144": 212, "tmp145": 212, "tmp146": 212, "tmp147": 212, "tmp148": 212, "tmp149": 212, "tmp150": 212, "tmp151": 212, "tmp152": 212, "tmp153": 212, "tmp154": 212, "tmp155": 212, "x4": 212, "tmp156": 212, "tmp157": 212, "tmp164": 212, "tmp171": 212, "tmp173": 212, "tmp158": 212, "tmp159": 212, "tmp160": 212, "tmp161": 212, "tmp162": 212, "tmp163": 212, "tmp165": 212, "tmp166": 212, "tmp167": 212, "tmp168": 212, "tmp169": 212, "tmp170": 212, "tmp172": 212, "tmp174": 212, "tmp175": 212, "tmp176": 212, "tmp177": 212, "tmp178": 212, "tmp179": 212, "tmp180": 212, "tmp181": 212, "tmp182": 212, "tmp183": 212, "tmp184": 212, "tmp185": 212, "tmp186": 212, "tmp187": 212, "tmp188": 212, "tmp189": 212, "tmp190": 212, "tmp191": 212, "tmp192": 212, "tmp193": 212, "tmp194": 212, "x5": 212, "tmp195": 212, "tmp196": 212, "tmp203": 212, "tmp210": 212, "tmp212": 212, "tmp197": 212, "tmp198": 212, "tmp199": 212, "tmp200": 212, "tmp201": 212, "tmp202": 212, "tmp204": 212, "tmp205": 212, "tmp206": 212, "tmp207": 212, "tmp208": 212, "tmp209": 212, "tmp211": 212, "tmp213": 212, "tmp214": 212, "tmp215": 212, "tmp216": 212, "tmp217": 212, "tmp218": 212, "tmp219": 212, "tmp220": 212, "tmp221": 212, "tmp222": 212, "tmp223": 212, "tmp224": 212, "tmp225": 212, "tmp226": 212, "tmp227": 212, "tmp228": 212, "tmp229": 212, "tmp230": 212, "tmp231": 212, "tmp232": 212, "tmp233": 212, "x6": 212, "tmp234": 212, "tmp235": 212, "tmp242": 212, "tmp249": 212, "tmp251": 212, "tmp236": 212, "tmp237": 212, "tmp238": 212, "tmp239": 212, "tmp240": 212, "tmp241": 212, "tmp243": 212, "tmp244": 212, "tmp245": 212, "tmp246": 212, "tmp247": 212, "tmp248": 212, "tmp250": 212, "tmp252": 212, "tmp253": 212, "tmp254": 212, "tmp255": 212, "tmp256": 212, "tmp257": 212, "tmp258": 212, "tmp259": 212, "tmp260": 212, "tmp261": 212, "tmp262": 212, "tmp263": 212, "tmp264": 212, "tmp265": 212, "tmp266": 212, "tmp267": 212, "tmp268": 212, "tmp269": 212, "tmp270": 212, "tmp271": 212, "tmp272": 212, "x7": 212, "tmp273": 212, "tmp274": 212, "tmp281": 212, "tmp288": 212, "tmp290": 212, "tmp275": 212, "tmp276": 212, "tmp277": 212, "tmp278": 212, "tmp279": 212, "tmp280": 212, "tmp282": 212, "tmp283": 212, "tmp284": 212, "tmp285": 212, "tmp286": 212, "tmp287": 212, "tmp289": 212, "tmp291": 212, "tmp292": 212, "tmp293": 212, "tmp294": 212, "tmp295": 212, "tmp296": 212, "tmp297": 212, "tmp298": 212, "tmp299": 212, "tmp300": 212, "tmp301": 212, "tmp302": 212, "tmp303": 212, "tmp304": 212, "tmp305": 212, "tmp306": 212, "tmp307": 212, "tmp308": 212, "tmp309": 212, "tmp310": 212, "tmp311": 212, "x8": 212, "tmp312": 212, "tmp313": 212, "tmp320": 212, "tmp327": 212, "tmp329": 212, "tmp314": 212, "tmp315": 212, "tmp316": 212, "tmp317": 212, "tmp318": 212, "tmp319": 212, "tmp321": 212, "tmp322": 212, "tmp323": 212, "tmp324": 212, "tmp325": 212, "tmp326": 212, "tmp328": 212, "tmp330": 212, "tmp331": 212, "tmp332": 212, "tmp333": 212, "tmp334": 212, "tmp335": 212, "tmp336": 212, "tmp337": 212, "tmp338": 212, "tmp339": 212, "tmp340": 212, "tmp341": 212, "tmp342": 212, "tmp343": 212, "tmp344": 212, "tmp345": 212, "tmp346": 212, "tmp347": 212, "tmp348": 212, "tmp349": 212, "tmp350": 212, "x9": 212, "tmp351": 212, "tmp352": 212, "tmp359": 212, "tmp366": 212, "tmp368": 212, "tmp353": 212, "tmp354": 212, "tmp355": 212, "tmp356": 212, "tmp357": 212, "tmp358": 212, "tmp360": 212, "tmp361": 212, "tmp362": 212, "tmp363": 212, "tmp364": 212, "tmp365": 212, "tmp367": 212, "tmp369": 212, "tmp370": 212, "tmp371": 212, "tmp372": 212, "tmp373": 212, "tmp374": 212, "tmp375": 212, "tmp376": 212, "tmp377": 212, "tmp378": 212, "tmp379": 212, "tmp380": 212, "tmp381": 212, "tmp382": 212, "tmp383": 212, "tmp384": 212, "tmp385": 212, "tmp386": 212, "tmp387": 212, "tmp388": 212, "tmp389": 212, "device_str": 212, "cpp_fused__foreach_copy_1": 212, "cpp_pybind": [212, 278], "cpp_prefix": 212, "out_ptr1": 212, "out_ptr3": 212, "out_ptr5": 212, "out_ptr9": 212, "out_ptr11": 212, "out_ptr13": 212, "out_ptr19": 212, "arg2_1": 212, "arg3_1": 212, "arg4_1": 212, "arg5_1": 212, "arg6_1": 212, "arg7_1": 212, "arg8_1": 212, "arg9_1": 212, "arg10_1": 212, "arg11_1": 212, "arg12_1": 212, "arg13_1": 212, "arg14_1": 212, "arg15_1": 212, "arg16_1": 212, "arg17_1": 212, "arg18_1": 212, "arg19_1": 212, "arg20_1": 212, "arg21_1": 212, "arg22_1": 212, "arg23_1": 212, "arg24_1": 212, "arg25_1": 212, "arg26_1": 212, "arg27_1": 212, "arg28_1": 212, "arg29_1": 212, "arg30_1": 212, "arg31_1": 212, "arg32_1": 212, "arg33_1": 212, "arg34_1": 212, "arg35_1": 212, "arg36_1": 212, "arg37_1": 212, "arg38_1": 212, "arg39_1": 212, "arg40_1": 212, "arg41_1": 212, "arg42_1": 212, "arg43_1": 212, "arg44_1": 212, "arg45_1": 212, "arg46_1": 212, "arg47_1": 212, "arg48_1": 212, "arg49_1": 212, "_deviceguard": [212, 268], "stream0": [212, 268], "benchmark_compiled_modul": 212, "rand_strid": 212, "print_perform": 212, "wrapper_benchmark": 212, "compiled_module_main": 212, "075000": 212, "2356": 212, "ff": 212, "cffqwnpkieergngjngozdun467la5vp6eyiisxxpikirosuditrp": 212, "i0922": 212, "020000": 212, "2317": 212, "868000": 212, "1_infer": 212, "912000": 212, "da": 212, "cdabi6efsaqwxkw2y4xsbsvooc4l752igga6mfi4rfeqb4ikja3b": 212, "951000": 212, "1202": 212, "2157449996482u": 212, "2371737428188u": 212, "832": [212, 247, 261], "sunita": 213, "nadamp": 213, "graviton3": 213, "sve": 213, "simd": 213, "graviton2": 213, "bla": 213, "acl": 213, "c7g": 213, "bfloa16": 213, "r7g": 213, "m7g": 213, "4vcpu": 213, "profileract": [213, 230], "myneuralnetwork": 213, "linear_relu_stack": 213, "11008": 213, "pred_probab": 213, "set_grad_en": 213, "mymodel_infer": 213, "self_cpu_time_tot": [213, 230], "813": 213, "255m": 213, "177": 213, "032m": 213, "160u": 213, "162": [213, 225], "054m": 213, "540": 213, "180u": 213, "738m": 213, "201": 213, "955m": 213, "985": 213, "282m": 213, "421m": 213, "043m": 213, "810u": 213, "356m": 213, "179": 213, "388m": 213, "896": 213, "940u": 213, "mmla": 213, "torchbench": 213, "dnnl_default_fpmath_mod": 213, "943": 213, "052": 213, "507m": 213, "167": [213, 258], "653m": 213, "838": 213, "265u": 213, "107": 213, "593m": 213, "358": 213, "643u": 213, "167m": 213, "262": 213, "911m": 213, "060": 213, "533m": 213, "414m": 213, "892m": 213, "307u": 213, "281m": 213, "934m": 213, "849": [213, 225, 247], "670u": 213, "fastmath": 213, "821": 213, "914": 213, "713m": 213, "244m": 213, "711": 213, "220u": 213, "322m": 213, "307": 213, "740u": 213, "094": 213, "495m": 213, "921": 213, "736m": 213, "131m": 213, "441m": 213, "803u": 213, "942m": 213, "186m": 213, "720": 213, "930u": 213, "848": 213, "944": 213, "148m": 213, "141": [213, 225], "309m": 213, "706": 213, "545u": 213, "916m": 213, "720u": 213, "431m": 213, "06": 213, "471m": 213, "951": 213, "027m": 213, "243m": 213, "143u": 213, "928m": 213, "143": [213, 258], "237m": 213, "185u": 213, "47x": 213, "noteworthi": 213, "till": 213, "torch_mkldnn_matmul_min_dim": 213, "958": 213, "612m": 213, "124m": 213, "620u": 213, "951m": 213, "170u": 213, "423m": 213, "034": 213, "691m": 213, "988": 213, "628m": 213, "520m": 213, "945m": 213, "817u": 213, "382m": 213, "136": 213, "910u": 213, "781": 213, "604m": 213, "295": 213, "437m": 213, "477m": 213, "516m": 213, "558": 213, "387u": 213, "708m": 213, "499m": 213, "788": 213, "627m": 213, "982m": 213, "385m": 213, "617u": 213, "932m": 213, "297": 213, "369m": 213, "487m": 213, "038m": 213, "060m": 213, "300u": 213, "013m": 213, "106": 213, "710u": 213, "521m": 213, "750m": 213, "216": 213, "475m": 213, "033m": 213, "110u": 213, "285m": 213, "345m": 213, "186": [213, 267], "725u": 213, "margin": 213, "thp_mem_alloc_en": 213, "321": 213, "069m": 213, "568m": 213, "613m": 213, "602m": 213, "682": 213, "007u": 213, "777m": 213, "697": 213, "082m": 213, "329": 213, "097m": 213, "547m": 213, "325": 213, "115m": 213, "626m": 213, "avx512": 214, "amx": 214, "xmx": 214, "claus": [214, 259], "nhwc": 214, "upstream": [214, 240], "cooper": 214, "roialign": 214, "imper": 214, "intel_extension_for_pytorch": [214, 248], "ipex": [214, 248, 260], "bertmodel": 214, "seq_length": 214, "cache_en": 214, "argc": 214, "cerr": 214, "intel_ext_pt_cpu": 214, "libpytorch_path": 214, "ldd": 214, "workspac": 214, "libintel": 214, "ext": 214, "0x00007f3cf98e0000": 214, "libc10": 214, "0x00007f3cf985a000": 214, "0x00007f3cf70fc000": 214, "libtorch_cpu": [214, 239], "0x00007f3ce16ac000": 214, "mitig": [215, 240], "autotun": [215, 240, 249, 250, 252, 267, 287], "mx": 215, "hpu": [215, 282], "inc_target_devic": 215, "gaudi": [215, 282], "neural_compressor": 215, "fp8config": 215, "fp8_config": 215, "e4m3": 215, "calibration_data": 215, "input_data": 215, "theblok": 215, "7b": 215, "gptq": 215, "model_name_or_path": 215, "torch_dtyp": 215, "hpu_model": 215, "safetensor": 215, "qd": 215, "w8a8": 215, "staticquantconfig": 215, "userfloatmodel": 215, "exported_model": [215, 281], "quant_config": 215, "prepared_model": [215, 281], "run_fn": 215, "q_model": 215, "opt_model": 215, "rtnconfig": 215, "tuningconfig": 215, "eval_fn": 215, "tune_config": 215, "config_set": 215, "use_sym": 215, "group_siz": 215, "tolerable_loss": 215, "max_trial": 215, "gui": [221, 260], "emit_itt": 221, "ex": [221, 269, 283], "8080": 221, "path_of_launch": 221, "iteration_n": 221, "range_push": 221, "range_pop": 221, "oneapi": 221, "brown": 221, "percerntag": 221, "jitter": [221, 225], "enrich": 221, "ittsampl": 221, "292820": 221, "unmark": 221, "244": [221, 283], "iteration_": 221, "basefold": 221, "bash_sourc": 221, "gradcam": 223, "283": 223, "occlus": 223, "deconvolut": 223, "guidedbackprop": 223, "deeplift": 223, "gradientshap": 223, "forward_func": 223, "pictori": 223, "textual": 223, "distractor": 223, "visualize_text": 223, "imdb_torchtext_interpret": 223, "gilbert": 223, "tanner": 223, "gilberttann": 223, "captum_recip": [223, 228, 236, 261], "carilli": 224, "ordinarili": 224, "ture": 224, "kepler": 224, "maxwel": 224, "pascal": 224, "modest": 224, "in_siz": 224, "out_siz": 224, "underflow": 224, "scaler": 224, "unscal": 224, "unscale_": 224, "rough": 224, "coalesc": [224, 274], "binary_cross_entropy_with_logit": 224, "suspect": 224, "docstr": 224, "subregion": 224, "backtrac": 224, "torch_show_cpp_stacktrac": 224, "amp_recip": [224, 228, 236, 261], "invalid": [225, 240, 275, 276, 277], "tediou": 225, "mistak": 225, "mul_sum": 225, "0x7fb10400d0f0": 225, "batched_dot_mul_sum": 225, "379": 225, "0x7fb103d67048": 225, "batched_dot_bmm": 225, "num_thread": [225, 278], "sub_label": 225, "0x7fb103d54080": 225, "118": 225, "0x7fb16935d2e8": 225, "2775": 225, "0x7fb10400d080": 225, "181": 225, "min_run_tim": [225, 239], "median": [225, 239, 283], "274": 225, "748": 225, "432": [225, 230], "22657": 225, "11899": 225, "609": 225, "23098": 225, "27246": 225, "267073": 225, "118823": 225, "189": 225, "2782": 225, "7471": 225, "11874": 225, "173": 225, "7264": 225, "27824": 225, "100060": 225, "121499": 225, "188": 225, "2773": 225, "6111": 225, "12833": 225, "6295": 225, "27062": 225, "71804": 225, "120365": 225, "103": 225, "6764": 225, "11871": 225, "6640": 225, "27592": 225, "73003": 225, "120083": 225, "callgrindstat": [225, 239], "trip": [225, 239], "batched_dot": 225, "36000": 225, "40000": 225, "stark": 225, "fuzzer": 225, "10000000": 225, "k0": 225, "k1": 225, "discontigu": 225, "725": 225, "383": 225, "1468": 225, "187": 225, "5039": 225, "2140": 225, "1296": 225, "41000": 225, "1598": 225, "310": 225, "519": 225, "763": 225, "1082": 225, "473": 225, "16384": 225, "12642115": 225, "8192": [225, 263], "4800": 225, "20400": 225, "110000": 225, "400000": 225, "493": 225, "1100": [225, 239], "2440": 225, "870": 225, "2030": 225, "23600": 225, "24000": [225, 239], "62374": 225, "90000": 225, "100000": 225, "240372": 225, "16000": 225, "40156": 225, "2670": 225, "opac": 225, "complementari": 225, "insensit": 225, "environment": 225, "cpp_lib": 225, "cpp_sourc": 225, "batched_dot_src": 225, "extra_cflag": 225, "extra_include_path": 225, "getenv": 225, "batched_dot_mul_sum_v0": 225, "batched_dot_mul_sum_v1": 225, "module_import_str": 225, "67631": 225, "importlib": 225, "spec_from_file_loc": 225, "repr": 225, "module_from_spec": 225, "exec_modul": 225, "textwrap": 225, "pretty_print": 225, "t_baselin": 225, "stats_v0": 225, "collect_callgrind": 225, "stats_v1": 225, "as_standard": [225, 239], "symbol": [225, 239, 255], "denois": 225, "cancel": [225, 240], "ing": 225, "wrap_pybind_function_impl_": 225, "set_printopt": [225, 283], "linewidth": 225, "valgrind_wrapp": [225, 239], "timer_interfac": [225, 239], "0x7fb0f06e7630": 225, "2392671": 225, "4367": 225, "rel_with_deb_info": [225, 239], "0x7fb10400d208": 225, "2378978": 225, "functioncount": [225, 239], "0x7fb1000ab358": 225, "0x000000000020d9e0": 225, "0x000000000020db10": 225, "integer_sequ": 225, "0ul": 225, "1ul": 225, "5200": 225, "undefinedtensorimpl": 225, "reset_": 225, "5935": 225, "0x000000000022c0e0": 225, "13693": 225, "impos": [226, 237], "changing_default_devic": [226, 236, 261], "subsidiari": [227, 241, 242], "neighbor": 227, "sharp": 227, "blurri": 227, "defining_a_neural_network": [227, 228, 236, 261], "what_is_state_dict": [228, 236, 242, 261], "saving_and_loading_models_for_infer": 228, "custom_dataset_transforms_load": 228, "dynamic_quant": 228, "warmstarting_model_using_parameters_from_a_different_model": [228, 236, 241, 261], "zeroing_out_gradi": [228, 236, 243, 261], "mobile_perf": 228, "regional_compil": [228, 245, 247, 261], "syntaxerror": [228, 236, 261], "undesir": 229, "unload": 229, "upfront": [229, 278], "somemodul": 229, "overwritten": [229, 243, 258], "param_in_model": 229, "param_in_state_dict": 229, "set_swap_module_params_on_convers": [229, 237], "swap_tensor": [229, 236, 261], "module_load_state_dict_tip": [229, 236, 261], "shivam": 230, "raikundalia": 230, "model_infer": 230, "_fork": 230, "509m": 230, "503m": 230, "931m": 230, "597m": 230, "700m": 230, "585m": 230, "_convolut": 230, "450m": 230, "mkldnn_convolut": 230, "838m": 230, "114m": 230, "556m": 230, "693m": 230, "734": 230, "_batch_norm_impl_index": 230, "482m": 230, "724": 230, "100u": 230, "native_batch_norm": 230, "229m": 230, "109m": 230, "705": 230, "450u": 230, "332": 230, "631m": 230, "286u": 230, "668m": 230, "292m": 230, "988u": 230, "549m": 230, "dnn": 230, "group_by_input_shap": 230, "008m": 230, "956m": 230, "909m": 230, "834m": 230, "332m": 230, "303m": 230, "273m": 230, "233m": 230, "751m": 230, "occurr": 230, "666m": 230, "484m": 230, "_convolution_nogroup": 230, "thnn_conv2d": 230, "thnn_conv2d_forward": 230, "im2col_kernel": 230, "844m": 230, "sgemm_32x32x32_nn": 230, "206m": 230, "sgemm_32x32x32_nn_vec": 230, "093m": 230, "015m": 230, "567m": 230, "871m": 230, "560u": 230, "convolution_overrid": 230, "gen_conv": 230, "216u": 230, "640u": 230, "632u": 230, "conv_reord": 230, "880u": 230, "448u": 230, "712": 230, "486m": 230, "max_pool2d_with_indic": 230, "kb": 230, "572": 230, "resize_": 230, "480": 230, "masked_select": 230, "112": [230, 255, 258], "122": 230, "064m": 230, "viewer": 230, "439": 230, "_conv_forward": 230, "1051": 230, "_call_impl": 230, "016m": 230, "659m": 230, "skip_first": 230, "step_num": 230, "profiler_recip": [230, 236, 261], "reasoning_about_shap": [231, 236, 261], "008": 236, "tensorboard_with_pytorch": [236, 238, 261], "timer_quick_start": [236, 239, 261], "tuning_guid": [236, 240, 261], "hereaft": 237, "__class__": 237, "__slots__": 237, "pertin": 237, "glanc": [237, 274], "nasti": 237, "__torch_dispatch__": [237, 255], "new_param": 237, "myquantizedlinearweight": 237, "payload": 237, "__setattr__": 237, "module_load": 237, "__torch_function__": 237, "param_kei": 237, "scalar_valu": 238, "walltim": 238, "train_model": 238, "pend": 238, "anymor": [238, 278], "tfevent": 238, "OR": 238, "0x7f1929a38ed0": 239, "iqr": 239, "424": 239, "0x7f192b019ed0": 239, "unsurprisingli": 239, "0x7f1929a35850": 239, "563600": 239, "tensormethod": 239, "ab_ref": 239, "0x7f192a6dfd90": 239, "47264": 239, "_int_fre": 239, "25963": 239, "_int_malloc": 239, "19900": 239, "tensorit": 239, "tensoriteratorconfig": 239, "18000": 239, "__tls_get_addr": 239, "13500": 239, "malloc": [239, 240, 258], "11300": 239, "smallvector": 239, "10345": 239, "_int_memalign": 239, "9200": 239, "iteratorbas": 239, "get_strid": 239, "173472": 239, "0x7f192995d750": 239, "118200": 239, "tensoriter": 239, "65000": 239, "20900": 239, "15900": 239, "15100": 239, "cpualloc": 239, "12500": 239, "352327": 239, "a0": 239, "b0": 239, "a1": 239, "a127": 239, "pickleabl": 239, "broadcasting_stat": 239, "17600": 239, "tensoriteratorbas": 239, "compute_strid": 239, "12700": 239, "allocate_or_resize_output": 239, "10200": 239, "smallvectorimpl": 239, "7400": 239, "6200": 239, "invert_perm": 239, "6064": 239, "5100": 239, "reorder_dimens": 239, "4300": 239, "compatible_strid": 239, "check_tensor_options_and_extract_memory_format": 239, "__memcmp_avx2_movb": 239, "empty_cpu": 239, "1300": 239, "2400": 239, "6100": 239, "compute_fast_setup_typ": 239, "22600": 239, "fast_set_up": 239, "58091": 239, "580": 239, "0x7f19299544d0": 239, "compute_shap": 239, "2300": 239, "coalesce_dimens": 239, "promin": 239, "__add__": 239, "__sub__": 239, "dice": 239, "szymon": 240, "migacz": 240, "set_to_non": 240, "elementwis": [240, 256], "anomali": 240, "detect_anomali": 240, "set_detect_anomali": 240, "emit_nvtx": 240, "nth": 240, "cpunodebind": 240, "membind": 240, "pytorch_script": 240, "omp_num_thread": [240, 258], "thrash": 240, "gomp_cpu_affin": 240, "omp_proc_bind": 240, "omp_schedul": 240, "libgomp": [240, 258], "sleep": 240, "jemalloc": [240, 258], "tcmalloc": [240, 258], "emphas": 240, "fragment": [240, 244], "ccl": 240, "alltoal": [240, 263], "set_float32_matmul_precis": 240, "judgment": 243, "sayak": 244, "paul": 244, "charl": 244, "bensimon": 244, "aot_inductor": 244, "package_constants_in_so": 244, "fullest": 244, "regional_aot": [244, 247, 261], "animesh": 245, "jain": 245, "startup": 245, "inline_inbuilt_nn_modul": 245, "graph_cod": 245, "strateg": 245, "horizont": [247, 260, 261], "foreach_map": [247, 260, 261], "torch_compiler_set_stance_tutori": [247, 253, 261], "torch_compile_torch_function_mod": [247, 251, 261], "torch_export_aoti_python": [247, 254, 261], "torch_compile_user_defined_triton_kernel_tutori": [247, 252, 261], "compile_model": 248, "resnet50_weight": 248, "weights_prepack": 248, "oguz": [249, 250, 252], "ulgen": [249, 250, 252], "sam": [249, 255], "larsen": 249, "fxgraphcach": [249, 250], "aotautogradcach": [249, 250], "redi": [249, 250], "usernam": 249, "aotautograd": [249, 250], "fxgraph": 249, "torchinductor_": 249, "torchinductor_myusernam": [249, 250], "triton_cache_dir": 249, "torchinductor_redis_host": 249, "torchinductor_redis_port": 249, "6379": 249, "cachebench": 250, "onward": 250, "save_cache_artifact": 250, "load_cache_artifact": 250, "artifact_byt": 250, "cache_info": 250, "pgo": 250, "tritoncach": 250, "cubin": [250, 254, 268], "inductorcach": 250, "autotuningcach": 250, "torchinductor_cache_dir": 250, "basetorchfunctionmod": 251, "flopcountermod": 252, "wrap_triton": 252, "footgun": 252, "register_kernel": 252, "register_flop_formula": 252, "flop_count": 252, "mysin": 252, "reappli": 253, "force_eag": 253, "eager_on_recompil": 253, "fail_on_recompil": 253, "torch.export": 254, "torch._inductor.aoti_compile_and_packag": 254, "aot_compil": 254, "torch._export.aoti_load_packag": 254, "ankith": [254, 255], "gunap": [254, 255], "bao": [254, 268], "_export": 254, "aot_load": 254, "runner": 254, "archive_format": 254, "10088": 254, "cagzt6akdaczvxwtbvqe34otfe5jlorktbqlojbzqjqvbfsjlge4": 254, "17160": 254, "c6oytfjmt5w4c7onvtm6fray7clirxt7q5xjbwx3hdydclmwoujz": 254, "16616": 254, "c7ydp7nocyz323hij4tmlf2kcedmwlyg6r57gaqzcsy3huneamu6": 254, "17776": 254, "cyqdf46ordevqhiddvpdpp3uzwatfbzdpl3auj2nx23uxvplnne2": 254, "10856": 254, "cpzfebfgrusqslui7fxsuoo4tvwulmrxirc5tmrpa4mvrbdno7kn": 254, "14608": 254, "c5ukeoz5wmaszd7vczdz2qhtt6n7tdbl3b6wuy4rb2se24fjwfoi": 254, "11376": 254, "csu3nstcp56tsjfycygaqsewpu64l5s6zavvz7537cm4s4cv2k3r": 254, "10984": 254, "cp76lez4glmgq7gedf2u25zvvv6rksv5lav4q22dibd2zicbgwj3": 254, "14736": 254, "c2bb5p6tnwz4elgujqelsrp3unvkgsyiv7xqxmpvuxcm4jfl7pc2": 254, "c6eopmb2b4ngodwsayae4r5q6ni3jlfogfbdk3ypg56tgpzhubfi": 254, "11624": 254, "chmwe6lvoekzfowdbiizitm3haiiuad5kdm6sd2m6mv6dkn2zk32": 254, "15632": 254, "c3jop5g344hj3ztsu4qm6ibxyaaerlhkzh2e6emak23rxfje6jam": 254, "25472": 254, "chaiixybeiuuitm2nmqnxzijzwgnn2n7uuss4qmsupgblfh3h5hk": 254, "139389": 254, "cvk6qzuybruhwxtfblzxiov3rlrziv5fkqc4mdhbmantfu3lmd6t": 254, "cvk6qzuybruhwxtfblzxiov3rlrziv5fkqc4mdhbmantfu3lmd6t_metadata": 254, "47195424": 254, "47523148": 254, "jordi": 255, "ramon": 255, "marco": 255, "carranza": 255, "mvit": 255, "whisper": 255, "blip": 255, "sam2": 255, "timm": 255, "multiscal": 255, "kinet": 255, "mvit_v1_b_weight": 255, "mvit_v1_b": 255, "224x224x3": 255, "input_fram": 255, "num_clip": 255, "print_exc": 255, "batch_dim": 255, "asr": 255, "transcrib": 255, "spoken": 255, "680k": 255, "whisperprocessor": 255, "whisperforconditionalgener": 255, "input_featur": 255, "decoder_input_id": 255, "decoder_start_token_id": 255, "internaltorchdynamoerror": 255, "attributeerror": 255, "dynamiccach": 255, "key_cach": 255, "non_strict": 255, "proxytensor": 255, "gameplai": 255, "gamer": 255, "salesforc": 255, "blip_decod": 255, "384": [255, 283], "caption_input": 255, "model_url": 255, "googleapi": 255, "sfr": 255, "model_base_capfilt_larg": 255, "exportdb": 255, "bos_token_id": 255, "anaconda3": 255, "functional_tensor": 255, "545": 255, "outs_unwrap": 255, "_op_dk": 255, "sam2imagepredictor": 255, "_predict": 255, "unnorm_coord": 255, "unnorm_box": 255, "mask_input": 255, "multimask_output": 255, "return_logit": 255, "image_predict": 255, "sam2_image_predictor": 255, "359": 255, "exporthelp": 255, "model_to_export": 255, "aoti": 255, "preload": 258, "omp": [258, 278], "tunabl": 258, "taskset": 258, "uniform": 258, "uma": 258, "lscpu": 258, "9480": 258, "223": 258, "vendor": 258, "genuineintel": 258, "node0": 258, "node1": 258, "cento": 258, "yum": 258, "libiomp": 258, "perftool": 258, "gperftool": 258, "libjemalloc2": 258, "ninstanc": 258, "ncore": 258, "program_arg": 258, "iomp": 258, "prepend": 258, "core_id": 258, "dafault": 258, "ncores_per_inst": 258, "libtcmalloc": 258, "preliminarili": 258, "deepspe": 259, "marian": 259, "oftentim": 259, "print_peak_memori": 259, "max_memory_alloc": 259, "use_zero": 259, "optimizer_class": 259, "992": 259, "1361": 259, "3453": 259, "6123046875": 259, "1697": 259, "itt": 260, "vtune": 260, "torchcompil": 260, "run_cpu": 260, "graviton": 260, "compressor": 260, "tensorpip": 260, "dcp": 260, "commdebugmod": 260, "124": 261, "galleri": 261, "recipes_sourc": 261, "intermediate_sourc": 261, "torchao": [261, 284], "unstable_sourc": 261, "gpu_quantization_torchao_tutori": [261, 267, 284], "advanced_sourc": 261, "maskedtensor": [261, 284, 287], "maskedtensor_overview": [261, 275, 276, 277, 284], "maskedtensor_adagrad": [261, 274, 284], "vmap_recip": [261, 284, 286], "maskedtensor_advanced_semant": [261, 275, 284], "maskedtensor_spars": [261, 277, 284], "gpu_direct_storag": [261, 266, 284], "readm": 262, "prepare_fx": 262, "convert_fx": 262, "default_weight_observ": 262, "get_default_qconfig_map": 262, "minmaxobserv": 262, "backend_config": 262, "backendpatternconfig": 262, "dtypewithconstraint": 262, "observationtyp": 262, "quantize_fx": 262, "fp32_linear": 262, "quant1": 262, "dequant1": 262, "quant2": 262, "dequant2": 262, "fp32_conv_relu": 262, "quint8_with_constraint": 262, "quant_min_lower_bound": 262, "quant_max_upper_bound": 262, "scale_min_lower_bound": 262, "weighted_int8_dtype_config": 262, "input_dtyp": [262, 265], "weight_dtyp": 262, "qint8": 262, "bias_dtyp": 262, "fuse_conv2d_relu": 262, "convrelu2d": 262, "linear_config": 262, "set_pattern": 262, "set_observation_typ": 262, "output_use_different_observer_as_input": 262, "add_dtype_config": 262, "set_root_modul": 262, "set_qat_modul": 262, "set_reference_quantized_modul": 262, "conv_relu_config": 262, "set_fused_modul": 262, "set_fuser_method": 262, "fused_conv_relu_config": 262, "my_backend": 262, "set_backend_pattern_config": 262, "quant_max": 262, "activation_observ": 262, "with_arg": 262, "quant_min": 262, "qconfig_map": 262, "set_object_typ": 262, "use_bn": 262, "quantizedlinear": 262, "012136868201196194": 262, "zero_point": 262, "qscheme": 262, "per_tensor_affin": 262, "quantizedconvrelu2d": 262, "0029353597201406956": 262, "linear_input_scale_0": 262, "linear_input_zero_point_0": 262, "quantize_per_tensor": 262, "dequantize_2": 262, "015307803638279438": 262, "track_running_stat": 262, "dequantize_1": 262, "get_fbgemm_backend_config": 262, "get_qnnpack_backend_config": 262, "get_native_backend_config": 262, "union": 262, "rfc": [262, 275, 278, 282], "llama3": 263, "freq_ci": 263, "context_parallel": 263, "buffer_seq_dim": 263, "miscalcul": 263, "set_rotate_method": 263, "sdpbackend": 263, "sdpa_exampl": 263, "nhead": 263, "qkv_len": 263, "flash_attent": 263, "cudnn_attent": 263, "qkv": 263, "cp_sdpa_exampl": 263, "_attent": 263, "context_parallel_unshard": 263, "context_parallel_sdpa_exampl": 263, "mesh_shap": 263, "cp_qkv": 263, "cp_out": 263, "junji": 265, "impedi": 265, "starvat": 265, "deadlock": 265, "indefinit": 265, "diagnost": 265, "flight_record": 265, "torch_nccl_trace_buffer_s": 265, "torch_nccl_dump_on_timeout": 265, "torch_fr_dump_temp_fil": 265, "nccl_trace_rank_": 265, "torch_nccl_trace_cpp_stack": 265, "torch_symbolize_mod": 265, "torch_nccl_enable_tim": 265, "dladdr": 265, "addr2lin": 265, "debuginfowrit": 265, "registerwrit": 265, "_dump_nccl_trac": 265, "includecollect": 265, "includestacktrac": 265, "onlyact": 265, "pg_config": 265, "default_pg": 265, "pg_statu": 265, "last_enqueued_collect": 265, "last_started_collect": 265, "last_completed_collect": 265, "test_short_pickl": 265, "test_c10d_nccl": 265, "3647": 265, "spawn_main": 265, "record_id": 265, "pg_id": 265, "collective_seq_id": 265, "p2p_seq_id": 265, "op_id": 265, "profiling_nam": 265, "time_created_n": 265, "1724779239936775119": 265, "input_s": 265, "time_discovered_started_n": 265, "time_discovered_completed_n": 265, "1724779239975811724": 265, "retir": 265, "timeout_m": 265, "600000": 265, "is_p2p": 265, "fr_trace": 265, "use_distribut": 265, "torchfrtrac": 265, "culprit": 265, "recod": 265, "torch_nccl_debug_info_temp_fil": 265, "trace_": 265, "trace_0": 265, "trace_1": 265, "bounc": 266, "gd": 266, "cufil": 266, "4kb": 266, "storage_align": 266, "serialization_config": 266, "gdsfile": 266, "skip_data": 266, "faketensormod": 266, "gds_register_buff": 266, "cufilebufregist": 266, "save_storag": 266, "cufilewrit": 266, "fake_tensor": 266, "fake_sd": 266, "untyped_storag": 266, "_checkpoint_offset": 266, "o_rdwr": 266, "sd_load": 266, "load_storag": 266, "cufileread": 266, "hdcharl": 267, "pg509": 267, "330": 267, "myenv": 267, "facebookresearch": 267, "vit_h": 267, "fbaipublicfil": 267, "segment_anyth": 267, "sam_vit_h_4b8939": 267, "sam_checkpoint_base_path": 267, "image_encod": 267, "instant": 267, "protect": 267, "43m": 267, "17gb": 267, "7x": 267, "16m": 267, "95m": 267, "24gb": 267, "int4": 267, "int8dynamicactivationint8weightconfig": 267, "int8weightonlyconfig": 267, "int4weightonlyconfig": 267, "apply_dynamic_qu": 267, "apply_weight_only_int8_qu": 267, "04m": 267, "58gb": 267, "force_fuse_int_mm_with_mul": 267, "78m": 267, "37gb": 267, "unquant": 267, "epilogu": [267, 278], "enlarg": 267, "39gb": 267, "appl": 267, "677": 267, "729": 267, "65m": 267, "chunyuan": [268, 278], "cpp_wrapper": 268, "opt_fn": 268, "cpp_fused_add_lift_fresh_0": 268, "constant0": 268, "inductor_entry_cpp": 268, "19l": 268, "cppwrappercodecach": 268, "cpp_wrapper_src": 268, "c2buojsvlqbywxe3itb43hldieh4jqulk72iswa2awalwev7hjn2": 268, "_wrap_func": 268, "args_tensor": 268, "constants_tensor": 268, "lift_fresh": 268, "get_cuda_stream": 268, "triton_poi_fused_add_lift_fresh_0": 268, "cudaguard": 268, "device_guard": 268, "loadkernel": 268, "torchinductor_us": 268, "cmm6xjgijjffxjku4akv55eyzibirvw6bti6uqmfnruujm5cvvmw": 268, "triton_poi_fused_add_lift_fresh_0_0d1d2d3": 268, "cudeviceptr": 268, "var_0": 268, "reinterpret_cast": 268, "var_1": 268, "var_2": 268, "var_3": 268, "kernel_args_var_0": 268, "cudastream_t": 268, "getcurrentcudastream": 268, "launchkernel": 268, "czbpeilh4qqmbyejdgsbpdfuk2ss5jigl2qjb7xs4gearrjvuwem": 268, "zhaoqiong": 269, "zheng": 269, "xu": 269, "han": 269, "msvc": 269, "desktop": 269, "checkmark": 269, "cmd": 269, "vc": 269, "vcvars64": 269, "opt_foo1": 269, "9074e": 269, "3994e": 269, "3894e": 269, "2630e": 269, "3060e": 269, "1833e": 269, "4016e": 269, "1905e": 269, "0637e": 269, "3648e": 269, "3728e": 269, "2863e": 269, "6888e": 269, "5442e": 269, "6790e": 269, "2025e": 269, "2647e": 269, "2684e": 269, "2483e": 269, "2845e": 269, "7747e": 269, "2028e": 269, "1431e": 269, "7196e": 269, "5304e": 269, "1945e": 269, "6654e": 269, "7376e": 269, "3644e": 269, "3600e": 269, "0157e": 269, "7200e": 269, "0146e": 269, "8175e": 269, "4057e": 269, "8119e": 269, "2853e": 269, "2773e": 269, "5082e": 269, "4615e": 269, "4140e": 269, "2130e": 269, "0762e": 269, "3914e": 269, "1122e": 269, "6895e": 269, "8852e": 269, "3310e": 269, "4101e": 269, "8318e": 269, "2355e": 269, "9290e": 269, "3707e": 269, "3754e": 269, "3768e": 269, "8970e": 269, "1171e": 269, "9944e": 269, "2553e": 269, "3394e": 269, "3428e": 269, "8400e": 269, "1756e": 269, "0654e": 269, "7973e": 269, "4019e": 269, "1886e": 269, "9194e": 269, "3632e": 269, "1811e": 269, "1615e": 269, "6622e": 269, "2089e": 269, "2011e": 269, "0659e": 269, "0892e": 269, "1932e": 269, "3888e": 269, "3898e": 269, "3218e": 269, "4139e": 269, "4000e": 269, "1192e": 269, "0175e": 269, "6432e": 269, "0498e": 269, "4115e": 269, "3212e": 269, "0964e": 269, "0127e": 269, "7244e": 269, "2799e": 269, "3595e": 269, "0907e": 269, "7191e": 269, "4062e": 269, "3672e": 269, "8502e": 269, "5216e": 269, "6046e": 269, "icx": 269, "win64": 269, "clang": 269, "inductor_window": 270, "mobile_interpret": 273, "1369": 274, "weed": 274, "faithfulli": 274, "state_sum": 274, "addcmul_": 274, "addcdiv_": 274, "clr": 274, "_make_spars": 274, "grad_indic": 274, "sparse_coo_tensor": [274, 277], "_indic": 274, "grad_valu": 274, "_valu": 274, "sparse_mask": [274, 277], "std_valu": 274, "sqrt_": 274, "state_sum2": 274, "masked_grad": 274, "get_data": [274, 276], "std2": 274, "masked_tensor": [274, 276, 277], "to_spars": [274, 277], "param2": 274, "dodg": 274, "make_spars": 274, "brittl": 274, "argu": 274, "densif": 274, "csc": [274, 277], "bsr": [274, 277], "bsc": 274, "inconveni": 274, "conflat": 274, "disentangl": 274, "purposefulli": 274, "citizen": [274, 276], "relianc": 274, "unreli": [274, 276], "maskedarrai": [274, 287], "Their": [275, 277], "unspecifi": [275, 276, 277, 287], "intersect": 275, "logical_or": 275, "to_tensor": [275, 276], "mt0": 275, "get_mask": [275, 276], "mt1": 275, "revisit": 275, "ma": 275, "masked_arrai": 275, "mask0": 275, "mask1": 275, "necessit": 275, "as_masked_tensor": 276, "as_tensor": 276, "afterthought": 276, "born": 276, "recur": 276, "inabl": 276, "manifest": 276, "10729": 276, "troubl": 276, "52248": 276, "frustrat": 276, "4132": 276, "67180": 276, "longstand": 276, "unsaf": 276, "61474": 276, "nanmax": 276, "nanmin": 276, "lend": 276, "substructur": 277, "sparse_coo": 277, "sparse_csr": 277, "ndim": 277, "nse": 277, "int64": 277, "sparse_tensor_data": 277, "sparse_tensor_mask": 277, "dense_masked_tensor": 277, "to_sparse_coo": 277, "to_sparse_csr": 277, "nuanc": 277, "crow_indic": 277, "col_indic": 277, "nnz": 277, "to_dens": 277, "is_spars": 277, "is_sparse_coo": 277, "is_sparse_csr": 277, "mt": 277, "mt2": 277, "surfac": 277, "synergi": 277, "invest": 277, "lesli": 278, "fang": 278, "torchinductor_max_autotune_gemm_backend": 278, "torchinductor_freez": 278, "log_autotuning_result": 278, "amp_en": 278, "outperform": 278, "linear_unari": 278, "64x16": 278, "32x16": 278, "cpp_packed_gemm_0": 278, "2142": 278, "_linear_pointwis": 278, "2441": 278, "cpp_fused__to_copy_relu_1": 278, "kernel_micro_gemm_amx_kernel_32_2": 278, "amxstat": 278, "amx_stat": 278, "__restrict__": 278, "lda": 278, "ldb": 278, "ldc": 278, "uint8_t": 278, "tilecfg_row": 278, "kernel_micro_gemm": 278, "64l": 278, "tid": 278, "omp_get_thread_num": 278, "mc_block_id": 278, "num_mc_blocks_per_thread": 278, "n_block_start": 278, "n_block_end": 278, "nc_block": 278, "kc": 278, "k_block_start": 278, "k_block_end": 278, "kc_block": 278, "nci": 278, "nc_block_end": 278, "m_end": 278, "m_start": 278, "16l": 278, "div_floor_integ": 278, "n_end": 278, "n_start": 278, "loadu": 278, "local_acc_buf": 278, "nr": 278, "32l": 278, "invalu": 279, "nt": 279, "poss": 279, "irregularli": 279, "legal": 279, "semnat": 279, "law": 279, "daniil": 281, "lyakhov": 281, "aamir": 281, "nazir": 281, "suslov": 281, "yamini": 281, "nimmagadda": 281, "kozlov": 281, "openvinoquant": 281, "quantize_pt2": 281, "prepare_pt2": 281, "convert_pt2": 281, "traced_b": 281, "disable_patch": 281, "asymmetr": 281, "elu": 281, "prelu": 281, "quantizationpreset": 281, "model_typ": 281, "modeltyp": 281, "ignored_scop": 281, "layer_1": 281, "layer_2": 281, "layer_3": 281, "ignoredscop": 281, "regex": 281, "layer_": 281, "subgraph": 281, "target_devic": 281, "cpu_spr": 281, "targetdevic": 281, "fold": 281, "fold_quant": 281, "optimized_model": 281, "smoothquant": 281, "biascorrect": 281, "calibration_load": 281, "transform_fn": 281, "data_item": 281, "calibration_dataset": 281, "smooth_quant": 281, "fast_bias_correct": 281, "yuanhao": 282, "ji": 282, "effortless": 282, "huawei": 282, "torch_device_backend_autoload": 282, "torch_foo": 282, "_autoload": 282, "entry_point": 282, "habana_framework": 282, "__autoload": 282, "device_backend": 282, "is_load": 282, "entrypoint": 282, "_force_cutlass": 283, "2560": 283, "10240": 283, "dense_output": 283, "dense_t": 283, "1e3": 283, "sparse_output": 283, "sparse_t": 283, "80gb": 283, "870m": 283, "630m": 283, "382x": 283, "weightnormsparsifi": 283, "preprocess_validation_funct": 283, "only_second": 283, "return_overflowing_token": 283, "return_offsets_map": 283, "sample_map": 283, "overflow_to_sample_map": 283, "example_id": 283, "sample_idx": 283, "sequence_id": 283, "offset_map": 283, "preprocess_train_funct": 283, "start_posit": 283, "end_posit": 283, "start_char": 283, "answer_start": 283, "end_char": 283, "context_start": 283, "context_end": 283, "compute_metr": 283, "start_logit": 283, "end_logit": 283, "n_best": 283, "max_answer_length": 283, "example_to_featur": 283, "defaultdict": 283, "predicted_answ": 283, "feature_index": 283, "start_index": 283, "argsort": 283, "end_index": 283, "logit_scor": 283, "best_answ": 283, "prediction_text": 283, "theoretical_answ": 283, "measure_execution_tim": 283, "dataset_for_model": 283, "remove_column": 283, "set_format": 283, "batch_size_to_time_sec": 283, "column_nam": 283, "p50": 283, "automodelforquestionansw": 283, "squad_dataset": 283, "tokenized_squad_dataset": 283, "data_col": 283, "datacollatorwithpad": 283, "hyperparam": 283, "training_arg": 283, "trainingargu": 283, "num_train_epoch": 283, "lr_scheduler_typ": 283, "per_device_train_batch_s": 283, "per_device_eval_batch_s": 283, "eval_dataset": 283, "fp16_baselin": 283, "fp16_time": 283, "cuda_fp16": 283, "exact_match": 283, "53358561967833": 283, "9280493093186": 283, "927572380751371": 283, "607915310189128": 283, "18846387788653": 283, "91255673766136": 283, "sparsity_level": 283, "elemen": 283, "sparse_block_shap": 283, "zeros_per_block": 283, "sparse_config": 283, "tensor_fqn": 283, "named_modul": 283, "paramter": 283, "bertoutput": 283, "fakespars": 283, "elementwise_affin": 283, "59602649006622": 283, "51610004515979": 283, "edgeitem": 283, "0237": 283, "0130": 283, "0462": 283, "0272": 283, "0436": 283, "0492": 283, "0844": 283, "0340": 283, "0302": 283, "0350": 283, "0303": 283, "0175": 283, "0529": 283, "0327": 283, "0213": 283, "0258": 283, "0239": 283, "0380": 283, "0562": 283, "0432": 283, "0598": 283, "0262": 283, "0227": 283, "0244": 283, "0921": 283, "0784": 283, "0761": 283, "0225": 283, "0395": 283, "0684": 283, "0344": 283, "metrics_spars": 283, "sparse_perf": 283, "43897824030275": 283, "48718950090766": 283, "621004460379481": 283, "368514601141214": 283, "702805917710066": 283, "19364519417286": 283, "87x": 283, "016": 284, "autovector": [286, 287], "42368": 286, "unsuccessfulli": 286, "rummag": 286, "shenanigin": 286, "8304": 286, "23475": 286, "performantli": 286, "7786": 286, "batch_of_sampl": 286, "grad_sampl": 286, "pypi": 287, "optimizi": 287, "coo": 287, "csr": 287, "flight": 287, "flightrecord": 287, "autoload": 287}, "objects": {}, "objtypes": {}, "objnames": {}, "titleterms": {"onnx": [0, 113, 114, 115, 116, 117], "live": 0, "tutori": [0, 38, 41, 53, 54, 56, 58, 61, 91, 98, 104, 124, 127, 137, 139, 170, 176, 178, 179, 186, 194, 195, 198, 199, 214, 215, 254, 262, 268], "torchrl": [1, 17, 178], "object": [1, 106, 144, 198], "code": [1, 2, 10, 17, 38, 39, 58, 98, 221, 268, 274], "ddpg": 1, "loss": [1, 15, 39, 47, 50, 53, 56, 99, 103, 104, 105, 142, 146, 155, 178, 224, 243], "overview": [1, 21, 64, 113, 117, 124, 147, 155, 160, 183, 196, 206, 215, 240, 265, 276], "prerequisit": [1, 39, 104, 113, 117, 177, 208, 212, 230, 244, 245, 249, 250, 252, 253, 254, 255, 265, 268, 278, 281], "import": [1, 15, 48, 59, 92, 191, 227, 230, 241, 242, 243], "setup": [1, 21, 23, 92, 112, 130, 147, 154, 155, 166, 174, 177, 188, 189, 200, 204, 205, 212, 227, 230, 241, 242, 243, 244, 245, 256, 262, 263, 283], "lossmodul": 1, "The": [1, 7, 10, 92, 94, 103, 143, 174, 175, 184, 199, 221], "__init__": [1, 36], "method": [1, 9, 18, 154, 166, 198, 237, 277], "valu": [1, 155, 170, 178, 195], "estim": [1, 162], "actor": 1, "put": [1, 162, 177, 198], "thing": [1, 17], "togeth": [1, 17, 142, 162, 169, 177, 198, 224], "forward": [1, 7, 119, 140, 147, 158, 161, 198, 199], "call": [1, 193], "environ": [1, 17, 57, 141, 155, 162, 178, 191, 267, 269], "transform": [1, 11, 17, 44, 45, 55, 99, 128, 129, 139, 142, 161, 171, 173, 174, 178, 183, 186, 199], "parallel": [1, 11, 48, 58, 60, 64, 133, 138, 139, 140, 142, 152, 153, 165, 173, 174, 209, 240, 263], "execut": [1, 17, 23, 114, 174, 180, 188, 230, 240], "normal": [1, 47, 178, 243], "observ": 1, "stat": 1, "build": [1, 4, 5, 9, 13, 35, 99, 106, 159, 175, 192, 199, 243, 285], "model": [1, 7, 11, 15, 21, 23, 24, 35, 39, 40, 41, 48, 53, 59, 64, 79, 80, 89, 95, 97, 99, 101, 103, 104, 109, 111, 113, 114, 121, 123, 127, 128, 139, 140, 142, 143, 150, 152, 155, 156, 159, 162, 163, 165, 166, 173, 174, 176, 177, 184, 186, 188, 189, 191, 198, 204, 205, 212, 219, 220, 221, 223, 227, 230, 234, 235, 240, 241, 242, 244, 254, 255, 262, 281], "explor": [1, 23], "data": [1, 7, 11, 24, 28, 36, 40, 47, 48, 53, 54, 56, 58, 59, 60, 92, 99, 102, 112, 127, 138, 139, 140, 142, 145, 146, 152, 178, 184, 186, 188, 189, 191, 195, 196, 216, 227, 240, 241, 242, 243, 265, 276], "collector": [1, 155, 178], "evalu": [1, 53, 127, 143, 144, 145, 184, 224], "your": [1, 13, 17, 36, 64, 97, 101, 112, 119, 168, 198, 209, 227, 267], "record": [1, 188, 265], "replai": [1, 155, 178, 179], "buffer": [1, 155, 178, 240], "storag": [1, 255, 266], "batch": [1, 12, 17, 148, 161, 180, 192, 213, 240, 255], "size": [1, 255], "modul": [1, 7, 18, 71, 89, 99, 112, 119, 120, 155, 158, 170, 176, 196, 229, 237, 255], "construct": [1, 23, 59, 276, 277], "target": [1, 162, 240], "network": [1, 7, 35, 47, 50, 56, 92, 106, 109, 145, 146, 155, 162, 178, 179, 184, 186, 199, 224, 227, 241, 242, 243, 244], "updat": [1, 50, 162, 180], "optim": [1, 39, 40, 47, 56, 73, 103, 106, 112, 120, 140, 144, 169, 182, 196, 204, 205, 213, 240, 242, 243, 246, 258, 259], "time": [1, 22, 42, 51, 68, 74, 78, 86, 90, 100, 110, 118, 119, 122, 177, 185, 230, 236, 239, 244, 245, 247, 249, 250, 261, 284], "train": [1, 3, 4, 7, 11, 14, 17, 19, 24, 27, 35, 36, 47, 53, 56, 57, 59, 92, 94, 97, 101, 103, 106, 121, 127, 139, 142, 143, 145, 146, 150, 151, 154, 155, 162, 169, 173, 178, 179, 184, 186, 189, 196, 200, 214, 240, 243, 248, 252, 281], "polici": [1, 17, 139, 155, 178], "experi": [1, 17, 18, 144, 262], "result": [1, 3, 48, 56, 79, 114, 119, 144, 145, 149, 178, 184, 186, 188, 196, 221, 223, 225, 283], "conclus": [1, 2, 3, 4, 5, 7, 9, 17, 18, 19, 21, 24, 53, 86, 104, 113, 114, 117, 124, 130, 141, 142, 147, 155, 159, 160, 162, 163, 169, 172, 174, 178, 183, 193, 195, 196, 199, 200, 202, 205, 206, 207, 208, 209, 212, 213, 229, 237, 240, 244, 245, 249, 250, 251, 252, 253, 254, 255, 256, 258, 263, 265, 266, 267, 268, 269, 274, 275, 276, 277, 278, 279, 281, 282, 283], "next": [1, 47, 56, 79, 177, 178], "step": [1, 124, 169, 174, 175, 177, 178, 188, 199, 225, 227, 230, 241, 242, 243, 244, 245], "autograd": [2, 4, 12, 13, 34, 46, 66, 67, 81, 94, 120, 143, 147, 158, 182], "c": [2, 3, 4, 7, 8, 9, 10, 12, 13, 214, 239, 268], "frontend": [2, 7, 89, 91], "basic": [2, 7, 37, 38, 147, 152, 158, 172, 175, 180, 193, 195, 213, 252], "oper": [2, 4, 5, 9, 10, 12, 13, 19, 43, 52, 94, 108, 117, 172, 202, 240, 262, 276, 277, 279], "comput": [2, 17, 22, 34, 42, 46, 51, 68, 74, 78, 86, 90, 100, 108, 110, 111, 118, 122, 127, 161, 166, 185, 223, 236, 240, 247, 261, 284], "higher": 2, "order": [2, 240], "gradient": [2, 15, 34, 79, 95, 140, 171, 200, 224, 240, 243, 276], "us": [2, 3, 7, 9, 11, 14, 15, 16, 27, 38, 46, 54, 57, 87, 112, 114, 117, 119, 121, 126, 138, 140, 147, 148, 150, 152, 153, 155, 156, 158, 171, 173, 175, 180, 181, 182, 183, 188, 189, 191, 203, 207, 208, 209, 215, 221, 223, 229, 230, 238, 240, 241, 252, 254, 256, 258, 259, 266, 269, 272, 276, 278], "custom": [2, 4, 5, 8, 9, 10, 13, 17, 18, 19, 36, 55, 71, 117, 120, 126, 127, 133, 148, 149, 158, 175, 176, 195, 198, 209], "function": [2, 15, 18, 24, 34, 39, 47, 50, 56, 67, 79, 89, 92, 99, 103, 104, 105, 106, 112, 120, 148, 149, 158, 161, 166, 171, 176, 178, 212, 225, 230, 240, 243, 251], "translat": [2, 123, 129, 184], "from": [2, 9, 10, 24, 46, 54, 112, 114, 121, 145, 146, 150, 167, 184, 191, 196, 198, 229, 241], "python": [2, 4, 5, 9, 10, 19, 89, 175, 254, 256], "cuda": [3, 4, 10, 54, 86, 172, 240], "graph": [3, 34, 46, 101, 108, 114, 147, 193, 195, 240, 255, 281], "pytorch": [3, 7, 9, 10, 13, 15, 18, 24, 27, 46, 49, 54, 58, 61, 64, 66, 67, 69, 71, 72, 73, 77, 85, 93, 96, 97, 98, 99, 101, 102, 103, 106, 107, 108, 109, 111, 114, 117, 119, 120, 137, 154, 163, 172, 177, 188, 191, 196, 199, 202, 203, 211, 213, 214, 215, 216, 218, 221, 222, 227, 228, 230, 231, 238, 240, 241, 242, 243, 248, 262, 264, 272, 281], "api": [3, 7, 64, 94, 140, 158, 163, 169, 175, 221, 240, 256, 265, 268], "get": [3, 13, 35, 86, 111, 138, 140, 152, 160, 168, 182, 207, 208, 209, 214, 215, 279], "start": [3, 86, 101, 138, 140, 152, 168, 182, 207, 208, 209, 214, 215, 239, 244, 245, 258, 279], "set": [4, 5, 92, 141, 144, 191, 204, 205, 212, 240, 249, 262, 265, 267, 269], "up": [4, 5, 76, 120, 144, 191, 198, 204, 205, 212, 213, 239, 262, 267, 269], "system": [4, 5], "defin": [4, 5, 7, 9, 12, 24, 35, 47, 50, 53, 67, 104, 113, 120, 144, 174, 178, 191, 198, 225, 227, 239, 241, 242, 243, 244, 252, 262], "op": [4, 5, 12, 195, 251], "ad": [4, 5, 12, 19, 92, 189, 196, 224, 252], "backend": [4, 5, 12, 13, 18, 141, 154, 160, 175, 215, 240, 248, 258, 262, 281], "implement": [4, 5, 9, 12, 39, 56, 79, 105, 117, 148, 170, 175, 180, 181, 183, 212, 274, 276], "an": [4, 13, 17, 47, 109, 111, 117, 121, 143, 155, 178, 196, 205, 229, 258, 265], "regist": [4, 7, 12, 13, 18, 200], "torch": [4, 8, 34, 46, 85, 99, 108, 112, 113, 121, 145, 147, 152, 176, 183, 192, 193, 194, 195, 199, 204, 212, 224, 225, 229, 237, 245, 250, 251, 252, 253, 254, 255, 256, 258, 266, 269, 276, 281, 286], "compil": [4, 8, 131, 147, 160, 183, 192, 193, 199, 204, 205, 212, 244, 245, 249, 250, 251, 252, 253, 254, 256, 269, 278, 281], "support": [4, 8, 12, 13, 19, 92, 101, 117, 183, 252, 277], "hybrid": [4, 89, 91], "registr": 4, "test": [4, 5, 13, 17, 19, 47, 79, 92, 148, 192, 198, 227, 239], "creat": [4, 5, 10, 16, 36, 40, 48, 53, 102, 106, 108, 112, 144, 145, 146, 159, 166, 176, 240], "mutabl": [4, 19], "sycl": 5, "interfac": 5, "initi": [5, 43, 52, 56, 57, 140, 141, 152, 154, 162, 170, 227, 241, 242, 279], "packag": [5, 15, 82], "extens": [5, 13, 16, 133, 136, 175, 202, 205, 214, 237, 248, 282], "motiv": [7, 89, 274], "write": [7, 17, 55, 154, 189, 198, 274], "applic": [7, 154, 175, 203, 237], "neural": [7, 15, 35, 47, 50, 92, 112, 162, 166, 215, 227, 241, 242, 243, 244], "paramet": [7, 16, 35, 39, 40, 48, 99, 121, 176, 178, 180, 181, 225, 240, 241], "submodul": 7, "travers": 7, "hierarchi": [7, 221], "run": [7, 38, 48, 53, 54, 57, 58, 59, 79, 89, 98, 104, 144, 152, 188, 191, 195, 204, 205, 212, 230, 238], "mode": [7, 23, 24, 158, 161, 251, 278], "ownership": 7, "dcgan": [7, 56], "what": [7, 13, 14, 18, 21, 47, 56, 60, 61, 94, 112, 121, 149, 156, 171, 172, 205, 208, 209, 221, 242, 254, 258, 259, 265, 283, 286], "wa": 7, "gan": [7, 56], "agan": 7, "gener": [7, 18, 56, 79, 121, 144, 146, 225, 233, 240], "discrimin": [7, 56, 105], "load": [7, 15, 36, 40, 41, 47, 53, 57, 104, 121, 127, 150, 152, 184, 186, 207, 216, 225, 227, 229, 232, 233, 234, 240, 241, 242, 243, 266], "loop": [7, 17, 39, 103, 155, 178, 179], "move": [7, 102], "gpu": [7, 47, 48, 59, 83, 92, 121, 172, 188, 196, 214, 240, 267, 272], "checkpoint": [7, 59, 121, 139, 152, 162, 206, 207, 229, 233, 240], "recov": 7, "state": [7, 140, 259], "inspect": [7, 147, 170, 176, 189, 224], "imag": [7, 15, 47, 62, 63, 101, 114, 127, 177, 191, 255], "class": [8, 9, 14, 17, 35, 55, 104, 170, 196], "export": [8, 113, 114, 117, 121, 194, 195, 254, 255, 281], "why": [8, 10, 57, 60, 142, 143, 208, 209, 276, 279], "do": [8, 12, 47, 94, 149, 163], "we": [8, 94], "need": [8, 12, 94, 199], "make": [8, 14, 105, 203], "fake": 8, "extend": [9, 13, 117, 176, 199], "bind": 9, "exampl": [9, 16, 19, 79, 83, 89, 94, 95, 106, 109, 111, 120, 121, 143, 199, 214, 215, 248, 253, 258, 265, 268, 278, 282], "project": [9, 199], "With": [9, 188], "cmake": 9, "serial": [9, 18, 176], "deseri": [9, 18], "take": 9, "return": [9, 143], "bound": 9, "author": [10, 114], "integr": [10, 18, 95], "manual": 10, "when": [10, 142, 149, 150, 254, 276], "should": [10, 60, 142], "i": [10, 14, 18, 32, 47, 56, 60, 61, 112, 121, 149, 150, 156, 169, 171, 199, 202, 208, 209, 221, 224, 242, 255, 259, 276, 286], "distribut": [11, 14, 20, 23, 57, 58, 59, 60, 64, 86, 133, 152, 153, 154, 174, 181, 182, 196, 206, 207, 240], "pipelin": [11, 153, 173, 174], "dispatch": [12, 13, 183], "schema": 12, "For": [12, 94, 234], "In": [12, 94, 102, 235], "place": [12, 94, 102], "view": [12, 188], "go": [12, 47, 56, 79, 191, 199], "beyond": 12, "autocast": [12, 224], "tracer": 12, "new": [13, 18, 67, 105, 120, 148], "": [13, 19, 108, 162, 275], "kei": [13, 255], "full": [13, 39, 92], "list": 13, "kernel": [13, 18, 86, 166, 212, 213, 252], "jit": [13, 177], "against": 13, "nativ": [13, 203], "backward": [13, 139, 140, 147, 148, 149, 169], "compat": 13, "known": 13, "issu": 13, "addit": [13, 124, 137, 172, 174, 188, 200, 265], "note": [13, 105, 223], "futur": [13, 18], "work": [13, 14, 18, 40, 138, 139, 140, 142, 163, 207, 282], "stai": 13, "touch": 13, "uneven": 14, "input": [14, 56, 59, 79, 149, 196, 199, 225, 240], "join": 14, "context": [14, 263], "manag": [14, 172], "requir": [14, 21, 114, 143, 176, 221, 255, 259, 283], "distributeddataparallel": [14, 152, 240], "zeroredundancyoptim": [14, 259], "pass": [14, 119, 141, 147, 169, 192, 227], "keyword": 14, "argument": 14, "how": [14, 18, 38, 138, 139, 140, 142, 169, 207, 209, 221, 227, 238, 259, 269, 282], "doe": [14, 21, 143, 283], "joinabl": 14, "joinhook": 14, "toi": 14, "transfer": [15, 127], "introduct": [15, 27, 46, 56, 64, 86, 93, 95, 96, 97, 98, 101, 102, 103, 108, 116, 141, 170, 172, 174, 188, 191, 193, 196, 197, 202, 227, 230, 241, 242, 243, 249, 250, 258, 263, 268, 269, 274, 277, 278, 281], "underli": 15, "principl": [15, 277], "select": [15, 155, 263, 285], "devic": [15, 18, 35, 121, 139, 226, 229, 232, 240], "content": [15, 120, 213], "style": [15, 199], "descent": 15, "numpi": [16, 43, 52, 76, 102, 120, 275], "scipi": 16, "less": 16, "parametr": [16, 170, 176], "pendulum": 17, "effect": 17, "action": [17, 155], "_step": 17, "reset": 17, "simul": 17, "_reset": 17, "metadata": [17, 18], "env": 17, "_spec": 17, "spec": 17, "shape": [17, 41, 102, 195, 231], "reproduc": 17, "seed": [17, 102], "wrap": [17, 19, 112, 139, 198, 239, 252], "envbas": 17, "our": [17, 23, 148, 154, 169, 192, 227, 241, 242, 243], "rollout": 17, "simpl": [17, 48, 94, 114, 159, 184, 224, 230], "facilit": 18, "privateuse1": 18, "via": [18, 265], "guard": [18, 195], "other": [18, 23, 99, 101, 103, 172, 188], "improv": [18, 119, 188, 213, 281], "user": [18, 85, 252], "renam": 18, "name": [18, 145, 146, 195], "properti": 18, "relat": [18, 41, 191, 237], "pil": 19, "crop": 19, "combin": [20, 142, 152], "dataparallel": [20, 48, 60, 92, 121, 152], "rpc": [20, 133, 153, 180, 181, 182, 211, 264], "framework": [20, 181, 182], "beta": [21, 24, 158, 159, 183, 204, 205, 213, 217, 251, 254, 256, 280], "acceler": [21, 102, 112, 168, 199, 266, 283], "bert": [21, 283], "semi": [21, 27, 283], "structur": [21, 283], "2": [21, 24, 47, 48, 89, 114, 141, 166, 174, 175, 188, 189, 198, 225, 227, 230, 239, 241, 242, 243, 262, 281, 283], "4": [21, 24, 47, 89, 114, 175, 177, 188, 189, 225, 227, 230, 239, 241, 242, 243, 262, 281, 283], "sparsiti": [21, 277, 283], "problem": [21, 283], "solv": [21, 283], "intro": [21, 201, 283], "establish": 21, "baselin": 21, "prune": [21, 176, 283], "spars": [21, 274, 277, 283], "infer": [21, 45, 121, 127, 177, 213, 214, 224, 234, 240, 248, 254], "torchrec": [23, 196, 197], "shard": [23, 64, 138, 139, 140, 142, 196, 259], "instal": [23, 86, 95, 114, 177, 196, 215, 238, 269, 281], "embed": [23, 101, 111, 196], "distributedmodelparallel": [23, 196], "multiprocess": 23, "tabl": [23, 120, 130], "wise": 23, "static": [24, 105, 215, 255], "quantiz": [24, 177, 215, 262, 267, 281], "eager": 24, "1": [24, 47, 89, 114, 141, 166, 174, 175, 188, 189, 195, 198, 225, 227, 230, 239, 241, 242, 243, 262, 281], "architectur": 24, "helper": [24, 212, 277], "3": [24, 47, 48, 89, 114, 141, 174, 175, 188, 189, 225, 227, 230, 239, 241, 242, 243, 262, 281], "dataset": [24, 29, 36, 48, 55, 97, 101, 103, 112, 126, 198, 243], "loader": [24, 92], "imagenet": 24, "post": [24, 281], "5": [24, 47, 114, 188, 189, 225, 230, 239, 243, 262], "awar": 24, "speedup": [24, 193, 224], "supervis": 27, "learn": [27, 37, 38, 49, 61, 89, 105, 106, 107, 120, 127, 133, 162, 172, 178, 179, 180, 182, 188, 225, 227, 230, 238, 241, 242, 243, 254, 258, 265], "usb": 27, "built": [27, 262], "upon": 27, "freematch": 27, "softmatch": 27, "cifar": [27, 104], "10": [27, 104, 169], "onli": [27, 214, 215], "40": 27, "label": [27, 191], "specif": [27, 191, 240], "imbalanc": 27, "algorithm": [27, 179], "audio": [28, 29, 30, 31, 32, 33], "augment": [28, 30, 86, 109, 240], "featur": [30, 31, 95, 109, 127, 139, 188, 191, 196, 214, 215], "extract": [31, 191], "o": 32, "resampl": 33, "automat": [34, 108, 158, 224, 255], "differenti": [34, 46, 108, 158], "tensor": [34, 43, 52, 66, 77, 84, 97, 102, 108, 120, 130, 133, 142, 143, 145, 169, 183, 199, 205, 237, 240, 255, 277, 279], "disabl": [34, 240], "track": [34, 149, 189], "more": [34, 94, 102, 143, 160, 161, 180, 188, 206, 225, 227, 230, 238, 241, 242, 243], "option": [34, 46, 48, 124, 198, 200, 227, 258, 281], "read": [34, 35, 36, 39, 44, 46, 57, 59, 60, 113, 114, 116, 117, 119, 124, 150, 151, 155, 191, 221, 240, 262, 274, 276, 277], "jacobian": [34, 161, 166], "product": [34, 161, 166, 183], "further": [34, 35, 36, 39, 44, 46, 57, 59, 60, 113, 114, 116, 117, 119, 124, 127, 150, 151, 155, 199, 240, 262, 274, 276, 277], "layer": [35, 95, 99, 142, 148, 199, 240], "nn": [35, 71, 72, 82, 89, 99, 112, 120, 121, 128, 129, 176, 199, 229, 237, 255], "flatten": 35, "linear": [35, 99, 106, 112], "relu": [35, 262], "sequenti": [35, 112], "softmax": [35, 106, 276], "dataload": [36, 55, 97, 103, 112], "iter": [36, 53, 55, 176], "visual": [36, 95, 101, 114, 127, 169, 184, 186, 189, 200, 221, 223], "file": [36, 53, 114, 121, 150, 184, 235, 265], "__len__": 36, "__getitem__": 36, "prepar": [36, 53, 145, 146, 184, 188, 219, 220, 262, 274, 275, 276], "through": [36, 55, 89, 227, 262], "thi": [38, 61, 139, 169, 199, 282], "guid": [38, 140, 172, 240], "hyperparamet": [39, 92, 178, 179], "quickstart": 40, "save": [40, 41, 57, 59, 114, 121, 139, 143, 149, 150, 152, 162, 169, 206, 207, 224, 225, 232, 233, 234, 235, 241, 266], "weight": [41, 50, 56, 69, 120, 215], "attribut": [43, 52, 95, 223], "bridg": [43, 52, 102], "arrai": [43, 52], "totensor": 44, "lambda": 44, "fast": [45, 79, 213], "better": [45, 269, 278], "A": [46, 49, 61, 94, 95, 105, 148, 172, 221, 224, 233, 239, 241], "gentl": 46, "background": [46, 172], "usag": [46, 147, 148, 158, 169, 172, 193, 195, 213, 248, 252], "vector": [46, 156, 161, 166], "calculu": 46, "exclus": 46, "dag": 46, "classifi": [47, 106, 114, 145, 191], "about": [47, 231], "cifar10": 47, "convolut": [47, 99, 148, 155, 192, 240], "multipl": [47, 121, 176, 235], "where": [47, 56, 79, 191, 276], "dummi": 48, "8": [48, 225, 239], "summari": [48, 130, 139, 183, 222], "deep": [49, 61, 105, 106, 107, 132], "60": [49, 61], "minut": [49, 61], "blitz": [49, 61], "backprop": 50, "chatbot": 53, "preprocess": [53, 126, 162, 177], "format": [53, 114, 163, 207, 240, 265], "trim": 53, "seq2seq": [53, 184], "encod": [53, 111, 184], "decod": [53, 184], "procedur": 53, "mask": [53, 199, 276], "singl": [53, 165], "greedi": 53, "my": 53, "text": [53, 125, 126, 190], "googl": 54, "colab": 54, "version": [54, 166], "drive": 54, "enabl": [54, 140, 240, 263, 265, 268], "compos": [55, 161, 252], "afterword": 55, "torchvis": [55, 80, 198], "adversari": [56, 79], "fault": 57, "toler": 57, "torchrun": [57, 152], "grace": 57, "restart": 57, "process": [57, 59, 152, 174, 175, 180], "group": [57, 59, 175], "provid": 57, "variabl": [57, 141, 240], "snapshot": [57, 169], "trainer": 57, "constructor": [57, 240], "resum": [57, 121, 224], "script": [57, 89, 168, 246, 258], "video": [58, 177, 255], "section": 58, "multi": [59, 83, 92, 144], "ddp": [59, 60, 133, 150, 152, 240], "job": [59, 230, 265], "you": [60, 101, 142, 172, 199, 223, 254, 258, 265], "prefer": 60, "over": 60, "dp": 60, "goal": 61, "segment": [62, 63, 198, 255], "deeplabv3": [62, 63], "android": [62, 203, 217, 219, 273, 285], "io": [63, 217, 220, 272, 273, 285], "primit": 64, "commun": [64, 86, 92, 154], "launcher": 64, "appli": [64, 142, 258, 281, 282], "To": 64, "scale": [64, 142, 151, 183], "develop": 64, "control": [69, 113, 120, 183, 195, 240, 253, 258], "flow": [69, 113, 120, 195, 255], "share": [69, 120], "warm": [76, 120], "threat": 79, "sign": 79, "attack": 79, "under": 79, "fgsm": 79, "accuraci": [79, 92, 160, 215], "v": [79, 130, 161, 172, 275], "epsilon": 79, "sampl": [79, 146, 171, 221], "finetun": [80, 127, 198], "former": 85, "holist": [86, 87], "trace": [86, 87, 89, 159, 193, 221, 230, 255, 285], "analysi": [86, 87], "hta": 86, "tempor": 86, "breakdown": 86, "idl": 86, "durat": 86, "overlap": 86, "counter": 86, "memori": [86, 109, 119, 143, 148, 163, 169, 172, 179, 206, 213, 230, 240, 258], "bandwidth": 86, "queue": 86, "length": [86, 240], "launch": [86, 174, 221], "statist": 86, "diff": 87, "syntax": 89, "inform": [89, 160], "part": [89, 109], "pure": 89, "top": 89, "level": [89, 94, 109, 145, 146], "tune": [92, 139, 213, 215, 240], "rai": 92, "configur": [92, 144, 221, 249], "search": 92, "space": 92, "youtub": [93, 96, 98], "seri": [93, 98], "fundament": 94, "turn": [94, 145], "off": 94, "On": 94, "profil": [94, 119, 159, 160, 188, 211, 221, 230, 264], "advanc": [94, 105, 139, 154, 188, 202, 224, 252, 275], "topic": [94, 154, 224], "detail": 94, "high": [94, 183], "understand": [95, 130], "captum": [95, 223], "first": [95, 113, 170], "occlus": 95, "gradcam": 95, "insight": 95, "common": [99, 147, 255], "type": [99, 102, 196, 224, 255], "recurr": [99, 155], "manipul": [99, 102], "activ": [99, 103, 278], "tensorboard": [101, 188, 189, 238], "befor": [101, 191, 223], "show": 101, "scalar": [101, 238], "resourc": [101, 103, 137, 172, 174], "random": [102, 105], "math": [102, 213], "logic": 102, "brief": 102, "broadcast": 102, "alter": 102, "copi": [102, 172], "chang": [102, 226], "number": 102, "dimens": [102, 213], "per": [103, 171], "epoch": 103, "knowledg": 104, "distil": 104, "util": [104, 176, 179, 199, 202, 225, 237, 240, 251], "cross": [104, 199], "entropi": 104, "cosin": 104, "minim": 104, "intermedi": [104, 149, 240], "regressor": 104, "dynam": [105, 195, 253], "decis": 105, "bi": 105, "lstm": [105, 109, 155], "crf": 105, "versu": 105, "toolkit": 105, "condit": 105, "field": 105, "discuss": 105, "exercis": [105, 109, 111, 124, 145, 146, 184, 200], "tag": [105, 109], "block": [106, 199, 225], "affin": 106, "map": 106, "non": [106, 130, 172, 195, 205, 240], "probabl": 106, "compon": [106, 160], "logist": 106, "regress": 106, "bag": [106, 111], "word": [106, 111], "nlp": [107, 145, 146, 167, 184], "librari": [108, 125, 191, 203, 227, 230, 240, 241, 242, 243, 258], "reshap": 108, "sequenc": [109, 142, 184], "long": [109, 230], "short": [109, 221], "term": 109, "speech": [109, 187, 190, 255], "tagger": 109, "charact": [109, 145, 146], "lexic": 111, "semant": [111, 274, 275], "dens": [111, 183], "n": 111, "gram": 111, "languag": [111, 128, 129], "continu": 111, "realli": 112, "mnist": 112, "net": 112, "scratch": [112, 145, 146, 167, 184], "without": 112, "refactor": [112, 113], "add": [112, 141, 198, 251], "valid": [112, 240], "fit": [112, 169], "get_data": 112, "switch": [112, 240], "cnn": 112, "close": 112, "thought": 112, "attempt": 113, "suggest": [113, 195], "patch": [113, 191], "cond": 113, "depend": [114, 116, 183, 195, 196], "netron": 114, "6": [114, 188, 189, 225, 230, 239, 262], "runtim": [114, 240, 254, 258], "7": [114, 188, 225, 230, 239, 262], "compar": [114, 225], "ones": 114, "overrid": 117, "exist": [117, 163], "perform": [119, 141, 156, 159, 160, 163, 171, 177, 183, 188, 206, 213, 218, 240, 253, 258, 269, 278], "debug": [119, 160, 240, 265], "print": 119, "state_dict": [121, 242], "recommend": [121, 145, 172, 193], "entir": 121, "program": [121, 195], "One": [121, 235], "warmstart": [121, 241], "differ": [121, 147, 198, 241], "across": [121, 232], "cpu": [121, 139, 143, 159, 160, 172, 202, 214, 221, 240, 248, 252, 258, 269, 278], "t5": [123, 139], "base": [123, 211, 264, 285], "summar": 123, "sentiment": 123, "classif": [123, 125, 191, 255], "templat": 124, "torchtext": [125, 126, 128, 129], "vision": [127, 240], "few": 127, "predict": [127, 191], "convnet": 127, "fix": [127, 195], "extractor": 127, "requires_grad": 130, "retain_grad": 130, "leaf": 130, "refer": [130, 200, 262], "dive": 132, "fsdp2": [133, 140], "tp": [133, 142], "devicemesh": [133, 209], "domain": 134, "ecosystem": 135, "welcom": 137, "fulli": [138, 139, 140, 142, 199], "fsdp": [138, 139], "recap": 139, "fine": 139, "hf": 139, "mix": [139, 140, 150, 224, 240], "precis": [139, 140, 150, 224, 240], "intial": 139, "strategi": [139, 144], "prefetch": [139, 140], "stream": 139, "rank0": 139, "clip": [140, 224], "dtensor": 140, "dict": 140, "dcp": [140, 206, 207], "fsdp1": 140, "migrat": 140, "libuv": 141, "tcpstore": 141, "benchmark": [141, 192, 204, 225], "impact": 141, "exit": 141, "rout": 141, "use_libuv": 141, "fals": 141, "0": [141, 195, 276], "init_method": 141, "processgroup": 141, "larg": 142, "layernorm": 142, "rmsnorm": 142, "hook": [143, 169, 200], "typic": 143, "than": 143, "concept": [143, 195], "pack": [143, 199], "unpack": 143, "some": 143, "unconvent": 143, "int": 143, "tupl": 143, "str": 143, "disk": 143, "na": 144, "ax": 144, "torchx": 144, "app": 144, "runner": 144, "searchspac": 144, "metric": [144, 281], "optimizationconfig": 144, "choos": [144, 258], "schedul": [144, 205], "acknowledg": 144, "rnn": [145, 146, 182], "plot": [145, 146, 184], "captur": [147, 159, 169, 177, 281], "larger": 147, "log": [147, 160, 162, 238], "flag": 147, "address": [147, 255], "certain": 147, "limit": [147, 252], "aotautograd": 147, "recompil": [147, 253], "reason": [147, 231], "fuse": [148, 169, 183, 192, 196, 240], "norm": [148, 192, 240], "formula": [148, 252], "batchnorm": 148, "out": [148, 192, 243, 282], "comparison": [148, 152, 171, 193], "doubl": 149, "output": [149, 196], "real": [150, 177], "world": 150, "cloud": 150, "enough": 150, "multinod": 151, "local": 151, "global": [151, 176], "rank": 151, "heteregen": 151, "troubleshoot": [151, 177, 224], "between": [152, 276], "case": [152, 240], "skew": 152, "speed": [152, 213], "point": [154, 237], "collect": [154, 178, 225], "own": 154, "ring": 154, "allreduc": 154, "dqn": [155, 179], "mlp": 155, "q": [155, 179], "ensembl": 156, "vmap": [156, 286], "forc": 157, "align": 157, "wav2vec2": [157, 187], "fx": [159, 193, 281], "symbol": [159, 195], "interpret": [159, 217, 223, 273, 285], "investig": 159, "resnet18": [159, 192], "inductor": [160, 249, 268], "determin": 160, "error": [160, 195, 224, 255], "hessian": 161, "hvp": 161, "vhp": 161, "revers": 161, "jacrev": 161, "jacfwd": 161, "functorch": 161, "mario": 162, "plai": 162, "rl": 162, "agent": 162, "definit": 162, "act": 162, "cach": [162, 170, 249, 250], "recal": 162, "td": 162, "all": [162, 169, 199, 224, 230, 240], "let": 162, "channel": 163, "last": 163, "gain": [163, 253], "convert": [163, 262, 271, 280], "machin": 165, "best": [165, 193, 196], "practic": [165, 172, 188, 193, 196], "tangent": 166, "ntk": 166, "contract": 166, "nvfuser": 168, "dure": [169, 240], "disclaim": 169, "techniqu": 169, "register_post_accumulate_grad_hook": 169, "everyth": [169, 198], "line": 169, "hand": 170, "ar": [170, 199], "citizen": 170, "concaten": 170, "remov": [170, 176], "grad": [171, 240, 276], "effici": [171, 217, 240, 274], "wai": 171, "good": 172, "non_block": 172, "pin_memori": 172, "preambl": 172, "pageabl": 172, "asynchron": [172, 180, 206, 240], "synchron": [172, 240], "true": [172, 229, 240], "cudamemcpyasync": 172, "perspect": 172, "synergi": 172, "direct": 172, "mp": 172, "consider": 172, "partit": 174, "main": 174, "cpp": 175, "subclass": [175, 183, 237], "expos": 175, "re": 176, "raspberri": 177, "pi": 177, "30": 177, "fp": 177, "opencv": 177, "choic": 177, "mobilenetv2": [177, 271, 280], "It": 177, "reinforc": [178, 179, 182], "ppo": 178, "server": [180, 181], "cartpol": 180, "solver": 180, "rref": 182, "dot": 183, "attent": [183, 184, 199], "sdpa": 183, "explicit": [183, 212], "hardwar": 183, "causal": 183, "self": 183, "nestedtensor": 183, "attn_bia": 183, "spatial": 186, "depict": 186, "stn": 186, "recognit": [187, 255], "event": 188, "analyz": [188, 230, 265], "help": 188, "amd": 188, "projector": 189, "assess": 189, "tacotron2": 190, "whole": 191, "slide": 191, "tiatoolbox": 191, "clean": 191, "download": 191, "patchpredictor": 191, "pathologi": 191, "here": 191, "fuser": 192, "pattern": [192, 262], "match": [192, 240], "fusion": [192, 212, 262], "nest": [193, 199, 279], "demonstr": [193, 255], "torchscript": 193, "torchdynamo": [193, 250, 255], "nightli": 194, "break": [195, 255], "strict": [195, 255], "constraint": [195, 262], "special": 195, "dim": 195, "violat": 195, "_check": 195, "ir": 195, "decomposit": 195, "exportdb": 195, "recsi": 196, "embeddingbag": 196, "embeddingbagcollect": 196, "planner": 196, "lazyawait": 196, "anatomi": 196, "lookup": 196, "detect": 198, "pennfudan": 198, "pretrain": 198, "modifi": [198, 224], "backbon": 198, "instanc": 198, "replac": 199, "me": 199, "introduc": [199, 273], "abov": 199, "octob": 199, "2024": 199, "multiheadattent": 199, "gpt": 199, "one": 199, "row": 199, "longer": 199, "caus": 199, "nan": [199, 224, 276], "swiglu": 199, "feed": 199, "leverag": 202, "intel": [202, 214, 215, 221, 240, 248, 258, 269], "matrix": 202, "amx": 202, "guidelin": 202, "workload": [202, 211, 221, 240, 264], "can": 202, "confirm": 202, "being": 202, "prebuilt": 203, "see": [204, 252, 279], "also": [204, 252, 279], "lr": 205, "happen": 205, "even": 206, "pin": 206, "commdebugmod": 208, "hsdp": 209, "solut": [209, 255], "horizont": 212, "foreach_map": 212, "aw": 213, "graviton": 213, "processor": 213, "bfloat16": [213, 214], "openbla": 213, "smaller": 213, "alloc": [213, 240, 258], "overhead": 213, "linux": 213, "transpar": 213, "huge": 213, "page": 213, "thp": 213, "float32": 214, "float16": 214, "eas": 215, "compressor": 215, "fp8": 215, "pt2e": 215, "driven": 215, "mobil": [217, 218, 222, 246, 285], "recip": [218, 219, 220, 222, 228, 246, 260], "instrument": 221, "technologi": 221, "itt": 221, "vtune": 221, "xpu": [221, 269], "showcas": 221, "begin": 223, "final": 223, "default": [224, 226], "gradscal": 224, "e": 224, "g": 224, "amp": [224, 240], "minor": 224, "inf": 224, "mismatch": 224, "mai": 224, "manifest": 224, "cudnn_status_bad_param": 224, "syntaxerror": 225, "timeit": 225, "timer": [225, 239], "autorang": 225, "fuzz": 225, "instruct": [225, 239], "count": [225, 239], "callgrind": [225, 239], "necessari": [227, 230, 241, 242, 243], "specifi": 227, "tip": 229, "mmap": 229, "meta": 229, "load_state_dict": [229, 237], "assign": 229, "instanti": 230, "resnet": 230, "consumpt": 230, "examin": 230, "stack": 230, "And": [233, 234], "swap_tensor": 237, "quick": [239, 258], "wall": 239, "blocked_autorang": 239, "snippet": 239, "collect_callgrind": 239, "delv": 239, "deeper": 239, "b": [239, 241], "footnot": 239, "calcul": 240, "bia": 240, "directli": 240, "follow": 240, "none": 240, "instead": 240, "zero_grad": 240, "channels_last": 240, "uniform": 240, "access": [240, 242, 258, 276], "numa": [240, 258], "openmp": [240, 258], "libiomp": 240, "core": [240, 271], "cudnn": 240, "auto": 240, "tuner": 240, "avoid": 240, "unnecessari": 240, "prealloc": 240, "skip": 240, "reduc": [240, 244, 245], "accumul": 240, "find_unused_paramet": 240, "balanc": 240, "zero": 243, "while": 243, "aot": 244, "cold": [244, 245], "region": [244, 245], "ahead": 244, "_regions_": 244, "measur": [244, 253], "fp32": 248, "bf16": 248, "torchinductor_fx_graph_cach": 249, "torchinductor_autograd_cach": 249, "torchinductor_cache_dir": 249, "torchinductor_fx_graph_remote_cach": 249, "torchinductor_autograd_remote_cach": 249, "torchinductor_autotune_remote_cach": 249, "torchinductor_force_disable_cach": 249, "offer": 250, "end": [250, 265], "mega": 250, "modular": 250, "torchinductor": 250, "triton": [250, 252], "remot": 250, "rewrit": 251, "mul": 251, "triton_op": 252, "fallback": 252, "flopcount": 252, "set_stanc": 253, "descript": 253, "prevent": 253, "crash": 253, "sooner": 253, "aotinductor": 254, "challeng": 255, "them": 255, "No": 255, "caption": 255, "cannot": 255, "mutat": 255, "frozen": 255, "promptabl": 255, "torch_log": 256, "xeon": 258, "run_cpu": 258, "Will": 258, "command": 258, "explan": 258, "prototyp": [262, 266, 267, 271, 272, 273, 283, 285], "backendconfig": 262, "deriv": 262, "each": 262, "dtypeconfig": 262, "conv": 262, "qconfigmap": 262, "satisfi": 262, "faulti": 262, "rotat": 263, "approach": 263, "flight": 265, "stuck": 265, "retriev": 265, "dump": 265, "gpudirect": 266, "torchao": 267, "wrapper": 268, "window": 269, "softwar": 269, "altern": 269, "llvm": 269, "ml": 271, "lite": 273, "workflow": 273, "adagrad": 274, "maskedtensor": [274, 275, 276, 277], "simpler": 274, "origin": 274, "maskedarrai": 275, "reduct": [275, 277], "index": 276, "slice": 276, "distinguish": 276, "anoth": 276, "x": 276, "yield": 276, "nansum": 276, "nanmean": 276, "safe": 276, "miss": 276, "coo": 277, "csr": 277, "unari": 277, "binari": 277, "appendix": 277, "max": 278, "autotun": 278, "nnapi": 280, "openvino": 281, "nncf": 281, "lower": 281, "represent": 281, "autoload": 282, "tree": 282, "mechan": 282, "so": 286, "unstabl": 287}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 60}, "alltitles": {"ONNX Live Tutorial": [[0, "onnx-live-tutorial"]], "TorchRL objectives: Coding a DDPG loss": [[1, "torchrl-objectives-coding-a-ddpg-loss"]], "Overview": [[1, "overview"], [21, "overview"], [113, "overview"], [117, "overview"], [124, "overview"], [147, "overview"], [155, "overview"], [160, "overview"], [183, "overview"], [215, "overview"], [240, "overview"], [265, "overview"]], "Prerequisites": [[1, "prerequisites"], [104, "prerequisites"], [113, "prerequisites"], [117, "prerequisites"], [177, "prerequisites"], [208, "prerequisites"], [212, "prerequisites"], [230, "prerequisites"], [244, "prerequisites"], [245, "prerequisites"], [249, "prerequisites"], [250, "prerequisites"], [252, "prerequisites"], [253, "prerequisites"], [254, "prerequisites"], [255, "prerequisites"], [265, "prerequisites"], [281, "prerequisites"]], "Imports and setup": [[1, "imports-and-setup"]], "TorchRL LossModule": [[1, "torchrl-lossmodule"]], "The __init__ method": [[1, "the-init-method"]], "The value estimator loss method": [[1, "the-value-estimator-loss-method"]], "The actor loss method": [[1, "the-actor-loss-method"]], "The value loss method": [[1, "the-value-loss-method"]], "Putting things together in a forward call": [[1, "putting-things-together-in-a-forward-call"]], "Environment": [[1, "environment"], [155, "environment"], [162, "environment"]], "Transforms": [[1, "transforms"], [44, "transforms"], [55, "transforms"], [178, "transforms"]], "Parallel execution": [[1, "parallel-execution"]], "Normalization of the observations": [[1, "normalization-of-the-observations"]], "Normalization stats": [[1, "normalization-stats"]], "Building the model": [[1, "building-the-model"]], "Exploration": [[1, "exploration"]], "Data collector": [[1, "data-collector"], [178, "data-collector"]], "Evaluator: building your recorder object": [[1, "evaluator-building-your-recorder-object"]], "Replay buffer": [[1, "replay-buffer"], [178, "replay-buffer"]], "Replay buffer storage and batch size": [[1, "replay-buffer-storage-and-batch-size"]], "Loss module construction": [[1, "loss-module-construction"]], "Target network updater": [[1, "target-network-updater"]], "Optimizer": [[1, "optimizer"], [39, "optimizer"], [103, "optimizer"]], "Time to train the policy": [[1, "time-to-train-the-policy"]], "Experiment results": [[1, "experiment-results"]], "Conclusion": [[1, "conclusion"], [2, "conclusion"], [3, "conclusion"], [4, "conclusion"], [5, "conclusion"], [7, "conclusion"], [9, "conclusion"], [17, "conclusion"], [18, "conclusion"], [19, "conclusion"], [21, "conclusion"], [24, "conclusion"], [53, "conclusion"], [86, "conclusion"], [104, "conclusion"], [113, "conclusion"], [114, "conclusion"], [117, "conclusion"], [124, "conclusion"], [130, "conclusion"], [141, "conclusion"], [142, "conclusion"], [147, "conclusion"], [155, "conclusion"], [159, "conclusion"], [160, "conclusion"], [162, "conclusion"], [163, "conclusion"], [169, "conclusion"], [172, "conclusion"], [174, "conclusion"], [183, "conclusion"], [193, "conclusion"], [195, "conclusion"], [196, "conclusion"], [199, "conclusion"], [200, "conclusion"], [202, "conclusion"], [205, "conclusion"], [206, "conclusion"], [207, "conclusion"], [208, "conclusion"], [209, "conclusion"], [212, "conclusion"], [213, "conclusion"], [229, "conclusion"], [237, "conclusion"], [240, "conclusion"], [244, "conclusion"], [245, "conclusion"], [249, "conclusion"], [250, "conclusion"], [251, "conclusion"], [252, "conclusion"], [253, "conclusion"], [254, "conclusion"], [255, "conclusion"], [256, "conclusion"], [258, "conclusion"], [263, "conclusion"], [265, "conclusion"], [266, "conclusion"], [267, "conclusion"], [268, "conclusion"], [269, "conclusion"], [274, "conclusion"], [275, "conclusion"], [276, "conclusion"], [277, "conclusion"], [278, "conclusion"], [279, "conclusion"], [281, "conclusion"], [282, "conclusion"], [283, "conclusion"]], "Next Steps": [[1, "next-steps"], [177, "next-steps"]], "Autograd in C++ Frontend": [[2, "autograd-in-c-frontend"]], "Basic autograd operations": [[2, "basic-autograd-operations"]], "Computing higher-order gradients in C++": [[2, "computing-higher-order-gradients-in-c"]], "Using custom autograd function in C++": [[2, "using-custom-autograd-function-in-c"]], "Translating autograd code from Python to C++": [[2, "translating-autograd-code-from-python-to-c"]], "Using CUDA Graphs in PyTorch C++ API": [[3, "using-cuda-graphs-in-pytorch-c-api"]], "Getting Started": [[3, "getting-started"], [86, "getting-started"], [214, "getting-started"], [215, "getting-started"]], "Training Results": [[3, "training-results"]], "Custom C++ and CUDA Operators": [[4, "custom-c-and-cuda-operators"]], "Setting up the Build System": [[4, "setting-up-the-build-system"], [5, "setting-up-the-build-system"]], "Defining the custom op and adding backend implementations": [[4, "defining-the-custom-op-and-adding-backend-implementations"], [5, "defining-the-custom-op-and-adding-backend-implementations"]], "Defining an operator": [[4, "defining-an-operator"]], "Registering backend implementations for an operator": [[4, "registering-backend-implementations-for-an-operator"]], "Adding torch.compile support for an operator": [[4, "adding-torch-compile-support-for-an-operator"]], "Setting up hybrid Python/C++ registration": [[4, "setting-up-hybrid-python-c-registration"]], "Adding training (autograd) support for an operator": [[4, "adding-training-autograd-support-for-an-operator"]], "Testing an operator": [[4, "testing-an-operator"]], "Creating mutable operators": [[4, "creating-mutable-operators"]], "Custom SYCL Operators": [[5, "custom-sycl-operators"]], "Create a Python Interface": [[5, "create-a-python-interface"]], "Initialize Package": [[5, "initialize-package"]], "Testing SYCL extension operator": [[5, "testing-sycl-extension-operator"]], "Using the PyTorch C++ Frontend": [[7, "using-the-pytorch-c-frontend"]], "Motivation": [[7, "motivation"]], "Writing a Basic Application": [[7, "writing-a-basic-application"]], "Defining the Neural Network Models": [[7, "defining-the-neural-network-models"]], "Module API Basics": [[7, "module-api-basics"]], "Defining a Module and Registering Parameters": [[7, "defining-a-module-and-registering-parameters"]], "Registering Submodules and Traversing the Module Hierarchy": [[7, "registering-submodules-and-traversing-the-module-hierarchy"]], "Running the Network in Forward Mode": [[7, "running-the-network-in-forward-mode"]], "Module Ownership": [[7, "module-ownership"]], "Defining the DCGAN Modules": [[7, "defining-the-dcgan-modules"]], "What was a GAN aGAN?": [[7, "what-was-a-gan-agan"]], "The Generator Module": [[7, "the-generator-module"]], "The Discriminator Module": [[7, "the-discriminator-module"]], "Loading Data": [[7, "loading-data"]], "Writing the Training Loop": [[7, "writing-the-training-loop"]], "Moving to the GPU": [[7, "moving-to-the-gpu"]], "Checkpointing and Recovering the Training State": [[7, "checkpointing-and-recovering-the-training-state"]], "Inspecting Generated Images": [[7, "inspecting-generated-images"]], "Supporting Custom C++ Classes in torch.compile/torch.export": [[8, "supporting-custom-c-classes-in-torch-compile-torch-export"]], "Why do we need to make a Fake Class?": [[8, "why-do-we-need-to-make-a-fake-class"]], "Extending PyTorch with Custom C++ Classes": [[9, "extending-pytorch-with-custom-c-classes"]], "Implementing and Binding the Class in C++": [[9, "implementing-and-binding-the-class-in-c"]], "Building the Example as a C++ Project With CMake": [[9, "building-the-example-as-a-c-project-with-cmake"]], "Using the C++ Class from Python": [[9, "using-the-c-class-from-python"]], "Defining Serialization/Deserialization Methods for Custom C++ Classes": [[9, "defining-serialization-deserialization-methods-for-custom-c-classes"]], "Defining Custom Operators that Take or Return Bound C++ Classes": [[9, "defining-custom-operators-that-take-or-return-bound-c-classes"]], "PyTorch Custom Operators": [[10, "pytorch-custom-operators"]], "Authoring a custom operator from Python": [[10, "authoring-a-custom-operator-from-python"]], "Integrating custom C++ and/or CUDA code with PyTorch": [[10, "integrating-custom-c-and-or-cuda-code-with-pytorch"]], "The Custom Operators Manual": [[10, "the-custom-operators-manual"]], "When should I create a Custom Operator?": [[10, "when-should-i-create-a-custom-operator"]], "Why should I create a Custom Operator?": [[10, "why-should-i-create-a-custom-operator"]], "Training Transformer models using Distributed Data Parallel and Pipeline Parallelism": [[11, "training-transformer-models-using-distributed-data-parallel-and-pipeline-parallelism"]], "Registering a Dispatched Operator in C++": [[12, "registering-a-dispatched-operator-in-c"]], "Defining schema and backend implementations": [[12, "defining-schema-and-backend-implementations"]], "For operators that do not need autograd": [[12, "for-operators-that-do-not-need-autograd"]], "In-place or view ops": [[12, "in-place-or-view-ops"]], "Adding autograd support": [[12, "adding-autograd-support"]], "Going beyond autograd": [[12, "going-beyond-autograd"]], "Autocast": [[12, "autocast"]], "Batched": [[12, "batched"]], "Tracer": [[12, "tracer"]], "Extending dispatcher for a new backend in C++": [[13, "extending-dispatcher-for-a-new-backend-in-c"]], "What\u2019s a new backend?": [[13, "what-s-a-new-backend"]], "Get a dispatch key for your backend": [[13, "get-a-dispatch-key-for-your-backend"]], "Get the full list of PyTorch operators": [[13, "get-the-full-list-of-pytorch-operators"]], "Register kernels for the new backend": [[13, "register-kernels-for-the-new-backend"], [18, "register-kernels-for-the-new-backend"]], "Autograd support for the new backend": [[13, "autograd-support-for-the-new-backend"]], "Build an extension": [[13, "build-an-extension"]], "Custom operator support": [[13, "custom-operator-support"]], "JIT support": [[13, "jit-support"]], "Testing your backend against native PyTorch backends": [[13, "testing-your-backend-against-native-pytorch-backends"]], "Backward Compatibility": [[13, "backward-compatibility"]], "Known issues & additional notes": [[13, "known-issues-additional-notes"]], "Future Work": [[13, "future-work"], [18, "future-work"]], "Stay in touch": [[13, "stay-in-touch"]], "Distributed Training with Uneven Inputs Using the Join Context Manager": [[14, "distributed-training-with-uneven-inputs-using-the-join-context-manager"]], "Requirements": [[14, "requirements"], [21, "requirements"], [176, "requirements"], [221, "requirements"], [259, "requirements"], [283, "requirements"]], "What is Join?": [[14, "what-is-join"]], "Using Join with DistributedDataParallel": [[14, "using-join-with-distributeddataparallel"]], "Using Join with DistributedDataParallel and ZeroRedundancyOptimizer": [[14, "using-join-with-distributeddataparallel-and-zeroredundancyoptimizer"]], "Passing Keyword Arguments": [[14, "passing-keyword-arguments"]], "How Does Join Work?": [[14, "how-does-join-work"]], "Joinable": [[14, "joinable"]], "JoinHook": [[14, "joinhook"]], "Join": [[14, "join"]], "Making a Toy Class Work with Join": [[14, "making-a-toy-class-work-with-join"]], "Neural Transfer Using PyTorch": [[15, "neural-transfer-using-pytorch"]], "Introduction": [[15, "introduction"], [56, "introduction"], [64, "introduction"], [95, "id1"], [101, "id1"], [103, "id1"], [141, "introduction"], [172, "introduction"], [188, "introduction"], [191, "introduction"], [202, "introduction"], [227, "introduction"], [230, "introduction"], [241, "introduction"], [242, "introduction"], [243, "introduction"], [249, "introduction"], [250, "introduction"], [263, "introduction"], [268, "introduction"], [269, "introduction"], [277, "introduction"], [278, "introduction"], [281, "introduction"]], "Underlying Principle": [[15, "underlying-principle"]], "Importing Packages and Selecting a Device": [[15, "importing-packages-and-selecting-a-device"]], "Loading the Images": [[15, "loading-the-images"]], "Loss Functions": [[15, "loss-functions"], [99, "loss-functions"]], "Content Loss": [[15, "content-loss"]], "Style Loss": [[15, "style-loss"]], "Importing the Model": [[15, "importing-the-model"]], "Gradient Descent": [[15, "gradient-descent"]], "Creating Extensions Using NumPy and SciPy": [[16, "creating-extensions-using-numpy-and-scipy"]], "Parameter-less example": [[16, "parameter-less-example"]], "Parametrized example": [[16, "parametrized-example"]], "Pendulum: Writing your environment and transforms with TorchRL": [[17, "pendulum-writing-your-environment-and-transforms-with-torchrl"]], "Coding the effect of an action: _step()": [[17, "coding-the-effect-of-an-action-step"]], "Resetting the simulator: _reset()": [[17, "resetting-the-simulator-reset"]], "Environment metadata: env.*_spec": [[17, "environment-metadata-env-spec"]], "Specs shape": [[17, "specs-shape"]], "Reproducible experiments: seeding": [[17, "reproducible-experiments-seeding"]], "Wrapping things together: the EnvBase class": [[17, "wrapping-things-together-the-envbase-class"]], "Testing our environment": [[17, "testing-our-environment"]], "Transforming an environment": [[17, "transforming-an-environment"]], "Writing custom transforms": [[17, "writing-custom-transforms"]], "Executing a rollout": [[17, "executing-a-rollout"]], "Batching computations": [[17, "batching-computations"]], "Training a simple policy": [[17, "training-a-simple-policy"]], "Training loop": [[17, "training-loop"], [155, "training-loop"], [178, "training-loop"], [179, "training-loop"]], "Facilitating New Backend Integration by PrivateUse1": [[18, "facilitating-new-backend-integration-by-privateuse1"]], "What is PrivateUse1?": [[18, "what-is-privateuse1"]], "How to integrate new backend via PrivateUse1": [[18, "how-to-integrate-new-backend-via-privateuse1"]], "Register generator for the new backend": [[18, "register-generator-for-the-new-backend"]], "Register device guard for the new backend": [[18, "register-device-guard-for-the-new-backend"]], "Register serialization and deserialization functions for new backend metadata": [[18, "register-serialization-and-deserialization-functions-for-new-backend-metadata"]], "Other Modules": [[18, "other-modules"]], "How to Improve User Experience with Privateuse1": [[18, "how-to-improve-user-experience-with-privateuse1"]], "Register new backend module to Pytorch": [[18, "register-new-backend-module-to-pytorch"]], "Rename PrivateUse1 to a custom name for the new backend": [[18, "rename-privateuse1-to-a-custom-name-for-the-new-backend"]], "Generate methods and properties related to the new backend": [[18, "generate-methods-and-properties-related-to-the-new-backend"]], "Custom Python Operators": [[19, "custom-python-operators"]], "Example: Wrapping PIL\u2019s crop into a custom operator": [[19, "example-wrapping-pil-s-crop-into-a-custom-operator"]], "Adding training support for crop": [[19, "adding-training-support-for-crop"]], "Testing Python Custom operators": [[19, "testing-python-custom-operators"]], "Mutable Python Custom operators": [[19, "mutable-python-custom-operators"]], "Combining Distributed DataParallel with Distributed RPC Framework": [[20, "combining-distributed-dataparallel-with-distributed-rpc-framework"]], "(beta) Accelerating BERT with semi-structured (2:4) sparsity": [[21, "beta-accelerating-bert-with-semi-structured-2-4-sparsity"]], "What problem does semi-structured sparsity solve?": [[21, "what-problem-does-semi-structured-sparsity-solve"], [283, "what-problem-does-semi-structured-sparsity-solve"]], "Intro & Setup": [[21, "intro-setup"], [283, "intro-setup"]], "Establishing a baseline": [[21, "establishing-a-baseline"]], "Pruning BERT to be 2:4 sparse": [[21, "pruning-bert-to-be-2-4-sparse"], [283, "pruning-bert-to-be-2-4-sparse"]], "Accelerating 2:4 sparse models for inference": [[21, "accelerating-2-4-sparse-models-for-inference"]], "Computation times": [[22, "computation-times"], [42, "computation-times"], [51, "computation-times"], [68, "computation-times"], [74, "computation-times"], [78, "computation-times"], [90, "computation-times"], [100, "computation-times"], [110, "computation-times"], [118, "computation-times"], [122, "computation-times"], [185, "computation-times"], [236, "computation-times"], [247, "computation-times"], [261, "computation-times"], [284, "computation-times"]], "Exploring TorchRec sharding": [[23, "exploring-torchrec-sharding"]], "Installation": [[23, "installation"], [95, "installation"], [215, "installation"], [238, "installation"]], "Distributed Setup": [[23, "distributed-setup"]], "Constructing our embedding model": [[23, "constructing-our-embedding-model"]], "DistributedModelParallel in multiprocessing": [[23, "distributedmodelparallel-in-multiprocessing"]], "Multiprocessing Execution": [[23, "multiprocessing-execution"]], "Table Wise Sharding": [[23, "table-wise-sharding"]], "Explore other sharding modes": [[23, "explore-other-sharding-modes"]], "(beta) Static Quantization with Eager Mode in PyTorch": [[24, "beta-static-quantization-with-eager-mode-in-pytorch"]], "1. Model architecture": [[24, "model-architecture"]], "2. Helper functions": [[24, "helper-functions"]], "3. Define dataset and data loaders": [[24, "define-dataset-and-data-loaders"]], "ImageNet Data": [[24, "imagenet-data"]], "4. Post-training static quantization": [[24, "post-training-static-quantization"]], "5. Quantization-aware training": [[24, "quantization-aware-training"]], "Speedup from quantization": [[24, "speedup-from-quantization"]], "Semi-Supervised Learning using USB built upon PyTorch": [[27, "semi-supervised-learning-using-usb-built-upon-pytorch"]], "Introduction to FreeMatch and SoftMatch in Semi-Supervised Learning": [[27, "introduction-to-freematch-and-softmatch-in-semi-supervised-learning"]], "Use USB to Train FreeMatch/SoftMatch on CIFAR-10 with only 40 labels": [[27, "use-usb-to-train-freematch-softmatch-on-cifar-10-with-only-40-labels"]], "Use USB to Train SoftMatch with specific imbalanced algorithm on imbalanced CIFAR-10": [[27, "use-usb-to-train-softmatch-with-specific-imbalanced-algorithm-on-imbalanced-cifar-10"]], "Audio Data Augmentation": [[28, "audio-data-augmentation"]], "Audio Datasets": [[29, "audio-datasets"]], "Audio Feature Augmentation": [[30, "audio-feature-augmentation"]], "Audio Feature Extractions": [[31, "audio-feature-extractions"]], "Audio I/O": [[32, "audio-i-o"]], "Audio Resampling": [[33, "audio-resampling"]], "Automatic Differentiation with torch.autograd": [[34, "automatic-differentiation-with-torch-autograd"]], "Tensors, Functions and Computational graph": [[34, "tensors-functions-and-computational-graph"]], "Computing Gradients": [[34, "computing-gradients"]], "Disabling Gradient Tracking": [[34, "disabling-gradient-tracking"]], "More on Computational Graphs": [[34, "more-on-computational-graphs"]], "Optional Reading: Tensor Gradients and Jacobian Products": [[34, "optional-reading-tensor-gradients-and-jacobian-products"]], "Further Reading": [[34, "further-reading"], [35, "further-reading"], [36, "further-reading"], [39, "further-reading"], [44, "further-reading"], [57, "further-reading"], [59, "further-reading"], [60, "further-reading"], [119, "further-reading"], [124, "further-reading"], [150, "further-reading"], [151, "further-reading"], [155, "further-reading"], [240, "further-reading"], [262, "further-reading"], [274, "further-reading"], [276, "further-reading"], [277, "further-reading"]], "Build the Neural Network": [[35, "build-the-neural-network"]], "Get Device for Training": [[35, "get-device-for-training"]], "Define the Class": [[35, "define-the-class"]], "Model Layers": [[35, "model-layers"]], "nn.Flatten": [[35, "nn-flatten"]], "nn.Linear": [[35, "nn-linear"]], "nn.ReLU": [[35, "nn-relu"]], "nn.Sequential": [[35, "nn-sequential"]], "nn.Softmax": [[35, "nn-softmax"]], "Model Parameters": [[35, "model-parameters"]], "Datasets & DataLoaders": [[36, "datasets-dataloaders"]], "Loading a Dataset": [[36, "loading-a-dataset"]], "Iterating and Visualizing the Dataset": [[36, "iterating-and-visualizing-the-dataset"]], "Creating a Custom Dataset for your files": [[36, "creating-a-custom-dataset-for-your-files"]], "__init__": [[36, "init"]], "__len__": [[36, "len"]], "__getitem__": [[36, "getitem"]], "Preparing your data for training with DataLoaders": [[36, "preparing-your-data-for-training-with-dataloaders"]], "Iterate through the DataLoader": [[36, "iterate-through-the-dataloader"]], "Learn the Basics": [[37, "learn-the-basics"], [38, "learn-the-basics"]], "Running the Tutorial Code": [[38, "running-the-tutorial-code"], [98, "running-the-tutorial-code"]], "How to Use this Guide": [[38, "how-to-use-this-guide"]], "Optimizing Model Parameters": [[39, "optimizing-model-parameters"]], "Prerequisite Code": [[39, "prerequisite-code"]], "Hyperparameters": [[39, "hyperparameters"]], "Optimization Loop": [[39, "optimization-loop"]], "Loss Function": [[39, "loss-function"], [50, "loss-function"], [103, "loss-function"]], "Full Implementation": [[39, "full-implementation"]], "Quickstart": [[40, "quickstart"]], "Working with data": [[40, "working-with-data"]], "Creating Models": [[40, "creating-models"]], "Optimizing the Model Parameters": [[40, "optimizing-the-model-parameters"]], "Saving Models": [[40, "saving-models"]], "Loading Models": [[40, "loading-models"]], "Save and Load the Model": [[41, "save-and-load-the-model"]], "Saving and Loading Model Weights": [[41, "saving-and-loading-model-weights"]], "Saving and Loading Models with Shapes": [[41, "saving-and-loading-models-with-shapes"]], "Related Tutorials": [[41, "related-tutorials"]], "Tensors": [[43, "tensors"], [52, "tensors"], [84, "tensors"], [120, "tensors"], [120, "id1"]], "Initializing a Tensor": [[43, "initializing-a-tensor"]], "Attributes of a Tensor": [[43, "attributes-of-a-tensor"]], "Operations on Tensors": [[43, "operations-on-tensors"]], "Bridge with NumPy": [[43, "bridge-with-numpy"], [52, "bridge-with-numpy"]], "Tensor to NumPy array": [[43, "tensor-to-numpy-array"], [52, "tensor-to-numpy-array"]], "NumPy array to Tensor": [[43, "numpy-array-to-tensor"], [52, "numpy-array-to-tensor"]], "ToTensor()": [[44, "totensor"]], "Lambda Transforms": [[44, "lambda-transforms"]], "Fast Transformer Inference with Better Transformer": [[45, "fast-transformer-inference-with-better-transformer"]], "A Gentle Introduction to torch.autograd": [[46, "a-gentle-introduction-to-torch-autograd"]], "Background": [[46, "background"], [172, "background"]], "Usage in PyTorch": [[46, "usage-in-pytorch"]], "Differentiation in Autograd": [[46, "differentiation-in-autograd"]], "Optional Reading - Vector Calculus using autograd": [[46, "optional-reading-vector-calculus-using-autograd"]], "Computational Graph": [[46, "computational-graph"]], "Exclusion from the DAG": [[46, "exclusion-from-the-dag"]], "Further readings:": [[46, "further-readings"]], "Training a Classifier": [[47, "training-a-classifier"]], "What about data?": [[47, "what-about-data"]], "Training an image classifier": [[47, "training-an-image-classifier"]], "1. Load and normalize CIFAR10": [[47, "load-and-normalize-cifar10"]], "2. Define a Convolutional Neural Network": [[47, "define-a-convolutional-neural-network"]], "3. Define a Loss function and optimizer": [[47, "define-a-loss-function-and-optimizer"]], "4. Train the network": [[47, "train-the-network"]], "5. Test the network on the test data": [[47, "test-the-network-on-the-test-data"]], "Training on GPU": [[47, "training-on-gpu"]], "Training on multiple GPUs": [[47, "training-on-multiple-gpus"]], "Where do I go next?": [[47, "where-do-i-go-next"]], "Optional: Data Parallelism": [[48, "optional-data-parallelism"]], "Imports and parameters": [[48, "imports-and-parameters"]], "Dummy DataSet": [[48, "dummy-dataset"]], "Simple Model": [[48, "simple-model"]], "Create Model and DataParallel": [[48, "create-model-and-dataparallel"]], "Run the Model": [[48, "run-the-model"]], "Results": [[48, "results"], [56, "results"], [79, "results"], [178, "results"]], "2 GPUs": [[48, "gpus"]], "3 GPUs": [[48, "id1"]], "8 GPUs": [[48, "id2"]], "Summary": [[48, "summary"], [139, "summary"], [183, "summary"]], "Deep Learning with PyTorch: A 60 Minute Blitz": [[49, "deep-learning-with-pytorch-a-60-minute-blitz"], [61, "deep-learning-with-pytorch-a-60-minute-blitz"]], "Neural Networks": [[50, "neural-networks"]], "Define the network": [[50, "define-the-network"]], "Backprop": [[50, "backprop"]], "Update the weights": [[50, "update-the-weights"]], "Tensor Initialization": [[52, "tensor-initialization"]], "Tensor Attributes": [[52, "tensor-attributes"]], "Tensor Operations": [[52, "tensor-operations"]], "Chatbot Tutorial": [[53, "chatbot-tutorial"]], "Preparations": [[53, "preparations"]], "Load & Preprocess Data": [[53, "load-preprocess-data"]], "Create formatted data file": [[53, "create-formatted-data-file"]], "Load and trim data": [[53, "load-and-trim-data"]], "Prepare Data for Models": [[53, "prepare-data-for-models"]], "Define Models": [[53, "define-models"]], "Seq2Seq Model": [[53, "seq2seq-model"]], "Encoder": [[53, "encoder"]], "Decoder": [[53, "decoder"]], "Define Training Procedure": [[53, "define-training-procedure"]], "Masked loss": [[53, "masked-loss"]], "Single training iteration": [[53, "single-training-iteration"]], "Training iterations": [[53, "training-iterations"]], "Define Evaluation": [[53, "define-evaluation"]], "Greedy decoding": [[53, "greedy-decoding"]], "Evaluate my text": [[53, "evaluate-my-text"]], "Run Model": [[53, "run-model"]], "Run Training": [[53, "run-training"]], "Run Evaluation": [[53, "run-evaluation"]], "Running Tutorials in Google Colab": [[54, "running-tutorials-in-google-colab"]], "PyTorch Version in Google Colab": [[54, "pytorch-version-in-google-colab"]], "Using Tutorial Data from Google Drive in Colab": [[54, "using-tutorial-data-from-google-drive-in-colab"]], "Enabling CUDA": [[54, "enabling-cuda"]], "Writing Custom Datasets, DataLoaders and Transforms": [[55, "writing-custom-datasets-dataloaders-and-transforms"]], "Dataset class": [[55, "dataset-class"]], "Compose transforms": [[55, "compose-transforms"]], "Iterating through the dataset": [[55, "iterating-through-the-dataset"]], "Afterword: torchvision": [[55, "afterword-torchvision"]], "DCGAN Tutorial": [[56, "dcgan-tutorial"]], "Generative Adversarial Networks": [[56, "generative-adversarial-networks"]], "What is a GAN?": [[56, "what-is-a-gan"]], "What is a DCGAN?": [[56, "what-is-a-dcgan"]], "Inputs": [[56, "inputs"], [79, "inputs"]], "Data": [[56, "data"]], "Implementation": [[56, "implementation"], [79, "implementation"]], "Weight Initialization": [[56, "weight-initialization"]], "Generator": [[56, "generator"]], "Discriminator": [[56, "discriminator"]], "Loss Functions and Optimizers": [[56, "loss-functions-and-optimizers"]], "Training": [[56, "training"], [145, "training"], [146, "training"], [179, "training"], [184, "training"], [214, "training"], [214, "id3"]], "Where to Go Next": [[56, "where-to-go-next"]], "Fault-tolerant Distributed Training with torchrun": [[57, "fault-tolerant-distributed-training-with-torchrun"]], "Why use torchrun": [[57, "why-use-torchrun"]], "Graceful restarts": [[57, "graceful-restarts"]], "Process group initialization": [[57, "process-group-initialization"]], "Use torchrun-provided environment variables": [[57, "use-torchrun-provided-environment-variables"]], "Saving and loading snapshots": [[57, "saving-and-loading-snapshots"]], "Loading a snapshot in the Trainer constructor": [[57, "loading-a-snapshot-in-the-trainer-constructor"]], "Resuming training": [[57, "resuming-training"]], "Running the script": [[57, "running-the-script"]], "Distributed Data Parallel in PyTorch - Video Tutorials": [[58, "distributed-data-parallel-in-pytorch-video-tutorials"]], "Running the code": [[58, "running-the-code"]], "Tutorial sections": [[58, "tutorial-sections"]], "Multi GPU training with DDP": [[59, "multi-gpu-training-with-ddp"]], "Imports": [[59, "imports"]], "Constructing the process group": [[59, "constructing-the-process-group"]], "Constructing the DDP model": [[59, "constructing-the-ddp-model"]], "Distributing input data": [[59, "distributing-input-data"]], "Saving model checkpoints": [[59, "saving-model-checkpoints"]], "Running the distributed training job": [[59, "running-the-distributed-training-job"]], "What is Distributed Data Parallel (DDP)": [[60, "what-is-distributed-data-parallel-ddp"]], "Why you should prefer DDP over DataParallel (DP)": [[60, "why-you-should-prefer-ddp-over-dataparallel-dp"]], "What is PyTorch?": [[61, "what-is-pytorch"]], "Goal of this tutorial:": [[61, "goal-of-this-tutorial"]], "Image Segmentation DeepLabV3 on Android": [[62, "image-segmentation-deeplabv3-on-android"]], "Image Segmentation DeepLabV3 on iOS": [[63, "image-segmentation-deeplabv3-on-ios"]], "PyTorch Distributed Overview": [[64, "pytorch-distributed-overview"]], "Parallelism APIs": [[64, "parallelism-apis"]], "Sharding primitives": [[64, "sharding-primitives"]], "Communications APIs": [[64, "communications-apis"]], "Launcher": [[64, "launcher"]], "Applying Parallelism To Scale Your Model": [[64, "applying-parallelism-to-scale-your-model"]], "PyTorch Distributed Developers": [[64, "pytorch-distributed-developers"]], "PyTorch: Tensors and autograd": [[66, "pytorch-tensors-and-autograd"], [120, "pytorch-tensors-and-autograd"]], "PyTorch: Defining New autograd Functions": [[67, "pytorch-defining-new-autograd-functions"]], "PyTorch: Control Flow + Weight Sharing": [[69, "pytorch-control-flow-weight-sharing"], [120, "pytorch-control-flow-weight-sharing"]], "PyTorch: Custom nn Modules": [[71, "pytorch-custom-nn-modules"], [120, "pytorch-custom-nn-modules"]], "PyTorch: nn": [[72, "pytorch-nn"], [120, "pytorch-nn"]], "PyTorch: optim": [[73, "pytorch-optim"], [120, "pytorch-optim"]], "Warm-up: numpy": [[76, "warm-up-numpy"], [120, "warm-up-numpy"]], "PyTorch: Tensors": [[77, "pytorch-tensors"], [120, "pytorch-tensors"]], "Adversarial Example Generation": [[79, "adversarial-example-generation"]], "Threat Model": [[79, "threat-model"]], "Fast Gradient Sign Attack": [[79, "fast-gradient-sign-attack"]], "Model Under Attack": [[79, "model-under-attack"]], "FGSM Attack": [[79, "fgsm-attack"]], "Testing Function": [[79, "testing-function"]], "Run Attack": [[79, "run-attack"]], "Accuracy vs Epsilon": [[79, "accuracy-vs-epsilon"]], "Sample Adversarial Examples": [[79, "sample-adversarial-examples"]], "Where to go next?": [[79, "where-to-go-next"]], "Finetuning Torchvision Models": [[80, "finetuning-torchvision-models"]], "Autograd": [[81, "autograd"], [120, "autograd"], [120, "id2"]], "nn Package": [[82, "nn-package"]], "Multi-GPU Examples": [[83, "multi-gpu-examples"]], "PyTorch for Former Torch Users": [[85, "pytorch-for-former-torch-users"]], "Introduction to Holistic Trace Analysis": [[86, "introduction-to-holistic-trace-analysis"]], "Installing HTA": [[86, "installing-hta"]], "Temporal Breakdown": [[86, "temporal-breakdown"]], "Idle Time Breakdown": [[86, "idle-time-breakdown"]], "Kernel Breakdown": [[86, "kernel-breakdown"]], "Kernel Duration Distribution": [[86, "kernel-duration-distribution"]], "Communication Computation Overlap": [[86, "communication-computation-overlap"]], "Augmented Counters": [[86, "augmented-counters"]], "Memory Bandwidth & Queue Length Counters": [[86, "memory-bandwidth-queue-length-counters"]], "CUDA Kernel Launch Statistics": [[86, "cuda-kernel-launch-statistics"]], "Trace Diff using Holistic Trace Analysis": [[87, "trace-diff-using-holistic-trace-analysis"]], "Learning Hybrid Frontend Syntax Through Example": [[89, "learning-hybrid-frontend-syntax-through-example"]], "Hybrid Frontend Information": [[89, "hybrid-frontend-information"]], "Motivating Example": [[89, "motivating-example"]], "Part 1 - Tracing a pure python function": [[89, "part-1-tracing-a-pure-python-function"]], "Part 2 - Scripting a pure python function": [[89, "part-2-scripting-a-pure-python-function"]], "Part 3 - Tracing a nn.Module": [[89, "part-3-tracing-a-nn-module"]], "Part 4 - Scripting a nn.Module": [[89, "part-4-scripting-a-nn-module"]], "Top-Level Module": [[89, "top-level-module"]], "Running the Model": [[89, "running-the-model"]], "Tracing the Top-Level Model": [[89, "tracing-the-top-level-model"]], "Hybrid Frontend Tutorials": [[91, "hybrid-frontend-tutorials"]], "Hyperparameter tuning with Ray Tune": [[92, "hyperparameter-tuning-with-ray-tune"]], "Setup / Imports": [[92, "setup-imports"]], "Data loaders": [[92, "data-loaders"]], "Configurable neural network": [[92, "configurable-neural-network"]], "The train function": [[92, "the-train-function"]], "Adding (multi) GPU support with DataParallel": [[92, "adding-multi-gpu-support-with-dataparallel"]], "Communicating with Ray Tune": [[92, "communicating-with-ray-tune"]], "Full training function": [[92, "full-training-function"]], "Test set accuracy": [[92, "test-set-accuracy"]], "Configuring the search space": [[92, "configuring-the-search-space"]], "Introduction to PyTorch - YouTube Series": [[93, "introduction-to-pytorch-youtube-series"], [98, "introduction-to-pytorch-youtube-series"]], "The Fundamentals of Autograd": [[94, "the-fundamentals-of-autograd"]], "What Do We Need Autograd For?": [[94, "what-do-we-need-autograd-for"]], "A Simple Example": [[94, "a-simple-example"]], "Autograd in Training": [[94, "autograd-in-training"]], "Turning Autograd Off and On": [[94, "turning-autograd-off-and-on"]], "Autograd and In-place Operations": [[94, "autograd-and-in-place-operations"]], "Autograd Profiler": [[94, "autograd-profiler"]], "Advanced Topic: More Autograd Detail and the High-Level API": [[94, "advanced-topic-more-autograd-detail-and-the-high-level-api"]], "The High-Level API": [[94, "the-high-level-api"]], "Model Understanding with Captum": [[95, "model-understanding-with-captum"]], "A First Example": [[95, "a-first-example"]], "Feature Attribution with Integrated Gradients": [[95, "feature-attribution-with-integrated-gradients"]], "Feature Attribution with Occlusion": [[95, "feature-attribution-with-occlusion"]], "Layer Attribution with Layer GradCAM": [[95, "layer-attribution-with-layer-gradcam"]], "Visualization with Captum Insights": [[95, "visualization-with-captum-insights"]], "Introduction to PyTorch on YouTube": [[96, "introduction-to-pytorch-on-youtube"]], "Introduction to PyTorch": [[97, "introduction-to-pytorch"], [108, "introduction-to-pytorch"]], "PyTorch Tensors": [[97, "pytorch-tensors"]], "PyTorch Models": [[97, "pytorch-models"]], "Datasets and Dataloaders": [[97, "datasets-and-dataloaders"]], "Training Your PyTorch Model": [[97, "training-your-pytorch-model"]], "Building Models with PyTorch": [[99, "building-models-with-pytorch"]], "torch.nn.Module and torch.nn.Parameter": [[99, "torch-nn-module-and-torch-nn-parameter"]], "Common Layer Types": [[99, "common-layer-types"]], "Linear Layers": [[99, "linear-layers"]], "Convolutional Layers": [[99, "convolutional-layers"]], "Recurrent Layers": [[99, "recurrent-layers"]], "Transformers": [[99, "transformers"]], "Other Layers and Functions": [[99, "other-layers-and-functions"]], "Data Manipulation Layers": [[99, "data-manipulation-layers"]], "Activation Functions": [[99, "activation-functions"]], "PyTorch TensorBoard Support": [[101, "pytorch-tensorboard-support"]], "Before You Start": [[101, "before-you-start"]], "Showing Images in TensorBoard": [[101, "showing-images-in-tensorboard"]], "Graphing Scalars to Visualize Training": [[101, "graphing-scalars-to-visualize-training"]], "Visualizing Your Model": [[101, "visualizing-your-model"]], "Visualizing Your Dataset with Embeddings": [[101, "visualizing-your-dataset-with-embeddings"]], "Other Resources": [[101, "other-resources"], [103, "other-resources"]], "Introduction to PyTorch Tensors": [[102, "introduction-to-pytorch-tensors"]], "Creating Tensors": [[102, "creating-tensors"], [108, "creating-tensors"]], "Random Tensors and Seeding": [[102, "random-tensors-and-seeding"]], "Tensor Shapes": [[102, "tensor-shapes"]], "Tensor Data Types": [[102, "tensor-data-types"]], "Math & Logic with PyTorch Tensors": [[102, "math-logic-with-pytorch-tensors"]], "In Brief: Tensor Broadcasting": [[102, "in-brief-tensor-broadcasting"]], "More Math with Tensors": [[102, "more-math-with-tensors"]], "Altering Tensors in Place": [[102, "altering-tensors-in-place"]], "Copying Tensors": [[102, "copying-tensors"]], "Moving to Accelerator": [[102, "moving-to-accelerator"]], "Manipulating Tensor Shapes": [[102, "manipulating-tensor-shapes"]], "Changing the Number of Dimensions": [[102, "changing-the-number-of-dimensions"]], "NumPy Bridge": [[102, "numpy-bridge"]], "Training with PyTorch": [[103, "training-with-pytorch"]], "Dataset and DataLoader": [[103, "dataset-and-dataloader"]], "The Model": [[103, "the-model"]], "The Training Loop": [[103, "the-training-loop"]], "Per-Epoch Activity": [[103, "per-epoch-activity"]], "Knowledge Distillation Tutorial": [[104, "knowledge-distillation-tutorial"]], "Loading CIFAR-10": [[104, "loading-cifar-10"]], "Defining model classes and utility functions": [[104, "defining-model-classes-and-utility-functions"]], "Cross-entropy runs": [[104, "cross-entropy-runs"]], "Knowledge distillation run": [[104, "knowledge-distillation-run"]], "Cosine loss minimization run": [[104, "cosine-loss-minimization-run"]], "Intermediate regressor run": [[104, "intermediate-regressor-run"]], "Advanced: Making Dynamic Decisions and the Bi-LSTM CRF": [[105, "advanced-making-dynamic-decisions-and-the-bi-lstm-crf"]], "Dynamic versus Static Deep Learning Toolkits": [[105, "dynamic-versus-static-deep-learning-toolkits"]], "Bi-LSTM Conditional Random Field Discussion": [[105, "bi-lstm-conditional-random-field-discussion"]], "Implementation Notes": [[105, "implementation-notes"]], "Exercise: A new loss function for discriminative tagging": [[105, "exercise-a-new-loss-function-for-discriminative-tagging"]], "Deep Learning with PyTorch": [[106, "deep-learning-with-pytorch"]], "Deep Learning Building Blocks: Affine maps, non-linearities and objectives": [[106, "deep-learning-building-blocks-affine-maps-non-linearities-and-objectives"]], "Affine Maps": [[106, "affine-maps"]], "Non-Linearities": [[106, "non-linearities"]], "Softmax and Probabilities": [[106, "softmax-and-probabilities"]], "Objective Functions": [[106, "objective-functions"]], "Optimization and Training": [[106, "optimization-and-training"]], "Creating Network Components in PyTorch": [[106, "creating-network-components-in-pytorch"]], "Example: Logistic Regression Bag-of-Words classifier": [[106, "example-logistic-regression-bag-of-words-classifier"]], "Deep Learning for NLP with Pytorch": [[107, "deep-learning-for-nlp-with-pytorch"]], "Introduction to Torch\u2019s tensor library": [[108, "introduction-to-torch-s-tensor-library"]], "Operations with Tensors": [[108, "operations-with-tensors"]], "Reshaping Tensors": [[108, "reshaping-tensors"]], "Computation Graphs and Automatic Differentiation": [[108, "computation-graphs-and-automatic-differentiation"]], "Sequence Models and Long Short-Term Memory Networks": [[109, "sequence-models-and-long-short-term-memory-networks"]], "LSTMs in Pytorch": [[109, "lstms-in-pytorch"]], "Example: An LSTM for Part-of-Speech Tagging": [[109, "example-an-lstm-for-part-of-speech-tagging"]], "Exercise: Augmenting the LSTM part-of-speech tagger with character-level features": [[109, "exercise-augmenting-the-lstm-part-of-speech-tagger-with-character-level-features"]], "Word Embeddings: Encoding Lexical Semantics": [[111, "word-embeddings-encoding-lexical-semantics"]], "Getting Dense Word Embeddings": [[111, "getting-dense-word-embeddings"]], "Word Embeddings in Pytorch": [[111, "word-embeddings-in-pytorch"]], "An Example: N-Gram Language Modeling": [[111, "an-example-n-gram-language-modeling"]], "Exercise: Computing Word Embeddings: Continuous Bag-of-Words": [[111, "exercise-computing-word-embeddings-continuous-bag-of-words"]], "What is torch.nn really?": [[112, "what-is-torch-nn-really"]], "MNIST data setup": [[112, "mnist-data-setup"]], "Neural net from scratch (without torch.nn)": [[112, "neural-net-from-scratch-without-torch-nn"]], "Using torch.nn.functional": [[112, "using-torch-nn-functional"]], "Refactor using nn.Module": [[112, "refactor-using-nn-module"]], "Refactor using nn.Linear": [[112, "refactor-using-nn-linear"]], "Refactor using torch.optim": [[112, "refactor-using-torch-optim"]], "Refactor using Dataset": [[112, "refactor-using-dataset"]], "Refactor using DataLoader": [[112, "refactor-using-dataloader"]], "Add validation": [[112, "add-validation"]], "Create fit() and get_data()": [[112, "create-fit-and-get-data"]], "Switch to CNN": [[112, "switch-to-cnn"]], "Using nn.Sequential": [[112, "using-nn-sequential"]], "Wrapping DataLoader": [[112, "wrapping-dataloader"]], "Using your Accelerator": [[112, "using-your-accelerator"]], "Closing thoughts": [[112, "closing-thoughts"]], "Export a model with control flow to ONNX": [[113, "export-a-model-with-control-flow-to-onnx"]], "Define the Models": [[113, "define-the-models"]], "Exporting the Model: First Attempt": [[113, "exporting-the-model-first-attempt"]], "Suggested Patch: Refactoring with torch.cond()": [[113, "suggested-patch-refactoring-with-torch-cond"]], "Further reading": [[113, "further-reading"], [114, "further-reading"], [116, "further-reading"], [117, "further-reading"]], "Export a PyTorch model to ONNX": [[114, "export-a-pytorch-model-to-onnx"]], "1. Install the required dependencies": [[114, "install-the-required-dependencies"]], "2. Author a simple image classifier model": [[114, "author-a-simple-image-classifier-model"]], "3. Export the model to ONNX format": [[114, "export-the-model-to-onnx-format"]], "4. Save the ONNX model in a file": [[114, "save-the-onnx-model-in-a-file"]], "5. Visualize the ONNX model graph using Netron": [[114, "visualize-the-onnx-model-graph-using-netron"]], "6. Execute the ONNX model with ONNX Runtime": [[114, "execute-the-onnx-model-with-onnx-runtime"]], "7. Compare the PyTorch results with the ones from the ONNX Runtime": [[114, "compare-the-pytorch-results-with-the-ones-from-the-onnx-runtime"]], "ONNX": [[115, "onnx"]], "Introduction to ONNX": [[116, "introduction-to-onnx"]], "Dependencies": [[116, "dependencies"]], "Extending the ONNX Exporter Operator Support": [[117, "extending-the-onnx-exporter-operator-support"]], "Overriding the implementation of an existing PyTorch operator": [[117, "overriding-the-implementation-of-an-existing-pytorch-operator"]], "Using custom ONNX operators": [[117, "using-custom-onnx-operators"]], "Supporting a custom PyTorch operator": [[117, "supporting-a-custom-pytorch-operator"]], "Profiling your PyTorch Module": [[119, "profiling-your-pytorch-module"]], "Performance debugging using Profiler": [[119, "performance-debugging-using-profiler"]], "Profile the forward pass": [[119, "profile-the-forward-pass"]], "Print profiler results": [[119, "print-profiler-results"]], "Improve memory performance": [[119, "improve-memory-performance"]], "Improve time performance": [[119, "improve-time-performance"]], "Learning PyTorch with Examples": [[120, "learning-pytorch-with-examples"]], "Table of Contents": [[120, "table-of-contents"]], "PyTorch: Defining new autograd functions": [[120, "pytorch-defining-new-autograd-functions"]], "nn module": [[120, "nn-module"], [120, "id3"]], "Examples": [[120, "examples"], [215, "examples"], [253, "examples"], [282, "examples"]], "Saving and Loading Models": [[121, "saving-and-loading-models"]], "What is a state_dict?": [[121, "what-is-a-state-dict"]], "Example:": [[121, "example"]], "Saving & Loading Model for Inference": [[121, "saving-loading-model-for-inference"]], "Save/Load state_dict (Recommended)": [[121, "save-load-state-dict-recommended"]], "Save/Load Entire Model": [[121, "save-load-entire-model"]], "Saving an Exported Program": [[121, "saving-an-exported-program"]], "Saving & Loading a General Checkpoint for Inference and/or Resuming Training": [[121, "saving-loading-a-general-checkpoint-for-inference-and-or-resuming-training"]], "Save:": [[121, "save"], [121, "id1"], [121, "id3"]], "Load:": [[121, "load"], [121, "id2"], [121, "id4"]], "Saving Multiple Models in One File": [[121, "saving-multiple-models-in-one-file"]], "Warmstarting Model Using Parameters from a Different Model": [[121, "warmstarting-model-using-parameters-from-a-different-model"]], "Saving & Loading Model Across Devices": [[121, "saving-loading-model-across-devices"]], "Save on GPU, Load on CPU": [[121, "save-on-gpu-load-on-cpu"]], "Save on GPU, Load on GPU": [[121, "save-on-gpu-load-on-gpu"]], "Save on CPU, Load on GPU": [[121, "save-on-cpu-load-on-gpu"]], "Saving torch.nn.DataParallel Models": [[121, "saving-torch-nn-dataparallel-models"]], "T5-Base Model for Summarization, Sentiment Classification, and Translation": [[123, "t5-base-model-for-summarization-sentiment-classification-and-translation"]], "Template Tutorial": [[124, "template-tutorial"]], "Steps": [[124, "steps"], [188, "steps"], [225, "steps"], [227, "steps"], [230, "steps"], [241, "steps"], [242, "steps"], [243, "steps"], [244, "steps"], [245, "steps"]], "(Optional) Additional Exercises": [[124, "optional-additional-exercises"]], "Text classification with the torchtext library": [[125, "text-classification-with-the-torchtext-library"]], "Preprocess custom text dataset using torchtext": [[126, "preprocess-custom-text-dataset-using-torchtext"]], "Transfer Learning for Computer Vision Tutorial": [[127, "transfer-learning-for-computer-vision-tutorial"]], "Load Data": [[127, "load-data"]], "Visualize a few images": [[127, "visualize-a-few-images"]], "Training the model": [[127, "training-the-model"], [186, "training-the-model"]], "Visualizing the model predictions": [[127, "visualizing-the-model-predictions"]], "Finetuning the ConvNet": [[127, "finetuning-the-convnet"]], "Train and evaluate": [[127, "train-and-evaluate"], [127, "id1"]], "ConvNet as fixed feature extractor": [[127, "convnet-as-fixed-feature-extractor"]], "Inference on custom images": [[127, "inference-on-custom-images"]], "Further Learning": [[127, "further-learning"]], "Language Modeling with nn.Transformer and torchtext": [[128, "language-modeling-with-nn-transformer-and-torchtext"]], "Language Translation with nn.Transformer and torchtext": [[129, "language-translation-with-nn-transformer-and-torchtext"]], "Understanding requires_grad, retain_grad, Leaf, and Non-leaf Tensors": [[130, "understanding-requires-grad-retain-grad-leaf-and-non-leaf-tensors"]], "Setup": [[130, "setup"], [147, "setup"], [154, "setup"], [155, "setup"], [166, "setup"], [174, "setup"], [188, "setup"], [200, "setup"], [227, "setup"], [230, "setup"], [241, "setup"], [242, "setup"], [243, "setup"], [244, "setup"], [245, "setup"], [256, "setup"], [263, "setup"]], "Leaf vs.\u00a0non-leaf tensors": [[130, "leaf-vs-non-leaf-tensors"]], "requires_grad": [[130, "requires-grad"]], "retain_grad": [[130, "retain-grad"]], "Summary table": [[130, "summary-table"]], "References": [[130, "references"], [200, "references"]], "Compilers": [[131, "compilers"]], "Deep Dive": [[132, "deep-dive"]], "Distributed": [[133, "distributed"]], "Learn DDP": [[133, "learn-ddp"]], "Learn FSDP2": [[133, "learn-fsdp2"]], "Learn Tensor Parallel (TP)": [[133, "learn-tensor-parallel-tp"]], "Learn DeviceMesh": [[133, "learn-devicemesh"]], "Learn RPC": [[133, "learn-rpc"]], "Custom Extensions": [[133, "custom-extensions"]], "Domains": [[134, "domains"]], "Ecosystem": [[135, "ecosystem"]], "Extension": [[136, "extension"]], "Welcome to PyTorch Tutorials": [[137, "welcome-to-pytorch-tutorials"]], "Additional Resources": [[137, "additional-resources"], [174, "additional-resources"]], "Getting Started with Fully Sharded Data Parallel(FSDP)": [[138, "getting-started-with-fully-sharded-data-parallel-fsdp"]], "How FSDP works": [[138, "how-fsdp-works"]], "How to use FSDP": [[138, "how-to-use-fsdp"]], "Advanced Model Training with Fully Sharded Data Parallel (FSDP)": [[139, "advanced-model-training-with-fully-sharded-data-parallel-fsdp"]], "FSDP Features in This Tutorial": [[139, "fsdp-features-in-this-tutorial"]], "Recap on How FSDP Works": [[139, "recap-on-how-fsdp-works"]], "Fine-tuning HF T5": [[139, "fine-tuning-hf-t5"]], "Transformer Wrapping Policy": [[139, "transformer-wrapping-policy"]], "Mixed Precision": [[139, "mixed-precision"]], "Intializing FSDP Model on Device": [[139, "intializing-fsdp-model-on-device"]], "Sharding Strategy": [[139, "sharding-strategy"]], "Backward Prefetch": [[139, "backward-prefetch"]], "Model Checkpoint Saving, by streaming to the Rank0 CPU": [[139, "model-checkpoint-saving-by-streaming-to-the-rank0-cpu"]], "Getting Started with Fully Sharded Data Parallel (FSDP2)": [[140, "getting-started-with-fully-sharded-data-parallel-fsdp2"]], "How FSDP2 works": [[140, "how-fsdp2-works"]], "How to use FSDP2": [[140, "how-to-use-fsdp2"]], "Model Initialization": [[140, "model-initialization"]], "Forward/Backward with Prefetching": [[140, "forward-backward-with-prefetching"]], "Enabling Mixed Precision": [[140, "enabling-mixed-precision"]], "Gradient Clipping and Optimizer with DTensor": [[140, "gradient-clipping-and-optimizer-with-dtensor"]], "State Dicts with DTensor APIs": [[140, "state-dicts-with-dtensor-apis"]], "State Dict with DCP APIs": [[140, "state-dict-with-dcp-apis"]], "FSDP1-to-FSDP2 migration guide": [[140, "fsdp1-to-fsdp2-migration-guide"]], "Introduction to Libuv TCPStore Backend": [[141, "introduction-to-libuv-tcpstore-backend"]], "Performance Benchmark": [[141, "performance-benchmark"]], "Impact": [[141, "impact"]], "Exit Route 1: Pass use_libuv=False to TCPStore Initialization": [[141, "exit-route-1-pass-use-libuv-false-to-tcpstore-initialization"]], "Exit Route 2: Add use_libuv=0 to init_method at ProcessGroup Initialization": [[141, "exit-route-2-add-use-libuv-0-to-init-method-at-processgroup-initialization"]], "Exit Route 3: Set Environment Variable USE_LIBUV to 0": [[141, "exit-route-3-set-environment-variable-use-libuv-to-0"]], "Large Scale Transformer model training with Tensor Parallel (TP)": [[142, "large-scale-transformer-model-training-with-tensor-parallel-tp"]], "How Tensor Parallel works?": [[142, "how-tensor-parallel-works"]], "When and Why you should apply Tensor Parallel": [[142, "when-and-why-you-should-apply-tensor-parallel"]], "How to apply Tensor Parallel": [[142, "how-to-apply-tensor-parallel"]], "Apply Sequence Parallel to LayerNorm/RMSNorm layers": [[142, "apply-sequence-parallel-to-layernorm-rmsnorm-layers"]], "Apply Loss Parallel": [[142, "apply-loss-parallel"]], "Combine Tensor Parallel with Fully Sharded Data Parallel together": [[142, "combine-tensor-parallel-with-fully-sharded-data-parallel-together"]], "Hooks for autograd saved tensors": [[143, "hooks-for-autograd-saved-tensors"]], "Saved tensors": [[143, "saved-tensors"]], "Why does training a model (typically) requires more memory than evaluating it?": [[143, "why-does-training-a-model-typically-requires-more-memory-than-evaluating-it"]], "The concept of packing / unpacking": [[143, "the-concept-of-packing-unpacking"]], "Saved tensors hooks": [[143, "saved-tensors-hooks"]], "Some unconventional examples": [[143, "some-unconventional-examples"]], "Returning an int": [[143, "returning-an-int"]], "Returning a tuple": [[143, "returning-a-tuple"]], "Returning a str": [[143, "returning-a-str"]], "Saving tensors to CPU": [[143, "saving-tensors-to-cpu"]], "Saving tensors to disk": [[143, "saving-tensors-to-disk"]], "Multi-Objective NAS with Ax": [[144, "multi-objective-nas-with-ax"]], "Defining the TorchX App": [[144, "defining-the-torchx-app"]], "Setting up the Runner": [[144, "setting-up-the-runner"]], "Setting up the SearchSpace": [[144, "setting-up-the-searchspace"]], "Setting up Metrics": [[144, "setting-up-metrics"]], "Setting up the OptimizationConfig": [[144, "setting-up-the-optimizationconfig"]], "Creating the Ax Experiment": [[144, "creating-the-ax-experiment"]], "Choosing the Generation Strategy": [[144, "choosing-the-generation-strategy"]], "Configuring the Scheduler": [[144, "configuring-the-scheduler"]], "Running the optimization": [[144, "running-the-optimization"]], "Evaluating the results": [[144, "evaluating-the-results"]], "Acknowledgments": [[144, "acknowledgments"]], "NLP From Scratch: Classifying Names with a Character-Level RNN": [[145, "nlp-from-scratch-classifying-names-with-a-character-level-rnn"]], "Recommended Preparation": [[145, "recommended-preparation"]], "Preparing Torch": [[145, "preparing-torch"]], "Preparing the Data": [[145, "preparing-the-data"], [146, "preparing-the-data"]], "Turning Names into Tensors": [[145, "turning-names-into-tensors"]], "Creating the Network": [[145, "creating-the-network"], [146, "creating-the-network"]], "Training the Network": [[145, "training-the-network"], [146, "training-the-network"]], "Plotting the Results": [[145, "plotting-the-results"]], "Evaluating the Results": [[145, "evaluating-the-results"]], "Exercises": [[145, "exercises"], [146, "exercises"], [184, "exercises"]], "NLP From Scratch: Generating Names with a Character-Level RNN": [[146, "nlp-from-scratch-generating-names-with-a-character-level-rnn"]], "Preparing for Training": [[146, "preparing-for-training"]], "Plotting the Losses": [[146, "plotting-the-losses"]], "Sampling the Network": [[146, "sampling-the-network"]], "Compiled Autograd: Capturing a larger backward graph for torch.compile": [[147, "compiled-autograd-capturing-a-larger-backward-graph-for-torch-compile"]], "Basic usage": [[147, "basic-usage"]], "Inspecting the compiled autograd logs": [[147, "inspecting-the-compiled-autograd-logs"]], "Compiling the forward and backward pass using different flags": [[147, "compiling-the-forward-and-backward-pass-using-different-flags"]], "Compiled Autograd addresses certain limitations of AOTAutograd": [[147, "compiled-autograd-addresses-certain-limitations-of-aotautograd"]], "Common recompilation reasons for Compiled Autograd": [[147, "common-recompilation-reasons-for-compiled-autograd"]], "Fusing Convolution and Batch Norm using Custom Function": [[148, "fusing-convolution-and-batch-norm-using-custom-function"]], "Backward Formula Implementation for Convolution": [[148, "backward-formula-implementation-for-convolution"]], "Backward Formula Implementation for Batch Norm": [[148, "backward-formula-implementation-for-batch-norm"]], "Fusing Convolution and BatchNorm": [[148, "fusing-convolution-and-batchnorm"]], "Testing out our new Layer": [[148, "testing-out-our-new-layer"]], "A Comparison of Memory Usage": [[148, "a-comparison-of-memory-usage"]], "Double Backward with Custom Functions": [[149, "double-backward-with-custom-functions"]], "Saving the Inputs": [[149, "saving-the-inputs"]], "Saving the Outputs": [[149, "saving-the-outputs"]], "Saving Intermediate Results": [[149, "saving-intermediate-results"]], "Saving Intermediate Results: What not to do": [[149, "saving-intermediate-results-what-not-to-do"]], "When Backward is not Tracked": [[149, "when-backward-is-not-tracked"]], "Training \u201creal-world\u201d models with DDP": [[150, "training-real-world-models-with-ddp"]], "Files used for training": [[150, "files-used-for-training"]], "Saving and Loading from the cloud": [[150, "saving-and-loading-from-the-cloud"]], "Using Mixed Precision": [[150, "using-mixed-precision"]], "When is DDP not enough?": [[150, "when-is-ddp-not-enough"]], "Multinode Training": [[151, "multinode-training"]], "Local and Global ranks": [[151, "local-and-global-ranks"]], "Heteregeneous Scaling": [[151, "heteregeneous-scaling"]], "Troubleshooting": [[151, "troubleshooting"], [224, "troubleshooting"]], "Getting Started with Distributed Data Parallel": [[152, "getting-started-with-distributed-data-parallel"]], "Comparison between DataParallel and DistributedDataParallel": [[152, "comparison-between-dataparallel-and-distributeddataparallel"]], "Basic Use Case": [[152, "basic-use-case"]], "Skewed Processing Speeds": [[152, "skewed-processing-speeds"]], "Save and Load Checkpoints": [[152, "save-and-load-checkpoints"]], "Combining DDP with Model Parallelism": [[152, "combining-ddp-with-model-parallelism"]], "Initialize DDP with torch.distributed.run/torchrun": [[152, "initialize-ddp-with-torch-distributed-run-torchrun"]], "Distributed Pipeline Parallelism Using RPC": [[153, "distributed-pipeline-parallelism-using-rpc"]], "Writing Distributed Applications with PyTorch": [[154, "writing-distributed-applications-with-pytorch"]], "Point-to-Point Communication": [[154, "point-to-point-communication"]], "Collective Communication": [[154, "collective-communication"]], "Distributed Training": [[154, "distributed-training"]], "Our Own Ring-Allreduce": [[154, "our-own-ring-allreduce"]], "Advanced Topics": [[154, "advanced-topics"]], "Communication Backends": [[154, "communication-backends"]], "Initialization Methods": [[154, "initialization-methods"]], "Recurrent DQN: Training recurrent policies": [[155, "recurrent-dqn-training-recurrent-policies"]], "Policy": [[155, "policy"], [178, "policy"]], "Convolutional network": [[155, "convolutional-network"]], "LSTM Module": [[155, "lstm-module"]], "MLP": [[155, "mlp"]], "Using the Q-Values to select an action": [[155, "using-the-q-values-to-select-an-action"]], "Using the model for the loss": [[155, "using-the-model-for-the-loss"]], "DQN Loss": [[155, "dqn-loss"]], "Collector and replay buffer": [[155, "collector-and-replay-buffer"]], "Model ensembling": [[156, "model-ensembling"]], "What is model ensembling?": [[156, "what-is-model-ensembling"]], "Using vmap to vectorize the ensemble": [[156, "using-vmap-to-vectorize-the-ensemble"]], "Performance": [[156, "performance"]], "Forced Alignment with Wav2Vec2": [[157, "forced-alignment-with-wav2vec2"]], "Forward-mode Automatic Differentiation (Beta)": [[158, "forward-mode-automatic-differentiation-beta"]], "Basic Usage": [[158, "basic-usage"], [193, "basic-usage"], [195, "basic-usage"], [213, "basic-usage"], [252, "basic-usage"]], "Usage with Modules": [[158, "usage-with-modules"]], "Using the functional Module API (beta)": [[158, "using-the-functional-module-api-beta"]], "Custom autograd Function": [[158, "custom-autograd-function"]], "Functional API (beta)": [[158, "functional-api-beta"]], "Using the functional API with Modules": [[158, "using-the-functional-api-with-modules"]], "(beta) Building a Simple CPU Performance Profiler with FX": [[159, "beta-building-a-simple-cpu-performance-profiler-with-fx"]], "Capturing the Model with Symbolic Tracing": [[159, "capturing-the-model-with-symbolic-tracing"]], "Creating a Profiling Interpreter": [[159, "creating-a-profiling-interpreter"]], "Investigating the Performance of ResNet18": [[159, "investigating-the-performance-of-resnet18"]], "Inductor CPU backend debugging and profiling": [[160, "inductor-cpu-backend-debugging-and-profiling"]], "Debugging": [[160, "debugging"]], "Get more logging information": [[160, "get-more-logging-information"]], "Determine component of error": [[160, "determine-component-of-error"]], "Compilation error": [[160, "compilation-error"]], "Accuracy debugging": [[160, "accuracy-debugging"]], "Performance profiling": [[160, "performance-profiling"]], "Jacobians, Hessians, hvp, vhp, and more: composing function transforms": [[161, "jacobians-hessians-hvp-vhp-and-more-composing-function-transforms"]], "Computing the Jacobian": [[161, "computing-the-jacobian"]], "Reverse-mode Jacobian (jacrev) vs forward-mode Jacobian (jacfwd)": [[161, "reverse-mode-jacobian-jacrev-vs-forward-mode-jacobian-jacfwd"]], "Hessian computation with functorch.hessian": [[161, "hessian-computation-with-functorch-hessian"]], "Batch Jacobian and Batch Hessian": [[161, "batch-jacobian-and-batch-hessian"]], "Computing Hessian-vector products": [[161, "computing-hessian-vector-products"]], "Train a Mario-playing RL Agent": [[162, "train-a-mario-playing-rl-agent"]], "RL Definitions": [[162, "rl-definitions"]], "Initialize Environment": [[162, "initialize-environment"]], "Preprocess Environment": [[162, "preprocess-environment"]], "Agent": [[162, "agent"]], "Act": [[162, "act"]], "Cache and Recall": [[162, "cache-and-recall"]], "Learn": [[162, "learn"]], "Neural Network": [[162, "neural-network"]], "TD Estimate & TD Target": [[162, "td-estimate-td-target"]], "Updating the model": [[162, "updating-the-model"]], "Save checkpoint": [[162, "save-checkpoint"]], "Putting it all together": [[162, "putting-it-all-together"]], "Logging": [[162, "logging"]], "Let\u2019s play!": [[162, "lets-play"]], "Channels Last Memory Format in PyTorch": [[163, "channels-last-memory-format-in-pytorch"]], "Memory Format API": [[163, "memory-format-api"]], "Performance Gains": [[163, "performance-gains"]], "Converting existing models": [[163, "converting-existing-models"]], "Work to do": [[163, "work-to-do"]], "Single-Machine Model Parallel Best Practices": [[165, "single-machine-model-parallel-best-practices"]], "Neural Tangent Kernels": [[166, "neural-tangent-kernels"]], "Create a function version of the model": [[166, "create-a-function-version-of-the-model"]], "Compute the NTK: method 1 (Jacobian contraction)": [[166, "compute-the-ntk-method-1-jacobian-contraction"]], "Compute the NTK: method 2 (NTK-vector products)": [[166, "compute-the-ntk-method-2-ntk-vector-products"]], "NLP from Scratch": [[167, "nlp-from-scratch"]], "Getting Started - Accelerate Your Scripts with nvFuser": [[168, "getting-started-accelerate-your-scripts-with-nvfuser"]], "How to save memory by fusing the optimizer step into the backward pass": [[169, "how-to-save-memory-by-fusing-the-optimizer-step-into-the-backward-pass"]], "Memory usage during training": [[169, "memory-usage-during-training"]], "Capturing and visualizing memory snapshots": [[169, "capturing-and-visualizing-memory-snapshots"]], "DISCLAIMER: This technique is not for all": [[169, "disclaimer-this-technique-is-not-for-all"]], "Tensor.register_post_accumulate_grad_hook(hook) API and our technique": [[169, "tensor-register-post-accumulate-grad-hook-hook-api-and-our-technique"]], "How everything fits together in 10 lines": [[169, "how-everything-fits-together-in-10-lines"]], "Parametrizations Tutorial": [[170, "parametrizations-tutorial"]], "Implementing parametrizations by hand": [[170, "implementing-parametrizations-by-hand"]], "Introduction to parametrizations": [[170, "introduction-to-parametrizations"]], "Inspecting a parametrized module": [[170, "inspecting-a-parametrized-module"]], "Parametrizations are first-class citizens": [[170, "parametrizations-are-first-class-citizens"]], "Caching the value of a parametrization": [[170, "caching-the-value-of-a-parametrization"]], "Concatenating parametrizations": [[170, "concatenating-parametrizations"]], "Initializing parametrizations": [[170, "initializing-parametrizations"]], "Removing parametrizations": [[170, "removing-parametrizations"]], "Per-sample-gradients": [[171, "per-sample-gradients"]], "What is it?": [[171, "what-is-it"]], "Per-sample-grads, the efficient way, using function transforms": [[171, "per-sample-grads-the-efficient-way-using-function-transforms"]], "Performance comparison": [[171, "performance-comparison"]], "A guide on good usage of non_blocking and pin_memory() in PyTorch": [[172, "a-guide-on-good-usage-of-non-blocking-and-pin-memory-in-pytorch"]], "What you will learn": [[172, "what-you-will-learn"], [254, "what-you-will-learn"], [265, "what-you-will-learn"]], "Preamble": [[172, "preamble"]], "Memory management basics": [[172, "memory-management-basics"]], "CUDA and (non-)pageable memory": [[172, "cuda-and-non-pageable-memory"]], "Asynchronous vs. Synchronous Operations with non_blocking=True (CUDA cudaMemcpyAsync)": [[172, "asynchronous-vs-synchronous-operations-with-non-blocking-true-cuda-cudamemcpyasync"]], "A PyTorch perspective": [[172, "a-pytorch-perspective"]], "pin_memory()": [[172, "pin-memory"]], "non_blocking=True": [[172, "non-blocking-true"]], "Synergies": [[172, "synergies"]], "Other copy directions (GPU -> CPU, CPU -> MPS)": [[172, "other-copy-directions-gpu-cpu-cpu-mps"]], "Practical recommendations": [[172, "practical-recommendations"]], "Additional considerations": [[172, "additional-considerations"]], "Additional resources": [[172, "additional-resources"]], "Training Transformer models using Pipeline Parallelism": [[173, "training-transformer-models-using-pipeline-parallelism"]], "Introduction to Distributed Pipeline Parallelism": [[174, "introduction-to-distributed-pipeline-parallelism"]], "Step 1: Partition the Transformer Model": [[174, "step-1-partition-the-transformer-model"]], "Step 2: Define The Main Execution": [[174, "step-2-define-the-main-execution"]], "Step 3: Launch the Distributed Processes": [[174, "step-3-launch-the-distributed-processes"]], "Customize Process Group Backends Using Cpp Extensions": [[175, "customize-process-group-backends-using-cpp-extensions"]], "Basics": [[175, "basics"], [180, "basics"]], "Step 1: Implement a Subclass of Backend": [[175, "step-1-implement-a-subclass-of-backend"]], "Step 2: Expose The Extension Python APIs": [[175, "step-2-expose-the-extension-python-apis"]], "Step 3: Build The Custom Extension": [[175, "step-3-build-the-custom-extension"]], "Step 4: Use The Extension in Application": [[175, "step-4-use-the-extension-in-application"]], "Pruning Tutorial": [[176, "pruning-tutorial"]], "Create a model": [[176, "create-a-model"]], "Inspect a Module": [[176, "inspect-a-module"]], "Pruning a Module": [[176, "pruning-a-module"]], "Iterative Pruning": [[176, "iterative-pruning"]], "Serializing a pruned model": [[176, "serializing-a-pruned-model"]], "Remove pruning re-parametrization": [[176, "remove-pruning-re-parametrization"]], "Pruning multiple parameters in a model": [[176, "pruning-multiple-parameters-in-a-model"]], "Global pruning": [[176, "global-pruning"]], "Extending torch.nn.utils.prune with custom pruning functions": [[176, "extending-torch-nn-utils-prune-with-custom-pruning-functions"]], "Real Time Inference on Raspberry Pi 4 (30 fps!)": [[177, "real-time-inference-on-raspberry-pi-4-30-fps"]], "Raspberry Pi 4 Setup": [[177, "raspberry-pi-4-setup"]], "Installing PyTorch and OpenCV": [[177, "installing-pytorch-and-opencv"]], "Video Capture": [[177, "video-capture"]], "Image Preprocessing": [[177, "image-preprocessing"]], "Model Choices": [[177, "model-choices"]], "MobileNetV2: Quantization and JIT": [[177, "mobilenetv2-quantization-and-jit"]], "Putting It Together": [[177, "putting-it-together"]], "Troubleshooting: Performance": [[177, "troubleshooting-performance"]], "Reinforcement Learning (PPO) with TorchRL Tutorial": [[178, "reinforcement-learning-ppo-with-torchrl-tutorial"]], "Define Hyperparameters": [[178, "define-hyperparameters"]], "Data collection parameters": [[178, "data-collection-parameters"]], "PPO parameters": [[178, "ppo-parameters"]], "Define an environment": [[178, "define-an-environment"]], "Normalization": [[178, "normalization"]], "Value network": [[178, "value-network"]], "Loss function": [[178, "loss-function"]], "Conclusion and next steps": [[178, "conclusion-and-next-steps"]], "Reinforcement Learning (DQN) Tutorial": [[179, "reinforcement-learning-dqn-tutorial"]], "Replay Memory": [[179, "replay-memory"]], "DQN algorithm": [[179, "dqn-algorithm"]], "Q-network": [[179, "q-network"]], "Hyperparameters and utilities": [[179, "hyperparameters-and-utilities"]], "Implementing Batch RPC Processing Using Asynchronous Executions": [[180, "implementing-batch-rpc-processing-using-asynchronous-executions"]], "Batch-Updating Parameter Server": [[180, "batch-updating-parameter-server"]], "Batch-Processing CartPole Solver": [[180, "batch-processing-cartpole-solver"]], "Learn More": [[180, "learn-more"], [188, "learn-more"], [225, "learn-more"], [227, "learn-more"], [230, "learn-more"], [238, "learn-more"], [241, "learn-more"], [242, "learn-more"], [243, "learn-more"]], "Implementing a Parameter Server Using Distributed RPC Framework": [[181, "implementing-a-parameter-server-using-distributed-rpc-framework"]], "Getting Started with Distributed RPC Framework": [[182, "getting-started-with-distributed-rpc-framework"]], "Distributed Reinforcement Learning using RPC and RRef": [[182, "distributed-reinforcement-learning-using-rpc-and-rref"]], "Distributed RNN using Distributed Autograd and Distributed Optimizer": [[182, "distributed-rnn-using-distributed-autograd-and-distributed-optimizer"]], "(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)": [[183, "beta-implementing-high-performance-transformers-with-scaled-dot-product-attention-sdpa"]], "Fused implementations": [[183, "fused-implementations"]], "Explicit Dispatcher Control": [[183, "explicit-dispatcher-control"]], "Hardware dependence": [[183, "hardware-dependence"]], "Causal Self Attention": [[183, "causal-self-attention"]], "NestedTensor and Dense tensor support": [[183, "nestedtensor-and-dense-tensor-support"]], "Using SDPA with torch.compile": [[183, "using-sdpa-with-torch-compile"]], "Using SDPA with attn_bias subclasses": [[183, "using-sdpa-with-attn-bias-subclasses"]], "NLP From Scratch: Translation with a Sequence to Sequence Network and Attention": [[184, "nlp-from-scratch-translation-with-a-sequence-to-sequence-network-and-attention"]], "Loading data files": [[184, "loading-data-files"]], "The Seq2Seq Model": [[184, "the-seq2seq-model"]], "The Encoder": [[184, "the-encoder"]], "The Decoder": [[184, "the-decoder"]], "Simple Decoder": [[184, "simple-decoder"]], "Attention Decoder": [[184, "attention-decoder"]], "Preparing Training Data": [[184, "preparing-training-data"]], "Training the Model": [[184, "training-the-model"]], "Plotting results": [[184, "plotting-results"]], "Evaluation": [[184, "evaluation"]], "Training and Evaluating": [[184, "training-and-evaluating"]], "Visualizing Attention": [[184, "visualizing-attention"]], "Spatial Transformer Networks Tutorial": [[186, "spatial-transformer-networks-tutorial"]], "Loading the data": [[186, "loading-the-data"]], "Depicting spatial transformer networks": [[186, "depicting-spatial-transformer-networks"]], "Visualizing the STN results": [[186, "visualizing-the-stn-results"]], "Speech Recognition with Wav2Vec2": [[187, "speech-recognition-with-wav2vec2"]], "PyTorch Profiler With TensorBoard": [[188, "pytorch-profiler-with-tensorboard"]], "1. Prepare the data and model": [[188, "prepare-the-data-and-model"]], "2. Use profiler to record execution events": [[188, "use-profiler-to-record-execution-events"]], "3. Run the profiler": [[188, "run-the-profiler"]], "4. Use TensorBoard to view results and analyze model performance": [[188, "use-tensorboard-to-view-results-and-analyze-model-performance"]], "5. Improve performance with the help of profiler": [[188, "improve-performance-with-the-help-of-profiler"]], "6. Analyze performance with other advanced features": [[188, "analyze-performance-with-other-advanced-features"]], "7. Additional Practices: Profiling PyTorch on AMD GPUs": [[188, "additional-practices-profiling-pytorch-on-amd-gpus"]], "Visualizing Models, Data, and Training with TensorBoard": [[189, "visualizing-models-data-and-training-with-tensorboard"]], "1. TensorBoard setup": [[189, "tensorboard-setup"]], "2. Writing to TensorBoard": [[189, "writing-to-tensorboard"]], "3. Inspect the model using TensorBoard": [[189, "inspect-the-model-using-tensorboard"]], "4. Adding a \u201cProjector\u201d to TensorBoard": [[189, "adding-a-projector-to-tensorboard"]], "5. Tracking model training with TensorBoard": [[189, "tracking-model-training-with-tensorboard"]], "6. Assessing trained models with TensorBoard": [[189, "assessing-trained-models-with-tensorboard"]], "Text-to-speech with Tacotron2": [[190, "text-to-speech-with-tacotron2"]], "Whole Slide Image Classification Using PyTorch and TIAToolbox": [[191, "whole-slide-image-classification-using-pytorch-and-tiatoolbox"]], "Setting up the environment": [[191, "setting-up-the-environment"]], "Importing related libraries": [[191, "importing-related-libraries"]], "Clean-up before a run": [[191, "clean-up-before-a-run"]], "Downloading the data": [[191, "downloading-the-data"]], "Reading the data": [[191, "reading-the-data"]], "Classify image patches": [[191, "classify-image-patches"]], "Define PatchPredictor model": [[191, "define-patchpredictor-model"]], "Predict patch labels": [[191, "predict-patch-labels"]], "Predict patch labels for a whole slide": [[191, "predict-patch-labels-for-a-whole-slide"]], "Feature extraction with a pathology-specific model": [[191, "feature-extraction-with-a-pathology-specific-model"]], "Where to Go From Here": [[191, "where-to-go-from-here"]], "Building a Convolution/Batch Norm fuser with torch.compile": [[192, "building-a-convolution-batch-norm-fuser-with-torch-compile"]], "Fusing Convolution with Batch Norm": [[192, "fusing-convolution-with-batch-norm"], [192, "id1"]], "Pattern Matching with torch.compile": [[192, "pattern-matching-with-torch-compile"]], "Testing out our Fusion Pass": [[192, "testing-out-our-fusion-pass"]], "Benchmarking our Fusion on ResNet18": [[192, "benchmarking-our-fusion-on-resnet18"]], "Introduction to torch.compile": [[193, "introduction-to-torch-compile"]], "torch.compile and Nested Calls": [[193, "torch-compile-and-nested-calls"]], "Best Practices and Recommendations": [[193, "best-practices-and-recommendations"]], "Demonstrating Speedups": [[193, "demonstrating-speedups"]], "Comparison to TorchScript and FX Tracing": [[193, "comparison-to-torchscript-and-fx-tracing"]], "TorchDynamo and FX Graphs": [[193, "torchdynamo-and-fx-graphs"]], "torch.export Nightly Tutorial": [[194, "torch-export-nightly-tutorial"]], "torch.export Tutorial": [[195, "torch-export-tutorial"]], "Graph Breaks": [[195, "graph-breaks"]], "Non-Strict Export": [[195, "non-strict-export"]], "Control Flow Ops": [[195, "control-flow-ops"]], "Constraints/Dynamic Shapes": [[195, "constraints-dynamic-shapes"]], "Basic concepts: symbols and guards": [[195, "basic-concepts-symbols-and-guards"]], "0/1 specialization": [[195, "specialization"]], "Named Dims": [[195, "named-dims"]], "Constraint violations, suggested fixes": [[195, "constraint-violations-suggested-fixes"]], "Data-dependent errors": [[195, "data-dependent-errors"]], "Guards, torch._check()": [[195, "guards-torch-check"]], "Specialized values": [[195, "specialized-values"]], "Custom Ops": [[195, "custom-ops"]], "IR/Decompositions": [[195, "ir-decompositions"]], "ExportDB": [[195, "exportdb"]], "Running the Exported Program": [[195, "running-the-exported-program"]], "Introduction to TorchRec": [[196, "introduction-to-torchrec"], [197, "introduction-to-torchrec"]], "Install Dependencies": [[196, "install-dependencies"]], "Embeddings": [[196, "embeddings"]], "Embeddings in RecSys": [[196, "embeddings-in-recsys"]], "Embeddings in PyTorch": [[196, "embeddings-in-pytorch"]], "TorchRec Features Overview": [[196, "torchrec-features-overview"]], "From EmbeddingBag to EmbeddingBagCollection": [[196, "from-embeddingbag-to-embeddingbagcollection"]], "TorchRec Input/Output Data Types": [[196, "torchrec-input-output-data-types"]], "Distributed Training and Sharding": [[196, "distributed-training-and-sharding"]], "Distributed Embeddings": [[196, "distributed-embeddings"]], "Sharding": [[196, "sharding"]], "Sharded Modules": [[196, "sharded-modules"]], "Planner": [[196, "planner"]], "Planner Result": [[196, "planner-result"]], "GPU Training with LazyAwaitable": [[196, "gpu-training-with-lazyawaitable"]], "Anatomy of Sharded TorchRec modules": [[196, "anatomy-of-sharded-torchrec-modules"]], "Optimizing Embedding Lookups": [[196, "optimizing-embedding-lookups"]], "DistributedModelParallel": [[196, "distributedmodelparallel"]], "Sharding Best Practices": [[196, "sharding-best-practices"]], "Adding in the Optimizer": [[196, "adding-in-the-optimizer"]], "Optimizer Classes": [[196, "optimizer-classes"]], "Fused optimizer in TorchRec": [[196, "fused-optimizer-in-torchrec"]], "Adding an Optimizer to EmbeddingBagCollection": [[196, "adding-an-optimizer-to-embeddingbagcollection"]], "TorchVision Object Detection Finetuning Tutorial": [[198, "torchvision-object-detection-finetuning-tutorial"]], "Defining the Dataset": [[198, "defining-the-dataset"]], "Writing a custom dataset for PennFudan": [[198, "writing-a-custom-dataset-for-pennfudan"]], "Defining your model": [[198, "defining-your-model"]], "1 - Finetuning from a pretrained model": [[198, "finetuning-from-a-pretrained-model"]], "2 - Modifying the model to add a different backbone": [[198, "modifying-the-model-to-add-a-different-backbone"]], "Object detection and instance segmentation model for PennFudan Dataset": [[198, "object-detection-and-instance-segmentation-model-for-pennfudan-dataset"]], "Putting everything together": [[198, "putting-everything-together"]], "Testing forward() method (Optional)": [[198, "testing-forward-method-optional"]], "Wrapping up": [[198, "wrapping-up"]], "Accelerating PyTorch Transformers by replacing nn.Transformer with Nested Tensors and torch.compile()": [[199, "accelerating-pytorch-transformers-by-replacing-nn-transformer-with-nested-tensors-and-torch-compile"]], "Is this tutorial for me?": [[199, "is-this-tutorial-for-me"]], "Introducing the Building Blocks": [[199, "introducing-the-building-blocks"]], "The above building blocks are \u201cAll You Need\u201d (as of October 2024)": [[199, "the-above-building-blocks-are-all-you-need-as-of-october-2024"]], "MultiheadAttention": [[199, "multiheadattention"]], "Utilities": [[199, "utilities"]], "GPT-style layer": [[199, "gpt-style-layer"]], "Going one step further": [[199, "going-one-step-further"]], "Cross Attention": [[199, "cross-attention"]], "Fully masked rows no longer cause NaNs": [[199, "fully-masked-rows-no-longer-cause-nans"]], "Packed Projection": [[199, "packed-projection"]], "Input projection for MultiheadAttention": [[199, "input-projection-for-multiheadattention"]], "SwiGLU feed forward network of Transformer Layer": [[199, "swiglu-feed-forward-network-of-transformer-layer"]], "Extended examples": [[199, "extended-examples"]], "Visualizing Gradients": [[200, "visualizing-gradients"]], "Registering hooks": [[200, "registering-hooks"]], "Training and visualization": [[200, "training-and-visualization"]], "(Optional) Additional exercises": [[200, "optional-additional-exercises"]], "Intro": [[201, "intro"]], "Leverage Intel\u00ae Advanced Matrix Extensions": [[202, "leverage-intel-advanced-matrix-extensions"]], "AMX in PyTorch": [[202, "amx-in-pytorch"]], "Guidelines of leveraging AMX with workloads": [[202, "guidelines-of-leveraging-amx-with-workloads"]], "CPU operators that can leverage AMX:": [[202, "cpu-operators-that-can-leverage-amx"]], "Confirm AMX is being utilized": [[202, "confirm-amx-is-being-utilized"]], "Making Native Android Application that uses PyTorch prebuilt libraries": [[203, "making-native-android-application-that-uses-pytorch-prebuilt-libraries"]], "(beta) Compiling the optimizer with torch.compile": [[204, "beta-compiling-the-optimizer-with-torch-compile"]], "Model Setup": [[204, "model-setup"], [205, "model-setup"], [212, "model-setup"]], "Setting up and running the optimizer benchmark": [[204, "setting-up-and-running-the-optimizer-benchmark"]], "See Also": [[204, "see-also"], [252, "see-also"], [279, "see-also"]], "(beta) Running the compiled optimizer with an LR Scheduler": [[205, "beta-running-the-compiled-optimizer-with-an-lr-scheduler"]], "Setting up and running the compiled optimizer with LR Scheduler": [[205, "setting-up-and-running-the-compiled-optimizer-with-lr-scheduler"]], "Extension: What happens with a non-tensor LR?": [[205, "extension-what-happens-with-a-non-tensor-lr"]], "Asynchronous Saving with Distributed Checkpoint (DCP)": [[206, "asynchronous-saving-with-distributed-checkpoint-dcp"]], "Asynchronous Checkpointing Overview": [[206, "asynchronous-checkpointing-overview"]], "Even more performance with Pinned Memory": [[206, "even-more-performance-with-pinned-memory"]], "Getting Started with Distributed Checkpoint (DCP)": [[207, "getting-started-with-distributed-checkpoint-dcp"]], "How DCP works": [[207, "how-dcp-works"]], "How to use DCP": [[207, "how-to-use-dcp"]], "Saving": [[207, "saving"]], "Loading": [[207, "loading"]], "Formats": [[207, "formats"]], "Getting Started with CommDebugMode": [[208, "getting-started-with-commdebugmode"]], "What is CommDebugMode and why is it useful": [[208, "what-is-commdebugmode-and-why-is-it-useful"]], "Using CommDebugMode": [[208, "using-commdebugmode"]], "Getting Started with DeviceMesh": [[209, "getting-started-with-devicemesh"]], "What is DeviceMesh": [[209, "what-is-devicemesh"]], "Why DeviceMesh is Useful": [[209, "why-devicemesh-is-useful"]], "How to use DeviceMesh with HSDP": [[209, "how-to-use-devicemesh-with-hsdp"]], "How to use DeviceMesh for your custom parallel solutions": [[209, "how-to-use-devicemesh-for-your-custom-parallel-solutions"]], "Profiling PyTorch RPC-Based Workloads": [[211, "profiling-pytorch-rpc-based-workloads"], [264, "profiling-pytorch-rpc-based-workloads"]], "Explicit horizontal fusion with foreach_map and torch.compile": [[212, "explicit-horizontal-fusion-with-foreach-map-and-torch-compile"]], "Helper functions for foreach_map implementation": [[212, "helper-functions-for-foreach-map-implementation"]], "Setting up and running the compiled kernel": [[212, "setting-up-and-running-the-compiled-kernel"]], "(Beta) PyTorch Inference Performance Tuning on AWS Graviton Processors": [[213, "beta-pytorch-inference-performance-tuning-on-aws-graviton-processors"]], "Contents": [[213, "contents"]], "Speed up Inference with bfloat16 Fast Math Kernels": [[213, "speed-up-inference-with-bfloat16-fast-math-kernels"]], "Improve Inference Performance with OpenBLAS for Smaller Batch Dimensions": [[213, "improve-inference-performance-with-openblas-for-smaller-batch-dimensions"]], "Optimize Memory Allocation Overhead with Linux Transparent Huge Pages (THP)": [[213, "optimize-memory-allocation-overhead-with-linux-transparent-huge-pages-thp"]], "Intel\u00ae Extension for PyTorch*": [[214, "intel-extension-for-pytorch"]], "Features": [[214, "features"], [215, "features"]], "Examples \u2013 CPU": [[214, "examples-cpu"]], "Float32": [[214, "float32"], [214, "id1"], [214, "id4"], [214, "id7"]], "BFloat16": [[214, "bfloat16"], [214, "id2"], [214, "id5"], [214, "id8"]], "Inference": [[214, "inference"], [214, "id6"]], "Examples \u2013 GPU": [[214, "examples-gpu"]], "Float16": [[214, "float16"]], "C++ (CPU only)": [[214, "c-cpu-only"]], "Tutorials": [[214, "tutorials"], [215, "tutorials"]], "Ease-of-use quantization for PyTorch with Intel\u00ae Neural Compressor": [[215, "ease-of-use-quantization-for-pytorch-with-intel-neural-compressor"]], "FP8 Quantization": [[215, "fp8-quantization"]], "Weight-only Quantization": [[215, "weight-only-quantization"]], "Static Quantization with PT2E Backend": [[215, "static-quantization-with-pt2e-backend"]], "Accuracy-driven Tuning": [[215, "accuracy-driven-tuning"]], "Loading data in PyTorch": [[216, "loading-data-in-pytorch"]], "(beta) Efficient mobile interpreter in Android and iOS": [[217, "beta-efficient-mobile-interpreter-in-android-and-ios"]], "Pytorch Mobile Performance Recipes": [[218, "pytorch-mobile-performance-recipes"]], "Model Preparation for Android Recipe": [[219, "model-preparation-for-android-recipe"]], "Model Preparation for iOS Recipe": [[220, "model-preparation-for-ios-recipe"]], "Profiling PyTorch workloads with The Instrumentation and Tracing Technology (ITT) API": [[221, "profiling-pytorch-workloads-with-the-instrumentation-and-tracing-technology-itt-api"]], "What is Intel\u00ae VTune\u2122 Profiler": [[221, "what-is-intel-vtune-profiler"]], "What is Instrumentation and Tracing Technology (ITT) API": [[221, "what-is-instrumentation-and-tracing-technology-itt-api"]], "How to visualize PyTorch model hierarchy in Intel\u00ae VTune\u2122 Profiler": [[221, "how-to-visualize-pytorch-model-hierarchy-in-intel-vtune-profiler"]], "Launch Intel\u00ae VTune\u2122 Profiler": [[221, "launch-intel-vtune-profiler"]], "Configure Profiling for CPU": [[221, "configure-profiling-for-cpu"]], "Configure Profiling for XPU": [[221, "configure-profiling-for-xpu"]], "Read Profiling Result": [[221, "read-profiling-result"]], "Read XPU Profiling Result": [[221, "read-xpu-profiling-result"]], "A short sample code showcasing how to use PyTorch ITT APIs": [[221, "a-short-sample-code-showcasing-how-to-use-pytorch-itt-apis"]], "Summary of PyTorch Mobile Recipes": [[222, "summary-of-pytorch-mobile-recipes"]], "Model Interpretability using Captum": [[223, "model-interpretability-using-captum"]], "Before you begin": [[223, "before-you-begin"]], "Computing Attribution": [[223, "computing-attribution"]], "Visualizing the Results": [[223, "visualizing-the-results"]], "Final Notes": [[223, "final-notes"]], "Automatic Mixed Precision": [[224, "automatic-mixed-precision"]], "A simple network": [[224, "a-simple-network"]], "Default Precision": [[224, "default-precision"]], "Adding torch.autocast": [[224, "adding-torch-autocast"]], "Adding GradScaler": [[224, "adding-gradscaler"]], "All together: \u201cAutomatic Mixed Precision\u201d": [[224, "all-together-automatic-mixed-precision"]], "Inspecting/modifying gradients (e.g., clipping)": [[224, "inspecting-modifying-gradients-e-g-clipping"]], "Saving/Resuming": [[224, "saving-resuming"]], "Inference/Evaluation": [[224, "inference-evaluation"]], "Advanced topics": [[224, "advanced-topics"]], "Speedup with Amp is minor": [[224, "speedup-with-amp-is-minor"]], "Loss is inf/NaN": [[224, "loss-is-inf-nan"]], "Type mismatch error (may manifest as CUDNN_STATUS_BAD_PARAM)": [[224, "type-mismatch-error-may-manifest-as-cudnn-status-bad-param"]], "SyntaxError": [[225, "syntaxerror"]], "1. Defining functions to benchmark": [[225, "defining-functions-to-benchmark"]], "2. Benchmarking with timeit.Timer": [[225, "benchmarking-with-timeit-timer"]], "3. Benchmarking with torch.utils.benchmark.Timer": [[225, "benchmarking-with-torch-utils-benchmark-timer"]], "4. Benchmarking with Blocked Autorange": [[225, "benchmarking-with-blocked-autorange"]], "5. Comparing benchmark results": [[225, "comparing-benchmark-results"]], "6. Saving/Loading benchmark results": [[225, "saving-loading-benchmark-results"]], "7. Generating inputs with Fuzzed Parameters": [[225, "generating-inputs-with-fuzzed-parameters"]], "8. Collecting instruction counts with Callgrind": [[225, "collecting-instruction-counts-with-callgrind"]], "Changing default device": [[226, "changing-default-device"]], "Defining a Neural Network in PyTorch": [[227, "defining-a-neural-network-in-pytorch"]], "1. Import necessary libraries for loading our data": [[227, "import-necessary-libraries-for-loading-our-data"], [241, "import-necessary-libraries-for-loading-our-data"], [242, "import-necessary-libraries-for-loading-our-data"], [243, "import-necessary-libraries-for-loading-our-data"]], "2. Define and initialize the neural network": [[227, "define-and-initialize-the-neural-network"], [242, "define-and-initialize-the-neural-network"]], "3. Specify how data will pass through your model": [[227, "specify-how-data-will-pass-through-your-model"]], "4. [Optional] Pass data through your model to test": [[227, "optional-pass-data-through-your-model-to-test"]], "PyTorch Recipes": [[228, "pytorch-recipes"]], "Tips for Loading an nn.Module from a Checkpoint": [[229, "tips-for-loading-an-nn-module-from-a-checkpoint"]], "Using torch.load(mmap=True)": [[229, "using-torch-load-mmap-true"]], "Using torch.device('meta')": [[229, "using-torch-device-meta"]], "Using load_state_dict(assign=True)": [[229, "using-load-state-dict-assign-true"]], "PyTorch Profiler": [[230, "pytorch-profiler"]], "1. Import all necessary libraries": [[230, "import-all-necessary-libraries"]], "2. Instantiate a simple Resnet model": [[230, "instantiate-a-simple-resnet-model"]], "3. Using profiler to analyze execution time": [[230, "using-profiler-to-analyze-execution-time"]], "4. Using profiler to analyze memory consumption": [[230, "using-profiler-to-analyze-memory-consumption"]], "5. Using tracing functionality": [[230, "using-tracing-functionality"]], "6. Examining stack traces": [[230, "examining-stack-traces"]], "7. Using profiler to analyze long-running jobs": [[230, "using-profiler-to-analyze-long-running-jobs"]], "Reasoning about Shapes in PyTorch": [[231, "reasoning-about-shapes-in-pytorch"]], "Save Load Across Devices": [[232, "save-load-across-devices"]], "Saving And Loading A General Checkpoint": [[233, "saving-and-loading-a-general-checkpoint"]], "Saving And Loading Models For Inference": [[234, "saving-and-loading-models-for-inference"]], "Saving Multiple Models In One File": [[235, "saving-multiple-models-in-one-file"]], "Extension points in nn.Module for load_state_dict and tensor subclasses": [[237, "extension-points-in-nn-module-for-load-state-dict-and-tensor-subclasses"]], "torch.utils.swap_tensors": [[237, "torch-utils-swap-tensors"]], "Application to nn.Module": [[237, "application-to-nn-module"]], "nn.Module.to() and related methods": [[237, "nn-module-to-and-related-methods"]], "nn.Module.load_state_dict()": [[237, "nn-module-load-state-dict"]], "How to use TensorBoard with PyTorch": [[238, "how-to-use-tensorboard-with-pytorch"]], "Using TensorBoard in PyTorch": [[238, "using-tensorboard-in-pytorch"]], "Log scalars": [[238, "log-scalars"]], "Run TensorBoard": [[238, "run-tensorboard"]], "Timer quick start": [[239, "timer-quick-start"]], "1. Defining a Timer": [[239, "defining-a-timer"]], "2. Wall time: Timer.blocked_autorange(...)": [[239, "wall-time-timer-blocked-autorange"]], "3. C++ snippets": [[239, "c-snippets"]], "4. Instruction counts: Timer.collect_callgrind(...)": [[239, "instruction-counts-timer-collect-callgrind"]], "5. Instruction counts: Delving deeper": [[239, "instruction-counts-delving-deeper"]], "6. A/B testing with Callgrind": [[239, "a-b-testing-with-callgrind"]], "7. Wrapping up": [[239, "wrapping-up"]], "8. Footnotes": [[239, "footnotes"]], "Performance Tuning Guide": [[240, "performance-tuning-guide"]], "General optimizations": [[240, "general-optimizations"]], "Enable asynchronous data loading and augmentation": [[240, "enable-asynchronous-data-loading-and-augmentation"]], "Disable gradient calculation for validation or inference": [[240, "disable-gradient-calculation-for-validation-or-inference"]], "Disable bias for convolutions directly followed by a batch norm": [[240, "disable-bias-for-convolutions-directly-followed-by-a-batch-norm"]], "Use parameter.grad = None instead of model.zero_grad() or optimizer.zero_grad()": [[240, "use-parameter-grad-none-instead-of-model-zero-grad-or-optimizer-zero-grad"]], "Fuse operations": [[240, "fuse-operations"]], "Enable channels_last memory format for computer vision models": [[240, "enable-channels-last-memory-format-for-computer-vision-models"]], "Checkpoint intermediate buffers": [[240, "checkpoint-intermediate-buffers"]], "Disable debugging APIs": [[240, "disable-debugging-apis"]], "CPU specific optimizations": [[240, "cpu-specific-optimizations"]], "Utilize Non-Uniform Memory Access (NUMA) Controls": [[240, "utilize-non-uniform-memory-access-numa-controls"]], "Utilize OpenMP": [[240, "utilize-openmp"]], "Intel OpenMP Runtime Library (libiomp)": [[240, "intel-openmp-runtime-library-libiomp"]], "Switch Memory allocator": [[240, "switch-memory-allocator"]], "Train a model on CPU with PyTorch ``DistributedDataParallel``(DDP) functionality": [[240, "train-a-model-on-cpu-with-pytorch-distributeddataparallel-ddp-functionality"]], "GPU specific optimizations": [[240, "gpu-specific-optimizations"]], "Enable Tensor cores": [[240, "enable-tensor-cores"]], "Use CUDA Graphs": [[240, "use-cuda-graphs"]], "Enable cuDNN auto-tuner": [[240, "enable-cudnn-auto-tuner"]], "Avoid unnecessary CPU-GPU synchronization": [[240, "avoid-unnecessary-cpu-gpu-synchronization"]], "Create tensors directly on the target device": [[240, "create-tensors-directly-on-the-target-device"]], "Use mixed precision and AMP": [[240, "use-mixed-precision-and-amp"]], "Preallocate memory in case of variable input length": [[240, "preallocate-memory-in-case-of-variable-input-length"]], "Distributed optimizations": [[240, "distributed-optimizations"]], "Use efficient data-parallel backend": [[240, "use-efficient-data-parallel-backend"]], "Skip unnecessary all-reduce if training with DistributedDataParallel and gradient accumulation": [[240, "skip-unnecessary-all-reduce-if-training-with-distributeddataparallel-and-gradient-accumulation"]], "Match the order of layers in constructors and during the execution if using DistributedDataParallel(find_unused_parameters=True)": [[240, "match-the-order-of-layers-in-constructors-and-during-the-execution-if-using-distributeddataparallel-find-unused-parameters-true"]], "Load-balance workload in a distributed setting": [[240, "load-balance-workload-in-a-distributed-setting"]], "Warmstarting model using parameters from a different model in PyTorch": [[241, "warmstarting-model-using-parameters-from-a-different-model-in-pytorch"]], "2. Define and initialize the neural network A and B": [[241, "define-and-initialize-the-neural-network-a-and-b"]], "3. Save model A": [[241, "save-model-a"]], "4. Load into model B": [[241, "load-into-model-b"]], "What is a state_dict in PyTorch": [[242, "what-is-a-state-dict-in-pytorch"]], "3. Initialize the optimizer": [[242, "initialize-the-optimizer"]], "4. Access the model and optimizer state_dict": [[242, "access-the-model-and-optimizer-state-dict"]], "Zeroing out gradients in PyTorch": [[243, "zeroing-out-gradients-in-pytorch"]], "2. Load and normalize the dataset": [[243, "load-and-normalize-the-dataset"]], "3. Build the neural network": [[243, "build-the-neural-network"]], "4. Define a Loss function and optimizer": [[243, "define-a-loss-function-and-optimizer"]], "5. Zero the gradients while training the network": [[243, "zero-the-gradients-while-training-the-network"]], "Reducing AoT cold start compilation time with regional compilation": [[244, "reducing-aot-cold-start-compilation-time-with-regional-compilation"]], "Defining the Neural Network": [[244, "defining-the-neural-network"]], "Compiling the model ahead-of-time": [[244, "compiling-the-model-ahead-of-time"]], "Compiling _regions_ of the model ahead-of-time": [[244, "compiling-regions-of-the-model-ahead-of-time"]], "Measuring compilation time": [[244, "measuring-compilation-time"]], "Reducing torch.compile cold start compilation time with regional compilation": [[245, "reducing-torch-compile-cold-start-compilation-time-with-regional-compilation"]], "Script and Optimize for Mobile Recipe": [[246, "script-and-optimize-for-mobile-recipe"]], "Intel\u00ae Extension for PyTorch* Backend on Intel\u00ae CPUs": [[248, "intel-extension-for-pytorch-backend-on-intel-cpus"]], "Usage Example": [[248, "usage-example"]], "Train FP32": [[248, "train-fp32"]], "Train BF16": [[248, "train-bf16"]], "Inference FP32": [[248, "inference-fp32"]], "Inference BF16": [[248, "inference-bf16"]], "Compile Time Caching Configuration": [[249, "compile-time-caching-configuration"]], "Inductor Cache Settings": [[249, "inductor-cache-settings"]], "TORCHINDUCTOR_FX_GRAPH_CACHE": [[249, "torchinductor-fx-graph-cache"]], "TORCHINDUCTOR_AUTOGRAD_CACHE": [[249, "torchinductor-autograd-cache"]], "TORCHINDUCTOR_CACHE_DIR": [[249, "torchinductor-cache-dir"]], "TORCHINDUCTOR_FX_GRAPH_REMOTE_CACHE": [[249, "torchinductor-fx-graph-remote-cache"]], "TORCHINDUCTOR_AUTOGRAD_REMOTE_CACHE": [[249, "torchinductor-autograd-remote-cache"]], "TORCHINDUCTOR_AUTOTUNE_REMOTE_CACHE": [[249, "torchinductor-autotune-remote-cache"]], "TORCHINDUCTOR_FORCE_DISABLE_CACHES": [[249, "torchinductor-force-disable-caches"]], "Compile Time Caching in torch.compile": [[250, "compile-time-caching-in-torch-compile"]], "Caching Offerings": [[250, "caching-offerings"]], "torch.compile end-to-end caching (Mega-Cache)": [[250, "torch-compile-end-to-end-caching-mega-cache"]], "Modular caching of TorchDynamo, TorchInductor, and Triton": [[250, "modular-caching-of-torchdynamo-torchinductor-and-triton"]], "Remote Caching": [[250, "remote-caching"]], "(beta) Utilizing Torch Function modes with torch.compile": [[251, "beta-utilizing-torch-function-modes-with-torch-compile"]], "Rewriting a torch op (torch.add -> torch.mul)": [[251, "rewriting-a-torch-op-torch-add-torch-mul"]], "Using User-Defined Triton Kernels with torch.compile": [[252, "using-user-defined-triton-kernels-with-torch-compile"]], "Advanced Usage": [[252, "advanced-usage"]], "Composability": [[252, "composability"]], "Wrapping Triton kernels with triton_op": [[252, "wrapping-triton-kernels-with-triton-op"]], "Adding training support": [[252, "adding-training-support"]], "Adding a CPU Fallback": [[252, "adding-a-cpu-fallback"]], "Adding a FlopCounter Formula": [[252, "adding-a-flopcounter-formula"]], "Limitations": [[252, "limitations"]], "Dynamic Compilation Control with torch.compiler.set_stance": [[253, "dynamic-compilation-control-with-torch-compiler-set-stance"]], "Description": [[253, "description"]], "Preventing recompilation": [[253, "preventing-recompilation"]], "Measuring performance gains": [[253, "measuring-performance-gains"]], "Crashing sooner": [[253, "crashing-sooner"]], "torch.export AOTInductor Tutorial for Python runtime (Beta)": [[254, "torch-export-aotinductor-tutorial-for-python-runtime-beta"]], "Model Compilation": [[254, "model-compilation"]], "Model Inference in Python": [[254, "model-inference-in-python"]], "When to use AOTInductor with a Python Runtime": [[254, "when-to-use-aotinductor-with-a-python-runtime"]], "Demonstration of torch.export flow, common challenges and the solutions to address them": [[255, "demonstration-of-torch-export-flow-common-challenges-and-the-solutions-to-address-them"]], "Key requirement for torch.export: No graph break": [[255, "key-requirement-for-torch-export-no-graph-break"]], "Video Classification": [[255, "video-classification"]], "Error: Static batch size": [[255, "error-static-batch-size"]], "Solution": [[255, "solution"], [255, "id1"], [255, "id2"], [255, "id3"]], "Automatic Speech Recognition": [[255, "automatic-speech-recognition"]], "Error: strict tracing with TorchDynamo": [[255, "error-strict-tracing-with-torchdynamo"]], "Image Captioning": [[255, "image-captioning"]], "Error: Cannot mutate tensors with frozen storage": [[255, "error-cannot-mutate-tensors-with-frozen-storage"]], "Promptable Image Segmentation": [[255, "promptable-image-segmentation"]], "Error: Model is not of type torch.nn.Module": [[255, "error-model-is-not-of-type-torch-nn-module"]], "(beta) Using TORCH_LOGS python API with torch.compile": [[256, "beta-using-torch-logs-python-api-with-torch-compile"]], "Optimizing CPU Performance on Intel\u00ae Xeon\u00ae with run_cpu Script": [[258, "optimizing-cpu-performance-on-intel-xeon-with-run-cpu-script"]], "What You Will Learn": [[258, "what-you-will-learn"]], "Introduction of the Optimizations": [[258, "introduction-of-the-optimizations"]], "Applying NUMA Access Control": [[258, "applying-numa-access-control"]], "Using Intel\u00ae OpenMP Runtime Library": [[258, "using-intel-openmp-runtime-library"]], "Choosing an Optimized Memory Allocator": [[258, "choosing-an-optimized-memory-allocator"]], "Quick Start Example Commands": [[258, "quick-start-example-commands"]], "Using torch.backends.xeon.run_cpu": [[258, "using-torch-backends-xeon-run-cpu"]], "Explanation of the options": [[258, "explanation-of-the-options"]], "Shard Optimizer States with ZeroRedundancyOptimizer": [[259, "shard-optimizer-states-with-zeroredundancyoptimizer"]], "What is ZeroRedundancyOptimizer?": [[259, "what-is-zeroredundancyoptimizer"]], "How to use ZeroRedundancyOptimizer?": [[259, "how-to-use-zeroredundancyoptimizer"]], "Recipes": [[260, "recipes"]], "(prototype) PyTorch BackendConfig Tutorial": [[262, "prototype-pytorch-backendconfig-tutorial"]], "1. Derive reference pattern for each quantized operator": [[262, "derive-reference-pattern-for-each-quantized-operator"]], "2. Set DTypeConfigs with backend constraints": [[262, "set-dtypeconfigs-with-backend-constraints"]], "3. Set up fusion for conv-relu": [[262, "set-up-fusion-for-conv-relu"]], "4. Define the BackendConfig": [[262, "define-the-backendconfig"]], "5. Set up QConfigMapping that satisfies the backend constraints": [[262, "set-up-qconfigmapping-that-satisfies-the-backend-constraints"]], "6. Quantize the model through prepare and convert": [[262, "quantize-the-model-through-prepare-and-convert"]], "(7. Experiment with faulty BackendConfig setups)": [[262, "experiment-with-faulty-backendconfig-setups"]], "Built-in BackendConfigs": [[262, "built-in-backendconfigs"]], "Introduction to Context Parallel": [[263, "introduction-to-context-parallel"]], "Enable Context Parallel": [[263, "enable-context-parallel"]], "Select Rotation Approach": [[263, "select-rotation-approach"]], "Flight Recorder for Debugging Stuck Jobs": [[265, "flight-recorder-for-debugging-stuck-jobs"]], "Enabling Flight Recorder": [[265, "enabling-flight-recorder"]], "Additional Settings": [[265, "additional-settings"]], "Retrieving Flight Recorder Data via an API": [[265, "retrieving-flight-recorder-data-via-an-api"]], "Flight Recorder File Formats": [[265, "flight-recorder-file-formats"]], "Analyzing Flight Recorder Dumps": [[265, "analyzing-flight-recorder-dumps"]], "An End-to-End Example": [[265, "an-end-to-end-example"]], "(prototype) Accelerating torch.save and torch.load with GPUDirect Storage": [[266, "prototype-accelerating-torch-save-and-torch-load-with-gpudirect-storage"]], "Using GPUDirect Storage with torch.save and torch.load": [[266, "using-gpudirect-storage-with-torch-save-and-torch-load"]], "(prototype) GPU Quantization with TorchAO": [[267, "prototype-gpu-quantization-with-torchao"]], "Set up Your Environment": [[267, "set-up-your-environment"]], "Inductor C++ Wrapper Tutorial": [[268, "inductor-c-wrapper-tutorial"]], "Prerequisites:": [[268, "prerequisites"], [278, "prerequisites"]], "Enabling the API": [[268, "enabling-the-api"]], "Example code": [[268, "example-code"]], "How to use torch.compile on Windows CPU/XPU": [[269, "how-to-use-torch-compile-on-windows-cpu-xpu"]], "Software Installation": [[269, "software-installation"]], "Install a Compiler": [[269, "install-a-compiler"]], "Set Up Environment": [[269, "set-up-environment"]], "Alternative Compiler for better performance on CPU": [[269, "id1"]], "Intel Compiler": [[269, "id2"]], "LLVM Compiler": [[269, "id4"]], "(Prototype) Convert Mobilenetv2 to Core ML": [[271, "prototype-convert-mobilenetv2-to-core-ml"]], "(Prototype) Use iOS GPU in PyTorch": [[272, "prototype-use-ios-gpu-in-pytorch"]], "(Prototype) Introduce lite interpreter workflow in Android and iOS": [[273, "prototype-introduce-lite-interpreter-workflow-in-android-and-ios"]], "Efficiently writing \u201csparse\u201d semantics for Adagrad with MaskedTensor": [[274, "efficiently-writing-sparse-semantics-for-adagrad-with-maskedtensor"]], "Introduction and Motivation": [[274, "introduction-and-motivation"]], "Preparation": [[274, "preparation"], [275, "preparation"], [276, "preparation"]], "Simpler Code with MaskedTensor": [[274, "simpler-code-with-maskedtensor"]], "Original Sparse Implementation": [[274, "original-sparse-implementation"]], "MaskedTensor Sparse Implementation": [[274, "maskedtensor-sparse-implementation"]], "MaskedTensor Advanced Semantics": [[275, "maskedtensor-advanced-semantics"]], "MaskedTensor vs NumPy\u2019s MaskedArray": [[275, "maskedtensor-vs-numpy-s-maskedarray"]], "Reduction Semantics": [[275, "reduction-semantics"]], "MaskedTensor Overview": [[276, "maskedtensor-overview"]], "Using MaskedTensor": [[276, "using-maskedtensor"]], "Construction": [[276, "construction"]], "Accessing the data and mask": [[276, "accessing-the-data-and-mask"]], "Indexing and slicing": [[276, "indexing-and-slicing"]], "Why is MaskedTensor useful?": [[276, "why-is-maskedtensor-useful"]], "Distinguishing between 0 and NaN gradient": [[276, "distinguishing-between-0-and-nan-gradient"]], "torch.where": [[276, "torch-where"]], "Another torch.where": [[276, "another-torch-where"]], "When using mask, x/0 yields NaN grad": [[276, "when-using-mask-x-0-yields-nan-grad"]], "torch.nansum() and torch.nanmean()": [[276, "torch-nansum-and-torch-nanmean"]], "Safe Softmax": [[276, "safe-softmax"]], "Implementing missing torch.nan* operators": [[276, "implementing-missing-torch-nan-operators"]], "MaskedTensor Sparsity": [[277, "maskedtensor-sparsity"]], "Principles": [[277, "principles"]], "Sparse COO tensors": [[277, "sparse-coo-tensors"]], "Sparse CSR tensors": [[277, "sparse-csr-tensors"]], "Supported Operations": [[277, "supported-operations"]], "Unary": [[277, "unary"]], "Binary": [[277, "binary"]], "Reductions": [[277, "reductions"]], "MaskedTensor Helper Methods": [[277, "maskedtensor-helper-methods"]], "Appendix": [[277, "appendix"]], "Sparse COO Construction": [[277, "sparse-coo-construction"]], "Sparse CSR Construction": [[277, "sparse-csr-construction"]], "Using Max-Autotune Compilation on CPU for Better Performance": [[278, "using-max-autotune-compilation-on-cpu-for-better-performance"]], "Activating the max-autotune mode": [[278, "activating-the-max-autotune-mode"]], "Example": [[278, "example"]], "Getting Started with Nested Tensors": [[279, "getting-started-with-nested-tensors"]], "Nested tensor initialization": [[279, "nested-tensor-initialization"]], "Nested Tensor Operations": [[279, "nested-tensor-operations"]], "Why Nested Tensor": [[279, "why-nested-tensor"]], "(Beta) Convert MobileNetV2 to NNAPI": [[280, "beta-convert-mobilenetv2-to-nnapi"]], "PyTorch 2 Export Quantization for OpenVINO torch.compile Backend": [[281, "pytorch-2-export-quantization-for-openvino-torch-compile-backend"]], "Post Training Quantization": [[281, "post-training-quantization"]], "Prerequisite: OpenVINO and NNCF installation": [[281, "prerequisite-openvino-and-nncf-installation"]], "1. Capture FX Graph": [[281, "capture-fx-graph"]], "2. Apply Quantization": [[281, "apply-quantization"]], "3. Lower into OpenVINO representation": [[281, "lower-into-openvino-representation"]], "4. Optional: Improve quantized model metrics": [[281, "optional-improve-quantized-model-metrics"]], "Autoloading Out-of-Tree Extension": [[282, "autoloading-out-of-tree-extension"]], "How to apply this mechanism to out-of-tree extensions?": [[282, "how-to-apply-this-mechanism-to-out-of-tree-extensions"]], "How it works": [[282, "how-it-works"]], "(prototype) Accelerating BERT with semi-structured (2:4) sparsity": [[283, "prototype-accelerating-bert-with-semi-structured-2-4-sparsity"]], "results": [[283, "id1"]], "(prototype) Tracing-based Selective Build Mobile Interpreter in Android and iOS": [[285, "prototype-tracing-based-selective-build-mobile-interpreter-in-android-and-ios"]], "torch.vmap": [[286, "torch-vmap"]], "So, what is vmap?": [[286, "so-what-is-vmap"]], "Unstable": [[287, "unstable"]]}, "indexentries": {}})