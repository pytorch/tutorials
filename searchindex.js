Search.setIndex({"docnames": ["advanced/ONNXLive", "advanced/coding_ddpg", "advanced/cpp_autograd", "advanced/cpp_cuda_graphs", "advanced/cpp_custom_ops", "advanced/cpp_custom_ops_sycl", "advanced/cpp_export", "advanced/cpp_extension", "advanced/cpp_frontend", "advanced/custom_class_pt2", "advanced/custom_ops_landing_page", "advanced/ddp_pipeline", "advanced/dispatcher", "advanced/extend_dispatcher", "advanced/generic_join", "advanced/neural_style_tutorial", "advanced/numpy_extensions_tutorial", "advanced/pendulum", "advanced/privateuseone", "advanced/python_custom_ops", "advanced/rpc_ddp_tutorial", "advanced/semi_structured_sparse", "advanced/sg_execution_times", "advanced/sharding", "advanced/static_quantization_tutorial", "advanced/torch-script-parallelism", "advanced/torch_script_custom_classes", "advanced/torch_script_custom_ops", "advanced/usb_semisup_learn", "beginner/audio_data_augmentation_tutorial", "beginner/audio_datasets_tutorial", "beginner/audio_feature_augmentation_tutorial", "beginner/audio_feature_extractions_tutorial", "beginner/audio_io_tutorial", "beginner/audio_resampling_tutorial", "beginner/basics/autogradqs_tutorial", "beginner/basics/buildmodel_tutorial", "beginner/basics/data_tutorial", "beginner/basics/index", "beginner/basics/intro", "beginner/basics/optimization_tutorial", "beginner/basics/quickstart_tutorial", "beginner/basics/saveloadrun_tutorial", "beginner/basics/sg_execution_times", "beginner/basics/tensorqs_tutorial", "beginner/basics/transforms_tutorial", "beginner/bettertransformer_tutorial", "beginner/blitz/autograd_tutorial", "beginner/blitz/cifar10_tutorial", "beginner/blitz/data_parallel_tutorial", "beginner/blitz/index", "beginner/blitz/neural_networks_tutorial", "beginner/blitz/sg_execution_times", "beginner/blitz/tensor_tutorial", "beginner/chatbot_tutorial", "beginner/colab", "beginner/data_loading_tutorial", "beginner/dcgan_faces_tutorial", "beginner/ddp_series_fault_tolerance", "beginner/ddp_series_intro", "beginner/ddp_series_multigpu", "beginner/ddp_series_theory", "beginner/deep_learning_60min_blitz", "beginner/deeplabv3_on_android", "beginner/deeplabv3_on_ios", "beginner/dist_overview", "beginner/examples_autograd/index", "beginner/examples_autograd/polynomial_autograd", "beginner/examples_autograd/polynomial_custom_function", "beginner/examples_autograd/sg_execution_times", "beginner/examples_nn/dynamic_net", "beginner/examples_nn/index", "beginner/examples_nn/polynomial_module", "beginner/examples_nn/polynomial_nn", "beginner/examples_nn/polynomial_optim", "beginner/examples_nn/sg_execution_times", "beginner/examples_tensor/index", "beginner/examples_tensor/polynomial_numpy", "beginner/examples_tensor/polynomial_tensor", "beginner/examples_tensor/sg_execution_times", "beginner/fgsm_tutorial", "beginner/finetuning_torchvision_models_tutorial", "beginner/former_torchies/autograd_tutorial_old", "beginner/former_torchies/nnft_tutorial", "beginner/former_torchies/parallelism_tutorial", "beginner/former_torchies/tensor_tutorial_old", "beginner/former_torchies_tutorial", "beginner/hta_intro_tutorial", "beginner/hta_trace_diff_tutorial", "beginner/hybrid_frontend/index", "beginner/hybrid_frontend/learning_hybrid_frontend_through_example_tutorial", "beginner/hybrid_frontend/sg_execution_times", "beginner/hybrid_frontend_tutorial", "beginner/hyperparameter_tuning_tutorial", "beginner/introyt", "beginner/introyt/autogradyt_tutorial", "beginner/introyt/captumyt", "beginner/introyt/index", "beginner/introyt/introyt1_tutorial", "beginner/introyt/introyt_index", "beginner/introyt/modelsyt_tutorial", "beginner/introyt/sg_execution_times", "beginner/introyt/tensorboardyt_tutorial", "beginner/introyt/tensors_deeper_tutorial", "beginner/introyt/trainingyt", "beginner/knowledge_distillation_tutorial", "beginner/nlp/advanced_tutorial", "beginner/nlp/deep_learning_tutorial", "beginner/nlp/index", "beginner/nlp/pytorch_tutorial", "beginner/nlp/sequence_models_tutorial", "beginner/nlp/sg_execution_times", "beginner/nlp/word_embeddings_tutorial", "beginner/nn_tutorial", "beginner/onnx/export_control_flow_model_to_onnx_tutorial", "beginner/onnx/export_simple_model_to_onnx_tutorial", "beginner/onnx/index", "beginner/onnx/intro_onnx", "beginner/onnx/onnx_registry_tutorial", "beginner/onnx/sg_execution_times", "beginner/profiler", "beginner/pytorch_with_examples", "beginner/saving_loading_models", "beginner/sg_execution_times", "beginner/t5_tutoria", "beginner/template_tutorial", "beginner/text_sentiment_ngrams_tutorial", "beginner/torchtext_custom_dataset_tutorial", "beginner/transfer_learning_tutorial", "beginner/transformer_tutorial", "beginner/translation_transformer", "beginner/understanding_leaf_vs_nonleaf_tutorial", "compilers_index", "deep-dive", "distributed", "domains", "ecosystem", "extension", "index", "intermediate/FSDP1_tutorial", "intermediate/FSDP_advanced_tutorial", "intermediate/FSDP_tutorial", "intermediate/TCPStore_libuv_backend", "intermediate/TP_tutorial", "intermediate/autograd_saved_tensors_hooks_tutorial", "intermediate/ax_multiobjective_nas_tutorial", "intermediate/char_rnn_classification_tutorial", "intermediate/char_rnn_generation_tutorial", "intermediate/compiled_autograd_tutorial", "intermediate/custom_function_conv_bn_tutorial", "intermediate/custom_function_double_backward_tutorial", "intermediate/ddp_series_minGPT", "intermediate/ddp_series_multinode", "intermediate/ddp_tutorial", "intermediate/dist_pipeline_parallel_tutorial", "intermediate/dist_tuto", "intermediate/dqn_with_rnn_tutorial", "intermediate/ensembling", "intermediate/forced_alignment_with_torchaudio_tutorial", "intermediate/forward_ad_usage", "intermediate/fx_profiling_tutorial", "intermediate/inductor_debug_cpu", "intermediate/jacobians_hessians", "intermediate/mario_rl_tutorial", "intermediate/memory_format_tutorial", "intermediate/mnist_train_nas", "intermediate/model_parallel_tutorial", "intermediate/neural_tangent_kernels", "intermediate/nlp_from_scratch_index", "intermediate/nvfuser_intro_tutorial", "intermediate/optimizer_step_in_backward_tutorial", "intermediate/parametrizations", "intermediate/per_sample_grads", "intermediate/pinmem_nonblock", "intermediate/pipeline_tutorial", "intermediate/pipelining_tutorial", "intermediate/process_group_cpp_extension_tutorial", "intermediate/pruning_tutorial", "intermediate/realtime_rpi", "intermediate/reinforcement_ppo", "intermediate/reinforcement_q_learning", "intermediate/rpc_async_execution", "intermediate/rpc_param_server_tutorial", "intermediate/rpc_tutorial", "intermediate/scaled_dot_product_attention_tutorial", "intermediate/seq2seq_translation_tutorial", "intermediate/sg_execution_times", "intermediate/spatial_transformer_tutorial", "intermediate/speech_recognition_pipeline_tutorial", "intermediate/tensorboard_profiler_tutorial", "intermediate/tensorboard_tutorial", "intermediate/text_to_speech_with_torchaudio", "intermediate/tiatoolbox_tutorial", "intermediate/torch_compile_conv_bn_fuser", "intermediate/torch_compile_tutorial", "intermediate/torch_export_nightly_tutorial", "intermediate/torch_export_tutorial", "intermediate/torchrec_intro_tutorial", "intermediate/torchrec_tutorial", "intermediate/torchvision_tutorial", "intermediate/transformer_building_blocks", "intermediate/visualizing_gradients_tutorial", "intro", "recipes/amx", "recipes/android_native_app_with_custom_op", "recipes/compiling_optimizer", "recipes/compiling_optimizer_lr_scheduler", "recipes/cuda_rpc", "recipes/distributed_async_checkpoint_recipe", "recipes/distributed_checkpoint_recipe", "recipes/distributed_comm_debug_mode", "recipes/distributed_device_mesh", "recipes/distributed_optim_torchscript", "recipes/distributed_rpc_profiling", "recipes/foreach_map", "recipes/inference_tuning_on_aws_graviton", "recipes/intel_extension_for_pytorch", "recipes/intel_neural_compressor_for_pytorch", "recipes/loading_data_recipe", "recipes/mobile_interpreter", "recipes/mobile_perf", "recipes/model_preparation_android", "recipes/model_preparation_ios", "recipes/profile_with_itt", "recipes/ptmobile_recipes_summary", "recipes/recipes/Captum_Recipe", "recipes/recipes/amp_recipe", "recipes/recipes/benchmark", "recipes/recipes/changing_default_device", "recipes/recipes/defining_a_neural_network", "recipes/recipes/index", "recipes/recipes/module_load_state_dict_tips", "recipes/recipes/profiler_recipe", "recipes/recipes/reasoning_about_shapes", "recipes/recipes/save_load_across_devices", "recipes/recipes/saving_and_loading_a_general_checkpoint", "recipes/recipes/saving_and_loading_models_for_inference", "recipes/recipes/saving_multiple_models_in_one_file", "recipes/recipes/sg_execution_times", "recipes/recipes/swap_tensors", "recipes/recipes/tensorboard_with_pytorch", "recipes/recipes/timer_quick_start", "recipes/recipes/tuning_guide", "recipes/recipes/warmstarting_model_using_parameters_from_a_different_model", "recipes/recipes/what_is_state_dict", "recipes/recipes/zeroing_out_gradients", "recipes/regional_compilation", "recipes/script_optimized", "recipes/sg_execution_times", "recipes/torch_compile_backend_ipex", "recipes/torch_compile_caching_configuration_tutorial", "recipes/torch_compile_caching_tutorial", "recipes/torch_compile_torch_function_modes", "recipes/torch_compile_user_defined_triton_kernel_tutorial", "recipes/torch_compiler_set_stance_tutorial", "recipes/torch_export_aoti_python", "recipes/torch_export_challenges_solutions", "recipes/torch_logs", "recipes/torchscript_inference", "recipes/xeon_run_cpu", "recipes/zero_redundancy_optimizer", "recipes_index", "sg_execution_times", "unstable/backend_config_tutorial", "unstable/context_parallel", "unstable/distributed_rpc_profiling", "unstable/flight_recorder_tutorial", "unstable/gpu_direct_storage", "unstable/gpu_quantization_torchao_tutorial", "unstable/inductor_cpp_wrapper_tutorial", "unstable/inductor_windows", "unstable/inductor_windows_cpu", "unstable/ios_coreml_workflow", "unstable/ios_gpu_workflow", "unstable/lite_interpreter", "unstable/maskedtensor_adagrad", "unstable/maskedtensor_advanced_semantics", "unstable/maskedtensor_overview", "unstable/maskedtensor_sparsity", "unstable/max_autotune_on_CPU_tutorial", "unstable/nestedtensor", "unstable/nnapi_mobilenetv2", "unstable/openvino_quantizer", "unstable/python_extension_autoload", "unstable/semi_structured_sparse", "unstable/sg_execution_times", "unstable/skip_param_init", "unstable/tracing_based_selective_build", "unstable/vmap_recipe", "unstable/vulkan_workflow", "unstable_index"], "filenames": ["advanced/ONNXLive.rst", "advanced/coding_ddpg.rst", "advanced/cpp_autograd.rst", "advanced/cpp_cuda_graphs.rst", "advanced/cpp_custom_ops.rst", "advanced/cpp_custom_ops_sycl.rst", "advanced/cpp_export.rst", "advanced/cpp_extension.rst", "advanced/cpp_frontend.rst", "advanced/custom_class_pt2.rst", "advanced/custom_ops_landing_page.rst", "advanced/ddp_pipeline.rst", "advanced/dispatcher.rst", "advanced/extend_dispatcher.rst", "advanced/generic_join.rst", "advanced/neural_style_tutorial.rst", "advanced/numpy_extensions_tutorial.rst", "advanced/pendulum.rst", "advanced/privateuseone.rst", "advanced/python_custom_ops.rst", "advanced/rpc_ddp_tutorial.rst", "advanced/semi_structured_sparse.rst", "advanced/sg_execution_times.rst", "advanced/sharding.rst", "advanced/static_quantization_tutorial.rst", "advanced/torch-script-parallelism.rst", "advanced/torch_script_custom_classes.rst", "advanced/torch_script_custom_ops.rst", "advanced/usb_semisup_learn.rst", "beginner/audio_data_augmentation_tutorial.rst", "beginner/audio_datasets_tutorial.rst", "beginner/audio_feature_augmentation_tutorial.rst", "beginner/audio_feature_extractions_tutorial.rst", "beginner/audio_io_tutorial.rst", "beginner/audio_resampling_tutorial.rst", "beginner/basics/autogradqs_tutorial.rst", "beginner/basics/buildmodel_tutorial.rst", "beginner/basics/data_tutorial.rst", "beginner/basics/index.rst", "beginner/basics/intro.rst", "beginner/basics/optimization_tutorial.rst", "beginner/basics/quickstart_tutorial.rst", "beginner/basics/saveloadrun_tutorial.rst", "beginner/basics/sg_execution_times.rst", "beginner/basics/tensorqs_tutorial.rst", "beginner/basics/transforms_tutorial.rst", "beginner/bettertransformer_tutorial.rst", "beginner/blitz/autograd_tutorial.rst", "beginner/blitz/cifar10_tutorial.rst", "beginner/blitz/data_parallel_tutorial.rst", "beginner/blitz/index.rst", "beginner/blitz/neural_networks_tutorial.rst", "beginner/blitz/sg_execution_times.rst", "beginner/blitz/tensor_tutorial.rst", "beginner/chatbot_tutorial.rst", "beginner/colab.rst", "beginner/data_loading_tutorial.rst", "beginner/dcgan_faces_tutorial.rst", "beginner/ddp_series_fault_tolerance.rst", "beginner/ddp_series_intro.rst", "beginner/ddp_series_multigpu.rst", "beginner/ddp_series_theory.rst", "beginner/deep_learning_60min_blitz.rst", "beginner/deeplabv3_on_android.rst", "beginner/deeplabv3_on_ios.rst", "beginner/dist_overview.rst", "beginner/examples_autograd/index.rst", "beginner/examples_autograd/polynomial_autograd.rst", "beginner/examples_autograd/polynomial_custom_function.rst", "beginner/examples_autograd/sg_execution_times.rst", "beginner/examples_nn/dynamic_net.rst", "beginner/examples_nn/index.rst", "beginner/examples_nn/polynomial_module.rst", "beginner/examples_nn/polynomial_nn.rst", "beginner/examples_nn/polynomial_optim.rst", "beginner/examples_nn/sg_execution_times.rst", "beginner/examples_tensor/index.rst", "beginner/examples_tensor/polynomial_numpy.rst", "beginner/examples_tensor/polynomial_tensor.rst", "beginner/examples_tensor/sg_execution_times.rst", "beginner/fgsm_tutorial.rst", "beginner/finetuning_torchvision_models_tutorial.rst", "beginner/former_torchies/autograd_tutorial_old.rst", "beginner/former_torchies/nnft_tutorial.rst", "beginner/former_torchies/parallelism_tutorial.rst", "beginner/former_torchies/tensor_tutorial_old.rst", "beginner/former_torchies_tutorial.rst", "beginner/hta_intro_tutorial.rst", "beginner/hta_trace_diff_tutorial.rst", "beginner/hybrid_frontend/index.rst", "beginner/hybrid_frontend/learning_hybrid_frontend_through_example_tutorial.rst", "beginner/hybrid_frontend/sg_execution_times.rst", "beginner/hybrid_frontend_tutorial.rst", "beginner/hyperparameter_tuning_tutorial.rst", "beginner/introyt.rst", "beginner/introyt/autogradyt_tutorial.rst", "beginner/introyt/captumyt.rst", "beginner/introyt/index.rst", "beginner/introyt/introyt1_tutorial.rst", "beginner/introyt/introyt_index.rst", "beginner/introyt/modelsyt_tutorial.rst", "beginner/introyt/sg_execution_times.rst", "beginner/introyt/tensorboardyt_tutorial.rst", "beginner/introyt/tensors_deeper_tutorial.rst", "beginner/introyt/trainingyt.rst", "beginner/knowledge_distillation_tutorial.rst", "beginner/nlp/advanced_tutorial.rst", "beginner/nlp/deep_learning_tutorial.rst", "beginner/nlp/index.rst", "beginner/nlp/pytorch_tutorial.rst", "beginner/nlp/sequence_models_tutorial.rst", "beginner/nlp/sg_execution_times.rst", "beginner/nlp/word_embeddings_tutorial.rst", "beginner/nn_tutorial.rst", "beginner/onnx/export_control_flow_model_to_onnx_tutorial.rst", "beginner/onnx/export_simple_model_to_onnx_tutorial.rst", "beginner/onnx/index.rst", "beginner/onnx/intro_onnx.rst", "beginner/onnx/onnx_registry_tutorial.rst", "beginner/onnx/sg_execution_times.rst", "beginner/profiler.rst", "beginner/pytorch_with_examples.rst", "beginner/saving_loading_models.rst", "beginner/sg_execution_times.rst", "beginner/t5_tutoria.rst", "beginner/template_tutorial.rst", "beginner/text_sentiment_ngrams_tutorial.rst", "beginner/torchtext_custom_dataset_tutorial.rst", "beginner/transfer_learning_tutorial.rst", "beginner/transformer_tutorial.rst", "beginner/translation_transformer.rst", "beginner/understanding_leaf_vs_nonleaf_tutorial.rst", "compilers_index.rst", "deep-dive.rst", "distributed.rst", "domains.rst", "ecosystem.rst", "extension.rst", "index.rst", "intermediate/FSDP1_tutorial.rst", "intermediate/FSDP_advanced_tutorial.rst", "intermediate/FSDP_tutorial.rst", "intermediate/TCPStore_libuv_backend.rst", "intermediate/TP_tutorial.rst", "intermediate/autograd_saved_tensors_hooks_tutorial.rst", "intermediate/ax_multiobjective_nas_tutorial.rst", "intermediate/char_rnn_classification_tutorial.rst", "intermediate/char_rnn_generation_tutorial.rst", "intermediate/compiled_autograd_tutorial.rst", "intermediate/custom_function_conv_bn_tutorial.rst", "intermediate/custom_function_double_backward_tutorial.rst", "intermediate/ddp_series_minGPT.rst", "intermediate/ddp_series_multinode.rst", "intermediate/ddp_tutorial.rst", "intermediate/dist_pipeline_parallel_tutorial.rst", "intermediate/dist_tuto.rst", "intermediate/dqn_with_rnn_tutorial.rst", "intermediate/ensembling.rst", "intermediate/forced_alignment_with_torchaudio_tutorial.rst", "intermediate/forward_ad_usage.rst", "intermediate/fx_profiling_tutorial.rst", "intermediate/inductor_debug_cpu.rst", "intermediate/jacobians_hessians.rst", "intermediate/mario_rl_tutorial.rst", "intermediate/memory_format_tutorial.rst", "intermediate/mnist_train_nas.rst", "intermediate/model_parallel_tutorial.rst", "intermediate/neural_tangent_kernels.rst", "intermediate/nlp_from_scratch_index.rst", "intermediate/nvfuser_intro_tutorial.rst", "intermediate/optimizer_step_in_backward_tutorial.rst", "intermediate/parametrizations.rst", "intermediate/per_sample_grads.rst", "intermediate/pinmem_nonblock.rst", "intermediate/pipeline_tutorial.rst", "intermediate/pipelining_tutorial.rst", "intermediate/process_group_cpp_extension_tutorial.rst", "intermediate/pruning_tutorial.rst", "intermediate/realtime_rpi.rst", "intermediate/reinforcement_ppo.rst", "intermediate/reinforcement_q_learning.rst", "intermediate/rpc_async_execution.rst", "intermediate/rpc_param_server_tutorial.rst", "intermediate/rpc_tutorial.rst", "intermediate/scaled_dot_product_attention_tutorial.rst", "intermediate/seq2seq_translation_tutorial.rst", "intermediate/sg_execution_times.rst", "intermediate/spatial_transformer_tutorial.rst", "intermediate/speech_recognition_pipeline_tutorial.rst", "intermediate/tensorboard_profiler_tutorial.rst", "intermediate/tensorboard_tutorial.rst", "intermediate/text_to_speech_with_torchaudio.rst", "intermediate/tiatoolbox_tutorial.rst", "intermediate/torch_compile_conv_bn_fuser.rst", "intermediate/torch_compile_tutorial.rst", "intermediate/torch_export_nightly_tutorial.rst", "intermediate/torch_export_tutorial.rst", "intermediate/torchrec_intro_tutorial.rst", "intermediate/torchrec_tutorial.rst", "intermediate/torchvision_tutorial.rst", "intermediate/transformer_building_blocks.rst", "intermediate/visualizing_gradients_tutorial.rst", "intro.rst", "recipes/amx.rst", "recipes/android_native_app_with_custom_op.rst", "recipes/compiling_optimizer.rst", "recipes/compiling_optimizer_lr_scheduler.rst", "recipes/cuda_rpc.rst", "recipes/distributed_async_checkpoint_recipe.rst", "recipes/distributed_checkpoint_recipe.rst", "recipes/distributed_comm_debug_mode.rst", "recipes/distributed_device_mesh.rst", "recipes/distributed_optim_torchscript.rst", "recipes/distributed_rpc_profiling.rst", "recipes/foreach_map.rst", "recipes/inference_tuning_on_aws_graviton.rst", "recipes/intel_extension_for_pytorch.rst", "recipes/intel_neural_compressor_for_pytorch.rst", "recipes/loading_data_recipe.rst", "recipes/mobile_interpreter.rst", "recipes/mobile_perf.rst", "recipes/model_preparation_android.rst", "recipes/model_preparation_ios.rst", "recipes/profile_with_itt.rst", "recipes/ptmobile_recipes_summary.rst", "recipes/recipes/Captum_Recipe.rst", "recipes/recipes/amp_recipe.rst", "recipes/recipes/benchmark.rst", "recipes/recipes/changing_default_device.rst", "recipes/recipes/defining_a_neural_network.rst", "recipes/recipes/index.rst", "recipes/recipes/module_load_state_dict_tips.rst", "recipes/recipes/profiler_recipe.rst", "recipes/recipes/reasoning_about_shapes.rst", "recipes/recipes/save_load_across_devices.rst", "recipes/recipes/saving_and_loading_a_general_checkpoint.rst", "recipes/recipes/saving_and_loading_models_for_inference.rst", "recipes/recipes/saving_multiple_models_in_one_file.rst", "recipes/recipes/sg_execution_times.rst", "recipes/recipes/swap_tensors.rst", "recipes/recipes/tensorboard_with_pytorch.rst", "recipes/recipes/timer_quick_start.rst", "recipes/recipes/tuning_guide.rst", "recipes/recipes/warmstarting_model_using_parameters_from_a_different_model.rst", "recipes/recipes/what_is_state_dict.rst", "recipes/recipes/zeroing_out_gradients.rst", "recipes/regional_compilation.rst", "recipes/script_optimized.rst", "recipes/sg_execution_times.rst", "recipes/torch_compile_backend_ipex.rst", "recipes/torch_compile_caching_configuration_tutorial.rst", "recipes/torch_compile_caching_tutorial.rst", "recipes/torch_compile_torch_function_modes.rst", "recipes/torch_compile_user_defined_triton_kernel_tutorial.rst", "recipes/torch_compiler_set_stance_tutorial.rst", "recipes/torch_export_aoti_python.rst", "recipes/torch_export_challenges_solutions.rst", "recipes/torch_logs.rst", "recipes/torchscript_inference.rst", "recipes/xeon_run_cpu.rst", "recipes/zero_redundancy_optimizer.rst", "recipes_index.rst", "sg_execution_times.rst", "unstable/backend_config_tutorial.rst", "unstable/context_parallel.rst", "unstable/distributed_rpc_profiling.rst", "unstable/flight_recorder_tutorial.rst", "unstable/gpu_direct_storage.rst", "unstable/gpu_quantization_torchao_tutorial.rst", "unstable/inductor_cpp_wrapper_tutorial.rst", "unstable/inductor_windows.rst", "unstable/inductor_windows_cpu.rst", "unstable/ios_coreml_workflow.rst", "unstable/ios_gpu_workflow.rst", "unstable/lite_interpreter.rst", "unstable/maskedtensor_adagrad.rst", "unstable/maskedtensor_advanced_semantics.rst", "unstable/maskedtensor_overview.rst", "unstable/maskedtensor_sparsity.rst", "unstable/max_autotune_on_CPU_tutorial.rst", "unstable/nestedtensor.rst", "unstable/nnapi_mobilenetv2.rst", "unstable/openvino_quantizer.rst", "unstable/python_extension_autoload.rst", "unstable/semi_structured_sparse.rst", "unstable/sg_execution_times.rst", "unstable/skip_param_init.rst", "unstable/tracing_based_selective_build.rst", "unstable/vmap_recipe.rst", "unstable/vulkan_workflow.rst", "unstable_index.rst"], "titles": ["ONNX Live Tutorial", "TorchRL objectives: Coding a DDPG loss", "Autograd in C++ Frontend", "Using CUDA Graphs in PyTorch C++ API", "Custom C++ and CUDA Operators", "Custom SYCL Operators", "&lt;no title&gt;", "Custom C++ and CUDA Extensions", "Using the PyTorch C++ Frontend", "Supporting Custom C++ Classes in torch.compile/torch.export", "PyTorch Custom Operators", "Training Transformer models using Distributed Data Parallel and Pipeline Parallelism", "Registering a Dispatched Operator in C++", "Extending dispatcher for a new backend in C++", "Distributed Training with Uneven Inputs Using the Join Context Manager", "Neural Transfer Using PyTorch", "Creating Extensions Using NumPy and SciPy", "Pendulum: Writing your environment and transforms with TorchRL", "Facilitating New Backend Integration by PrivateUse1", "Custom Python Operators", "Combining Distributed DataParallel with Distributed RPC Framework", "(beta) Accelerating BERT with semi-structured (2:4) sparsity", "Computation times", "Exploring TorchRec sharding", "(beta) Static Quantization with Eager Mode in PyTorch", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Semi-Supervised Learning using USB built upon PyTorch", "Audio Data Augmentation", "Audio Datasets", "Audio Feature Augmentation", "Audio Feature Extractions", "Audio I/O", "Audio Resampling", "Automatic Differentiation with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.autograd</span></code>", "Build the Neural Network", "Datasets &amp; DataLoaders", "Learn the Basics", "Learn the Basics", "Optimizing Model Parameters", "Quickstart", "Save and Load the Model", "Computation times", "Tensors", "Transforms", "Fast Transformer Inference with Better Transformer", "A Gentle Introduction to <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.autograd</span></code>", "Training a Classifier", "Optional: Data Parallelism", "Deep Learning with PyTorch: A 60 Minute Blitz", "Neural Networks", "Computation times", "Tensors", "Chatbot Tutorial", "Running Tutorials in Google Colab", "Writing Custom Datasets, DataLoaders and Transforms", "DCGAN Tutorial", "Fault-tolerant Distributed Training with <code class=\"docutils literal notranslate\"><span class=\"pre\">torchrun</span></code>", "Distributed Data Parallel in PyTorch - Video Tutorials", "Multi GPU training with DDP", "What is Distributed Data Parallel (DDP)", "Deep Learning with PyTorch: A 60 Minute Blitz", "Image Segmentation DeepLabV3 on Android", "Image Segmentation DeepLabV3 on iOS", "PyTorch Distributed Overview", "&lt;no title&gt;", "PyTorch: Tensors and autograd", "PyTorch: Defining New autograd Functions", "Computation times", "PyTorch: Control Flow + Weight Sharing", "&lt;no title&gt;", "PyTorch: Custom nn Modules", "PyTorch: nn", "PyTorch: optim", "Computation times", "&lt;no title&gt;", "Warm-up: numpy", "PyTorch: Tensors", "Computation times", "Adversarial Example Generation", "Finetuning Torchvision Models", "Autograd", "nn Package", "Multi-GPU Examples", "Tensors", "PyTorch for Former Torch Users", "Introduction to Holistic Trace Analysis", "Trace Diff using Holistic Trace Analysis", "&lt;no title&gt;", "Learning Hybrid Frontend Syntax Through Example", "Computation times", "Hybrid Frontend Tutorials", "Hyperparameter tuning with Ray Tune", "Introduction to PyTorch - YouTube Series", "The Fundamentals of Autograd", "Model Understanding with Captum", "Introduction to PyTorch on YouTube", "Introduction to PyTorch", "Introduction to PyTorch - YouTube Series", "Building Models with PyTorch", "Computation times", "PyTorch TensorBoard Support", "Introduction to PyTorch Tensors", "Training with PyTorch", "Knowledge Distillation Tutorial", "Advanced: Making Dynamic Decisions and the Bi-LSTM CRF", "Deep Learning with PyTorch", "Deep Learning for NLP with Pytorch", "Introduction to PyTorch", "Sequence Models and Long Short-Term Memory Networks", "Computation times", "Word Embeddings: Encoding Lexical Semantics", "What is <cite>torch.nn</cite> <em>really</em>?", "Export a model with control flow to ONNX", "Export a PyTorch model to ONNX", "ONNX", "Introduction to ONNX", "Extending the ONNX Exporter Operator Support", "Computation times", "Profiling your PyTorch Module", "Learning PyTorch with Examples", "Saving and Loading Models", "Computation times", "T5-Base Model for Summarization, Sentiment Classification, and Translation", "Template Tutorial", "Text classification with the torchtext library", "Preprocess custom text dataset using torchtext", "Transfer Learning for Computer Vision Tutorial", "Language Modeling with <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> and torchtext", "Language Translation with <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> and torchtext", "Understanding requires_grad, retain_grad, Leaf, and Non-leaf Tensors", "Compilers", "Deep Dive", "Distributed", "Domains", "Ecosystem", "Extension", "Welcome to PyTorch Tutorials", "Getting Started with Fully Sharded Data Parallel(FSDP)", "Advanced Model Training with Fully Sharded Data Parallel (FSDP)", "Getting Started with Fully Sharded Data Parallel (FSDP2)", "Introduction to Libuv TCPStore Backend", "Large Scale Transformer model training with Tensor Parallel (TP)", "Hooks for autograd saved tensors", "Multi-Objective NAS with Ax", "NLP From Scratch: Classifying Names with a Character-Level RNN", "NLP From Scratch: Generating Names with a Character-Level RNN", "Compiled Autograd: Capturing a larger backward graph for <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "Fusing Convolution and Batch Norm using Custom Function", "Double Backward with Custom Functions", "Training \u201creal-world\u201d models with DDP", "Multinode Training", "Getting Started with Distributed Data Parallel", "Distributed Pipeline Parallelism Using RPC", "Writing Distributed Applications with PyTorch", "Recurrent DQN: Training recurrent policies", "Model ensembling", "Forced Alignment with Wav2Vec2", "Forward-mode Automatic Differentiation (Beta)", "(beta) Building a Simple CPU Performance Profiler with FX", "Inductor CPU backend debugging and profiling", "Jacobians, Hessians, hvp, vhp, and more: composing function transforms", "Train a Mario-playing RL Agent", "Channels Last Memory Format in PyTorch", "&lt;no title&gt;", "Single-Machine Model Parallel Best Practices", "Neural Tangent Kernels", "NLP from Scratch", "Getting Started - Accelerate Your Scripts with nvFuser", "How to save memory by fusing the optimizer step into the backward pass", "Parametrizations Tutorial", "Per-sample-gradients", "A guide on good usage of <code class=\"docutils literal notranslate\"><span class=\"pre\">non_blocking</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">pin_memory()</span></code> in PyTorch", "Training Transformer models using Pipeline Parallelism", "Introduction to Distributed Pipeline Parallelism", "Customize Process Group Backends Using Cpp Extensions", "Pruning Tutorial", "Real Time Inference on Raspberry Pi 4 (30 fps!)", "Reinforcement Learning (PPO) with TorchRL Tutorial", "Reinforcement Learning (DQN) Tutorial", "Implementing Batch RPC Processing Using Asynchronous Executions", "Implementing a Parameter Server Using Distributed RPC Framework", "Getting Started with Distributed RPC Framework", "(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)", "NLP From Scratch: Translation with a Sequence to Sequence Network and Attention", "Computation times", "Spatial Transformer Networks Tutorial", "Speech Recognition with Wav2Vec2", "PyTorch Profiler With TensorBoard", "Visualizing Models, Data, and Training with TensorBoard", "Text-to-speech with Tacotron2", "Whole Slide Image Classification Using PyTorch and TIAToolbox", "Building a Convolution/Batch Norm fuser with torch.compile", "Introduction to <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "torch.export Nightly Tutorial", "torch.export Tutorial", "Introduction to TorchRec", "Introduction to TorchRec", "TorchVision Object Detection Finetuning Tutorial", "Accelerating PyTorch Transformers by replacing <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> with Nested Tensors and <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile()</span></code>", "Visualizing Gradients", "Intro", "Leverage Intel\u00ae Advanced Matrix Extensions", "Making Native Android Application that uses PyTorch prebuilt libraries", "(beta) Compiling the optimizer with torch.compile", "(beta) Running the compiled optimizer with an LR Scheduler", "Direct Device-to-Device Communication with TensorPipe CUDA RPC", "Asynchronous Saving with Distributed Checkpoint (DCP)", "Getting Started with Distributed Checkpoint (DCP)", "Getting Started with <code class=\"docutils literal notranslate\"><span class=\"pre\">CommDebugMode</span></code>", "Getting Started with DeviceMesh", "&lt;no title&gt;", "Profiling PyTorch RPC-Based Workloads", "Explicit horizontal fusion with foreach_map and torch.compile", "(Beta) PyTorch Inference Performance Tuning on AWS Graviton Processors", "Intel\u00ae Extension for PyTorch*", "Ease-of-use quantization for PyTorch with Intel\u00ae Neural Compressor", "Loading data in PyTorch", "(beta) Efficient mobile interpreter in Android and iOS", "Pytorch Mobile Performance Recipes", "Model Preparation for Android Recipe", "Model Preparation for iOS Recipe", "Profiling PyTorch workloads with The Instrumentation and Tracing Technology (ITT) API", "Summary of PyTorch Mobile Recipes", "Model Interpretability using Captum", "Automatic Mixed Precision", "PyTorch Benchmark", "Changing default device", "Defining a Neural Network in PyTorch", "PyTorch Recipes", "Tips for Loading an <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Module</span></code> from a Checkpoint", "PyTorch Profiler", "Reasoning about Shapes in PyTorch", "Save Load Across Devices", "Saving And Loading A General Checkpoint", "Saving And Loading Models For Inference", "Saving Multiple Models In One File", "Computation times", "Extension points in <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Module</span></code> for <code class=\"docutils literal notranslate\"><span class=\"pre\">load_state_dict</span></code> and tensor subclasses", "How to use TensorBoard with PyTorch", "Timer quick start", "Performance Tuning Guide", "Warmstarting model using parameters from a different model in PyTorch", "What is a state_dict in PyTorch", "Zeroing out gradients in PyTorch", "Reducing torch.compile cold start compilation time with regional compilation", "Script and Optimize for Mobile Recipe", "Computation times", "Intel\u00ae Extension for PyTorch* Backend on Intel\u00ae CPUs", "Compile Time Caching Configuration", "Compile Time Caching in <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "(beta) Utilizing Torch Function modes with torch.compile", "Using User-Defined Triton Kernels with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "Dynamic Compilation Control with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compiler.set_stance</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">torch.export</span></code> AOTInductor Tutorial for Python runtime (Beta)", "Demonstration of torch.export flow, common challenges and the solutions to address them", "(beta) Using TORCH_LOGS python API with torch.compile", "&lt;no title&gt;", "Optimizing CPU Performance on Intel\u00ae Xeon\u00ae with run_cpu Script", "Shard Optimizer States with ZeroRedundancyOptimizer", "Recipes", "Computation times", "(prototype) PyTorch BackendConfig Tutorial", "Introduction to Context Parallel", "Profiling PyTorch RPC-Based Workloads", "Flight Recorder for Debugging Stuck Jobs", "(prototype) Accelerating <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.save</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.load</span></code> with GPUDirect Storage", "(prototype) GPU Quantization with TorchAO", "Inductor C++ Wrapper Tutorial", "How to use <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code> on Windows CPU/XPU", "&lt;no title&gt;", "(Prototype) Convert Mobilenetv2 to Core ML", "(Prototype) Use iOS GPU in PyTorch", "(Prototype) Introduce lite interpreter workflow in Android and iOS", "Efficiently writing \u201csparse\u201d semantics for Adagrad with MaskedTensor", "MaskedTensor Advanced Semantics", "MaskedTensor Overview", "MaskedTensor Sparsity", "Using Max-Autotune Compilation on CPU for Better Performance", "Getting Started with Nested Tensors", "(Beta) Convert MobileNetV2 to NNAPI", "PyTorch 2 Export Quantization for OpenVINO torch.compile Backend", "Autoloading Out-of-Tree Extension", "(prototype) Accelerating BERT with semi-structured (2:4) sparsity", "Computation times", "Skipping Module Parameter Initialization", "(prototype) Tracing-based Selective Build Mobile Interpreter in Android and iOS", "torch.vmap", "PyTorch Vulkan Backend User Workflow", "Unstable"], "terms": {"thi": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 44, 46, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 67, 68, 70, 72, 73, 74, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 94, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 223, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 282, 284, 286, 287, 288, 289, 290], "ha": [0, 1, 2, 4, 7, 8, 9, 11, 13, 14, 15, 16, 17, 19, 21, 28, 29, 30, 31, 32, 33, 34, 35, 39, 41, 46, 47, 48, 51, 54, 55, 67, 73, 80, 81, 88, 90, 93, 94, 95, 96, 98, 99, 100, 102, 103, 104, 105, 107, 109, 110, 112, 113, 117, 120, 121, 124, 126, 127, 130, 131, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 169, 170, 171, 173, 174, 175, 177, 178, 179, 180, 183, 184, 185, 188, 189, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 206, 207, 210, 213, 216, 225, 227, 228, 232, 239, 241, 242, 246, 247, 252, 253, 255, 256, 259, 260, 264, 265, 267, 268, 271, 274, 275, 276, 277, 278, 280, 282, 283, 284, 286, 287], "been": [0, 1, 3, 8, 11, 17, 18, 21, 29, 30, 31, 32, 33, 34, 46, 55, 74, 80, 81, 88, 90, 93, 94, 95, 96, 98, 103, 109, 113, 124, 126, 127, 130, 131, 139, 142, 147, 149, 150, 151, 154, 155, 156, 158, 161, 162, 166, 167, 169, 170, 171, 174, 177, 178, 179, 180, 184, 188, 189, 190, 191, 192, 195, 196, 197, 200, 206, 213, 216, 223, 227, 239, 240, 247, 255, 256, 259, 264, 265, 271, 274, 275, 278, 280, 283, 284, 287], "deprec": [0, 6, 7, 11, 12, 25, 26, 27, 46, 115, 124, 126, 127, 129, 130, 139, 141, 142, 154, 166, 169, 174, 189, 196, 212, 213, 218, 234, 235, 236, 237, 247, 258, 265], "redirect": [0, 11, 29, 30, 31, 32, 33, 34, 46, 63, 64, 81, 82, 83, 84, 85, 86, 94, 124, 126, 127, 130, 154, 158, 166, 169, 174, 188, 191, 195, 198, 204, 213, 219, 220, 221, 222, 224, 234, 235, 236, 237, 247, 265, 271, 272, 273, 281, 287], "3": [0, 2, 3, 4, 5, 7, 8, 9, 11, 17, 20, 21, 23, 28, 29, 30, 31, 32, 33, 34, 36, 37, 39, 46, 47, 57, 63, 64, 67, 68, 73, 74, 77, 80, 81, 82, 83, 84, 85, 86, 95, 96, 98, 100, 102, 103, 105, 106, 107, 109, 110, 112, 113, 114, 117, 118, 120, 121, 122, 124, 125, 126, 127, 130, 131, 139, 140, 141, 143, 148, 149, 150, 154, 155, 156, 158, 161, 163, 164, 166, 167, 168, 169, 170, 172, 174, 177, 178, 179, 181, 182, 183, 184, 188, 191, 192, 194, 195, 196, 197, 199, 200, 203, 204, 206, 210, 211, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 231, 234, 235, 236, 237, 239, 242, 247, 249, 253, 255, 256, 264, 266, 268, 270, 271, 272, 273, 277, 280, 281, 284, 286, 287, 289], "second": [0, 1, 4, 7, 8, 11, 12, 15, 16, 17, 19, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 53, 54, 56, 57, 63, 64, 73, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 93, 95, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 118, 124, 125, 126, 127, 128, 130, 131, 138, 139, 142, 144, 145, 146, 147, 148, 149, 150, 154, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 170, 171, 172, 173, 174, 175, 177, 179, 180, 184, 185, 187, 188, 189, 190, 191, 194, 195, 196, 199, 200, 201, 204, 206, 207, 210, 214, 219, 220, 221, 222, 224, 227, 228, 231, 233, 234, 235, 236, 237, 239, 241, 242, 246, 247, 252, 253, 254, 255, 257, 259, 266, 268, 271, 272, 273, 275, 276, 277, 278, 280, 281, 287, 288], "go": [1, 14, 15, 16, 17, 19, 20, 21, 23, 24, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 49, 51, 53, 54, 56, 67, 68, 70, 72, 73, 74, 77, 78, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 131, 138, 140, 144, 145, 146, 147, 149, 152, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 167, 170, 171, 172, 173, 175, 177, 178, 179, 180, 182, 184, 185, 187, 189, 190, 193, 194, 196, 197, 199, 201, 206, 209, 214, 225, 226, 227, 228, 229, 231, 232, 233, 239, 240, 241, 242, 243, 244, 245, 246, 252, 253, 254, 255, 257, 263, 267, 268, 275, 276, 277, 278, 280, 288], "end": [1, 4, 7, 8, 9, 12, 15, 16, 17, 19, 21, 24, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 59, 65, 67, 68, 70, 72, 73, 74, 77, 78, 80, 87, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 125, 128, 131, 132, 133, 138, 140, 142, 143, 144, 145, 146, 147, 149, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 167, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 183, 184, 185, 187, 189, 190, 193, 194, 196, 197, 199, 200, 201, 206, 214, 216, 225, 226, 227, 228, 229, 231, 232, 233, 239, 240, 241, 242, 243, 244, 245, 246, 252, 253, 254, 255, 257, 260, 261, 264, 267, 268, 275, 276, 277, 278, 280, 283, 284, 288], "download": [1, 8, 15, 16, 17, 19, 21, 24, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 67, 68, 70, 72, 73, 74, 77, 78, 80, 87, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 131, 139, 140, 144, 145, 146, 147, 149, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 167, 170, 171, 172, 173, 177, 178, 179, 180, 182, 184, 185, 187, 189, 190, 193, 194, 196, 197, 199, 200, 201, 206, 214, 216, 225, 226, 227, 228, 229, 231, 232, 233, 239, 240, 241, 242, 243, 244, 245, 246, 249, 251, 252, 253, 254, 255, 257, 267, 268, 270, 275, 276, 277, 278, 280, 288, 289], "full": [1, 3, 4, 7, 8, 12, 14, 15, 16, 17, 19, 21, 24, 28, 35, 36, 37, 39, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 67, 68, 70, 72, 73, 74, 77, 78, 80, 90, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 131, 139, 140, 141, 144, 145, 146, 147, 148, 149, 151, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 167, 170, 171, 172, 173, 176, 177, 179, 180, 181, 184, 185, 187, 189, 193, 194, 196, 197, 199, 200, 201, 206, 214, 225, 226, 227, 228, 229, 231, 232, 233, 239, 240, 241, 242, 243, 244, 245, 246, 252, 253, 254, 255, 257, 259, 261, 264, 266, 267, 268, 275, 276, 277, 278, 280, 282, 288], "exampl": [1, 2, 3, 4, 5, 8, 9, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 28, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 87, 88, 89, 91, 93, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 111, 113, 114, 115, 117, 118, 119, 120, 123, 125, 128, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 153, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 167, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 196, 197, 199, 201, 203, 205, 206, 208, 209, 210, 211, 214, 215, 223, 225, 226, 227, 228, 229, 231, 232, 233, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 250, 251, 252, 253, 255, 256, 257, 260, 261, 262, 263, 264, 267, 268, 270, 275, 276, 277, 278, 280, 282, 284, 285, 286, 288], "author": [1, 4, 5, 7, 14, 15, 16, 17, 20, 21, 24, 28, 39, 49, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 80, 87, 88, 90, 92, 99, 105, 106, 107, 109, 110, 112, 113, 114, 117, 118, 120, 121, 122, 125, 128, 131, 139, 140, 141, 142, 143, 145, 146, 147, 148, 151, 152, 153, 155, 156, 160, 161, 163, 164, 171, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 193, 194, 196, 200, 201, 205, 206, 208, 209, 210, 211, 214, 215, 226, 231, 232, 239, 242, 246, 250, 251, 252, 253, 254, 255, 256, 257, 263, 264, 266, 268, 269, 270, 279, 282, 283, 284, 288, 289], "vincent": [1, 17, 156, 173, 179], "moen": [1, 17, 156, 173, 179], "separ": [1, 4, 5, 7, 8, 12, 19, 37, 54, 57, 90, 95, 102, 103, 104, 105, 113, 120, 143, 157, 161, 163, 171, 173, 182, 185, 192, 199, 227, 242, 251, 254, 257, 263, 275], "rl": [1, 135, 138, 179, 180, 181, 186, 262], "algorithm": [1, 7, 8, 13, 14, 15, 35, 40, 45, 54, 57, 61, 74, 87, 93, 96, 98, 104, 106, 107, 108, 109, 113, 121, 135, 138, 140, 143, 145, 149, 155, 156, 163, 173, 176, 179, 182, 187, 205, 206, 225, 229, 242, 264, 282], "variou": [1, 4, 12, 18, 44, 51, 53, 54, 55, 88, 90, 93, 98, 102, 110, 113, 120, 122, 145, 155, 160, 162, 177, 179, 182, 183, 192, 197, 200, 203, 210, 214, 241, 245, 250, 253, 256, 266, 268, 277, 280], "piec": [1, 7, 12, 17, 90, 98, 113, 178, 179, 183, 192, 199, 263], "assembl": [1, 12, 54, 98], "script": [1, 7, 8, 9, 13, 15, 16, 17, 19, 24, 35, 36, 37, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 60, 65, 73, 77, 78, 80, 93, 95, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 125, 128, 131, 139, 140, 141, 144, 145, 146, 147, 148, 149, 151, 152, 153, 155, 157, 159, 160, 161, 162, 163, 164, 167, 170, 171, 172, 173, 175, 177, 178, 179, 180, 182, 184, 185, 187, 192, 194, 196, 199, 200, 201, 206, 214, 215, 216, 223, 226, 228, 231, 232, 233, 239, 242, 246, 252, 253, 254, 255, 257, 261, 266, 268, 275, 276, 277, 278, 280, 288, 289], "collect": [1, 5, 8, 14, 17, 18, 23, 24, 40, 47, 49, 54, 60, 65, 98, 103, 104, 107, 112, 138, 139, 140, 143, 153, 156, 160, 176, 180, 183, 196, 197, 202, 209, 210, 211, 223, 241, 242, 261, 264, 266, 284], "final": [1, 8, 13, 14, 15, 17, 18, 20, 21, 24, 28, 45, 47, 51, 54, 57, 80, 90, 93, 95, 98, 100, 103, 104, 105, 110, 113, 115, 118, 120, 122, 128, 138, 139, 140, 141, 143, 145, 146, 147, 149, 150, 155, 160, 161, 162, 163, 167, 170, 172, 175, 177, 179, 180, 181, 182, 183, 185, 189, 190, 196, 197, 217, 263, 264, 266, 268, 275, 278, 282, 284], "function": [1, 3, 4, 5, 7, 8, 10, 12, 13, 16, 17, 19, 20, 21, 23, 28, 37, 41, 42, 44, 45, 47, 53, 54, 56, 58, 60, 65, 66, 69, 70, 72, 73, 74, 87, 88, 95, 96, 98, 102, 103, 109, 112, 114, 117, 118, 120, 122, 128, 131, 132, 133, 134, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 155, 156, 157, 160, 161, 163, 170, 171, 173, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 196, 197, 199, 200, 201, 202, 205, 206, 215, 216, 223, 226, 228, 229, 239, 241, 243, 248, 250, 253, 254, 255, 257, 260, 261, 262, 263, 264, 269, 275, 276, 277, 278, 282, 284, 286, 288, 289], "ar": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 28, 35, 36, 37, 40, 44, 45, 47, 48, 51, 53, 54, 55, 56, 57, 58, 60, 61, 65, 72, 73, 74, 80, 87, 88, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 128, 131, 134, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 159, 160, 161, 162, 163, 164, 167, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 192, 193, 194, 196, 197, 199, 201, 203, 205, 206, 207, 208, 209, 210, 211, 214, 215, 216, 217, 223, 225, 226, 227, 229, 231, 232, 239, 240, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 255, 256, 257, 259, 260, 261, 263, 264, 266, 267, 268, 275, 276, 277, 278, 279, 280, 282, 283, 284, 286, 288, 289, 290], "state": [1, 4, 7, 9, 12, 13, 14, 17, 21, 41, 42, 48, 54, 57, 58, 60, 93, 96, 98, 100, 104, 105, 106, 110, 113, 121, 122, 131, 139, 140, 146, 147, 149, 151, 153, 156, 157, 159, 163, 170, 172, 177, 179, 180, 181, 182, 183, 185, 189, 196, 201, 208, 209, 214, 225, 226, 231, 244, 261, 266, 267, 278, 283, 284], "contain": [1, 2, 8, 12, 13, 15, 17, 18, 21, 36, 37, 41, 45, 51, 54, 55, 60, 72, 73, 74, 87, 90, 95, 96, 100, 103, 104, 109, 110, 113, 114, 121, 122, 128, 135, 138, 139, 140, 144, 145, 146, 151, 153, 156, 171, 175, 177, 179, 180, 181, 183, 184, 185, 187, 189, 190, 192, 193, 196, 197, 199, 200, 207, 223, 226, 229, 231, 239, 241, 242, 244, 255, 256, 259, 263, 266, 267, 278, 284, 286, 289], "trainabl": [1, 8, 73, 105, 107], "paramet": [1, 7, 13, 14, 15, 17, 18, 20, 21, 24, 28, 35, 37, 38, 39, 42, 44, 45, 47, 48, 51, 53, 54, 56, 57, 72, 73, 80, 90, 93, 95, 98, 102, 104, 105, 107, 109, 112, 113, 118, 120, 121, 128, 131, 133, 134, 137, 138, 139, 140, 141, 143, 145, 146, 151, 153, 155, 156, 157, 159, 161, 162, 163, 167, 170, 171, 172, 183, 184, 187, 189, 190, 192, 196, 197, 201, 205, 207, 208, 209, 215, 216, 223, 226, 230, 231, 232, 233, 238, 239, 244, 245, 249, 253, 259, 260, 261, 262, 268, 275, 282, 284, 290], "tutori": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 28, 29, 30, 31, 32, 33, 34, 38, 41, 46, 47, 48, 49, 50, 56, 58, 60, 61, 65, 80, 81, 82, 83, 84, 85, 86, 87, 89, 93, 96, 97, 100, 102, 104, 106, 108, 109, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 178, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 197, 198, 201, 202, 203, 205, 206, 208, 209, 210, 211, 213, 214, 215, 225, 226, 230, 231, 232, 234, 235, 236, 237, 239, 240, 241, 242, 247, 248, 256, 257, 259, 260, 261, 262, 264, 265, 266, 267, 268, 270, 271, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 287, 288, 289, 290], "guid": [1, 7, 9, 12, 21, 65, 87, 90, 118, 135, 136, 138, 139, 155, 164, 178, 186, 189, 196, 197, 214, 223, 225, 227, 230, 238, 259, 261, 262, 268, 282, 284], "you": [1, 2, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 24, 28, 34, 35, 36, 37, 39, 40, 42, 44, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 65, 72, 73, 80, 82, 83, 84, 85, 86, 87, 90, 92, 93, 95, 96, 98, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 118, 120, 121, 122, 125, 128, 131, 132, 134, 136, 137, 138, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 159, 160, 161, 162, 163, 164, 167, 168, 170, 171, 172, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 187, 189, 190, 192, 193, 194, 196, 197, 199, 201, 202, 203, 205, 207, 208, 209, 210, 211, 215, 216, 223, 226, 227, 228, 229, 231, 232, 240, 242, 243, 244, 245, 246, 250, 251, 253, 254, 256, 257, 260, 261, 264, 267, 268, 269, 270, 275, 276, 277, 278, 279, 280, 282, 283, 284, 286, 288, 289], "through": [1, 3, 7, 8, 12, 13, 16, 17, 18, 20, 24, 28, 35, 36, 40, 41, 47, 51, 54, 57, 59, 60, 89, 91, 93, 95, 98, 100, 102, 104, 105, 107, 108, 109, 110, 113, 114, 115, 117, 118, 121, 125, 133, 134, 138, 140, 141, 142, 143, 144, 146, 148, 149, 150, 155, 157, 160, 161, 162, 163, 164, 167, 170, 172, 173, 175, 176, 179, 180, 181, 182, 183, 184, 185, 189, 190, 192, 193, 194, 196, 197, 201, 202, 207, 208, 209, 215, 216, 226, 227, 232, 240, 245, 256, 259, 262, 267, 268, 269, 270, 275, 277, 282, 284, 288], "from": [1, 3, 4, 5, 7, 8, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 28, 35, 37, 40, 41, 42, 43, 44, 48, 51, 52, 53, 54, 56, 57, 58, 60, 67, 68, 69, 72, 73, 74, 75, 77, 78, 79, 80, 87, 88, 90, 91, 93, 95, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 117, 118, 119, 120, 121, 123, 125, 128, 131, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 152, 153, 155, 156, 157, 159, 160, 161, 162, 163, 164, 167, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 189, 190, 193, 194, 196, 200, 201, 202, 207, 208, 209, 211, 214, 215, 216, 217, 223, 226, 227, 229, 230, 232, 238, 239, 241, 242, 244, 248, 251, 252, 253, 255, 256, 259, 260, 261, 262, 263, 264, 266, 268, 270, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 289, 290], "ground": [1, 17, 48, 80, 199], "up": [1, 3, 7, 8, 12, 13, 17, 19, 21, 23, 24, 35, 37, 40, 54, 57, 60, 65, 76, 79, 87, 90, 95, 96, 98, 99, 100, 103, 105, 106, 107, 109, 110, 112, 113, 115, 120, 131, 132, 138, 139, 140, 141, 142, 143, 146, 147, 151, 152, 153, 155, 156, 157, 160, 161, 167, 170, 172, 173, 175, 178, 179, 180, 181, 182, 185, 189, 190, 194, 196, 197, 200, 201, 203, 207, 208, 210, 211, 216, 227, 232, 242, 245, 255, 256, 257, 259, 260, 261, 262, 269, 280, 282, 284, 290], "us": [1, 4, 5, 6, 9, 10, 12, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 35, 36, 37, 40, 41, 42, 44, 45, 48, 49, 51, 53, 54, 56, 57, 59, 60, 61, 62, 65, 67, 68, 70, 73, 74, 77, 78, 80, 87, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 117, 121, 125, 128, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 150, 152, 155, 160, 161, 162, 163, 164, 167, 168, 170, 171, 173, 175, 177, 178, 179, 180, 185, 186, 187, 193, 194, 196, 197, 199, 200, 201, 203, 205, 206, 208, 212, 214, 215, 216, 226, 227, 228, 229, 230, 233, 238, 239, 241, 244, 245, 246, 248, 250, 251, 252, 254, 256, 258, 261, 262, 263, 264, 266, 268, 269, 275, 276, 278, 280, 282, 283, 284, 286, 288, 290], "To": [1, 4, 7, 8, 12, 13, 14, 15, 17, 19, 20, 21, 24, 35, 36, 40, 41, 42, 45, 51, 54, 55, 56, 62, 70, 78, 87, 88, 90, 93, 96, 102, 104, 105, 106, 107, 109, 110, 112, 113, 114, 117, 121, 122, 125, 131, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 159, 161, 170, 171, 173, 176, 177, 178, 179, 180, 181, 182, 184, 185, 189, 190, 192, 196, 197, 200, 201, 210, 211, 215, 216, 217, 223, 226, 227, 229, 231, 232, 239, 240, 241, 242, 243, 244, 245, 249, 253, 255, 256, 257, 259, 264, 266, 268, 269, 270, 275, 277, 278, 279, 284, 286, 289, 290], "aim": [1, 8, 105, 108, 142, 170, 180, 183, 217, 278], "we": [1, 2, 3, 4, 5, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 60, 67, 68, 70, 73, 74, 80, 87, 88, 90, 93, 96, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 118, 120, 121, 128, 131, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 159, 160, 161, 162, 163, 164, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 192, 193, 194, 196, 197, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 211, 214, 215, 223, 225, 227, 229, 231, 232, 233, 239, 240, 241, 243, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 263, 264, 266, 267, 268, 269, 270, 275, 276, 277, 278, 279, 280, 282, 283, 284, 288, 289, 290], "focus": [1, 3, 96, 105, 108, 133, 135, 176, 185, 197], "which": [1, 3, 4, 5, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 35, 36, 39, 40, 41, 42, 44, 45, 47, 48, 51, 53, 54, 55, 56, 57, 60, 61, 65, 67, 68, 72, 73, 74, 80, 87, 88, 90, 93, 95, 96, 98, 99, 100, 103, 104, 105, 106, 107, 109, 110, 112, 113, 115, 118, 120, 121, 122, 128, 131, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 155, 156, 157, 159, 160, 161, 162, 164, 167, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 192, 194, 196, 197, 199, 200, 201, 203, 206, 207, 208, 209, 210, 211, 214, 223, 225, 226, 227, 228, 229, 231, 232, 239, 241, 242, 243, 244, 245, 246, 250, 251, 253, 254, 255, 256, 257, 259, 260, 263, 264, 267, 268, 275, 276, 277, 278, 279, 280, 282, 283, 284, 286], "i": [1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 63, 64, 65, 67, 68, 70, 73, 77, 78, 80, 82, 83, 84, 85, 86, 87, 90, 92, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 114, 115, 117, 118, 120, 121, 123, 125, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 155, 156, 159, 160, 161, 162, 163, 164, 167, 171, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 192, 193, 194, 196, 197, 198, 199, 201, 202, 204, 205, 206, 208, 209, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 249, 250, 251, 253, 254, 255, 257, 258, 259, 261, 262, 263, 264, 266, 267, 268, 269, 270, 272, 273, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 289], "rel": [1, 7, 8, 96, 104, 128, 144, 162, 167, 183, 185, 200, 269], "straightforward": [1, 5, 7, 8, 20, 21, 54, 95, 98, 103, 105, 106, 161, 173, 196, 200], "deep": [1, 5, 8, 15, 16, 39, 51, 54, 57, 74, 77, 78, 98, 99, 100, 103, 105, 109, 111, 112, 121, 132, 134, 135, 138, 146, 147, 148, 149, 153, 161, 162, 163, 171, 177, 180, 185, 192, 197, 201, 202, 203, 205, 206, 217, 223, 229, 241, 242, 246, 259, 262], "determinist": [1, 14, 17, 141, 156, 180, 241, 242], "gradient": [1, 4, 8, 13, 14, 16, 17, 19, 20, 40, 47, 48, 51, 54, 57, 61, 65, 67, 68, 70, 73, 77, 78, 95, 98, 100, 103, 104, 105, 106, 107, 109, 113, 121, 128, 131, 133, 138, 139, 140, 143, 144, 146, 148, 150, 151, 153, 155, 159, 162, 163, 170, 177, 179, 181, 182, 183, 186, 190, 192, 197, 209, 225, 230, 238, 260, 261, 262, 275, 288], "simpl": [1, 3, 4, 5, 7, 8, 12, 15, 18, 20, 21, 24, 28, 51, 54, 56, 59, 61, 72, 80, 90, 93, 96, 98, 100, 103, 104, 105, 113, 114, 117, 121, 122, 131, 132, 134, 138, 139, 144, 145, 148, 150, 155, 157, 161, 162, 167, 172, 173, 175, 177, 179, 181, 182, 183, 184, 186, 187, 189, 194, 196, 197, 203, 205, 206, 209, 211, 214, 216, 227, 231, 240, 241, 242, 244, 253, 256, 257, 260, 262, 264, 279, 282, 284], "continu": [1, 7, 54, 58, 90, 93, 98, 103, 105, 110, 113, 141, 142, 143, 147, 151, 155, 179, 183, 185, 189, 194, 210, 227, 229, 232, 242, 243, 244, 245, 246, 266, 267, 275, 277, 278, 284], "control": [1, 12, 13, 17, 35, 37, 40, 47, 71, 75, 88, 90, 95, 105, 115, 116, 117, 118, 125, 132, 138, 140, 141, 142, 144, 145, 155, 159, 171, 179, 180, 181, 194, 210, 223, 227, 246, 248, 261, 262, 283], "It": [1, 4, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 28, 29, 30, 31, 32, 33, 35, 45, 47, 48, 49, 51, 54, 56, 57, 80, 81, 87, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 117, 122, 128, 131, 137, 139, 140, 141, 143, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 167, 170, 171, 172, 173, 177, 180, 181, 183, 185, 187, 188, 189, 191, 192, 195, 196, 197, 199, 200, 207, 208, 209, 211, 227, 228, 240, 242, 245, 249, 251, 253, 255, 256, 259, 263, 264, 266, 280, 284, 286, 288], "consist": [1, 3, 4, 8, 17, 18, 28, 35, 36, 37, 40, 47, 105, 107, 113, 141, 143, 151, 160, 163, 167, 170, 179, 180, 184, 185, 189, 193, 197, 200, 206, 227, 232, 242, 263, 264, 266, 277, 278], "learn": [1, 4, 5, 8, 16, 17, 19, 21, 22, 35, 36, 37, 40, 41, 42, 44, 45, 47, 49, 51, 54, 56, 57, 58, 59, 60, 61, 65, 74, 77, 78, 80, 87, 89, 91, 92, 93, 95, 96, 98, 99, 100, 103, 104, 105, 109, 111, 112, 113, 114, 115, 117, 118, 122, 123, 125, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 145, 146, 147, 148, 151, 152, 153, 155, 156, 161, 162, 164, 168, 170, 171, 172, 175, 177, 178, 182, 185, 186, 187, 190, 192, 193, 196, 197, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 214, 215, 217, 223, 225, 231, 239, 242, 246, 249, 250, 251, 254, 256, 260, 261, 262, 264, 267, 268, 275, 276, 277, 278, 279, 280, 283, 284, 290], "parametr": [1, 2, 21, 133, 138, 179, 186, 262, 284], "an": [1, 2, 3, 5, 7, 8, 9, 10, 12, 14, 15, 16, 18, 19, 20, 21, 23, 24, 28, 35, 36, 37, 39, 40, 41, 42, 44, 47, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 67, 70, 72, 74, 80, 87, 88, 90, 92, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 113, 114, 115, 117, 120, 121, 128, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 153, 155, 157, 159, 160, 161, 162, 163, 164, 167, 168, 170, 171, 172, 173, 176, 177, 178, 180, 181, 182, 183, 184, 185, 187, 189, 190, 192, 193, 194, 196, 199, 200, 201, 203, 205, 207, 208, 209, 211, 214, 215, 216, 217, 223, 225, 226, 227, 228, 229, 230, 232, 233, 238, 239, 241, 242, 244, 246, 248, 250, 253, 254, 255, 256, 257, 261, 262, 263, 264, 267, 268, 269, 270, 275, 277, 278, 279, 280, 282, 283, 284, 286, 288, 289, 290], "action": [1, 24, 100, 104, 109, 113, 139, 140, 163, 177, 179, 180, 181, 182, 183, 189, 232, 241, 256, 261, 264, 277], "pair": [1, 8, 51, 54, 57, 96, 146, 147, 149, 172, 179, 180, 185, 189, 199, 206, 217, 223, 241, 263], "output": [1, 2, 3, 4, 5, 7, 8, 9, 13, 14, 15, 17, 19, 20, 21, 24, 35, 36, 40, 44, 47, 48, 49, 51, 53, 54, 57, 67, 68, 70, 72, 73, 74, 77, 78, 80, 87, 88, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 107, 109, 110, 112, 113, 115, 118, 120, 121, 122, 125, 128, 131, 139, 140, 141, 143, 144, 146, 147, 148, 153, 155, 156, 157, 159, 161, 162, 164, 167, 172, 173, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 187, 190, 192, 194, 196, 199, 200, 201, 203, 205, 207, 210, 214, 215, 216, 217, 225, 227, 229, 232, 233, 240, 242, 249, 257, 260, 263, 264, 266, 268, 270, 279, 280, 282, 284, 289], "maxim": [1, 17, 57, 80, 87, 105, 107, 145, 163, 180, 194, 242, 259], "given": [1, 4, 8, 12, 13, 15, 17, 19, 21, 35, 37, 40, 44, 45, 47, 53, 54, 57, 60, 80, 87, 90, 96, 100, 104, 105, 108, 109, 112, 113, 122, 140, 146, 147, 155, 157, 159, 162, 163, 164, 172, 177, 179, 180, 182, 183, 185, 194, 196, 197, 199, 215, 217, 227, 233, 242, 252, 256, 260, 267, 278, 284], "certain": [1, 7, 8, 13, 14, 18, 54, 60, 96, 109, 134, 140, 143, 144, 149, 159, 162, 164, 179, 184, 194, 196, 197, 225, 229, 252, 253, 256, 259, 266, 275, 278, 280], "what": [1, 2, 3, 4, 5, 7, 12, 17, 19, 23, 24, 35, 36, 37, 47, 49, 50, 58, 59, 60, 65, 80, 92, 93, 96, 98, 100, 103, 104, 106, 107, 109, 110, 112, 114, 118, 123, 125, 137, 138, 140, 142, 143, 144, 145, 147, 148, 151, 152, 155, 156, 163, 164, 170, 175, 177, 179, 180, 181, 184, 190, 192, 193, 196, 197, 199, 200, 201, 205, 208, 226, 227, 228, 229, 230, 231, 238, 241, 242, 256, 261, 262, 264, 267, 277, 283], "how": [1, 2, 4, 5, 7, 8, 9, 12, 13, 15, 17, 19, 20, 21, 23, 24, 35, 37, 40, 41, 42, 47, 48, 49, 51, 54, 55, 56, 57, 60, 61, 62, 80, 87, 90, 92, 93, 95, 96, 98, 100, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 118, 120, 128, 131, 132, 133, 134, 135, 136, 137, 138, 142, 144, 145, 146, 147, 148, 150, 151, 153, 155, 156, 157, 159, 160, 161, 163, 164, 167, 168, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 196, 197, 199, 200, 201, 203, 206, 208, 210, 214, 215, 225, 226, 227, 230, 231, 232, 238, 239, 241, 242, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 261, 262, 263, 264, 266, 267, 268, 275, 276, 277, 278, 279, 280, 282, 284, 290], "write": [1, 4, 5, 9, 10, 12, 13, 19, 22, 48, 54, 65, 68, 102, 106, 107, 108, 109, 113, 121, 123, 128, 135, 137, 138, 142, 144, 145, 150, 151, 153, 156, 159, 161, 167, 171, 173, 176, 179, 182, 183, 185, 189, 192, 194, 196, 200, 209, 226, 227, 228, 229, 233, 242, 256, 262, 266, 267, 278, 282, 285, 288, 289], "custom": [1, 8, 12, 14, 21, 22, 54, 57, 68, 71, 75, 96, 113, 120, 123, 133, 135, 137, 138, 141, 145, 156, 163, 173, 179, 182, 186, 192, 193, 194, 197, 200, 214, 216, 223, 226, 230, 239, 242, 249, 252, 253, 262, 263, 282, 284, 286], "its": [1, 2, 3, 4, 5, 7, 8, 9, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 35, 36, 40, 45, 47, 51, 54, 56, 57, 58, 60, 73, 87, 95, 96, 98, 100, 103, 105, 107, 109, 110, 112, 113, 115, 120, 121, 122, 131, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 153, 155, 156, 157, 159, 160, 161, 163, 164, 170, 171, 175, 177, 179, 180, 181, 182, 183, 185, 189, 190, 194, 196, 197, 201, 203, 209, 211, 216, 217, 223, 226, 227, 229, 231, 232, 239, 242, 243, 244, 245, 260, 268, 277, 278, 280, 283, 284, 286, 289], "includ": [1, 2, 3, 4, 5, 7, 8, 9, 12, 17, 18, 19, 28, 40, 41, 44, 53, 54, 58, 60, 65, 74, 80, 87, 90, 93, 95, 96, 98, 100, 103, 104, 105, 106, 113, 115, 117, 118, 120, 133, 143, 145, 146, 147, 148, 150, 151, 153, 155, 156, 161, 163, 173, 175, 176, 177, 179, 182, 185, 189, 190, 193, 194, 196, 197, 199, 200, 207, 209, 210, 215, 216, 217, 223, 225, 226, 227, 229, 232, 239, 242, 251, 253, 254, 259, 266, 268, 275, 277, 279, 282, 283, 289], "design": [1, 7, 8, 17, 21, 28, 57, 61, 80, 90, 96, 112, 113, 147, 153, 156, 173, 179, 180, 181, 183, 184, 189, 190, 196, 203, 215, 227, 229, 242, 249, 253, 256, 259, 263, 264, 275, 276, 277, 282, 284, 288], "effici": [1, 5, 7, 13, 15, 18, 21, 35, 54, 56, 80, 87, 103, 105, 109, 112, 132, 133, 139, 140, 143, 145, 153, 155, 156, 162, 167, 177, 179, 183, 184, 189, 192, 197, 208, 227, 231, 249, 253, 259, 262, 266, 269, 278, 279, 280, 284, 285], "store": [1, 7, 8, 20, 21, 24, 35, 36, 37, 41, 42, 44, 47, 53, 56, 58, 73, 93, 95, 102, 103, 106, 107, 109, 112, 113, 115, 121, 131, 142, 144, 145, 147, 155, 156, 161, 163, 164, 171, 173, 175, 176, 177, 179, 180, 181, 182, 183, 185, 196, 197, 232, 241, 242, 250, 251, 264, 268, 278, 279, 284], "them": [1, 2, 3, 4, 7, 8, 12, 13, 14, 15, 17, 21, 23, 24, 35, 37, 40, 47, 48, 51, 53, 54, 56, 58, 60, 65, 73, 93, 95, 96, 98, 100, 102, 103, 104, 105, 108, 109, 110, 112, 113, 114, 115, 117, 118, 121, 122, 131, 132, 133, 138, 140, 141, 143, 145, 146, 147, 149, 150, 155, 156, 157, 160, 161, 162, 167, 170, 171, 172, 173, 177, 178, 180, 181, 182, 183, 192, 193, 194, 196, 199, 200, 201, 206, 215, 216, 226, 227, 231, 239, 241, 242, 250, 251, 259, 261, 264, 268, 277, 279, 280, 283, 284, 286], "trajectori": [1, 17, 156, 179, 180], "transit": [1, 17, 90, 92, 106, 156, 173, 180], "assum": [1, 2, 8, 9, 12, 13, 17, 18, 24, 39, 47, 48, 56, 59, 80, 95, 98, 99, 105, 106, 108, 110, 113, 118, 131, 143, 144, 146, 147, 155, 156, 171, 177, 179, 182, 184, 185, 199, 209, 231, 232, 239, 241, 256, 277, 278, 280], "have": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 28, 35, 36, 37, 40, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 60, 62, 73, 74, 80, 87, 88, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 125, 128, 131, 134, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 159, 160, 161, 162, 163, 164, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 189, 192, 193, 194, 196, 197, 199, 200, 201, 203, 206, 208, 209, 210, 211, 214, 215, 216, 223, 226, 227, 228, 229, 239, 240, 241, 242, 243, 244, 245, 246, 250, 251, 253, 254, 255, 256, 259, 260, 263, 264, 266, 267, 268, 269, 275, 276, 277, 278, 279, 280, 282, 283, 284, 286, 288, 289], "complet": [1, 7, 8, 18, 39, 90, 93, 95, 98, 106, 107, 109, 118, 138, 140, 142, 143, 145, 146, 148, 150, 155, 173, 175, 177, 178, 179, 182, 192, 194, 199, 225, 242, 255, 256, 266, 268, 277, 278, 282], "ppo": [1, 135, 138, 186, 262], "give": [1, 2, 7, 8, 14, 17, 21, 40, 49, 51, 54, 55, 57, 80, 95, 96, 98, 100, 105, 107, 109, 110, 112, 113, 122, 147, 151, 157, 160, 161, 162, 163, 172, 178, 182, 185, 189, 192, 194, 196, 197, 200, 215, 227, 276, 280, 284], "compon": [1, 7, 8, 12, 13, 17, 57, 90, 100, 105, 109, 122, 133, 137, 138, 145, 146, 148, 156, 163, 179, 183, 187, 189, 193, 194, 196, 200, 203, 251, 280], "depend": [1, 7, 8, 12, 14, 51, 55, 57, 80, 87, 90, 95, 96, 102, 103, 105, 106, 110, 113, 143, 145, 146, 149, 150, 155, 156, 159, 160, 162, 163, 173, 176, 178, 179, 182, 189, 194, 200, 203, 205, 215, 227, 228, 233, 239, 242, 246, 259, 268, 277, 289, 290], "tensordict": [1, 17, 156, 163, 173, 179], "nn": [1, 2, 7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 23, 24, 40, 41, 42, 47, 48, 49, 51, 54, 60, 71, 74, 75, 93, 95, 98, 102, 104, 107, 112, 117, 120, 123, 128, 131, 133, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 153, 156, 159, 167, 171, 172, 175, 179, 180, 181, 182, 183, 184, 186, 190, 192, 194, 196, 197, 201, 205, 207, 208, 209, 211, 215, 216, 223, 226, 229, 230, 232, 233, 238, 242, 243, 244, 246, 249, 260, 261, 262, 263, 264, 276, 279, 280, 284, 286], "tensordictmodul": [1, 156, 179], "although": [1, 15, 20, 47, 54, 106, 107, 112, 113, 115, 118, 131, 142, 144, 163, 171, 173, 182, 194, 196, 215], "should": [1, 2, 4, 7, 8, 9, 12, 13, 14, 17, 18, 19, 20, 23, 24, 35, 47, 48, 54, 55, 56, 57, 58, 60, 74, 80, 87, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 115, 121, 128, 137, 138, 140, 141, 142, 144, 145, 148, 150, 153, 155, 156, 157, 160, 163, 164, 167, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 190, 192, 193, 194, 196, 197, 199, 201, 208, 209, 215, 223, 226, 227, 232, 240, 241, 242, 245, 252, 256, 259, 261, 266, 267, 268, 270, 275, 276, 277, 282, 283, 288, 289], "suffici": [1, 8, 54, 57, 105, 106, 128, 151, 153, 170, 173, 196], "transpar": [1, 15, 96, 107, 156, 182, 210, 216, 250, 289], "understood": [1, 4, 19, 253], "without": [1, 7, 8, 12, 13, 17, 19, 21, 35, 54, 58, 60, 100, 103, 105, 106, 117, 138, 139, 141, 143, 144, 147, 148, 155, 159, 160, 162, 163, 164, 170, 173, 176, 177, 178, 179, 180, 181, 184, 189, 192, 196, 201, 206, 208, 211, 226, 231, 233, 239, 242, 251, 252, 254, 260, 267, 275, 277, 278, 280, 283, 284], "understand": [1, 2, 4, 5, 8, 10, 18, 47, 48, 57, 62, 87, 90, 95, 97, 98, 99, 100, 102, 103, 104, 106, 109, 113, 114, 118, 123, 128, 133, 138, 141, 144, 145, 146, 147, 150, 155, 159, 161, 173, 185, 192, 196, 197, 201, 202, 208, 211, 223, 225, 240, 244, 246, 250, 251, 253, 255, 256, 259, 262, 267, 276, 279], "class": [1, 2, 5, 7, 8, 12, 13, 16, 18, 24, 28, 35, 37, 39, 41, 42, 48, 51, 54, 57, 58, 70, 72, 80, 88, 90, 96, 98, 100, 102, 103, 104, 107, 108, 112, 113, 118, 121, 122, 128, 138, 139, 140, 141, 145, 146, 148, 150, 151, 153, 155, 156, 160, 161, 163, 164, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 190, 192, 196, 199, 201, 207, 208, 209, 211, 215, 223, 225, 227, 229, 241, 243, 245, 246, 256, 263, 266, 275, 276, 277, 279, 286], "do": [1, 2, 3, 4, 7, 8, 10, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 35, 36, 42, 51, 54, 55, 56, 57, 59, 67, 68, 74, 90, 93, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 115, 121, 122, 125, 131, 133, 138, 139, 143, 144, 145, 146, 152, 153, 155, 156, 157, 160, 161, 162, 163, 167, 170, 171, 173, 176, 177, 178, 179, 180, 183, 185, 190, 192, 196, 197, 199, 200, 201, 209, 223, 226, 227, 228, 231, 239, 240, 241, 242, 243, 245, 253, 254, 255, 261, 264, 266, 268, 276, 277, 278, 283, 284, 286, 288], "sota": 1, "implement": [1, 2, 3, 7, 8, 9, 13, 14, 15, 16, 17, 18, 21, 28, 36, 37, 39, 47, 49, 51, 54, 56, 60, 62, 65, 67, 68, 70, 72, 73, 74, 77, 78, 90, 95, 98, 104, 112, 113, 114, 121, 133, 134, 135, 138, 141, 143, 144, 146, 148, 150, 155, 156, 157, 159, 161, 162, 163, 164, 167, 172, 173, 175, 177, 179, 180, 183, 186, 189, 193, 196, 197, 199, 200, 203, 208, 215, 216, 227, 231, 239, 242, 249, 250, 252, 253, 256, 259, 262, 263, 264, 266, 269, 276, 278, 279, 280, 282, 283, 284, 289], "rather": [1, 16, 54, 57, 74, 80, 90, 100, 103, 105, 112, 113, 122, 138, 147, 149, 161, 171, 172, 173, 179, 192, 196, 200, 203, 227, 242, 250, 254, 266, 268, 275], "provid": [1, 4, 7, 8, 9, 12, 13, 14, 17, 18, 19, 20, 21, 23, 24, 28, 36, 37, 48, 54, 56, 57, 60, 61, 80, 87, 88, 90, 93, 95, 96, 98, 103, 104, 105, 106, 107, 113, 114, 117, 118, 121, 122, 134, 137, 138, 140, 142, 143, 144, 145, 151, 152, 153, 155, 156, 160, 161, 162, 163, 173, 177, 178, 179, 181, 182, 184, 189, 192, 193, 194, 196, 197, 199, 200, 203, 209, 210, 214, 215, 216, 217, 223, 225, 226, 227, 229, 231, 232, 240, 241, 242, 246, 251, 254, 255, 256, 259, 266, 277, 278, 284, 286, 288, 290], "high": [1, 2, 7, 8, 18, 24, 48, 54, 57, 58, 60, 62, 65, 87, 90, 100, 107, 112, 115, 120, 133, 138, 139, 140, 143, 145, 148, 149, 155, 186, 189, 190, 192, 196, 197, 207, 217, 241, 242, 253, 259, 260, 262, 269, 278, 282, 290], "level": [1, 2, 4, 7, 8, 19, 21, 24, 48, 54, 58, 60, 62, 65, 73, 100, 108, 115, 121, 138, 139, 140, 143, 148, 151, 153, 155, 159, 161, 164, 168, 184, 185, 186, 189, 192, 194, 196, 197, 200, 207, 210, 211, 250, 260, 262, 282, 284, 290], "illustr": [1, 24, 36, 48, 51, 61, 128, 143, 144, 145, 157, 173, 180, 190, 192, 199, 201, 211, 223, 225, 232, 239, 277, 278], "": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 14, 15, 17, 20, 21, 23, 24, 28, 35, 36, 37, 39, 40, 41, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 58, 60, 62, 73, 80, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 128, 131, 134, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 149, 150, 151, 153, 155, 156, 157, 159, 160, 161, 162, 164, 167, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 192, 193, 194, 196, 197, 199, 200, 201, 202, 203, 205, 207, 208, 209, 210, 211, 215, 225, 226, 227, 229, 231, 232, 239, 240, 241, 242, 244, 245, 246, 250, 251, 253, 259, 260, 261, 263, 264, 266, 268, 269, 270, 275, 277, 278, 280, 283, 284, 286, 288, 290], "librari": [1, 3, 4, 5, 7, 8, 9, 10, 12, 15, 17, 19, 23, 37, 41, 48, 55, 56, 62, 65, 93, 96, 113, 117, 118, 131, 135, 138, 142, 145, 149, 150, 160, 173, 175, 176, 178, 179, 183, 189, 197, 200, 201, 203, 211, 215, 216, 223, 246, 253, 255, 266, 270, 279, 287, 289], "featur": [1, 8, 9, 13, 14, 15, 17, 24, 37, 41, 45, 54, 55, 56, 57, 87, 88, 90, 95, 98, 100, 102, 103, 105, 106, 112, 113, 117, 121, 138, 139, 144, 148, 156, 161, 162, 163, 170, 173, 176, 178, 179, 183, 184, 190, 194, 196, 199, 200, 203, 207, 214, 215, 223, 225, 229, 231, 239, 241, 242, 245, 246, 250, 253, 256, 261, 269, 278, 279, 280, 282, 283, 284, 288, 289, 290], "context": [1, 2, 7, 12, 17, 20, 21, 47, 54, 80, 95, 100, 112, 113, 120, 131, 134, 143, 148, 159, 171, 173, 179, 182, 183, 184, 185, 189, 194, 200, 207, 210, 226, 228, 231, 232, 233, 242, 254, 256, 259, 267, 269, 279, 284, 289, 290], "bash": [1, 23, 163, 180, 223], "pip3": [1, 23, 55, 140, 156, 173, 179, 180, 189, 197, 268], "instal": [1, 4, 5, 7, 8, 12, 21, 28, 39, 55, 56, 58, 60, 62, 93, 99, 102, 113, 117, 131, 139, 140, 143, 146, 147, 151, 152, 155, 156, 159, 160, 163, 168, 173, 176, 179, 180, 181, 185, 189, 192, 194, 199, 201, 215, 223, 225, 227, 229, 232, 241, 243, 244, 245, 246, 253, 259, 266, 267, 268, 283, 289], "mujoco": [1, 156, 179], "glfw": 1, "cuda": [1, 5, 8, 12, 13, 14, 15, 18, 21, 23, 24, 28, 36, 41, 44, 47, 48, 49, 58, 59, 60, 67, 68, 78, 80, 88, 93, 103, 107, 113, 120, 121, 122, 128, 132, 137, 138, 139, 140, 141, 142, 143, 146, 149, 151, 152, 153, 155, 164, 170, 171, 175, 176, 177, 180, 181, 182, 183, 184, 189, 192, 194, 197, 199, 205, 206, 208, 209, 211, 214, 217, 226, 227, 228, 232, 251, 254, 255, 256, 260, 261, 264, 266, 267, 268, 269, 279, 284], "avail": [1, 2, 3, 4, 5, 7, 8, 13, 15, 18, 21, 23, 24, 35, 36, 37, 40, 41, 42, 44, 47, 48, 53, 54, 55, 56, 57, 58, 67, 80, 93, 96, 98, 100, 103, 104, 105, 109, 113, 115, 121, 128, 140, 144, 146, 155, 156, 159, 163, 164, 173, 177, 178, 179, 180, 183, 184, 185, 189, 192, 193, 196, 197, 199, 207, 209, 216, 217, 223, 225, 227, 228, 229, 242, 243, 244, 245, 246, 255, 257, 266, 282, 284, 288, 290], "seri": [1, 8, 18, 57, 58, 59, 60, 61, 87, 97, 100, 103, 104, 134, 138, 142, 146, 147, 151, 152, 160, 168, 177, 179, 185, 200, 202, 215, 259, 277], "easili": [1, 7, 15, 24, 28, 36, 49, 65, 80, 96, 103, 104, 105, 113, 120, 121, 122, 140, 143, 145, 146, 153, 155, 160, 161, 167, 177, 179, 180, 183, 192, 194, 196, 199, 208, 209, 211, 227, 244, 264, 268, 282, 286, 290], "reusabl": [1, 8], "swappabl": 1, "signatur": [1, 7, 12, 13, 17, 18, 118, 155, 171, 182, 193, 196], "main": [1, 3, 5, 7, 8, 14, 20, 24, 40, 57, 58, 60, 93, 105, 113, 118, 121, 139, 140, 146, 151, 155, 161, 173, 180, 181, 182, 183, 187, 196, 197, 199, 200, 208, 216, 223, 242, 260, 268, 269, 288, 289, 290], "characterist": [1, 17, 47, 148, 160, 162, 163, 178, 184, 196, 256], "thei": [1, 3, 7, 8, 12, 13, 15, 17, 19, 20, 24, 36, 37, 44, 48, 53, 54, 57, 60, 80, 87, 90, 95, 98, 100, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 131, 140, 144, 145, 146, 147, 150, 153, 155, 156, 161, 162, 164, 170, 171, 179, 180, 181, 183, 185, 192, 196, 197, 200, 203, 209, 211, 216, 227, 231, 232, 240, 241, 244, 245, 263, 270, 275, 276, 277, 278, 280, 286], "copi": [1, 7, 8, 15, 23, 39, 44, 48, 49, 55, 60, 80, 87, 95, 99, 104, 105, 120, 122, 125, 138, 139, 144, 149, 153, 155, 156, 160, 163, 171, 182, 189, 192, 193, 196, 207, 208, 214, 215, 231, 242, 264, 266, 282, 289], "loss_modul": 1, "whatev": [1, 12, 98, 103, 104, 107, 109, 113, 122, 223], "need": [1, 3, 4, 5, 7, 8, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 28, 35, 36, 37, 40, 41, 42, 44, 45, 47, 48, 49, 51, 54, 55, 56, 58, 59, 60, 65, 67, 68, 72, 87, 88, 93, 96, 98, 102, 103, 104, 105, 107, 109, 110, 112, 113, 115, 121, 122, 128, 131, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 155, 156, 157, 159, 160, 161, 162, 163, 164, 167, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 189, 192, 193, 194, 196, 197, 199, 201, 207, 208, 209, 211, 215, 216, 223, 226, 227, 229, 232, 239, 240, 241, 242, 243, 244, 245, 246, 250, 254, 255, 256, 263, 266, 267, 268, 275, 279, 280, 283, 284, 286, 289], "follow": [1, 2, 3, 4, 5, 7, 8, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 35, 36, 37, 39, 40, 44, 48, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 80, 87, 88, 90, 92, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 115, 117, 118, 122, 125, 128, 131, 138, 139, 140, 141, 143, 144, 145, 148, 151, 152, 153, 155, 156, 160, 161, 162, 163, 164, 168, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 189, 190, 192, 193, 194, 196, 197, 199, 200, 201, 209, 211, 215, 216, 223, 226, 229, 231, 232, 233, 239, 240, 246, 249, 250, 251, 253, 255, 256, 259, 263, 264, 266, 267, 269, 276, 278, 279, 280, 282, 283, 284, 286, 288, 289], "convent": [1, 17, 57, 113, 122, 131, 156, 192, 200, 227], "torch": [1, 2, 3, 5, 6, 7, 8, 10, 12, 13, 14, 15, 17, 18, 19, 21, 23, 24, 25, 26, 27, 36, 37, 38, 40, 41, 42, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 62, 65, 67, 68, 72, 78, 80, 90, 93, 95, 96, 98, 102, 103, 104, 105, 107, 110, 112, 115, 117, 118, 120, 121, 123, 128, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 147, 150, 155, 156, 157, 159, 160, 161, 162, 163, 164, 167, 170, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 192, 197, 199, 201, 203, 206, 207, 208, 209, 211, 212, 215, 216, 217, 223, 228, 229, 230, 232, 233, 240, 241, 242, 243, 244, 245, 248, 249, 250, 258, 260, 261, 262, 263, 264, 266, 268, 269, 275, 276, 278, 279, 280, 283, 284, 285, 286, 289, 290], "receiv": [1, 8, 17, 20, 60, 93, 103, 109, 121, 155, 173, 175, 179, 181, 182, 183, 194, 197, 226, 229, 242, 266], "input": [1, 2, 4, 7, 8, 9, 12, 13, 15, 16, 17, 19, 20, 35, 36, 39, 40, 44, 47, 48, 49, 51, 53, 54, 61, 65, 67, 68, 70, 72, 73, 74, 77, 78, 88, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 118, 120, 121, 122, 131, 134, 139, 140, 143, 145, 146, 147, 148, 149, 151, 153, 155, 156, 157, 159, 161, 162, 163, 164, 167, 170, 172, 175, 177, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 192, 193, 194, 196, 199, 203, 205, 207, 209, 215, 216, 217, 225, 226, 229, 232, 233, 245, 250, 254, 256, 259, 263, 264, 268, 278, 280, 282, 284, 288, 289], "all": [1, 2, 3, 5, 7, 8, 12, 13, 14, 15, 17, 18, 20, 21, 23, 24, 35, 36, 37, 40, 41, 44, 45, 47, 48, 49, 51, 54, 55, 56, 57, 58, 60, 61, 65, 80, 87, 90, 95, 96, 98, 100, 103, 104, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 159, 160, 161, 164, 167, 171, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 189, 190, 192, 193, 194, 196, 197, 199, 201, 207, 210, 214, 216, 223, 225, 227, 229, 231, 239, 240, 241, 243, 244, 245, 246, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 266, 267, 268, 275, 276, 278, 280, 282, 283, 284, 286, 288, 289, 290], "necessari": [1, 4, 7, 8, 12, 13, 15, 18, 23, 24, 28, 42, 48, 57, 58, 60, 90, 93, 103, 104, 106, 113, 122, 131, 139, 140, 143, 149, 153, 163, 175, 181, 182, 183, 189, 196, 201, 217, 226, 242, 246, 254, 263, 264, 277, 280, 282, 283], "inform": [1, 2, 4, 7, 10, 12, 13, 17, 19, 35, 49, 54, 58, 80, 87, 93, 95, 100, 102, 103, 105, 109, 110, 112, 122, 131, 139, 144, 145, 146, 147, 153, 155, 156, 159, 160, 163, 178, 179, 180, 182, 184, 185, 189, 190, 192, 194, 196, 197, 199, 201, 203, 209, 210, 211, 223, 226, 227, 241, 242, 244, 245, 254, 257, 259, 263, 266, 267, 268, 278, 280, 282, 286, 288, 289], "return": [1, 2, 4, 5, 7, 8, 9, 12, 13, 14, 15, 17, 18, 19, 20, 23, 24, 36, 37, 41, 44, 49, 51, 54, 56, 57, 80, 87, 95, 96, 102, 103, 104, 105, 107, 109, 110, 113, 115, 118, 120, 122, 131, 139, 140, 141, 143, 147, 148, 150, 153, 155, 156, 159, 161, 163, 164, 167, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 189, 190, 192, 194, 196, 197, 199, 205, 207, 208, 209, 211, 215, 216, 217, 223, 225, 227, 229, 232, 241, 243, 251, 254, 256, 263, 269, 270, 275, 277, 279, 282, 283, 284, 288, 289], "replay_buff": 1, "sampl": [1, 4, 5, 8, 12, 36, 37, 40, 41, 44, 48, 51, 53, 54, 56, 57, 60, 65, 93, 98, 100, 102, 103, 105, 122, 128, 133, 138, 139, 146, 149, 155, 162, 163, 170, 171, 179, 180, 181, 183, 186, 192, 196, 199, 200, 205, 225, 232, 241, 242, 254, 262, 280, 288], "loss_dict": 1, "instanc": [1, 7, 8, 14, 15, 17, 36, 42, 49, 58, 59, 60, 65, 87, 93, 98, 100, 103, 104, 105, 106, 107, 110, 112, 113, 114, 121, 139, 140, 144, 145, 148, 151, 152, 153, 156, 161, 163, 173, 175, 179, 181, 182, 183, 194, 201, 214, 215, 216, 223, 226, 232, 240, 241, 242, 246, 256, 259, 260, 283, 286], "written": [1, 4, 5, 7, 8, 9, 12, 13, 17, 19, 90, 102, 108, 113, 114, 150, 156, 160, 167, 171, 172, 175, 184, 189, 192, 216, 240, 251, 253, 266, 267, 268, 275], "under": [1, 7, 12, 23, 24, 35, 51, 54, 55, 57, 59, 61, 65, 102, 105, 107, 120, 121, 141, 143, 144, 148, 155, 162, 163, 171, 173, 177, 183, 189, 190, 199, 207, 209, 210, 223, 226, 250, 253, 263, 267, 276, 278], "loss_": 1, "smth": 1, "where": [1, 3, 4, 8, 12, 14, 15, 16, 17, 20, 21, 23, 28, 35, 37, 51, 54, 56, 65, 68, 73, 88, 90, 93, 95, 96, 98, 100, 102, 103, 105, 106, 107, 109, 110, 112, 121, 138, 140, 143, 145, 146, 147, 150, 152, 153, 155, 157, 161, 164, 167, 170, 171, 172, 173, 175, 178, 179, 180, 181, 182, 183, 184, 185, 190, 194, 196, 197, 199, 200, 208, 211, 223, 226, 227, 229, 239, 240, 241, 245, 256, 259, 263, 264, 266, 268, 275, 278, 279, 284], "string": [1, 4, 9, 12, 18, 54, 103, 115, 145, 146, 147, 156, 177, 179, 185, 192, 197, 223, 227, 241, 266], "describ": [1, 7, 8, 12, 13, 17, 18, 20, 24, 42, 44, 53, 54, 57, 65, 80, 98, 105, 115, 118, 125, 134, 155, 167, 175, 179, 180, 183, 189, 192, 196, 197, 201, 211, 214, 227, 259, 286, 290], "addit": [1, 2, 4, 7, 9, 12, 14, 18, 21, 24, 55, 60, 80, 96, 103, 105, 110, 113, 115, 120, 140, 143, 144, 146, 153, 155, 157, 161, 164, 177, 181, 182, 185, 190, 193, 194, 196, 200, 208, 215, 227, 232, 242, 252, 253, 255, 256, 259, 275, 276, 277, 278, 282, 283, 284, 289, 290], "kei": [1, 4, 8, 9, 12, 14, 17, 18, 54, 87, 108, 112, 115, 120, 122, 125, 140, 141, 142, 145, 156, 163, 173, 177, 178, 179, 181, 184, 185, 189, 190, 192, 196, 197, 200, 205, 206, 214, 216, 217, 231, 240, 242, 243, 252, 253, 264, 280, 283, 284], "mai": [1, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 21, 24, 40, 54, 55, 57, 73, 80, 90, 95, 96, 98, 100, 103, 107, 114, 118, 121, 122, 139, 142, 143, 144, 145, 148, 149, 150, 155, 156, 157, 159, 161, 162, 167, 170, 171, 173, 178, 179, 182, 185, 189, 192, 194, 196, 200, 203, 205, 209, 211, 217, 227, 232, 242, 245, 251, 253, 254, 256, 263, 266, 277, 280, 284, 286], "metric": [1, 21, 93, 102, 103, 105, 120, 140, 189, 192, 199, 223, 227, 240, 284], "log": [1, 23, 40, 54, 55, 57, 58, 102, 106, 107, 110, 112, 113, 139, 142, 145, 152, 178, 179, 181, 183, 189, 190, 192, 196, 197, 206, 210, 251, 257, 259, 261, 279], "dure": [1, 3, 12, 15, 17, 23, 24, 35, 36, 40, 41, 42, 54, 57, 67, 68, 90, 95, 98, 100, 103, 104, 105, 107, 112, 113, 114, 121, 122, 131, 132, 138, 139, 140, 141, 143, 144, 147, 148, 149, 150, 151, 153, 156, 160, 161, 167, 171, 178, 179, 180, 181, 183, 189, 193, 194, 196, 199, 201, 209, 216, 223, 232, 239, 240, 246, 266, 267, 270, 279, 282, 286, 289, 290], "reason": [1, 7, 8, 12, 17, 18, 19, 21, 35, 57, 87, 95, 98, 105, 107, 110, 113, 122, 128, 144, 149, 155, 161, 179, 184, 185, 196, 197, 209, 227, 230, 231, 238, 255, 261, 262, 266, 268, 277, 284], "independ": [1, 54, 112, 113, 162, 163, 167, 182, 214, 275, 283], "let": [1, 2, 4, 5, 7, 8, 12, 13, 14, 15, 17, 19, 20, 21, 23, 24, 28, 36, 40, 47, 48, 49, 51, 54, 56, 57, 73, 80, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 118, 120, 121, 122, 128, 131, 132, 141, 143, 145, 150, 153, 155, 156, 157, 160, 161, 162, 164, 167, 170, 171, 172, 173, 175, 177, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 192, 193, 194, 196, 197, 199, 200, 201, 205, 209, 211, 215, 225, 227, 229, 231, 232, 239, 240, 241, 242, 245, 246, 255, 256, 264, 268, 270, 275, 276, 280, 284], "user": [1, 3, 7, 9, 17, 21, 23, 24, 28, 45, 48, 54, 55, 87, 88, 90, 96, 105, 109, 118, 125, 131, 132, 140, 141, 142, 143, 146, 147, 153, 161, 164, 173, 181, 183, 184, 185, 189, 192, 196, 197, 199, 200, 203, 207, 208, 209, 210, 211, 216, 217, 223, 232, 246, 248, 250, 251, 252, 259, 261, 262, 263, 264, 275, 276, 277, 278, 283, 284], "differ": [1, 3, 4, 7, 8, 12, 13, 14, 15, 16, 17, 20, 21, 23, 24, 28, 35, 40, 44, 51, 53, 54, 56, 57, 65, 78, 80, 87, 88, 90, 93, 96, 98, 100, 103, 104, 105, 106, 107, 112, 113, 115, 131, 138, 139, 140, 141, 143, 145, 146, 147, 149, 152, 153, 155, 157, 160, 161, 162, 164, 167, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 189, 192, 193, 194, 196, 197, 200, 208, 209, 210, 211, 214, 215, 223, 227, 230, 232, 238, 240, 241, 242, 246, 251, 254, 256, 259, 260, 261, 262, 263, 266, 268, 269, 275, 276, 277, 278, 279, 280, 284, 286, 289], "set": [1, 2, 3, 7, 8, 12, 13, 14, 15, 17, 18, 19, 21, 23, 24, 28, 35, 40, 42, 47, 48, 51, 53, 54, 55, 57, 58, 60, 65, 67, 68, 73, 80, 87, 88, 92, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 110, 112, 113, 115, 117, 121, 122, 128, 131, 136, 138, 139, 140, 141, 143, 146, 147, 148, 151, 152, 153, 155, 156, 161, 163, 170, 171, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 189, 190, 193, 194, 196, 197, 199, 200, 201, 203, 208, 209, 211, 215, 216, 223, 227, 228, 231, 239, 241, 243, 245, 251, 257, 259, 275, 277, 279, 280, 282, 283, 284, 289], "sum": [1, 2, 4, 5, 7, 10, 14, 17, 19, 23, 24, 36, 47, 54, 57, 77, 87, 95, 96, 106, 107, 109, 113, 121, 139, 140, 141, 147, 148, 150, 155, 162, 177, 180, 181, 182, 183, 189, 194, 196, 197, 205, 207, 208, 209, 227, 245, 260, 276, 277], "can": [1, 2, 3, 4, 5, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 28, 35, 36, 37, 39, 40, 41, 42, 44, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 65, 73, 78, 80, 87, 88, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 125, 128, 131, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 155, 156, 157, 159, 160, 161, 162, 163, 164, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 192, 193, 194, 196, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 214, 215, 216, 223, 225, 226, 227, 228, 229, 231, 232, 233, 239, 240, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 266, 267, 268, 270, 275, 276, 277, 278, 279, 280, 282, 283, 284, 286, 288, 289, 290], "simpli": [1, 3, 7, 8, 12, 16, 24, 47, 48, 54, 58, 90, 98, 109, 112, 121, 122, 131, 142, 143, 145, 147, 150, 155, 161, 162, 170, 176, 177, 179, 180, 181, 182, 185, 187, 189, 190, 194, 196, 197, 200, 209, 227, 241, 243, 244, 245, 263, 264, 266, 276, 283, 286, 288], "done": [1, 4, 7, 8, 12, 13, 17, 20, 21, 24, 54, 59, 87, 90, 100, 103, 105, 106, 107, 113, 139, 140, 143, 144, 147, 149, 156, 157, 160, 161, 163, 164, 173, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 190, 192, 196, 197, 201, 216, 231, 242, 255, 266, 268, 284, 286], "via": [1, 3, 4, 7, 8, 10, 20, 21, 23, 42, 59, 60, 80, 90, 105, 138, 139, 140, 143, 145, 155, 156, 162, 171, 178, 179, 184, 190, 192, 194, 196, 197, 199, 200, 207, 211, 215, 216, 223, 231, 239, 240, 242, 250, 253, 267, 270, 277, 279, 282, 284], "loss_val": 1, "item": [1, 2, 5, 8, 13, 14, 18, 37, 44, 54, 73, 102, 113, 121, 122, 125, 139, 140, 141, 146, 147, 155, 156, 178, 179, 181, 182, 183, 190, 192, 196, 226, 242, 263], "startswith": [1, 88], "parent": [1, 4, 5, 17, 113, 211], "As": [1, 2, 3, 7, 8, 12, 13, 14, 15, 17, 20, 24, 42, 47, 54, 55, 57, 80, 90, 93, 96, 98, 100, 103, 104, 105, 113, 115, 121, 122, 139, 140, 141, 142, 143, 144, 145, 153, 155, 156, 159, 160, 161, 162, 163, 170, 171, 173, 175, 177, 179, 180, 181, 182, 183, 184, 189, 192, 193, 196, 197, 199, 200, 203, 207, 210, 215, 223, 227, 231, 242, 246, 253, 259, 260, 263, 268, 278, 280, 283], "mani": [1, 2, 7, 8, 13, 17, 18, 19, 21, 23, 35, 36, 40, 41, 54, 56, 57, 70, 74, 80, 87, 95, 96, 98, 100, 103, 105, 107, 108, 109, 113, 115, 117, 121, 140, 143, 145, 149, 155, 157, 162, 164, 167, 172, 173, 179, 181, 182, 185, 193, 194, 196, 197, 200, 225, 226, 227, 229, 242, 246, 253, 259, 277, 284, 288], "other": [1, 7, 8, 9, 12, 13, 14, 17, 21, 24, 35, 36, 39, 44, 48, 51, 53, 54, 57, 58, 60, 61, 62, 73, 74, 80, 87, 88, 93, 95, 96, 98, 103, 105, 107, 109, 110, 112, 113, 121, 122, 125, 131, 133, 135, 139, 141, 142, 143, 146, 147, 149, 151, 152, 153, 155, 156, 159, 160, 161, 162, 163, 167, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 190, 193, 194, 196, 197, 199, 200, 201, 209, 211, 226, 227, 229, 231, 232, 239, 240, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 254, 260, 263, 266, 268, 275, 276, 277, 278, 280, 284, 286], "expect": [1, 4, 5, 7, 8, 13, 14, 17, 49, 51, 54, 56, 80, 90, 93, 95, 96, 98, 100, 103, 104, 105, 109, 110, 112, 113, 114, 122, 128, 142, 145, 149, 153, 156, 162, 163, 170, 171, 177, 178, 179, 180, 181, 182, 184, 192, 196, 197, 199, 210, 216, 223, 225, 226, 227, 232, 239, 242, 254, 256, 260, 263, 266, 282], "ani": [1, 2, 4, 7, 8, 9, 12, 13, 14, 15, 16, 17, 19, 20, 21, 24, 35, 45, 47, 49, 51, 54, 56, 58, 60, 95, 98, 100, 103, 105, 106, 108, 109, 112, 113, 115, 117, 122, 131, 134, 139, 141, 143, 144, 146, 148, 150, 151, 155, 157, 159, 160, 163, 164, 170, 171, 172, 173, 175, 178, 179, 180, 182, 183, 187, 189, 192, 193, 196, 197, 201, 203, 205, 206, 208, 209, 211, 214, 223, 226, 229, 231, 233, 239, 241, 245, 250, 251, 253, 254, 255, 257, 259, 267, 269, 275, 276, 277, 278, 279, 282, 284, 286], "similar": [1, 3, 4, 5, 7, 12, 13, 14, 17, 18, 24, 44, 53, 54, 87, 88, 96, 98, 100, 103, 105, 106, 112, 113, 118, 121, 143, 146, 150, 155, 156, 171, 179, 181, 182, 183, 184, 185, 189, 190, 192, 196, 199, 201, 215, 226, 227, 241, 242, 250, 256, 260, 263, 267, 275, 276, 277, 278, 279, 280], "structur": [1, 5, 7, 8, 12, 17, 22, 23, 24, 36, 41, 42, 44, 53, 54, 57, 58, 90, 95, 98, 100, 104, 105, 106, 110, 115, 122, 138, 148, 151, 157, 160, 163, 164, 171, 172, 177, 179, 183, 190, 192, 194, 199, 240, 253, 255, 262, 278, 288, 290], "format": [1, 7, 15, 21, 24, 45, 102, 113, 117, 122, 133, 138, 139, 140, 142, 160, 161, 177, 178, 181, 183, 186, 189, 190, 192, 197, 199, 203, 216, 217, 225, 227, 262, 275, 277, 278, 284], "make": [1, 4, 5, 7, 8, 12, 13, 15, 17, 23, 24, 36, 40, 41, 45, 47, 48, 49, 51, 54, 55, 56, 58, 59, 60, 62, 73, 80, 93, 95, 98, 100, 102, 103, 105, 107, 108, 109, 111, 112, 113, 114, 117, 118, 122, 125, 128, 131, 133, 138, 139, 140, 141, 143, 145, 146, 147, 148, 149, 153, 155, 156, 160, 161, 162, 163, 170, 171, 173, 176, 177, 179, 180, 181, 182, 183, 185, 190, 192, 193, 194, 196, 197, 199, 200, 201, 207, 209, 210, 211, 215, 216, 225, 226, 227, 231, 233, 240, 241, 242, 250, 251, 253, 256, 262, 264, 266, 268, 275, 276, 277, 278, 280, 288], "possibl": [1, 2, 4, 7, 8, 10, 12, 13, 17, 18, 21, 95, 96, 100, 103, 106, 109, 117, 141, 144, 148, 149, 150, 156, 157, 159, 160, 162, 163, 173, 178, 179, 181, 182, 185, 193, 194, 196, 197, 199, 200, 203, 214, 216, 226, 231, 242, 253, 259, 266, 280, 284, 286], "re": [1, 4, 7, 8, 9, 10, 13, 17, 20, 24, 28, 39, 41, 44, 48, 53, 54, 55, 96, 98, 100, 102, 103, 104, 105, 106, 113, 121, 128, 131, 144, 146, 147, 156, 157, 159, 162, 167, 170, 172, 173, 178, 179, 180, 181, 182, 185, 196, 197, 199, 209, 211, 217, 226, 227, 231, 241, 242, 267, 268, 275, 286, 288], "across": [1, 4, 7, 12, 14, 17, 20, 23, 28, 44, 54, 57, 59, 60, 61, 87, 96, 103, 105, 115, 134, 139, 140, 141, 143, 151, 152, 153, 155, 157, 163, 173, 175, 177, 180, 182, 183, 193, 196, 197, 206, 209, 211, 214, 225, 240, 242, 243, 245, 250, 254, 256, 259, 260, 264], "modal": [1, 173, 225], "complex": [1, 8, 36, 37, 55, 72, 73, 95, 96, 100, 105, 115, 121, 122, 134, 139, 153, 167, 171, 173, 181, 183, 190, 193, 194, 196, 197, 210, 211, 233, 243, 253, 266, 280], "read": [1, 2, 7, 8, 9, 10, 17, 24, 41, 51, 54, 56, 80, 98, 109, 110, 113, 122, 128, 134, 140, 141, 142, 144, 145, 146, 147, 148, 155, 161, 170, 173, 178, 179, 180, 182, 185, 187, 190, 193, 194, 200, 226, 227, 256, 259, 267], "multipl": [1, 4, 7, 12, 13, 14, 17, 19, 20, 21, 23, 24, 44, 49, 53, 54, 58, 59, 60, 61, 65, 70, 87, 93, 95, 96, 100, 102, 103, 104, 105, 109, 113, 121, 134, 139, 141, 143, 144, 145, 146, 147, 153, 155, 157, 161, 163, 173, 175, 178, 179, 181, 182, 183, 185, 189, 190, 192, 194, 196, 197, 200, 203, 209, 215, 226, 227, 232, 241, 242, 243, 255, 259, 264, 266, 268, 279, 280, 284], "entri": [1, 14, 17, 58, 109, 112, 120, 122, 151, 156, 161, 177, 179, 181, 189, 196, 207, 244, 250, 266, 277, 278, 280, 283], "In": [1, 2, 3, 4, 5, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 28, 35, 36, 37, 39, 41, 42, 44, 47, 49, 53, 54, 55, 56, 57, 58, 60, 61, 62, 68, 73, 80, 87, 88, 90, 92, 93, 96, 98, 100, 102, 104, 105, 106, 107, 109, 110, 112, 113, 115, 118, 120, 121, 122, 128, 131, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 160, 161, 162, 163, 164, 167, 168, 170, 171, 172, 173, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 192, 193, 194, 196, 197, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 211, 214, 215, 216, 223, 225, 226, 227, 229, 231, 232, 239, 240, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 263, 264, 266, 267, 268, 269, 270, 275, 276, 277, 278, 279, 280, 282, 283, 284, 286, 289], "word": [1, 8, 13, 14, 17, 48, 54, 80, 87, 96, 100, 105, 106, 108, 110, 111, 122, 138, 146, 147, 155, 168, 170, 171, 177, 183, 185, 197, 256, 262, 276, 278, 280], "allow": [1, 2, 7, 8, 9, 12, 13, 14, 15, 17, 24, 28, 35, 36, 37, 47, 54, 55, 56, 57, 58, 87, 88, 90, 93, 95, 96, 100, 103, 105, 107, 109, 110, 112, 113, 114, 115, 121, 139, 140, 141, 142, 143, 145, 146, 147, 148, 150, 153, 155, 156, 163, 164, 167, 170, 171, 173, 176, 177, 179, 180, 181, 183, 184, 185, 187, 192, 193, 194, 196, 197, 199, 200, 207, 211, 214, 223, 226, 227, 232, 239, 240, 241, 250, 259, 264, 266, 269, 275, 276, 280, 282, 289], "u": [1, 4, 7, 8, 9, 12, 13, 14, 17, 19, 21, 24, 35, 37, 48, 51, 54, 56, 57, 74, 87, 90, 93, 95, 96, 98, 100, 103, 105, 106, 107, 109, 112, 113, 118, 121, 131, 140, 143, 146, 149, 151, 155, 156, 157, 160, 161, 162, 163, 164, 167, 170, 171, 172, 173, 175, 178, 179, 180, 182, 185, 190, 192, 193, 194, 196, 197, 200, 205, 225, 227, 229, 231, 239, 241, 254, 268, 275, 276, 278, 280, 282, 284, 288], "oblivi": [1, 179], "type": [1, 4, 7, 8, 12, 13, 17, 23, 24, 44, 53, 54, 55, 80, 87, 90, 96, 98, 99, 102, 104, 109, 113, 115, 118, 134, 139, 140, 143, 145, 155, 157, 161, 172, 173, 176, 177, 179, 181, 182, 183, 184, 189, 192, 194, 196, 200, 203, 207, 208, 209, 216, 217, 223, 225, 239, 240, 242, 243, 249, 252, 259, 263, 275, 279, 282, 286], "being": [1, 3, 4, 7, 8, 13, 15, 17, 21, 51, 54, 57, 87, 96, 104, 105, 106, 107, 109, 113, 115, 128, 131, 140, 143, 145, 149, 155, 156, 171, 173, 175, 177, 179, 180, 182, 194, 196, 197, 201, 208, 216, 227, 231, 242, 255, 259, 276, 277, 280, 284, 286], "run": [1, 2, 3, 4, 7, 9, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 28, 35, 36, 37, 40, 41, 42, 44, 45, 47, 48, 51, 53, 56, 57, 61, 62, 65, 68, 73, 77, 78, 87, 93, 95, 96, 98, 100, 102, 103, 104, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 125, 128, 131, 132, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 159, 160, 161, 162, 163, 164, 167, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 190, 193, 194, 197, 199, 200, 201, 203, 208, 209, 210, 211, 215, 217, 223, 226, 227, 228, 231, 233, 239, 241, 242, 246, 248, 250, 252, 253, 254, 255, 256, 257, 259, 261, 262, 266, 268, 269, 275, 276, 277, 278, 279, 280, 282, 283, 284, 288, 289, 290], "elementari": [1, 2], "onli": [1, 4, 7, 8, 10, 12, 13, 14, 16, 17, 18, 23, 24, 35, 42, 47, 48, 49, 51, 54, 58, 60, 61, 80, 87, 93, 95, 98, 100, 103, 105, 106, 107, 112, 113, 120, 122, 125, 128, 131, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 159, 160, 164, 167, 170, 171, 172, 173, 175, 176, 177, 178, 179, 182, 183, 184, 185, 189, 190, 192, 193, 194, 196, 197, 199, 200, 201, 205, 206, 207, 211, 214, 223, 226, 227, 232, 239, 242, 243, 244, 246, 250, 253, 254, 256, 259, 260, 263, 267, 268, 275, 276, 277, 278, 279, 280, 282, 283, 286, 288, 289, 290], "those": [1, 4, 7, 8, 10, 13, 14, 17, 21, 35, 42, 47, 93, 95, 103, 106, 112, 113, 118, 131, 142, 143, 144, 146, 157, 160, 170, 175, 176, 177, 183, 185, 190, 192, 196, 197, 202, 203, 209, 223, 226, 227, 241, 250, 253, 255, 259, 268, 276, 284, 286, 288, 289], "keep": [1, 4, 8, 13, 14, 17, 35, 44, 47, 54, 57, 80, 87, 90, 98, 100, 103, 105, 107, 109, 110, 113, 121, 122, 131, 137, 138, 139, 140, 141, 142, 143, 144, 147, 152, 153, 156, 161, 167, 173, 183, 185, 196, 197, 200, 227, 242, 260], "didact": [1, 155], "ll": [1, 4, 7, 8, 12, 13, 19, 21, 24, 36, 37, 39, 44, 53, 54, 55, 82, 83, 84, 85, 93, 95, 96, 98, 100, 102, 103, 104, 106, 113, 115, 131, 141, 146, 147, 153, 155, 156, 157, 159, 162, 167, 170, 172, 178, 179, 180, 182, 185, 190, 196, 197, 200, 201, 205, 206, 214, 227, 252, 257, 268, 275, 277, 279, 284], "displai": [1, 2, 7, 8, 15, 37, 48, 96, 102, 104, 120, 128, 149, 185, 189, 207, 210, 226, 227, 240], "each": [1, 2, 4, 7, 8, 9, 12, 13, 14, 15, 17, 19, 20, 21, 23, 24, 28, 35, 36, 37, 39, 40, 41, 44, 47, 48, 49, 53, 54, 56, 57, 58, 60, 61, 65, 70, 80, 87, 88, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 110, 112, 113, 117, 120, 121, 122, 128, 131, 134, 138, 139, 140, 141, 143, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 159, 160, 162, 163, 164, 167, 170, 171, 172, 173, 175, 177, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 192, 196, 197, 199, 200, 201, 206, 207, 210, 211, 216, 223, 225, 226, 227, 229, 231, 232, 233, 239, 240, 241, 242, 244, 245, 256, 257, 259, 260, 264, 266, 267, 269, 275, 278, 280, 284], "popul": [1, 35, 47, 54, 93, 103, 131, 140, 156, 163, 179, 181, 206, 214, 241, 251, 266], "later": [1, 3, 4, 5, 7, 8, 14, 19, 35, 44, 51, 54, 80, 93, 96, 100, 105, 109, 110, 113, 122, 139, 140, 142, 143, 147, 148, 150, 155, 157, 159, 160, 161, 162, 163, 167, 172, 175, 179, 180, 183, 184, 185, 190, 192, 193, 196, 197, 200, 205, 206, 208, 210, 214, 223, 226, 227, 228, 231, 239, 242, 246, 250, 251, 252, 253, 255, 256, 257, 264, 266, 267, 270, 275, 283], "stage": [1, 17, 20, 100, 113, 175, 207, 208, 214, 269, 279, 289], "start": [1, 5, 7, 8, 14, 20, 21, 23, 24, 28, 35, 39, 47, 48, 54, 55, 57, 58, 59, 60, 65, 80, 93, 95, 96, 99, 100, 103, 104, 105, 108, 109, 113, 114, 115, 118, 131, 132, 134, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 155, 161, 162, 163, 170, 171, 173, 178, 180, 181, 182, 185, 189, 190, 192, 194, 196, 197, 199, 201, 202, 207, 208, 215, 223, 227, 230, 232, 238, 240, 245, 248, 250, 251, 253, 260, 261, 262, 264, 266, 268, 270, 277, 282, 284, 285], "solv": [1, 8, 17, 54, 56, 105, 112, 128, 171, 179, 181, 183, 227, 231, 242, 277], "task": [1, 8, 16, 17, 21, 28, 40, 41, 54, 104, 105, 106, 112, 120, 128, 134, 135, 138, 139, 146, 156, 171, 173, 179, 180, 185, 187, 192, 199, 227, 232, 241, 242, 250, 256, 259, 284], "strategi": [1, 7, 21, 23, 28, 57, 87, 138, 147, 155, 161, 162, 172, 173, 181, 182, 203, 208, 210, 211, 217, 242, 284], "predict": [1, 24, 36, 39, 40, 41, 42, 47, 48, 54, 57, 67, 68, 72, 73, 74, 77, 78, 95, 96, 98, 100, 104, 105, 106, 110, 112, 113, 121, 131, 143, 145, 146, 147, 157, 162, 163, 173, 180, 185, 190, 197, 199, 215, 225, 229, 256, 261, 284], "henc": [1, 17, 21, 44, 47, 53, 87, 139, 144, 153, 164, 167, 173, 176, 179, 181, 183, 197, 215, 227, 256, 284], "our": [1, 2, 3, 4, 5, 7, 8, 10, 12, 13, 15, 20, 21, 24, 35, 36, 37, 39, 40, 41, 44, 45, 47, 48, 49, 53, 54, 55, 56, 57, 58, 60, 65, 67, 68, 70, 72, 73, 74, 80, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 110, 112, 113, 115, 118, 120, 121, 128, 131, 138, 139, 140, 142, 145, 146, 147, 148, 150, 151, 152, 156, 159, 160, 161, 162, 163, 164, 167, 171, 172, 173, 175, 177, 179, 180, 181, 182, 184, 185, 187, 190, 192, 194, 196, 197, 199, 200, 201, 202, 206, 208, 209, 214, 215, 225, 227, 241, 246, 251, 252, 260, 261, 263, 264, 268, 270, 275, 276, 277, 278, 283, 284, 288], "two": [1, 4, 7, 8, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 28, 35, 37, 40, 41, 44, 45, 47, 53, 54, 55, 57, 62, 80, 88, 90, 93, 95, 96, 98, 100, 103, 105, 106, 107, 109, 110, 112, 113, 114, 115, 120, 121, 128, 131, 139, 140, 145, 146, 148, 149, 150, 152, 153, 155, 156, 159, 160, 161, 162, 163, 164, 167, 171, 172, 173, 175, 176, 177, 179, 180, 181, 183, 184, 185, 192, 197, 199, 200, 201, 203, 207, 211, 214, 215, 223, 227, 229, 231, 232, 239, 241, 242, 243, 251, 253, 255, 259, 260, 263, 264, 266, 268, 269, 276, 278, 280, 282, 284, 286], "constructor": [1, 8, 13, 14, 15, 72, 74, 90, 100, 104, 121, 131, 139, 140, 153, 173, 176, 177, 179, 181, 183, 226, 227, 278, 286], "both": [1, 2, 7, 8, 12, 13, 14, 15, 17, 20, 24, 28, 37, 54, 56, 57, 65, 80, 87, 90, 96, 103, 104, 105, 112, 113, 120, 121, 140, 141, 143, 145, 149, 152, 153, 155, 159, 161, 162, 164, 167, 173, 177, 179, 181, 182, 183, 184, 185, 193, 196, 197, 199, 200, 207, 208, 209, 211, 215, 216, 223, 225, 226, 227, 239, 241, 250, 251, 256, 259, 263, 268, 269, 275, 278, 279], "compat": [1, 5, 7, 8, 9, 12, 14, 21, 55, 102, 103, 109, 114, 142, 148, 156, 184, 194, 196, 255, 256, 283, 286], "comput": [1, 3, 4, 5, 7, 8, 12, 14, 15, 16, 19, 20, 21, 24, 28, 40, 44, 48, 51, 53, 54, 56, 57, 58, 62, 65, 67, 68, 70, 73, 77, 78, 80, 88, 90, 95, 96, 98, 100, 103, 104, 105, 106, 107, 108, 113, 115, 117, 121, 131, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 155, 156, 159, 161, 163, 170, 171, 172, 173, 175, 177, 178, 179, 180, 182, 184, 185, 189, 192, 193, 194, 196, 197, 199, 200, 201, 203, 205, 206, 214, 215, 223, 226, 227, 229, 231, 233, 241, 253, 256, 259, 264, 266, 268, 279, 280, 284, 286, 288, 289, 290], "fit": [1, 8, 13, 14, 65, 93, 112, 121, 139, 140, 141, 143, 153, 173, 183, 197, 226, 259], "gener": [1, 7, 12, 13, 14, 17, 20, 21, 23, 28, 42, 47, 48, 54, 56, 58, 77, 78, 87, 90, 95, 96, 98, 102, 103, 104, 105, 107, 109, 112, 113, 114, 121, 123, 125, 128, 133, 135, 138, 143, 144, 146, 148, 153, 155, 157, 161, 162, 163, 164, 167, 168, 170, 171, 172, 173, 177, 179, 181, 183, 184, 185, 186, 187, 189, 190, 192, 194, 196, 197, 199, 200, 203, 208, 209, 214, 215, 216, 223, 232, 241, 244, 251, 255, 256, 257, 259, 262, 266, 267, 268, 269, 270, 275, 276, 277, 279, 280, 282, 284], "crucial": [1, 2, 15, 17, 87, 109, 156, 173, 179, 197, 242], "convert_to_funct": 1, "extract": [1, 7, 54, 57, 80, 102, 105, 128, 131, 138, 146, 147, 159, 161, 172, 179, 185, 194, 196, 199, 201, 207, 214, 229], "convert": [1, 7, 13, 15, 24, 36, 37, 44, 45, 48, 54, 56, 57, 60, 98, 100, 103, 105, 113, 115, 117, 122, 132, 138, 141, 146, 147, 178, 179, 181, 182, 190, 197, 209, 216, 217, 225, 239, 242, 268, 275, 276, 278, 279, 280, 282], "strictli": [1, 103, 179], "speak": [1, 12, 47, 103, 144, 155, 242], "one": [1, 4, 5, 7, 8, 9, 10, 12, 14, 15, 17, 18, 21, 23, 24, 35, 37, 39, 44, 45, 49, 51, 53, 54, 56, 57, 60, 61, 65, 80, 90, 93, 95, 96, 98, 100, 103, 104, 105, 106, 108, 109, 110, 112, 113, 118, 121, 122, 125, 128, 131, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 152, 153, 155, 156, 157, 159, 160, 161, 162, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 189, 190, 192, 193, 196, 197, 199, 201, 208, 209, 210, 211, 227, 229, 231, 232, 242, 243, 245, 253, 254, 255, 256, 259, 260, 263, 266, 267, 268, 275, 276, 277, 279, 280, 284, 288], "perfectli": [1, 17], "howev": [1, 4, 5, 7, 8, 9, 10, 12, 13, 15, 17, 18, 19, 21, 35, 42, 49, 51, 54, 56, 57, 80, 90, 93, 105, 106, 121, 128, 143, 144, 148, 149, 150, 155, 156, 157, 160, 164, 170, 173, 176, 177, 180, 181, 182, 183, 184, 185, 190, 192, 193, 194, 196, 197, 201, 203, 209, 210, 214, 215, 227, 231, 239, 241, 242, 246, 253, 256, 259, 263, 269, 270, 276, 277, 280, 284, 288], "encourag": [1, 8, 24, 100, 180, 185, 192], "usag": [1, 3, 4, 14, 16, 18, 87, 95, 120, 132, 133, 137, 138, 139, 141, 144, 155, 156, 161, 162, 175, 179, 181, 183, 184, 186, 189, 200, 203, 208, 216, 217, 223, 226, 240, 242, 254, 259, 261, 262, 264, 268, 270, 279, 280], "doe": [1, 2, 4, 7, 8, 12, 16, 17, 18, 19, 24, 35, 45, 47, 51, 77, 78, 80, 90, 95, 96, 98, 100, 102, 103, 104, 105, 107, 109, 112, 113, 115, 118, 121, 122, 128, 131, 139, 140, 141, 142, 148, 150, 153, 155, 156, 162, 163, 164, 170, 171, 173, 175, 178, 179, 180, 182, 183, 184, 185, 189, 190, 193, 194, 196, 197, 199, 200, 201, 208, 223, 226, 227, 231, 239, 241, 242, 253, 255, 259, 266, 267, 268, 276, 277, 278, 286, 288], "often": [1, 7, 8, 13, 17, 21, 44, 54, 80, 93, 95, 96, 98, 103, 105, 107, 109, 112, 113, 121, 122, 143, 144, 145, 147, 163, 171, 196, 197, 205, 208, 226, 241, 242, 266, 280, 284], "same": [1, 2, 3, 4, 5, 7, 8, 9, 12, 13, 14, 15, 18, 21, 24, 35, 36, 42, 44, 47, 48, 51, 54, 56, 57, 58, 60, 70, 78, 80, 90, 93, 95, 103, 104, 105, 107, 109, 110, 112, 113, 115, 118, 120, 121, 122, 131, 139, 140, 141, 142, 143, 144, 146, 148, 149, 152, 153, 155, 157, 159, 161, 162, 163, 164, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 192, 194, 196, 197, 200, 208, 209, 223, 226, 227, 232, 234, 235, 236, 237, 239, 242, 245, 250, 251, 254, 255, 259, 260, 263, 264, 267, 269, 275, 276, 277, 278, 280, 284], "usual": [1, 7, 8, 12, 19, 24, 47, 96, 98, 100, 102, 103, 107, 108, 110, 112, 113, 128, 143, 144, 147, 149, 150, 153, 155, 156, 161, 164, 170, 173, 177, 179, 196, 200, 226, 231, 232, 242, 259, 288], "former": [1, 7, 146, 147, 185], "some": [1, 3, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 21, 24, 35, 36, 37, 40, 44, 45, 47, 48, 51, 53, 54, 55, 56, 57, 67, 73, 80, 87, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 118, 120, 121, 122, 131, 138, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 159, 160, 161, 162, 167, 170, 172, 173, 175, 177, 179, 180, 182, 183, 185, 187, 189, 190, 192, 193, 194, 196, 197, 199, 200, 201, 209, 216, 226, 227, 229, 231, 232, 233, 241, 242, 243, 246, 253, 254, 256, 259, 264, 266, 268, 275, 276, 277, 278, 280, 282, 283, 284, 286, 288], "lag": [1, 179], "absolut": [1, 8, 13, 87, 107, 177, 180, 201, 241], "dilut": 1, "move": [1, 7, 10, 15, 29, 30, 31, 32, 33, 34, 36, 41, 44, 47, 51, 53, 81, 94, 95, 107, 113, 139, 140, 141, 143, 152, 153, 156, 158, 170, 171, 173, 176, 180, 182, 183, 188, 189, 191, 195, 199, 207, 208, 209, 215, 227, 241, 242, 271, 274, 276, 289], "averag": [1, 3, 24, 54, 57, 65, 87, 93, 96, 98, 102, 104, 105, 113, 139, 142, 147, 155, 172, 180, 183, 185, 189, 201, 227, 242], "These": [1, 7, 12, 14, 15, 17, 21, 24, 42, 47, 54, 57, 60, 65, 87, 93, 100, 108, 110, 112, 113, 120, 128, 135, 136, 155, 163, 179, 182, 184, 185, 192, 193, 196, 197, 200, 202, 215, 227, 241, 242, 250, 251, 253, 268, 282, 284], "associ": [1, 4, 7, 8, 12, 13, 36, 37, 55, 87, 96, 150, 159, 173, 177, 184, 192, 197, 229, 239, 242, 255, 267, 276, 284, 286], "One": [1, 2, 4, 7, 8, 13, 14, 18, 54, 56, 80, 87, 95, 100, 103, 105, 106, 107, 109, 139, 140, 141, 142, 143, 144, 147, 153, 155, 157, 170, 171, 173, 187, 190, 193, 194, 196, 197, 199, 200, 208, 209, 227, 233, 239, 241, 242, 256, 266, 277, 288], "advantag": [1, 3, 8, 17, 21, 54, 90, 103, 106, 113, 134, 140, 141, 144, 155, 156, 171, 173, 179, 194, 200, 208, 209, 216, 223, 242, 251, 255, 278, 284], "match": [1, 7, 13, 17, 21, 24, 73, 98, 103, 105, 113, 115, 118, 121, 122, 157, 161, 164, 170, 172, 179, 182, 194, 196, 215, 216, 217, 226, 229, 233, 243, 259, 276, 278, 284], "exactli": [1, 7, 12, 13, 15, 21, 35, 47, 56, 57, 98, 109, 112, 113, 115, 121, 156, 161, 171, 196, 197, 284], "current": [1, 4, 7, 8, 12, 13, 14, 15, 17, 18, 24, 36, 41, 44, 54, 57, 67, 80, 87, 96, 105, 113, 121, 128, 139, 140, 142, 144, 145, 146, 147, 155, 156, 159, 163, 164, 172, 173, 175, 177, 179, 180, 181, 182, 183, 184, 185, 189, 196, 197, 200, 209, 215, 232, 242, 250, 253, 263, 266, 275, 277, 278, 280], "configur": [1, 5, 7, 8, 17, 23, 24, 28, 54, 55, 87, 96, 104, 132, 140, 143, 151, 153, 161, 170, 179, 182, 189, 192, 197, 201, 207, 215, 216, 217, 242, 246, 251, 253, 256, 259, 261, 268, 270, 279], "pessimist": [1, 179], "bound": [1, 54, 122, 141, 145, 161, 179, 180, 189, 196, 197, 199, 200, 226, 227, 232, 242, 259, 268], "pai": [1, 13, 49, 54, 142, 242, 254], "attent": [1, 13, 49, 54, 100, 133, 135, 138, 142, 143, 146, 147, 168, 186, 187, 253, 262, 264, 268, 280, 290], "create_target_param": 1, "keyword": [1, 7, 177, 179, 192, 231, 239], "argument": [1, 2, 4, 5, 7, 8, 12, 17, 19, 35, 41, 44, 47, 48, 53, 56, 60, 74, 87, 95, 96, 100, 102, 103, 105, 107, 110, 112, 114, 120, 121, 122, 139, 140, 147, 152, 153, 155, 156, 157, 161, 162, 172, 173, 175, 176, 177, 179, 181, 182, 183, 184, 189, 192, 194, 196, 197, 201, 207, 210, 214, 226, 227, 231, 232, 239, 240, 242, 243, 253, 259, 263, 264, 266, 277, 279, 288, 289], "below": [1, 2, 4, 8, 13, 14, 15, 17, 20, 23, 24, 28, 37, 42, 44, 47, 49, 53, 56, 57, 58, 59, 60, 61, 62, 87, 90, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 125, 131, 141, 142, 143, 145, 148, 149, 151, 152, 153, 155, 156, 159, 161, 164, 170, 176, 179, 180, 181, 182, 183, 184, 189, 190, 192, 194, 196, 197, 199, 200, 201, 206, 207, 208, 209, 210, 214, 215, 217, 223, 226, 227, 231, 232, 246, 249, 250, 253, 254, 255, 256, 259, 260, 266, 268, 269, 270, 276, 277, 278, 279, 280, 282, 283, 286], "tell": [1, 9, 19, 23, 74, 93, 95, 98, 100, 104, 112, 113, 121, 131, 145, 146, 156, 157, 159, 170, 180, 181, 183, 185, 196, 227, 232], "creat": [1, 2, 7, 8, 9, 13, 15, 17, 19, 20, 22, 23, 24, 28, 35, 36, 39, 42, 44, 45, 47, 48, 51, 53, 55, 56, 57, 67, 68, 70, 72, 73, 74, 77, 78, 80, 87, 90, 95, 96, 98, 100, 102, 104, 105, 106, 108, 110, 112, 114, 115, 118, 121, 122, 125, 131, 137, 138, 140, 141, 142, 143, 148, 150, 153, 155, 156, 159, 163, 164, 168, 171, 172, 173, 175, 176, 178, 179, 180, 182, 183, 185, 189, 190, 192, 193, 194, 196, 197, 199, 200, 201, 205, 206, 208, 209, 211, 214, 215, 223, 226, 227, 229, 232, 233, 239, 240, 243, 244, 245, 246, 253, 255, 256, 260, 261, 262, 264, 267, 268, 270, 275, 278, 280, 282, 286, 289], "If": [1, 2, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 28, 35, 36, 39, 41, 44, 47, 48, 49, 51, 53, 54, 55, 57, 58, 60, 65, 67, 80, 87, 93, 95, 98, 100, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 121, 122, 125, 128, 131, 139, 140, 141, 142, 143, 144, 147, 149, 153, 155, 156, 157, 159, 161, 162, 164, 170, 171, 172, 173, 176, 178, 179, 180, 181, 182, 183, 184, 185, 189, 192, 194, 196, 197, 199, 200, 201, 203, 208, 209, 216, 223, 225, 226, 228, 231, 232, 239, 240, 241, 242, 243, 245, 246, 253, 254, 259, 263, 266, 267, 268, 269, 275, 276, 278, 279, 280, 283, 284, 286, 288, 289], "fals": [1, 2, 4, 5, 8, 9, 13, 14, 17, 24, 37, 42, 47, 60, 67, 68, 87, 88, 95, 102, 109, 121, 122, 128, 131, 139, 140, 141, 143, 149, 159, 161, 164, 170, 171, 173, 178, 181, 182, 190, 192, 194, 196, 205, 215, 216, 217, 226, 239, 242, 243, 249, 256, 259, 260, 263, 266, 269, 276, 277, 279, 282, 283, 284, 289], "see": [1, 2, 3, 4, 5, 7, 8, 10, 12, 13, 14, 17, 19, 21, 23, 24, 28, 36, 40, 41, 44, 48, 49, 51, 53, 54, 55, 56, 57, 60, 65, 80, 87, 88, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 120, 122, 131, 139, 140, 141, 143, 145, 146, 147, 148, 149, 150, 153, 155, 156, 157, 159, 160, 161, 163, 164, 167, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 189, 190, 192, 193, 194, 196, 197, 199, 200, 201, 203, 206, 209, 210, 211, 214, 215, 218, 223, 225, 226, 227, 232, 239, 240, 241, 242, 243, 244, 245, 250, 251, 252, 254, 255, 257, 259, 263, 264, 266, 268, 275, 277, 278, 279, 282, 283, 284, 286, 288, 289, 290], "target_actor_network_param": 1, "attribut": [1, 8, 14, 17, 35, 47, 51, 58, 87, 90, 100, 112, 113, 118, 131, 144, 156, 159, 164, 171, 175, 177, 196, 203, 226, 245, 256, 261, 280], "still": [1, 7, 8, 12, 13, 14, 15, 17, 18, 21, 23, 24, 51, 57, 80, 93, 95, 103, 105, 109, 113, 120, 122, 140, 146, 147, 148, 153, 155, 156, 159, 160, 164, 170, 173, 183, 194, 196, 197, 208, 209, 211, 215, 241, 242, 254, 260, 263, 264, 268, 269, 275, 277, 279, 284], "access": [1, 7, 8, 13, 17, 21, 24, 36, 37, 55, 73, 80, 93, 95, 98, 100, 103, 104, 105, 110, 113, 121, 122, 131, 140, 144, 151, 155, 171, 173, 178, 180, 182, 192, 193, 196, 201, 208, 211, 223, 241, 245, 250, 267, 275, 276, 278, 279, 282, 284], "just": [1, 2, 3, 4, 7, 8, 12, 13, 17, 19, 20, 21, 24, 35, 48, 49, 51, 54, 55, 56, 57, 58, 61, 77, 78, 90, 93, 95, 96, 98, 100, 103, 105, 106, 107, 109, 110, 112, 113, 122, 128, 131, 139, 140, 143, 145, 146, 147, 153, 156, 161, 162, 167, 170, 171, 173, 176, 177, 178, 179, 180, 181, 182, 183, 190, 192, 193, 194, 196, 197, 199, 202, 209, 211, 216, 227, 228, 229, 241, 242, 245, 246, 259, 268, 269, 277, 284], "detach": [1, 2, 8, 14, 35, 95, 103, 109, 142, 167, 172, 264], "version": [1, 3, 4, 7, 8, 12, 13, 15, 17, 96, 98, 100, 103, 104, 113, 114, 115, 117, 118, 139, 140, 144, 155, 156, 157, 159, 162, 164, 171, 173, 175, 176, 177, 178, 179, 187, 189, 190, 192, 197, 199, 200, 201, 214, 215, 216, 217, 226, 227, 231, 241, 246, 251, 255, 266, 267, 268, 270, 275, 283, 289], "q": [1, 47, 54, 135, 138, 143, 163, 184, 192, 217, 284], "base": [1, 7, 8, 13, 14, 17, 20, 21, 23, 28, 37, 48, 54, 62, 80, 90, 93, 95, 96, 100, 104, 105, 107, 115, 120, 122, 134, 135, 138, 139, 140, 141, 142, 145, 146, 148, 156, 163, 173, 175, 176, 177, 180, 182, 185, 189, 190, 192, 193, 196, 197, 199, 207, 215, 226, 239, 241, 242, 251, 255, 256, 264, 269, 277, 279, 282, 283, 284, 290], "empir": [1, 167, 179], "bootstrap": [1, 156], "td": 1, "0": [1, 2, 3, 4, 5, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 56, 57, 60, 68, 69, 73, 75, 77, 78, 79, 80, 87, 90, 91, 93, 95, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 128, 131, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 157, 159, 160, 161, 162, 163, 164, 167, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 197, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 211, 214, 215, 216, 217, 223, 227, 228, 229, 231, 232, 233, 238, 239, 241, 242, 246, 248, 249, 252, 253, 254, 255, 256, 257, 259, 260, 262, 263, 264, 266, 267, 268, 269, 275, 276, 278, 279, 280, 283, 284, 285, 288, 289], "low": [1, 4, 7, 8, 17, 19, 28, 54, 57, 73, 87, 100, 107, 121, 133, 138, 146, 189, 196, 200, 216, 217, 241, 282], "varianc": [1, 8, 24, 102, 179], "bia": [1, 2, 7, 8, 24, 47, 51, 73, 107, 113, 121, 122, 131, 139, 148, 149, 156, 162, 177, 179, 183, 184, 200, 239, 263, 279, 280, 284], "mean": [1, 2, 4, 7, 8, 13, 15, 17, 24, 40, 51, 54, 56, 57, 73, 80, 87, 90, 95, 98, 100, 102, 103, 105, 106, 107, 109, 112, 113, 120, 121, 122, 131, 140, 143, 145, 146, 149, 153, 155, 164, 171, 173, 178, 179, 180, 182, 183, 185, 189, 190, 192, 196, 197, 201, 203, 205, 209, 227, 231, 232, 241, 242, 246, 256, 259, 267, 275, 277, 280, 283, 288, 289], "obtain": [1, 28, 35, 40, 54, 73, 93, 113, 121, 145, 146, 149, 155, 162, 172, 179, 180, 182, 189, 192, 199, 232, 255, 267], "reward": [1, 17, 156, 163, 179, 180, 181, 183], "noth": [1, 80, 98, 113, 150, 173, 183, 189, 263], "els": [1, 5, 7, 9, 12, 14, 23, 24, 51, 54, 93, 95, 102, 112, 113, 114, 131, 140, 141, 155, 175, 176, 177, 181, 182, 183, 190, 192, 194, 196, 207, 211, 226, 227, 256, 260, 264, 269, 279, 284], "mont": 1, "carlo": 1, "1": [1, 2, 3, 4, 5, 7, 8, 9, 12, 14, 15, 17, 18, 19, 20, 21, 23, 28, 35, 36, 37, 39, 45, 47, 51, 54, 57, 58, 60, 68, 73, 80, 91, 93, 95, 96, 98, 100, 102, 103, 105, 106, 107, 109, 110, 112, 113, 114, 117, 118, 120, 121, 122, 125, 128, 131, 139, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 155, 157, 159, 160, 161, 162, 163, 164, 168, 170, 171, 172, 177, 178, 179, 180, 181, 182, 183, 184, 192, 194, 197, 200, 203, 207, 208, 209, 210, 211, 215, 216, 217, 223, 226, 231, 233, 240, 242, 249, 250, 255, 256, 259, 260, 264, 266, 268, 269, 270, 275, 276, 277, 278, 279, 280, 283, 284, 286, 289, 290], "case": [1, 2, 3, 4, 7, 8, 9, 12, 13, 14, 16, 17, 20, 21, 35, 42, 47, 54, 56, 65, 73, 80, 87, 90, 95, 96, 102, 103, 105, 106, 107, 109, 110, 112, 113, 118, 121, 122, 134, 139, 140, 141, 143, 144, 145, 148, 149, 150, 155, 156, 157, 159, 161, 162, 164, 167, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 189, 192, 194, 196, 197, 199, 200, 209, 225, 226, 227, 232, 233, 239, 241, 245, 246, 251, 253, 254, 256, 259, 263, 264, 268, 275, 277, 278, 279, 280, 282, 283, 284, 286, 288, 289], "whole": [1, 3, 48, 51, 100, 113, 122, 138, 142, 155, 177, 179, 185, 197, 246, 276, 288], "sequenc": [1, 7, 8, 15, 44, 53, 54, 72, 73, 100, 106, 108, 111, 112, 121, 122, 138, 146, 147, 156, 168, 171, 179, 184, 186, 193, 200, 205, 206, 211, 214, 226, 232, 242, 262, 264, 268, 280, 288, 290], "upcom": 1, "intermedi": [1, 81, 95, 100, 103, 131, 134, 151, 159, 161, 162, 163, 168, 170, 173, 186, 195, 200, 201, 227, 233, 284], "lambda": [1, 7, 113, 148, 178, 181, 196, 226, 227, 284], "also": [1, 2, 4, 5, 7, 8, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 28, 35, 41, 44, 47, 51, 53, 54, 56, 57, 58, 59, 65, 73, 80, 87, 90, 93, 95, 96, 98, 100, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 120, 121, 122, 131, 139, 140, 142, 143, 144, 145, 146, 147, 149, 150, 153, 155, 156, 159, 161, 162, 170, 171, 172, 173, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 189, 192, 194, 196, 197, 199, 200, 201, 203, 206, 208, 209, 210, 211, 214, 215, 216, 217, 223, 226, 227, 228, 231, 232, 239, 240, 241, 242, 244, 245, 246, 250, 251, 252, 254, 255, 257, 259, 260, 263, 264, 266, 270, 275, 276, 277, 278, 283, 284, 286, 288, 289], "compromis": 1, "easi": [1, 2, 7, 8, 28, 37, 48, 49, 56, 73, 95, 96, 103, 105, 107, 140, 141, 143, 145, 155, 162, 167, 171, 175, 179, 189, 193, 196, 197, 216, 227, 241, 256, 269, 284, 288], "valueestim": 1, "enum": 1, "pointer": [1, 7, 8, 10, 182], "defin": [1, 2, 7, 9, 15, 17, 18, 19, 20, 21, 23, 35, 40, 41, 42, 45, 47, 49, 57, 66, 69, 70, 72, 73, 74, 80, 90, 93, 95, 100, 102, 104, 106, 107, 112, 113, 115, 118, 122, 132, 139, 140, 144, 146, 148, 151, 155, 156, 157, 160, 163, 167, 170, 172, 173, 180, 181, 182, 184, 187, 189, 190, 193, 194, 196, 200, 201, 205, 208, 209, 215, 216, 230, 231, 232, 238, 239, 246, 248, 252, 254, 255, 256, 260, 261, 262, 266, 275, 282, 283, 284], "default": [1, 3, 4, 5, 7, 8, 12, 13, 14, 18, 21, 24, 28, 35, 40, 44, 47, 49, 54, 56, 57, 60, 67, 68, 87, 98, 100, 102, 103, 107, 109, 114, 118, 121, 128, 131, 138, 139, 140, 141, 142, 143, 146, 155, 156, 157, 159, 161, 164, 170, 173, 176, 178, 181, 182, 183, 189, 190, 192, 194, 196, 197, 200, 203, 208, 209, 215, 216, 223, 227, 230, 231, 232, 238, 240, 242, 245, 246, 249, 250, 251, 254, 256, 259, 260, 262, 263, 264, 266, 269, 278, 279, 282, 283, 286, 289], "here": [1, 2, 3, 4, 7, 8, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 28, 37, 40, 41, 44, 45, 48, 51, 53, 55, 56, 57, 58, 60, 74, 80, 86, 87, 90, 93, 95, 96, 98, 100, 103, 104, 105, 107, 109, 110, 112, 113, 120, 121, 122, 125, 128, 131, 139, 140, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 155, 156, 157, 159, 160, 161, 162, 163, 164, 167, 170, 171, 172, 173, 177, 179, 180, 182, 183, 184, 185, 189, 190, 193, 194, 196, 197, 199, 200, 206, 209, 210, 215, 216, 226, 227, 228, 231, 232, 242, 246, 251, 253, 256, 259, 263, 270, 275, 277, 278, 279, 280, 282, 284], "take": [1, 2, 3, 4, 7, 8, 9, 12, 14, 15, 17, 18, 19, 20, 21, 24, 36, 37, 44, 47, 48, 51, 53, 54, 55, 56, 57, 73, 80, 87, 90, 95, 96, 98, 100, 102, 103, 104, 105, 107, 109, 110, 112, 113, 118, 121, 122, 128, 142, 143, 144, 145, 146, 147, 148, 150, 153, 155, 160, 162, 163, 170, 173, 178, 179, 180, 181, 182, 183, 185, 189, 190, 192, 194, 196, 197, 199, 200, 208, 209, 215, 216, 217, 227, 228, 229, 232, 239, 241, 242, 243, 244, 245, 246, 251, 256, 259, 264, 268, 270, 275, 278, 280, 282, 284, 288], "simplest": [1, 8, 35, 51, 95, 103, 107, 156, 179, 185, 242], "show": [1, 7, 13, 14, 19, 21, 23, 24, 28, 37, 48, 56, 57, 65, 80, 87, 88, 90, 93, 95, 96, 98, 100, 103, 104, 113, 118, 120, 139, 142, 145, 146, 147, 149, 150, 153, 156, 161, 164, 173, 176, 178, 180, 181, 183, 189, 190, 192, 194, 196, 197, 200, 201, 206, 207, 208, 209, 211, 216, 217, 223, 226, 227, 232, 240, 241, 242, 246, 255, 256, 259, 260, 263, 275, 284], "chang": [1, 2, 7, 8, 9, 13, 14, 15, 17, 24, 28, 35, 44, 47, 53, 55, 56, 57, 58, 60, 87, 88, 90, 93, 95, 96, 98, 99, 104, 105, 106, 108, 109, 110, 115, 122, 131, 132, 138, 139, 142, 143, 145, 146, 148, 151, 152, 155, 156, 159, 161, 162, 163, 170, 171, 173, 176, 177, 181, 189, 192, 194, 196, 197, 200, 201, 203, 206, 207, 208, 209, 214, 216, 226, 227, 230, 238, 239, 240, 242, 243, 249, 254, 255, 256, 257, 259, 262, 268, 269, 277, 279, 280, 282, 283, 289], "instruct": [1, 8, 24, 28, 39, 96, 99, 102, 104, 146, 147, 156, 159, 175, 177, 179, 181, 183, 185, 203, 215, 216, 223, 225, 242, 259, 261, 289], "queri": [1, 17, 54, 98, 103, 122, 142, 182, 184, 199, 200, 264, 280], "correspond": [1, 2, 3, 4, 7, 8, 12, 13, 15, 17, 18, 36, 37, 41, 47, 54, 60, 87, 95, 96, 100, 102, 107, 110, 120, 122, 139, 144, 145, 148, 161, 170, 175, 177, 179, 182, 185, 187, 189, 190, 192, 194, 196, 197, 199, 200, 209, 225, 231, 232, 242, 259, 261, 267, 278, 283], "make_value_estim": 1, "central": [1, 12, 80, 95, 103, 104, 110, 112, 151, 245], "quit": [1, 8, 21, 54, 80, 144, 155, 170, 179, 183, 196, 197, 208, 211, 214, 227, 241, 275, 284], "weight": [1, 2, 3, 7, 8, 15, 16, 17, 21, 24, 28, 35, 36, 47, 48, 54, 67, 68, 71, 73, 74, 75, 77, 78, 80, 95, 98, 100, 103, 104, 105, 107, 108, 110, 113, 122, 128, 131, 137, 138, 139, 146, 148, 149, 151, 156, 157, 161, 162, 164, 170, 171, 172, 177, 179, 180, 183, 185, 189, 192, 193, 197, 200, 208, 215, 229, 239, 244, 245, 249, 256, 262, 263, 268, 279, 282, 284, 286], "when": [1, 4, 7, 8, 12, 13, 14, 15, 17, 18, 19, 21, 23, 35, 37, 40, 42, 44, 47, 48, 49, 51, 53, 54, 55, 57, 58, 60, 65, 80, 87, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 109, 112, 113, 114, 117, 118, 120, 121, 122, 131, 137, 138, 139, 140, 141, 142, 144, 145, 147, 148, 149, 152, 153, 155, 156, 159, 160, 161, 163, 164, 167, 170, 171, 173, 176, 177, 179, 180, 181, 183, 184, 185, 189, 192, 194, 196, 197, 199, 200, 201, 203, 206, 207, 209, 210, 211, 215, 217, 223, 226, 227, 229, 231, 232, 233, 239, 241, 242, 243, 245, 250, 251, 253, 254, 256, 259, 260, 261, 266, 268, 275, 278, 279, 280, 282, 283, 284, 286, 289], "must": [1, 2, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 36, 37, 54, 57, 80, 90, 95, 96, 103, 106, 112, 117, 118, 122, 140, 153, 155, 156, 157, 159, 173, 179, 182, 189, 192, 194, 196, 197, 207, 210, 231, 233, 239, 242, 253, 263, 266, 267, 275, 276, 278, 280, 286, 288], "sure": [1, 7, 8, 12, 13, 14, 17, 24, 42, 56, 62, 93, 98, 102, 105, 106, 112, 118, 122, 131, 139, 143, 148, 153, 155, 156, 160, 173, 179, 181, 192, 197, 201, 207, 216, 225, 226, 231, 240, 242, 250, 251, 253, 276, 278, 288], "out": [1, 2, 4, 7, 8, 9, 12, 13, 14, 17, 18, 19, 21, 28, 35, 39, 40, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 63, 64, 65, 80, 82, 83, 84, 85, 86, 88, 90, 93, 95, 96, 98, 100, 103, 105, 106, 108, 110, 113, 117, 120, 131, 137, 138, 139, 141, 142, 143, 144, 145, 146, 150, 151, 153, 155, 156, 157, 160, 161, 162, 170, 173, 176, 177, 178, 179, 181, 182, 183, 185, 189, 190, 192, 196, 197, 200, 201, 202, 203, 204, 211, 217, 219, 220, 221, 222, 224, 225, 230, 232, 238, 239, 242, 251, 254, 255, 256, 259, 261, 262, 264, 266, 272, 273, 275, 276, 277, 278, 280, 281, 282, 284, 288, 289, 290], "graph": [1, 7, 13, 17, 19, 51, 54, 67, 70, 73, 77, 78, 87, 90, 92, 95, 106, 108, 114, 117, 118, 121, 131, 132, 138, 144, 146, 150, 160, 161, 162, 164, 182, 183, 189, 190, 192, 193, 200, 201, 203, 216, 217, 229, 240, 246, 250, 251, 255, 257, 263, 269, 270, 289], "otherwis": [1, 4, 12, 13, 24, 36, 41, 54, 60, 67, 80, 87, 90, 103, 113, 121, 122, 128, 131, 139, 144, 150, 153, 156, 161, 162, 164, 170, 179, 180, 182, 194, 197, 201, 207, 241, 254, 259, 284, 288, 289], "mix": [1, 12, 18, 65, 120, 164, 216, 230, 238, 261, 262, 282], "For": [1, 2, 4, 5, 7, 8, 9, 10, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 35, 40, 41, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 60, 67, 68, 73, 80, 87, 88, 93, 96, 100, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 115, 121, 122, 125, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 155, 156, 157, 160, 161, 163, 164, 171, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 189, 192, 193, 194, 196, 197, 199, 200, 201, 203, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 223, 225, 226, 227, 229, 231, 233, 239, 240, 241, 242, 243, 244, 245, 246, 252, 253, 254, 257, 259, 260, 263, 264, 266, 267, 268, 269, 275, 276, 277, 278, 280, 282, 283, 284, 286, 289], "hold_out_param": 1, "now": [1, 2, 7, 8, 9, 12, 13, 14, 15, 18, 19, 20, 21, 23, 28, 40, 41, 47, 48, 49, 51, 54, 55, 56, 57, 60, 80, 90, 93, 94, 95, 96, 102, 103, 105, 107, 109, 112, 113, 115, 118, 121, 128, 131, 138, 140, 143, 144, 145, 146, 148, 149, 150, 153, 155, 156, 160, 161, 162, 163, 167, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 187, 189, 190, 192, 193, 194, 196, 197, 199, 200, 201, 206, 208, 209, 228, 229, 239, 240, 241, 244, 251, 263, 264, 268, 270, 275, 276, 280, 282, 283, 284, 286, 288], "reli": [1, 3, 4, 8, 12, 17, 42, 54, 95, 112, 115, 144, 163, 170, 173, 177, 179, 196, 203, 207, 242, 270, 277, 279], "miss": [1, 56, 122, 148, 153, 156, 189, 194, 226, 241, 243, 259, 264, 276], "glue": [1, 183], "cost": [1, 7, 17, 54, 105, 107, 120, 139, 140, 143, 144, 148, 167, 189, 196, 208, 228, 242, 254, 255], "deliv": [1, 203, 216, 253], "most": [1, 2, 7, 14, 17, 21, 35, 39, 47, 54, 56, 57, 80, 93, 95, 96, 98, 100, 103, 107, 109, 110, 113, 120, 121, 122, 128, 134, 139, 143, 144, 145, 147, 149, 150, 155, 160, 161, 163, 164, 170, 173, 178, 179, 181, 182, 183, 184, 185, 189, 192, 194, 196, 197, 200, 208, 216, 217, 225, 232, 239, 241, 242, 246, 250, 254, 256, 259, 277, 278, 279, 284], "first": [1, 2, 3, 4, 5, 7, 8, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 28, 39, 42, 45, 48, 49, 54, 55, 56, 57, 58, 60, 65, 73, 74, 80, 87, 88, 90, 93, 95, 98, 100, 103, 105, 107, 109, 110, 112, 113, 118, 120, 121, 122, 131, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 159, 160, 161, 162, 167, 170, 172, 173, 175, 176, 177, 179, 180, 181, 182, 183, 185, 189, 192, 193, 194, 196, 197, 199, 200, 201, 207, 208, 209, 211, 215, 217, 226, 227, 229, 231, 232, 239, 242, 246, 251, 253, 254, 255, 256, 259, 263, 264, 266, 268, 270, 275, 277, 278, 280, 284, 288], "taken": [1, 8, 12, 17, 24, 87, 88, 100, 156, 170, 179, 192, 196, 233, 255, 268, 282], "care": [1, 4, 7, 17, 80, 93, 95, 105, 150, 155, 173, 179, 183, 200, 208, 227, 228, 241, 275], "condit": [1, 17, 54, 60, 103, 110, 114, 139, 155, 171, 173, 194, 196, 283, 286], "remaind": [1, 98, 159], "cheetah": 1, "goal": [1, 8, 17, 18, 48, 54, 57, 65, 80, 90, 105, 144, 145, 155, 156, 160, 179, 181, 183, 266, 275], "half": [1, 12, 21, 128, 175, 226, 260, 284], "fast": [1, 7, 8, 21, 23, 54, 95, 113, 139, 143, 153, 167, 173, 179, 184, 192, 197, 200, 241, 266, 268, 284, 290], "dm_control": 1, "gym": [1, 17, 135, 138, 156, 163, 179, 180, 181, 183, 200], "env": [1, 23, 142, 152, 155, 156, 179, 180, 181, 183, 227, 241, 256, 264, 266, 289], "gymenv": [1, 179], "halfcheetah": 1, "v4": 1, "dmcontrolenv": 1, "By": [1, 12, 21, 24, 35, 44, 47, 67, 68, 87, 93, 95, 103, 109, 112, 113, 114, 121, 131, 140, 143, 145, 155, 157, 159, 160, 161, 170, 177, 180, 189, 193, 196, 201, 208, 209, 214, 223, 229, 232, 242, 246, 250, 251, 253, 256, 259, 266, 269, 276, 278, 280, 284, 289], "disabl": [1, 9, 14, 18, 131, 139, 140, 148, 163, 167, 178, 182, 184, 189, 194, 209, 226, 250, 259, 268, 275, 276, 277, 278, 283, 289], "render": [1, 8, 87, 96, 102, 163, 173, 179], "easier": [1, 21, 23, 28, 55, 56, 106, 113, 139, 145, 161, 170, 181, 185, 190, 209, 227, 241, 253, 268, 275, 278, 284, 288], "than": [1, 3, 4, 7, 8, 12, 13, 14, 15, 16, 17, 21, 24, 48, 53, 54, 55, 57, 58, 65, 72, 74, 80, 87, 90, 95, 98, 100, 103, 105, 106, 107, 109, 112, 113, 115, 121, 122, 128, 138, 139, 140, 142, 145, 147, 149, 152, 153, 155, 157, 161, 162, 163, 167, 170, 171, 172, 173, 178, 179, 180, 181, 189, 190, 192, 193, 194, 197, 199, 200, 203, 227, 231, 242, 243, 250, 256, 259, 261, 266, 268, 275, 280, 284, 289], "imag": [1, 24, 36, 37, 39, 45, 47, 51, 54, 56, 57, 62, 80, 87, 93, 96, 98, 100, 103, 104, 105, 113, 132, 133, 135, 136, 138, 143, 148, 157, 163, 164, 170, 172, 177, 180, 187, 189, 190, 197, 199, 203, 211, 225, 229, 240, 243, 244, 261, 280, 282, 289], "focu": [1, 4, 8, 13, 23, 96, 105, 107, 131, 140, 143, 144, 179, 181, 183, 185, 196, 217, 268, 276], "pass": [1, 2, 3, 4, 8, 10, 12, 13, 15, 16, 17, 18, 19, 20, 24, 35, 36, 37, 40, 41, 42, 47, 48, 54, 56, 57, 58, 61, 67, 68, 70, 77, 78, 87, 90, 93, 95, 96, 98, 100, 103, 104, 105, 107, 109, 110, 113, 114, 121, 122, 131, 132, 138, 139, 140, 143, 144, 145, 146, 149, 150, 151, 153, 155, 156, 157, 159, 160, 163, 164, 167, 171, 172, 175, 177, 179, 180, 181, 182, 183, 185, 186, 189, 192, 194, 196, 197, 200, 201, 206, 207, 209, 210, 214, 215, 226, 227, 231, 232, 233, 239, 242, 245, 260, 262, 263, 264, 268, 275, 278, 286], "pixel": [1, 36, 45, 48, 80, 100, 103, 105, 156, 164, 187, 192, 256], "from_pixel": 1, "true": [1, 2, 4, 5, 7, 8, 9, 13, 14, 15, 18, 19, 24, 28, 35, 37, 40, 42, 47, 51, 54, 56, 67, 68, 87, 93, 95, 98, 102, 103, 109, 113, 114, 115, 117, 120, 121, 122, 128, 131, 139, 140, 141, 142, 145, 148, 149, 150, 153, 155, 156, 159, 161, 164, 171, 177, 178, 181, 182, 183, 184, 189, 190, 192, 194, 196, 199, 200, 207, 208, 209, 216, 217, 227, 232, 239, 243, 245, 246, 249, 253, 259, 260, 263, 264, 266, 269, 276, 277, 278, 279, 282, 283, 284, 289], "pixels_onli": 1, "make_env": 1, "helper": [1, 7, 12, 20, 21, 51, 56, 60, 96, 102, 104, 105, 106, 114, 139, 140, 145, 146, 147, 155, 156, 180, 181, 182, 183, 185, 187, 190, 192, 199, 205, 206, 232, 256, 284], "either": [1, 2, 4, 7, 8, 12, 19, 24, 48, 54, 78, 93, 104, 105, 113, 115, 122, 128, 140, 143, 153, 156, 164, 177, 180, 181, 182, 189, 194, 196, 200, 216, 223, 226, 232, 239, 242, 253, 278, 280, 283, 284], "backend": [1, 7, 8, 9, 10, 14, 17, 23, 28, 58, 60, 132, 133, 134, 137, 138, 145, 148, 152, 153, 156, 164, 178, 179, 186, 189, 194, 196, 197, 203, 207, 215, 223, 226, 252, 256, 261, 262, 264, 270, 279, 283], "consid": [1, 4, 8, 13, 14, 17, 35, 42, 54, 73, 80, 87, 121, 131, 139, 141, 150, 153, 155, 164, 167, 170, 171, 173, 176, 181, 185, 189, 194, 196, 197, 199, 208, 231, 232, 233, 251, 266, 275, 276, 277, 279, 288], "abov": [1, 3, 4, 7, 8, 10, 12, 13, 14, 17, 18, 20, 24, 47, 48, 54, 56, 57, 70, 72, 73, 80, 87, 95, 96, 98, 100, 102, 103, 105, 106, 107, 109, 110, 112, 113, 121, 131, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 155, 159, 161, 162, 163, 164, 167, 170, 171, 172, 173, 175, 177, 179, 181, 182, 183, 184, 189, 192, 194, 196, 197, 199, 208, 209, 210, 211, 215, 216, 223, 225, 227, 231, 232, 239, 240, 250, 256, 259, 263, 264, 266, 268, 270, 275, 276, 277, 278, 279, 283], "dm": 1, "want": [1, 2, 4, 7, 8, 9, 10, 12, 13, 15, 17, 18, 20, 24, 28, 35, 36, 37, 40, 42, 47, 48, 51, 54, 56, 57, 65, 67, 68, 72, 80, 90, 93, 95, 96, 98, 100, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 121, 122, 128, 131, 142, 143, 144, 145, 155, 156, 157, 159, 160, 162, 164, 167, 171, 173, 175, 177, 178, 179, 182, 184, 185, 187, 192, 193, 194, 196, 197, 199, 200, 201, 209, 210, 223, 226, 227, 231, 239, 241, 243, 253, 255, 275, 277, 282, 288, 290], "modifi": [1, 3, 8, 13, 14, 17, 24, 41, 45, 47, 48, 57, 80, 105, 106, 143, 146, 155, 160, 161, 176, 177, 179, 181, 185, 196, 200, 201, 239, 254, 256, 263, 264], "represent": [1, 13, 17, 47, 57, 90, 96, 100, 102, 105, 107, 110, 112, 114, 115, 117, 132, 145, 160, 163, 185, 189, 190, 193, 196, 197, 200, 227, 239, 241, 255, 280], "more": [1, 2, 3, 4, 7, 8, 10, 12, 13, 14, 17, 18, 19, 21, 24, 37, 39, 40, 41, 44, 47, 48, 49, 53, 54, 55, 56, 57, 58, 60, 61, 65, 72, 80, 90, 96, 98, 100, 102, 104, 105, 106, 107, 109, 110, 112, 113, 115, 117, 120, 121, 122, 128, 131, 133, 134, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 159, 160, 163, 167, 170, 171, 173, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 190, 192, 193, 194, 196, 197, 199, 200, 201, 203, 207, 209, 210, 211, 215, 216, 217, 223, 225, 231, 239, 241, 242, 246, 251, 253, 254, 255, 256, 257, 259, 260, 262, 263, 266, 268, 275, 276, 277, 278, 280, 282, 284, 288, 289, 290], "friendli": [1, 18, 202, 226], "append": [1, 9, 12, 17, 20, 23, 24, 54, 103, 120, 122, 140, 155, 177, 179, 181, 182, 183, 185, 190, 227, 259, 284], "special": [1, 13, 23, 44, 53, 98, 100, 107, 109, 112, 113, 118, 135, 144, 156, 164, 176, 177, 189, 192, 209, 239, 242, 256, 280, 282, 286], "torchr": 1, "transformedenv": [1, 17, 179], "common": [1, 8, 12, 13, 17, 19, 21, 24, 40, 41, 48, 54, 56, 65, 87, 98, 103, 105, 107, 109, 112, 114, 122, 128, 132, 138, 143, 153, 160, 163, 171, 173, 177, 178, 179, 184, 192, 196, 197, 199, 227, 228, 241, 242, 243, 246, 252, 261, 277, 280, 284], "rescal": [1, 56, 199, 268], "heurist": [1, 87, 215, 253, 266], "multipli": [1, 4, 7, 15, 24, 53, 54, 95, 96, 98, 103, 113, 185, 193, 227, 241, 252], "5": [1, 2, 3, 7, 8, 14, 21, 37, 39, 49, 51, 52, 54, 57, 70, 87, 90, 93, 98, 100, 102, 104, 107, 110, 111, 112, 113, 117, 120, 121, 122, 139, 140, 149, 153, 155, 161, 164, 177, 178, 181, 182, 183, 192, 196, 197, 199, 200, 203, 205, 211, 215, 216, 223, 243, 246, 249, 266, 270, 277, 283, 284, 286, 288], "interfac": [1, 4, 7, 8, 17, 18, 54, 103, 113, 145, 152, 155, 179, 192, 197, 216, 223, 256, 269], "between": [1, 7, 8, 12, 14, 15, 17, 20, 21, 24, 36, 44, 51, 53, 54, 70, 78, 80, 87, 88, 90, 93, 95, 98, 100, 103, 105, 106, 107, 110, 112, 113, 121, 131, 136, 138, 139, 141, 143, 145, 155, 156, 160, 164, 167, 173, 175, 177, 180, 182, 183, 184, 185, 190, 192, 194, 196, 197, 199, 200, 201, 208, 210, 226, 227, 228, 232, 242, 246, 256, 257, 260, 264, 266, 267, 268, 269, 275, 276, 278, 282, 284, 290], "simul": [1, 21, 23, 24, 100, 148, 179, 211, 217, 284], "work": [1, 2, 4, 5, 7, 8, 10, 15, 17, 19, 21, 23, 39, 40, 47, 54, 55, 56, 57, 60, 61, 65, 80, 90, 93, 95, 96, 98, 100, 103, 104, 105, 106, 108, 112, 113, 114, 117, 131, 138, 144, 146, 147, 149, 150, 151, 153, 155, 156, 157, 159, 160, 162, 170, 171, 172, 173, 176, 177, 178, 179, 181, 183, 184, 185, 189, 192, 193, 196, 197, 199, 200, 201, 203, 208, 211, 215, 216, 217, 226, 227, 232, 239, 241, 242, 246, 249, 250, 253, 256, 266, 268, 275, 276, 277, 278, 284, 286, 288, 289], "doubl": [1, 2, 4, 5, 7, 8, 40, 95, 102, 113, 120, 135, 137, 138, 149, 156, 163, 172, 179, 190, 215, 226], "precis": [1, 12, 13, 18, 65, 144, 149, 150, 164, 173, 179, 190, 215, 216, 217, 230, 238, 246, 261, 262, 282], "number": [1, 4, 7, 8, 14, 15, 18, 23, 24, 37, 40, 45, 48, 56, 57, 58, 60, 70, 87, 90, 93, 95, 98, 100, 105, 107, 109, 112, 113, 120, 121, 122, 139, 140, 142, 143, 144, 145, 146, 152, 153, 155, 156, 157, 159, 161, 162, 167, 171, 173, 175, 177, 178, 179, 180, 181, 182, 183, 189, 192, 194, 197, 199, 201, 205, 209, 215, 227, 229, 232, 241, 242, 251, 257, 259, 266, 268, 278, 279, 280, 288, 289], "presum": 1, "singl": [1, 2, 4, 7, 8, 12, 13, 14, 18, 21, 23, 41, 44, 47, 51, 56, 58, 59, 60, 61, 65, 90, 93, 95, 96, 100, 102, 103, 104, 105, 107, 113, 138, 139, 140, 141, 143, 146, 148, 149, 150, 151, 152, 153, 155, 156, 162, 163, 167, 172, 173, 175, 179, 180, 181, 182, 183, 185, 189, 192, 194, 196, 197, 200, 209, 215, 227, 241, 242, 256, 259, 263, 264, 266, 268, 280, 284, 288], "ones": [1, 2, 4, 8, 9, 14, 17, 19, 24, 100, 103, 105, 131, 155, 157, 160, 171, 172, 173, 175, 176, 179, 180, 189, 196, 200, 227, 241, 256, 263, 276, 277, 286], "goe": [1, 7, 56, 103, 106, 107, 138, 142, 150, 162, 176, 179, 182, 197], "wai": [1, 2, 4, 7, 8, 12, 13, 14, 15, 17, 35, 39, 41, 44, 47, 48, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 72, 77, 80, 87, 93, 95, 96, 98, 99, 103, 106, 107, 109, 112, 113, 115, 117, 118, 122, 131, 134, 139, 143, 144, 145, 146, 150, 152, 153, 159, 160, 161, 162, 163, 164, 167, 170, 171, 175, 177, 179, 181, 182, 184, 187, 190, 193, 196, 197, 199, 200, 209, 225, 228, 232, 233, 239, 242, 253, 263, 264, 268, 276, 277, 278, 280, 286, 290], "repres": [1, 4, 7, 13, 15, 16, 23, 36, 47, 54, 56, 57, 65, 67, 80, 87, 90, 95, 96, 98, 100, 104, 105, 112, 114, 115, 117, 120, 121, 139, 140, 141, 143, 145, 146, 148, 156, 159, 160, 163, 164, 179, 180, 183, 185, 192, 196, 197, 199, 200, 227, 229, 239, 241, 266, 275, 280], "doubletofloat": [1, 179], "in_kei": [1, 17, 156, 179], "list": [1, 4, 5, 7, 8, 9, 12, 14, 15, 17, 18, 20, 24, 28, 37, 41, 44, 48, 51, 53, 54, 55, 57, 73, 80, 93, 96, 100, 103, 109, 110, 112, 114, 115, 117, 118, 121, 144, 147, 155, 164, 171, 173, 177, 178, 181, 182, 183, 185, 189, 190, 192, 194, 196, 197, 207, 211, 214, 225, 227, 231, 232, 250, 256, 259, 269, 277, 280, 282, 284, 289], "refer": [1, 4, 5, 7, 8, 10, 12, 16, 18, 21, 28, 35, 41, 65, 80, 87, 90, 95, 96, 103, 105, 107, 109, 110, 112, 114, 115, 117, 118, 120, 122, 139, 140, 141, 143, 144, 147, 148, 152, 153, 155, 161, 170, 173, 177, 179, 181, 182, 183, 189, 192, 196, 197, 199, 200, 215, 217, 225, 226, 227, 229, 231, 232, 239, 242, 251, 253, 256, 259, 266, 270, 275, 278, 282, 283, 284], "float": [1, 4, 5, 7, 8, 12, 14, 24, 98, 103, 109, 112, 113, 120, 139, 140, 143, 145, 155, 161, 164, 176, 177, 181, 183, 196, 197, 199, 215, 217, 226, 232, 239, 263, 266, 268, 269, 277, 278, 279, 289], "while": [1, 2, 3, 7, 8, 9, 14, 15, 16, 17, 21, 24, 37, 40, 54, 57, 60, 87, 96, 103, 114, 115, 120, 132, 134, 138, 140, 141, 142, 144, 145, 148, 151, 153, 155, 156, 161, 162, 164, 170, 173, 177, 178, 179, 182, 183, 184, 185, 187, 194, 196, 197, 200, 208, 217, 226, 227, 231, 232, 239, 246, 250, 253, 256, 263, 266, 268, 275, 276, 277, 278, 279, 280, 282, 284], "in_keys_inv": [1, 17], "befor": [1, 3, 4, 7, 8, 12, 13, 14, 15, 17, 20, 24, 35, 40, 42, 47, 48, 49, 51, 54, 56, 57, 60, 65, 80, 90, 95, 96, 100, 105, 106, 107, 109, 110, 112, 113, 115, 117, 118, 120, 121, 122, 128, 131, 132, 138, 140, 141, 143, 145, 146, 148, 153, 155, 156, 159, 161, 163, 168, 170, 171, 173, 175, 177, 178, 179, 181, 182, 183, 185, 189, 190, 193, 194, 196, 197, 199, 201, 208, 211, 226, 227, 229, 231, 240, 242, 243, 244, 245, 246, 250, 251, 253, 254, 259, 260, 263, 266, 275, 276, 278, 283], "concaten": [1, 17, 44, 53, 54, 109, 110, 143, 147, 180], "cattensor": 1, "leav": [1, 12, 19, 21, 35, 47, 54, 56, 58, 90, 95, 131, 145, 170, 171, 178, 215, 239, 284], "constant": [1, 2, 8, 44, 53, 87, 93, 95, 103, 107, 142, 156, 171, 180, 190, 194, 196, 242, 279, 284], "significantli": [1, 24, 110, 134, 143, 149, 173, 194, 233, 251, 259, 268, 282], "speed": [1, 7, 8, 13, 17, 24, 35, 37, 40, 53, 54, 90, 95, 98, 99, 105, 113, 132, 133, 134, 138, 140, 141, 143, 146, 151, 156, 157, 161, 164, 173, 178, 179, 181, 184, 194, 200, 203, 207, 208, 227, 240, 242, 255, 256, 259, 261, 268, 269, 282, 290], "throughput": [1, 140, 173, 242, 259], "choos": [1, 12, 13, 15, 18, 54, 57, 60, 65, 70, 93, 96, 107, 121, 122, 142, 143, 147, 153, 155, 163, 171, 178, 179, 180, 185, 189, 192, 197, 199, 207, 223, 226, 232, 246, 264, 268, 270], "whether": [1, 8, 12, 13, 14, 17, 54, 57, 95, 96, 98, 102, 103, 105, 113, 115, 122, 131, 150, 155, 160, 163, 170, 173, 179, 181, 189, 190, 192, 196, 227, 232, 242, 243, 263, 278], "individu": [1, 7, 8, 15, 36, 54, 90, 95, 96, 100, 121, 141, 143, 145, 149, 172, 173, 177, 182, 185, 190, 194, 196, 197, 200, 223, 226, 227, 242, 251, 263], "approach": [1, 4, 7, 8, 10, 42, 61, 96, 113, 115, 117, 122, 142, 146, 151, 171, 172, 173, 179, 180, 182, 185, 194, 196, 199, 227, 239, 246, 266, 275, 278, 279, 282, 288], "parallelenv": [1, 179], "num_work": [1, 48, 56, 93, 102, 139, 140, 189, 190, 242], "4": [1, 2, 3, 4, 7, 8, 12, 15, 19, 20, 22, 28, 37, 39, 49, 56, 58, 59, 60, 67, 68, 70, 75, 80, 93, 96, 98, 100, 102, 103, 104, 106, 107, 109, 112, 113, 119, 121, 136, 138, 139, 140, 142, 148, 149, 151, 152, 155, 156, 161, 163, 164, 170, 175, 177, 180, 181, 182, 183, 192, 194, 196, 199, 200, 203, 208, 211, 215, 240, 246, 250, 251, 256, 259, 262, 264, 266, 268, 270, 277, 278, 290], "leverag": [1, 8, 54, 80, 105, 115, 118, 122, 136, 138, 140, 143, 153, 155, 162, 199, 210, 211, 214, 217, 242, 243, 255, 259, 261, 269, 279, 283, 290], "vector": [1, 2, 7, 8, 9, 15, 17, 35, 54, 57, 87, 95, 96, 100, 102, 103, 105, 107, 109, 110, 112, 113, 146, 147, 148, 156, 159, 161, 172, 176, 185, 197, 203, 215, 216, 242, 253, 269, 279, 288], "capabl": [1, 3, 14, 18, 21, 54, 80, 137, 143, 164, 173, 184, 189, 193, 203, 205, 206, 214, 226, 242, 284], "pytorch": [1, 2, 4, 5, 9, 12, 14, 17, 19, 21, 22, 23, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 44, 48, 49, 53, 54, 56, 57, 58, 60, 61, 63, 64, 66, 69, 71, 75, 76, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 93, 95, 96, 105, 106, 111, 113, 114, 116, 117, 122, 123, 125, 128, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 170, 172, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 193, 194, 195, 196, 201, 202, 205, 206, 207, 208, 209, 210, 211, 214, 219, 221, 222, 225, 226, 228, 231, 234, 235, 236, 237, 238, 239, 241, 246, 250, 251, 252, 253, 255, 256, 257, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 287, 288, 290], "adopt": [1, 28, 65, 170, 176, 182, 217, 283], "frame_skip": [1, 179], "frame": [1, 8, 156, 163, 178, 179, 189, 256, 266], "count": [1, 8, 14, 24, 40, 48, 54, 87, 107, 155, 156, 179, 183, 185, 189, 192, 210], "frames_per_batch": [1, 179], "total_fram": [1, 179], "adjust": [1, 5, 17, 24, 35, 40, 41, 47, 57, 80, 95, 98, 104, 143, 145, 146, 167, 181, 242], "total": [1, 7, 14, 15, 16, 17, 19, 20, 21, 22, 35, 36, 37, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 69, 73, 75, 77, 78, 79, 80, 88, 90, 91, 93, 95, 98, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 123, 125, 128, 131, 140, 142, 144, 145, 146, 147, 149, 155, 156, 157, 159, 160, 161, 162, 163, 164, 167, 170, 171, 172, 173, 177, 178, 179, 180, 182, 184, 185, 186, 187, 189, 192, 194, 196, 197, 199, 200, 201, 206, 207, 214, 215, 227, 228, 231, 232, 233, 238, 239, 241, 246, 248, 252, 253, 254, 255, 257, 259, 262, 268, 275, 276, 277, 278, 280, 285, 288], "rais": [1, 12, 14, 19, 24, 80, 114, 142, 143, 144, 161, 164, 178, 179, 194, 196, 208, 242, 254, 256], "skip": [1, 7, 13, 17, 21, 24, 47, 106, 122, 150, 159, 163, 181, 183, 189, 194, 196, 200, 207, 216, 227, 232, 245, 259, 283, 284, 290], "unchang": [1, 12, 88, 95], "seem": [1, 48, 57, 144, 146, 156, 173, 175, 197, 227], "like": [1, 3, 4, 7, 8, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 36, 37, 40, 41, 44, 47, 48, 49, 51, 53, 54, 56, 57, 58, 60, 65, 73, 87, 90, 93, 95, 96, 98, 100, 103, 105, 106, 107, 109, 110, 112, 113, 114, 115, 118, 120, 121, 125, 128, 131, 132, 134, 135, 137, 138, 139, 143, 144, 145, 147, 150, 152, 153, 155, 156, 157, 159, 160, 161, 162, 164, 167, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 184, 185, 189, 190, 192, 193, 196, 197, 199, 200, 201, 203, 209, 210, 211, 215, 216, 223, 225, 226, 227, 228, 229, 232, 241, 242, 250, 251, 252, 253, 254, 256, 259, 263, 269, 276, 277, 278, 282, 283, 284, 288, 289, 290], "cheat": [1, 103, 185], "compar": [1, 5, 7, 13, 18, 21, 24, 40, 48, 88, 96, 103, 105, 110, 113, 118, 128, 139, 141, 142, 143, 145, 155, 160, 161, 162, 164, 167, 170, 172, 173, 177, 179, 180, 181, 183, 185, 189, 192, 194, 196, 200, 201, 203, 207, 208, 214, 215, 216, 217, 231, 240, 241, 242, 254, 255, 259, 261, 264, 267, 268, 269, 275, 284, 290], "dataset": [1, 8, 21, 28, 35, 36, 38, 39, 40, 41, 42, 44, 45, 47, 48, 51, 54, 57, 58, 60, 62, 80, 96, 100, 105, 107, 123, 128, 138, 139, 140, 145, 146, 147, 151, 155, 157, 172, 173, 178, 182, 184, 185, 187, 189, 190, 192, 197, 201, 216, 218, 229, 242, 249, 256, 261, 262, 282, 284], "10m": 1, "element": [1, 7, 8, 9, 15, 21, 24, 41, 44, 53, 54, 95, 96, 100, 103, 107, 109, 110, 112, 131, 144, 155, 161, 167, 171, 179, 192, 196, 199, 227, 229, 242, 276, 277, 278, 280, 284], "2": [1, 2, 3, 4, 5, 7, 8, 9, 12, 14, 15, 17, 18, 19, 20, 22, 23, 28, 36, 37, 39, 47, 51, 54, 56, 57, 58, 60, 67, 68, 69, 73, 74, 77, 79, 80, 93, 95, 96, 98, 102, 103, 105, 106, 107, 109, 112, 113, 114, 117, 118, 121, 122, 125, 128, 131, 138, 139, 140, 141, 143, 145, 148, 149, 150, 151, 152, 153, 155, 156, 157, 161, 162, 164, 168, 170, 172, 177, 178, 179, 180, 181, 182, 183, 184, 192, 194, 196, 197, 200, 203, 205, 206, 207, 210, 211, 215, 216, 217, 226, 228, 231, 239, 242, 246, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 262, 264, 266, 267, 268, 269, 270, 275, 277, 280, 283, 286, 289, 290], "anoth": [1, 4, 7, 12, 14, 17, 35, 44, 47, 53, 54, 57, 67, 80, 90, 98, 100, 103, 104, 106, 110, 113, 120, 121, 122, 131, 138, 147, 148, 149, 150, 152, 155, 156, 159, 171, 173, 177, 179, 181, 182, 183, 184, 185, 193, 194, 196, 197, 199, 201, 225, 227, 232, 242, 243, 259, 263, 268, 289], "actual": [1, 3, 7, 8, 12, 14, 16, 17, 18, 24, 35, 42, 54, 56, 57, 80, 90, 98, 105, 106, 109, 112, 118, 131, 137, 138, 141, 144, 145, 146, 149, 153, 155, 160, 170, 173, 179, 185, 189, 190, 194, 196, 197, 217, 227, 252, 267, 268, 275, 277, 288], "ratio": [1, 87, 105, 161, 173, 179, 189, 199], "interact": [1, 7, 8, 17, 54, 96, 102, 103, 145, 148, 150, 163, 179, 182, 190, 194, 196, 197, 202, 210, 253], "nutshel": [1, 277], "cautiou": 1, "about": [1, 4, 7, 8, 12, 13, 17, 18, 21, 24, 39, 40, 41, 44, 47, 54, 57, 58, 59, 60, 62, 77, 78, 80, 93, 95, 98, 100, 102, 103, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 128, 131, 132, 134, 138, 140, 142, 145, 146, 147, 150, 152, 153, 155, 157, 160, 161, 162, 170, 172, 173, 178, 179, 180, 181, 183, 184, 185, 187, 189, 192, 194, 196, 197, 199, 200, 201, 208, 210, 211, 230, 231, 238, 239, 241, 244, 251, 255, 256, 261, 262, 266, 267, 268, 276, 277, 278, 283, 284, 290], "deal": [1, 7, 48, 54, 56, 57, 98, 105, 113, 121, 122, 140, 162, 173, 179, 196, 197, 201, 210, 244], "lead": [1, 4, 7, 8, 17, 19, 54, 57, 80, 87, 93, 105, 113, 146, 148, 150, 156, 173, 196, 208, 239, 242, 246, 259, 277, 288], "bias": [1, 36, 47, 100, 105, 122, 184, 200, 239, 244, 245], "comparison": [1, 21, 88, 96, 103, 104, 105, 106, 139, 161, 162, 241, 264, 268, 275, 277, 280, 282, 284], "scale": [1, 8, 24, 36, 45, 56, 61, 80, 100, 102, 105, 115, 133, 134, 138, 139, 140, 142, 153, 155, 156, 163, 175, 179, 180, 186, 187, 197, 210, 211, 226, 242, 246, 253, 262, 263, 264, 268], "help": [1, 4, 7, 12, 13, 18, 21, 23, 24, 35, 36, 47, 54, 57, 73, 87, 93, 96, 105, 106, 109, 110, 112, 113, 122, 133, 134, 136, 138, 139, 140, 145, 152, 153, 156, 157, 161, 162, 167, 170, 176, 179, 180, 181, 182, 183, 184, 185, 192, 194, 196, 197, 201, 202, 205, 207, 208, 209, 211, 217, 223, 225, 226, 227, 229, 240, 242, 243, 251, 253, 254, 257, 259, 261, 266, 268, 276, 277, 278, 280, 282, 283, 284, 288], "signal": [1, 47, 96, 98, 179, 181, 232, 241], "magnitud": [1, 21, 95, 177, 197, 226, 284], "truncat": [1, 103, 120, 161, 179, 284], "A": [1, 7, 8, 9, 12, 14, 15, 17, 21, 35, 36, 37, 41, 44, 51, 52, 53, 54, 56, 57, 58, 60, 67, 68, 72, 73, 74, 77, 78, 80, 87, 88, 98, 100, 103, 104, 105, 107, 109, 110, 112, 113, 114, 121, 122, 131, 134, 138, 140, 144, 145, 146, 147, 150, 151, 155, 157, 160, 164, 170, 171, 172, 179, 180, 181, 182, 184, 185, 186, 187, 190, 192, 194, 196, 197, 200, 201, 202, 209, 215, 216, 217, 227, 231, 239, 242, 244, 251, 253, 256, 259, 262, 266, 267, 279, 280, 283, 284], "thousand": [1, 112, 134, 143, 146, 156, 185, 192], "500": [1, 8, 28, 164, 175, 180, 183, 227], "good": [1, 2, 7, 8, 48, 55, 57, 98, 102, 103, 105, 112, 115, 138, 139, 145, 155, 156, 161, 167, 178, 180, 184, 186, 190, 192, 196, 197, 199, 200, 223, 227, 242, 246, 259, 262, 279], "statist": [1, 57, 98, 132, 138, 149, 160, 177, 179, 185, 189, 190, 192, 227], "arbitrari": [1, 7, 12, 17, 19, 35, 78, 96, 105, 110, 140, 157, 163, 172, 190, 194, 200, 232, 233], "random": [1, 8, 17, 20, 24, 44, 47, 48, 49, 51, 53, 56, 57, 67, 68, 70, 77, 78, 80, 96, 98, 102, 109, 110, 113, 114, 115, 120, 121, 128, 139, 140, 145, 147, 148, 153, 155, 157, 163, 167, 170, 171, 177, 179, 180, 181, 183, 185, 190, 194, 207, 227, 229, 233, 242], "standard": [1, 7, 12, 44, 48, 53, 57, 87, 93, 96, 98, 105, 106, 107, 113, 115, 117, 118, 132, 155, 178, 187, 194, 196, 197, 199, 229, 242, 268, 280], "deviat": [1, 87, 98, 105], "observationnorm": [1, 179], "init_stat": 1, "purpos": [1, 7, 62, 80, 90, 95, 100, 104, 121, 139, 144, 145, 147, 155, 156, 160, 161, 170, 175, 178, 179, 182, 183, 189, 193, 194, 197, 209, 239, 242, 246, 250, 266, 268, 276, 279], "get": [1, 2, 5, 7, 8, 10, 12, 14, 17, 18, 19, 20, 21, 24, 28, 37, 39, 47, 48, 49, 54, 55, 56, 57, 60, 61, 65, 80, 88, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 120, 121, 122, 128, 131, 133, 134, 137, 138, 140, 142, 143, 145, 146, 147, 148, 155, 157, 160, 162, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 185, 189, 190, 192, 193, 196, 197, 199, 202, 203, 207, 208, 215, 223, 227, 232, 242, 245, 246, 256, 259, 260, 261, 262, 266, 267, 268, 270, 275, 277, 282, 283, 284, 285, 289], "summari": [1, 87, 112, 145, 156, 173, 179, 189, 196, 240, 241], "dummi": [1, 4, 12, 19, 51, 90, 98, 104, 153, 157, 162, 172, 175, 176, 197, 201, 209, 256, 282], "over": [1, 4, 7, 8, 13, 14, 17, 19, 21, 23, 24, 36, 37, 40, 41, 44, 48, 51, 53, 54, 55, 56, 57, 58, 60, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 113, 120, 121, 136, 138, 139, 140, 141, 142, 143, 146, 148, 152, 153, 155, 157, 160, 161, 162, 163, 164, 167, 172, 177, 179, 180, 181, 182, 183, 184, 185, 189, 190, 192, 194, 196, 197, 199, 200, 201, 215, 226, 242, 245, 254, 255, 264, 268, 279, 284, 288], "earlier": [1, 7, 8, 80, 98, 100, 103, 106, 107, 110, 113, 139, 141, 143, 156, 170, 173, 179, 185, 196, 226, 227], "turn": [1, 7, 8, 12, 17, 18, 24, 45, 54, 96, 100, 102, 103, 120, 147, 156, 162, 170, 171, 173, 177, 181, 185, 197, 269, 276, 277, 279], "seen": [1, 13, 14, 23, 24, 48, 51, 54, 56, 100, 103, 105, 110, 112, 113, 120, 156, 172, 182, 194, 196, 197, 227, 253, 279], "requir": [1, 2, 4, 5, 7, 8, 9, 12, 13, 15, 17, 18, 19, 23, 24, 28, 39, 45, 47, 54, 55, 56, 57, 60, 65, 88, 90, 93, 95, 99, 104, 112, 113, 117, 118, 131, 139, 143, 145, 147, 149, 150, 152, 153, 155, 156, 157, 159, 162, 167, 170, 171, 172, 173, 175, 178, 179, 181, 182, 183, 184, 185, 192, 193, 194, 196, 197, 199, 200, 203, 205, 206, 208, 209, 211, 215, 216, 217, 226, 228, 229, 231, 232, 239, 241, 242, 246, 250, 251, 252, 253, 254, 257, 266, 267, 268, 269, 270, 276, 277, 278, 282, 286, 288], "select": [1, 4, 7, 13, 55, 87, 93, 102, 105, 113, 115, 155, 164, 177, 180, 181, 183, 189, 190, 194, 196, 215, 232, 242, 251, 253, 266, 270, 277, 279, 284, 289], "recal": [1, 8, 57, 95, 103, 106, 112, 153, 179, 190, 239, 241, 276, 277, 278], "wrap": [1, 4, 7, 8, 13, 20, 37, 41, 49, 93, 98, 107, 109, 110, 115, 120, 139, 141, 144, 149, 153, 156, 163, 173, 179, 182, 183, 192, 193, 196, 197, 201, 205, 206, 209, 210, 223, 226, 232, 260, 267], "flow": [1, 7, 17, 35, 47, 57, 71, 75, 90, 102, 105, 115, 116, 117, 118, 132, 138, 141, 179, 180, 189, 194, 201, 242, 261, 262, 267, 282], "handl": [1, 5, 7, 12, 13, 19, 54, 57, 58, 90, 100, 103, 113, 114, 118, 132, 138, 139, 143, 146, 157, 168, 172, 173, 175, 177, 178, 179, 182, 183, 184, 192, 193, 194, 196, 197, 203, 208, 209, 216, 225, 231, 232, 241, 256, 259, 275, 277, 280, 288], "specifi": [1, 4, 7, 8, 12, 14, 19, 21, 24, 28, 37, 41, 56, 57, 87, 93, 95, 96, 98, 100, 103, 104, 109, 114, 121, 139, 140, 141, 142, 143, 145, 146, 150, 156, 157, 159, 176, 177, 179, 182, 183, 189, 192, 196, 207, 217, 231, 232, 240, 242, 243, 250, 253, 255, 256, 259, 263, 264, 275, 276, 277, 278, 280, 282, 284, 288, 289, 290], "scenario": [1, 8, 17, 114, 115, 117, 118, 122, 128, 131, 144, 173, 180, 183, 196, 215, 239, 243, 259, 266, 279], "tensordictsequenti": [1, 156], "valueoper": 1, "automat": [1, 2, 4, 5, 7, 8, 12, 13, 18, 36, 38, 39, 41, 44, 47, 49, 50, 51, 53, 58, 62, 65, 102, 104, 106, 113, 121, 125, 131, 133, 138, 139, 140, 141, 143, 144, 145, 150, 161, 164, 173, 175, 179, 180, 183, 186, 187, 189, 192, 193, 196, 197, 201, 203, 207, 208, 209, 215, 216, 217, 223, 228, 230, 231, 232, 238, 241, 242, 253, 261, 262, 264, 266, 283], "out_kei": [1, 17, 156, 179], "state_action_valu": 1, "state_valu": 1, "built": [1, 4, 7, 8, 10, 12, 22, 35, 51, 95, 96, 98, 100, 107, 131, 138, 146, 155, 156, 179, 184, 190, 194, 196, 199, 225, 227, 229, 245, 251, 262], "present": [1, 8, 12, 23, 40, 87, 88, 105, 114, 171, 176, 177, 180, 181, 183, 192, 194, 196, 199, 201, 242, 260, 280], "origin": [1, 7, 8, 9, 12, 15, 17, 21, 24, 35, 54, 57, 80, 93, 96, 103, 105, 110, 114, 115, 141, 143, 144, 146, 147, 167, 168, 171, 172, 173, 177, 180, 192, 193, 194, 196, 216, 223, 256, 263, 268, 269, 278, 282, 284], "paper": [1, 7, 15, 20, 21, 57, 80, 125, 140, 143, 179, 180, 182, 184, 185, 187, 197, 200, 201, 280, 284], "found": [1, 4, 5, 7, 8, 13, 20, 54, 55, 96, 105, 145, 153, 155, 156, 160, 164, 173, 182, 183, 184, 192, 196, 216, 223, 242, 256, 280, 289], "ddpgmlpactor": 1, "ddpgmlpqnet": 1, "sinc": [1, 3, 4, 7, 9, 12, 13, 14, 16, 17, 20, 24, 48, 54, 56, 57, 58, 80, 90, 95, 96, 98, 105, 106, 107, 109, 110, 112, 113, 128, 131, 141, 142, 143, 145, 146, 147, 148, 150, 151, 155, 156, 160, 170, 171, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 190, 192, 194, 196, 197, 199, 200, 203, 205, 207, 208, 209, 223, 227, 231, 232, 233, 245, 246, 254, 256, 260, 263, 268, 275, 276, 277], "lazi": 1, "materi": [1, 139, 143, 162, 197, 200, 233, 239, 267, 275, 286], "abl": [1, 3, 4, 7, 8, 17, 18, 21, 35, 36, 54, 67, 80, 90, 98, 105, 106, 108, 112, 113, 121, 128, 145, 149, 150, 151, 152, 155, 156, 157, 161, 163, 164, 170, 172, 179, 182, 190, 194, 196, 197, 199, 200, 203, 214, 229, 239, 245, 253, 256, 266, 277, 284], "devic": [1, 3, 4, 5, 8, 12, 13, 14, 17, 19, 20, 21, 23, 24, 44, 47, 48, 49, 53, 54, 55, 57, 58, 60, 61, 65, 68, 78, 93, 103, 105, 107, 113, 115, 121, 134, 137, 138, 139, 141, 143, 145, 146, 152, 153, 155, 156, 161, 164, 170, 173, 175, 177, 178, 179, 182, 183, 189, 197, 199, 205, 206, 208, 209, 211, 214, 215, 216, 217, 227, 230, 232, 233, 238, 239, 243, 245, 251, 252, 253, 255, 256, 257, 260, 261, 262, 263, 264, 266, 267, 269, 270, 282, 283, 284, 286], "achiev": [1, 3, 4, 8, 17, 21, 24, 28, 35, 48, 54, 61, 87, 93, 105, 138, 141, 144, 149, 155, 156, 161, 170, 171, 173, 177, 179, 180, 189, 197, 200, 207, 215, 242, 253, 255, 259, 261, 263, 267, 268, 284], "oper": [1, 8, 9, 16, 17, 18, 21, 22, 23, 24, 35, 36, 41, 47, 49, 51, 54, 56, 65, 67, 68, 78, 87, 88, 90, 98, 99, 102, 103, 105, 106, 107, 112, 113, 114, 115, 116, 117, 120, 121, 131, 132, 137, 138, 139, 141, 142, 143, 144, 146, 148, 150, 155, 156, 157, 159, 161, 162, 164, 167, 172, 175, 176, 178, 179, 181, 185, 189, 190, 192, 193, 194, 196, 197, 200, 201, 202, 209, 210, 214, 215, 216, 217, 223, 225, 226, 227, 229, 232, 233, 241, 245, 251, 252, 253, 256, 259, 260, 261, 262, 268, 275, 276, 279, 282, 284, 288, 289, 290], "practic": [1, 7, 8, 14, 42, 51, 54, 56, 57, 95, 96, 98, 103, 105, 107, 113, 114, 121, 125, 128, 133, 136, 138, 143, 144, 151, 156, 161, 164, 171, 177, 179, 180, 196, 200, 227, 228, 231, 242, 246, 255, 256, 259, 275, 276, 280], "small": [1, 3, 7, 8, 21, 23, 28, 47, 48, 51, 62, 80, 95, 98, 100, 102, 103, 105, 107, 108, 110, 115, 121, 128, 139, 140, 142, 145, 146, 147, 149, 160, 170, 171, 173, 178, 179, 180, 183, 185, 187, 192, 197, 199, 215, 226, 227, 229, 242, 256, 257, 266, 268, 275, 284], "fake": [1, 8, 21, 24, 51, 57, 170, 196, 280, 284], "spec": [1, 118, 156, 179, 183, 196, 227, 263], "ornsteinuhlenbeckprocessmodul": 1, "suggest": [1, 4, 15, 57, 92, 105, 141, 147, 161, 162, 163, 164, 167, 189, 192, 217, 266], "ou": 1, "nois": [1, 8, 15, 57, 80, 210, 241], "reach": [1, 9, 13, 21, 57, 65, 105, 131, 146, 153, 155, 163, 164, 179, 183, 196, 201, 227, 284], "minimum": [1, 4, 87, 141, 179, 183, 277], "iter": [1, 3, 8, 14, 15, 17, 28, 35, 36, 40, 41, 47, 48, 51, 57, 58, 60, 90, 93, 95, 96, 98, 100, 102, 106, 113, 115, 122, 145, 148, 151, 153, 156, 161, 179, 180, 181, 182, 183, 189, 190, 194, 197, 199, 206, 217, 223, 226, 242, 245, 254, 256, 260], "reset": [1, 24, 40, 98, 103, 113, 128, 156, 179, 180, 181, 183, 189, 194, 257, 269], "develop": [1, 3, 4, 7, 12, 13, 15, 18, 28, 87, 90, 96, 109, 113, 115, 117, 132, 135, 148, 155, 164, 176, 183, 189, 194, 200, 209, 210, 214, 216, 230, 242, 263, 268, 269, 270, 275, 278, 279], "tight": [1, 114, 115, 117, 118], "per": [1, 4, 7, 8, 12, 14, 24, 102, 105, 112, 133, 138, 140, 146, 147, 149, 153, 155, 156, 162, 164, 170, 175, 177, 183, 184, 185, 186, 189, 190, 192, 196, 197, 199, 203, 207, 208, 209, 227, 231, 241, 250, 259, 260, 262, 264, 266, 267, 275, 288], "sync": [1, 13, 14, 20, 60, 137, 138, 139, 140, 141, 142, 163, 197], "natur": [1, 7, 8, 21, 23, 28, 49, 80, 100, 105, 113, 145, 146, 156, 173, 182, 192, 203, 277, 280, 284], "resourc": [1, 58, 80, 93, 115, 117, 139, 153, 155, 170, 179, 189, 192, 202, 214, 227, 242, 246, 249, 259, 266], "alloc": [1, 8, 23, 44, 53, 60, 103, 149, 155, 170, 173, 189, 196, 197, 209, 231, 232, 260, 280, 286], "gpu": [1, 3, 5, 10, 15, 21, 23, 24, 44, 47, 51, 53, 54, 55, 57, 58, 59, 61, 62, 65, 68, 78, 87, 88, 98, 99, 103, 104, 105, 107, 115, 121, 125, 128, 134, 138, 139, 140, 141, 143, 144, 146, 151, 152, 153, 155, 156, 157, 161, 164, 167, 170, 172, 175, 179, 180, 182, 183, 184, 192, 194, 199, 203, 205, 208, 209, 217, 223, 226, 227, 232, 245, 251, 253, 261, 262, 264, 266, 267, 269, 270, 282, 284, 285, 289], "worker": [1, 8, 14, 20, 56, 57, 98, 134, 139, 140, 142, 155, 164, 179, 182, 183, 189, 207, 242], "so": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 21, 23, 24, 28, 35, 48, 51, 54, 56, 57, 58, 70, 73, 80, 88, 90, 93, 95, 96, 98, 100, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 115, 120, 121, 128, 131, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 155, 156, 161, 162, 163, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 189, 192, 194, 196, 197, 199, 200, 201, 215, 216, 217, 223, 226, 227, 231, 241, 242, 245, 254, 255, 256, 259, 260, 261, 263, 266, 267, 268, 275, 277, 278, 279, 280, 284, 286, 289], "syncdatacollector": [1, 179], "process": [1, 4, 5, 7, 8, 14, 15, 17, 18, 20, 21, 23, 28, 37, 40, 41, 45, 51, 54, 55, 56, 57, 61, 65, 80, 87, 90, 95, 96, 98, 100, 104, 105, 113, 114, 115, 122, 125, 132, 134, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 151, 152, 155, 156, 160, 161, 163, 164, 172, 173, 178, 180, 182, 183, 184, 185, 189, 192, 196, 197, 203, 207, 208, 209, 211, 217, 227, 229, 231, 232, 241, 242, 243, 245, 250, 255, 256, 257, 259, 260, 261, 266, 267, 268, 279, 282, 283, 284], "offer": [1, 4, 5, 10, 14, 17, 19, 23, 41, 45, 47, 58, 65, 95, 96, 107, 140, 141, 143, 155, 157, 159, 161, 162, 173, 197, 200, 209, 225, 227, 232, 241, 242, 246, 259], "multiasyncdatacollector": [1, 179], "rollout": [1, 179], "asynchron": [1, 134, 138, 142, 145, 176, 179, 183, 232, 261], "manner": [1, 7, 12, 17, 24, 35, 95, 113, 179, 192, 197], "therebi": [1, 256, 269, 275, 280], "decoupl": [1, 37, 171], "factori": [1, 8, 103, 109, 228, 231, 276, 277], "empti": [1, 4, 7, 8, 9, 12, 17, 24, 103, 147, 161, 178, 185, 189, 192, 196, 200, 232, 241, 267, 277, 286, 289], "maximum": [1, 14, 54, 87, 100, 110, 145, 147, 156, 161, 179, 184, 185, 242, 279], "non": [1, 2, 3, 7, 12, 14, 17, 24, 36, 54, 56, 58, 59, 61, 87, 90, 100, 103, 105, 106, 108, 112, 113, 122, 123, 138, 140, 141, 145, 149, 150, 155, 156, 159, 162, 164, 167, 177, 181, 184, 185, 189, 194, 197, 200, 201, 209, 227, 239, 243, 255, 259, 262, 268, 275, 282, 286], "termin": [1, 17, 58, 93, 179, 180, 182, 183, 192, 289], "max_frames_per_traj": [1, 179], "effect": [1, 7, 8, 9, 12, 14, 19, 60, 80, 87, 96, 100, 103, 105, 113, 118, 143, 146, 147, 153, 157, 170, 172, 173, 177, 180, 184, 185, 192, 197, 201, 208, 210, 226, 242, 246, 255, 277, 288], "regist": [1, 5, 9, 10, 19, 40, 47, 51, 100, 118, 120, 122, 137, 138, 140, 141, 143, 153, 159, 170, 171, 179, 193, 196, 203, 216, 223, 226, 233, 244, 266, 267], "new": [1, 2, 4, 5, 7, 8, 10, 12, 15, 17, 19, 28, 34, 35, 39, 44, 47, 49, 53, 54, 55, 57, 60, 66, 69, 80, 82, 83, 84, 85, 87, 90, 102, 103, 104, 105, 107, 110, 112, 117, 118, 120, 122, 128, 131, 133, 135, 137, 138, 139, 140, 141, 142, 144, 148, 156, 159, 161, 163, 170, 171, 172, 173, 176, 177, 179, 180, 181, 184, 185, 189, 192, 193, 196, 197, 199, 203, 223, 232, 239, 242, 243, 247, 261, 262, 263, 266, 267, 269, 270, 275, 280, 288, 289, 290], "stepcount": [1, 156, 179], "infer": [1, 3, 5, 8, 10, 12, 13, 24, 42, 44, 53, 54, 96, 98, 100, 104, 105, 109, 112, 113, 115, 132, 136, 138, 141, 144, 145, 148, 149, 161, 179, 181, 192, 193, 194, 196, 197, 199, 203, 209, 217, 223, 229, 230, 244, 246, 253, 256, 259, 261, 279, 280, 282, 284, 289, 290], "manual": [1, 4, 7, 12, 15, 19, 37, 51, 54, 58, 74, 77, 78, 103, 105, 113, 121, 122, 141, 150, 156, 157, 171, 172, 173, 175, 196, 197, 203, 207, 211, 223, 226, 242, 259, 280], "around": [1, 7, 8, 14, 28, 37, 41, 54, 60, 96, 98, 100, 103, 105, 128, 138, 147, 157, 161, 162, 167, 172, 185, 189, 190, 196, 197, 215, 233, 267, 275, 276], "1m": [1, 102, 156, 179, 264], "outer": [1, 8, 140, 162], "loop": [1, 3, 7, 12, 14, 20, 24, 39, 41, 48, 51, 54, 56, 57, 80, 90, 95, 98, 102, 105, 113, 121, 139, 141, 145, 146, 148, 157, 161, 162, 163, 170, 172, 173, 182, 183, 190, 197, 215, 227, 232, 242, 245, 284], "equal": [1, 13, 95, 103, 105, 144, 164, 177, 179, 180, 192, 196, 256, 259, 266, 278], "length": [1, 15, 17, 54, 57, 95, 96, 100, 112, 113, 143, 147, 179, 184, 185, 197, 200, 255, 261, 264, 277, 280, 284, 288, 290], "sub": [1, 8, 95, 120, 143, 148, 175, 179, 183, 189, 194, 197, 211, 250, 259], "shape": [1, 4, 5, 9, 19, 21, 35, 37, 44, 47, 51, 53, 54, 57, 73, 90, 95, 98, 105, 106, 109, 112, 113, 120, 121, 131, 140, 143, 146, 147, 148, 157, 159, 162, 172, 177, 179, 189, 192, 193, 197, 199, 200, 215, 223, 227, 230, 232, 238, 250, 251, 253, 254, 256, 261, 262, 268, 278, 280, 284, 286], "env_per_collector": 1, "traj_len": 1, "perform": [1, 3, 5, 8, 12, 13, 14, 15, 17, 18, 19, 20, 21, 24, 35, 36, 40, 41, 45, 47, 48, 49, 54, 61, 68, 77, 80, 87, 90, 93, 95, 98, 100, 103, 104, 105, 106, 107, 112, 113, 122, 131, 132, 133, 134, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 155, 156, 159, 162, 163, 167, 173, 175, 176, 179, 180, 181, 183, 186, 187, 190, 192, 193, 194, 196, 197, 199, 200, 201, 203, 205, 207, 211, 214, 216, 217, 223, 226, 227, 228, 230, 231, 232, 238, 241, 245, 246, 249, 253, 255, 256, 257, 261, 262, 264, 267, 268, 269, 275, 276, 280, 282, 284, 286, 290], "assess": [1, 173, 197], "mode": [1, 15, 42, 47, 54, 57, 60, 80, 87, 90, 92, 96, 102, 122, 133, 138, 140, 148, 149, 150, 156, 161, 163, 164, 167, 175, 181, 184, 185, 186, 190, 192, 193, 194, 196, 197, 200, 209, 215, 216, 227, 242, 248, 255, 256, 259, 261, 262, 263, 266, 282, 290], "dedic": [1, 13, 60, 103, 182, 183, 225, 226, 260], "frequenc": [1, 88, 145], "everi": [1, 2, 8, 12, 13, 17, 18, 21, 23, 24, 28, 35, 36, 37, 41, 47, 48, 51, 54, 56, 57, 60, 65, 95, 98, 100, 102, 103, 104, 128, 143, 144, 146, 147, 149, 155, 156, 159, 164, 170, 171, 172, 173, 177, 179, 180, 181, 183, 185, 189, 190, 194, 196, 197, 205, 228, 240, 242, 252, 260, 280, 284], "10": [1, 3, 8, 9, 12, 14, 21, 24, 36, 37, 45, 47, 48, 49, 51, 54, 58, 77, 80, 88, 93, 98, 102, 104, 113, 120, 122, 139, 140, 142, 148, 153, 155, 157, 161, 164, 177, 178, 181, 182, 183, 184, 185, 186, 189, 190, 192, 196, 197, 200, 205, 207, 208, 211, 215, 217, 223, 227, 229, 232, 241, 243, 256, 262, 263, 266, 268, 270, 277, 284, 286, 289, 290], "come": [1, 5, 7, 8, 13, 21, 24, 45, 56, 57, 80, 90, 93, 95, 100, 103, 105, 106, 118, 122, 139, 143, 145, 155, 156, 161, 170, 171, 173, 176, 179, 184, 194, 196, 197, 200, 217, 227, 251, 260, 268, 284], "flavor": [1, 4, 7], "priorit": [1, 242, 280], "error": [1, 4, 7, 8, 12, 13, 14, 15, 19, 40, 41, 47, 51, 54, 55, 58, 73, 95, 98, 100, 103, 105, 109, 113, 117, 118, 121, 131, 140, 142, 144, 150, 170, 176, 179, 180, 194, 197, 200, 211, 216, 227, 239, 242, 245, 254, 266, 268, 275, 283], "higher": [1, 24, 48, 53, 58, 87, 95, 96, 100, 105, 107, 121, 139, 140, 146, 147, 150, 159, 162, 178, 179, 180, 189, 190, 192, 196, 197, 203, 206, 211, 214, 282, 288], "likelihood": [1, 40, 54, 100, 107, 113], "regular": [1, 7, 8, 12, 13, 24, 28, 105, 113, 125, 143, 146, 147, 162, 171, 172, 173, 187, 197, 200, 216, 242, 253, 275, 277, 280, 282], "circular": [1, 266, 283], "compos": [1, 4, 7, 8, 10, 13, 19, 21, 24, 65, 98, 100, 102, 107, 138, 139, 155, 159, 167, 172, 178, 179, 182, 184, 186, 190, 192, 200, 211, 216, 229, 232, 246, 249, 251, 262], "pick": [1, 8, 24, 48, 106, 146, 180, 185, 223, 241, 251], "tensor": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 21, 24, 36, 37, 38, 39, 40, 41, 42, 45, 47, 48, 49, 50, 51, 52, 54, 62, 65, 66, 68, 69, 70, 72, 73, 74, 76, 79, 80, 90, 95, 96, 97, 99, 100, 102, 104, 105, 107, 110, 113, 114, 115, 118, 120, 122, 123, 133, 138, 139, 140, 141, 147, 148, 149, 150, 153, 155, 156, 157, 159, 161, 162, 164, 167, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 192, 193, 194, 196, 197, 199, 201, 207, 210, 211, 214, 215, 216, 225, 226, 227, 229, 230, 231, 232, 233, 238, 241, 244, 245, 250, 253, 261, 262, 264, 266, 267, 268, 269, 270, 275, 276, 277, 284, 285, 286, 288, 289, 290], "physic": [1, 17, 112, 173, 231, 242, 259], "memori": [1, 7, 8, 12, 13, 20, 21, 23, 24, 44, 53, 54, 56, 60, 93, 100, 103, 104, 105, 108, 111, 113, 115, 122, 133, 137, 138, 139, 140, 141, 143, 151, 155, 156, 161, 162, 163, 167, 177, 182, 184, 186, 189, 192, 196, 197, 199, 200, 203, 207, 216, 226, 227, 231, 233, 250, 260, 261, 262, 264, 266, 267, 268, 275, 278, 280, 284], "map": [1, 8, 15, 36, 54, 57, 96, 98, 100, 105, 110, 112, 113, 122, 141, 146, 156, 157, 162, 170, 171, 172, 179, 180, 183, 192, 196, 199, 207, 209, 231, 241, 242, 244, 284, 288], "arrai": [1, 8, 35, 36, 47, 48, 51, 56, 65, 77, 78, 90, 95, 96, 103, 112, 113, 120, 121, 146, 147, 163, 178, 185, 192, 225, 278], "desir": [1, 4, 7, 12, 15, 17, 20, 54, 57, 80, 87, 105, 122, 141, 155, 177, 189, 192, 196, 223, 226, 229, 256, 259, 264, 266, 268, 276, 286], "hyperparamet": [1, 8, 17, 21, 57, 113, 122, 123, 133, 136, 138, 145, 146, 244, 262, 275, 280], "temporari": [1, 7, 145], "directori": [1, 7, 8, 15, 37, 54, 56, 57, 93, 102, 105, 122, 125, 128, 145, 146, 147, 161, 185, 189, 192, 209, 217, 223, 240, 250, 259, 266, 268], "disk": [1, 9, 37, 98, 102, 115, 122, 156, 173, 227, 231, 232, 240, 250, 251, 266, 267], "along": [1, 7, 8, 12, 17, 21, 35, 36, 44, 47, 53, 54, 58, 59, 60, 61, 88, 95, 96, 98, 99, 100, 102, 103, 104, 105, 109, 110, 113, 114, 128, 139, 140, 146, 147, 151, 152, 156, 170, 177, 180, 182, 190, 192, 196, 197, 255, 264, 277, 282, 284, 286, 290], "dimens": [1, 7, 8, 15, 17, 23, 36, 44, 51, 53, 54, 96, 98, 100, 102, 109, 110, 112, 113, 133, 138, 143, 146, 156, 157, 164, 172, 177, 178, 179, 181, 193, 196, 197, 226, 242, 256, 264, 276, 280, 288, 290], "feed": [1, 8, 15, 24, 48, 51, 54, 98, 100, 104, 105, 108, 110, 115, 122, 143, 146, 147, 153, 163, 180, 185, 190, 209, 229, 245], "adapt": [1, 2, 17, 21, 28, 93, 98, 115, 145, 201, 227, 264, 284], "divid": [1, 12, 13, 14, 15, 17, 18, 24, 90, 105, 107, 142, 155, 171, 173, 183, 256, 259], "yield": [1, 8, 14, 15, 21, 24, 40, 42, 103, 113, 122, 143, 144, 181, 183, 200, 215, 242, 268, 278, 284], "regard": [1, 8, 9, 14, 17, 122, 161, 162, 179, 189, 197, 255], "200": [1, 8, 156, 164, 183, 215, 268], "random_crop_len": 1, "25": [1, 37, 77, 80, 95, 105, 113, 120, 123, 128, 139, 182, 192, 215, 227, 232, 262, 268], "balanc": [1, 8, 23, 153, 189, 197, 223], "choic": [1, 4, 8, 12, 19, 93, 145, 147, 155, 173, 197, 205, 242], "heterogen": [1, 290], "figur": [1, 12, 15, 17, 37, 54, 80, 87, 98, 105, 137, 138, 142, 143, 145, 156, 161, 173, 181, 189, 190, 192, 196], "dataflow": 1, "8": [1, 3, 5, 7, 8, 9, 21, 24, 37, 93, 100, 101, 110, 113, 120, 121, 140, 143, 149, 153, 161, 164, 175, 177, 178, 189, 192, 196, 197, 203, 207, 208, 209, 210, 211, 215, 226, 232, 242, 248, 259, 260, 264, 266, 268, 270, 277, 284, 285, 289], "1000": [1, 2, 24, 47, 102, 104, 128, 139, 140, 144, 161, 179, 190, 207, 223, 227, 241, 284], "known": [1, 4, 7, 15, 21, 95, 143, 155, 159, 160, 177, 180, 185, 196, 197, 203, 227, 241, 251, 266, 284], "utd": 1, "64": [1, 7, 8, 18, 21, 23, 24, 37, 41, 47, 77, 93, 103, 110, 113, 139, 140, 143, 156, 157, 172, 178, 181, 182, 197, 203, 215, 227, 232, 246, 264, 279, 284, 288], "reproduc": [1, 15, 57, 80, 98, 103, 105, 161, 179, 180, 183, 194, 215, 227, 242], "realiz": [1, 21, 284], "sever": [1, 2, 3, 4, 9, 13, 14, 18, 20, 24, 35, 41, 45, 49, 51, 57, 58, 59, 80, 105, 107, 140, 143, 146, 152, 155, 163, 170, 171, 173, 176, 179, 181, 182, 189, 190, 194, 196, 200, 215, 216, 227, 241, 250, 251, 259, 277, 282], "qnet": 1, "ve": [1, 7, 8, 12, 21, 49, 51, 55, 95, 96, 98, 100, 103, 104, 113, 144, 156, 160, 162, 170, 172, 173, 182, 190, 196, 197, 208, 209, 227, 268, 275, 277, 278, 279, 284], "becaus": [1, 2, 4, 7, 8, 12, 15, 17, 18, 19, 20, 21, 24, 35, 37, 42, 44, 47, 48, 51, 53, 54, 56, 57, 60, 61, 80, 90, 93, 95, 96, 98, 100, 103, 105, 106, 107, 109, 113, 114, 115, 118, 122, 128, 131, 140, 141, 144, 146, 149, 150, 153, 156, 159, 162, 163, 164, 167, 172, 173, 177, 181, 183, 185, 187, 189, 194, 196, 199, 200, 201, 205, 215, 227, 239, 242, 244, 245, 256, 268, 275, 277, 284, 288], "_must_": 1, "off": [1, 12, 20, 24, 28, 35, 37, 47, 54, 100, 102, 103, 122, 139, 145, 146, 161, 170, 179, 181, 182, 183, 192, 208, 275], "dictat": [1, 17], "introduc": [1, 9, 14, 18, 20, 21, 28, 36, 39, 59, 93, 96, 105, 107, 120, 121, 138, 140, 142, 148, 153, 161, 164, 170, 181, 183, 184, 185, 192, 194, 196, 197, 203, 207, 208, 216, 239, 242, 256, 257, 259, 267, 269, 270, 275, 277, 278, 279, 282, 284, 288], "outdat": 1, "trick": [1, 4, 8, 13, 54, 103, 150, 155, 162], "multi": [1, 7, 8, 17, 23, 51, 54, 57, 58, 59, 61, 65, 95, 96, 100, 103, 107, 136, 138, 140, 141, 143, 151, 152, 153, 156, 179, 181, 184, 186, 189, 199, 209, 211, 242, 259, 262, 280], "altern": [1, 8, 13, 53, 54, 110, 128, 139, 157, 160, 164, 176, 179, 185, 189, 192, 194, 200, 201, 209, 239, 242, 257, 268, 278, 279], "hack": [1, 239, 275], "find": [1, 2, 4, 7, 8, 12, 13, 21, 35, 37, 44, 53, 80, 87, 88, 90, 93, 98, 100, 103, 106, 109, 113, 136, 138, 139, 142, 146, 155, 159, 161, 171, 180, 183, 185, 189, 196, 197, 217, 223, 225, 227, 240, 275, 276, 277, 278, 279, 284], "well": [1, 3, 4, 7, 8, 12, 13, 14, 24, 37, 44, 48, 53, 54, 58, 87, 90, 93, 96, 98, 105, 107, 109, 113, 115, 122, 128, 131, 132, 139, 140, 141, 144, 145, 146, 149, 150, 155, 156, 159, 170, 171, 173, 175, 178, 181, 182, 183, 184, 185, 189, 190, 192, 194, 197, 199, 208, 209, 211, 216, 223, 227, 231, 239, 241, 244, 251, 252, 253, 256, 257, 259, 275, 276, 277, 280, 286], "despit": [1, 80, 148, 153], "fact": [1, 3, 4, 7, 8, 12, 15, 17, 24, 35, 44, 80, 95, 96, 98, 100, 103, 105, 107, 112, 144, 171, 179, 180, 190, 196, 197, 200], "part": [1, 3, 7, 8, 12, 13, 16, 17, 18, 20, 40, 47, 49, 54, 57, 80, 93, 95, 96, 100, 106, 108, 112, 113, 114, 138, 140, 143, 144, 146, 147, 150, 151, 155, 156, 160, 161, 168, 170, 171, 179, 185, 196, 197, 223, 225, 226, 239, 241, 246, 250, 253, 256, 264, 266, 268, 269, 275, 277, 279, 290], "made": [1, 8, 13, 18, 24, 57, 93, 96, 103, 105, 140, 142, 144, 155, 156, 173, 185, 190, 192, 196, 225, 242, 278, 290], "thank": [1, 24, 54, 113, 145, 146, 147, 155, 185, 200], "hardupd": 1, "softupd": [1, 156], "appropri": [1, 8, 12, 54, 96, 113, 145, 153, 171, 182, 190, 197, 200, 215, 216, 226, 267, 282], "locat": [1, 4, 8, 34, 37, 44, 53, 87, 96, 98, 112, 120, 155, 173, 179, 189, 199, 209, 223, 232, 242, 250, 266], "adam": [1, 8, 14, 16, 40, 51, 57, 74, 104, 107, 121, 131, 141, 155, 170, 180, 181, 183, 205, 206, 208, 209, 214, 260], "pretti": [1, 20, 48, 103, 120, 121, 162, 183, 288], "plot": [1, 8, 57, 80, 87, 95, 145, 156, 173, 180, 181, 190, 192, 201], "alreadi": [1, 2, 4, 7, 8, 13, 14, 18, 95, 98, 103, 105, 106, 113, 131, 143, 145, 153, 164, 170, 173, 175, 178, 179, 184, 190, 197, 207, 211, 215, 227, 229, 242, 243, 244, 245, 246, 260, 277, 279, 283], "mention": [1, 4, 7, 8, 13, 14, 18, 20, 57, 80, 90, 103, 105, 106, 122, 139, 143, 155, 156, 173, 180, 182, 189, 192, 196, 200, 209, 223, 231, 239, 250, 259], "greater": [1, 14, 54, 57, 96, 121, 144, 259, 289], "concret": [1, 7, 8, 9, 12, 14, 95, 173, 179, 196, 275], "takeawai": [1, 125, 200, 242], "further": [1, 7, 8, 12, 24, 51, 80, 93, 100, 105, 113, 143, 155, 161, 173, 177, 179, 192, 193, 194, 196, 208, 216, 231, 249, 268, 280, 282, 283, 290], "might": [1, 4, 7, 9, 12, 13, 18, 19, 20, 35, 42, 48, 55, 56, 57, 58, 95, 98, 103, 105, 106, 110, 112, 115, 118, 120, 131, 141, 150, 151, 152, 153, 155, 160, 162, 171, 173, 180, 183, 184, 185, 189, 194, 196, 197, 199, 200, 211, 227, 228, 232, 239, 242, 246, 256, 259, 266, 268, 275, 283, 289], "dispatch": [1, 4, 7, 18, 137, 138, 141, 176, 200, 203, 215, 223, 226, 252], "distpatch": 1, "iql": 1, "flexibl": [1, 2, 7, 8, 28, 54, 90, 95, 113, 115, 122, 133, 138, 140, 141, 151, 200, 209, 227, 282], "runnable_code_remov": [1, 15, 16, 17, 19, 21, 28, 35, 36, 39, 40, 41, 42, 44, 45, 47, 48, 49, 53, 54, 56, 57, 67, 68, 70, 72, 73, 74, 78, 80, 90, 93, 95, 96, 98, 99, 100, 103, 104, 105, 106, 107, 109, 110, 112, 114, 115, 117, 118, 120, 121, 122, 125, 128, 144, 145, 146, 147, 149, 156, 157, 159, 160, 162, 163, 164, 165, 167, 170, 171, 172, 173, 179, 180, 184, 185, 187, 189, 193, 194, 196, 197, 199, 200, 201, 206, 214, 225, 226, 228, 229, 231, 232, 233, 239, 240, 241, 242, 244, 245, 246, 252, 253, 254, 255, 257, 267, 268, 275, 276, 278, 280, 288], "minut": [1, 15, 16, 17, 19, 35, 36, 37, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 73, 77, 78, 80, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 118, 125, 128, 131, 142, 144, 145, 146, 147, 149, 157, 159, 160, 161, 162, 163, 164, 167, 170, 171, 172, 173, 177, 178, 179, 180, 184, 185, 187, 190, 194, 196, 199, 200, 201, 206, 214, 228, 231, 233, 239, 246, 252, 253, 254, 255, 257, 268, 275, 276, 277, 278, 280, 288], "002": [1, 15, 16, 17, 19, 22, 35, 36, 40, 42, 43, 45, 47, 49, 52, 53, 73, 75, 78, 79, 93, 95, 100, 101, 103, 106, 110, 111, 112, 115, 118, 119, 123, 125, 140, 144, 145, 146, 149, 157, 160, 163, 167, 170, 171, 172, 179, 180, 185, 186, 187, 201, 206, 214, 228, 231, 233, 238, 239, 246, 248, 252, 253, 254, 255, 257, 262, 275, 276, 278, 280, 285, 288], "jupyt": [1, 15, 16, 17, 19, 21, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 67, 68, 70, 72, 73, 74, 77, 78, 80, 87, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 131, 144, 145, 146, 147, 149, 156, 157, 159, 160, 161, 162, 163, 164, 165, 167, 170, 171, 172, 173, 177, 179, 180, 184, 185, 187, 189, 190, 192, 193, 194, 196, 197, 199, 200, 201, 206, 214, 225, 226, 227, 228, 229, 231, 232, 233, 239, 240, 241, 242, 243, 244, 245, 246, 252, 253, 254, 255, 257, 267, 268, 275, 276, 277, 278, 280, 288], "notebook": [1, 15, 16, 17, 19, 21, 23, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 67, 68, 70, 72, 73, 74, 77, 78, 80, 87, 88, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 131, 144, 145, 146, 147, 149, 156, 157, 159, 160, 161, 162, 163, 164, 165, 167, 170, 171, 172, 173, 177, 179, 180, 184, 185, 187, 189, 190, 192, 193, 194, 196, 197, 199, 200, 201, 206, 214, 225, 226, 227, 228, 229, 231, 232, 233, 239, 240, 241, 242, 243, 244, 245, 246, 252, 253, 254, 255, 257, 267, 268, 275, 276, 277, 278, 280, 288], "coding_ddpg": [1, 22, 262], "ipynb": [1, 15, 16, 17, 19, 21, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 67, 68, 70, 72, 73, 74, 77, 78, 80, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 131, 144, 145, 146, 147, 149, 156, 157, 159, 160, 161, 162, 163, 164, 165, 167, 170, 171, 172, 173, 177, 179, 180, 184, 185, 187, 189, 193, 194, 196, 197, 199, 200, 201, 206, 214, 225, 226, 227, 228, 229, 231, 232, 233, 239, 240, 241, 242, 243, 244, 245, 246, 252, 253, 254, 255, 257, 267, 268, 275, 276, 277, 278, 280, 288], "python": [1, 3, 8, 9, 13, 15, 16, 17, 18, 21, 22, 23, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 58, 60, 61, 62, 67, 68, 70, 72, 73, 74, 77, 78, 80, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 125, 128, 131, 132, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 167, 170, 171, 172, 173, 177, 178, 179, 180, 182, 184, 185, 187, 189, 193, 194, 196, 197, 199, 200, 201, 206, 209, 210, 211, 214, 216, 223, 225, 226, 227, 228, 229, 231, 232, 233, 239, 240, 241, 242, 243, 244, 245, 246, 248, 252, 253, 254, 256, 259, 261, 262, 264, 266, 267, 268, 269, 275, 276, 277, 278, 280, 282, 283, 288, 290], "sourc": [1, 3, 5, 7, 8, 13, 14, 15, 16, 17, 19, 20, 21, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 60, 67, 68, 70, 72, 73, 74, 77, 78, 80, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 131, 140, 143, 144, 145, 146, 147, 149, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 167, 170, 171, 172, 173, 176, 177, 179, 180, 181, 183, 184, 185, 187, 189, 192, 193, 194, 196, 197, 199, 200, 201, 206, 214, 216, 217, 225, 226, 227, 228, 229, 231, 232, 233, 239, 240, 241, 242, 243, 244, 245, 246, 252, 253, 254, 255, 257, 266, 267, 268, 269, 275, 276, 277, 278, 280, 288, 289, 290], "py": [1, 4, 5, 7, 8, 12, 13, 15, 16, 17, 19, 21, 22, 24, 28, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 128, 131, 139, 140, 141, 144, 145, 146, 147, 148, 149, 151, 153, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 167, 170, 171, 172, 173, 175, 176, 177, 179, 180, 182, 184, 185, 186, 187, 189, 193, 194, 196, 197, 199, 200, 201, 206, 210, 211, 214, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 252, 253, 254, 255, 256, 257, 259, 262, 264, 266, 267, 268, 275, 276, 277, 278, 280, 283, 285, 288, 289], "zip": [1, 8, 15, 16, 17, 19, 21, 23, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 67, 68, 70, 72, 73, 74, 77, 78, 80, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 131, 144, 145, 146, 147, 149, 156, 157, 159, 160, 161, 162, 163, 164, 165, 167, 170, 171, 172, 173, 177, 179, 180, 181, 183, 184, 185, 187, 189, 190, 192, 193, 194, 196, 197, 199, 200, 201, 206, 214, 225, 226, 227, 228, 229, 231, 232, 233, 239, 240, 241, 242, 243, 244, 245, 246, 252, 253, 254, 255, 257, 267, 268, 275, 276, 277, 278, 280, 284, 288], "The": [2, 3, 4, 5, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 28, 35, 36, 37, 40, 41, 44, 45, 47, 48, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 72, 73, 74, 78, 80, 87, 88, 90, 96, 97, 98, 100, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 125, 128, 129, 131, 133, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 153, 155, 156, 157, 159, 160, 161, 162, 163, 164, 167, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 183, 184, 187, 189, 192, 193, 194, 196, 197, 199, 201, 203, 205, 206, 207, 208, 209, 210, 211, 215, 216, 217, 218, 226, 227, 229, 231, 232, 239, 240, 241, 242, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 263, 264, 266, 267, 268, 269, 275, 276, 277, 278, 279, 280, 282, 283, 284, 286, 288, 289], "packag": [2, 4, 7, 8, 21, 23, 28, 48, 51, 56, 62, 65, 73, 74, 93, 104, 105, 107, 113, 117, 121, 128, 133, 134, 138, 139, 140, 153, 155, 160, 176, 178, 180, 183, 189, 192, 194, 211, 216, 225, 229, 232, 241, 245, 256, 261, 283, 284], "build": [2, 8, 9, 17, 24, 35, 37, 38, 39, 40, 41, 42, 44, 45, 51, 54, 65, 73, 74, 93, 95, 96, 97, 98, 99, 102, 103, 104, 106, 112, 113, 120, 121, 125, 131, 132, 133, 134, 138, 146, 147, 155, 156, 159, 168, 170, 172, 173, 179, 180, 181, 182, 183, 186, 196, 197, 202, 216, 227, 229, 241, 242, 253, 256, 262, 266, 270, 280, 288, 290], "highli": [2, 7, 8, 13, 23, 54, 93, 185, 197, 242, 288], "dynam": [2, 7, 8, 9, 12, 15, 17, 18, 24, 35, 47, 58, 70, 95, 105, 108, 111, 114, 121, 122, 131, 132, 133, 138, 148, 164, 177, 179, 216, 226, 230, 242, 248, 251, 253, 256, 261, 262, 263, 268], "neural": [2, 7, 16, 17, 21, 22, 35, 38, 39, 41, 47, 50, 52, 54, 56, 62, 73, 80, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 110, 112, 115, 117, 121, 128, 133, 135, 136, 137, 138, 145, 146, 147, 148, 149, 156, 168, 177, 179, 180, 182, 185, 186, 187, 190, 192, 201, 203, 215, 216, 223, 230, 238, 242, 246, 261, 262, 279, 282, 284], "network": [2, 3, 7, 9, 12, 15, 16, 17, 21, 24, 35, 38, 39, 40, 41, 42, 47, 50, 52, 54, 56, 62, 73, 74, 80, 95, 96, 98, 100, 104, 105, 106, 108, 109, 111, 112, 113, 115, 117, 121, 128, 131, 133, 135, 137, 138, 144, 145, 148, 149, 152, 153, 167, 168, 171, 173, 177, 182, 186, 189, 190, 192, 201, 203, 215, 216, 223, 230, 233, 238, 242, 246, 261, 262, 266, 279, 282, 284], "api": [2, 4, 5, 7, 10, 11, 12, 13, 14, 17, 18, 19, 23, 28, 36, 37, 39, 41, 44, 45, 53, 61, 87, 96, 117, 120, 122, 132, 133, 137, 138, 139, 140, 142, 143, 144, 145, 148, 153, 155, 160, 161, 162, 166, 172, 174, 175, 181, 182, 183, 189, 194, 196, 197, 199, 207, 208, 209, 210, 211, 216, 217, 225, 227, 228, 232, 241, 248, 249, 250, 251, 252, 253, 254, 255, 256, 259, 261, 262, 263, 264, 267, 268, 279, 282, 288, 290], "explor": [2, 8, 12, 17, 49, 54, 80, 118, 132, 133, 136, 138, 145, 150, 156, 161, 163, 170, 173, 175, 179, 180, 184, 185, 197, 200, 210, 225, 250, 253, 256, 259, 266, 279], "note": [2, 4, 7, 8, 12, 15, 18, 19, 20, 21, 23, 24, 28, 35, 47, 48, 49, 51, 54, 55, 57, 80, 90, 95, 96, 98, 100, 103, 104, 107, 108, 109, 110, 112, 113, 118, 120, 122, 128, 131, 139, 140, 141, 143, 144, 149, 150, 152, 153, 155, 157, 159, 161, 162, 164, 170, 172, 173, 176, 177, 181, 182, 183, 184, 189, 190, 192, 193, 194, 196, 197, 199, 200, 201, 203, 207, 208, 209, 211, 217, 232, 241, 244, 246, 250, 251, 252, 253, 259, 260, 263, 266, 267, 275, 276, 277, 278, 280, 284, 286, 288], "pleas": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 19, 24, 25, 26, 27, 48, 49, 51, 56, 63, 64, 86, 93, 131, 139, 140, 143, 153, 155, 157, 159, 160, 161, 164, 170, 172, 176, 181, 182, 183, 189, 192, 194, 196, 197, 199, 200, 201, 204, 209, 211, 212, 215, 216, 217, 219, 220, 221, 222, 223, 224, 226, 228, 256, 258, 259, 263, 266, 267, 269, 270, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 288, 289], "differenti": [2, 7, 8, 17, 23, 38, 39, 44, 50, 51, 62, 95, 121, 131, 133, 138, 156, 172, 180, 186, 187, 201, 262, 277], "requires_grad": [2, 4, 5, 8, 12, 35, 47, 51, 67, 68, 95, 103, 109, 113, 121, 123, 128, 138, 148, 150, 177, 231, 245, 262, 264, 277, 284], "track": [2, 7, 12, 17, 36, 40, 47, 57, 87, 95, 100, 102, 103, 107, 109, 113, 121, 131, 140, 142, 147, 148, 152, 156, 183, 185, 189, 210, 232, 240, 245, 255, 256, 283], "auto": [2, 3, 7, 8, 9, 12, 13, 15, 60, 139, 140, 161, 176, 196, 197, 216, 217, 227, 241, 259, 269, 279, 289], "x": [2, 4, 7, 8, 9, 15, 23, 24, 35, 44, 47, 51, 53, 54, 57, 67, 68, 72, 73, 74, 77, 78, 80, 90, 95, 98, 100, 102, 103, 105, 106, 107, 109, 113, 121, 122, 131, 139, 141, 143, 144, 146, 147, 148, 150, 153, 155, 161, 162, 171, 173, 175, 176, 177, 178, 181, 182, 183, 190, 192, 193, 194, 196, 199, 207, 208, 209, 211, 215, 216, 223, 227, 241, 243, 251, 253, 256, 263, 268, 269, 270, 279, 280, 282, 284], "std": [2, 7, 8, 9, 15, 18, 24, 56, 98, 105, 176, 178, 183, 192, 216, 227, 269, 275], "cout": [2, 8, 216], "endl": [2, 8, 216], "cpufloattyp": [2, 8], "y": [2, 7, 23, 35, 44, 45, 47, 51, 53, 57, 67, 68, 72, 73, 74, 77, 78, 80, 87, 90, 95, 100, 103, 105, 106, 109, 110, 113, 121, 131, 140, 144, 161, 175, 176, 189, 192, 194, 196, 207, 241, 251, 253, 269, 270, 277, 279], "wa": [2, 3, 4, 7, 14, 19, 21, 48, 56, 57, 80, 95, 96, 98, 100, 103, 104, 105, 106, 107, 109, 113, 118, 122, 131, 139, 143, 145, 148, 153, 155, 163, 167, 170, 171, 172, 173, 175, 177, 178, 179, 180, 183, 184, 185, 190, 196, 197, 200, 209, 223, 226, 227, 232, 234, 235, 236, 237, 256, 259, 268, 277, 278, 284], "result": [2, 4, 5, 7, 8, 9, 12, 13, 15, 17, 21, 24, 28, 35, 40, 42, 44, 47, 48, 56, 68, 77, 87, 88, 93, 95, 96, 98, 103, 104, 105, 109, 113, 114, 118, 121, 122, 125, 131, 140, 141, 142, 143, 144, 147, 153, 155, 156, 159, 161, 162, 163, 167, 172, 173, 176, 177, 178, 180, 181, 182, 183, 184, 190, 192, 193, 194, 196, 199, 200, 205, 207, 208, 214, 215, 217, 229, 231, 232, 239, 241, 242, 246, 250, 251, 253, 254, 255, 259, 260, 261, 263, 264, 266, 268, 276, 277, 278, 279, 280, 286, 289], "grad_fn": [2, 35, 47, 51, 95, 109, 113, 131, 144, 150, 177, 277], "name": [2, 4, 5, 7, 8, 12, 13, 15, 16, 17, 19, 21, 23, 24, 35, 55, 56, 57, 87, 106, 112, 113, 115, 118, 120, 122, 138, 140, 143, 145, 148, 153, 156, 161, 168, 171, 175, 176, 177, 179, 180, 181, 182, 184, 185, 186, 189, 192, 194, 197, 199, 201, 209, 211, 215, 217, 227, 231, 232, 241, 243, 255, 259, 262, 266, 282, 283, 284, 289], "addbackward1": 2, "z": [2, 7, 57, 90, 103, 109, 131, 196, 277], "27": [2, 56, 161, 183, 215, 227, 255, 268], "mulbackward1": 2, "meanbackward0": 2, "requires_grad_": [2, 35, 109, 113, 131], "exist": [2, 8, 12, 13, 14, 19, 21, 51, 57, 58, 65, 72, 88, 90, 103, 109, 113, 121, 138, 148, 155, 177, 178, 183, 184, 185, 187, 189, 192, 194, 196, 200, 207, 208, 210, 226, 227, 239, 242, 275, 276, 278, 283, 284], "flag": [2, 4, 7, 17, 47, 95, 109, 171, 185, 196, 231, 241, 246, 259, 290], "place": [2, 7, 8, 14, 17, 23, 44, 47, 49, 53, 57, 90, 96, 100, 102, 107, 109, 113, 140, 145, 153, 155, 157, 170, 172, 173, 177, 179, 185, 192, 194, 196, 197, 200, 201, 207, 209, 231, 239, 241, 242, 264, 275, 282, 288], "randn": [2, 4, 5, 7, 8, 9, 15, 51, 77, 109, 113, 121, 122, 148, 153, 161, 181, 183, 207, 217, 227, 256, 260, 269, 270, 277, 279, 282, 288], "b": [2, 4, 5, 7, 8, 21, 23, 35, 37, 47, 51, 67, 68, 77, 88, 95, 102, 103, 107, 110, 112, 113, 120, 121, 131, 144, 146, 147, 161, 162, 164, 178, 180, 194, 196, 197, 200, 227, 232, 251, 266, 270, 277, 279, 284], "sumbackward0": 2, "backprop": [2, 47, 77, 109, 113, 121, 146, 163], "scalar": [2, 7, 17, 18, 35, 47, 54, 57, 67, 95, 98, 103, 109, 121, 131, 190, 196, 214, 289], "backward": [2, 3, 4, 5, 8, 9, 12, 14, 15, 16, 18, 19, 20, 24, 35, 40, 47, 49, 51, 57, 67, 68, 77, 78, 95, 96, 98, 102, 104, 109, 110, 113, 121, 128, 131, 132, 137, 138, 139, 143, 144, 147, 151, 153, 155, 159, 162, 167, 172, 175, 181, 182, 183, 186, 189, 190, 196, 197, 200, 201, 205, 206, 207, 208, 209, 214, 216, 226, 232, 242, 245, 249, 253, 255, 260, 262, 277], "equival": [2, 7, 14, 35, 47, 95, 107, 121, 141, 159, 172, 175, 180, 182, 192, 196, 197, 200, 242, 257, 269, 275, 277, 280, 284], "print": [2, 7, 8, 14, 17, 23, 24, 36, 37, 41, 48, 49, 51, 54, 56, 57, 58, 77, 80, 90, 93, 95, 98, 100, 102, 103, 105, 107, 112, 113, 114, 117, 121, 122, 131, 139, 140, 141, 142, 147, 148, 149, 152, 153, 155, 156, 161, 171, 175, 176, 177, 178, 181, 182, 183, 185, 190, 193, 194, 196, 197, 200, 205, 207, 208, 209, 210, 211, 215, 216, 217, 226, 227, 232, 233, 242, 244, 257, 260, 263, 266, 270, 275, 277, 283, 284, 289], "d": [2, 4, 7, 8, 12, 24, 41, 57, 65, 67, 68, 77, 95, 96, 98, 100, 103, 107, 112, 113, 121, 140, 143, 145, 147, 149, 153, 155, 162, 163, 170, 175, 189, 192, 196, 200, 211, 254, 278], "dx": [2, 68, 107, 121, 150], "grad": [2, 4, 8, 15, 19, 35, 47, 51, 67, 95, 109, 113, 121, 131, 139, 144, 148, 150, 153, 155, 159, 162, 167, 170, 181, 182, 183, 200, 206, 214, 226, 245, 275, 288], "5000": [2, 102, 227, 277], "got": [2, 18, 24, 60, 96, 103, 106, 107, 109, 113, 153, 176, 182, 196, 256], "matrix": [2, 7, 8, 15, 21, 35, 44, 47, 53, 87, 95, 98, 100, 103, 106, 107, 109, 112, 113, 120, 143, 146, 147, 162, 167, 171, 184, 185, 192, 196, 197, 200, 201, 215, 216, 217, 223, 229, 242, 255, 261, 278, 280, 284, 288], "explan": [2, 57, 190, 231], "arriv": [2, 8, 18, 140, 153, 181, 242], "valu": [2, 4, 7, 8, 9, 15, 17, 23, 24, 35, 36, 40, 44, 45, 47, 51, 53, 54, 55, 60, 67, 80, 87, 90, 93, 95, 96, 98, 100, 103, 104, 105, 107, 109, 110, 112, 113, 115, 121, 131, 143, 144, 145, 148, 152, 153, 155, 160, 163, 175, 176, 177, 180, 181, 182, 183, 184, 185, 189, 192, 194, 197, 200, 201, 206, 226, 227, 232, 239, 240, 250, 259, 260, 264, 266, 275, 276, 277, 278, 280, 282, 290], "section": [2, 4, 7, 8, 12, 14, 18, 23, 24, 36, 37, 39, 40, 41, 42, 44, 47, 48, 51, 55, 56, 57, 80, 96, 99, 103, 104, 105, 106, 107, 110, 112, 113, 118, 131, 133, 135, 137, 141, 144, 148, 149, 155, 161, 163, 167, 173, 180, 181, 183, 189, 192, 196, 197, 199, 200, 203, 206, 214, 216, 217, 223, 226, 227, 231, 242, 251, 255, 263, 276, 277, 286], "look": [2, 4, 7, 8, 12, 13, 14, 15, 17, 20, 23, 37, 42, 44, 47, 48, 51, 53, 54, 55, 56, 57, 60, 80, 90, 93, 95, 96, 98, 100, 102, 103, 104, 106, 107, 109, 110, 112, 113, 114, 115, 122, 128, 131, 135, 139, 141, 143, 144, 145, 150, 155, 156, 157, 164, 167, 170, 173, 177, 178, 179, 182, 183, 184, 185, 189, 190, 192, 196, 197, 199, 200, 202, 210, 214, 215, 227, 229, 232, 240, 241, 243, 244, 245, 246, 251, 255, 269, 275, 278, 280, 282], "jacobian": [2, 47, 95, 133, 138, 159, 186, 262, 288], "product": [2, 3, 8, 44, 47, 53, 90, 95, 107, 115, 132, 133, 136, 138, 140, 155, 159, 175, 185, 186, 197, 227, 253, 262, 264, 288], "norm": [2, 17, 21, 24, 57, 100, 105, 132, 137, 138, 143, 171, 175, 177, 186, 192, 200, 262, 284], "1021": 2, "4020": 2, "314": 2, "6695": 2, "613": [2, 215], "4944": 2, "v": [2, 21, 23, 24, 35, 47, 57, 58, 60, 95, 102, 104, 109, 110, 112, 140, 143, 159, 180, 182, 189, 190, 200, 215, 254, 267, 268, 277, 284, 290], "0001": [2, 24, 93, 161], "kfloat": [2, 3, 4, 5, 269, 289], "102": 2, "4000": [2, 98, 102, 241], "1024": [2, 7, 23, 87, 105, 142, 205, 227], "0000": [2, 177, 277, 284], "stop": [2, 7, 35, 93, 95, 109, 147, 164, 170, 179, 181, 185, 189, 217, 232, 266], "histori": [2, 35, 44, 51, 53, 95, 103, 109, 148, 177], "put": [2, 7, 8, 12, 15, 17, 20, 36, 49, 54, 56, 90, 98, 100, 103, 133, 138, 139, 140, 155, 156, 171, 179, 180, 182, 183, 192], "nogradguard": 2, "block": [2, 4, 5, 7, 8, 12, 13, 15, 21, 24, 35, 36, 51, 54, 87, 95, 109, 114, 139, 142, 143, 155, 156, 161, 173, 175, 181, 182, 183, 184, 189, 192, 203, 207, 242, 246, 264, 268, 279, 284], "pow": [2, 7, 275], "no_grad": [2, 24, 35, 47, 95, 107, 109, 110, 113, 121, 139, 140, 161, 163, 178, 182, 190, 196, 216, 242, 249, 279, 282, 286], "Or": [2, 148, 170, 183, 263, 289], "content": [2, 4, 7, 17, 55, 61, 102, 103, 104, 113, 122, 129, 144, 153, 155, 173, 178, 179, 183, 185, 194, 196, 218, 227, 241, 255, 256, 266], "eq": [2, 24, 54, 139, 182, 196, 232], "bool": [2, 14, 17, 18, 176, 192, 259, 263, 279, 284], "is_leaf": [2, 131], "detach_": [2, 183], "register_hook": [2, 148], "retain_grad": [2, 123, 138, 201, 262], "doc": [2, 4, 8, 10, 54, 67, 80, 95, 103, 104, 105, 120, 121, 128, 141, 152, 155, 160, 173, 181, 183, 192, 196, 197, 217, 223, 226, 240, 254, 255, 280, 288], "applic": [2, 3, 14, 15, 17, 18, 37, 54, 65, 96, 100, 105, 115, 128, 133, 134, 135, 138, 139, 144, 145, 149, 153, 160, 170, 173, 177, 181, 183, 192, 196, 207, 208, 209, 214, 215, 217, 223, 242, 255, 259, 268, 277, 283, 289], "calcul": [2, 15, 21, 35, 40, 47, 48, 54, 57, 61, 80, 87, 90, 93, 95, 96, 98, 104, 105, 113, 131, 146, 147, 163, 180, 181, 183, 184, 185, 192, 197, 200, 211, 245, 264, 277, 284], "penalti": [2, 171, 178, 226], "h": [2, 4, 5, 7, 8, 9, 12, 13, 54, 131, 143, 161, 164, 175, 176, 199, 216, 241, 259], "model": [2, 3, 7, 12, 14, 17, 20, 28, 35, 37, 38, 39, 44, 45, 47, 48, 51, 53, 57, 58, 59, 61, 67, 70, 72, 73, 74, 92, 93, 95, 97, 99, 103, 106, 107, 108, 109, 111, 113, 116, 117, 118, 120, 121, 123, 132, 133, 134, 135, 136, 138, 139, 145, 146, 147, 148, 149, 152, 155, 159, 161, 162, 168, 170, 171, 172, 179, 180, 181, 182, 183, 184, 186, 193, 194, 196, 197, 200, 201, 203, 207, 208, 209, 210, 211, 215, 216, 217, 226, 230, 231, 233, 238, 239, 240, 245, 246, 249, 251, 253, 254, 259, 260, 261, 262, 264, 266, 268, 269, 279, 280, 283, 284, 288, 290], "linear": [2, 7, 8, 14, 20, 21, 24, 44, 47, 49, 51, 53, 73, 80, 98, 102, 103, 108, 120, 121, 122, 128, 139, 141, 143, 146, 147, 148, 153, 161, 162, 171, 175, 177, 181, 182, 183, 185, 190, 196, 200, 201, 203, 205, 206, 207, 208, 209, 210, 211, 214, 215, 216, 223, 226, 231, 233, 239, 240, 243, 244, 246, 260, 263, 268, 275, 279, 280, 282, 284, 286], "loss": [2, 3, 7, 8, 14, 17, 20, 21, 22, 24, 35, 41, 44, 47, 53, 70, 72, 73, 74, 77, 78, 80, 93, 95, 98, 102, 107, 112, 113, 121, 122, 131, 135, 138, 139, 140, 141, 146, 148, 155, 163, 164, 172, 175, 180, 182, 183, 185, 189, 190, 197, 216, 217, 240, 249, 260, 262, 277, 284], "target": [2, 3, 8, 17, 20, 23, 24, 40, 48, 51, 54, 60, 80, 96, 102, 103, 105, 107, 110, 112, 113, 118, 139, 147, 155, 156, 161, 170, 172, 173, 175, 176, 178, 180, 181, 182, 183, 185, 190, 192, 194, 196, 199, 216, 217, 223, 227, 229, 249, 263, 282, 289], "mseloss": [2, 15, 40, 51, 153, 181, 208, 209, 260], "grad_output": [2, 12, 13], "ones_lik": [2, 103, 277], "create_graph": [2, 150], "gradient_penalti": 2, "dim": [2, 7, 14, 36, 98, 102, 103, 113, 139, 141, 161, 175, 177, 178, 181, 182, 183, 190, 192, 215, 216, 256, 264, 276, 277, 289], "add": [2, 4, 5, 8, 9, 10, 12, 13, 15, 17, 18, 19, 21, 24, 40, 48, 51, 55, 80, 90, 93, 100, 103, 104, 107, 110, 118, 125, 137, 138, 139, 140, 143, 147, 148, 149, 155, 156, 160, 161, 162, 170, 172, 173, 176, 178, 179, 181, 182, 183, 185, 189, 193, 196, 200, 209, 227, 229, 232, 253, 257, 264, 268, 269, 275, 277, 283, 284, 289], "combined_loss": 2, "1042": 2, "0638": 2, "0103": 2, "0723": 2, "2543": 2, "1222": 2, "0071": 2, "0814": [2, 177], "1683": 2, "1052": 2, "0355": 2, "document": [2, 4, 7, 8, 19, 35, 51, 57, 65, 87, 90, 93, 95, 96, 100, 102, 103, 104, 109, 122, 128, 138, 153, 155, 156, 159, 160, 161, 182, 183, 184, 189, 192, 194, 196, 199, 209, 216, 217, 242, 250, 251, 253, 254, 257, 263, 267, 277, 282, 288, 289], "link": [2, 7, 8, 13, 15, 39, 41, 57, 87, 99, 113, 115, 125, 155, 159, 216, 256, 277, 279, 289], "ad": [2, 7, 8, 9, 13, 18, 23, 28, 35, 54, 55, 58, 80, 88, 90, 95, 98, 100, 102, 103, 104, 107, 109, 122, 139, 140, 146, 147, 148, 153, 156, 159, 162, 167, 170, 176, 177, 180, 184, 185, 196, 199, 216, 239, 241, 244, 254, 283], "subclass": [2, 7, 8, 17, 21, 36, 37, 72, 95, 98, 100, 113, 121, 141, 145, 156, 177, 182, 190, 199, 215, 225, 226, 230, 238, 253, 261, 262, 277, 280, 284], "encod": [2, 17, 44, 45, 51, 53, 100, 108, 111, 113, 140, 145, 156, 171, 179, 183, 192, 200, 226, 256, 262, 268, 284], "method": [2, 4, 7, 8, 9, 12, 13, 14, 15, 17, 20, 21, 24, 35, 36, 42, 44, 48, 51, 54, 56, 60, 80, 88, 90, 95, 96, 98, 100, 102, 103, 105, 107, 109, 113, 114, 122, 134, 138, 142, 145, 146, 150, 153, 156, 159, 160, 161, 162, 163, 171, 172, 173, 175, 176, 177, 179, 180, 181, 182, 190, 192, 194, 196, 197, 200, 201, 208, 209, 217, 225, 226, 229, 240, 241, 242, 246, 256, 259, 275, 279, 282, 284], "forward": [2, 3, 9, 12, 13, 14, 15, 17, 18, 20, 24, 35, 36, 41, 47, 49, 51, 54, 57, 61, 67, 68, 70, 77, 78, 90, 95, 98, 100, 102, 103, 105, 106, 107, 108, 110, 113, 114, 121, 122, 128, 131, 133, 138, 139, 140, 143, 144, 146, 149, 150, 151, 153, 155, 167, 170, 171, 172, 175, 177, 180, 181, 182, 183, 185, 186, 189, 190, 192, 194, 196, 197, 201, 206, 207, 208, 209, 210, 211, 214, 215, 216, 223, 226, 229, 232, 233, 242, 243, 256, 260, 262, 263, 279, 289], "detail": [2, 4, 5, 7, 8, 12, 13, 15, 18, 19, 20, 37, 40, 47, 48, 49, 57, 58, 80, 87, 88, 90, 100, 103, 104, 114, 118, 139, 141, 143, 145, 147, 149, 151, 153, 161, 167, 170, 183, 184, 189, 190, 193, 194, 196, 197, 203, 206, 210, 214, 215, 216, 217, 223, 225, 226, 227, 231, 241, 242, 251, 256, 263, 264, 266, 275, 276, 277, 278, 282, 283, 288], "namespac": [2, 4, 5, 8, 9, 12, 13, 36, 113, 118, 176, 194, 263, 280], "inherit": [2, 14, 18, 41, 56, 90, 98, 103, 104, 107, 160, 163, 179, 192, 199, 256, 266, 277, 280], "linearfunct": 2, "public": [2, 5, 12, 13, 18, 141, 176], "static": [2, 4, 5, 12, 13, 17, 95, 159, 176, 196, 197, 242, 268], "option": [2, 4, 5, 7, 8, 12, 13, 14, 39, 48, 50, 52, 56, 58, 87, 93, 95, 96, 99, 100, 103, 105, 115, 118, 120, 132, 134, 141, 142, 145, 151, 156, 157, 161, 164, 173, 175, 177, 178, 192, 194, 196, 197, 207, 214, 226, 227, 232, 242, 249, 250, 251, 254, 255, 257, 262, 266, 268], "autogradcontext": [2, 12, 13], "ctx": [2, 4, 7, 12, 13, 23, 150, 207], "save_for_backward": [2, 4, 7, 150], "mm": [2, 7, 203, 269, 289], "t": [2, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 21, 24, 35, 37, 39, 40, 44, 47, 48, 51, 55, 57, 58, 60, 65, 77, 80, 93, 95, 96, 98, 100, 102, 103, 105, 106, 107, 109, 110, 112, 113, 115, 118, 121, 122, 128, 131, 139, 140, 144, 150, 156, 157, 159, 160, 161, 162, 163, 164, 167, 170, 172, 173, 177, 178, 179, 180, 181, 183, 184, 185, 190, 192, 193, 194, 196, 197, 200, 201, 205, 206, 214, 215, 223, 226, 227, 229, 241, 242, 243, 244, 245, 252, 253, 254, 256, 257, 259, 263, 264, 266, 268, 275, 276, 277, 279, 284, 288, 289], "unsqueez": [2, 17, 51, 73, 102, 103, 113, 121, 172, 178, 181, 183, 190, 289], "expand_a": [2, 24], "tensor_list": [2, 12, 13, 155], "save": [2, 4, 8, 14, 15, 24, 35, 36, 37, 38, 39, 40, 44, 45, 48, 53, 54, 55, 57, 80, 93, 102, 104, 105, 123, 128, 138, 139, 141, 143, 145, 149, 161, 162, 175, 177, 181, 182, 183, 185, 186, 189, 192, 197, 216, 217, 229, 230, 231, 232, 240, 241, 242, 244, 245, 246, 251, 255, 261, 262, 266, 285, 289], "get_saved_vari": 2, "grad_input": [2, 150], "grad_weight": 2, "grad_bia": 2, "Then": [2, 4, 15, 18, 21, 28, 48, 49, 57, 80, 90, 106, 107, 110, 112, 113, 118, 125, 137, 138, 139, 153, 170, 175, 176, 177, 179, 180, 181, 183, 185, 189, 207, 211, 239, 264, 283, 284], "appli": [2, 3, 7, 8, 12, 13, 17, 18, 21, 24, 35, 36, 45, 56, 57, 73, 87, 90, 95, 98, 100, 103, 105, 107, 121, 135, 138, 139, 141, 146, 148, 149, 150, 153, 155, 157, 162, 163, 164, 167, 170, 171, 172, 175, 177, 179, 181, 182, 183, 185, 187, 192, 193, 196, 197, 199, 200, 201, 203, 205, 209, 210, 211, 216, 217, 225, 239, 242, 246, 249, 250, 253, 255, 257, 264, 266, 268, 275, 276, 280, 284, 286, 288], "5314": 2, "2807": 2, "4864": 2, "7608": 2, "9101": 2, "0073": 2, "mulconst": 2, "object": [2, 4, 7, 8, 9, 13, 14, 17, 22, 24, 35, 36, 37, 40, 41, 47, 51, 54, 57, 95, 96, 98, 100, 103, 105, 109, 113, 121, 122, 128, 135, 136, 138, 144, 146, 149, 155, 159, 160, 173, 176, 177, 181, 182, 183, 184, 186, 189, 190, 192, 196, 208, 209, 216, 227, 239, 241, 242, 244, 246, 256, 261, 262, 264, 280], "stash": 2, "saved_data": 2, "were": [2, 3, 7, 8, 15, 21, 23, 35, 57, 88, 90, 95, 100, 103, 105, 107, 109, 113, 125, 145, 148, 152, 153, 157, 164, 171, 179, 180, 182, 184, 185, 193, 196, 197, 200, 214, 223, 227, 231, 232, 239, 256, 259, 267, 275, 284, 288], "todoubl": 2, "On": [2, 7, 8, 12, 24, 99, 103, 113, 128, 140, 153, 155, 164, 171, 177, 181, 182, 194, 197, 199, 200, 201, 215, 223, 226, 242, 259, 284, 290], "easiest": [2, 7, 39, 99, 113, 162, 179, 196, 242], "your": [2, 4, 5, 8, 10, 12, 14, 15, 18, 19, 21, 22, 23, 24, 35, 36, 39, 41, 47, 48, 49, 51, 54, 55, 56, 58, 59, 60, 72, 80, 87, 93, 95, 96, 99, 100, 103, 104, 107, 109, 110, 112, 114, 115, 117, 118, 121, 122, 123, 125, 132, 133, 135, 136, 138, 139, 140, 141, 144, 146, 149, 150, 151, 152, 153, 155, 156, 159, 160, 162, 163, 164, 168, 170, 171, 173, 176, 177, 178, 179, 182, 183, 184, 187, 189, 190, 192, 194, 196, 197, 200, 202, 205, 210, 225, 226, 227, 232, 240, 241, 243, 244, 245, 246, 253, 254, 255, 256, 261, 262, 266, 269, 270, 279, 283, 284, 286, 288, 289, 290], "tabl": [2, 20, 112, 120, 138, 140, 155, 161, 182, 183, 189, 196, 197, 215, 227, 232], "set_data": 2, "data": [2, 3, 4, 7, 9, 10, 14, 15, 17, 20, 21, 23, 28, 35, 36, 39, 40, 44, 45, 47, 50, 51, 52, 53, 56, 65, 77, 78, 80, 87, 90, 95, 96, 98, 102, 104, 105, 106, 107, 108, 109, 110, 112, 115, 121, 122, 134, 135, 138, 144, 145, 151, 155, 156, 157, 160, 161, 162, 163, 164, 167, 168, 170, 172, 173, 175, 178, 180, 181, 182, 183, 194, 199, 200, 201, 203, 209, 210, 211, 215, 216, 217, 223, 225, 226, 227, 231, 232, 233, 239, 240, 246, 249, 255, 256, 260, 261, 262, 267, 268, 276, 278, 279, 280, 282, 284, 288, 289, 290], "output_nr": 2, "after": [2, 3, 7, 8, 9, 13, 15, 17, 18, 19, 21, 23, 24, 28, 35, 36, 37, 44, 47, 49, 51, 54, 57, 58, 93, 95, 96, 100, 105, 106, 107, 110, 112, 113, 115, 122, 131, 138, 140, 141, 142, 143, 146, 147, 148, 149, 152, 153, 155, 156, 157, 161, 163, 164, 170, 171, 173, 175, 176, 177, 178, 179, 180, 182, 183, 185, 187, 189, 190, 196, 197, 199, 201, 209, 226, 227, 231, 232, 239, 240, 242, 251, 253, 255, 260, 263, 282, 283, 284, 286, 289], "file": [2, 4, 5, 7, 8, 12, 13, 18, 22, 24, 43, 52, 55, 56, 57, 60, 69, 75, 79, 87, 88, 91, 93, 95, 96, 101, 109, 111, 113, 119, 120, 123, 125, 140, 144, 146, 147, 153, 155, 161, 170, 173, 176, 178, 186, 189, 192, 196, 199, 203, 209, 210, 211, 216, 226, 227, 231, 232, 238, 240, 241, 243, 248, 250, 251, 255, 256, 259, 262, 264, 267, 269, 270, 278, 279, 280, 283, 285, 289], "bug": [2, 7, 13, 102, 161, 200, 256, 266, 269, 279], "report": [2, 13, 21, 57, 80, 93, 95, 98, 100, 104, 132, 138, 142, 161, 173, 181, 183, 184, 232, 253, 266, 269, 279, 284], "github": [2, 3, 8, 9, 13, 14, 20, 24, 54, 58, 59, 60, 65, 113, 118, 131, 139, 140, 142, 143, 151, 152, 153, 155, 157, 163, 172, 175, 176, 181, 182, 183, 189, 199, 203, 209, 211, 216, 217, 225, 256, 264, 267, 268, 269, 279, 289], "issu": [2, 7, 8, 9, 12, 24, 56, 131, 140, 141, 152, 157, 160, 161, 164, 172, 173, 178, 189, 194, 196, 197, 200, 201, 203, 209, 210, 223, 226, 228, 239, 256, 266, 267, 268, 269, 275, 277, 279, 280, 283], "fix": [2, 17, 21, 28, 35, 54, 55, 56, 57, 105, 131, 144, 180, 181, 201, 223, 241, 242, 254, 268, 284], "soon": [2, 7, 57, 164, 170, 208, 216], "overview": [2, 7, 8, 14, 58, 60, 98, 133, 134, 138, 146, 147, 153, 155, 176, 179, 181, 182, 183, 185, 189, 200, 203, 205, 262, 275, 276, 278, 285, 290], "alwai": [2, 3, 4, 5, 8, 17, 20, 23, 24, 45, 57, 98, 100, 104, 110, 112, 113, 141, 142, 143, 144, 149, 155, 156, 173, 178, 179, 180, 181, 183, 196, 197, 199, 203, 254, 275, 279], "problem": [2, 8, 14, 17, 18, 23, 54, 56, 57, 106, 108, 112, 113, 121, 128, 145, 156, 161, 162, 171, 179, 181, 183, 189, 193, 194, 197, 203, 227, 228, 231, 242, 256, 259, 275, 277], "question": [2, 7, 8, 12, 13, 21, 54, 96, 140, 155, 160, 185, 197, 203, 227, 276, 284], "forum": [2, 7, 8, 48, 131, 160, 201, 203], "touch": [2, 8, 17, 203], "view": [3, 13, 14, 17, 18, 20, 24, 51, 55, 58, 60, 61, 65, 87, 96, 102, 103, 109, 112, 113, 115, 121, 122, 139, 142, 143, 145, 151, 152, 153, 155, 161, 175, 176, 177, 181, 182, 183, 184, 185, 190, 206, 209, 210, 211, 214, 223, 225, 233, 240, 243, 257, 264, 266, 280, 289], "edit": [3, 8, 14, 15, 20, 24, 53, 55, 65, 142, 143, 153, 155, 160, 161, 175, 176, 178, 181, 182, 183, 209, 211, 264, 268], "code": [3, 4, 5, 7, 8, 9, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 28, 35, 36, 37, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 60, 61, 62, 67, 68, 70, 72, 73, 74, 77, 78, 80, 87, 88, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 125, 128, 131, 132, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 167, 168, 170, 171, 172, 173, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 192, 193, 194, 196, 197, 199, 200, 201, 202, 203, 206, 207, 209, 210, 211, 214, 216, 225, 226, 227, 228, 229, 231, 232, 233, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 252, 253, 254, 255, 256, 257, 260, 261, 262, 264, 266, 267, 268, 276, 277, 278, 279, 280, 283, 284, 288], "prerequisit": [3, 4, 5, 19, 58, 60, 61, 108, 125, 140, 142, 143, 148, 151, 152, 153, 155, 156, 164, 175, 176, 181, 182, 183, 192, 193, 197, 200, 208, 209, 211, 242, 264, 267, 283], "frontend": [3, 4, 5, 13, 89, 91, 133, 137, 138, 216, 249, 262, 269, 280, 290], "semant": [3, 4, 8, 54, 73, 103, 108, 110, 111, 121, 141, 155, 196, 197, 262, 277, 278, 280, 285, 288, 290], "11": [3, 7, 8, 14, 21, 23, 77, 120, 139, 140, 159, 177, 178, 183, 192, 194, 197, 210, 211, 215, 227, 232, 277], "nvidia": [3, 7, 21, 55, 149, 155, 164, 194, 211, 226, 242, 261, 284], "toolkit": [3, 108, 163, 173, 196, 240], "releas": [3, 4, 8, 13, 21, 55, 120, 122, 139, 140, 144, 170, 182, 184, 189, 207, 208, 215, 216, 232, 242, 246, 256, 284], "greatli": [3, 8, 54, 95, 113, 180], "reduc": [3, 8, 14, 21, 24, 37, 40, 47, 61, 98, 100, 105, 120, 132, 139, 140, 141, 143, 145, 146, 149, 151, 153, 155, 162, 163, 164, 170, 173, 177, 178, 181, 183, 189, 192, 194, 197, 201, 210, 226, 227, 230, 231, 248, 250, 251, 259, 260, 261, 262, 264, 269, 284], "cpu": [3, 4, 7, 8, 9, 12, 13, 14, 17, 18, 23, 24, 36, 41, 44, 47, 48, 53, 54, 57, 67, 78, 80, 87, 88, 93, 103, 105, 107, 113, 115, 120, 121, 128, 132, 133, 138, 139, 141, 142, 143, 146, 153, 155, 164, 171, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 189, 192, 197, 199, 207, 208, 215, 217, 226, 227, 228, 231, 232, 239, 256, 261, 262, 266, 267, 269, 282, 286, 289, 290], "overhead": [3, 7, 8, 13, 21, 61, 87, 120, 139, 140, 143, 148, 153, 162, 164, 173, 178, 181, 183, 184, 189, 194, 200, 208, 227, 232, 242, 252, 259, 266, 268, 269, 280, 284], "increas": [3, 7, 8, 23, 24, 28, 40, 41, 48, 80, 87, 88, 93, 96, 105, 113, 139, 140, 141, 143, 145, 146, 147, 151, 170, 173, 178, 189, 197, 201, 210, 215, 225, 226, 227, 241, 242, 245, 246, 259, 261, 268, 280], "mostli": [3, 13, 24, 90, 95, 105, 146, 183, 185, 263], "util": [3, 4, 5, 7, 13, 18, 24, 28, 37, 41, 48, 54, 56, 58, 60, 87, 98, 102, 104, 113, 120, 121, 122, 128, 133, 138, 139, 140, 141, 143, 146, 148, 155, 159, 161, 162, 164, 171, 173, 175, 176, 178, 179, 182, 184, 185, 189, 190, 192, 194, 199, 205, 208, 209, 216, 223, 225, 226, 240, 241, 248, 249, 251, 253, 255, 259, 261, 262, 267, 280, 282, 284, 286, 289], "deploy": [3, 105, 132, 136, 145, 216, 255, 269, 282], "import": [3, 4, 5, 7, 8, 9, 12, 13, 14, 17, 21, 23, 24, 28, 35, 37, 47, 51, 54, 55, 56, 57, 58, 77, 80, 87, 90, 95, 96, 98, 100, 102, 103, 105, 107, 110, 113, 117, 121, 122, 125, 131, 139, 140, 141, 142, 143, 148, 149, 150, 153, 155, 156, 159, 160, 161, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 189, 190, 193, 194, 196, 197, 201, 203, 205, 206, 207, 208, 209, 211, 215, 216, 217, 223, 227, 239, 240, 241, 242, 246, 249, 251, 256, 257, 259, 260, 263, 264, 266, 269, 270, 275, 277, 278, 279, 280, 282, 283, 284, 286, 289], "appear": [3, 14, 17, 112, 196, 223], "won": [3, 7, 13, 47, 113, 121, 131, 139, 150, 159, 167, 172, 179, 196, 197, 226, 279], "heart": [3, 54, 215], "veri": [3, 4, 5, 7, 8, 12, 17, 18, 23, 24, 28, 44, 49, 51, 53, 54, 70, 80, 90, 96, 100, 107, 109, 113, 121, 128, 139, 143, 144, 146, 170, 171, 180, 181, 183, 184, 185, 187, 189, 190, 197, 199, 201, 223, 232, 241, 254, 275, 277], "time": [3, 4, 7, 8, 9, 12, 14, 15, 16, 17, 18, 19, 21, 24, 35, 36, 37, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 65, 70, 73, 77, 78, 80, 88, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 118, 121, 122, 125, 128, 131, 132, 136, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 157, 159, 160, 161, 162, 163, 164, 167, 170, 171, 172, 173, 177, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 192, 194, 196, 197, 199, 200, 201, 206, 207, 208, 209, 214, 215, 217, 223, 226, 227, 228, 230, 231, 233, 239, 242, 252, 253, 254, 255, 257, 261, 266, 268, 275, 276, 277, 278, 279, 280, 282, 284, 288, 289, 290], "tool": [3, 8, 12, 17, 56, 87, 93, 95, 96, 100, 104, 106, 121, 136, 139, 153, 155, 156, 161, 173, 181, 184, 189, 190, 192, 200, 210, 223, 231, 253, 259, 266], "compil": [3, 5, 8, 10, 12, 13, 19, 21, 90, 106, 133, 137, 138, 155, 160, 186, 196, 203, 216, 217, 227, 230, 232, 241, 242, 248, 249, 256, 261, 262, 268, 269, 280, 290], "boost": [3, 105, 107, 161, 162, 203, 216, 217, 268, 279, 290], "would": [3, 4, 7, 8, 12, 17, 19, 20, 23, 24, 35, 47, 54, 58, 60, 80, 93, 95, 98, 100, 103, 105, 109, 112, 113, 118, 122, 128, 131, 139, 142, 143, 144, 145, 146, 147, 149, 150, 153, 156, 160, 161, 162, 164, 170, 171, 172, 176, 178, 179, 180, 181, 182, 183, 185, 192, 194, 196, 197, 199, 200, 201, 203, 209, 211, 223, 250, 251, 255, 259, 266, 267, 277, 278, 288, 290], "demonstr": [3, 4, 5, 17, 19, 20, 21, 42, 47, 55, 62, 87, 90, 96, 98, 104, 114, 118, 132, 134, 135, 138, 139, 140, 142, 143, 144, 149, 150, 153, 157, 159, 160, 161, 164, 167, 173, 175, 176, 179, 181, 182, 183, 184, 189, 192, 193, 196, 197, 200, 201, 206, 208, 209, 211, 214, 215, 226, 227, 231, 232, 245, 250, 252, 253, 254, 255, 257, 259, 260, 261, 263, 264, 266, 267, 268, 269, 277, 279, 280, 282, 283, 284, 286], "mnist": [3, 8, 37, 48, 51, 80, 98, 102, 104, 133, 138, 139, 145, 155, 157, 172, 182, 187, 190, 201, 229, 261], "libtorch": [3, 4, 8, 216, 289], "counterpart": [3, 21, 161, 196, 211, 216, 284], "syntax": [3, 53, 89, 91, 92, 122, 262], "step": [3, 4, 7, 8, 9, 12, 13, 14, 15, 17, 18, 20, 21, 23, 24, 35, 39, 40, 47, 48, 51, 54, 57, 65, 80, 87, 90, 95, 98, 102, 104, 105, 106, 107, 113, 115, 118, 134, 138, 139, 140, 141, 146, 147, 148, 149, 151, 153, 155, 156, 161, 163, 167, 171, 173, 180, 181, 182, 183, 184, 185, 186, 190, 192, 194, 196, 197, 202, 205, 206, 208, 209, 216, 217, 223, 226, 239, 240, 242, 249, 255, 260, 262, 263, 266, 267, 268, 270, 279, 280, 282, 284, 286, 289], "depict": [3, 102, 197], "chunk": [3, 7, 60, 155, 170, 173, 175, 264], "batch": [3, 7, 8, 20, 21, 24, 37, 40, 41, 42, 49, 51, 54, 56, 57, 58, 60, 61, 80, 87, 93, 95, 96, 98, 102, 103, 104, 105, 110, 113, 122, 128, 132, 134, 137, 138, 139, 140, 141, 143, 144, 145, 146, 151, 155, 156, 157, 163, 164, 167, 170, 172, 173, 175, 178, 179, 180, 182, 183, 184, 186, 187, 189, 190, 192, 194, 197, 199, 200, 201, 226, 227, 262, 264, 268, 277, 280, 284, 288, 290], "data_load": [3, 8, 24], "optim": [3, 7, 8, 12, 13, 14, 15, 17, 18, 20, 21, 23, 24, 35, 36, 37, 38, 39, 42, 44, 45, 47, 51, 54, 58, 60, 65, 70, 71, 72, 75, 87, 90, 93, 95, 98, 102, 105, 106, 114, 118, 122, 128, 131, 132, 133, 135, 136, 138, 139, 140, 143, 148, 149, 151, 153, 155, 156, 157, 161, 163, 164, 171, 172, 173, 177, 178, 179, 180, 181, 182, 185, 186, 189, 190, 192, 193, 194, 196, 199, 200, 201, 203, 208, 209, 214, 216, 217, 226, 227, 231, 239, 243, 246, 248, 249, 250, 253, 255, 256, 261, 262, 268, 270, 275, 280, 282, 284, 289, 290], "zero_grad": [3, 8, 24, 40, 51, 95, 102, 113, 139, 140, 141, 153, 155, 170, 181, 183, 190, 197, 208, 209, 216, 245, 249], "nll_loss": [3, 139, 155, 182], "updat": [3, 8, 13, 14, 15, 16, 17, 20, 21, 24, 40, 47, 48, 54, 57, 74, 77, 87, 95, 105, 107, 112, 113, 114, 121, 122, 139, 140, 141, 145, 149, 153, 156, 164, 170, 179, 180, 182, 183, 189, 197, 200, 203, 205, 209, 214, 226, 239, 244, 260, 275, 283, 284], "captur": [3, 8, 57, 95, 114, 115, 117, 132, 138, 139, 159, 192, 193, 194, 196, 197, 200, 217, 227, 256, 266, 269], "But": [3, 8, 12, 13, 48, 49, 57, 80, 96, 103, 109, 112, 144, 153, 164, 170, 171, 172, 180, 196, 199, 217, 227, 275, 278, 288], "slightli": [3, 7, 17, 140, 155, 156, 173, 178, 185, 227, 242, 278], "prealloc": 3, "reus": [3, 13, 70, 113, 121, 150, 159, 171, 180, 197, 242, 246, 259], "tensoropt": [3, 269], "floatcuda": 3, "dtype": [3, 4, 5, 12, 13, 17, 18, 19, 103, 109, 141, 150, 161, 175, 196, 216, 226, 239, 249, 251, 263, 264, 267, 269, 277, 278, 289], "longcuda": 3, "klong": 3, "zero": [3, 8, 9, 14, 21, 24, 35, 40, 45, 51, 54, 95, 96, 98, 100, 103, 104, 112, 113, 131, 139, 140, 147, 155, 156, 161, 167, 171, 173, 176, 177, 181, 183, 185, 190, 201, 226, 230, 232, 238, 241, 242, 256, 260, 261, 262, 275, 277, 278, 283, 284], "ktrainbatchs": 3, "28": [3, 8, 21, 37, 51, 100, 102, 113, 157, 172, 190, 215, 227, 241, 277, 284], "copy_": [3, 44, 53, 120, 141, 161, 181, 231, 239], "training_step": 3, "call": [3, 4, 7, 8, 10, 12, 13, 14, 16, 17, 18, 20, 21, 28, 35, 36, 37, 40, 42, 44, 45, 47, 48, 49, 51, 54, 56, 57, 58, 60, 72, 80, 90, 95, 96, 98, 100, 102, 103, 105, 107, 109, 112, 113, 118, 120, 121, 122, 131, 132, 134, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 153, 155, 156, 159, 160, 161, 163, 164, 167, 170, 171, 172, 173, 175, 176, 177, 179, 181, 182, 183, 184, 185, 187, 189, 192, 196, 197, 203, 206, 208, 209, 210, 215, 226, 227, 228, 229, 231, 232, 240, 241, 242, 245, 251, 252, 253, 254, 256, 259, 266, 269, 283, 284, 288, 289], "void": [3, 4, 5, 7, 8, 9, 18, 161, 176, 227, 232, 241, 269, 279], "net": [3, 8, 24, 48, 49, 51, 54, 57, 80, 90, 93, 98, 102, 103, 105, 139, 155, 167, 178, 182, 189, 190, 229], "stream": [3, 18, 87, 103, 106, 141, 173, 178, 216, 269], "cudagraph": 3, "cudastream": 3, "capturestream": 3, "getstreamfrompool": 3, "setcurrentcudastream": 3, "capture_begin": 3, "capture_end": 3, "warm": [3, 76, 79, 120, 189, 194, 214, 215, 227, 232, 262, 280], "side": [3, 9, 56, 57, 87, 112, 157, 164, 170, 172, 173, 176, 180, 181, 189, 223], "prepar": [3, 14, 21, 24, 48, 56, 57, 73, 74, 102, 110, 121, 122, 157, 170, 175, 176, 179, 181, 207, 217, 232, 282, 284], "cach": [3, 132, 148, 161, 189, 200, 217, 242, 254, 259, 261, 268, 279], "cubla": [3, 227], "cudnn": [3, 7, 146, 149, 156, 164, 226], "warmupstream": 3, "int": [3, 4, 5, 7, 8, 14, 23, 24, 56, 58, 60, 139, 140, 142, 153, 155, 161, 175, 176, 177, 181, 182, 183, 189, 194, 196, 199, 211, 216, 259, 264, 266, 279, 289], "num_warmup_it": 3, "success": [3, 8, 17, 80, 109, 145, 161, 185, 223, 289], "replac": [3, 4, 8, 24, 28, 47, 60, 62, 96, 107, 113, 114, 118, 120, 128, 138, 139, 141, 155, 159, 177, 183, 185, 186, 189, 193, 196, 199, 216, 217, 227, 256, 262, 264, 268, 277, 280, 287], "replai": [3, 17, 163], "spin": [3, 98], "ordinari": 3, "epoch": [3, 8, 20, 24, 37, 40, 41, 57, 58, 60, 93, 98, 102, 105, 107, 113, 122, 128, 139, 140, 141, 145, 146, 155, 164, 170, 179, 183, 190, 199, 201, 240], "59584": 3, "60000": [3, 155], "3921": 3, "test": [3, 12, 24, 28, 37, 40, 41, 54, 88, 90, 96, 98, 104, 105, 107, 108, 114, 125, 138, 139, 140, 146, 155, 157, 159, 161, 164, 173, 178, 182, 185, 187, 190, 194, 196, 214, 215, 227, 266, 268, 288, 290], "2051": 3, "accuraci": [3, 21, 24, 28, 41, 48, 98, 104, 105, 113, 133, 134, 136, 138, 139, 140, 141, 145, 167, 177, 178, 182, 187, 190, 192, 215, 226, 240, 245, 261, 282, 284], "938": [3, 8, 164], "1826": 3, "1273": 3, "960": 3, "1796": 3, "1012": [3, 164], "968": 3, "1603": 3, "0869": 3, "973": 3, "2315": 3, "0736": 3, "978": 3, "6": [3, 8, 14, 24, 37, 39, 51, 54, 77, 90, 96, 98, 100, 102, 103, 112, 114, 118, 120, 121, 122, 149, 150, 155, 161, 164, 176, 177, 178, 181, 183, 192, 194, 196, 200, 211, 215, 226, 243, 253, 254, 255, 259, 268, 270, 277, 284], "0511": 3, "0704": 3, "977": [3, 164, 215], "7": [3, 7, 8, 21, 22, 23, 24, 37, 39, 56, 90, 120, 128, 139, 140, 155, 163, 164, 178, 192, 193, 194, 197, 203, 205, 206, 211, 214, 215, 226, 252, 256, 264, 267, 268, 270, 277, 279, 286, 289], "0802": 3, "0654": [3, 177], "979": 3, "0774": 3, "0604": [3, 177], "980": 3, "9": [3, 4, 7, 8, 21, 23, 24, 37, 43, 47, 54, 77, 93, 98, 102, 112, 113, 120, 122, 161, 171, 178, 181, 190, 192, 197, 215, 216, 227, 229, 232, 249, 270, 277, 284, 289], "0669": 3, "0544": [3, 113], "984": [3, 215], "0219": [3, 177], "0517": 3, "983": 3, "real": [3, 8, 9, 17, 35, 41, 57, 59, 95, 105, 106, 107, 108, 112, 136, 139, 146, 147, 155, 156, 170, 176, 180, 185, 194, 196, 197, 215, 227, 266, 277, 280], "0m44": 3, "287": 3, "018": [3, 248], "sy": [3, 23, 24, 58, 60, 153, 155, 176, 205], "0m1": 3, "116": [3, 266], "produc": [3, 7, 8, 14, 73, 105, 114, 121, 145, 148, 156, 157, 159, 160, 162, 164, 173, 179, 180, 185, 192, 196, 197, 209, 226, 242, 246, 263, 282, 289], "4092": 3, "2037": 3, "2039": 3, "1274": 3, "961": 3, "1779": 3, "1017": 3, "1559": 3, "0871": 3, "972": 3, "2240": 3, "0735": [3, 177, 284], "0520": [3, 177], "0710": 3, "0935": 3, "0666": 3, "0744": 3, "0603": 3, "981": 3, "0762": 3, "0547": 3, "0207": 3, "0525": 3, "0m6": 3, "952": [3, 161], "0m7": 3, "048": [3, 203], "0m0": 3, "619": 3, "gain": [3, 7, 21, 87, 189, 264, 284, 290], "six": [3, 179], "kind": [3, 7, 8, 24, 40, 48, 51, 54, 80, 96, 104, 106, 110, 122, 133, 138, 217, 259], "larg": [3, 4, 5, 7, 8, 10, 15, 19, 20, 21, 23, 40, 44, 54, 65, 93, 96, 100, 102, 105, 110, 112, 113, 115, 121, 128, 134, 138, 139, 140, 142, 145, 149, 153, 155, 157, 167, 173, 175, 179, 180, 182, 183, 184, 192, 194, 197, 199, 205, 211, 215, 226, 232, 233, 242, 246, 264, 266, 277, 284, 286], "improv": [3, 7, 8, 12, 13, 21, 24, 28, 40, 54, 61, 98, 103, 105, 113, 118, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 146, 149, 164, 171, 180, 184, 185, 192, 193, 194, 200, 201, 203, 205, 207, 214, 216, 226, 227, 240, 242, 249, 253, 266, 267, 268, 279, 284, 290], "due": [3, 7, 8, 21, 23, 57, 87, 90, 103, 114, 118, 139, 143, 148, 153, 170, 171, 182, 194, 200, 206, 210, 217, 256, 259, 266, 268, 277, 282, 284, 286], "size": [3, 4, 5, 7, 8, 9, 12, 14, 15, 17, 21, 23, 24, 35, 36, 37, 40, 41, 45, 47, 48, 49, 51, 54, 56, 57, 60, 87, 93, 96, 98, 100, 103, 104, 105, 109, 110, 112, 113, 122, 128, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 155, 156, 157, 161, 162, 163, 164, 167, 170, 172, 173, 176, 178, 179, 180, 181, 182, 185, 189, 192, 193, 194, 196, 197, 199, 200, 202, 208, 209, 210, 216, 226, 227, 231, 233, 241, 242, 260, 261, 264, 266, 267, 268, 275, 278, 280, 284], "larger": [3, 12, 15, 80, 87, 95, 105, 113, 117, 122, 132, 138, 139, 140, 143, 145, 151, 173, 180, 183, 185, 189, 192, 193, 194, 208, 209, 215, 227, 246, 268, 280], "heavi": [3, 8, 54, 105, 109], "less": [3, 7, 8, 10, 12, 19, 24, 61, 87, 100, 105, 106, 113, 117, 128, 140, 145, 156, 159, 170, 173, 179, 180, 181, 189, 190, 194, 196, 197, 200, 211, 227, 231, 266, 268], "impact": [3, 15, 21, 40, 93, 105, 156, 173, 181, 184, 225, 259, 260, 268, 284], "smaller": [3, 40, 100, 105, 112, 113, 139, 143, 179, 181, 192, 227, 231, 246], "nevertheless": [3, 7, 24, 164, 179], "richard": 4, "zou": 4, "integr": [4, 5, 8, 13, 17, 19, 39, 93, 114, 118, 120, 137, 138, 145, 148, 175, 189, 190, 194, 200, 208, 215, 223, 225, 239, 244, 253, 259, 263, 279, 283, 289, 290], "opcheck": [4, 19], "basic": [4, 5, 12, 14, 18, 19, 20, 28, 35, 36, 37, 40, 41, 42, 43, 44, 45, 54, 59, 61, 62, 78, 82, 85, 92, 95, 98, 99, 100, 102, 103, 105, 108, 112, 113, 114, 115, 117, 118, 121, 131, 132, 138, 143, 146, 149, 161, 168, 175, 179, 184, 197, 200, 201, 202, 208, 209, 227, 240, 250, 251, 255, 256, 261, 262, 276, 280], "program": [4, 5, 7, 10, 23, 65, 100, 106, 108, 109, 112, 138, 143, 146, 160, 173, 175, 182, 194, 209, 227, 242, 255, 256, 259, 264, 266, 270, 283], "amd": [4, 7], "rocm": [4, 7, 189], "modif": [4, 17, 18, 24, 93, 106, 113, 149, 155, 177, 179, 182, 187, 190, 196, 200, 241, 246, 256], "e": [4, 5, 7, 8, 9, 10, 12, 13, 14, 19, 23, 35, 36, 41, 47, 48, 54, 56, 57, 65, 80, 90, 93, 95, 98, 100, 103, 105, 108, 112, 113, 122, 128, 131, 133, 138, 139, 141, 142, 143, 145, 146, 147, 150, 152, 153, 155, 157, 164, 171, 172, 176, 177, 181, 183, 185, 189, 193, 194, 196, 200, 201, 207, 211, 214, 216, 217, 227, 229, 232, 241, 242, 244, 245, 263, 277, 278, 280, 282, 286, 288, 289, 290], "g": [4, 5, 7, 8, 9, 10, 12, 13, 14, 17, 19, 23, 47, 54, 56, 57, 65, 93, 95, 98, 100, 103, 105, 107, 108, 112, 128, 131, 133, 138, 139, 141, 145, 146, 147, 153, 155, 157, 161, 170, 172, 176, 179, 181, 183, 185, 189, 194, 196, 200, 201, 211, 214, 217, 227, 232, 241, 242, 263, 269, 278, 282, 288, 289, 290], "etc": [4, 5, 10, 13, 19, 48, 49, 51, 54, 56, 74, 98, 100, 103, 106, 107, 108, 109, 113, 122, 131, 143, 173, 177, 179, 180, 185, 196, 197, 200, 201, 207, 215, 216, 227, 229, 242, 244, 277, 282], "wish": [4, 5, 7, 8, 10, 19, 57, 80, 96, 103, 122, 142, 167, 172, 182, 192, 197, 209, 226, 254, 263, 276], "bring": [4, 5, 10, 96, 142, 173, 179, 189, 192, 197, 232, 242, 259, 268, 278, 288], "bless": 4, "path": [4, 5, 7, 8, 23, 24, 37, 54, 55, 57, 58, 80, 87, 93, 95, 98, 103, 104, 105, 106, 113, 122, 139, 140, 161, 176, 192, 194, 200, 203, 208, 209, 217, 223, 227, 239, 241, 242, 243, 259, 266, 267, 268, 275, 282, 289], "fuse": [4, 5, 7, 21, 24, 132, 136, 137, 138, 161, 178, 186, 200, 214, 261, 262, 263, 268, 279, 284, 289], "subsystem": [4, 10, 19, 196, 253], "def": [4, 5, 7, 8, 9, 12, 14, 17, 23, 24, 37, 51, 58, 60, 90, 102, 113, 122, 139, 140, 141, 142, 143, 148, 150, 153, 155, 161, 171, 175, 176, 177, 181, 182, 183, 190, 192, 205, 207, 208, 209, 211, 215, 217, 223, 227, 243, 251, 256, 260, 263, 264, 269, 270, 275, 279, 282, 283, 284, 286], "mymuladd": [4, 5], "bind": [4, 5, 8, 9, 10, 13, 142, 242, 259, 267], "precompil": 4, "instead": [4, 6, 7, 8, 10, 12, 13, 19, 21, 24, 25, 26, 27, 35, 48, 49, 54, 56, 57, 58, 68, 95, 98, 103, 106, 107, 112, 113, 120, 121, 128, 131, 139, 140, 141, 144, 145, 147, 150, 151, 155, 160, 162, 163, 164, 167, 170, 176, 177, 178, 181, 182, 183, 185, 187, 189, 190, 192, 193, 194, 196, 197, 199, 200, 201, 209, 212, 215, 218, 223, 233, 246, 252, 254, 258, 260, 263, 268, 275, 277, 278, 279, 280, 284, 288, 289], "cpp_extens": [4, 5, 7, 13, 176, 227], "extens": [4, 8, 10, 18, 22, 57, 96, 122, 136, 138, 141, 148, 150, 155, 192, 215, 227, 230, 238, 252, 261, 262, 269, 275, 277, 290], "ahead": [4, 7, 40, 98, 148, 170, 190, 196, 209, 242, 255, 263], "setuptool": [4, 5, 13, 176, 189], "load_inlin": [4, 227], "setup": [4, 5, 7, 8, 13, 20, 24, 39, 57, 58, 60, 139, 140, 145, 153, 170, 176, 183, 208, 209, 211, 241, 266, 268, 277, 278, 283, 288, 289], "extension_cpp": 4, "ext_modul": [4, 5, 7, 13, 176], "cppextens": [4, 7, 13, 176], "muladd": [4, 5], "cpp": [4, 7, 8, 12, 134, 138, 161, 216, 241, 255, 279, 290], "py_limited_api": [4, 5], "min": [4, 24, 57, 87, 100, 105, 113, 128, 155, 176, 179, 181, 183, 192, 196, 256], "expos": [4, 7, 8, 12, 104, 141, 183, 197, 242, 283, 289], "stabl": [4, 29, 30, 31, 32, 33, 54, 67, 80, 105, 106, 121, 128, 142, 158, 178, 188, 189, 191, 217, 226, 287], "limit": [4, 8, 13, 14, 18, 21, 24, 42, 54, 65, 80, 114, 139, 143, 146, 156, 157, 163, 164, 172, 173, 185, 193, 194, 196, 197, 208, 227, 239, 268, 284], "subset": [4, 17, 90, 93, 98, 102, 105, 117, 128, 155, 176, 192, 215, 227, 277, 278], "extra_compile_arg": [4, 5, 13], "cxx": [4, 5, 8, 216, 270, 289], "dpy_limited_api": [4, 5], "0x03090000": [4, 5], "wheel": [4, 54, 105, 179, 189, 290], "cmdclass": [4, 5, 7, 13, 176], "build_ext": [4, 5, 7, 13, 176], "buildextens": [4, 5, 7, 13, 176], "bdist_wheel": [4, 5], "cp39": [4, 5], "cu": [4, 7], "cudaextens": [4, 7, 176], "cpython": [4, 7, 241], "agnost": [4, 7, 193, 228], "pure": [4, 7, 8, 13, 51, 146, 150, 157, 172, 196, 199, 269, 279], "agnostic": 4, "minim": [4, 8, 13, 15, 21, 40, 57, 67, 68, 72, 73, 74, 77, 78, 80, 87, 95, 107, 112, 113, 121, 132, 138, 140, 145, 152, 161, 175, 180, 194, 242, 245, 246, 275, 282, 284], "oldest": 4, "hexcod": 4, "throughout": [4, 15, 57, 110, 155, 170, 173, 179, 190, 239, 277], "environ": [4, 5, 7, 8, 9, 10, 14, 19, 22, 23, 39, 60, 87, 90, 96, 99, 102, 115, 125, 135, 138, 139, 140, 143, 148, 152, 153, 155, 161, 173, 175, 176, 180, 181, 182, 183, 194, 196, 197, 200, 203, 207, 208, 209, 210, 211, 215, 217, 223, 225, 227, 241, 242, 250, 255, 257, 259, 260, 262, 264, 266, 279, 283, 289], "unknown": 4, "behavior": [4, 9, 12, 13, 14, 15, 17, 40, 54, 56, 100, 110, 113, 114, 131, 156, 160, 161, 164, 170, 173, 194, 196, 231, 242, 252, 254, 259, 276, 277, 286], "runnabl": [4, 145, 161, 245], "three": [4, 8, 13, 15, 17, 18, 37, 40, 56, 57, 68, 80, 87, 90, 95, 96, 102, 103, 106, 113, 118, 121, 122, 138, 142, 143, 146, 147, 164, 168, 171, 173, 176, 179, 183, 184, 185, 187, 189, 190, 197, 223, 232, 266, 268, 278, 279], "line": [4, 7, 8, 12, 15, 19, 54, 55, 56, 60, 61, 87, 98, 102, 103, 104, 105, 107, 113, 120, 145, 146, 147, 153, 155, 161, 178, 180, 182, 183, 185, 189, 190, 194, 196, 208, 209, 211, 216, 231, 240, 242, 256, 257, 259, 266, 269, 270, 275, 277], "specif": [4, 5, 7, 8, 12, 13, 14, 21, 23, 24, 37, 41, 48, 60, 80, 87, 93, 95, 96, 98, 100, 102, 104, 107, 108, 109, 113, 114, 115, 117, 118, 122, 125, 131, 135, 139, 140, 143, 146, 147, 149, 155, 156, 161, 173, 175, 177, 179, 181, 182, 183, 184, 185, 189, 190, 193, 196, 197, 199, 200, 203, 207, 208, 209, 215, 216, 223, 225, 232, 239, 241, 250, 253, 255, 259, 260, 261, 263, 276, 279, 280, 282, 283, 284, 289], "verifi": [4, 5, 8, 90, 95, 103, 118, 125, 131, 150, 157, 159, 162, 164, 177, 178, 193, 197, 199, 201, 215, 216, 223, 267, 289], "met": [4, 17, 139, 173], "crash": [4, 8, 266], "wors": [4, 24], "silent": [4, 19, 161, 194, 239], "incorrect": [4, 19, 57, 95, 98, 144, 150, 173, 194], "avoid": [4, 7, 20, 48, 93, 102, 105, 139, 140, 141, 143, 149, 153, 155, 164, 167, 170, 179, 181, 194, 196, 201, 208, 226, 227, 231, 232, 239, 250, 259, 267, 268, 275, 276, 280, 283, 284, 286, 290], "unstabl": [4, 285], "libtorch_python": 4, "particular": [4, 7, 8, 12, 14, 37, 48, 56, 87, 88, 93, 95, 96, 98, 100, 112, 135, 145, 146, 148, 155, 157, 167, 172, 175, 182, 192, 196, 199, 200, 231, 242, 250, 263, 275, 276, 278, 280], "aten": [4, 5, 7, 12, 13, 18, 118, 120, 131, 161, 189, 196, 215, 216, 223, 232, 241, 269, 279, 282], "strongli": [4, 18, 156, 171, 200], "recommend": [4, 8, 10, 12, 13, 18, 23, 24, 65, 87, 96, 102, 113, 115, 117, 138, 141, 147, 153, 168, 178, 185, 189, 196, 197, 199, 200, 203, 208, 215, 216, 223, 231, 240, 241, 242, 264, 266, 277, 282, 290], "ascertain": [4, 267], "compliant": [4, 199, 208, 209], "safe": [4, 9, 24, 105, 173], "guarante": [4, 13, 105, 152, 155, 164, 173, 177, 182, 183, 196, 256, 276], "better": [4, 7, 8, 17, 21, 24, 37, 40, 41, 48, 57, 61, 95, 98, 100, 102, 105, 112, 113, 117, 120, 133, 138, 141, 142, 145, 146, 147, 148, 161, 162, 163, 170, 172, 173, 179, 180, 185, 189, 190, 192, 196, 203, 227, 242, 249, 259, 264, 268, 275, 276, 284], "wild": 4, "west": 4, "There": [4, 8, 12, 13, 17, 18, 21, 35, 51, 80, 90, 95, 96, 98, 100, 103, 104, 105, 106, 107, 110, 112, 113, 128, 131, 134, 147, 148, 152, 156, 157, 160, 162, 164, 167, 170, 172, 175, 178, 179, 182, 183, 185, 196, 197, 198, 199, 200, 217, 227, 229, 234, 235, 236, 237, 241, 242, 245, 247, 250, 255, 257, 259, 263, 266, 277, 284], "caveat": [4, 9, 153, 181, 227, 231, 266], "yourself": [4, 7, 8, 12, 39, 98, 109, 138, 163, 197], "truli": [4, 8, 54, 163], "relev": [4, 8, 17, 58, 106, 108, 112, 125, 140, 143, 177, 192, 196, 242, 244, 250, 256, 267], "third": [4, 8, 9, 12, 15, 19, 57, 67, 68, 70, 72, 73, 74, 77, 78, 100, 103, 110, 121, 132, 138, 142, 150, 176, 185, 275, 288], "intend": [4, 7, 8, 12, 15, 95, 105, 139, 143, 161, 164, 184, 194, 196, 200, 201, 207, 229, 242, 251, 275], "influenc": [4, 8, 57, 100, 173, 259], "accordingli": [4, 13, 23, 156, 170, 181, 192, 203], "command": [4, 7, 8, 17, 55, 96, 102, 104, 117, 125, 138, 141, 152, 153, 173, 176, 179, 181, 182, 183, 185, 189, 190, 192, 199, 209, 211, 215, 216, 232, 240, 242, 255, 256, 257, 264, 266, 270], "consequ": [4, 143, 173, 180, 196], "properli": [4, 12, 13, 17, 55, 60, 105, 150, 153, 155, 164, 170, 171, 179, 181, 182, 183, 185, 200, 239, 275, 277, 286], "could": [4, 7, 8, 9, 12, 13, 14, 57, 93, 95, 100, 105, 106, 107, 109, 110, 112, 115, 120, 139, 140, 143, 144, 147, 155, 164, 170, 173, 179, 180, 181, 182, 183, 185, 189, 190, 192, 196, 199, 209, 210, 211, 216, 217, 223, 231, 232, 259, 263, 275, 277, 279, 282, 288], "outsid": [4, 9, 13, 17, 18, 49, 137, 138, 141, 143, 149, 189, 192, 196, 239, 246, 254, 275], "cannot": [4, 7, 8, 9, 14, 17, 23, 54, 65, 87, 103, 114, 118, 121, 122, 141, 142, 150, 153, 155, 156, 164, 173, 179, 194, 196, 253, 268, 288], "mymuladd_cpu": 4, "const": [4, 5, 7, 8, 9, 12, 13, 18, 161, 176, 216, 227, 241, 269, 279], "torch_check": [4, 5, 7, 12], "torch_internal_assert": [4, 12], "devicetyp": [4, 12, 18], "a_contig": [4, 5], "contigu": [4, 5, 7, 12, 36, 164, 242, 279], "b_contig": [4, 5], "a_ptr": [4, 5], "data_ptr": [4, 5, 12, 269], "b_ptr": [4, 5], "result_ptr": [4, 12], "int64_t": [4, 8, 9, 12, 279], "numel": [4, 5, 12, 181, 241, 275], "order": [4, 5, 8, 10, 14, 15, 18, 19, 21, 35, 36, 37, 48, 49, 54, 55, 60, 67, 68, 70, 72, 73, 74, 77, 78, 80, 87, 93, 95, 96, 98, 103, 113, 114, 115, 117, 118, 120, 121, 133, 138, 139, 141, 144, 145, 147, 150, 153, 155, 160, 161, 162, 164, 176, 177, 182, 185, 187, 192, 194, 196, 197, 199, 200, 231, 241, 250, 251, 259, 263, 264, 277, 280, 284, 288], "torch_librari": [4, 5, 8, 9, 10, 12, 19, 216], "ensur": [4, 5, 7, 12, 13, 14, 15, 17, 18, 24, 41, 54, 58, 61, 68, 105, 113, 114, 120, 121, 122, 139, 143, 152, 153, 155, 159, 173, 175, 179, 180, 182, 184, 192, 193, 194, 197, 208, 227, 229, 239, 245, 253, 259, 267, 269, 279, 283, 286], "awar": [4, 80, 95, 103, 143, 145, 155, 156, 184, 196, 253, 275], "top": [4, 7, 8, 12, 21, 24, 39, 55, 57, 87, 88, 96, 99, 102, 105, 113, 143, 155, 178, 183, 184, 189, 190, 194, 199, 215, 223, 225, 282, 284], "project": [4, 7, 8, 57, 95, 102, 122, 143, 176, 180, 185, 190, 216, 217, 223, 260, 280], "schema": [4, 9, 13], "mutat": [4, 9, 12, 13, 19, 121, 157, 172, 173, 196, 206, 288], "m": [4, 5, 7, 8, 9, 12, 13, 17, 18, 24, 35, 47, 54, 95, 100, 109, 113, 139, 140, 161, 162, 176, 177, 178, 181, 183, 209, 215, 223, 227, 242, 259, 279, 284, 286], "torch_library_impl": [4, 5, 9, 12, 13, 18], "impl": [4, 5, 9, 12, 13, 18, 241], "myaddmul": [4, 5], "__global__": [4, 7], "muladd_kernel": [4, 5], "idx": [4, 5, 24, 37, 178, 190, 284], "blockidx": [4, 7], "blockdim": [4, 7], "threadidx": [4, 7], "mymuladd_cuda": 4, "255": [4, 8, 15, 105, 192, 232, 263], "256": [4, 5, 8, 21, 24, 56, 93, 143, 144, 161, 163, 185, 196, 203, 215, 232, 284], "faketensor": [4, 19, 196, 267], "kernel": [4, 5, 7, 8, 10, 12, 16, 19, 21, 23, 51, 88, 100, 103, 113, 118, 132, 133, 138, 141, 146, 157, 161, 164, 171, 172, 173, 177, 184, 185, 186, 189, 193, 194, 196, 197, 200, 203, 223, 227, 229, 231, 232, 242, 248, 251, 256, 261, 262, 268, 269, 270, 279, 282, 284, 287], "meta": [4, 19, 23, 141, 143, 145, 157, 172, 179, 196, 233, 239, 261, 286], "abstract": [4, 7, 14, 17, 37, 56, 65, 93, 103, 104, 108, 113, 121, 143, 145, 155, 173, 176, 179, 197, 210, 211], "metadata": [4, 13, 19, 21, 102, 148, 179, 190, 196, 231, 267, 284], "correct": [4, 5, 7, 8, 12, 13, 14, 15, 16, 19, 24, 40, 47, 48, 51, 54, 68, 80, 90, 93, 95, 96, 98, 100, 103, 104, 106, 107, 113, 121, 139, 140, 144, 149, 156, 161, 164, 171, 177, 179, 181, 182, 185, 187, 189, 190, 197, 211, 226, 239, 256, 264, 267, 280], "stride": [4, 7, 8, 19, 24, 51, 57, 96, 100, 113, 139, 149, 161, 164, 177, 192, 196, 231, 263, 267, 278], "register_fak": [4, 9, 19], "though": [4, 8, 13, 51, 80, 95, 103, 105, 106, 128, 149, 150, 157, 160, 172, 179, 190, 196, 197, 216, 227, 241, 268, 275], "definit": [4, 7, 8, 12, 13, 42, 51, 73, 80, 90, 107, 121, 131, 133, 138, 160, 171, 180, 184, 241, 242, 276], "load": [4, 7, 9, 21, 23, 24, 28, 35, 36, 38, 39, 40, 44, 45, 47, 51, 56, 57, 60, 80, 93, 98, 103, 104, 106, 113, 115, 123, 138, 139, 141, 146, 161, 164, 170, 173, 175, 179, 189, 190, 192, 196, 199, 208, 216, 217, 226, 230, 238, 239, 241, 246, 255, 256, 261, 262, 266, 268, 269, 283, 284, 285, 289], "strive": 4, "load_librari": [4, 9], "next": [4, 7, 8, 12, 14, 15, 17, 18, 20, 21, 24, 37, 47, 54, 56, 58, 60, 61, 87, 90, 95, 98, 100, 102, 103, 105, 106, 110, 113, 115, 122, 131, 139, 140, 141, 143, 144, 146, 147, 148, 149, 150, 152, 156, 157, 160, 161, 163, 167, 170, 172, 173, 180, 181, 182, 183, 185, 189, 190, 196, 197, 201, 215, 216, 217, 223, 231, 232, 246, 251, 264, 268, 270, 277, 278, 284], "_c": [4, 5, 142, 266], "_": [4, 7, 14, 15, 17, 18, 24, 44, 53, 54, 57, 103, 106, 113, 131, 141, 142, 146, 155, 161, 167, 179, 181, 183, 190, 205, 207, 215, 226, 231, 256, 260, 264, 282], "_check": 4, "empty_lik": [4, 5, 103, 164, 275], "formula": [4, 13, 19, 105, 159, 179], "matter": [4, 7, 192, 205, 226, 275, 277], "wrong": [4, 57, 80, 107, 146, 161, 194], "hold": [4, 7, 17, 20, 23, 51, 67, 68, 70, 72, 73, 74, 93, 113, 121, 139, 140, 141, 146, 152, 170, 180, 181, 183, 231, 239, 242], "happen": [4, 12, 35, 36, 37, 40, 47, 57, 95, 98, 100, 103, 105, 107, 113, 115, 140, 141, 143, 150, 153, 155, 173, 177, 181, 189, 190, 196, 197, 210, 227, 231, 242, 245, 254, 256, 268], "modul": [4, 7, 9, 15, 16, 17, 20, 23, 24, 28, 36, 41, 42, 45, 48, 49, 51, 54, 58, 60, 65, 71, 73, 75, 95, 96, 98, 102, 103, 104, 107, 112, 117, 122, 123, 128, 131, 132, 138, 139, 140, 141, 143, 144, 148, 149, 153, 155, 160, 161, 164, 167, 170, 172, 175, 176, 178, 179, 181, 182, 183, 184, 187, 190, 192, 193, 194, 196, 200, 201, 207, 208, 209, 210, 211, 215, 216, 223, 227, 229, 230, 232, 238, 242, 243, 244, 246, 259, 261, 262, 263, 266, 268, 269, 279, 282, 283, 284, 289, 290], "initi": [4, 8, 12, 14, 17, 20, 23, 24, 36, 37, 40, 47, 54, 60, 68, 77, 78, 80, 96, 98, 103, 104, 105, 107, 110, 112, 113, 120, 121, 122, 128, 139, 140, 143, 146, 147, 156, 157, 161, 164, 170, 173, 175, 177, 178, 180, 181, 182, 183, 185, 189, 193, 194, 197, 200, 201, 208, 209, 211, 215, 223, 225, 227, 231, 239, 242, 246, 264, 266, 278, 289, 290], "pybind11_modul": [4, 7, 176], "notic": [4, 7, 12, 17, 35, 47, 48, 57, 80, 90, 95, 98, 103, 105, 107, 122, 131, 150, 155, 161, 163, 171, 172, 179, 189, 194, 196, 200, 201, 245, 256, 275, 277], "pybind11": [4, 7, 12, 176, 227], "promis": [4, 113, 279], "With": [4, 12, 13, 18, 20, 21, 23, 24, 44, 53, 57, 80, 90, 95, 96, 102, 109, 141, 143, 150, 153, 155, 161, 167, 170, 175, 181, 182, 183, 184, 185, 186, 201, 203, 206, 207, 208, 211, 223, 225, 231, 239, 242, 255, 259, 260, 262, 264, 268, 269, 284], "sadli": 4, "foreshadow": 4, "wonder": [4, 7, 107, 131, 170, 173, 197, 200], "sai": [4, 7, 8, 19, 28, 47, 56, 103, 107, 109, 112, 141, 144, 157, 162, 170, 177, 189, 268], "not_agnost": 4, "csrc": [4, 7, 176], "extension_bad": 4, "__init__": [4, 5, 7, 8, 9, 14, 17, 24, 36, 41, 51, 56, 58, 98, 100, 102, 107, 113, 122, 139, 146, 148, 153, 155, 175, 177, 181, 182, 183, 190, 192, 207, 208, 209, 211, 215, 223, 229, 231, 243, 256, 263, 279, 283, 286], "successfulli": [4, 8, 55, 115, 142, 145, 155, 161, 175, 182, 196, 197, 214, 215, 229, 243, 244, 245, 277, 289], "extern": [4, 56, 105, 122, 145, 160, 161, 242, 269, 279], "pyobject": 4, "pyinit__c": 4, "struct": [4, 8, 9, 18], "pymoduledef": 4, "module_def": 4, "pymoduledef_head_init": 4, "null": [4, 8, 223, 266], "interpret": [4, 7, 8, 61, 87, 90, 96, 112, 132, 138, 147, 148, 185, 194, 196, 227, 230, 238, 241, 256, 259, 261, 262, 269], "global": [4, 7, 8, 54, 61, 93, 143, 161, 170, 175, 182, 187, 196, 205, 207, 210, 227, 228, 239, 241, 242, 283, 284], "variabl": [4, 7, 8, 12, 35, 54, 87, 93, 95, 103, 106, 107, 109, 113, 125, 148, 152, 155, 161, 175, 181, 184, 196, 197, 200, 203, 215, 223, 250, 257, 259, 266, 268, 270, 277, 279, 280, 283, 288, 289], "pymodule_cr": 4, "entir": [4, 7, 8, 17, 20, 23, 24, 51, 54, 58, 105, 107, 110, 113, 128, 138, 139, 140, 146, 148, 149, 170, 172, 175, 177, 179, 183, 185, 193, 196, 197, 209, 226, 231, 233, 242, 246, 256, 275, 276, 277], "statement": [4, 12, 35, 47, 49, 114, 185, 196, 226, 228, 283], "trigger": [4, 131, 141, 153, 161, 173, 181, 183, 193, 242], "challeng": [4, 17, 109, 110, 114, 132, 139, 142, 143, 155, 171, 180, 192, 193, 209, 210, 211, 227, 261], "shift": [4, 179, 201], "toward": [4, 24, 54, 105, 147, 180], "trivial": [4, 17, 56, 61, 103, 144, 197, 210, 286], "pathlib": [4, 5, 113, 140, 192], "so_fil": [4, 5], "__file__": [4, 5, 7, 176, 227], "glob": [4, 5], "assert": [4, 5, 7, 9, 14, 23, 24, 102, 141, 148, 153, 161, 182, 184, 190, 196, 205, 227, 251, 264, 266, 284], "len": [4, 5, 9, 24, 37, 51, 56, 60, 102, 113, 128, 139, 140, 141, 155, 181, 182, 190, 192, 211, 284], "f": [4, 5, 7, 12, 14, 15, 19, 23, 24, 35, 37, 47, 51, 58, 60, 77, 95, 102, 107, 113, 121, 122, 131, 139, 140, 142, 143, 144, 153, 155, 161, 162, 175, 176, 177, 178, 181, 182, 183, 190, 192, 205, 207, 208, 209, 211, 215, 223, 227, 243, 260, 264, 266, 269, 284, 288], "register_autograd": [4, 19, 253], "prefer": [4, 8, 12, 19, 58, 162, 167, 176, 179, 194, 197, 201, 202, 226, 253, 266, 279], "directli": [4, 7, 8, 12, 14, 15, 17, 19, 36, 44, 53, 57, 90, 93, 95, 96, 103, 114, 115, 117, 118, 141, 142, 143, 148, 150, 151, 162, 173, 178, 179, 183, 185, 197, 201, 207, 209, 259, 266, 268, 277, 278, 286, 289], "_backward": 4, "saved_tensor": [4, 7, 150], "grad_a": [4, 77, 121], "grad_b": [4, 77, 121], "none": [4, 9, 14, 17, 18, 23, 24, 37, 51, 54, 93, 95, 105, 113, 131, 139, 140, 141, 155, 157, 161, 164, 172, 175, 182, 192, 196, 203, 208, 209, 211, 240, 251, 263, 282, 284, 286], "needs_input_grad": 4, "_setup_context": 4, "saved_a": 4, "saved_b": 4, "setup_context": 4, "composit": [4, 8, 10, 14, 19, 107, 108, 162, 175, 179, 211, 253], "had": [4, 8, 51, 56, 95, 98, 103, 110, 113, 115, 121, 131, 170, 171, 180, 190, 216, 223, 239], "own": [4, 7, 8, 12, 13, 14, 17, 20, 21, 23, 36, 37, 54, 57, 68, 80, 93, 95, 96, 98, 113, 118, 120, 121, 133, 138, 139, 140, 141, 147, 148, 149, 153, 161, 170, 171, 177, 178, 179, 182, 183, 185, 192, 194, 196, 197, 199, 200, 208, 210, 227, 239, 263, 266, 268, 284], "mymul": 4, "mymul_cpu": 4, "correctli": [4, 5, 15, 19, 54, 57, 80, 95, 96, 98, 125, 138, 141, 159, 164, 170, 173, 175, 177, 178, 192, 194, 197, 200, 211, 245, 277], "mathemat": [4, 13, 16, 19, 47, 53, 68, 95, 98, 100, 109, 155, 179, 196], "plan": [4, 8, 10, 13, 23, 122, 140, 143, 192, 197, 278, 289], "gradcheck": [4, 19, 149, 150, 159, 242], "sample_input": [4, 5, 122], "make_tensor": [4, 5], "make_nondiff_tensor": [4, 5], "20": [4, 5, 8, 24, 77, 87, 90, 93, 102, 103, 120, 139, 145, 146, 153, 155, 156, 161, 164, 170, 177, 181, 183, 189, 227, 232, 241, 256, 260, 277, 284], "14": [4, 5, 8, 28, 37, 51, 98, 102, 139, 161, 192, 200, 215, 227, 232, 259, 277], "123": [4, 5, 56, 183, 215, 262], "reference_muladd": [4, 5], "extend": [4, 7, 8, 9, 12, 24, 28, 57, 93, 114, 115, 116, 117, 132, 133, 137, 138, 139, 147, 156, 178, 182, 183, 192, 193, 197, 216, 217, 242, 246, 250, 252, 263, 266, 269, 290], "arg": [4, 5, 23, 24, 58, 60, 109, 122, 139, 140, 153, 155, 160, 177, 180, 181, 182, 183, 192, 194, 196, 205, 207, 208, 209, 216, 256, 260, 269], "assert_clos": [4, 5], "check": [4, 5, 7, 8, 12, 16, 17, 18, 24, 39, 40, 41, 44, 47, 48, 49, 54, 55, 57, 60, 63, 64, 80, 86, 90, 95, 98, 100, 102, 103, 104, 105, 106, 109, 113, 115, 120, 131, 138, 139, 140, 141, 142, 145, 146, 153, 155, 156, 159, 161, 164, 172, 173, 177, 178, 179, 182, 192, 193, 194, 196, 197, 199, 200, 204, 209, 215, 216, 219, 220, 221, 222, 223, 224, 226, 232, 249, 251, 255, 256, 270, 272, 273, 278, 279, 280, 281, 282, 283, 289], "undefin": [4, 9, 155, 200, 275, 276, 277], "myadd_out": 4, "myadd_out_cpu": 4, "is_contigu": [4, 7, 164, 227, 241], "caus": [4, 15, 18, 80, 87, 95, 103, 113, 144, 161, 173, 178, 181, 185, 189, 192, 196, 197, 223, 228, 242, 254, 259, 266, 275, 283], "incompat": [4, 142, 196, 256], "went": [4, 57, 100, 103, 148, 161], "fairli": [4, 7, 105, 113, 155, 170, 180, 200], "serv": [5, 8, 10, 62, 65, 90, 98, 105, 110, 121, 138, 153, 160, 163, 176, 182, 183, 197, 207, 210, 214, 226, 227, 241, 250, 267, 277], "languag": [5, 7, 8, 10, 28, 48, 54, 100, 106, 108, 110, 138, 143, 145, 146, 147, 168, 183, 185, 203, 215, 242, 246, 251, 253, 256, 264, 269], "intel": [5, 7, 10, 138, 155, 161, 164, 261, 282, 283, 289], "label": [5, 8, 37, 40, 41, 45, 47, 48, 56, 57, 80, 93, 95, 96, 98, 102, 103, 104, 107, 112, 120, 128, 131, 140, 143, 146, 153, 173, 178, 181, 185, 190, 197, 199, 223, 227, 229, 232, 256, 260, 261, 284], "xpu": [5, 36, 41, 44, 67, 80, 103, 121, 128, 155, 199, 216, 232], "bundl": [5, 251], "essenti": [5, 8, 13, 17, 19, 35, 54, 106, 107, 109, 148, 155, 168, 173, 180, 196, 202, 259, 282, 286], "activ": [5, 7, 8, 13, 15, 17, 18, 21, 24, 36, 51, 57, 63, 64, 87, 95, 96, 98, 105, 107, 113, 131, 132, 140, 143, 148, 151, 155, 161, 162, 170, 177, 178, 189, 200, 201, 203, 204, 215, 216, 219, 220, 221, 222, 223, 224, 225, 232, 242, 263, 264, 269, 270, 272, 273, 281, 282, 284], "prior": [5, 14, 18, 24, 55, 57, 95, 100, 105, 153, 163, 177, 190, 200, 207, 209], "execut": [5, 7, 8, 12, 14, 18, 20, 22, 35, 36, 42, 43, 47, 49, 52, 55, 69, 75, 79, 87, 91, 95, 98, 101, 103, 106, 111, 114, 118, 119, 123, 134, 138, 141, 142, 144, 145, 148, 155, 156, 160, 161, 164, 173, 176, 179, 180, 182, 183, 184, 186, 194, 196, 200, 203, 207, 215, 216, 223, 226, 238, 241, 248, 251, 255, 256, 259, 262, 264, 266, 269, 279, 285, 289], "best": [5, 7, 8, 12, 42, 47, 57, 65, 80, 93, 115, 118, 120, 122, 128, 133, 136, 138, 151, 155, 157, 161, 172, 173, 178, 181, 183, 187, 196, 200, 215, 216, 217, 232, 241, 242, 245, 251, 253, 259, 261, 268, 279, 284], "c": [5, 15, 18, 19, 23, 24, 47, 67, 68, 77, 90, 95, 96, 102, 103, 105, 112, 113, 121, 133, 137, 138, 140, 147, 148, 150, 155, 161, 164, 173, 178, 183, 184, 192, 194, 196, 197, 223, 226, 227, 239, 240, 255, 266, 270, 277, 279], "sycl_exampl": 5, "sycl_extens": 5, "test_sycl_extens": 5, "syclextens": 5, "except": [5, 12, 14, 21, 44, 47, 53, 54, 57, 96, 100, 103, 107, 110, 113, 114, 128, 131, 141, 142, 146, 157, 159, 162, 164, 172, 176, 185, 196, 216, 250, 256, 267, 280, 284, 286, 288, 289, 290], "o": [5, 7, 8, 14, 23, 24, 37, 54, 55, 58, 60, 105, 139, 140, 142, 153, 155, 167, 170, 173, 175, 176, 178, 181, 182, 183, 192, 207, 208, 209, 211, 227, 231, 260, 264, 266, 267, 283, 284], "find_packag": [5, 8, 216], "library_nam": 5, "o3": [5, 7, 227], "fdiagnost": 5, "color": [5, 48, 57, 96, 98, 100, 102, 103, 145, 163, 164, 178, 190, 192, 199, 227], "is_avail": [5, 7, 8, 15, 93, 103, 113, 175, 176, 177, 180, 182, 256, 264, 283], "this_dir": 5, "dirnam": [5, 161, 176, 223], "curdir": 5, "extensions_dir": 5, "join": [5, 13, 23, 37, 44, 53, 54, 55, 58, 134, 139, 146, 153, 155, 181, 182, 183, 207, 208, 209, 227, 260, 266], "construct": [5, 8, 17, 35, 51, 57, 70, 72, 90, 105, 121, 128, 133, 138, 141, 147, 150, 156, 157, 162, 168, 172, 179, 180, 182, 185, 197, 199, 200, 215, 226, 229, 244, 260, 280, 286, 288, 290], "install_requir": 5, "descript": [5, 8, 55, 139, 140, 161, 179, 181, 182, 183, 184, 192, 196, 201, 227, 242, 256, 257, 282], "c10": [5, 9, 12, 13, 18, 161, 176, 215, 216, 227, 241, 269, 279], "xpustream": 5, "hpp": [5, 176], "nd_item": 5, "get_global_id": 5, "muladdkernelfunctor": 5, "_numel": 5, "_a": 5, "_b": 5, "_result": 5, "privat": [5, 9, 17, 18, 142, 176, 177, 275], "mymuladd_xpu": 5, "is_xpu": 5, "res_ptr": 5, "queue": [5, 9, 223, 242], "getcurrentxpustream": 5, "constexpr": [5, 279], "thread": [5, 7, 8, 9, 12, 57, 120, 141, 142, 153, 173, 178, 181, 182, 183, 223, 227, 232, 241, 242, 259], "submit": [5, 13, 216], "handler": [5, 12, 192, 239], "cgh": 5, "parallel_for": 5, "nd_rang": 5, "static_cast": [5, 161, 279], "__all__": 5, "ctype": 5, "current_dir": 5, "build_dir": 5, "_op": [5, 118], "dl_open_guard": 5, "loaded_lib": 5, "cdll": 5, "_intern": 5, "common_util": 5, "testcas": 5, "unittest": 5, "testmymuladd": 5, "self": [5, 7, 8, 9, 12, 13, 14, 17, 18, 24, 28, 37, 51, 54, 58, 60, 102, 107, 113, 120, 121, 122, 138, 139, 143, 148, 153, 155, 161, 163, 171, 175, 177, 181, 182, 183, 189, 190, 192, 196, 200, 207, 208, 209, 211, 215, 223, 232, 239, 243, 246, 256, 263, 279, 286], "_test_correct": 5, "skipif": 5, "test_correctness_xpu": 5, "__name__": [5, 14, 56, 58, 60, 139, 140, 142, 153, 155, 175, 181, 182, 183, 207, 208, 209, 223, 260, 264], "__main__": [5, 14, 56, 58, 60, 139, 140, 153, 155, 175, 181, 182, 183, 207, 208, 209, 223, 227, 260, 264], "against": [5, 19, 40, 41, 48, 100, 102, 115, 142, 155, 164, 179, 200, 207, 216, 227], "showcas": [5, 17, 70, 140, 141, 167, 170, 197, 269, 290], "support": [5, 8, 14, 17, 18, 20, 21, 23, 24, 28, 35, 41, 51, 56, 61, 63, 64, 80, 88, 90, 95, 96, 97, 98, 99, 100, 103, 104, 105, 114, 115, 116, 117, 120, 132, 137, 138, 139, 140, 141, 142, 145, 150, 152, 153, 155, 156, 159, 161, 164, 171, 173, 175, 176, 177, 178, 179, 181, 182, 183, 189, 192, 194, 196, 199, 203, 204, 205, 206, 207, 209, 214, 215, 216, 217, 219, 220, 221, 222, 224, 225, 227, 232, 242, 250, 252, 255, 256, 257, 259, 261, 263, 266, 267, 270, 272, 273, 275, 276, 277, 279, 280, 281, 282, 283, 284, 289], "enabl": [5, 7, 8, 12, 14, 17, 18, 20, 23, 24, 28, 37, 51, 60, 61, 87, 95, 103, 105, 117, 122, 139, 140, 142, 143, 145, 148, 149, 150, 153, 155, 161, 164, 173, 175, 177, 178, 179, 189, 190, 192, 193, 196, 197, 201, 203, 208, 209, 210, 215, 216, 223, 226, 232, 239, 246, 250, 251, 252, 254, 255, 259, 260, 263, 267, 268, 275, 277, 279, 280, 283, 290], "torchscript": [6, 9, 25, 26, 27, 115, 132, 212, 216, 232, 258], "export": [6, 10, 12, 25, 26, 27, 51, 90, 95, 116, 117, 132, 138, 152, 153, 161, 184, 186, 194, 203, 212, 215, 217, 226, 242, 248, 258, 261, 262, 279, 283], "peter": 7, "goldsborough": 7, "newest": [7, 12], "date": [7, 8, 12, 13, 80, 82, 83, 84, 85, 86, 140, 182, 216, 239, 255], "plethora": 7, "relat": [7, 14, 17, 57, 95, 96, 103, 104, 109, 112, 137, 138, 143, 161, 171, 196, 200, 227, 242, 279], "algebra": [7, 17, 44, 53, 98, 103, 107, 215], "wrangl": 7, "novel": [7, 96, 264], "research": [7, 8, 21, 24, 54, 57, 80, 90, 96, 103, 107, 125, 155, 167, 172, 177, 192, 217, 256, 284], "outlin": [7, 8, 173, 197], "power": [7, 8, 47, 54, 62, 70, 80, 93, 95, 98, 105, 107, 113, 121, 133, 138, 139, 145, 153, 155, 161, 163, 167, 176, 177, 178, 185, 192, 193, 214, 227, 253, 259, 268, 278], "spare": [7, 8], "deriv": [7, 8, 13, 19, 21, 35, 40, 44, 47, 53, 95, 103, 107, 109, 110, 112, 121, 144, 146, 150, 159, 162, 242, 284], "express": [7, 10, 19, 95, 98, 100, 103, 106, 117, 125, 143, 196, 200, 214, 277, 282], "realli": [7, 12, 48, 95, 100, 103, 106, 107, 112, 121, 123, 138, 144, 190, 227, 262, 275, 277, 288], "frequent": [7, 35, 87, 112, 121, 139, 216, 254, 277], "expens": [7, 21, 44, 105, 120, 183, 196, 232, 241, 254, 268, 284], "even": [7, 8, 12, 13, 17, 20, 47, 48, 56, 80, 95, 98, 100, 103, 112, 113, 122, 131, 139, 140, 143, 148, 150, 153, 160, 162, 171, 173, 179, 181, 184, 192, 196, 197, 200, 215, 227, 242, 243, 268, 275, 277, 278], "few": [7, 8, 9, 12, 13, 18, 24, 51, 56, 61, 90, 95, 96, 98, 103, 105, 107, 108, 109, 110, 112, 122, 134, 140, 141, 144, 146, 147, 148, 153, 155, 156, 171, 173, 178, 179, 182, 185, 194, 200, 201, 206, 209, 216, 226, 241, 242, 243, 250, 263, 268, 276, 277, 278], "plausibl": 7, "address": [7, 15, 23, 28, 87, 100, 132, 138, 142, 155, 173, 181, 182, 196, 197, 200, 210, 217, 239, 259, 261, 283], "mechan": [7, 8, 14, 17, 18, 28, 35, 54, 61, 104, 131, 135, 138, 150, 160, 171, 185, 187, 189, 196, 201, 216, 223, 250, 251, 282, 290], "nativ": [7, 8, 12, 18, 19, 60, 93, 117, 118, 137, 138, 140, 143, 156, 175, 183, 200, 215, 216, 232, 241, 242, 263, 264, 268, 275, 278], "much": [7, 8, 12, 13, 15, 17, 21, 24, 40, 57, 61, 95, 96, 105, 106, 107, 112, 113, 122, 140, 144, 145, 162, 163, 170, 173, 178, 179, 182, 183, 185, 189, 190, 193, 194, 196, 197, 223, 226, 227, 231, 240, 242, 243, 246, 259, 261, 266, 268, 275, 278, 284], "boilerpl": [7, 8, 24, 48, 107, 190, 275], "degre": [7, 40, 68, 100, 121, 145, 185, 189, 264, 278], "onc": [7, 8, 12, 13, 14, 17, 20, 21, 35, 37, 40, 56, 57, 61, 87, 96, 98, 102, 103, 104, 105, 106, 110, 115, 151, 156, 164, 170, 171, 177, 178, 179, 180, 182, 185, 189, 190, 196, 197, 210, 216, 223, 226, 227, 242, 255, 256, 267, 268, 280, 284], "organ": [7, 12, 17, 56, 98, 122, 146, 227, 259, 264], "tackl": [7, 120], "decid": [7, 8, 12, 13, 21, 23, 57, 65, 93, 95, 180, 196, 197, 245, 278, 284, 290], "contribut": [7, 57, 65, 87, 96, 103, 164, 189], "upstream": [7, 216, 242], "rest": [7, 8, 17, 48, 128, 141, 156, 160, 179, 181, 182, 197, 200, 239, 277], "walk": [7, 8, 13, 18, 20, 28, 47, 59, 95, 108, 113, 125, 133, 134, 138, 144, 161, 163, 182, 226, 240, 263, 268, 269, 270, 282], "chase": 7, "someon": [7, 185], "fire": [7, 153], "don": [7, 8, 9, 12, 13, 19, 47, 48, 57, 58, 60, 93, 100, 103, 106, 107, 110, 113, 118, 122, 128, 131, 144, 150, 160, 162, 163, 170, 173, 179, 180, 183, 184, 193, 196, 197, 201, 206, 223, 226, 253, 254, 275, 276, 277], "dai": [7, 143, 197, 239], "head": [7, 10, 21, 39, 88, 100, 120, 153, 184, 199, 280, 284], "straight": [7, 8, 185], "recurr": [7, 48, 54, 106, 110, 135, 138, 146, 147, 168, 171, 185, 186, 201, 262], "unit": [7, 8, 54, 100, 103, 139, 140, 162, 173, 177, 179, 180, 185, 192, 196, 200, 229, 242], "superior": [7, 142, 279], "properti": [7, 8, 14, 17, 35, 44, 53, 95, 98, 103, 109, 112, 131, 145, 171, 185, 196, 216, 226, 227, 239, 244, 276], "art": [7, 48, 57, 96, 98, 100, 177, 225], "lstm": [7, 48, 54, 100, 108, 111, 146, 147, 183, 262], "lack": [7, 18, 87, 96, 210, 275], "forget": [7, 8, 113, 122, 194], "gate": [7, 54, 100, 200, 239], "exponenti": [7, 54, 95, 103, 107, 109, 171, 180, 268], "elu": [7, 282], "intern": [7, 12, 13, 14, 18, 41, 42, 54, 61, 73, 100, 105, 121, 131, 137, 138, 139, 141, 145, 155, 189, 201, 203, 208, 241, 266, 275], "never": [7, 95, 106, 107, 108, 112, 131, 144, 177, 187], "lltm": 7, "long": [7, 8, 13, 54, 55, 87, 93, 100, 103, 107, 108, 109, 111, 113, 140, 142, 144, 147, 156, 160, 161, 171, 175, 180, 183, 189, 197, 200, 201, 227, 241, 242, 245, 254, 262, 264, 266, 269], "term": [7, 8, 18, 44, 57, 65, 80, 95, 96, 100, 104, 107, 108, 109, 111, 120, 140, 142, 143, 167, 177, 179, 196, 197, 200, 233, 259, 262, 268, 278, 286], "vanilla": [7, 8, 54, 70, 107, 121, 192, 200, 260, 275], "signific": [7, 8, 24, 57, 87, 96, 140, 142, 146, 149, 161, 162, 164, 170, 173, 179, 184, 189, 194, 197, 209, 210, 211, 215, 217, 226, 227, 242, 253, 266], "enough": [7, 8, 21, 54, 87, 98, 109, 113, 121, 144, 149, 178, 196, 208, 215, 226, 266, 284], "lstmcell": 7, "cell": [7, 55, 95, 96, 98, 100, 103, 104, 120, 173, 180, 184, 192, 197, 242, 268], "plain": [7, 8, 54, 113, 141, 146, 147, 185, 199, 239, 241], "someth": [7, 8, 14, 17, 24, 48, 93, 98, 103, 107, 109, 155, 161, 178, 185, 196, 200, 227, 241, 288], "input_featur": [7, 256], "state_s": 7, "super": [7, 8, 14, 23, 24, 51, 102, 113, 122, 139, 142, 148, 153, 163, 175, 177, 181, 182, 183, 190, 192, 207, 208, 209, 211, 215, 223, 243, 256, 263, 279, 286], "candid": [7, 161], "reset_paramet": [7, 141], "stdv": 7, "math": [7, 13, 77, 90, 95, 109, 113, 121, 167, 178, 242], "sqrt": [7, 90, 113, 200, 275, 286], "uniform_": [7, 8, 183, 286], "old_h": 7, "old_cel": 7, "cat": [7, 44, 48, 53, 96, 98, 106, 109, 161, 183, 185, 190, 199, 225], "gate_weight": 7, "split": [7, 12, 23, 24, 49, 54, 57, 90, 93, 98, 102, 104, 138, 146, 147, 153, 175, 179, 182, 183, 185, 197, 199, 207, 223], "combin": [7, 13, 40, 60, 65, 93, 95, 98, 100, 105, 106, 109, 112, 113, 134, 138, 139, 144, 146, 147, 149, 157, 167, 173, 177, 180, 183, 185, 196, 197, 200, 210, 211, 227, 242, 269, 280], "input_g": 7, "sigmoid": [7, 8, 57, 100, 201, 242, 263], "output_g": 7, "tanh": [7, 8, 57, 100, 107, 179, 242], "candidate_cel": 7, "new_cel": 7, "hidden": [7, 54, 96, 100, 105, 106, 110, 113, 143, 145, 146, 147, 156, 183, 184, 185, 193, 225], "new_h": 7, "batch_siz": [7, 8, 17, 24, 37, 54, 56, 57, 60, 93, 102, 113, 139, 140, 141, 143, 155, 180, 181, 182, 189, 190, 192, 193, 197, 216, 226, 249, 256, 279, 284], "rnn": [7, 49, 54, 100, 138, 156, 168, 171, 182, 185, 186, 242, 262], "new_c": 7, "mkl": [7, 161, 232, 259, 279], "nnpack": 7, "why": [7, 8, 12, 14, 17, 19, 48, 57, 90, 96, 105, 107, 112, 122, 125, 150, 153, 161, 170, 185, 194, 196, 197, 227, 255, 256, 276, 278], "circumst": [7, 173, 226], "room": [7, 105, 173, 215], "obviou": [7, 196, 227], "knowledg": [7, 54, 57, 80, 107, 108, 123, 125, 131, 133, 138, 161, 163, 201, 262], "know": [7, 8, 12, 14, 23, 24, 35, 47, 54, 77, 78, 80, 98, 100, 103, 107, 109, 112, 113, 121, 144, 146, 147, 150, 155, 156, 157, 161, 163, 164, 167, 172, 173, 175, 179, 180, 181, 185, 190, 196, 197, 199, 227, 252, 263, 276], "involv": [7, 12, 18, 21, 24, 39, 42, 55, 90, 95, 96, 103, 106, 109, 115, 122, 131, 134, 144, 146, 152, 163, 170, 183, 185, 196, 233, 242, 246, 253, 256, 266, 267, 268, 280, 284], "launch": [7, 8, 58, 65, 142, 145, 152, 153, 181, 182, 183, 184, 189, 215, 227, 232, 242, 259, 264, 289], "amount": [7, 24, 80, 87, 122, 143, 153, 173, 177, 194, 197, 232, 242, 268], "becom": [7, 8, 14, 28, 57, 80, 90, 96, 105, 143, 150, 162, 164, 173, 189, 190, 197, 205, 215, 226, 259, 266, 269, 280], "furthermor": [7, 24, 105, 157, 162, 190, 210, 227, 269], "itself": [7, 14, 35, 36, 47, 87, 90, 100, 103, 105, 109, 110, 113, 118, 122, 131, 143, 144, 146, 150, 155, 163, 179, 182, 183, 185, 197, 226, 232, 255], "slow": [7, 8, 12, 40, 139, 141, 173, 197, 200, 232, 242], "down": [7, 12, 13, 14, 24, 36, 37, 55, 87, 93, 95, 100, 102, 107, 113, 139, 156, 161, 162, 163, 182, 187, 190, 196, 241, 242, 266, 275], "thing": [7, 8, 12, 18, 19, 35, 47, 48, 51, 54, 90, 93, 95, 98, 103, 104, 105, 106, 107, 109, 110, 112, 113, 137, 138, 141, 143, 144, 145, 150, 151, 152, 155, 156, 160, 161, 164, 171, 178, 179, 187, 196, 208, 227, 245, 268, 283], "therefor": [7, 8, 9, 18, 24, 54, 56, 105, 122, 134, 146, 153, 164, 167, 173, 176, 177, 182, 183, 196, 226, 259, 270, 277, 278, 289], "rewrit": [7, 49, 148, 171, 196, 288, 289], "group": [7, 14, 23, 24, 28, 54, 65, 88, 100, 103, 120, 134, 138, 139, 140, 141, 142, 147, 149, 151, 153, 155, 161, 175, 189, 197, 199, 200, 208, 209, 211, 227, 256, 259, 260, 266], "profit": 7, "fewer": [7, 14, 149, 162], "visibl": [7, 48, 93, 102, 192], "begin": [7, 8, 9, 14, 15, 21, 24, 35, 47, 54, 55, 57, 60, 80, 90, 95, 98, 110, 112, 140, 143, 168, 170, 180, 182, 189, 190, 197, 214, 226, 227, 229, 232, 243, 244, 245, 246, 277, 284], "translat": [7, 54, 115, 117, 118, 138, 146, 147, 167, 168, 186, 242, 256, 262, 277], "benefit": [7, 8, 21, 23, 47, 90, 93, 140, 142, 159, 164, 170, 173, 184, 200, 215, 216, 226, 242, 252, 259, 268, 284], "massiv": [7, 48, 109, 112, 197, 216], "parallel": [7, 8, 14, 20, 23, 48, 50, 52, 54, 56, 60, 80, 93, 98, 122, 138, 145, 151, 155, 161, 167, 179, 182, 183, 197, 208, 209, 210, 214, 226, 232, 259, 260, 262, 266, 279, 290], "discuss": [7, 8, 12, 13, 18, 20, 48, 80, 95, 98, 100, 104, 109, 110, 131, 139, 140, 148, 155, 160, 161, 167, 173, 175, 194, 200, 231, 251, 253, 266, 275, 276, 277, 278], "latter": [7, 8, 145, 181], "lltm_cpp": 7, "conveni": [7, 12, 17, 48, 51, 54, 96, 109, 113, 144, 147, 157, 162, 176, 179, 209, 216, 226, 227, 241, 266, 276, 278], "wrapper": [7, 8, 12, 60, 113, 122, 139, 140, 150, 156, 163, 179, 192, 197, 201, 208, 209, 253, 267, 290], "include_dir": [7, 13, 176], "include_path": 7, "manag": [7, 36, 47, 54, 65, 95, 113, 120, 131, 134, 141, 143, 148, 151, 152, 153, 171, 184, 189, 194, 197, 208, 209, 210, 211, 226, 227, 228, 231, 232, 233, 242, 254, 259, 267], "And": [7, 8, 13, 19, 28, 57, 96, 109, 115, 146, 150, 161, 162, 164, 167, 178, 189, 190, 194, 196, 227, 241], "overal": [7, 24, 54, 100, 139, 140, 155, 173, 180, 192, 196, 197, 215, 227, 242], "iostream": [7, 8, 9, 216], "d_sigmoid": 7, "header": [7, 8, 12, 176, 227], "bit": [7, 18, 73, 98, 103, 120, 121, 156, 178, 179, 185, 197, 203, 217, 227, 268, 275], "primari": [7, 8, 18, 173, 193, 210, 241, 242, 259, 269, 279, 280, 289], "datatyp": [7, 44, 53, 78, 98, 103, 120, 216, 226], "Its": [7, 105, 107, 131, 280], "inspect": [7, 9, 95, 105, 118, 140, 141, 145, 160, 184, 187, 194, 196, 197, 201, 227, 255], "dispos": 7, "nvcc": 7, "hit": [7, 24, 80, 143, 189], "pars": [7, 54, 56, 112, 139, 140, 145, 227, 266], "window": [7, 8, 48, 56, 100, 112, 115, 153, 182, 189, 199, 223, 242, 289, 290], "workaround": [7, 90, 150, 159, 256], "logic": [7, 8, 14, 21, 40, 45, 90, 106, 114, 132, 138, 139, 145, 152, 175, 177, 182, 183, 192, 193, 201, 209, 259, 284, 286], "sigmoidalphablendforwardcuda": 7, "open": [7, 39, 41, 55, 93, 96, 98, 99, 102, 104, 112, 113, 115, 117, 138, 140, 155, 157, 160, 170, 172, 185, 189, 192, 200, 216, 217, 223, 270, 289], "port": [7, 20, 142, 155, 182, 197, 223, 250, 266], "lltm_forward": 7, "addmm": [7, 8, 120, 161, 203, 215, 232, 289], "transpos": [7, 8, 15, 44, 53, 54, 57, 102, 161, 190, 256, 280, 289], "alpha": [7, 8, 18, 163, 192, 275], "respect": [7, 10, 19, 20, 35, 37, 39, 40, 41, 47, 54, 57, 67, 68, 77, 95, 96, 107, 109, 121, 125, 131, 143, 144, 156, 159, 161, 162, 172, 173, 179, 183, 185, 189, 197, 207, 239, 244, 253, 259, 264], "ultim": [7, 24, 54, 57, 90, 203, 275], "plop": 7, "autograd": [7, 10, 15, 18, 19, 20, 36, 37, 39, 40, 41, 42, 44, 45, 50, 51, 52, 62, 66, 69, 73, 96, 97, 98, 99, 100, 102, 103, 104, 108, 109, 113, 131, 132, 133, 137, 138, 146, 147, 150, 153, 161, 162, 167, 172, 180, 181, 182, 185, 186, 196, 201, 207, 223, 226, 242, 253, 262, 277, 288], "nice": [7, 54, 113, 170, 172, 196, 197, 200], "dig": [7, 96, 107, 184, 196], "deeper": [7, 14, 15, 41, 96, 103, 105, 107, 160, 161, 184, 196, 206, 214], "interest": [7, 8, 13, 17, 21, 48, 54, 56, 93, 95, 96, 105, 107, 114, 115, 117, 118, 128, 140, 145, 162, 170, 171, 179, 187, 196, 197, 199, 200, 227, 241, 244, 245, 284, 288], "alex": 7, "grave": 7, "thesi": 7, "d_tanh": 7, "relu": [7, 8, 15, 24, 51, 57, 100, 102, 107, 113, 122, 131, 139, 153, 161, 177, 178, 181, 182, 183, 190, 208, 209, 210, 211, 215, 216, 226, 242, 243, 279, 282], "exp": [7, 106, 107, 113, 150, 277], "d_elu": 7, "mask": [7, 21, 96, 100, 120, 135, 138, 156, 171, 177, 184, 192, 199, 216, 256, 268, 275, 276, 278, 280, 284, 290], "type_a": 7, "lltm_backward": 7, "grad_h": 7, "grad_cel": 7, "d_output_g": 7, "d_tanh_new_cel": 7, "d_new_cel": 7, "d_old_cel": 7, "d_candidate_cel": 7, "d_input_g": 7, "d_gate": 7, "d_weight": 7, "d_bia": 7, "keepdim": [7, 24, 139, 182], "d_x": 7, "d_old_h": 7, "slice": [7, 44, 53, 110, 113, 177, 200, 211, 216, 241, 280, 289], "d_input": 7, "span": [7, 21, 106, 153, 189, 223, 284], "four": [7, 17, 23, 90, 98, 100, 102, 103, 121, 140, 155, 175, 190, 200, 217, 256, 282], "torch_extension_nam": [7, 176], "macro": [7, 8, 12, 18], "maintain": [7, 13, 17, 35, 36, 37, 47, 54, 80, 100, 105, 110, 137, 138, 142, 151, 155, 163, 180, 183, 196, 201, 208, 226, 260, 283, 289], "mismatch": [7, 105, 196, 266], "nasti": [7, 239], "hard": [7, 8, 12, 18, 37, 107, 145, 173, 177, 196, 227, 250], "At": [7, 8, 12, 17, 18, 21, 47, 51, 54, 55, 90, 93, 110, 113, 121, 139, 140, 143, 156, 159, 163, 179, 180, 181, 184, 185, 189, 232, 239, 242, 255, 275, 278, 284, 289], "point": [7, 8, 12, 13, 14, 17, 21, 23, 24, 47, 51, 54, 55, 56, 57, 58, 87, 90, 95, 98, 100, 103, 105, 106, 108, 109, 110, 112, 113, 121, 139, 141, 143, 144, 145, 150, 151, 153, 160, 163, 167, 173, 179, 181, 185, 190, 192, 196, 197, 217, 230, 238, 240, 242, 252, 256, 261, 262, 266, 268, 275, 277, 278, 283, 284], "bdist_egg": 7, "egg_info": 7, "egg": 7, "info": [7, 8, 87, 142, 152, 155, 163, 192, 196, 203, 216], "pkg": 7, "dependency_link": 7, "txt": [7, 8, 54, 146, 147, 161, 178, 185, 210, 216], "top_level": 7, "manifest": [7, 277], "bdist": 7, "linux": [7, 8, 23, 115, 143, 153, 155, 178, 189, 199, 216, 242, 259, 289], "x86_64": [7, 23], "install_lib": 7, "temp": [7, 24, 148, 250], "gcc": [7, 161, 279], "pthread": [7, 8], "local": [7, 8, 12, 20, 23, 24, 39, 54, 55, 65, 95, 99, 106, 114, 122, 125, 131, 140, 141, 143, 145, 153, 155, 170, 177, 181, 182, 183, 185, 187, 197, 207, 217, 226, 229, 242, 250, 251, 259, 260, 264, 266, 267], "miniconda": [7, 23], "compiler_compat": 7, "wl": 7, "sysroot": 7, "wsign": 7, "dndebug": 7, "fwrapv": 7, "wall": [7, 106, 160, 227], "wstrict": 7, "prototyp": [7, 9, 13, 14, 18, 37, 196, 197, 207, 214, 262, 269, 271, 275, 276, 277, 278, 279, 280, 285, 288, 289, 290], "fpic": 7, "lib": [7, 8, 13, 23, 131, 161, 216, 241, 256, 259, 266], "python3": [7, 23, 189, 215, 241, 256, 266], "site": [7, 10, 23, 55, 57, 160, 185, 232, 241, 256], "th": [7, 17, 56, 107, 112, 155, 163], "thc": 7, "7m": [7, 102], "dtorch_api_include_extension_h": 7, "dtorch_extension_nam": 7, "d_glibcxx_use_cxx11_abi": 7, "cc1plu": 7, "warn": [7, 24, 56, 131, 161, 192, 227, 232, 241, 275, 276, 277, 278], "valid": [7, 28, 40, 54, 93, 100, 102, 104, 105, 117, 120, 122, 128, 131, 139, 140, 145, 146, 149, 150, 173, 176, 192, 193, 196, 199, 227, 251, 254, 276, 277, 284], "objc": 7, "share": [7, 8, 13, 14, 23, 44, 53, 60, 71, 75, 93, 105, 109, 140, 144, 153, 155, 156, 163, 173, 179, 182, 183, 196, 209, 216, 227, 231, 241, 250, 255, 259, 262, 266], "l": [7, 15, 17, 47, 56, 57, 95, 107, 131, 179, 180, 196, 227, 255, 266], "rpath": 7, "37m": [7, 37], "gnu": [7, 8, 216, 242, 259], "stub": 7, "loader": [7, 8, 28, 41, 48, 104, 113, 179, 182, 199, 227], "byte": [7, 196, 256, 267], "37": [7, 21, 120, 178, 183, 215, 232, 284], "pyc": 7, "native_lib": 7, "zip_saf": 7, "analyz": [7, 24, 87, 136, 138, 170, 179, 194, 196, 241, 256], "archiv": [7, 8, 141, 164, 196, 255], "__pycache__": 7, "dist": [7, 14, 23, 139, 140, 142, 153, 155, 175, 176, 182, 208, 209, 211, 260, 264, 266], "py3": 7, "remov": [7, 21, 24, 54, 57, 58, 88, 113, 118, 120, 125, 141, 144, 153, 161, 170, 178, 184, 185, 192, 193, 194, 196, 197, 200, 227, 241, 268, 275, 276, 280, 284], "everyth": [7, 19, 47, 93, 103, 105, 107, 131, 136, 145, 146, 150, 156, 178, 179, 180, 181, 185, 190, 197, 207, 267], "pth": [7, 24, 122, 192, 209, 216, 256, 268], "finish": [7, 8, 20, 49, 98, 102, 153, 181, 183, 190, 207, 208, 216, 223, 229, 242, 282], "abi": [7, 8, 216, 289], "ubuntu": [7, 8, 189, 259], "16": [7, 21, 24, 37, 51, 77, 93, 98, 100, 102, 105, 113, 122, 153, 156, 164, 177, 178, 183, 190, 192, 196, 199, 208, 209, 215, 227, 232, 243, 255, 256, 268, 277, 279, 284], "04": [7, 43, 189, 215, 227, 262, 270], "recent": [7, 54, 110, 120, 142, 143, 155, 161, 167, 171, 180, 189, 256, 259], "distribut": [7, 8, 17, 18, 24, 57, 80, 93, 98, 103, 104, 105, 107, 112, 138, 139, 140, 141, 142, 143, 145, 151, 152, 164, 170, 176, 179, 181, 189, 200, 207, 210, 211, 227, 259, 260, 261, 264, 266, 282, 286, 290], "maco": [7, 8, 115, 155, 192, 242], "clang": [7, 270, 289], "worst": 7, "resolv": [7, 105, 164, 193, 196, 201, 210, 256, 277], "symbol": [7, 227, 241, 256], "linker": 7, "pycapsul": 7, "builtin": [7, 176, 227, 241], "arg0": 7, "arg1": [7, 182], "arg2": [7, 182], "arg3": 7, "arg4": 7, "citizen": [7, 275, 277], "lltmfunction": 7, "staticmethod": [7, 150, 181, 192], "benchmark": [7, 18, 21, 28, 37, 120, 138, 145, 161, 162, 173, 178, 184, 194, 200, 214, 230, 232, 238, 241, 242, 251, 256, 259, 261, 262, 268, 279, 280, 282, 284], "measur": [7, 15, 40, 87, 95, 96, 98, 100, 105, 112, 139, 142, 160, 162, 173, 179, 180, 184, 187, 194, 207, 215, 226, 227, 232, 241, 246, 255, 261, 268, 279], "durat": [7, 88, 176, 180, 189, 266], "32": [7, 23, 24, 51, 60, 93, 98, 100, 103, 105, 110, 120, 139, 161, 167, 172, 175, 178, 182, 183, 189, 192, 196, 215, 217, 227, 264, 279], "128": [7, 8, 56, 57, 60, 93, 105, 139, 143, 146, 155, 157, 161, 178, 181, 182, 183, 197, 200, 203, 207, 216, 217, 227, 241, 249], "rang": [7, 8, 9, 14, 15, 17, 23, 24, 37, 45, 48, 56, 57, 58, 77, 80, 87, 93, 96, 102, 105, 113, 114, 115, 117, 118, 121, 139, 140, 141, 142, 145, 155, 161, 175, 178, 181, 183, 185, 189, 190, 196, 199, 205, 207, 208, 211, 215, 223, 225, 226, 232, 242, 253, 256, 259, 260, 263, 264, 266, 268, 269, 284], "100000": [7, 227], "3f": [7, 24, 284], "wrote": [7, 194, 199], "post": [7, 8, 14, 54, 105, 139, 140, 141, 145, 164, 187, 197, 225, 264], "my": [7, 55, 106, 112, 200, 277], "machin": [7, 8, 23, 39, 41, 45, 48, 54, 55, 56, 58, 59, 60, 61, 65, 80, 93, 95, 96, 99, 115, 117, 138, 139, 140, 145, 151, 152, 153, 155, 160, 172, 173, 178, 182, 183, 184, 185, 197, 199, 205, 214, 215, 223, 240, 242, 250, 251, 256, 259, 266], "506": 7, "480": [7, 232], "444": 7, "694": 7, "349": [7, 98], "335": [7, 164, 183, 260], "443": [7, 183, 232], "523": 7, "speedup": [7, 21, 48, 121, 138, 157, 161, 172, 200, 215, 242, 246, 255, 268, 279, 280, 284], "30": [7, 8, 24, 37, 49, 87, 107, 136, 140, 142, 164, 177, 181, 183, 227, 232, 284], "albeit": [7, 17], "major": [7, 9, 13, 14, 24, 100, 103, 112, 128, 142, 161, 170, 184, 194, 197, 215, 246, 253, 260, 278], "particularli": [7, 16, 21, 58, 113, 171, 185, 242, 279, 284], "engin": [7, 8, 17, 35, 47, 93, 95, 131, 139, 148, 173, 178, 183, 192, 196, 197, 199, 203, 216, 256, 266, 288], "correspondingli": 7, "big": [7, 57, 100, 106, 112, 121, 141, 147, 157, 170, 179, 185, 192], "win": [7, 170], "No": [7, 8, 58, 118, 141, 161, 206, 253, 263], "cuda_devic": 7, "creation": [7, 8, 13, 103, 231, 278, 286], "synchron": [7, 14, 20, 60, 61, 87, 139, 141, 153, 155, 179, 181, 182, 189, 194, 207, 208, 223, 226, 227, 254, 260, 266, 267], "1e6": [7, 24, 205, 227, 260], "1e5": 7, "again": [7, 8, 48, 55, 95, 96, 100, 102, 103, 105, 106, 113, 114, 144, 149, 155, 156, 170, 181, 183, 185, 189, 192, 194, 197, 227, 267, 268, 283], "187": [7, 227], "719": 7, "410": [7, 164], "815": 7, "149": 7, "802": [7, 161], "393": 7, "458": [7, 161], "That": [7, 8, 9, 21, 47, 48, 49, 54, 95, 96, 98, 103, 107, 109, 110, 112, 113, 115, 143, 146, 153, 159, 160, 162, 164, 167, 170, 179, 180, 184, 189, 196, 197, 199, 241, 275, 276, 278, 284], "great": [7, 54, 115, 121, 122, 227, 244, 277], "pull": [7, 96, 103, 104, 131, 160, 283], "dive": [7, 8, 14, 41, 132, 148, 153, 161, 241, 279], "previous": [7, 12, 35, 90, 109, 113, 148, 159, 175, 177, 179, 180, 181, 189, 196, 239, 255, 275, 288], "cover": [7, 10, 17, 18, 20, 23, 37, 51, 103, 108, 118, 125, 131, 136, 137, 138, 140, 145, 155, 175, 176, 179, 182, 183, 190, 194, 196, 202, 207, 215, 216, 226, 234, 235, 236, 237, 240, 241, 242, 252, 259, 277, 279, 280], "elabor": [7, 8, 143, 161, 181], "fly": [7, 17, 56, 106, 179, 200], "background": [7, 8, 36, 80, 102, 178, 190, 192, 199, 251, 252], "tmp": [7, 161, 192, 250, 251, 266, 269], "torch_extens": 7, "emit": [7, 8, 106, 196], "ninja": 7, "verbos": [7, 152, 192, 196, 203, 210], "root": [7, 8, 17, 35, 37, 47, 56, 57, 98, 106, 131, 141, 149, 156, 161, 182, 183, 216, 223, 240, 249, 266], "complic": [7, 9, 17, 106, 107, 112, 113, 121, 145, 196, 211, 226, 227, 288], "techniqu": [7, 20, 21, 24, 54, 65, 105, 106, 112, 114, 133, 138, 143, 149, 150, 151, 160, 168, 171, 173, 175, 177, 183, 192, 197, 200, 201, 242, 256, 259, 268, 275, 280, 284], "fine": [7, 8, 21, 24, 54, 56, 95, 106, 144, 155, 161, 178, 189, 194, 197, 226, 227, 241, 242, 259, 275, 284], "system": [7, 8, 12, 13, 15, 17, 18, 60, 105, 131, 138, 141, 145, 155, 171, 173, 178, 179, 181, 193, 194, 196, 197, 201, 203, 208, 229, 242, 250, 259, 266, 289], "increment": [7, 14, 90, 109, 113, 155, 180], "thu": [7, 8, 12, 13, 24, 35, 42, 54, 90, 93, 105, 113, 131, 140, 157, 170, 173, 185, 223, 227, 232, 242, 259, 279, 286], "didn": [7, 12, 96, 115, 160, 181, 288], "hand": [7, 8, 12, 17, 21, 23, 80, 103, 106, 112, 113, 147, 155, 172, 173, 194, 196, 197, 208, 209, 246, 276, 284], "prospect": 7, "pointwis": [7, 12, 164, 193, 214, 242, 261], "declar": [7, 8, 16, 80], "lltm_cuda": 7, "lltm_cuda_forward": 7, "lltm_cuda_backward": 7, "check_cuda": 7, "is_cuda": 7, "check_contigu": 7, "check_input": 7, "lltm_cuda_kernel": 7, "peek": [7, 206], "cuda_runtim": 7, "templat": [7, 12, 123, 155, 161, 193, 262, 279], "typenam": 7, "scalar_t": [7, 161], "__device__": 7, "__forceinline__": 7, "fmax": 7, "fmin": 7, "d_relu": 7, "explicitli": [7, 8, 23, 40, 44, 47, 53, 57, 58, 93, 95, 109, 131, 141, 142, 143, 152, 156, 164, 183, 184, 187, 196, 223, 242, 278, 280, 283], "zeros_lik": [7, 103, 181], "dim3": 7, "at_dispatch_floating_typ": 7, "lltm_forward_cuda": 7, "lltm_cuda_forward_kernel": 7, "indic": [7, 8, 13, 14, 17, 36, 54, 67, 68, 87, 95, 96, 98, 100, 102, 106, 107, 112, 118, 120, 121, 145, 146, 156, 161, 177, 179, 180, 182, 189, 190, 192, 197, 203, 225, 227, 256, 266, 275, 277, 278], "awai": [7, 8, 51, 100, 102, 106, 107, 109, 179, 180, 181, 197, 210, 278], "runtim": [7, 12, 17, 23, 44, 55, 87, 90, 95, 98, 99, 103, 117, 118, 120, 132, 138, 142, 143, 148, 149, 160, 170, 173, 175, 189, 194, 196, 197, 203, 205, 215, 226, 227, 232, 245, 248, 252, 261, 262, 268, 270, 279, 289], "back": [7, 8, 12, 13, 17, 18, 24, 35, 48, 51, 56, 80, 93, 95, 102, 103, 105, 109, 113, 115, 120, 141, 144, 164, 170, 173, 179, 181, 182, 183, 185, 192, 194, 196, 197, 200, 209, 239, 242, 253, 254, 275, 280], "determin": [7, 8, 9, 12, 14, 21, 24, 44, 53, 96, 98, 103, 104, 105, 106, 109, 112, 115, 131, 142, 143, 145, 157, 170, 171, 172, 177, 194, 196, 197, 227, 232, 233, 242, 266, 280, 283, 284], "conceptu": [7, 8, 35, 47, 54, 121, 241], "switch": [7, 12, 18, 24, 102, 103, 122, 170, 197, 215, 226, 228, 232, 245, 289], "scalartyp": 7, "messag": [7, 19, 54, 95, 118, 148, 155, 192, 196, 203, 259], "insid": [7, 8, 13, 20, 23, 36, 40, 49, 141, 143, 189, 194, 199, 203, 279, 284, 288], "alia": [7, 13, 103], "instanti": [7, 8, 13, 17, 37, 42, 56, 57, 70, 72, 90, 98, 105, 113, 115, 121, 131, 145, 176, 177, 180, 192, 201, 214, 231, 286], "retriev": [7, 8, 17, 20, 35, 37, 54, 144, 145, 175, 179, 181, 182, 197, 223, 259], "at_dispatch_all_typ": 7, "sens": [7, 12, 15, 17, 105, 112, 113, 131, 157, 173, 190], "routin": [7, 8, 197], "convolut": [7, 8, 12, 15, 16, 51, 57, 96, 98, 103, 105, 113, 122, 128, 132, 133, 135, 137, 138, 164, 167, 177, 186, 187, 196, 203, 215, 216, 223, 226, 229, 232, 233, 244, 245, 255, 262, 289], "harder": [7, 105, 268], "ourselv": [7, 8, 40, 54, 149, 179], "grid": [7, 51, 102, 104, 113, 128, 187, 190, 269], "fill": [7, 8, 17, 98, 112, 113, 146, 156, 276, 277], "matric": [7, 15, 21, 44, 53, 95, 109, 162, 171, 203, 284], "2048": [7, 23, 105], "heard": 7, "introductori": 7, "ever": [7, 8, 144, 153, 196, 231], "__restrict__": [7, 279], "size_t": 7, "column": [7, 23, 95, 103, 107, 109, 120, 143, 146, 161, 162, 167, 189, 192, 197, 227, 232, 276, 277, 278], "index": [7, 8, 9, 18, 37, 44, 45, 48, 53, 54, 56, 88, 103, 106, 107, 109, 110, 112, 113, 120, 139, 144, 145, 146, 155, 171, 175, 181, 185, 189, 192, 194, 196, 197, 259, 268, 280, 288], "gates_row": 7, "primarili": [7, 87, 182, 194, 210, 226, 242], "imagin": [7, 95, 103, 106, 112, 150, 155, 170, 171, 185, 197, 227, 239], "giant": [7, 185], "million": [7, 128, 140, 156], "serial": [7, 8, 13, 41, 42, 113, 122, 196, 223, 227, 255, 267], "faster": [7, 8, 12, 15, 24, 54, 61, 80, 100, 103, 105, 113, 122, 138, 140, 142, 152, 153, 156, 157, 162, 164, 172, 173, 181, 185, 194, 199, 226, 227, 241, 242, 243, 259, 261, 266, 279], "right": [7, 8, 12, 13, 15, 17, 35, 39, 44, 47, 53, 54, 57, 68, 87, 95, 100, 102, 105, 107, 109, 112, 121, 146, 155, 163, 167, 170, 179, 180, 181, 184, 185, 189, 192, 199, 200, 215, 223, 288], "inde": [7, 17, 19, 105, 131, 149, 162, 173, 179, 184, 194, 197, 227, 277, 278], "ineffici": [7, 87, 280], "eas": [7, 90, 103, 104, 140, 200, 216, 231, 261], "readabl": [7, 37, 56, 96, 103, 106, 147, 189, 227, 241, 266], "especi": [7, 10, 21, 24, 54, 57, 80, 96, 103, 140, 142, 153, 160, 167, 170, 173, 196, 200, 268, 276, 284], "dimension": [7, 36, 44, 51, 53, 54, 57, 65, 77, 78, 95, 100, 102, 103, 105, 108, 109, 110, 112, 121, 143, 148, 164, 177, 184, 185, 190, 192, 197, 203, 211, 278], "row": [7, 23, 37, 56, 80, 95, 100, 103, 107, 109, 110, 112, 113, 141, 143, 145, 146, 162, 181, 197, 223, 227, 276, 278, 288], "n": [7, 8, 9, 15, 21, 24, 35, 47, 51, 65, 77, 78, 87, 90, 95, 100, 102, 103, 105, 113, 121, 139, 140, 141, 153, 155, 162, 163, 167, 175, 177, 181, 182, 183, 185, 190, 196, 197, 199, 216, 227, 242, 266, 268, 277, 279, 284, 288], "arithmet": [7, 24, 44, 98, 103, 173], "within": [7, 9, 17, 23, 65, 90, 95, 96, 102, 113, 114, 115, 120, 131, 143, 148, 150, 161, 171, 177, 180, 182, 192, 193, 194, 197, 200, 211, 215, 227, 233, 242, 250, 252, 255, 259, 267, 269, 278, 279, 280, 283], "accept": [7, 45, 93, 95, 105, 110, 143, 145, 159, 162, 167, 172, 173, 179, 182, 189, 192, 207, 215, 232, 242, 263, 286, 288], "fortun": [7, 8, 13, 18, 93, 155, 156, 227], "foo": [7, 9, 182, 241, 270, 283, 286], "rand": [7, 8, 18, 90, 103, 150, 161, 205, 208, 209, 215, 216, 223, 242, 249, 251, 263, 264, 284, 289], "12": [7, 37, 77, 98, 102, 120, 123, 139, 140, 161, 181, 190, 215, 227, 263, 268, 277, 284], "foo_a": 7, "trace": [7, 9, 12, 13, 19, 35, 47, 95, 102, 120, 138, 148, 161, 167, 173, 184, 189, 193, 196, 210, 252, 253, 257, 261, 266, 279], "packed_accessor64": 7, "packed_accessor32": 7, "pack": [7, 54, 161, 179, 181, 183, 207, 279], "integ": [7, 8, 12, 45, 98, 103, 107, 109, 112, 145, 177, 196, 199, 203, 232, 268, 278], "fundament": [7, 54, 97, 100, 109, 112, 121, 138, 163, 173, 196, 197, 202, 209, 241, 276], "packedtensoraccessor32": 7, "restrictptrtrait": 7, "decompos": [7, 13, 21, 139, 196, 284], "packedaccessor32": 7, "variant": [7, 54, 98, 100, 102, 104, 143, 149, 178, 184, 197, 200, 214, 264], "int32_t": 7, "packedaccessor64": 7, "slower": [7, 21, 61, 153, 173, 178, 180, 194, 199, 268, 269, 280, 284], "host": [7, 23, 39, 59, 87, 99, 106, 139, 140, 143, 153, 155, 173, 175, 182, 183, 189, 211, 232, 242, 250], "reshap": [7, 8, 15, 24, 100, 103, 112, 113, 175, 227, 277, 280, 289], "pattern": [7, 21, 100, 102, 138, 143, 155, 161, 171, 182, 211, 216, 217, 275, 277, 282, 284, 286], "lltm_cuda_backward_kernel": 7, "lltm_backward_cuda": 7, "d_gate_weight": 7, "hassl": [7, 8], "entail": [7, 196], "simpler": [7, 113, 141, 143, 149, 159, 171, 227, 288], "hope": [7, 54, 163, 170, 194, 200, 215], "fastest": [7, 184, 251], "129": [7, 120], "431": 7, "304": [7, 54], "641": [7, 164], "equip": [7, 150, 156, 259, 275], "faq": 7, "blog": [7, 139, 140, 146, 151, 200, 215, 225], "framework": [8, 13, 28, 39, 57, 95, 107, 108, 121, 134, 136, 138, 173, 175, 181, 184, 192, 200, 203, 207, 256, 266, 282], "sit": [8, 114, 115, 117, 118, 171], "atop": 8, "substanti": [8, 145, 173], "codebas": [8, 13, 17], "foundat": [8, 146, 179, 192, 197, 202], "underli": [8, 12, 17, 44, 53, 65, 80, 103, 105, 122, 145, 157, 161, 172, 182, 196, 211, 242, 266, 277, 278, 280], "popular": [8, 73, 80, 105, 121, 132, 145, 155, 156, 197, 200, 216, 217, 256, 261, 268, 279], "stochast": [8, 40, 51, 57, 70, 95, 98, 104, 113, 121, 155, 179, 180], "descent": [8, 40, 47, 51, 70, 95, 98, 104, 113, 121, 131, 155, 197, 245, 268], "digit": [8, 51, 98, 113, 133, 138, 139, 140, 192, 256], "whirlwind": 8, "wet": 8, "appetit": 8, "watch": [8, 104, 151, 155], "lightn": [8, 145], "talk": [8, 12, 54, 57, 60, 98, 109, 173, 179, 182, 196, 197], "cppcon": 8, "2018": 8, "quick": [8, 21, 36, 53, 95, 105, 107, 110, 112, 140, 153, 157, 162, 172, 197, 227, 230, 238, 261, 262, 268, 284], "humor": 8, "sweep": [8, 184], "philosophi": 8, "ecosystem": [8, 118, 148], "http": [8, 23, 24, 29, 30, 31, 32, 33, 38, 49, 50, 54, 67, 80, 81, 82, 83, 84, 85, 86, 89, 97, 102, 105, 108, 113, 115, 116, 118, 121, 128, 134, 139, 146, 147, 149, 158, 159, 160, 168, 170, 178, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 202, 225, 226, 227, 230, 231, 234, 235, 236, 237, 240, 256, 268, 271, 274, 276, 278, 287, 289], "org": [8, 29, 30, 31, 32, 33, 38, 49, 50, 54, 67, 80, 81, 82, 83, 84, 85, 86, 89, 97, 100, 102, 104, 105, 108, 116, 121, 128, 134, 146, 147, 158, 159, 160, 168, 170, 178, 185, 188, 189, 191, 194, 195, 196, 197, 202, 223, 226, 230, 231, 234, 235, 236, 237, 268, 271, 274, 276, 278, 287, 288, 289, 290], "cppdoc": 8, "embark": 8, "excit": [8, 160, 170], "journei": [8, 57, 202], "team": [8, 118, 145, 180, 192, 200], "job": [8, 49, 57, 58, 59, 65, 87, 105, 142, 145, 151, 152, 153, 155, 175, 290], "latenc": [8, 21, 136, 138, 143, 145, 152, 161, 173, 178, 194, 215, 250, 251, 259, 284], "reinforc": [8, 17, 104, 135, 138, 163, 181, 182, 186, 262], "game": [8, 48, 57, 163, 256], "tractabl": [8, 106], "multithread": [8, 47, 61, 120, 173, 223, 227, 259], "lock": [8, 9, 17, 61, 155, 173, 181, 182, 208], "gil": [8, 61, 153], "multiprocess": [8, 14, 17, 37, 41, 56, 58, 60, 61, 139, 140, 153, 155, 179, 182, 183, 207, 208, 209, 259, 260, 266], "scalabl": [8, 138, 142, 145, 197, 203, 215, 216, 242, 259, 275], "shortcom": [8, 277], "constraint": [8, 15, 21, 23, 90, 107, 133, 138, 143, 145, 171, 179, 192, 197, 208, 226, 227, 239, 256, 264, 266, 284], "neuroevolut": 8, "owner": [8, 181, 182, 183], "anyth": [8, 16, 19, 48, 77, 78, 98, 100, 103, 106, 109, 110, 112, 113, 121, 178, 200, 223, 239, 240, 256, 268], "web": [8, 115, 223], "page": [8, 10, 13, 19, 55, 59, 65, 94, 113, 120, 121, 137, 138, 146, 148, 173, 183, 189, 196, 197, 203, 208, 213, 242, 254], "server": [8, 20, 134, 138, 142, 153, 176, 183, 209, 216, 223, 250, 256, 259, 263], "3d": [8, 65, 100, 102, 109, 110, 175, 192, 242], "graphic": [8, 184, 289], "photo": [8, 96], "softwar": [8, 176, 189, 266, 289], "remain": [8, 93, 95, 105, 131, 141, 142, 155, 170, 173, 177, 185, 242, 263, 264, 266, 268, 277, 280], "forth": [8, 113], "retain": [8, 44, 53, 103, 122, 131], "intuit": [8, 57, 80, 98, 103, 107, 122, 161, 185, 192, 196, 223, 239, 276], "tradit": [8, 57, 105, 107, 162, 182, 196, 197, 200, 266, 279], "experi": [8, 13, 105, 106, 140, 142, 155, 163, 173, 176, 179, 180, 184, 185, 187, 192, 194, 196, 197, 200, 207, 210, 226, 241, 243, 250, 256, 257, 259, 268, 275, 283, 288, 290], "compet": [8, 145, 173], "meant": [8, 10, 14, 90, 95, 100, 140, 197, 242, 266, 277], "complement": 8, "alik": 8, "love": 8, "simplic": [8, 80, 140, 149, 173, 179, 180, 211, 227, 279], "core": [8, 12, 13, 14, 49, 106, 107, 108, 113, 121, 122, 131, 138, 143, 155, 156, 161, 164, 173, 178, 189, 196, 202, 223, 226, 241, 259, 266], "principl": [8, 12, 110, 112, 145], "curiou": [8, 157, 170, 172, 206], "paragraph": 8, "tri": [8, 23, 57, 95, 106, 112, 180, 196, 226, 256, 289], "close": [8, 17, 21, 24, 57, 95, 100, 102, 103, 105, 106, 140, 145, 170, 190, 240, 242, 284], "experienc": [8, 90], "ask": [8, 21, 96, 98, 100, 147, 156, 173, 179, 196, 197, 227, 283, 284], "rememb": [8, 48, 57, 80, 110, 113, 120, 122, 131, 162, 163, 170, 173, 185, 197, 200, 227], "dot": [8, 17, 35, 57, 110, 112, 131, 133, 138, 162, 185, 186, 227, 253, 262, 264, 288], "colon": [8, 192], "grab": [8, 10, 57, 102, 178, 183], "readi": [8, 13, 20, 54, 96, 98, 104, 106, 107, 112, 113, 138, 140, 155, 167, 175, 176, 179, 181, 182, 183, 197, 199, 232, 256], "cmake": [8, 216, 289], "websit": [8, 96, 180, 223, 225], "free": [8, 13, 24, 40, 47, 54, 80, 90, 105, 114, 115, 117, 118, 122, 140, 141, 145, 155, 160, 163, 164, 170, 173, 179, 181, 185, 189, 196, 241], "too": [8, 13, 17, 24, 48, 68, 73, 87, 93, 98, 100, 105, 106, 112, 113, 120, 121, 141, 143, 153, 170, 173, 177, 180, 181, 183, 185, 196, 241, 254, 275], "debug": [8, 12, 24, 65, 106, 132, 133, 138, 144, 180, 186, 196, 201, 210, 227, 241, 250, 262, 269, 290], "try": [8, 15, 17, 18, 21, 24, 40, 44, 48, 51, 53, 54, 57, 58, 65, 80, 95, 103, 104, 105, 106, 107, 108, 109, 113, 114, 115, 120, 131, 142, 145, 146, 147, 148, 156, 161, 163, 167, 170, 173, 175, 176, 177, 179, 180, 185, 189, 193, 194, 196, 200, 201, 215, 216, 226, 227, 239, 240, 256, 259, 264, 268, 276, 284], "cu90": 8, "url": [8, 24, 113, 189, 194, 197, 240, 268], "wget": [8, 23, 199, 268], "nightli": [8, 23, 159, 194, 199, 256, 266, 268, 288, 290], "dep": 8, "latest": [8, 11, 13, 17, 93, 96, 121, 122, 132, 138, 140, 148, 155, 166, 174, 178, 179, 182, 185, 187, 192, 194, 217], "unzip": [8, 24, 55, 192, 199, 255], "tini": [8, 139, 170, 256], "ident": [8, 21, 60, 90, 95, 103, 104, 113, 121, 143, 152, 167, 190, 193, 196, 201, 227, 278, 284], "ey": [8, 173], "fledg": 8, "cmakelist": [8, 216], "cmake_minimum_requir": [8, 216], "fatal_error": [8, 216], "add_execut": [8, 216], "target_link_librari": [8, 216], "set_properti": [8, 216], "cxx_standard": [8, 216], "visual": [8, 17, 47, 57, 80, 87, 88, 98, 104, 135, 138, 140, 144, 145, 150, 160, 179, 186, 189, 192, 210, 232, 240, 261, 262, 269, 270, 277], "studio": [8, 270], "qmake": 8, "makefil": 8, "feel": [8, 13, 24, 40, 47, 54, 105, 114, 115, 117, 118, 122, 140, 160, 161, 163, 164, 170, 189, 196], "comfort": 8, "box": [8, 12, 13, 14, 19, 21, 45, 80, 137, 138, 141, 145, 148, 150, 155, 178, 181, 189, 196, 199, 200, 203, 223, 225, 256, 284, 288], "cmake_prefix_path": 8, "invok": [8, 12, 105, 153, 155, 159, 160, 161, 173, 176, 182, 183, 203, 223, 239, 249, 253, 259, 269, 277], "agre": [8, 260], "break": [8, 9, 12, 13, 14, 19, 24, 36, 37, 87, 95, 100, 114, 122, 141, 142, 148, 170, 177, 181, 183, 194, 255, 264, 275], "unexpect": [8, 56, 242, 277], "pwd": [8, 223], "fa350df05ecf": 8, "home": [8, 44, 53, 213, 275, 289], "mkdir": [8, 113, 189, 192], "cd": [8, 189, 199, 223, 289], "dcmake_prefix_path": [8, 216], "identif": [8, 216], "usr": [8, 23, 155, 216], "bin": [8, 98, 155, 216, 223, 255, 269], "cc": [8, 47, 216, 289], "detect": [8, 14, 15, 23, 57, 100, 135, 138, 178, 186, 189, 194, 196, 216, 217, 229, 242, 254, 259, 262], "pthread_creat": 8, "config": [8, 13, 21, 93, 139, 141, 145, 148, 161, 178, 193, 216, 217, 239, 246, 250, 253, 256, 263, 267, 268, 269, 279, 284], "scan": [8, 98, 100, 192, 196], "50": [8, 21, 24, 57, 58, 98, 113, 156, 161, 164, 177, 180, 183, 199, 215, 242, 277, 282, 284], "cmakefil": 8, "dir": [8, 87, 102, 145, 241, 250, 266], "100": [8, 24, 37, 53, 77, 102, 107, 121, 139, 142, 148, 153, 161, 164, 177, 178, 179, 180, 183, 190, 192, 211, 215, 227, 241, 251, 277, 279, 284], "folder": [8, 24, 55, 57, 87, 88, 96, 98, 140, 190, 199, 266, 289], "enter": [8, 54, 140, 153, 155], "ran": [8, 112, 142, 179, 182, 184, 227], "binari": [8, 54, 57, 103, 115, 155, 164, 177, 194, 207, 216, 227, 255, 276, 290], "me": [8, 21, 54, 170, 185, 284], "besid": [8, 98, 112, 171, 181, 225, 242], "encapsul": [8, 40, 51, 100, 104, 148, 170, 181], "buffer": [8, 17, 48, 51, 122, 140, 141, 149, 153, 157, 159, 163, 167, 170, 171, 172, 173, 177, 180, 196, 208, 231, 244, 245, 264, 266, 267, 286, 289], "form": [8, 15, 18, 21, 45, 51, 54, 57, 65, 106, 113, 115, 144, 147, 161, 185, 192, 200, 208, 209, 223, 242, 251, 259, 268, 280, 284, 286], "record": [8, 12, 24, 35, 47, 54, 113, 122, 131, 132, 138, 139, 140, 148, 149, 150, 170, 179, 180, 182, 183, 196, 217, 232, 256, 290], "normal": [8, 12, 14, 15, 24, 40, 42, 45, 54, 56, 57, 90, 96, 98, 100, 102, 104, 105, 107, 112, 121, 122, 128, 139, 149, 155, 156, 171, 173, 178, 181, 182, 184, 185, 190, 192, 194, 197, 200, 201, 216, 242, 249, 254, 268, 276], "nest": [8, 17, 36, 47, 98, 103, 138, 141, 179, 181, 183, 184, 186, 193, 262, 285, 290], "similarli": [8, 15, 56, 88, 96, 103, 141, 144, 145, 146, 161, 162, 170, 173, 175, 209, 263, 267, 278], "kcuda": [8, 269], "w": [8, 35, 40, 47, 51, 80, 110, 112, 131, 140, 164, 183, 189, 196, 199, 268, 279], "register_paramet": [8, 286], "reflect": [8, 12, 44, 53, 98, 103, 179, 196], "magic": [8, 107, 147, 155, 162], "assign": [8, 45, 49, 51, 58, 96, 100, 103, 105, 106, 107, 110, 112, 114, 141, 155, 171, 179, 197, 211, 223, 239, 242, 259], "behind": [8, 12, 21, 49, 87, 105, 107, 113, 121, 149, 180, 263, 276, 278, 284, 286, 290], "scene": [8, 113, 121, 256, 286], "another_bia": 8, "recurs": [8, 20, 48, 141, 148, 194, 240, 286], "0808": 8, "8613": 8, "2017": [8, 80], "5206": 8, "5353": 8, "3740": 8, "0976": 8, "4786": 8, "4928": 8, "1434": 8, "4713": 8, "1735": [8, 177], "3293": 8, "3467": 8, "3858": 8, "1980": 8, "1986": 8, "1975": 8, "4278": 8, "1831": 8, "2709": 8, "3730": 8, "4307": 8, "3236": 8, "0629": 8, "2038": 8, "4638": 8, "2023": [8, 192], "1230": 8, "0516": 8, "aptli": [8, 16], "register_modul": 8, "dropout": [8, 24, 42, 54, 80, 100, 102, 113, 122, 139, 143, 145, 147, 156, 181, 183, 185, 280, 284], "conv2d": [8, 15, 24, 48, 51, 57, 98, 102, 113, 122, 139, 149, 177, 178, 182, 190, 193, 196, 203, 216, 223, 232, 242, 243, 263, 282], "subtleti": [8, 131, 138, 278], "bodi": [8, 161], "upon": [8, 22, 54, 61, 128, 155, 159, 185, 190, 194, 200, 225, 242, 262, 266], "tree": [8, 13, 18, 106, 112, 210, 290], "p": [8, 23, 24, 54, 73, 100, 106, 112, 113, 121, 139, 140, 149, 155, 161, 164, 167, 170, 181, 182, 183, 193, 199, 203, 207, 284, 289], "0345": [8, 177], "4456": 8, "6313": 8, "3585": 8, "4008": 8, "1647": 8, "2891": 8, "0527": 8, "0354": 8, "3084": 8, "2025": [8, 255], "0343": 8, "1824": 8, "4630": 8, "2862": 8, "2500": [8, 102], "0420": 8, "3679": 8, "1482": 8, "0460": 8, "1967": 8, "2132": 8, "1992": 8, "4257": 8, "0739": 8, "01": [8, 14, 24, 37, 47, 51, 101, 102, 120, 155, 183, 200, 205, 215, 255, 260, 262, 270], "6861": 8, "1166": 8, "45": [8, 102, 145, 161, 183, 215, 277], "0333": 8, "9983": 8, "0705": 8, "named_paramet": [8, 36, 177, 197], "ordereddict": [8, 177, 199], "13": [8, 77, 98, 102, 120, 177, 183, 192, 200, 215, 223, 262, 277], "48": [8, 21, 161, 164, 190, 215, 232, 284], "1863": 8, "8611": 8, "1228": 8, "3269": 8, "9858": 8, "0339": 8, "2484": 8, "2035": 8, "2103": 8, "0715": 8, "2975": 8, "4350": 8, "1878": 8, "3616": 8, "1050": 8, "4982": 8, "0335": [8, 177], "1605": 8, "4963": 8, "4099": 8, "2883": 8, "1818": 8, "3447": 8, "1501": 8, "0215": 8, "0250": 8, "0408": 8, "3756": 8, "2149": 8, "3636": 8, "8559": 8, "1572": 8, "1069": 8, "1247": [8, 177], "8060": 8, "topic": [8, 54, 65, 80, 96, 103, 114, 115, 117, 118, 125, 131, 132, 134, 137, 198, 234, 235, 236, 237, 247, 287], "devour": 8, "menu": [8, 55], "concept": [8, 14, 39, 40, 60, 99, 108, 109, 113, 121, 125, 138, 145, 163, 173, 181, 184, 185, 197, 202, 232, 241, 259, 266, 269, 279], "pipelin": [8, 20, 65, 113, 138, 179, 192, 199, 266], "briefli": [8, 40, 65, 138, 143, 179, 194, 200, 203], "who": [8, 54, 80, 105, 108, 142, 155, 170, 196, 202, 209, 223, 227, 251, 255], "heap": 8, "live": [8, 13, 18, 103, 137, 138, 144, 173, 182, 183, 278], "referenc": [8, 183], "lower": [8, 17, 21, 55, 80, 87, 100, 102, 138, 140, 141, 142, 145, 153, 159, 161, 170, 171, 179, 180, 184, 190, 192, 196, 197, 200, 241, 242, 256, 263, 278, 284], "realm": 8, "heavili": [8, 173, 185, 268], "ergonom": 8, "shown": [8, 12, 21, 24, 57, 95, 103, 113, 131, 141, 143, 145, 161, 163, 180, 181, 183, 184, 189, 192, 194, 197, 209, 215, 216, 223, 255, 256, 257, 259, 260, 266, 276, 277, 278, 283, 284], "far": [8, 17, 51, 54, 68, 95, 98, 100, 103, 105, 106, 107, 121, 144, 155, 170, 177, 180, 185, 196, 197, 200, 227, 275], "stack": [8, 12, 17, 18, 44, 53, 98, 120, 138, 143, 157, 163, 167, 173, 176, 181, 185, 189, 190, 192, 197, 200, 266], "shared_ptr": 8, "cognit": 8, "think": [8, 48, 57, 73, 96, 98, 106, 107, 109, 110, 112, 121, 162, 179, 182, 184, 197, 200, 278, 288], "everywher": [8, 103, 112], "make_shar": 8, "stai": [8, 87, 142, 143, 148, 179, 180, 181], "shorten": 8, "wait": [8, 20, 87, 142, 147, 153, 155, 156, 161, 173, 176, 181, 182, 183, 189, 192, 197, 208, 231, 232, 242, 266], "mymodul": [8, 207, 286], "hell": 8, "lot": [8, 12, 13, 18, 24, 56, 95, 106, 113, 139, 141, 155, 167, 182, 185, 189, 194, 197, 226, 227, 241, 268, 275], "came": [8, 57, 276], "scheme": [8, 23, 104, 105, 138, 197, 231, 239, 275, 282, 286], "hide": [8, 149, 179, 288], "reserv": [8, 13, 18, 189, 267], "simplifi": [8, 13, 17, 28, 113, 146, 153, 175, 185, 192, 199, 211, 266, 275, 278, 282, 290], "linearimpl": 8, "torch_modul": 8, "brief": [8, 28, 87, 95, 106, 179, 197, 200], "typedef": 8, "among": [8, 12, 58, 87, 93, 104, 143, 177, 189, 225, 259], "holder": 8, "arrow": [8, 47, 143], "resembl": [8, 15, 106, 151, 180], "extra": [8, 12, 61, 98, 103, 105, 109, 110, 113, 117, 141, 146, 147, 149, 156, 159, 171, 179, 185, 192, 194, 199, 216, 232, 241, 242], "netimpl": 8, "subtl": [8, 103, 226], "deserv": 8, "tricki": [8, 21, 150, 193, 196, 197, 284], "nullptr": [8, 269], "familiar": [8, 12, 13, 39, 40, 44, 48, 53, 58, 59, 61, 90, 98, 99, 103, 104, 106, 108, 113, 122, 138, 140, 144, 151, 152, 155, 163, 175, 182, 196, 223, 227, 241, 283], "pythonista": 8, "disadvantag": [8, 122], "said": [8, 163, 170, 179, 180, 275, 276], "introduct": [8, 14, 19, 21, 50, 52, 58, 59, 60, 61, 62, 89, 90, 95, 100, 107, 108, 111, 114, 115, 116, 118, 131, 138, 148, 151, 152, 161, 186, 200, 201, 202, 216, 242, 253, 256, 261, 262, 277, 284], "sooner": [8, 140], "technic": [8, 155, 156, 170, 197, 205, 206, 214, 275], "henceforth": 8, "recap": [8, 51, 180, 231, 278], "adversari": [8, 48, 104, 123, 135, 138, 262], "architectur": [8, 21, 36, 57, 61, 80, 90, 100, 105, 106, 136, 138, 140, 143, 145, 151, 157, 167, 173, 175, 177, 184, 190, 192, 194, 200, 201, 223, 226, 242, 279, 282, 284], "repositori": [8, 13, 59, 88, 125, 140, 143, 155, 175, 176, 183, 184, 185, 199, 266], "distinct": [8, 21, 57, 87, 103, 112, 131, 140, 183, 190, 196, 197, 256, 284], "transform": [8, 15, 21, 22, 24, 28, 35, 36, 37, 38, 39, 40, 41, 42, 44, 48, 54, 57, 93, 95, 96, 98, 102, 103, 104, 120, 123, 133, 134, 135, 138, 139, 141, 155, 156, 157, 159, 161, 163, 167, 170, 171, 178, 182, 185, 186, 189, 190, 192, 193, 199, 201, 215, 216, 227, 229, 239, 241, 242, 246, 249, 253, 256, 262, 264, 268, 280, 282, 284], "probabl": [8, 12, 36, 54, 57, 96, 100, 103, 105, 106, 109, 112, 139, 144, 145, 147, 178, 180, 190, 192, 215, 280], "judg": 8, "closer": [8, 95, 105, 180], "feedback": [8, 24, 131, 140, 160, 163, 164, 201, 214, 267, 290], "authent": 8, "theori": [8, 54, 57, 95, 105, 144, 173], "delic": 8, "tandem": [8, 252], "indistinguish": 8, "fool": [8, 54, 80], "excel": [8, 56, 190, 208], "realist": [8, 200, 280], "2d": [8, 36, 57, 100, 113, 141, 146, 177, 181, 192, 193, 197, 211], "dcgangeneratorimpl": 8, "knoises": 8, "conv1": [8, 51, 100, 102, 113, 122, 139, 172, 177, 182, 190, 243], "convtranspose2dopt": 8, "batch_norm1": 8, "conv2": [8, 51, 100, 102, 113, 122, 139, 177, 182, 190, 243], "pad": [8, 24, 54, 100, 113, 149, 184, 200, 242, 277, 280, 284], "batch_norm2": 8, "conv3": [8, 113], "batch_norm3": 8, "conv4": 8, "convtranspose2d": 8, "batchnorm2d": [8, 24, 57, 113, 149, 242, 263], "dcgangener": 8, "chosen": [8, 96, 100, 142, 180, 194, 226, 227, 256], "cours": [8, 17, 21, 24, 58, 95, 96, 103, 105, 108, 109, 112, 113, 144, 155, 190, 223, 284], "student": [8, 105], "harm": [8, 105], "discoveri": [8, 196], "fed": [8, 15, 41, 54, 57, 192, 197], "soylent": 8, "regularli": [8, 58], "channel": [8, 13, 15, 24, 47, 48, 51, 57, 96, 98, 100, 103, 105, 113, 133, 138, 143, 177, 186, 190, 193, 199, 207, 216, 229, 242, 262], "moduleopt": 8, "linearopt": 8, "leaki": [8, 57], "squash": [8, 156, 163], "sequenti": [8, 15, 24, 54, 73, 100, 112, 121, 156, 171, 193, 205, 215, 242, 259, 260, 280, 286, 288], "orient": [8, 187], "layer": [8, 12, 13, 14, 15, 16, 18, 20, 21, 24, 35, 41, 42, 47, 51, 54, 57, 60, 65, 73, 80, 93, 95, 98, 102, 103, 104, 105, 107, 113, 121, 122, 128, 131, 137, 138, 139, 140, 141, 145, 146, 147, 148, 156, 164, 171, 175, 177, 178, 179, 182, 183, 185, 187, 196, 197, 199, 201, 205, 206, 207, 210, 214, 215, 225, 226, 229, 231, 233, 239, 243, 244, 246, 264, 268, 279, 282, 284], "conv2dopt": 8, "leakyrelu": [8, 57], "leakyreluopt": 8, "negative_slop": 8, "fourth": [8, 70, 121, 150], "knob": [8, 259], "sampler": [8, 24, 37, 60, 104, 139, 140, 179, 187], "collat": [8, 56], "wherev": 8, "make_data_load": 8, "unique_ptr": 8, "spawn": [8, 14, 23, 54, 57, 58, 60, 65, 139, 153, 155, 181, 182, 183, 207, 208, 209, 260, 266], "concurr": [8, 120, 143, 145, 173, 208, 242, 259, 264], "kbatchsiz": 8, "dataloaderopt": 8, "consol": [8, 190, 192], "field": [8, 13, 14, 17, 18, 36, 54, 100, 110, 112, 131, 135, 155, 170, 181, 189, 196, 199, 266, 277], "rebuild": [8, 227], "danc": [8, 15], "generator_optim": 8, "adamopt": 8, "2e": [8, 95], "beta": [8, 22, 132, 133, 138, 186, 248, 261, 262, 278], "make_tupl": 8, "discriminator_optim": 8, "5e": 8, "adagrad": [8, 104, 121, 262, 278, 285, 290], "lbfg": [8, 15], "rmsprop": [8, 40, 51, 74, 107, 121], "sgd": [8, 24, 40, 47, 48, 51, 72, 74, 93, 102, 104, 107, 113, 121, 122, 131, 153, 155, 181, 182, 183, 187, 190, 216, 244, 245, 249], "exhaust": [8, 14, 196], "knumberofepoch": 8, "batch_index": 8, "real_imag": 8, "real_label": 8, "real_output": 8, "d_loss_real": 8, "binary_cross_entropi": [8, 226], "fake_imag": 8, "fake_label": 8, "fake_output": 8, "d_loss_fak": 8, "d_loss": 8, "fill_": [8, 9, 189, 277], "g_loss": 8, "printf": 8, "r": [8, 14, 17, 24, 40, 47, 51, 80, 90, 106, 135, 138, 161, 162, 163, 164, 167, 180, 181, 183, 192, 199, 216, 227, 242, 259, 288], "2ld": 8, "3ld": 8, "4f": [8, 139, 140], "batches_per_epoch": 8, "evalu": [8, 15, 21, 24, 28, 40, 42, 80, 95, 96, 102, 105, 115, 122, 148, 162, 167, 175, 180, 182, 190, 194, 196, 199, 217, 256, 284], "uniformli": [8, 93, 180, 242], "robust": [8, 54, 58, 59, 80, 103, 142, 180, 215], "smooth": [8, 105, 114, 192], "propag": [8, 13, 20, 35, 40, 47, 49, 51, 57, 105, 109, 110, 113, 150, 159, 164, 179, 242], "repeat": [8, 17, 23, 24, 95, 146, 147, 161, 179, 189, 196, 201, 207, 232, 241, 246, 264, 275], "spiel": 8, "ideal": [8, 17, 37, 95, 98, 103, 105, 173, 185, 196, 203, 251], "progress": [8, 12, 18, 28, 57, 58, 102, 104, 156, 185, 190, 209, 266, 279], "yet": [8, 13, 14, 23, 55, 80, 95, 98, 103, 117, 118, 148, 155, 173, 182, 185, 197, 209, 216, 256, 263, 280], "moment": [8, 14, 263, 278, 289], "observ": [8, 17, 24, 51, 56, 87, 104, 128, 139, 140, 145, 148, 156, 163, 164, 170, 173, 179, 180, 181, 183, 184, 185, 194, 200, 205, 215, 217, 226, 227, 233, 239, 246, 257, 260, 261, 263, 278, 282], "meaning": [8, 54, 105, 164, 266], "3c0711f20896": 8, "dcga": 8, "6876": 8, "1304": 8, "3776": 8, "3101": 8, "300": [8, 140, 183, 215, 227, 241], "3652": 8, "6626": 8, "400": [8, 51, 122, 227, 241, 256], "8057": 8, "2795": [8, 227], "3531": 8, "4452": 8, "600": [8, 164, 180], "3501": 8, "0811": [8, 113], "700": 8, "3581": 8, "5623": 8, "800": 8, "6423": 8, "7385": 8, "900": 8, "3592": 8, "7333": 8, "4660": 8, "5242": 8, "6364": 8, "0886": 8, "3717": 8, "8103": 8, "0201": 8, "3544": 8, "4522": 8, "6545": 8, "quickli": [8, 39, 48, 87, 105, 106, 107, 112, 113, 121, 143, 170, 180, 185, 201, 202, 217, 266], "onto": [8, 12, 17, 20, 23, 48, 100, 102, 103, 138, 156, 170, 182, 183, 197, 242, 266, 286], "somewher": [8, 100, 106, 107, 122], "kcpu": [8, 269, 289], "last": [8, 14, 17, 24, 36, 47, 54, 57, 58, 80, 88, 90, 93, 98, 100, 103, 104, 107, 110, 115, 128, 133, 138, 143, 144, 147, 155, 156, 161, 170, 179, 180, 181, 183, 184, 185, 186, 190, 196, 199, 216, 226, 242, 256, 262, 275, 278, 282], "whose": [8, 87, 90, 95, 96, 105, 112, 140, 144, 164, 173, 192, 225, 227], "insert": [8, 15, 21, 24, 100, 183, 196, 217, 263, 282, 284], "explicit": [8, 9, 141, 164, 173, 183, 196, 200, 223, 226, 248, 253, 261, 262, 276, 283], "suppli": [8, 109, 164, 178], "op": [8, 9, 13, 14, 18, 53, 87, 118, 131, 132, 138, 139, 140, 141, 143, 148, 149, 153, 155, 161, 164, 178, 189, 200, 203, 207, 214, 226, 231, 261, 263, 268, 269, 276, 277, 279, 280, 286], "previou": [8, 14, 17, 18, 20, 21, 40, 54, 58, 60, 103, 104, 105, 113, 118, 128, 140, 141, 142, 146, 147, 150, 151, 152, 156, 163, 170, 173, 175, 177, 179, 180, 181, 183, 184, 185, 189, 190, 192, 194, 196, 197, 203, 227, 233, 242, 256, 284], "resid": [8, 105, 173], "downstream": [8, 192], "portabl": [8, 251], "augment": [8, 28, 56, 113, 128, 135, 138, 187, 196, 199], "period": [8, 54, 57, 142, 145, 163, 189, 266], "middl": 8, "procedur": [8, 51, 134, 180, 187], "restor": [8, 80, 122, 153, 164, 244], "session": [8, 105, 115], "deseri": [8, 122], "filenam": [8, 113, 120, 192, 226, 266], "interv": [8, 17, 95, 145, 183], "kcheckpointeveri": 8, "pt": [8, 58, 122, 139, 140, 141, 216, 217, 243, 251, 289], "str": [8, 9, 23, 24, 88, 140, 175, 179, 182, 192, 196, 227, 259], "checkpoint_count": 8, "counter": [8, 14, 54, 57, 148, 155, 193, 253], "bump": 8, "beta1": [8, 57], "krestorefromcheckpoint": 8, "intermediari": [8, 144], "xxx": [8, 18, 56], "matplotlib": [8, 15, 37, 57, 62, 95, 96, 98, 102, 113, 180, 185, 190, 192], "argpars": [8, 139, 140, 181, 182, 183], "pyplot": [8, 15, 37, 102, 113, 190, 192], "plt": [8, 15, 37, 102, 185, 190, 192], "parser": [8, 106, 139, 140, 181, 182, 183], "argumentpars": [8, 139, 140, 181, 182, 183], "add_argu": [8, 139, 140, 181, 182, 183], "png": [8, 56, 138, 199], "parse_arg": [8, 139, 140, 181, 182, 183], "jit": [8, 9, 12, 18, 24, 90, 194, 203, 216, 227, 232, 246, 253, 255, 256, 289], "sample_fil": 8, "mul": [8, 148, 161, 196, 227, 241, 289], "uint8": [8, 161, 199], "numpi": [8, 15, 19, 22, 24, 45, 48, 56, 62, 76, 78, 79, 95, 102, 113, 115, 120, 137, 138, 150, 178, 183, 190, 192, 194, 225, 241, 256, 262, 275, 284, 290], "axi": [8, 37, 87, 109, 110, 146, 173, 177, 192], "subplot": 8, "imshow": [8, 15, 37, 102, 113, 190, 192], "cmap": [8, 37, 102, 113, 190], "grai": [8, 37, 113, 163], "get_xaxi": 8, "set_vis": 8, "get_yaxi": 8, "savefig": 8, "out_fil": 8, "17": [8, 98, 102, 120, 161, 196, 215, 216, 227, 262, 277], "57": [8, 21, 37, 102, 120, 161, 232], "4953": 8, "0195": 8, "3610": 8, "8148": 8, "4072": 8, "36760": 8, "4444": 8, "3761": 8, "8790": 8, "3977": 8, "3315": 8, "120": [8, 51, 102, 122, 128, 177, 183, 190, 232, 243], "8084": 8, "hoorai": 8, "ball": 8, "court": 8, "hopefulli": [8, 55, 56, 80, 90, 107, 122, 243], "digest": [8, 241], "necess": [8, 54, 102], "broad": [8, 62, 96, 104], "did": [8, 12, 19, 24, 48, 57, 95, 98, 100, 103, 115, 131, 142, 155, 159, 171, 179, 182, 185, 197, 227, 266], "space": [8, 17, 54, 57, 80, 95, 96, 100, 105, 106, 110, 112, 145, 156, 163, 170, 173, 179, 180, 183, 185, 189, 190, 192, 197, 200, 217, 267], "consult": [8, 170, 225], "stuck": [8, 290], "whenev": [8, 58, 72, 103, 106, 107, 203, 245], "rate": [8, 40, 47, 57, 93, 98, 100, 104, 105, 107, 113, 128, 139, 140, 145, 146, 163, 180, 182, 197, 199, 240, 242, 266], "statu": [9, 28, 142, 145, 148, 183, 196, 255], "subject": [9, 14, 17, 139, 159, 185, 196, 203, 207, 214, 227, 255, 279, 280, 282, 288, 289], "snapshot": [9, 138, 151, 196], "__obj_flatten__": 9, "guard": [9, 12, 153, 206], "tupl": [9, 37, 44, 53, 87, 98, 100, 103, 105, 110, 112, 115, 180, 196, 199, 241, 264, 278], "attribute_nam": 9, "_librari": 9, "register_fake_class": 9, "addition": [9, 14, 15, 40, 87, 144, 145, 153, 173, 196, 199, 208, 209, 250, 259, 266, 283], "__obj_unflatten__": 9, "classmethod": 9, "flatten": [9, 51, 73, 105, 113, 121, 139, 143, 182, 196, 215, 227], "breakdown": [9, 189], "diff": [9, 58, 60, 87, 138, 227, 241], "custom_class": 9, "tensorqueu": 9, "customclasshold": 9, "init_tensor_": 9, "dict": [9, 23, 54, 56, 170, 177, 179, 196, 199, 208, 209, 214, 226, 231], "init_tensor": 9, "size_tensor": 9, "size_tensor_acc": 9, "const_data_ptr": 9, "queue_siz": 9, "irang": 9, "val": [9, 21, 24, 140, 178, 284], "queue_": 9, "to_str": 9, "push_back": [9, 216], "push": [9, 57, 80, 100, 105, 162, 268, 288], "rear": 9, "lock_guard": 9, "mutex": 9, "mutex_": 9, "pop": [9, 100, 284], "front": [9, 157, 177, 196], "pop_front": 9, "get_raw_queu": 9, "raw_queu": 9, "dequ": 9, "mycustomclass": 9, "class_": 9, "init": [9, 24, 142, 201, 283, 286], "clone": [9, 14, 59, 103, 146, 150, 151, 155, 161, 164, 175, 177, 256, 264], "2a": 9, "class_nam": [9, 128, 192], "faketensorqueu": 9, "2b": [9, 47], "cl": [9, 15, 270], "flattened_tq": 9, "libcustom_class": 9, "tq": 9, "mod": [9, 194, 196, 256], "sin": [9, 17, 19, 67, 68, 72, 73, 74, 77, 78, 95, 103, 121, 242, 251, 270], "co": [9, 95, 112, 232, 242, 270], "poped_t": 9, "allclos": [9, 161, 227, 264, 284], "eager": [9, 13, 90, 92, 148, 161, 164, 184, 194, 196, 200, 205, 214, 217, 242, 254, 256, 282], "fullgraph": [9, 19, 148, 194, 205, 253], "exported_program": [9, 122, 256], "strict": [9, 122, 192, 243, 276], "for_each_add_": 9, "inc": 9, "add_": [9, 103, 196, 275, 289], "torch_library_frag": 9, "__torch__": 9, "intrusive_ptr": [9, 176, 227, 241], "fake_for_each_add_": 9, "foreachadd": 9, "scriptobject": 9, "empty_tensor_queu": 9, "qlen": 9, "ep": [9, 149, 183, 196, 256, 263, 275, 284], "downsid": [9, 159, 173], "consum": [9, 117, 120, 144, 161, 173, 179, 181, 183, 184, 232, 242], "difficult": [9, 106, 162, 171, 185, 197, 214, 277, 288], "parti": [9, 12, 19, 132, 141, 142, 176], "fakif": 9, "tracing_mod": 9, "alias": [9, 12, 13, 196], "torchbind": 9, "vmap": [10, 12, 133, 138, 159, 162, 167, 172, 262, 285, 290], "oppos": [10, 54, 57, 128, 155, 162, 167, 182, 227], "treat": [10, 19, 95, 112, 172, 181, 194, 196, 197], "opaqu": [10, 19, 241, 253], "callabl": [10, 19, 45, 56, 113, 189, 194, 196, 225, 253], "aotinductor": [10, 132, 196, 248, 253, 256, 261, 262], "sycl": [10, 138], "toe": 10, "registr": [10, 12, 13, 18, 19, 216, 223], "doesn": [10, 12, 13, 16, 19, 21, 65, 107, 109, 112, 113, 144, 162, 164, 173, 177, 192, 194, 196, 205, 206, 214, 241, 242, 252, 256, 257, 259, 263, 268, 275, 284, 288], "pybind": 10, "ed": [10, 255], "respons": [12, 14, 20, 23, 54, 95, 96, 104, 113, 137, 138, 143, 149, 153, 155, 181, 182, 185, 194, 196, 205, 207, 225], "nontrivi": 12, "cross": [12, 16, 48, 57, 98, 100, 104, 143, 145, 242, 245, 259], "cut": [12, 175, 196], "concern": [12, 107, 197, 217, 275], "rule": [12, 35, 47, 51, 95, 103, 110, 131, 144, 157, 162, 171, 172, 179, 180, 196, 226], "convers": [12, 54, 95, 103, 164, 185, 214, 239, 275], "highest": [12, 24, 48, 54, 102, 142, 147, 180, 192, 194, 242], "prioriti": [12, 142], "transfer": [12, 22, 48, 56, 105, 113, 122, 123, 135, 138, 155, 173, 178, 182, 189, 199, 228, 243, 262, 267, 289], "redispatch": 12, "unlik": [12, 15, 21, 96, 103, 105, 121, 143, 144, 159, 164, 185, 193, 196, 253, 259, 283, 284], "style": [12, 143, 175, 196, 199, 209], "abid": [12, 57], "myop": 12, "myadd": [12, 13], "myadd_cpu": 12, "self_": 12, "other_": 12, "self_ptr": 12, "other_ptr": 12, "catch": [12, 14, 194, 196, 216, 254], "myadd_cuda": 12, "boundari": [12, 141, 179, 250], "myops_cpu": 12, "myops_cuda": 12, "subdivid": 12, "xla": [12, 13, 18, 239], "torch_xla": [12, 13], "useabl": 12, "behav": [12, 19, 103, 113, 164, 171, 181, 223], "autogradnotimplementedfallback": 12, "notimpl": 12, "node": [12, 23, 35, 47, 51, 58, 59, 60, 61, 65, 67, 95, 102, 106, 118, 121, 131, 134, 140, 141, 142, 146, 148, 151, 152, 153, 160, 161, 182, 185, 196, 211, 242, 259, 264, 269, 282], "preserv": [12, 21, 103, 133, 138, 141, 164, 177, 239, 244, 276, 282, 284], "require_grad": [12, 131], "ness": 12, "pin": [12, 104, 144, 173, 242], "lost": [12, 21, 284], "adinplaceorview": 12, "bookkeep": [12, 227], "autogradnotimplementedinplaceorviewfallback": 12, "logi": 12, "annot": [12, 13, 23, 37, 56, 107, 118, 192, 194, 196, 227], "guess": [12, 40, 47, 54, 57, 146, 185], "twist": 12, "constitut": [12, 17], "hood": [12, 24, 54, 57, 59, 61, 65, 121, 143, 144, 162, 163, 173, 183, 207, 210, 278], "singleton": [12, 182], "findschemaorthrow": 12, "decltyp": [12, 161], "qualifi": [12, 209], "overload": 12, "typic": [12, 14, 17, 24, 37, 47, 51, 53, 59, 60, 87, 98, 106, 107, 112, 141, 143, 145, 149, 151, 161, 170, 173, 179, 182, 192, 194, 196, 197, 214, 215, 216, 226, 228, 242, 246, 256, 259], "cast": [12, 21, 23, 78, 120, 140, 141, 173, 196, 226, 284], "lookup": [12, 20, 112, 148, 183], "typo": [12, 131, 201], "myaddfunct": [12, 13], "autononvariabletypemod": [12, 13], "myadd_autograd": [12, 13], "raii": 12, "infinit": 12, "overflow": [12, 54, 226, 268], "send": [12, 13, 14, 15, 48, 49, 65, 93, 155, 163, 173, 175, 176, 181, 182, 183, 197, 207, 232], "exclud": [12, 47, 141, 194, 232, 282], "consider": [12, 13, 139, 196, 197, 256], "autogradcpu": 12, "autogradcuda": 12, "pythondispatch": 12, "_python_dispatch": 12, "isn": [12, 95, 106, 159, 173, 178, 190, 196, 197, 227, 229, 243, 244, 277], "glorifi": 12, "add_cpu": 12, "add_cuda": 12, "unsupport": [12, 114, 118, 132, 138, 194, 196, 256], "decentr": 12, "importantli": [12, 24, 150, 170, 173, 227, 275], "aspect": [12, 18, 80, 155, 199, 227], "patch": [12, 13, 180], "dispatchkei": [12, 13], "varieti": [12, 28, 36, 54, 95, 96, 100, 104, 113, 122, 147, 173, 200, 217, 259, 278], "fallback": [12, 13, 18, 114, 200], "opt": [12, 113, 145, 164, 176, 182, 183, 189, 205, 268, 286], "amp": [12, 18, 65, 141, 164, 203, 216, 249, 261, 279], "incom": [12, 98, 189], "float16": [12, 18, 140, 164, 203, 226], "float32": [12, 17, 140, 141, 161, 178, 183, 226, 239, 264, 269, 279], "matmul": [12, 143, 161, 196, 203, 215, 226, 268, 284, 288], "impair": 12, "converg": [12, 40, 54, 57, 68, 104, 105, 121, 122, 143, 155, 171, 180, 185, 206, 226, 243, 261], "hypothet": 12, "autocast_mod": 12, "mymatmul_autocast": 12, "excludedispatchkeyguard": 12, "no_autocast": 12, "mymatmul": 12, "cached_cast": 12, "khalf": 12, "elig": [12, 242], "polici": [12, 18, 135, 138, 139, 141, 163, 180, 181, 183, 186, 217, 259, 262], "mixtur": [12, 214], "meanwhil": [12, 144, 161, 216, 276], "float64": 12, "unaffect": [12, 105], "forc": [12, 17, 21, 54, 100, 138, 185, 194, 200, 226, 242, 250, 275, 277, 284], "fallthrough": 12, "occur": [12, 14, 19, 24, 58, 87, 105, 161, 164, 173, 181, 182, 189, 192, 196, 197, 201, 210, 232, 252, 266, 268], "fall": [12, 18, 96, 171, 180, 201, 254], "unfortun": [12, 121, 155, 196], "aren": [12, 150, 156, 196, 197, 242, 245, 277], "dri": [12, 189], "guidanc": [12, 142, 202, 226, 259], "reduct": [12, 103, 139, 140, 141, 144, 149, 170, 176, 189, 192, 200, 226, 242, 275, 277, 290], "gemm": [12, 161, 215, 279], "unless": [12, 44, 53, 103, 107, 114, 179, 196, 231, 268, 288], "categori": [12, 13, 24, 80, 87, 96, 103, 128, 146, 147, 189, 196, 277], "promote_typ": 12, "widest": 12, "safest": 12, "my_multiple_input_op_autocast": 12, "t0": [12, 140, 205, 227], "t1": [12, 227], "optimist": 12, "exec_typ": 12, "my_multiple_input_op": 12, "myadd_autocast": 12, "gymnast": 12, "suitabl": [12, 45, 151, 155, 192, 241], "invoc": [12, 160, 181, 223, 246, 252], "stabil": [12, 105, 180], "41478": 12, "repo": [13, 18, 23, 24, 59, 87, 137, 138, 151, 155, 173, 181, 182, 197, 267, 268], "mainten": [13, 192], "solut": [13, 21, 57, 114, 122, 132, 138, 161, 172, 173, 192, 194, 197, 210, 227, 242, 251, 261, 277, 280, 284], "pr": [13, 190, 200, 216, 241], "propos": [13, 28, 143, 156, 171, 210, 275, 277], "request": [13, 35, 47, 93, 103, 113, 140, 171, 178, 181, 182, 207, 208, 269, 277, 278, 279, 283], "hardwar": [13, 18, 21, 44, 53, 55, 103, 105, 115, 146, 155, 157, 162, 164, 172, 173, 176, 177, 197, 200, 203, 215, 216, 217, 228, 242, 249, 253, 256, 268, 284], "googl": [13, 21, 28, 39, 54, 57, 102, 113, 138, 155, 156, 179, 180, 189, 197, 259], "tpu": [13, 176, 245], "chip": 13, "layout": [13, 21, 143, 200, 211, 242, 275, 278, 284, 290], "spars": [13, 20, 100, 107, 112, 138, 156, 177, 197, 200, 239, 262, 277, 285, 290], "quantiz": [13, 105, 128, 133, 136, 170, 203, 230, 239, 261, 262, 285], "enforc": [13, 17, 145, 171, 275, 276], "mainli": [13, 17, 18, 23, 161, 189, 194, 255, 282], "haven": [13, 93, 95, 98, 103, 106, 110, 112, 131, 157, 160, 172], "identifi": [13, 21, 37, 58, 60, 80, 87, 88, 96, 113, 120, 152, 163, 164, 168, 177, 182, 196, 199, 210, 256, 266, 278, 284], "carri": [13, 17, 54, 57, 95, 103, 105, 109, 151, 156, 164, 185, 231], "privateuse1": [13, 137, 138, 283], "autogradprivateuse1": [13, 18], "privateuse2": [13, 18], "autogradprivateuse2": [13, 18], "privateuse3": [13, 18], "autogradprivateuse3": [13, 18], "tensorimpl": [13, 18, 227, 241], "storag": [13, 18, 19, 104, 109, 122, 138, 144, 156, 157, 164, 173, 179, 189, 208, 209, 226, 231, 239, 262, 266, 275, 277, 278, 285, 286, 290], "dispatchkeyset": [13, 18], "k": [13, 15, 24, 87, 96, 106, 131, 143, 181, 182, 184, 266, 279, 284], "caffe2": [13, 90], "typemeta": 13, "data_typ": [13, 109], "opaquetensorimpl": 13, "tweak": [13, 54, 245], "overrid": [13, 18, 56, 98, 107, 142, 160, 164, 176, 192, 252, 261], "vulkan": 13, "src": [13, 14, 118, 131, 155, 176, 241, 289], "registrationdeclar": 13, "snippet": [13, 139, 140, 142, 148, 155, 161, 176, 184, 211, 226, 231, 242, 261, 264, 267, 275, 279, 283], "ab": [13, 194, 203, 232], "abs_": 13, "abs_out": 13, "absolute_": 13, "absolute_out": 13, "angl": [13, 17, 112], "angle_out": 13, "sgn": 13, "uniqu": [13, 21, 54, 58, 60, 106, 107, 108, 110, 112, 140, 152, 182, 185, 197, 199, 256, 275, 284], "boolean": [13, 156, 196], "impli": [13, 105, 110, 196, 208, 231, 241, 253], "schema_my_op1": 13, "my_op1": 13, "schema_my_op2": 13, "my_op2": 13, "schema_my_op2_backward": 13, "my_op2_backward": 13, "zoom": [13, 87, 102, 145, 189, 192], "1600": [13, 177, 227, 241], "grow": [13, 54, 107, 142, 144, 151, 208], "unrealist": 13, "classifi": [13, 15, 24, 28, 36, 47, 50, 51, 52, 57, 62, 80, 87, 93, 98, 100, 105, 122, 128, 132, 138, 141, 147, 163, 168, 185, 186, 199, 200, 225, 256, 261, 262], "accompani": 13, "comment": [13, 155, 170, 185, 216, 228, 275, 288], "sacrif": [13, 177], "max_pool2d": [13, 51, 139, 177, 182, 232, 289], "worri": [13, 57, 107, 150, 153, 170, 183, 211], "my_op": 13, "squeez": [13, 17, 37, 103, 190, 268], "max": [13, 14, 24, 54, 57, 87, 100, 113, 139, 145, 155, 179, 190, 192, 196, 200, 242, 256, 259, 260, 268, 280, 284, 290], "op_backward": 13, "proper": [13, 35, 140, 143, 153, 164, 179, 183, 192, 197, 242, 275], "rare": [13, 18, 54, 128, 173, 185, 242], "assumpt": [13, 17, 80, 105, 112, 113, 167, 173], "myadd_schema": 13, "train": [13, 15, 20, 21, 23, 35, 39, 40, 41, 45, 47, 50, 51, 52, 56, 59, 61, 62, 65, 67, 68, 70, 72, 73, 74, 77, 78, 80, 87, 90, 96, 97, 99, 100, 103, 105, 106, 108, 110, 112, 113, 115, 121, 132, 133, 134, 135, 138, 139, 141, 142, 145, 148, 149, 153, 164, 165, 167, 168, 171, 172, 175, 176, 178, 181, 182, 183, 184, 186, 189, 192, 193, 194, 196, 199, 203, 205, 206, 208, 209, 210, 211, 217, 226, 229, 232, 240, 243, 244, 246, 256, 260, 261, 262, 264, 266, 267, 277, 284], "my_add": 13, "_xlac": 13, "torch_xla_sourc": 13, "library_dir": 13, "extra_link_arg": 13, "make_relative_rpath": 13, "seamlessli": [13, 17, 58, 143, 197, 200, 227, 251], "nm": [13, 216], "torchvsion": 13, "torchvis": [13, 15, 24, 37, 39, 41, 45, 47, 48, 55, 62, 93, 96, 98, 99, 102, 104, 105, 128, 135, 138, 139, 140, 160, 170, 178, 181, 182, 186, 189, 190, 192, 194, 216, 217, 232, 240, 242, 245, 249, 255, 256, 262, 268, 282, 289], "adhoc": 13, "unbox": 13, "potenti": [13, 17, 80, 95, 106, 140, 142, 148, 173, 182, 194, 196, 199, 251, 253, 266, 282, 290], "wiki": [13, 159], "suit": [13, 96, 120, 179, 215, 279], "ship": [13, 48, 98], "delet": [13, 88, 144, 153, 170, 175, 183, 192, 268], "old": [13, 24, 122, 142, 177, 189, 280], "until": [13, 54, 87, 95, 140, 142, 146, 147, 155, 156, 161, 170, 173, 179, 181, 182, 183, 189, 207, 227, 264, 275], "interrupt": [13, 58, 93, 185], "quarterli": 13, "cadenc": 13, "announc": 13, "slack": [13, 48], "com": [13, 23, 24, 54, 113, 118, 131, 139, 146, 147, 149, 185, 193, 199, 225, 227, 256, 268, 289], "Not": [13, 153, 178, 260], "search": [13, 23, 54, 136, 138, 145, 161, 177, 196, 259, 268], "instantiate_device_type_test": 13, "testtorchdevicetyp": 13, "testviewop": 13, "testtensordeviceop": 13, "testtypepromot": 13, "__reduce_ex__": 13, "monkei": 13, "direct": [13, 35, 47, 51, 57, 80, 95, 96, 98, 104, 112, 131, 145, 155, 159, 163, 167, 171, 185, 208, 254, 261, 267, 268, 278], "suppos": [13, 105, 106, 107, 112, 139, 194, 199, 216, 263, 283], "vice": [13, 44, 53], "versa": [13, 44, 53], "Such": [13, 14, 95], "seamless": [13, 197, 210, 290], "coverag": [13, 159, 162, 164, 226, 280, 282], "comprehens": [13, 28, 44, 53, 96, 118, 161, 196, 214, 241, 242], "refactor": [13, 122, 151], "codegen": [13, 161], "dev": [13, 107, 148, 178, 189, 192, 194, 223, 226, 290], "andrew": [14, 263], "gu": 14, "shard": [14, 134, 138, 151, 207, 209, 210, 211, 261, 264], "saw": [14, 17, 40, 54, 98, 100, 103, 107, 109, 159, 162, 163], "skeleton": [14, 17, 239], "implicitli": [14, 47, 54, 95, 139, 150, 184, 196, 223], "schedul": [14, 87, 93, 104, 128, 132, 139, 140, 141, 153, 161, 175, 180, 189, 199, 232, 242, 248, 259, 261, 262], "rank": [14, 20, 23, 49, 58, 60, 87, 133, 138, 139, 140, 141, 142, 153, 155, 175, 176, 181, 182, 183, 197, 207, 208, 209, 211, 259, 260, 264, 266], "commun": [14, 18, 23, 60, 138, 139, 140, 141, 143, 145, 151, 152, 153, 175, 176, 179, 181, 182, 183, 189, 192, 196, 197, 210, 211, 242, 261, 264, 266, 270, 290], "particip": [14, 100, 152, 182, 226, 242], "hang": [14, 60, 147], "persist": [14, 42, 208, 226], "facilit": [14, 17, 54, 96, 103, 105, 122, 137, 138, 141, 143, 156, 242, 280, 283], "earli": [14, 57, 93, 153, 155, 173, 214, 263, 277], "shadow": 14, "hook": [14, 141, 143, 148, 153, 177, 186, 233, 262], "mp": [14, 18, 36, 41, 44, 58, 60, 67, 80, 103, 121, 128, 138, 139, 140, 153, 155, 181, 182, 183, 199, 207, 208, 209, 260], "ddp": [14, 20, 58, 59, 65, 138, 139, 140, 141, 143, 152, 189, 211, 260], "nccl": [14, 23, 58, 60, 87, 139, 140, 142, 143, 153, 155, 189, 197, 209, 211, 264, 266], "world_siz": [14, 20, 23, 58, 60, 139, 140, 142, 153, 155, 175, 176, 181, 182, 183, 207, 208, 209, 211, 260, 264, 266], "num_input": 14, "master_addr": [14, 23, 58, 60, 139, 142, 153, 155, 176, 181, 182, 183, 207, 208, 209, 260, 266], "localhost": [14, 23, 58, 60, 102, 139, 142, 153, 176, 181, 182, 183, 189, 190, 197, 207, 208, 209, 211, 240, 250, 260], "master_port": [14, 23, 58, 60, 139, 142, 153, 155, 176, 181, 182, 183, 207, 208, 209, 260, 266], "29500": [14, 23, 155, 176, 181, 182, 183, 207, 260], "init_process_group": [14, 20, 23, 58, 60, 139, 140, 142, 153, 155, 175, 176, 208, 209, 211, 260, 264, 266], "device_id": [14, 60, 122, 140, 141, 153, 260], "nproc": [14, 58, 60, 139, 153, 181, 183, 207, 208, 209, 260, 264], "arbitrarili": [14, 54, 105, 233], "togeth": [14, 21, 36, 42, 54, 56, 65, 90, 98, 100, 103, 104, 105, 109, 113, 139, 141, 149, 153, 156, 157, 173, 181, 183, 185, 192, 200, 241, 253, 284], "examin": [14, 87, 95, 96, 102, 104, 105, 155, 160, 173, 197], "lr": [14, 24, 51, 57, 93, 98, 102, 113, 122, 128, 132, 139, 140, 141, 153, 155, 161, 163, 180, 181, 182, 183, 190, 205, 208, 209, 216, 248, 249, 260, 261, 262], "notabl": [14, 24, 93, 239], "divide_by_initial_world_s": 14, "world": [14, 17, 23, 41, 59, 95, 103, 107, 143, 155, 160, 163, 176, 180, 181, 182, 196, 197, 208, 209, 211, 215, 266, 280], "nonetheless": [14, 105], "mind": [14, 44, 54, 57, 90, 105, 152, 167], "preliminari": [14, 155], "delv": [14, 161, 253], "insight": [14, 80, 87, 137, 155, 184, 227, 241], "join_hook": 14, "kwarg": [14, 122, 141, 160, 164, 179, 182, 196, 197, 205, 256, 279, 286], "join_devic": 14, "join_process_group": 14, "processgroup": [14, 20, 23, 65, 134, 138, 143, 183, 197, 211, 242, 266], "throw_on_early_termin": 14, "explain": [14, 15, 21, 47, 51, 57, 80, 96, 107, 113, 131, 142, 143, 161, 194, 196, 201, 232, 251, 256, 269, 279, 282, 284], "joinconfig": 14, "_join_config": 14, "main_hook": 14, "repeatedli": [14, 100, 179, 183, 267], "post_hook": 14, "is_last_join": 14, "broadcast": [14, 73, 113, 121, 141, 153, 155, 176, 196, 241, 260], "vacuou": 14, "contextlib": [14, 192], "nullcontext": 14, "conform": [14, 192], "interleav": [14, 264], "syncbatchnorm": [14, 60], "proce": [14, 105, 107, 161, 196, 242, 266], "__exit__": 14, "heartbeat": 14, "notify_join_context": 14, "serializ": 14, "fulli": [14, 15, 17, 18, 39, 51, 65, 87, 93, 98, 99, 100, 113, 128, 134, 138, 145, 148, 151, 164, 167, 180, 182, 184, 189, 201, 203, 209, 214, 216, 229, 277, 284], "proceed": [14, 51, 105, 118, 173], "overlap": [14, 61, 139, 140, 141, 146, 151, 153, 173, 189, 192, 242, 264], "moreov": [14, 173, 216, 227, 275], "permit": [14, 226], "customiz": [14, 156], "idea": [14, 28, 80, 90, 105, 107, 108, 109, 112, 121, 143, 149, 156, 161, 171, 180, 183, 185, 207, 223, 227, 242, 259, 260, 275, 288], "counterjoinhook": 14, "sync_max_count": 14, "all_reduc": [14, 65, 139, 140, 155, 176, 210, 266], "get_rank": [14, 141, 153, 155], "process_group": [14, 211, 266], "common_rank": 14, "find_common_rank": 14, "max_count": 14, "__call__": [14, 56, 177], "meth": [14, 17], "to_consid": 14, "reduceop": [14, 139, 140, 155], "device_count": [14, 58, 60, 93, 103, 139, 153, 208, 209, 211], "highlight": [14, 54, 90, 114, 125, 134, 140, 141, 184, 189, 194, 196, 197, 207, 216, 253], "alexi": 15, "jacq": 15, "winston": 15, "her": [15, 176], "leon": 15, "gati": 15, "alexand": [15, 282], "ecker": 15, "matthia": 15, "bethg": 15, "artist": 15, "distanc": [15, 67, 68, 72, 73, 74, 77, 78, 95, 105, 121], "d_c": 15, "d_": 15, "indispens": [15, 179], "pil": [15, 45, 56, 178, 192, 199], "pretrain": [15, 28, 47, 80, 96, 112, 128, 138, 178, 185, 192, 216, 255, 256, 282, 289], "longer": [15, 57, 63, 64, 95, 107, 113, 115, 121, 132, 141, 144, 148, 161, 170, 177, 180, 181, 194, 196, 204, 206, 219, 220, 221, 222, 224, 227, 242, 272, 273, 279, 280, 281, 289], "resiz": [15, 24, 51, 57, 156, 216, 249], "unabl": [15, 19, 157, 172, 196, 277], "caff": 15, "picasso": 15, "jpg": [15, 37, 56, 57, 96], "reconvert": 15, "f_": [15, 179], "xl": [15, 215], "w_": [15, 112], "squar": [15, 40, 51, 56, 67, 68, 72, 73, 74, 77, 78, 95, 100, 103, 105, 121, 149, 150, 163, 171, 177, 180, 184, 263], "contentloss": 15, "recomput": [15, 105, 149, 151, 171, 242], "act": [15, 47, 54, 95, 100, 103, 145, 156, 177, 180, 182, 196, 197], "gram": 15, "g_": 15, "hat": [15, 110], "counteract": 15, "pool": [15, 23, 57, 100, 102, 105, 113, 122, 190, 197, 243], "tend": [15, 21, 95, 100, 105, 268, 284], "almost": [15, 24, 110, 112, 139, 143, 156, 178, 196, 268], "sl": 15, "19": [15, 21, 37, 161, 180, 196, 215, 232, 268, 269, 277, 284], "vgg": 15, "child": [15, 120, 189, 211], "connect": [15, 51, 93, 98, 100, 112, 128, 138, 142, 143, 155, 159, 160, 167, 177, 178, 180, 200, 201, 211, 229, 266], "eval": [15, 21, 24, 42, 54, 113, 122, 139, 140, 149, 182, 185, 192, 193, 216, 249, 256, 282, 284, 289], "485": [15, 24, 56, 105, 178], "456": [15, 24, 56, 105, 178], "406": [15, 24, 56, 105, 178], "229": [15, 24, 56, 105, 178], "224": [15, 24, 56, 105, 178, 192, 216, 217, 249, 256, 259, 282, 289], "225": [15, 24, 56, 105, 120, 178], "vgg19": [15, 164], "maxpool2d": [15, 51, 102, 122, 160, 190, 243], "align": [15, 138, 184, 185, 223, 267, 276], "depth": [15, 47, 57, 61, 95, 98, 103, 109, 144, 161, 196, 201, 205, 242], "immedi": [15, 23, 44, 53, 57, 100, 103, 110, 155, 170, 181, 182, 189, 268], "white": [15, 19, 21, 80, 100, 113, 190, 192, 284], "input_img": 15, "content_img": 15, "bfg": 15, "closur": [15, 196, 201], "reevalu": 15, "exce": [15, 80, 149, 197], "sphinx_gallery_thumbnail_numb": 15, "neural_style_tutori": [15, 22, 262], "paszk": [16, 155, 180], "dziedzic": 16, "shall": [16, 51, 57], "learnabl": [16, 51, 72, 121, 122, 137, 138, 244, 286], "badfftfunct": 16, "literatur": [16, 180], "confusingli": 16, "correl": [16, 87, 100, 113, 161], "filter": [16, 28, 54, 88, 96, 105, 144, 185, 197, 241, 266], "flip": [16, 162], "wrt": [16, 150], "numpy_extensions_tutori": [16, 22, 262], "freeli": 17, "inspir": [17, 155, 162, 167, 184, 288], "v1": [17, 21, 164, 180, 181, 183, 207, 227, 284], "openai": [17, 135, 138, 163, 179, 180, 181, 183, 256], "farama": [17, 179], "gymnasium": [17, 179, 180], "stateless": [17, 157, 159], "encount": [17, 54, 140, 148, 161, 194, 196, 197, 200, 242, 250, 256, 283], "undertaken": 17, "broader": 17, "wider": [17, 162], "acquaint": 17, "set_se": 17, "avenu": [17, 90], "backpropag": [17, 40, 41, 47, 51, 54, 80, 95, 106, 107, 108, 110, 112, 113, 121, 131, 144, 163, 197], "_set_se": 17, "torqu": 17, "upward": 17, "posit": [17, 96, 100, 107, 133, 138, 171, 179, 180, 184, 185, 192, 196, 200, 225, 259, 266, 284], "angular": 17, "stand": [17, 90, 95, 113, 163, 200, 278], "equat": [17, 57, 180, 229, 233], "motion": 17, "veloc": [17, 180], "theta": [17, 80, 107, 179], "_t": [17, 163], "theta_t": 17, "dt": 17, "rad": 17, "sec": [17, 139], "gravit": 17, "mass": 17, "accord": [17, 18, 28, 35, 103, 104, 122, 161, 163, 175, 177, 180, 184, 192, 203, 250, 278, 286], "theta_": [17, 163], "001": [17, 102, 122, 153, 181, 190, 216, 249], "deleg": [17, 138, 289], "merg": [17, 49, 96, 100, 178, 192, 216], "is_shar": 17, "new_th": 17, "plu": [17, 107], "new_thdot": 17, "neg": [17, 40, 54, 96, 100, 106, 107, 113, 114, 161, 173, 177, 179, 225], "discourag": [17, 44, 53, 179], "possibli": [17, 57, 141, 179, 196, 251, 266], "omit": [17, 95, 102, 120, 141, 161, 179, 200, 232, 239, 241], "agent": [17, 135, 138, 180, 181, 183, 186, 262], "param": [17, 24, 51, 56, 122, 139, 140, 141, 150, 153, 155, 157, 159, 172, 182, 183, 227, 239, 260, 263, 275], "mandatori": [17, 159, 179], "domain": [17, 28, 37, 41, 54, 55, 80, 104, 118, 138, 179, 193, 242, 280], "accur": [17, 24, 80, 93, 98, 120, 145, 160, 173, 183, 194, 254, 277, 282], "lazili": [17, 170], "costli": [17, 144, 242], "observation_spec": [17, 179], "compositespec": 17, "dictionari": [17, 41, 42, 54, 87, 112, 115, 122, 147, 170, 172, 179, 181, 182, 185, 192, 197, 231, 244, 261, 267], "action_spec": [17, 179], "reward_spec": [17, 179], "done_spec": 17, "input_spec": [17, 179], "state_spec": 17, "output_spec": 17, "neither": [17, 103, 259, 263], "shortcut": 17, "tensorspec": 17, "irrelev": [17, 176], "incorpor": [17, 105, 114, 138, 156, 184], "pseudo": [17, 28], "_make_spec": 17, "pendulumenv": 17, "gen_param": 17, "batch_lock": 17, "homonym": [17, 173], "check_env_spec": [17, 179], "coupl": [17, 39, 54, 99, 103, 104, 112, 140, 150, 156, 157, 170, 173, 190, 196, 242], "rand_step": 17, "randomli": [17, 48, 56, 57, 77, 78, 93, 98, 100, 121, 147, 163, 180, 185, 197], "invers": [17, 103, 207, 267, 276], "thdot": 17, "effort": [17, 54, 56, 57, 118, 241], "summar": [17, 54, 56, 113, 125, 131, 140, 145, 189, 196], "_apply_transform": 17, "_call": 17, "inv": 17, "_inv_apply_transform": 17, "eventu": [17, 142, 149, 156], "out_keys_inv": 17, "unitari": 17, "sine": [17, 121], "cosin": [17, 215], "raw": [17, 36, 48, 54, 73, 87, 113, 121, 201, 254, 266], "del_kei": 17, "mdp": 17, "gather": [17, 60, 96, 102, 139, 141, 143, 153, 155, 156, 160, 179, 201, 226, 264, 288, 290], "unexplor": 17, "abil": [17, 103, 113, 122, 143, 144, 155, 187, 190, 194, 200, 277, 289], "recreat": [17, 35, 47], "Of": [17, 105, 109, 113, 144, 155, 190, 223, 255, 276, 278], "clip": [17, 54, 80, 179], "scratch": [17, 35, 47, 54, 58, 105, 106, 122, 125, 128, 138, 186, 243, 261, 262, 266], "advanc": [18, 21, 22, 24, 47, 93, 108, 111, 114, 115, 117, 118, 132, 133, 134, 137, 138, 141, 153, 173, 192, 197, 200, 210, 216, 242, 259, 261, 262, 275, 278, 279, 282, 284, 285, 288, 290], "verif": [18, 182], "rapid": [18, 95, 278], "manufactur": 18, "imposs": [18, 98, 106, 170, 288], "simultan": [18, 35, 47, 61, 145, 155, 173, 178, 242], "began": 18, "enhanc": [18, 96, 132, 133, 142, 146, 173, 187, 203, 242, 256, 259, 270, 279, 283], "rapidli": 18, "situat": [18, 95, 103, 141, 149, 150, 153, 155, 199, 268], "wrapper_custom_tensor_add": 18, "torch_fn": 18, "custom_cpu_fallback": 18, "operatorhandl": 18, "hint": [18, 23, 95, 105, 106, 110, 118, 144, 155, 181, 189, 196, 201], "cpu_fallback": 18, "cppfunction": 18, "makefromboxedfunct": 18, "cumtomselufunct": 18, "selu": 18, "wrapper_autogradcumstom__selu": 18, "wrapper_autogradcustom__selu": 18, "autocastprivateuse1": 18, "autocast": [18, 203, 216, 249, 279, 284], "kernel_privateuseon": 18, "makefallthrough": 18, "backendmodul": 18, "_register_device_modul": 18, "backend_nam": 18, "get_amp_supported_dtyp": 18, "is_autocast_en": 18, "get_autocast_dtyp": 18, "set_autocast_dtyp": 18, "set_autocast_en": 18, "generatorimpl": 18, "builder": [18, 196], "register_generator_privateuse1": 18, "customgeneratorimpl": 18, "make_custom_gener": 18, "deviceindex": 18, "device_index": 18, "make_gener": 18, "make_cumstom_gener": 18, "event": [18, 87, 120, 139, 140, 181, 194, 232, 240, 254, 266], "deviceguard": 18, "deviceguardimplinterfac": 18, "c10_register_guard_impl": 18, "customguardimpl": 18, "backend_meta_": 18, "extrameta": 18, "backendmeta": 18, "custombackendmetadata": 18, "unordered_map": 18, "tensorbackendmetaregistri": 18, "for_seri": 18, "for_deseri": 18, "expand": [18, 95, 109, 115, 161, 168, 190, 208, 256, 280], "timer": [18, 57, 185, 205, 230, 238, 262, 284], "ascend": [18, 57, 88, 283], "npu": [18, 282, 283], "meet": [18, 55, 57, 217, 227, 286], "usabl": [18, 122, 131, 156, 243, 266], "compli": 18, "habit": 18, "torch_npu": [18, 283], "exclus": [18, 177], "rename_privateuse1_backend": 18, "register_privateuse1_backend": 18, "unsupported_dtyp": 18, "quint8": [18, 263], "generate_methods_for_privateuse1_backend": 18, "for_tensor": 18, "for_modul": 18, "for_storag": 18, "is_npu": 18, "perhap": [19, 80, 146, 177, 209], "prevent": [19, 40, 54, 60, 113, 120, 144, 147, 153, 161, 163, 173, 196, 197, 226, 227, 242, 246, 259, 283], "custom_op": [19, 118, 253], "land": [19, 137, 138, 148, 163, 200, 216, 260, 277], "induc": [19, 177, 266], "bad": [19, 93, 144, 242, 268], "uncom": [19, 54, 56, 68, 78, 98, 102, 109, 113, 121, 175, 180], "cropped_img": 19, "img": [19, 37, 96, 102, 138, 190, 192], "black": [19, 80, 87, 100, 113, 137, 138, 143, 145, 181, 185], "aka": [19, 162, 164, 173, 200, 216, 255], "mutates_arg": 19, "led": 19, "past": [19, 54, 55, 104, 109, 196, 200], "exercis": [19, 24, 48, 155, 226], "reader": [19, 110, 155, 200, 241], "region": [19, 96, 103, 132, 145, 160, 187, 192, 199, 223, 226, 230, 242, 248, 252, 254, 261, 262], "unus": [19, 161, 176], "forgot": [19, 266], "python_custom_op": [19, 22, 262], "pritam": 20, "damania": 20, "yi": [20, 196, 255], "wang": [20, 28, 115, 117, 118, 161, 163, 266], "distributeddataparallel": [20, 60, 61, 65, 134, 139, 140, 141, 155, 176, 183, 226, 260], "paradigm": [20, 21, 65, 105, 121, 134, 182, 183, 284], "embed": [20, 54, 100, 106, 108, 110, 111, 122, 138, 140, 141, 143, 175, 182, 183, 185, 190, 200, 210, 262, 264], "dens": [20, 21, 197, 200, 275, 280, 284], "fc": [20, 47, 163, 286], "replic": [20, 23, 61, 65, 138, 139, 143, 151, 153, 155, 182, 183, 197, 211], "trainer": [20, 28, 60, 145, 151, 181, 182, 183, 209, 284], "hybrid": [20, 89, 91, 211, 262], "pipedream": 20, "master": [20, 24, 139, 155, 160, 164, 182, 183, 199, 207, 216, 266, 289], "embeddingbag": [20, 23], "drive": [20, 57, 95, 98, 100, 138, 163, 173, 207, 275], "respond": [20, 96, 163, 182], "amongst": [20, 197, 276], "themselv": [20, 100, 197, 201, 277], "remotemodul": 20, "kick": [20, 35, 47, 170, 181, 182, 183], "remot": [20, 65, 134, 145, 181, 182, 183, 189, 207, 223, 250, 259], "hybridmodel": 20, "allreduc": [20, 87, 139, 143, 153, 176, 242, 266], "firstli": [20, 118, 161, 180], "tcp": [20, 60, 142, 151, 152, 155, 207], "init_method": [20, 153, 155, 264], "_run_train": [20, 183], "rpc_async": [20, 181, 183], "exit": [20, 159, 181, 182, 183, 205, 206, 214, 217, 252, 257, 259, 266], "conflict": [20, 161, 196], "remote_emb_modul": 20, "rref": [20, 181, 182, 207], "distributedoptim": [20, 182, 183, 207], "remote_paramet": 20, "cannnot": 20, "crossentropyloss": [20, 24, 40, 102, 107, 143, 175, 183, 190, 216, 249], "get_next_batch": [20, 181, 183], "jess": [21, 284], "cai": [21, 284], "seek": [21, 90, 96, 210, 284], "grain": [21, 37, 95, 140, 155, 189, 194, 226, 227, 241, 284], "2n": [21, 284], "degrad": [21, 80, 284], "sparsifi": [21, 133, 138, 177, 284], "answer": [21, 40, 96, 100, 107, 155, 160, 170, 185, 196, 197, 284], "tune": [21, 24, 40, 87, 105, 113, 123, 133, 136, 138, 139, 145, 148, 178, 230, 238, 241, 259, 261, 262, 268, 279, 282, 284], "recov": [21, 139, 140, 153, 164, 284], "nearli": [21, 113, 190, 227, 284], "f1": [21, 194, 284], "86": [21, 161, 178, 183, 200, 215, 227, 284], "92": [21, 215, 227, 284], "3x": [21, 68, 121, 203, 226, 242, 284], "beginn": [21, 38, 43, 49, 50, 52, 69, 75, 79, 82, 83, 84, 85, 89, 91, 97, 99, 101, 108, 111, 116, 119, 121, 123, 134, 138, 202, 234, 235, 236, 237, 284], "to_sparse_semi_structur": [21, 284], "motiv": [21, 80, 142, 161, 182, 263, 269, 276, 277, 280, 284], "affect": [21, 96, 100, 104, 105, 150, 173, 175, 242, 284], "swap": [21, 56, 107, 143, 173, 179, 200, 239, 268, 280, 284], "compress": [21, 96, 177, 275, 278, 282, 284], "arrang": [21, 121, 284], "drawback": [21, 112, 196, 208, 209, 284], "2020": [21, 284], "amper": [21, 140, 167, 172, 226, 284], "cutlass": [21, 279, 284], "cusparselt": [21, 284], "milder": [21, 284], "account": [21, 55, 113, 156, 170, 173, 185, 190, 200, 255, 282, 284], "retrain": [21, 284], "sweet": [21, 284], "spot": [21, 98, 102, 103, 146, 284], "2x": [21, 90, 138, 150, 170, 215, 284], "theoret": [21, 57, 173, 246, 275, 284], "granular": [21, 140, 161, 197, 232, 242, 259, 284], "fp16": [21, 140, 164, 268, 279, 284], "resnet": [21, 47, 48, 96, 144, 189, 242, 284], "imagenet": [21, 48, 56, 96, 128, 178, 284], "76": [21, 164, 183, 200, 227, 284], "resnext": [21, 284], "101_32x8d": [21, 284], "79": [21, 37, 161, 177, 227, 232, 284], "xception": [21, 284], "ssd": [21, 242, 284], "rn50": [21, 284], "coco2017": [21, 284], "bbap": [21, 284], "24": [21, 24, 102, 161, 178, 200, 215, 227, 277, 284], "maskrcnn": [21, 284], "fairseq": [21, 284], "en": [21, 159, 185, 192, 284], "de": [21, 23, 185, 284], "wmt14": [21, 284], "bleu": [21, 284], "squad": [21, 161, 284], "91": [21, 77, 183, 215, 227, 284], "workflow": [21, 24, 39, 87, 92, 93, 114, 138, 139, 197, 202, 278, 284], "perspect": [21, 109, 179, 259, 284], "subproblem": [21, 284], "bmatrix": [21, 110, 284], "handoff": [21, 284], "anticip": [21, 284], "area": [21, 96, 100, 135, 190, 199, 225, 268, 278, 284], "littl": [21, 57, 98, 105, 107, 113, 156, 179, 181, 183, 184, 187, 189, 284], "colab": [21, 23, 28, 39, 44, 53, 99, 102, 113, 138, 155, 156, 162, 179, 180, 192, 197], "pip": [21, 28, 55, 87, 96, 102, 115, 117, 163, 178, 180, 189, 192, 194, 199, 215, 217, 225, 227, 229, 232, 240, 243, 244, 245, 246, 253, 259, 266, 268, 282, 289], "panda": [21, 37, 56, 80, 192], "hug": [21, 161], "face": [21, 48, 56, 57, 80, 161, 256], "token": [21, 54, 112, 140, 143, 147, 175, 184, 185, 200, 242, 256, 284], "segment": [21, 138, 200, 268, 284], "text": [21, 37, 48, 57, 80, 90, 96, 106, 107, 109, 110, 112, 131, 138, 140, 146, 147, 155, 168, 173, 179, 180, 185, 189, 192, 200, 223, 225, 256, 284], "wikipedia": [21, 159, 284], "articl": [21, 37, 284], "score": [21, 54, 96, 106, 110, 112, 120, 184, 185, 199, 200, 225, 256, 264, 284], "fair": [21, 105, 280, 284], "lowest": [21, 139, 177, 284], "l1": [21, 93, 177, 284], "ao": [21, 24, 263, 268, 282, 284], "satisfi": [21, 145, 242, 284, 286], "anytim": [21, 284], "pruner": [21, 284], "update_mask": [21, 284], "shot": [21, 181, 256, 284], "wouldn": [21, 112, 139, 156, 284], "squash_mask": [21, 284], "left": [21, 35, 47, 51, 54, 57, 68, 90, 95, 102, 103, 107, 112, 121, 122, 155, 163, 167, 179, 180, 182, 184, 189, 190, 223, 284], "quickstart": [21, 35, 36, 37, 38, 39, 40, 42, 44, 45, 138, 284], "28x": [21, 284], "amen": [21, 284], "spent": [21, 87, 184, 189, 227, 232, 246, 284], "delta": [21, 161, 180, 227, 241, 284], "exact": [21, 105, 122, 149, 184, 196, 200, 205, 266, 284], "78": [21, 102, 227, 284], "53": [21, 164, 215, 232, 284], "44": [21, 161, 183, 284], "09": [21, 54, 102, 161, 183, 215, 284], "93": [21, 120, 177, 183, 215, 227, 232, 284], "49": [21, 101, 102, 164, 183, 227, 262, 284], "15": [21, 28, 37, 49, 80, 98, 100, 128, 190, 192, 199, 215, 227, 232, 238, 277, 284], "54": [21, 164, 227], "71x": 21, "35": [21, 37, 102, 143, 164, 215], "74": [21, 183, 215, 227, 232], "23x": 21, "72": [21, 178, 227, 232], "71": [21, 24, 56, 161, 183], "59": [21, 178, 192, 227, 232], "41": [21, 139, 178, 227, 232], "22x": 21, "286": [21, 164, 192, 284], "65": [21, 37, 56, 102, 183, 199, 200, 227], "247": [21, 183], "63": [21, 232], "14x": 21, "46": [21, 77, 161, 164, 178], "02x": 21, "ye": [21, 55, 170, 253], "47": [21, 93, 164, 215, 227, 232], "68": [21, 56, 161, 227], "18x": [21, 284], "36": [21, 178, 215], "13x": 21, "159": [21, 285], "22": [21, 161, 164, 177, 183, 215, 227, 277], "142": [21, 215], "23": [21, 37, 102, 161, 183, 215, 227, 232, 241, 277], "12x": [21, 200], "sparsesemistructuredtensor": [21, 284], "semi_structured_spars": [21, 22, 262], "00": [22, 37, 43, 52, 69, 75, 79, 91, 98, 101, 102, 111, 119, 120, 123, 161, 177, 183, 186, 192, 215, 232, 238, 248, 262, 268, 270, 277, 285], "012": 22, "mem": [22, 43, 52, 69, 75, 79, 87, 91, 101, 111, 119, 120, 123, 186, 232, 238, 248, 262, 285], "mb": [22, 24, 43, 52, 69, 75, 79, 91, 101, 111, 119, 120, 123, 139, 186, 232, 238, 248, 260, 262, 285], "torchrl": [22, 135, 138, 156, 163, 186, 262], "ddpg": [22, 135, 138, 262], "pendulum": [22, 135, 138, 179, 262], "scipi": [22, 48, 137, 138, 150, 194, 262], "acceler": [22, 36, 41, 44, 53, 54, 55, 62, 65, 67, 80, 105, 117, 121, 128, 138, 146, 155, 164, 173, 186, 199, 201, 203, 206, 215, 216, 217, 242, 262, 280, 285, 290], "bert": [22, 100, 138, 139, 262, 282, 290], "semi": [22, 135, 138, 200, 262, 290], "sparsiti": [22, 112, 138, 177, 200, 262, 275, 277, 285, 290], "000": [22, 24, 37, 43, 69, 75, 101, 114, 119, 123, 145, 163, 164, 186, 190, 192, 238, 262, 285], "supervis": [22, 107, 135, 138, 187, 192, 262], "usb": [22, 135, 138, 178, 262], "usb_semisup_learn": [22, 28, 262], "embeddingplann": [23, 138], "conda": [23, 87, 96, 102, 155, 161, 225, 240, 241, 259, 266, 268, 290], "cudatoolkit": 23, "sudo": [23, 189, 289], "rm": [23, 207], "miniconda3": [23, 241], "py37_4": 23, "sh": [23, 153, 223, 289], "anaconda": [23, 87, 96, 155, 240], "chmod": 23, "fbgemm": [23, 24, 197, 263], "ipython": [23, 113, 120], "cp": [23, 264, 289], "restart": [23, 96, 102, 152, 180], "newli": [23, 128, 155], "python37": 23, "dynload": 23, "enviro": 23, "spmd": [23, 143, 209], "mimic": [23, 24, 105, 268, 275], "launcher": 23, "embeddingbagcollect": 23, "bag": [23, 37, 39, 102, 190, 197], "ebc": [23, 197], "4096": [23, 197, 215], "parameterconstraint": 23, "placement": [23, 141, 259, 282], "evenli": [23, 95], "intra": [23, 140, 143, 211], "interconnect": [23, 229], "nvlink": [23, 143, 207], "data_parallel": 23, "planner": 23, "embedding_typ": 23, "embeddingcomputekernel": 23, "shardingtyp": 23, "large_table_cnt": 23, "small_table_cnt": 23, "large_t": 23, "embeddingbagconfig": 23, "large_table_": 23, "embedding_dim": [23, 100], "num_embed": 23, "feature_nam": 23, "large_table_feature_": 23, "poolingtyp": 23, "small_tabl": 23, "small_table_": 23, "small_table_feature_": 23, "gen_constraint": 23, "sharding_typ": 23, "table_wis": 23, "large_table_constraint": 23, "small_table_constraint": 23, "mimick": 23, "single_rank_execut": 23, "embeddingbagcollectionshard": [23, 197], "model_parallel": 23, "embeddingshardingplann": 23, "topologi": [23, 197, 209, 211, 216, 223], "moduleshard": 23, "shardingenv": 23, "init_distributed_single_host": 23, "pyre": 23, "fixm": 23, "set_devic": [23, 58, 60, 139, 140, 153, 208, 209, 211, 264, 269], "compute_devic": 23, "pg": [23, 266], "sharder": [23, 197], "shardingplan": 23, "collective_plan": 23, "sharded_model": 23, "from_process_group": 23, "spmd_sharing_simul": 23, "get_context": [23, 155], "exitcod": 23, "factor": [23, 100, 128, 173, 180, 181, 194, 197, 208, 268], "medium": [23, 142, 199, 242], "large_table_0": 23, "parametershard": 23, "compute_kernel": 23, "batched_fus": 23, "sharding_spec": 23, "enumerableshardingspec": 23, "shardmetadata": 23, "shard_offset": 23, "shard_siz": 23, "large_table_1": 23, "small_table_0": 23, "small_table_1": 23, "finer": [23, 37, 232], "halv": [23, 120], "row_wis": 23, "512": [23, 140, 161, 175, 196, 203, 216, 227, 232, 284], "imbal": [23, 242], "vertic": 23, "column_wis": 23, "unfortu": 23, "futur": [23, 54, 113, 118, 120, 131, 139, 159, 163, 170, 176, 180, 181, 182, 183, 208, 215, 244, 254, 263, 278], "batched_dens": 23, "raghuraman": 24, "krishnamoorthi": 24, "seth": [24, 39], "weidman": 24, "jerri": 24, "zhang": [24, 208, 209, 211], "decreas": [24, 41, 54, 80, 88, 105, 113, 143, 146, 197, 278], "mobilenetv2": 24, "np": [24, 56, 77, 102, 106, 113, 121, 178, 183, 190, 192, 241, 256, 276, 284], "dataload": [24, 35, 36, 38, 39, 40, 41, 42, 44, 45, 48, 49, 57, 60, 80, 93, 102, 105, 123, 139, 140, 146, 155, 173, 175, 182, 189, 190, 192, 216, 218, 230, 242, 249, 262, 282], "filterwarn": [24, 192, 277], "ignor": [24, 56, 105, 110, 112, 122, 176, 192, 196, 199, 226, 232, 243, 254, 263, 276, 277, 280], "deprecationwarn": 24, "seed": [24, 57, 80, 98, 105, 139, 140, 155, 180, 181, 183, 227], "manual_se": [24, 103, 139, 140, 155, 180, 181, 260, 264, 284], "191009": 24, "floatfunct": 24, "quantstub": 24, "dequantstub": 24, "relu6": 24, "_make_divis": 24, "divisor": 24, "min_valu": 24, "tf": [24, 102], "divis": [24, 103, 196], "tensorflow": [24, 102, 106, 108, 121], "blob": [24, 118, 139, 189], "slim": [24, 121], "mobilenet": [24, 138, 178], "new_v": 24, "round": [24, 118, 140, 181, 227, 241], "convbnrelu": 24, "in_plan": 24, "out_plan": 24, "kernel_s": [24, 51, 113, 139, 177, 263], "momentum": [24, 47, 48, 70, 74, 93, 98, 102, 104, 113, 121, 122, 149, 155, 181, 190, 197, 216, 244, 245, 249, 263], "inplac": [24, 139, 284], "invertedresidu": 24, "inp": [24, 182, 196, 210, 279], "oup": 24, "expand_ratio": 24, "hidden_dim": [24, 100], "use_res_connect": 24, "pw": 24, "dw": 24, "conv": [24, 57, 100, 149, 164, 177, 182, 193, 223, 232], "skip_add": 24, "num_class": [24, 181, 190, 192, 199], "width_mult": 24, "inverted_residual_set": 24, "round_nearest": 24, "v2": [24, 105, 125, 156, 161, 178, 193, 197, 203, 208, 214, 283], "width": [24, 47, 48, 51, 100, 103, 145, 167, 192, 193, 199, 256], "input_channel": 24, "last_channel": 24, "1280": [24, 199], "96": [24, 161, 183, 215], "160": [24, 183, 192, 227, 232], "320": 24, "valueerror": [24, 256], "invert": [24, 135, 138, 179, 276], "residu": [24, 143], "output_channel": 24, "quant": [24, 263], "dequant": [24, 263, 268], "isinst": [24, 141, 177, 269, 284], "kaiming_normal_": 24, "fan_out": 24, "zeros_": 24, "elif": [24, 175, 177], "ones_": 24, "normal_": 24, "bn": [24, 149, 193, 263], "numer": [24, 44, 54, 77, 78, 103, 105, 106, 115, 121, 141, 145, 226, 242, 264, 284], "fuse_model": 24, "is_qat": [24, 263], "fuse_modul": 24, "fuse_modules_qat": 24, "averagemet": 24, "fmt": 24, "avg": [24, 215, 232], "__str__": [24, 197], "fmtstr": 24, "__dict__": [24, 239, 282], "topk": 24, "maxk": 24, "pred": [24, 113, 131, 139, 143, 182, 190], "correct_k": 24, "mul_": 24, "criterion": [24, 51, 102, 183, 185, 190, 216, 249], "neval_batch": 24, "top1": 24, "acc": [24, 192], "2f": [24, 139, 177, 178, 181, 183, 227], "top5": 24, "cnt": 24, "acc1": 24, "acc5": 24, "load_model": 24, "model_fil": 24, "state_dict": [24, 42, 54, 58, 60, 93, 139, 140, 141, 153, 177, 194, 208, 209, 216, 226, 229, 230, 238, 239, 243, 261, 262], "weights_onli": [24, 42, 122, 141, 153, 192, 243], "load_state_dict": [24, 42, 58, 93, 104, 122, 141, 153, 192, 208, 209, 226, 230, 238, 243, 262], "print_size_of_model": 24, "getsiz": 24, "data_path": [24, 93, 113], "prepare_data_load": 24, "randomresizedcrop": [24, 56], "randomhorizontalflip": [24, 56], "totensor": [24, 37, 56, 98, 102, 139, 155, 178, 182, 190, 192, 216, 249, 289], "dataset_test": 24, "centercrop": 24, "train_sampl": 24, "randomsampl": 24, "test_sampl": 24, "sequentialsampl": 24, "train_batch_s": 24, "data_loader_test": 24, "eval_batch_s": 24, "pre": [24, 37, 106, 131, 135, 138, 140, 143, 155, 178, 192, 197, 199, 200, 209, 217, 251, 259, 268, 279], "saved_model_dir": 24, "float_model_fil": 24, "mobilenet_pretrained_float": 24, "scripted_float_model_fil": 24, "mobilenet_quantization_script": 24, "scripted_quantized_model_fil": 24, "mobilenet_quantization_scripted_quant": 24, "float_model": [24, 282], "fusion": [24, 87, 161, 197, 216, 242, 248, 257, 261, 262, 268, 279], "baselin": [24, 28, 96, 105, 192, 217, 227, 241, 268, 284], "un": [24, 103, 185], "num_eval_batch": 24, "sophist": [24, 121, 179], "num_calibration_batch": 24, "mymodel": [24, 263], "estim": [24, 51, 56, 57, 100, 145, 179, 180, 185, 197, 227, 246, 268], "qconfig": [24, 217, 263], "default_qconfig": 24, "calibr": [24, 173, 217, 263, 282], "56": [24, 164, 178, 186, 227, 232, 259, 284], "4x": [24, 140], "x86": [24, 203, 263, 279], "basi": [24, 140], "histogram": [24, 240], "per_channel_quantized_model": 24, "get_default_qconfig": 24, "67": [24, 120, 161, 177, 215, 263], "qat": [24, 263], "int8": [24, 178, 203, 217, 268, 279], "train_one_epoch": 24, "ntrain_batch": 24, "avgloss": 24, "5f": 24, "start_tim": 24, "global_avg": 24, "qat_model": 24, "get_default_qat_qconfig": 24, "prepare_qat": 24, "freez": [24, 47, 128, 217], "num_train_batch": 24, "nepoch": 24, "disable_observ": 24, "intrins": [24, 263], "freeze_bn_stat": 24, "quantized_model": [24, 282], "confirm": [24, 93, 96, 113, 114, 140, 162, 181], "allud": [24, 80], "run_benchmark": 24, "img_load": 24, "elaps": [24, 139, 185], "num_batch": [24, 155], "enumer": [24, 93, 102, 104, 139, 141, 143, 178, 182, 189, 190, 216, 249, 284], "num_imag": 24, "0f": 24, "macbook": [24, 185], "pro": [24, 99], "61": [24, 120, 164, 215, 284], "welcom": 24, "hao": 28, "chen": [28, 196], "unifi": [28, 138, 149, 210, 225, 256], "ssl": 28, "modular": [28, 37, 122, 194, 244], "fixmatch": 28, "defixmatch": 28, "vision": [28, 41, 48, 56, 96, 100, 123, 135, 138, 164, 170, 225, 256, 262], "speech": [28, 80, 100, 106, 108, 112, 138, 147, 242], "light": [28, 57, 98, 102, 103, 149, 225], "vit": [28, 256], "famou": [28, 80], "strong": [28, 106, 196, 256, 278], "unlabel": [28, 103], "confid": [28, 57, 96, 98, 104, 107, 145, 179, 180, 190, 226], "threshold": [28, 54, 87, 145, 179, 183, 192, 215, 242], "absorb": 28, "gaussian": [28, 51, 57, 145, 179], "overcom": [28, 114], "quantiti": [28, 105, 133, 138, 143, 162, 167, 172], "qualiti": [28, 163, 185], "trade": [28, 145, 170, 279], "afford": 28, "cv": [28, 280], "nlp": [28, 98, 100, 107, 110, 111, 112, 125, 138, 186, 226, 242, 262, 280], "audio": [28, 37, 48, 138, 158, 188, 191], "semilearn": 28, "get_dataset": 28, "get_data_load": 28, "weak": 28, "get_net_build": 28, "get_algorithm": 28, "get_config": 28, "hyper": [28, 184, 259], "87": [28, 120, 183, 215, 227, 279], "lb_imb_ratio": 28, "ulb_imb_ratio": 28, "microsoft": [28, 39, 117, 118, 189, 270], "kihyuk": 28, "sohn": 28, "et": [28, 54, 57, 80, 155, 177, 185], "al": [28, 54, 57, 80, 177, 185], "yidong": 28, "audio_data_augmentation_tutori": [29, 31], "html": [29, 30, 31, 32, 33, 38, 49, 50, 54, 62, 67, 80, 81, 82, 83, 84, 85, 89, 97, 105, 108, 116, 121, 125, 128, 134, 158, 160, 168, 188, 191, 192, 195, 196, 197, 202, 226, 230, 231, 234, 235, 236, 237, 271, 274, 276, 278, 287], "audio_datasets_tutori": 30, "audio_feature_extractions_tutori": 32, "audio_io_tutori": 33, "frac": [35, 47, 68, 90, 95, 106, 107, 109, 112, 121, 131, 144, 150, 155, 179, 180, 200], "partial": [35, 47, 93, 95, 109, 122, 131, 139, 140, 141, 143, 144, 148, 156, 162, 216, 243, 261, 264], "leaf": [35, 47, 95, 123, 138, 194, 262], "retain_graph": [35, 148, 277], "surround": [35, 173], "mark": [35, 54, 143, 148, 164, 180, 181, 196, 223, 277], "frozen": [35, 47, 141, 163, 279], "acycl": [35, 47, 131], "dag": [35, 131], "chain": [35, 47, 95, 103, 107, 108, 131, 141, 149, 161, 181, 277], "accumul": [35, 47, 51, 54, 57, 95, 98, 109, 131, 150, 163, 170, 180, 181, 182, 183, 226, 245], "vec": [35, 47, 95, 161, 279], "langl": 35, "x_1": [35, 109, 167], "x_n": [35, 57], "rangl": 35, "y_1": [35, 109], "y_m": 35, "j": [35, 47, 80, 95, 102, 105, 106, 110, 141, 185, 266], "ccc": [35, 47, 95], "y_": [35, 47, 95, 106], "x_": [35, 47, 95], "cdot": [35, 47, 57, 95, 112, 131, 144], "vdot": [35, 47, 95], "ddot": [35, 47, 95], "v_1": 35, "v_m": 35, "life": [35, 105, 146, 147, 208], "autogradqs_tutori": [35, 38, 43, 82, 262], "compris": [36, 37, 57, 122], "fashionmnist": [36, 37, 39, 41, 45, 102, 190], "mtia": [36, 41, 44, 67, 80, 103, 121, 128, 199], "neuralnetwork": 36, "minibatch": [36, 37, 102, 113, 146, 157, 172, 175], "28x28": [36, 113, 190, 229], "784": [36, 102, 113, 157, 190], "nonlinear": 36, "wide": [36, 65, 95, 100, 113, 142, 143, 146, 147, 155, 176, 185, 225, 242, 268], "phenomena": 36, "seq_modul": 36, "logit": [36, 40, 105, 215], "infti": [36, 180], "parameter": [36, 284], "preview": 36, "buildmodel_tutori": [36, 38, 43, 262], "messi": 37, "primit": [37, 41, 121, 138, 143, 162, 173, 197, 200, 203, 266], "fashion": [37, 54, 102, 104, 117, 140, 143, 145, 182, 187, 190, 192, 194, 197, 216], "zalando": 37, "60": [37, 115, 140, 146, 147, 164, 178, 183, 185, 190, 196, 215, 232, 277], "grayscal": [37, 156, 163], "internet": [37, 178], "target_transform": [37, 41, 45], "training_data": [37, 110], "test_data": 37, "26": [37, 102, 161, 163, 164, 178, 183, 215], "4m": [37, 102], "5k": [37, 102], "364kb": 37, "229k": 37, "38": [37, 120, 183, 215, 241], "683kb": 37, "885k": 37, "03mb": [37, 102], "57m": 37, "03": [37, 98, 102, 182, 183, 192, 215, 241, 264, 277], "07mb": 37, "1mb": [37, 102], "58": [37, 146, 164, 284], "2m": 37, "5mb": [37, 102], "70": [37, 56, 164, 183, 227, 277, 284], "18": [37, 118, 120, 146, 161, 178, 183, 215, 227, 255, 268, 277], "90": [37, 183, 215, 277], "8m": 37, "0mb": [37, 102, 260], "3mb": 37, "29": [37, 102, 177, 178, 183, 227], "325kb": 37, "42m": [37, 102], "360kb": 37, "06": [37, 215], "678kb": 37, "852k": [37, 102], "93mb": 37, "47m": 37, "85mb": 37, "05mb": 37, "15k": [37, 102], "4mb": 37, "labels_map": 37, "shirt": [37, 39, 102, 190], "trouser": [37, 39, 102, 190], "pullov": [37, 39, 102, 190], "dress": [37, 39, 102, 190], "coat": [37, 39, 102, 190], "sandal": [37, 39, 102, 190], "sneaker": [37, 39, 102, 190], "ankl": [37, 39, 102, 190], "boot": [37, 39, 102, 178, 190], "figsiz": [37, 190], "col": 37, "sample_idx": [37, 284], "randint": [37, 56, 57, 141, 161, 175, 216], "add_subplot": [37, 190], "titl": [37, 80, 146, 173, 185, 192], "img_dir": 37, "csv": [37, 54, 56, 140], "annotations_fil": 37, "pd": [37, 192], "io": [37, 54, 56, 102, 138, 181, 184, 192], "decode_imag": 37, "customimagedataset": 37, "img_label": 37, "read_csv": 37, "img_path": 37, "iloc": 37, "tshirt1": 37, "tshirt2": 37, "ankleboot999": 37, "read_imag": 37, "reshuffl": 37, "overfit": [37, 98, 113, 122, 147], "train_dataload": 37, "shuffl": [37, 41, 56, 60, 98, 102, 104, 113, 139, 140, 155, 178, 182, 189, 190, 264], "test_dataload": 37, "train_featur": 37, "train_label": 37, "927": [37, 43, 262], "data_tutori": [37, 38, 43, 262], "intro": [38, 39, 43, 60, 107, 108, 134, 156, 190, 206, 214, 262], "quickstart_tutori": [38, 41, 43, 262], "tensorqs_tutori": [38, 43, 44, 85, 262], "tensor_tutori": [38, 50, 52, 53, 62, 262], "transforms_tutori": [38, 43, 45, 262], "autograd_tutori": [38, 47, 50, 52, 62, 262], "optimization_tutori": [38, 40, 43, 262], "saveloadrun_tutori": [38, 42, 43, 262], "sphx_glr_beginner_basics_autogradqs_tutori": [38, 43, 262], "sphx_glr_beginner_basics_buildmodel_tutori": [38, 43, 262], "sphx_glr_beginner_basics_intro": [38, 43, 262], "sphx_glr_beginner_basics_saveloadrun_tutori": [38, 43, 262], "sphx_glr_beginner_basics_transforms_tutori": [38, 43, 262], "sphx_glr_beginner_basics_optimization_tutori": [38, 43, 262], "sphx_glr_beginner_basics_quickstart_tutori": [38, 43, 262], "sphx_glr_beginner_basics_tensorqs_tutori": [38, 43, 262], "sphx_glr_beginner_basics_data_tutori": [38, 43, 262], "suraj": [39, 58, 59, 60, 61, 120, 151, 152, 163], "subramanian": [39, 58, 59, 60, 61, 120, 151, 152, 163], "juarez": 39, "cassi": 39, "breviu": 39, "dmitri": 39, "soshnikov": 39, "ari": 39, "bornstein": 39, "ml": [39, 80, 103, 105, 134, 138, 145, 197, 214, 215], "belong": [39, 146, 197], "cloud": [39, 59, 99, 113, 115, 259], "favorit": [39, 99, 155, 160], "id": [39, 87, 99, 148, 153, 181, 182, 183, 192, 196, 197, 208, 209, 259, 284], "walkthrough": [40, 47, 53, 87, 120], "video": [40, 47, 48, 58, 60, 61, 95, 96, 98, 100, 102, 103, 104, 125, 133, 134, 135, 136, 138, 151, 152, 189, 202], "3blue1brown": [40, 47], "unpredict": [40, 95, 153], "jump": [40, 80, 110, 114, 115, 117, 118, 163, 251], "untrain": 40, "dissimilar": [40, 103, 112], "regress": [40, 113, 187, 227, 240], "nllloss": [40, 107], "classif": [40, 48, 57, 80, 93, 96, 98, 103, 104, 105, 107, 128, 135, 138, 139, 147, 178, 187, 199, 200, 245, 289], "logsoftmax": 40, "deposit": [40, 47], "train_loop": 40, "test_loop": 40, "warmstart": [40, 230, 238, 261, 262], "torchtext": [41, 55, 98, 104, 138], "torchaudio": [41, 55, 98, 104, 135, 138, 140, 178, 189, 268], "cifar": [41, 48, 98, 190], "coco": [41, 199], "conduct": [41, 96, 161, 176, 268], "003": [41, 43, 44, 48, 52, 54, 56, 57, 80, 90, 91, 98, 101, 104, 105, 107, 109, 111, 123, 128, 147, 159, 162, 164, 173, 184, 186, 194, 196, 199, 200, 262, 268, 285], "unpickl": [42, 122, 266], "inferenc": 42, "fail": [42, 95, 103, 114, 122, 131, 161, 173, 178, 180, 184, 194, 196, 226, 256, 266, 283, 290], "inconsist": [42, 122, 161], "legaci": [42, 115, 142], "pickl": [42, 93, 113, 122, 170, 227, 266], "checkpoint": [42, 54, 93, 141, 151, 170, 175, 216, 226, 230, 238, 244, 261, 262, 267, 268], "tip": [42, 57, 99, 112, 190, 230, 238, 261, 262], "944": [43, 215], "ndarrai": [44, 45, 53, 103, 192], "elimin": [44, 120, 149, 157, 161, 162, 178, 196, 200, 280, 283], "overridden": [44, 53, 156, 231], "1200": [44, 227], "manipul": [44, 45, 98, 102, 121, 131, 141, 160, 170, 201], "breez": [44, 53], "subtli": [44, 53], "y1": [44, 199], "y2": 44, "y3": 44, "wise": [44, 53, 80, 103, 107, 143, 155, 161, 164, 167, 196, 197, 242, 255], "z1": [44, 161], "z2": 44, "z3": 44, "aggreg": [44, 47, 98, 120, 163, 192, 232, 276], "operand": [44, 95, 196], "denot": [44, 107, 110, 197, 275, 276, 280], "suffix": [44, 53, 87, 131, 161], "t_": [44, 53], "problemat": [44, 53, 161, 171, 242], "commonli": [45, 54, 74, 93, 100, 105, 121, 175, 178, 185, 189, 233, 242, 246, 263], "hot": [45, 54, 80, 100, 112, 146, 147, 156, 185], "floattensor": [45, 103], "intens": [45, 90, 161, 173, 203, 259], "scatter_": [45, 181], "prop": 47, "proportion": [47, 170], "travers": [47, 183], "resnet18": [47, 164, 178, 189, 192, 217, 255, 282], "height": [47, 51, 100, 103, 192, 193, 199, 223, 256], "3a": [47, 178], "9a": 47, "dq": [47, 217], "bf": 47, "external_grad": 47, "blue": [47, 140, 143, 223], "finetun": [47, 135, 138, 144, 170, 186, 262], "unfrozen": 47, "exclusionari": 47, "revers": [47, 54, 95, 141, 159, 167, 171, 178, 185, 197], "autodiff": [47, 133, 138, 162], "pillow": [48, 98], "opencv": 48, "librosa": 48, "cython": 48, "nltk": 48, "spaci": 48, "viz": [48, 96], "huge": [48, 107, 112, 121, 143, 153, 156], "airplan": [48, 98, 105], "automobil": [48, 98, 105], "bird": [48, 98], "deer": [48, 98], "dog": [48, 98, 105, 199, 225], "frog": [48, 98], "hors": [48, 98], "truck": [48, 98, 105], "3x32x32": 48, "32x32": [48, 51, 98, 105, 115, 190], "extrem": [48, 112, 164, 197, 201], "pilimag": 48, "brokenpipeerror": 48, "fun": [48, 54, 114, 115, 117, 118, 179], "entropi": [48, 57, 98, 100, 104, 143, 245], "learnt": 48, "truth": [48, 80, 115, 199, 290], "okai": 48, "wasn": [48, 106, 109, 196], "energi": [48, 54], "chanc": [48, 54, 105, 163], "hmmm": 48, "plai": [48, 54, 57, 105, 107, 135, 138, 179, 186, 259, 262], "chat": [48, 54, 185], "cifar10_tutori": [48, 50, 52, 62, 262], "sung": 49, "kim": 49, "jenni": 49, "kang": 49, "mytensor": 49, "my_tensor": [49, 122], "parallelli": 49, "getitem": 49, "demo": [49, 138, 176, 189, 215], "cnn": [49, 105, 135, 138, 167, 171, 172, 187, 192, 199, 216], "capsul": 49, "monitor": [49, 113, 155], "output_s": [49, 266], "former_torchi": 49, "parallelism_tutori": 49, "data_parallel_tutori": [49, 50, 52, 84, 262], "neural_networks_tutori": [50, 51, 52, 62, 262], "gentl": [50, 52, 61, 62, 131, 134, 201, 262], "glimps": 51, "convnet": [51, 96, 156, 163, 182], "learning_r": [51, 77, 105, 121], "5x5": [51, 100, 177], "affin": [51, 110, 131, 149, 187, 242, 259, 263], "wx": 51, "fc1": [51, 102, 122, 139, 157, 177, 182, 190, 243], "fc2": [51, 102, 122, 139, 177, 182, 190, 243], "84": [51, 56, 102, 120, 122, 163, 177, 190, 243], "fc3": [51, 102, 122, 177, 190, 243], "c1": [51, 98, 161, 277], "subsampl": 51, "s2": [51, 98, 196], "2x2": [51, 100], "c3": [51, 98], "s4": [51, 98, 196], "f5": [51, 98], "f6": [51, 98], "in_featur": [51, 139, 233, 263, 279, 284, 286], "out_featur": [51, 139, 263, 279, 284], "lenet": [51, 80, 98, 102, 104, 177], "0788": 51, "0022": 51, "0448": 51, "0731": 51, "0674": 51, "0320": 51, "0904": 51, "0082": 51, "0792": 51, "0645": 51, "addmmbackward0": 51, "mini": [51, 54, 57, 102, 110, 113, 172, 178, 190], "4d": [51, 164], "nsampl": 51, "nchannel": 51, "least": [51, 80, 103, 122, 131, 145, 147, 153, 163, 173, 178, 185, 196, 209, 227, 260], "6062": 51, "mselossbackward0": 51, "next_funct": [51, 95], "0x7fc3f4711d50": 51, "0x7fc3f541ed70": 51, "accumulategrad": 51, "0x7fc3f541e080": 51, "clear": [51, 56, 80, 95, 106, 107, 112, 144, 148, 161, 173, 183, 192, 193, 227, 269, 277], "0063": 51, "0010": [51, 177], "0004": 51, "0021": 51, "0018": 51, "0033": 51, "sub_": 51, "nesterov": [51, 122], "147": [51, 52, 262], "156": 52, "blitz": [52, 84, 115, 146, 147, 185, 190, 262], "matthew": [54, 92, 122], "inkawhich": [54, 57, 80, 90, 92, 122], "movi": [54, 55, 96], "cornel": [54, 55], "dialog": [54, 55], "corpu": [54, 55], "artifici": [54, 105, 229], "intellig": 54, "servic": [54, 178, 216, 246, 259], "onlin": [54, 156, 163, 179, 182], "helpdesk": 54, "bot": 54, "predefin": [54, 105, 113, 156, 217, 242], "restrict": [54, 90, 155, 189, 194, 196, 263, 288], "compani": 54, "IT": 54, "teach": [54, 57, 105, 185], "human": [54, 80, 96, 147, 163, 185, 192, 266], "boom": 54, "hello": [54, 107, 170], "am": [54, 109, 147, 185], "hospit": 54, "lawyer": 54, "friend": [54, 170], "arrest": 54, "kid": 54, "sorri": 54, "san": 54, "francisco": [54, 113], "goodby": 54, "luong": [54, 185], "jointli": [54, 185], "acknowledg": [54, 155], "borrow": [54, 183], "yuan": 54, "kuei": 54, "wu": [54, 142, 264, 269, 279], "ywk991112": 54, "sean": [54, 146, 147, 185], "robertson": [54, 146, 147, 185], "spro": 54, "floydhub": 54, "textutil": 54, "__": [54, 67, 80, 105, 121, 128, 192, 197], "reformat": 54, "rich": [54, 223], "charact": [54, 112, 138, 151, 168, 179, 185, 186, 262], "220": [54, 183], "579": [54, 164], "exchang": [54, 115, 117, 140, 155, 185, 189], "292": [54, 93], "035": 54, "617": 54, "713": [54, 98], "utter": [54, 55], "divers": 54, "variat": [54, 104, 113, 150, 200, 227, 241, 275], "formal": [54, 209, 275], "sentiment": 54, "datafil": 54, "tab": [54, 102, 104, 185, 190, 223], "sentenc": [54, 100, 106, 107, 110, 112, 147, 155, 185, 200, 280], "jsonl": [54, 55], "loadlinesandconvers": 54, "lineid": 54, "characterid": 54, "conversationid": 54, "movieid": 54, "extractsentencepair": 54, "formatted_movie_lin": 54, "unescap": 54, "delimit": 54, "busi": [54, 147, 259], "vocabulari": [54, 98, 100, 112, 143, 146, 242, 280], "implicit": [54, 95, 141, 196, 223, 242], "discret": [54, 216], "voc": 54, "addword": 54, "addsent": 54, "infrequ": 54, "unicod": [54, 146, 147, 185], "ascii": [54, 112, 146, 147, 185], "unicodetoascii": 54, "letter": [54, 146, 147, 185], "lowercas": [54, 113, 185], "punctuat": [54, 185], "normalizestr": 54, "aid": [54, 122, 197, 231], "max_length": [54, 284], "filterpair": 54, "stackoverflow": [54, 146, 147, 185, 227], "518232": [54, 146, 147, 185], "2809427": [54, 146, 147, 185], "tactic": 54, "benefici": [54, 100, 134, 180, 242, 245, 259, 279, 283], "soften": 54, "difficulti": [54, 179, 201], "approxim": [54, 96, 140, 149, 160, 163, 167, 177, 180, 215, 229, 242], "min_count": 54, "massag": 54, "accommod": 54, "shorter": [54, 56, 113, 185, 189, 275], "eos_token": 54, "english": [54, 107, 110, 146, 168, 185], "indexesfromsent": 54, "zeropad": 54, "inputvar": 54, "outputvar": 54, "pad_token": 54, "batch2traindata": 54, "bunch": [54, 146, 147, 223, 255], "aforement": [54, 87, 105, 200, 217, 251], "brain": 54, "sutskev": 54, "discov": [54, 118, 155, 182, 200, 283], "accomplish": [54, 57, 146, 155, 167, 211, 227, 241, 286], "jeddy92": 54, "ts_seq2seq_intro": 54, "invent": [54, 57, 179], "cho": 54, "2014": [54, 57], "bidirect": [54, 156], "gru": [54, 100, 146, 147, 185], "colah": 54, "2015": [54, 105], "fp": [54, 93, 136, 167], "hidden_s": 54, "unpack": [54, 289], "pack_padded_sequ": 54, "pad_packed_sequ": 54, "input_seq": 54, "input_length": [54, 140], "n_layer": [54, 175], "num_direct": 54, "sole": [54, 189], "combat": [54, 112], "bahdanau": [54, 185], "groundwork": 54, "h_t": [54, 110], "bar": [54, 87, 182, 192, 194, 223, 286], "attn": [54, 185], "softmax": [54, 100, 105, 110, 112, 113, 146, 178, 181, 183, 190, 200, 215, 280], "submodul": [54, 90, 100, 114, 141, 171, 184, 283, 286], "unidirect": 54, "input_step": 54, "last_hidden": 54, "encoder_output": 54, "num_word": 54, "masknllloss": 54, "clever": [54, 107], "teacher": [54, 105, 133, 138, 185], "teacher_forcing_ratio": [54, 185], "instabl": [54, 185], "craft": [54, 80, 112, 147], "explod": [54, 100, 201], "essenc": [54, 109], "nan": [54, 276], "overshoot": 54, "steep": 54, "cliff": 54, "goodfellow": [54, 57, 80], "2016": 54, "www": [54, 185, 199], "deeplearningbook": 54, "sos_token": 54, "realiti": [54, 57, 80, 109, 113, 184, 241], "tie": 54, "trainit": [54, 185], "n_iter": 54, "explanatori": 54, "lift": [54, 288], "tarbal": 54, "NOT": [54, 90, 122, 148, 150, 151, 153, 170], "decoder_output": 54, "greedysearchdecod": 54, "searcher": 54, "evaluateinput": 54, "press": [54, 57], "gracefulli": [54, 58, 182, 209], "prompt": [54, 55, 256, 268], "regardless": [54, 103, 104, 162, 173, 182, 193], "attn_model": 54, "concat": [54, 109], "loadfilenam": 54, "save_dir": [54, 192], "model_nam": [54, 140, 216, 217, 282, 284], "corpus_nam": [54, 55], "encoder_n_lay": 54, "decoder_n_lay": 54, "_checkpoint": [54, 140], "tar": [54, 122], "checkpoint_it": 54, "folk": 54, "congratul": [54, 118, 144, 146, 197, 229, 243, 244, 245], "tailor": [54, 155, 173, 197, 259], "cool": [54, 57, 170, 172, 288], "chatbot_tutori": [54, 123, 262], "wen": [55, 194, 196, 254], "uninstal": 55, "reinstal": 55, "torchdata": 55, "chatbot": [55, 123, 262], "browser": [55, 102, 104, 115, 189, 210], "click": [55, 102, 113, 115, 189, 190, 197, 223], "subfold": 55, "visit": [55, 131, 201, 268], "in_": 55, "_colab": 55, "_name": 55, "mount": [55, 266], "gdrive": 55, "upload": [55, 210], "button": [55, 57, 115, 189, 223], "rerun": [55, 131, 148, 170], "evolv": [55, 161, 167], "drop": [55, 100, 102, 115, 151, 170, 183, 215, 268], "t4": 55, "sasank": [56, 128], "chilamkurthi": [56, 128], "preprocess": [56, 105, 113, 138, 146, 185, 192], "scikit": 56, "facial": 56, "pose": [56, 210, 211], "landmark": 56, "dlib": 56, "tag": [56, 100, 108, 112, 196, 231, 240, 267], "image_nam": 56, "part_0_x": 56, "part_0_i": 56, "part_1_x": 56, "part_1_i": 56, "part_2_x": 56, "part_67_x": 56, "part_67_i": 56, "0805personali01": 56, "83": [56, 215, 241], "98": [56, 161, 183, 215], "134": 56, "1084239450_e76e00b7e7": 56, "236": [56, 79], "257": [56, 227], "312": [56, 164, 256], "person": [56, 197, 199], "img_nam": 56, "__len__": [56, 113, 146, 155, 199], "__getitem__": [56, 113, 146, 155, 199], "randomcrop": 56, "crop": [56, 98, 145, 187, 199], "ax": [56, 107, 110, 136, 138, 185, 186, 190, 262], "tsfm": 56, "transformed_sampl": 56, "safer": [56, 227], "stick": [56, 155, 164], "lose": [56, 58, 103, 105, 163], "collate_fn": 56, "indent": [56, 227], "imagefold": [56, 57, 98], "ant": [56, 128], "xxy": 56, "jpeg": 56, "xxz": 56, "bee": [56, 128], "nsdf3": 56, "asd932_": 56, "data_transform": 56, "hymenoptera_dataset": 56, "hymenoptera_data": 56, "dataset_load": 56, "data_loading_tutori": [56, 123, 262], "nathan": [57, 80, 90, 92], "celebr": [57, 135, 138], "pictur": [57, 80, 141, 143, 185], "thorough": 57, "shed": [57, 225], "spend": [57, 87, 170, 227, 232], "sake": [57, 156, 177, 180, 243, 244], "ian": 57, "constantli": [57, 80, 180], "outsmart": 57, "equilibrium": 57, "perfect": [57, 95, 153, 202, 277], "notat": [57, 80], "chw": [57, 178], "3x64x64": 57, "thought": [57, 88, 241, 276], "latent": [57, 112], "p_": 57, "p_g": 57, "minimax": 57, "logd": 57, "underset": 57, "mathbb": [57, 90, 167, 180], "sim": 57, "radford": 57, "unsupervis": 57, "drawn": [57, 113, 179], "rgb": [57, 98, 105, 163, 178, 192], "volum": [57, 139], "inlin": [57, 95, 98, 102, 104, 148, 161, 193, 246, 275, 279], "manualse": 57, "10000": [57, 98, 102, 175, 183, 227, 241], "dataroot": 57, "image_s": [57, 256], "spatial": [57, 96, 98, 100, 135, 138, 186, 193, 199, 262], "64x64": 57, "nc": [57, 279], "nz": 57, "ngf": 57, "ndf": 57, "num_epoch": 57, "0002": 57, "ngpu": 57, "celeb": 57, "img_align_celeba": 57, "celeba": 57, "188242": 57, "173822": 57, "284702": 57, "537394": 57, "subdirectori": [57, 199], "stdev": 57, "02": [57, 102, 161, 183, 215, 270], "weights_init": 57, "reiniti": 57, "criteria": 57, "netg": 57, "netd": 57, "worth": [57, 170, 173, 182], "critic": [57, 90, 141, 152, 173, 208, 241, 264], "batchnorm": [57, 60, 122, 164, 193, 201, 242, 244, 282], "downsampl": [57, 98, 163], "promot": 57, "healthi": 57, "bceloss": 57, "ell": [57, 185], "l_1": 57, "l_n": 57, "quad": [57, 180], "y_n": 57, "bce": 57, "gt": [57, 120], "fixed_nois": 57, "establish": 57, "Be": [57, 95], "somewhat": [57, 173], "collaps": 57, "ganhack": 57, "secondli": 57, "loss_d": 57, "loss_g": 57, "versu": [57, 80, 138, 146, 203], "anim": [57, 98], "music": 57, "dcgan_faces_tutori": [57, 123, 262], "mingpt": [58, 59, 60, 61, 151, 152], "aw": [58, 60, 139, 151, 152, 261], "p3": [58, 59, 60, 68, 121, 151, 152], "8xlarg": [58, 60], "youtub": [58, 59, 60, 61, 95, 96, 98, 100, 102, 103, 104, 138, 151, 152, 202], "failur": [58, 114, 152, 153, 161, 196, 206, 256, 266], "disrupt": [58, 254, 266], "suscept": [58, 211], "elast": [58, 140, 153, 211], "attempt": [58, 95, 103, 107, 140, 173, 196, 203, 231, 254, 266], "minutia": 58, "multinod": [58, 151, 197], "load_snapshot": 58, "snapshot_path": 58, "train_step": 58, "should_checkpoint": 58, "save_snapshot": 58, "membership": [58, 152], "intervent": [58, 105, 251], "multigpu": [58, 60, 152], "multigpu_torchrun": 58, "envvari": 58, "ddp_setup": [58, 60], "12355": [58, 60, 139, 153, 208, 209], "local_rank": [58, 140, 152, 153, 175, 266], "gpu_id": [58, 60, 152], "_save_snapshot": 58, "model_st": 58, "epochs_run": 58, "_load_snapshot": 58, "max_epoch": 58, "_run_epoch": [58, 60], "total_epoch": [58, 60], "argv": [58, 60, 216], "save_everi": [58, 60], "standalon": [58, 226, 253, 264], "nproc_per_nod": [58, 140, 141, 153, 175, 211, 266], "migrat": [58, 60, 242], "fault": [59, 60, 61, 93, 151, 152, 173], "toler": [59, 60, 61, 93, 95, 151, 152], "deploi": [59, 115, 132, 138, 145, 152, 177, 178], "cluster": [59, 102, 140, 145, 151, 152, 153, 155, 209, 211, 250], "torchrun": [59, 65, 140, 141, 151, 152, 175, 211, 264, 266], "amazon": 59, "ec2": [59, 139], "gentli": 59, "gpt": [59, 139, 151, 152, 175], "stat": [60, 140, 148, 179, 189, 197, 232, 241], "replica": [60, 61, 65, 139, 141, 153, 155, 260], "convert_sync_batchnorm": 60, "single_gpu": 60, "mytraindataset": 60, "distributedsampl": [60, 61, 139, 140], "destroy_process_group": [60, 139, 140, 142, 153, 175, 208, 209, 264], "excess": [60, 87, 143, 194, 216, 226], "train_data": 60, "train_dataset": [60, 105, 140, 216, 249, 284], "set_epoch": [60, 139, 140], "b_sz": 60, "_run_batch": 60, "ckp": 60, "_save_checkpoint": 60, "load_train_obj": 60, "prepare_dataload": 60, "shorthand": 60, "ring": [61, 143, 264], "older": [61, 120, 121, 157, 172, 173, 180, 268], "destroi": [61, 95, 159], "soumith": [62, 155], "chintala": [62, 155], "scientif": [62, 100, 103, 121], "cifar10": [62, 93, 98, 189, 216, 245, 249], "mobil": [63, 64, 105, 204, 221, 222, 230, 263, 270, 272, 273, 281, 289], "executorch": [63, 64, 138, 204, 219, 220, 221, 222, 224, 256, 272, 273, 281, 287, 289], "Will": [65, 141, 193], "constabl": [65, 141], "wei": [65, 141], "feng": [65, 141, 163, 176, 193], "categor": [65, 87, 102, 156, 181, 183, 197], "navig": [65, 189, 190, 223], "technologi": [65, 105, 138, 155, 200, 261], "infrastructur": 65, "fsdp2": [65, 138, 139], "tp": [65, 211, 266], "pp": 65, "dtensor": [65, 143, 210, 261], "devicemesh": [65, 143, 261], "reshard": [65, 141, 209], "mesh": [65, 134, 141, 143, 211], "recip": [65, 120, 134, 138, 202, 205, 207, 210, 214, 223, 225, 226, 227, 228, 229, 231, 232, 238, 239, 243, 244, 245, 246, 248, 250, 251, 252, 253, 254, 255, 256, 260, 262, 274, 289], "c10d": [65, 153, 176, 242, 266], "all_gath": [65, 139, 140, 155, 176], "p2p": 65, "isend": [65, 155], "guidelin": [65, 242], "fullyshardeddataparallel": [65, 139, 140, 141, 208, 209], "torchtitan": [65, 175, 264], "polynomi": [67, 68, 70, 72, 73, 74, 77, 78, 121], "pi": [67, 68, 72, 73, 74, 77, 78, 95, 121, 136, 180], "euclidean": [67, 68, 72, 73, 74, 77, 78, 95, 105, 121], "polynomial_autograd": [67, 69, 262], "bx": [68, 121], "cx": [68, 107, 121], "p_3": [68, 121], "5x": [68, 121], "legendr": [68, 121], "polynomial_custom_funct": [68, 69, 262], "examples_autograd": [69, 262], "strang": [70, 90, 121], "fifth": [70, 121], "tough": [70, 121], "dynamic_net": [70, 75, 262], "member": [72, 121, 283, 290], "polynomial_modul": [72, 75, 262], "2000": [73, 77, 98, 102, 105, 121, 190, 192, 196, 227, 260, 266], "flaten": [73, 121], "1d": [73, 100, 121, 242, 288], "mse": [73, 100, 105, 121, 131], "polynomial_nn": [73, 75, 262], "polynomial_optim": [74, 75, 262], "examples_nn": [75, 262], "99": [77, 121, 183], "1377": 77, "8191592949638": 77, "199": 77, "923": 77, "6109016833007": 77, "299": [77, 192], "620": 77, "4764976832244": 77, "399": 77, "418": 77, "0549457754638": 77, "499": 77, "282": 77, "80684225230647": 77, "599": 77, "192": 77, "38554902923252": 77, "699": 77, "131": [77, 183], "89496586039286": 77, "799": 77, "4005630287619": 77, "899": [77, 161], "27334799441883": 77, "999": [77, 102, 190], "08759268953576": 77, "1099": 77, "33": [77, 178, 183, 186, 215, 227, 277], "886846002672": 77, "1199": [77, 177], "694968663463165": 77, "1299": 77, "190246289010894": 77, "1399": 77, "488085920420403": 77, "1499": 77, "996042753606094": 77, "1599": 77, "317049813672174": 77, "1699": 77, "18478691340453": 77, "1799": 77, "4204893028379": 77, "1899": 77, "904066062398327": 77, "1999": 77, "554774753153554": 77, "017968002519558088": 77, "8361322960218615": 77, "0030997794234762606": 77, "09039900268326943": 77, "linspac": [77, 95, 121], "1e": [77, 93, 100, 121, 141, 149, 181, 183, 263, 264, 284], "y_pred": [77, 121, 131, 215], "grad_y_pr": [77, 121], "grad_c": [77, 121], "grad_d": [77, 121], "234": [77, 79, 262], "polynomial_numpi": [77, 79, 262], "biggest": [78, 266], "polynomial_tensor": [78, 79, 262], "examples_tensor": [79, 262], "appreci": [80, 106], "overlook": [80, 227], "secur": [80, 189], "vulner": 80, "surpris": [80, 171], "impercept": 80, "perturb": [80, 96], "drastic": [80, 196, 255], "overarch": 80, "misclassif": 80, "alter": [80, 122, 233, 244, 268], "har": 80, "remark": [80, 194], "mathbf": [80, 131], "nabla_": [80, 107], "007": 80, "misclassifi": 80, "gibbon": 80, "clearli": [80, 145, 266, 275, 276], "pretrained_model": [80, 192], "fgsm_attack": 80, "clean": [80, 139, 140, 146, 153, 170, 175, 197, 264, 275], "data_grad": 80, "_imag": 80, "_grad": 80, "strength": [80, 190], "_data": 80, "trend": [80, 88, 189], "curv": [80, 189, 190], "linearli": 80, "05": [80, 140, 183, 215, 263, 277], "lunch": 80, "BUT": [80, 109], "percept": 80, "tradeoff": [80, 136, 138, 144, 145, 155, 179, 246], "evid": [80, 142], "subsequ": [80, 96, 105, 122, 131, 139, 146, 156, 181, 183, 185, 194, 242, 245, 250, 259, 266, 268], "defend": 80, "nip": 80, "defens": 80, "competit": [80, 157, 172, 259], "defenc": 80, "dirti": 80, "fgsm_tutori": [80, 123, 262], "torchvision_tutori": [81, 186, 199, 262], "nn_tutori": [83, 113, 123, 262], "anupam": [87, 88], "bhatnagar": [87, 88], "offici": [87, 118, 142, 155, 180, 194, 196, 216, 217], "holistictraceanalysi": 87, "env_nam": [87, 179], "deactiv": 87, "trace_dir": 87, "trace_analysi": 87, "traceanalysi": 87, "engag": [87, 290], "datafram": [87, 145, 192], "time_spent_df": 87, "get_temporal_breakdown": 87, "enqueu": 87, "slowdown": [87, 140, 144], "consecut": [87, 147, 156, 163, 173, 178, 192, 259], "insuffici": [87, 180], "delai": [87, 153, 181, 197], "stall": [87, 259, 266], "gap": [87, 90], "nanosecond": 87, "consecutive_kernel_delai": 87, "get_idle_time_breakdown": 87, "idle_time_df": 87, "show_idle_interval_stat": 87, "percentag": [87, 177, 280], "visualize_pctg": 87, "comm": 87, "comp": 87, "proport": [87, 170], "pie": [87, 170], "chart": [87, 102, 253], "kernel_type_metrics_df": 87, "kernel_metrics_df": 87, "get_gpu_kernel_breakdown": 87, "bottleneck": [87, 120, 140, 143, 152, 170, 173, 181, 189, 194, 205, 223], "plotli": [87, 96, 145], "hover": [87, 145, 178], "pan": 87, "num_kernel": 87, "duration_ratio": 87, "preced": [87, 95, 103, 149, 156, 193, 282], "lab": [87, 190], "image_render": 87, "jupyterlab": 87, "gpu_kernel_breakdown": 87, "tflop": 87, "oversubscrib": 87, "unresolv": [87, 277], "extent": [87, 103], "overlap_df": 87, "get_comm_comp_overlap": 87, "h2d": [87, 207], "d2h": [87, 207], "d2d": 87, "memcpi": 87, "memset": 87, "outstand": 87, "generate_trace_with_count": 87, "_with_count": 87, "screenshot": [87, 223], "profil": [87, 123, 132, 133, 136, 138, 139, 173, 184, 186, 215, 227, 230, 238, 242, 261, 262, 279], "portion": [87, 170, 173, 175, 177, 215, 223, 241, 266], "get_memory_bw_summari": 87, "get_queue_length_summari": 87, "get_memory_bw_time_seri": 87, "get_queue_length_time_seri": 87, "mem_bw_summari": 87, "queue_len_summari": 87, "mem_bw_seri": 87, "queue_len_seri": 87, "get_queue_length_seri": 87, "25th": 87, "50th": 87, "75th": 87, "percentil": 87, "cudalaunchkernel": 87, "cudamemcpyasync": 87, "cudamemsetasync": 87, "kernel_info_df": 87, "get_cuda_kernel_launch_stat": 87, "short": [87, 100, 103, 106, 108, 111, 134, 147, 155, 171, 173, 179, 185, 187, 196, 242, 245, 262], "outlier": [87, 180], "microsecond": [87, 162, 184, 227], "cutoff": 87, "runtime_cutoff": 87, "launch_delay_cutoff": 87, "occasion": [88, 182, 185], "hta": [88, 189], "tracediff": 88, "cumul": [88, 180], "compare_trac": 88, "ops_diff": 88, "absent": 88, "visualize_counts_diff": 88, "visualize_duration_diff": 88, "ten": [88, 98, 102, 105], "df": 88, "compare_traces_output": 88, "sort_valu": 88, "diff_count": 88, "largest": [88, 113, 192], "diff_dur": 88, "differer": 88, "overshadow": 88, "profilerstep": [88, 161], "loc": [88, 179, 226], "trace_diff_demo": 88, "learning_hybrid_frontend_through_example_tutori": [89, 90, 91, 262], "hybrid_frontend": [89, 91, 262], "introduction_to_hybrid_frontend_tutori": 89, "shini": 90, "enjoi": [90, 163], "aquaint": 90, "opportun": [90, 115, 156, 197], "bridg": [90, 210], "refin": [90, 196], "gradual": [90, 170], "proven": [90, 278], "resouc": 90, "consumpt": [90, 98, 100, 102, 104, 120, 140, 143, 145, 161, 173, 177, 189, 242, 260, 261], "discrep": [90, 282], "interwork": 90, "intrus": [90, 170], "decor": [90, 95, 118, 134, 148, 163, 181, 194, 242, 254], "broken": [90, 109], "epsilon": [90, 149, 156, 179, 180], "biggl": 90, "lfloor": 90, "prod_": 90, "biggr": 90, "rfloor": 90, "hline": 90, "190": [90, 183, 192, 227], "4377": 90, "59051": 90, "accomod": [90, 151], "scriptmodul": 90, "script_method": 90, "tracedmodul": 90, "onnx": [90, 119, 132, 138, 262], "dramat": [93, 113], "industri": [93, 96], "analysi": [93, 95, 104, 138, 139, 160, 161, 184, 189, 192, 196, 223, 241, 256, 264, 268], "slight": [93, 142, 150, 215, 228], "trial": [93, 145, 226], "train_cifar": 93, "data_dir": [93, 140], "l2": [93, 100, 177], "get_checkpoint": 93, "as_directori": 93, "checkpoint_dir": [93, 208, 209], "pkl": [93, 113], "rb": [93, 113], "checkpoint_st": 93, "start_epoch": 93, "net_state_dict": 93, "optimizer_state_dict": [93, 122, 208, 209, 216], "80": [93, 145, 146, 164, 183, 256, 277], "luckili": [93, 161, 196, 197, 227, 277], "trainload": [93, 190], "fraction": [93, 227], "checkpoint_data": 93, "tempfil": [93, 153], "temporarydirectori": 93, "wb": [93, 113], "dump": [93, 161, 203, 210, 227], "from_directori": 93, "val_loss": [93, 113, 140], "val_step": 93, "wast": [93, 189, 227, 231, 233, 246, 280, 286, 290], "lastli": [93, 170, 196], "loguniform": [93, 227], "ashaschedul": 93, "functool": [93, 139, 140], "gpus_per_tri": 93, "resources_per_tri": 93, "num_sampl": [93, 140], "checkpoint_at_end": 93, "000668163": 93, "31479": 93, "0977": 93, "0331514": 93, "31605": 93, "0983": 93, "000150295": 93, "30755": 93, "1023": 93, "0128248": 93, "66912": 93, "4391": 93, "00464561": 93, "7316": 93, "3463": 93, "00031556": 93, "19409": 93, "1736": 93, "00574329": 93, "85679": 93, "3368": 93, "00325652": 93, "30272": 93, "0984": 93, "000342987": 93, "76044": 93, "003734": 93, "53101": 93, "4761": 93, "0037339984519545164": 93, "5310075663924216": 93, "4737": 93, "hyperparameter_tuning_tutori": [93, 123, 262], "tensorboard": [95, 96, 97, 98, 99, 100, 103, 104, 136, 138, 145, 186, 230, 232, 238, 261, 262], "decis": [95, 108, 111, 156, 173, 196, 203, 242, 251, 257, 262, 275, 276, 278], "branch": [95, 114, 196, 199, 216, 289], "rigidli": 95, "sign": [95, 171], "contextu": 95, "nudg": [95, 98, 104], "calculu": [95, 131], "drill": [95, 241], "machineri": [95, 227], "took": [95, 155, 160, 170, 184, 194, 254, 266], "ins": [95, 194], "ideal_output": 95, "layer2": 95, "blow": 95, "b1": 95, "b2": 95, "temporarili": 95, "enable_grad": 95, "throw": [95, 103, 131, 142, 181], "sin_": 95, "handi": [95, 98, 113, 155, 163, 190], "bake": [95, 193], "chrome": [95, 173, 184, 189, 232], "hessian": [95, 133, 138, 186, 262, 288], "twice": [95, 113, 150, 173, 215, 227, 232, 260, 268], "jvp": [95, 159, 162], "vjp": [95, 162, 167, 288], "vhp": [95, 133, 138, 186, 262], "hvp": [95, 133, 138, 186, 262], "autogradyt_tutori": [95, 97, 101, 262], "latin": [96, 113], "increasingli": [96, 200], "ai": [96, 107, 108, 113, 139, 145, 163, 185, 203, 209, 216, 217, 225, 242, 266, 279], "review": [96, 151, 168, 196, 216, 246, 275, 276, 278, 283, 289], "neuron": [96, 105, 225], "analag": 96, "ablat": 96, "permut": [96, 105, 164, 178, 192, 214], "valuabl": [96, 105, 185, 214, 280], "certainli": [96, 160, 276, 278], "attr": [96, 176, 203], "widget": 96, "toolset": 96, "flask": 96, "renam": [96, 263], "virtual": [96, 173, 176, 231, 270], "recogn": [96, 100, 176, 193, 229], "224x224": [96, 178], "visualize_image_attr": 96, "integrated_gradi": 96, "strongest": [96, 98, 100, 104], "visualize_image_attr_multipl": 96, "heat": [96, 178], "upsampl": 96, "interpol": 96, "layerattribut": 96, "teapot": 96, "trilobit": 96, "fossil": 96, "attributionvisu": 96, "imagefeatur": 96, "heatmap": 96, "captumyt": [96, 101, 262], "introyt": [97, 101, 202, 262], "introyt1_tutori": [97, 98, 101, 262], "tensors_deeper_tutori": [97, 101, 103, 262], "modelsyt_tutori": [97, 100, 101, 262], "tensorboardyt_tutori": [97, 101, 102, 262], "trainingyt_tutori": 97, "captumyt_tutori": 97, "captum": [97, 230, 238, 261, 262], "sphx_glr_beginner_introyt_introyt_index": [97, 101, 262], "sphx_glr_beginner_introyt_modelsyt_tutori": [97, 101, 262], "sphx_glr_beginner_introyt_autogradyt_tutori": [97, 101, 262], "sphx_glr_beginner_introyt_tensors_deeper_tutori": [97, 101, 262], "sphx_glr_beginner_introyt_captumyt": [97, 101, 262], "sphx_glr_beginner_introyt_introyt1_tutori": [97, 101, 262], "sphx_glr_beginner_introyt_trainingyt": [97, 101, 262], "sphx_glr_beginner_introyt_tensorboardyt_tutori": [97, 101, 262], "5x3": 98, "helpfulli": 98, "prng": 98, "r3": 98, "r1": 98, "r2": 98, "trigonometr": [98, 103], "singular": [98, 171, 184, 255], "decomposit": [98, 118, 141, 161], "diagram": [98, 180], "earliest": 98, "driver": [98, 189], "explos": 98, "handwritten": [98, 139], "abridg": 98, "artifact": [98, 151, 196, 250, 251, 255], "gist": 98, "tile": [98, 102, 104, 192, 203, 284], "hasn": 98, "shouldn": [98, 177], "center": [98, 100, 104, 180, 189, 242], "concatdataset": 98, "trainset": [98, 190], "50000": [98, 113], "4914": 98, "4822": 98, "4465": 98, "2470": 98, "2435": 98, "2616": 98, "rotat": [98, 102, 187, 190], "vehicl": [98, 183], "filesystem": [98, 155, 267], "told": [98, 179], "strip": [98, 241, 284], "ingredi": 98, "inner": [98, 173, 179], "235": [98, 120], "940": 98, "6000": [98, 102], "8000": [98, 102, 241], "573": 98, "507": 98, "12000": [98, 102], "442": 98, "378": 98, "364": 98, "319": [98, 215, 232], "284": [98, 183], "267": 98, "monoton": 98, "descend": 98, "memor": 98, "roughli": [98, 106, 121, 140, 153, 161, 242], "brad": 99, "heintz": 99, "introyt_index": [99, 101, 202, 262], "lin": [100, 113], "nearbi": 100, "lenet5": 100, "1x32x32": 100, "liken": 100, "3x5": 100, "presenc": [100, 194, 196, 225], "6x28x28": 100, "resolut": [100, 192], "6x14x14": 100, "sought": 100, "3x3": 100, "16x12x12": 100, "16x6x6": 100, "576": 100, "edg": [100, 115, 121, 138, 160, 189, 229, 256, 263], "instrument": [100, 160, 261], "dna": 100, "nucleotid": 100, "sort": [100, 106, 110, 120, 178, 200, 232, 242], "moder": 100, "beyond": [100, 103, 109, 176, 177, 242], "scope": [100, 103, 109, 120, 144, 148, 196, 223, 246], "tagger": [100, 106], "noun": 100, "verb": 100, "vocab_s": [100, 141, 161, 175, 216], "tagset_s": 100, "log_softmax": [100, 113, 139, 182], "decod": [100, 106, 140, 175, 183, 184, 200, 226, 256, 268], "transformerencod": [100, 200], "transformerdecod": [100, 200], "subcompon": [100, 194], "transformerencoderlay": [100, 184, 200], "transformerdecoderlay": [100, 175, 200], "twin": 100, "maxpool": 100, "quadrant": 100, "6x6": 100, "vanish": [100, 107, 201], "offset": [100, 197, 208, 267, 284], "neighborhood": 100, "sometim": [100, 103, 121, 144, 150, 152, 153, 156, 162, 180, 183, 185, 196, 242, 268, 277, 278], "suffer": [100, 189], "steepest": 100, "feasibl": [100, 139, 141], "hardtanh": 100, "909": 101, "897": [101, 102, 262], "trainingyt": [101, 104, 262], "garment": 102, "summarywrit": [102, 190, 240], "tb": [102, 256], "gfile": 102, "tensorflow_stub": 102, "training_set": 102, "validation_set": 102, "training_load": 102, "validation_load": 102, "matplotlib_imshow": [102, 190], "one_channel": [102, 190], "unnorm": [102, 190], "npimg": [102, 190], "grei": [102, 190], "datait": [102, 190], "img_grid": [102, 190], "make_grid": [102, 190], "362kb": 102, "197k": 102, "574kb": 102, "96mb": 102, "38m": 102, "67mb": 102, "27m": 102, "9m": 102, "21": [102, 120, 178, 215, 227, 232, 241, 277], "88": [102, 120, 183], "327kb": 102, "359kb": 102, "164k": 102, "465kb": 102, "688k": 102, "56mb": 102, "62": [102, 183, 284], "75m": 102, "42mb": 102, "52": [102, 164, 215], "add_imag": [102, 190], "flush": [102, 226, 240], "log_dir": [102, 145, 190], "writer": [102, 146, 178, 179, 190, 208, 240, 266], "fashion_mnist_experiment_1": [102, 190], "logdir": [102, 189, 190, 240], "6006": [102, 189, 190, 240], "efficaci": 102, "running_loss": [102, 190], "running_vloss": 102, "eg": [102, 141], "regularis": 102, "vdata": 102, "vinput": 102, "vlabel": 102, "voutput": 102, "vloss": 102, "avg_loss": 102, "avg_vloss": 102, "add_scalar": [102, 190, 240], "3000": [102, 190, 196, 256], "7000": 102, "9000": 102, "11000": 102, "13000": 102, "14000": 102, "15000": 102, "add_graph": [102, 190], "add_embed": [102, 190], "select_n_random": [102, 190], "perm": [102, 190], "randperm": [102, 190], "class_label": [102, 190, 192], "label_img": [102, 190], "projector": 102, "toggl": [102, 260, 267], "night": [102, 190], "icon": 102, "dark": [102, 192], "upack": 103, "attach": [103, 180, 201, 259], "terminologi": [103, 109], "likewis": [103, 170], "fctori": 103, "assur": [103, 173], "random1": 103, "random3": 103, "random2": 103, "random4": 103, "rng": [103, 155], "_like": [103, 164], "rand_lik": 103, "int16": 103, "cue": 103, "intent": [103, 209, 276], "subtract": [103, 105, 242], "2x4": 103, "1x4": 103, "honor": 103, "3rd": [103, 141, 148, 203, 216], "2nd": [103, 110, 141, 148, 182], "hundr": [103, 134, 143, 192, 197], "bitwis": [103, 226], "inventori": [103, 104], "occupi": [103, 223], "discard": [103, 139, 140, 189, 232, 241], "underscor": 103, "deepli": 103, "nor": [103, 155, 259, 263, 275], "mid": 103, "someplac": 103, "ram": [103, 140, 173, 197, 231], "colloqui": 103, "fragil": 103, "robustli": [103, 117], "whichev": 103, "acquir": [103, 122, 177, 179, 183], "thrown": [103, 278, 289], "226": 103, "zeroth": 103, "bracket": [103, 263], "rescu": 103, "squeeze_": 103, "unsqueeze_": 103, "radic": 103, "parenthes": 103, "comma": 103, "convinc": [103, 170], "kinship": 103, "autom": [104, 121, 145, 160, 164, 192], "outcom": [104, 145, 266], "saniti": [104, 131, 145, 179, 192], "nb": [104, 288], "chose": [104, 178], "saved_model": 104, "garmentclassifi": 104, "alexandro": 105, "chariton": 105, "computation": [105, 192], "lightweight": [105, 133, 138, 177, 226], "drone": 105, "phone": [105, 115], "4gb": [105, 170, 178], "3072": [105, 284], "satur": [105, 226], "held": [105, 146, 182], "greedi": [105, 156, 180], "num_images_to_keep": 105, "50_000": 105, "test_dataset": 105, "10_000": 105, "extractor": [105, 192], "emploi": [105, 185, 189, 200, 208], "train_load": [105, 139, 140, 182, 189, 216, 249], "detriment": 105, "workload": [105, 120, 134, 141, 152, 153, 155, 189, 197, 208, 211, 215, 216, 259, 270, 279], "test_load": [105, 139, 182], "sensit": [105, 151, 159], "conclud": [105, 150, 155, 196], "interven": [105, 196], "soft": [105, 180], "mistaken": 105, "alon": [105, 122, 143, 185, 190], "exploit": [105, 163, 185], "meaningfulli": 105, "temperatur": 105, "smoother": 105, "soft_target_loss_weight": 105, "ce_loss_weight": 105, "train_knowledge_distil": 105, "75": [105, 128, 139], "ce": [105, 185], "coeffici": 105, "convei": 105, "naiv": [105, 144, 162, 172, 184, 280], "rational": 105, "capac": [105, 151, 179, 192, 242], "cosineembeddingloss": 105, "obvious": [105, 109, 183], "somehow": [105, 112, 197], "hidden_represent": 105, "hidden_representation_s": 105, "avg_pool1d": 105, "modifiedlightnnregressor": 105, "cosineloss": 105, "wiggl": 105, "hinton": 105, "vinyal": 105, "dean": 105, "workshop": 105, "romero": 105, "balla": 105, "kahou": 105, "chassang": 105, "gatta": 105, "bengio": 105, "fitnet": 105, "thin": [105, 267], "confer": 105, "knowledge_distillation_tutori": [105, 123, 262], "kit": 106, "dynet": [106, 108], "opposit": [106, 173, 276], "theano": [106, 108], "kera": [106, 108, 121], "constitu": 106, "bottom": [106, 189, 192, 196, 223], "green": [106, 140, 143, 190], "fat": 106, "exception": 106, "entiti": [106, 112, 197, 244, 245], "recognit": [106, 138, 203, 242], "ner": 106, "sound": [106, 109, 121], "scari": 106, "viterbi": [106, 110], "sum_": [106, 112, 180], "psi_i": 106, "sum_i": 106, "partit": [106, 138, 143, 148, 155, 209, 242], "emiss": 106, "timestep": [106, 110, 146, 147, 180], "textbf": 106, "psi_": 106, "y_i": [106, 110], "rightarrow": [106, 155, 180], "x_i": [106, 107], "tran": [106, 192], "h_i": [106, 110], "michael": [106, 205, 206, 214, 226, 252, 257], "collin": 106, "robert": [106, 107, 109, 110, 112], "guthri": [106, 107, 109, 110, 112], "prepare_sequ": 106, "anywai": [106, 109, 173], "gold": [106, 185], "perceptron": 106, "score_sent": 106, "advanced_tutori": [106, 108, 111, 262], "workhors": 107, "2x5": 107, "acx": 107, "ac": [107, 192], "sigma": [107, 179], "plenti": 107, "peopl": [107, 108, 128], "shy": 107, "linearit": 107, "sum_j": 107, "x_j": 107, "unseen": [107, 112], "eta": 107, "vari": [107, 141, 149, 163, 173, 185, 194, 196, 200, 205, 226, 277, 280], "spanish": [107, 146, 147], "bow": 107, "vocab": [107, 110, 143], "word_to_ix": [107, 110, 112], "bowclassifi": 107, "creo": 107, "bigger": [107, 146, 147, 178, 192], "deep_learning_tutori": [107, 108, 111, 262], "russel": 108, "norvig": 108, "book": 108, "rip": 108, "pytorch_tutori": [108, 109, 111, 262], "word_embeddings_tutori": [108, 111, 112, 262], "lexic": [108, 111, 262], "sequence_models_tutori": [108, 110, 111, 262], "bi": [108, 111, 262], "crf": [108, 111, 262], "2x2x2": 109, "complain": [109, 196], "x_2": [109, 167], "vagu": 109, "programm": [109, 112], "mayb": [109, 112, 157, 196, 290], "x_0": 109, "overbrac": [109, 110, 112], "y_0": 109, "z_0": 109, "z_1": 109, "y_2": 109, "z_2": 109, "gloss": 109, "new_z": 109, "NO": 109, "forgotten": 109, "classic": [110, 113, 164, 171, 187, 217, 239], "markov": 110, "myriad": 110, "cow": 110, "q_": [110, 112, 163], "1st": [110, 139, 141, 148], "unfamiliar": 110, "w_1": 110, "w_m": 110, "w_i": [110, 112], "_i": 110, "_1": [110, 131], "_m": 110, "argmax": [110, 113, 139, 182, 215], "_j": 110, "ah_i": 110, "affix": [110, 112], "bear": 110, "ly": 110, "adverb": 110, "c_w": 110, "x_w": 110, "po": [110, 192], "emb": [110, 112, 183], "013": 111, "capit": 112, "enorm": [112, 192], "notion": 112, "mathematician": 112, "physicist": 112, "ok": [112, 142, 181], "role": [112, 177, 183, 197, 259], "orthograph": 112, "linguist": 112, "hypothesi": 112, "coffe": 112, "phi": 112, "gave": 112, "pain": 112, "earth": 112, "herself": 112, "longtensor": [112, 147, 181, 183], "ith": [112, 280], "shakespear": [112, 184], "sonnet": 112, "word_i": 112, "context_s": 112, "beauti": 112, "cbow": 112, "probabilist": [112, 179], "percent": 112, "q_w": 112, "raw_text": 112, "dedupl": 112, "jeremi": 113, "howard": [113, 163, 175, 176], "rachel": 113, "thoma": 113, "ingham": 113, "elegantli": [113, 229], "concis": 113, "exist_ok": 113, "_static": [113, 138], "gz": 113, "gzip": 113, "as_posix": 113, "x_train": 113, "y_train": 113, "x_valid": 113, "y_valid": 113, "importerror": 113, "trail": 113, "signifi": 113, "xavier": [113, 114], "initialis": 113, "prewritten": 113, "xb": 113, "4479": 113, "5175": 113, "9017": 113, "3359": 113, "9403": 113, "4605": 113, "2867": 113, "5214": 113, "4651": 113, "selectbackward0": 113, "nll": 113, "loss_func": 113, "yb": 113, "3393": 113, "negbackward0": 113, "1406": 113, "talli": 113, "debugg": 113, "set_trac": 113, "start_i": 113, "end_i": 113, "zero_": [113, 176, 183], "logist": 113, "0819": 113, "wherea": [113, 148, 190, 192, 268, 276, 277], "cross_entropi": [113, 143], "nlllossbackward0": 113, "clearer": [113, 190], "uppercas": 113, "confus": [113, 146, 159, 192, 197, 268, 276, 277, 278], "mnist_logist": 113, "2320": 113, "prone": [113, 148, 200, 211], "gone": [113, 144], "0799": 113, "3665": 113, "get_model": [113, 181], "2414": 113, "0824": [113, 177], "faciallandmarkdataset": 113, "tensordataset": 113, "train_d": 113, "0817": 113, "train_dl": 113, "cleaner": [113, 275, 277, 290], "valid_d": 113, "valid_dl": 113, "phase": [113, 155, 183, 232, 257], "valid_loss": 113, "3048": 113, "2861": 113, "loss_batch": 113, "num": [113, 181], "29484455758333206": 113, "29442500368356705": 113, "mnist_cnn": [113, 139], "avg_pool2d": [113, 289], "36115722856521604": 113, "27608430166840553": 113, "func": [113, 133, 138, 157, 159, 161, 162, 167, 172, 252, 256, 288], "avgpool2d": 113, "40860270352363587": 113, "23784525042772292": 113, "rid": [113, 114, 141, 162, 256], "wrappeddataload": 113, "dl": [113, 203, 268], "__iter__": 113, "adaptiveavgpool2d": [113, 156], "33358504831790925": 113, "2009636607170105": 113, "lucki": [113, 177], "rent": 113, "hour": [113, 256], "current_acceler": [113, 155], "17792983671426774": 113, "15761403501927854": 113, "mnist_sampl": 113, "fastai": 113, "practition": [113, 155, 278], "728": [113, 123, 164, 262], "dupr\u00e9": 114, "circumv": 114, "forwardwithcontrolflowtest": 114, "modelwithcontrolflowtest": 114, "mlp": [114, 143, 157, 197], "unexpectedli": [114, 223], "succe": [114, 117, 196], "assertionerror": [114, 161], "dynamo": [114, 115, 117, 148, 161, 217, 256, 257, 269], "faithfulli": [114, 275], "identity2": 114, "fx": [114, 115, 132, 138, 161, 186, 196, 217, 250, 262, 263, 270], "imperfect": 114, "faith": 114, "pitfal": [114, 196], "necessarili": [114, 115, 117, 118, 148, 150, 173, 196], "export_control_flow_model_to_onnx_tutori": [114, 116, 119, 262], "ti": [115, 117, 118], "tai": [115, 117, 118], "justin": [115, 118, 121, 131, 201], "chu": [115, 118], "thiago": [115, 117], "crepaldi": [115, 117], "gamut": 115, "platform": [115, 153, 155, 189, 203, 215, 223, 242, 249, 259], "supercomput": 115, "constrain": [115, 145, 171], "onnxscript": [115, 117, 118], "upgrad": [115, 117, 171, 178, 189, 290], "onnxprogram": [115, 118], "protobuf": 115, "app": [115, 138, 208, 209, 216], "drag": [115, 170, 189, 190, 210], "image_classifier_model": 115, "onnxruntim": [115, 117], "export_simple_model_to_onnx_tutori": [115, 116, 119, 262], "intro_onnx": [116, 117, 119, 262], "onnx_registry_tutori": [116, 118, 119, 262], "sphx_glr_beginner_onnx_export_control_flow_model_to_onnx_tutori": [116, 119, 262], "sphx_glr_beginner_onnx_intro_onnx": [116, 119, 262], "sphx_glr_beginner_onnx_export_simple_model_to_onnx_tutori": [116, 119, 262], "sphx_glr_beginner_onnx_onnx_registry_tutori": [116, 119, 262], "exportedprogram": [117, 118, 122, 196, 255, 256], "newer": [117, 154, 164, 170, 172, 198, 234, 235, 236, 237, 242, 287], "__version__": [117, 178, 289], "registri": 118, "opoverload": 118, "opset": 118, "native_funct": 118, "yaml": [118, 151], "custom_translation_t": 118, "redund": [118, 156], "node_add_0": 118, "input_i": 118, "input_x": 118, "gelu": [118, 282], "op_typ": 118, "mylibrari": 118, "add_and_round_op": 118, "005": 119, "json": [120, 161, 173, 184, 189, 210, 232, 255], "quicker": 120, "record_funct": [120, 161, 215, 232], "incur": [120, 143, 207, 208, 242, 266], "investig": [120, 131, 164, 177, 192, 194, 196, 241], "with_stack": [120, 189], "key_averag": [120, 161, 215], "group_by_stack_n": 120, "traceback": [120, 161, 256], "sort_bi": [120, 161, 215, 232], "193a910735e8": 120, "stacktrac": 120, "212": 120, "953": 120, "mnt": [120, 155], "xarfus": 120, "au": 120, "07": [120, 140, 215, 232, 241], "715": 120, "848m": 120, "350": 120, "151u": 120, "293": [120, 164], "342u": 120, "095u": 120, "931": 120, "footprint": [120, 139, 140, 141, 151, 170, 215, 226, 260], "006": 120, "476": 120, "34": [120, 178, 215, 227, 232, 241], "338": 120, "759m": 120, "as_strid": [120, 161], "281": [120, 164], "808u": 120, "275": 120, "721u": 120, "_local": 120, "268": 120, "650u": [120, 232], "_scalar_dens": 120, "347": 120, "argwher": 120, "nonzero": [120, 242], "089m": 120, "402m": 120, "491m": 120, "119": 120, "441": 120, "587u": 120, "_numpi": 120, "395": [120, 183], "602u": 120, "801m": 120, "rpc": [120, 138, 261], "johnson": 121, "brows": 121, "utf": 121, "modern": [121, 173, 194, 197], "50x": 121, "hairi": 121, "thankfulli": 121, "wave": 121, "tflearn": 121, "burden": [121, 185, 242], "facil": 122, "running_mean": [122, 244], "themodelclass": 122, "param_tensor": 122, "var_nam": 122, "param_group": [122, 206], "dampen": 122, "weight_decai": 122, "4675713712": 122, "4675713784": 122, "4675714000": 122, "4675714072": 122, "4675714216": 122, "4675714288": 122, "4675714432": 122, "4675714504": 122, "4675714648": 122, "4675714720": 122, "_use_new_zipfile_seri": 122, "best_model_st": 122, "deepcopi": 122, "pt2": [122, 196, 205, 206, 211, 214, 255], "simplemodel": 122, "saved_exported_program": 122, "model_state_dict": [122, 141, 208, 209, 216], "theoptimizerclass": 122, "modela_state_dict": 122, "modela": 122, "modelb_state_dict": 122, "modelb": 122, "optimizera_state_dict": 122, "optimizera": 122, "optimizerb_state_dict": 122, "optimizerb": 122, "themodelaclass": 122, "themodelbclass": 122, "theoptimizeraclass": 122, "theoptimizerbclass": 122, "gan": [122, 135, 138, 171], "ensembl": [122, 133, 138, 186, 262], "map_loc": [122, 141, 153, 192, 226, 231], "remap": 122, "overwrit": 122, "saving_loading_model": [122, 123, 234, 235, 236, 237, 262], "866": [123, 164], "understanding_leaf_vs_nonleaf_tutori": [123, 131, 262], "115": [123, 131, 164, 215, 262], "distil": [123, 133, 138, 262], "dcgan": [123, 133, 135, 138, 262], "transfer_learning_tutori": [123, 128, 262], "rai": [123, 136, 138, 262], "template_tutori": [123, 125, 262], "firstnam": 125, "lastnam": 125, "gallery_pattern": 125, "neural_style_transfer_tutori": 125, "sphinx": 125, "_build": 125, "beginner_sourc": [125, 131, 262], "link1": [125, 140], "link2": [125, 140], "cs231n": 128, "quot": 128, "licens": [128, 187], "bsd": [128, 187], "todai": [128, 197, 277], "lr_schedul": [128, 139, 140], "num_ftr": 128, "decai": [128, 156, 180], "checkout": [128, 289], "silver": [131, 170, 201], "mse_loss": 131, "_k": 131, "bigl": 131, "bigr": 131, "programmat": 131, "probe": [131, 201], "runtimeerror": [131, 142, 176, 178, 256], "phrase": [131, 185], "var": [131, 142], "workspac": [131, 216], "215": [131, 192], "userwarn": [131, 277], "mistak": [131, 227], "30531": 131, "tensorbodi": 131, "489": 131, "afterward": [131, 173, 196, 267], "retains_grad": 131, "tracker": [131, 160, 201], "streamlin": 132, "inductor": [132, 133, 138, 148, 186, 196, 251, 253, 257, 262, 268, 270, 279, 282, 290], "set_stanc": [132, 248, 261, 262], "usecas": [132, 261], "lrschedul": [132, 170, 261], "triton": [132, 161, 194, 248, 250, 255, 261, 262, 270, 279], "cold": [132, 185, 230, 248, 250, 261, 262], "torchdynamo": [132, 138, 148, 196, 270, 282], "fuser": [132, 138, 186, 262], "orthogon": [133, 138, 171], "symmetr": [133, 138, 171, 282], "prune": [133, 138, 171, 186, 262, 290], "scaled_dot_product_attent": [133, 138, 184, 200, 264], "nchw": [133, 138, 164, 216], "tangent": [133, 138, 159, 186, 262], "nerur": [133, 138], "netork": [133, 138], "exploresever": [133, 138], "spread": [134, 192], "demand": [134, 266], "ddp_series_intro": 134, "utm_sourc": 134, "distr_land": 134, "utm_medium": 134, "distributeddata": 134, "ddp_tutori": 134, "intermediate_ddp_tutori": 134, "uneven": 134, "generic_join": 134, "fsdp_tutori": 134, "fsdp_getting_start": 134, "tp_tutori": 134, "distributed_device_mesh": 134, "rpc_tutori": 134, "rpc_getting_start": 134, "rpc_param_server_tutori": 134, "async_execut": [134, 138, 181], "rpc_async_execut": 134, "dataparallel": [134, 138, 144, 226, 242], "rpc_ddp_tutori": 134, "rpc_plus_ddp": 134, "plug": [134, 176, 187], "process_group_cpp_extension_tutori": 134, "custom_extensions_cpp": 134, "dqn": [135, 138, 186, 262], "cartpol": [135, 138, 156, 180, 183], "v0": [135, 138, 163, 180, 199], "proxim": [135, 138, 179], "mario": [135, 138, 171, 186, 262], "experiment": [136, 139, 145, 183, 201, 240, 242, 263, 264, 266, 269, 282], "torchx": [136, 138], "plugin": [136, 138, 189], "raspberri": 136, "gpudirect": [138, 262, 285, 290], "bite": [138, 202, 261], "non_block": [138, 186, 262], "pin_memori": [138, 139, 140, 186, 242, 262], "slide": [138, 242], "tiatoolbox": 138, "resampl": 138, "waveform": 138, "wav2vec2": 138, "holist": 138, "thumbnail": [138, 192], "matcher": [138, 193], "paral": 138, "fully_shard": [138, 141, 143, 208, 209, 211], "libuv": 138, "tcpstore": [138, 153], "sdk": 138, "v3": 138, "camera": [138, 178], "xnnpack": [138, 263], "metal": 138, "shader": 138, "android": 138, "deeplab": 138, "fp32": [138, 140, 151, 164, 184, 203, 263, 268, 279], "torchrec": [138, 186, 262], "distributedmodelparallel": 138, "hamid": [139, 140], "shojanazeri": [139, 140], "yanli": [139, 140], "zhao": [139, 140], "shen": [139, 153, 176, 181, 183], "li": [139, 153, 155, 173, 176, 181, 183, 194], "fsdp1": 139, "huggingfac": [139, 140, 200, 217, 256, 284], "1t": [139, 151], "courtesi": 139, "patrick": 139, "hu": 139, "reduce_scatt": [139, 140, 143], "scatter": [139, 141, 153, 155, 192], "possess": [139, 231, 268], "toi": [139, 153, 183, 193, 196, 197, 209, 239], "fsdp_mnist": 139, "size_based_auto_wrap_polici": 139, "default_auto_wrap_polici": 139, "fsdp_auto_wrap_polici": 139, "auto_wrap_polici": [139, 140, 141], "steplr": [139, 140], "fully_sharded_data_parallel": 139, "cpuoffload": [139, 141], "backwardprefetch": [139, 140], "enable_wrap": [139, 140], "cleanup": [139, 140, 153, 208, 209], "dropout1": [139, 182], "dropout2": [139, 182], "9216": [139, 182], "ddp_loss": 139, "batch_idx": [139, 216, 249], "tloss": 139, "6f": 139, "view_a": [139, 182], "test_loss": 139, "fsdp_main": [139, 140], "1307": [139, 155, 182], "3081": [139, 155, 182], "dataset1": 139, "dataset2": 139, "sampler1": [139, 140], "num_replica": [139, 140], "sampler2": [139, 140], "train_kwarg": [139, 140], "test_kwarg": [139, 140], "test_batch_s": [139, 140], "cuda_kwarg": [139, 140], "my_auto_wrap_polici": 139, "min_num_param": 139, "init_start_ev": [139, 140], "enable_tim": [139, 140], "init_end_ev": [139, 140], "adadelta": 139, "step_siz": [139, 140], "gamma": [139, 140, 163, 180, 181, 183], "elapsed_tim": 139, "save_model": [139, 140], "barrier": [139, 140, 142, 153, 155, 264], "metavar": [139, 140, 181, 183], "store_tru": [139, 140], "110": [139, 183, 227], "85": [139, 215, 227, 232], "40": [139, 163, 164, 177, 183, 185, 200, 215, 227, 255, 269, 279, 284], "67462890625sec": 139, "_fsdp_wrapped_modul": 139, "flattenparamswrapp": 139, "_fpw_modul": 139, "peak": [139, 141, 149, 170, 178, 200, 208, 253, 259, 260, 264, 268], "g4dn": 139, "xlarg": 139, "allgath": [139, 140, 143, 176, 242], "seal": 139, "20000": 139, "89130859375sec": 139, "auto_wrap": 139, "66": [139, 215, 227], "offload": [139, 140, 141, 215, 223], "cpu_offload": [139, 141], "offload_param": [139, 141], "dpp": 139, "ddp_mnist": 139, "39": [139, 183, 200, 215, 227], "77766015625sec": 139, "wright": 140, "rohan": [140, 182], "varma": [140, 182], "wikihow": 140, "p4dn": 140, "a100": [140, 144, 172, 194, 200, 268, 284], "pressur": [140, 208], "fdsp": 140, "xxl": 140, "billion": [140, 143], "3b": [140, 178], "wikihowal": 140, "wikihowsep": 140, "summarization_dataset": 140, "t5_train": 140, "autotoken": [140, 284], "gpt2tokenizerfast": 140, "t5token": 140, "t5forconditionalgener": 140, "modeling_t5": 140, "t5block": 140, "checkpoint_wrapp": 140, "checkpointimpl": 140, "apply_activation_checkpointing_wrapp": 140, "mixedprecis": 140, "shardingstrategi": 140, "fullstatedictconfig": 140, "statedicttyp": 140, "transformer_auto_wrap_polici": 140, "tqdm": [140, 156, 179, 284], "datetim": [140, 142, 266], "setup_model": 140, "from_pretrain": [140, 161, 216, 256, 284], "get_date_of_run": 140, "2022": [140, 270], "08": [140, 161, 183, 215, 227, 255, 264], "31": [140, 161, 215, 227, 232, 241], "12_pm": 140, "date_of_run": 140, "strftime": 140, "s_": [140, 180], "format_metrics_to_gb": 140, "gigabyt": 140, "metric_num": 140, "g_gigabyt": 140, "ndigit": 140, "fsdp_loss": 140, "inner_pbar": 140, "colour": 140, "desc": [140, 266], "r0": 140, "input_id": [140, 143, 161, 256, 284], "source_id": 140, "attention_mask": [140, 256], "source_mask": 140, "target_id": 140, "train_accuraci": 140, "val_load": 140, "load_dataset": [140, 256, 284], "type_path": 140, "output_length": 140, "print_text": 140, "1500": [140, 227], "150": [140, 183], "val_dataset": 140, "t5_auto_wrap_polici": 140, "transformer_layer_cl": 140, "sharding_strategi": [140, 141], "shard_grad_op": [140, 141], "zero2": 140, "full_shard": [140, 141], "zero3": 140, "bf16_readi": 140, "is_bf16_support": 140, "loosevers": 140, "is_nccl_avail": [140, 264], "mp_polici": [140, 141], "bfsixteen": 140, "mixed_precis": [140, 141], "current_devic": [140, 226], "adamw": [140, 180], "best_val_loss": 140, "inf": [140, 196, 277, 280], "curr_val_loss": 140, "file_save_nam": 140, "time_of_run": 140, "dur": 140, "train_acc_track": 140, "val_acc_track": 140, "training_start_tim": 140, "track_memori": 140, "mem_alloc_track": 140, "mem_reserved_track": 140, "run_valid": 140, "zone": 140, "memory_alloc": 140, "memory_reserv": 140, "save_polici": 140, "offload_to_cpu": 140, "rank0_onli": 140, "state_dict_typ": 140, "full_state_dict": [140, 141], "cpu_stat": 140, "currepoch": 140, "prefix": [140, 144, 148, 156, 189, 194, 196, 227, 241, 259, 260, 266, 268], "save_nam": 140, "store_fals": 140, "nnode": [140, 153, 175, 264, 266], "transfom": 140, "mhsa": 140, "ffn": [140, 200], "bfloat16": [140, 141, 203, 217, 226, 239, 249, 264, 268, 279], "v100": [140, 194], "fpsixteen": 140, "param_dtyp": [140, 141], "reduce_dtyp": [140, 141], "buffer_dtyp": [140, 141], "fp32_polici": 140, "grad_bf16": 140, "oom": [140, 170, 226], "freed": [140, 170], "backward_pr": [140, 141], "backward_prefetch": [140, 141], "backward_post": [140, 141], "contact": [140, 288], "yifan": 141, "mao": 141, "fsdp": [141, 143, 151, 208, 209, 211], "unshard": [141, 197, 264], "recordstream": 141, "float8": 141, "nf4": 141, "qlora": 141, "fsdpmodul": 141, "fsdptransform": 141, "tok_embed": [141, 143, 175], "fsdptransformerblock": 141, "joint": [141, 251], "to_loc": 141, "clip_grad_norm_": 141, "seq_len": 141, "queu": [141, 208], "set_modules_to_forward_prefetch": 141, "set_modules_to_backward_prefetch": 141, "perf": [141, 284], "layers_to_prefetch": 141, "num_to_forward_prefetch": 141, "num_to_backward_prefetch": 141, "upcast": 141, "model_arg": [141, 175], "fsdp_kwarg": 141, "mixedprecisionpolici": 141, "max_norm": 141, "resum": [141, 194, 209, 256], "distribute_tensor": 141, "mmap": 141, "full_sd": 141, "meta_sharded_sd": 141, "sharded_sd": 141, "param_nam": [141, 239], "full_tensor": 141, "sharded_meta_param": 141, "sharded_tensor": 141, "device_mesh": [141, 143, 211, 264], "full_param": 141, "cpu_state_dict": 141, "sharded_param": 141, "del": [141, 175, 269], "set_model_state_dict": 141, "broadcast_from_rank0": 141, "statedictopt": 141, "get_model_state_dict": 141, "set_optimizer_state_dict": 141, "get_optimizer_state_dict": 141, "modulewrappolici": 141, "transformerblock": [141, 143], "param_init_fn": 141, "itertool": [141, 183, 227], "to_empti": [141, 239, 286], "sublay": 141, "reshard_after_forward": 141, "hybrid_shard": 141, "_hybrid_shard_zero2": 141, "offload_polici": 141, "cpuoffloadpolici": 141, "cast_forward_input": 141, "cast_root_forward_input": 141, "output_dtyp": [141, 263, 266], "sync_module_st": 141, "rank0": [141, 181, 183, 266], "forward_prefetch": 141, "fsdp_modul": 141, "limit_all_gath": 141, "use_orig_param": 141, "flat": 141, "no_sync": [141, 242], "set_requires_gradient_sync": 141, "ignored_param": 141, "ignored_st": 141, "xilun": [142, 264], "roll": 142, "1k": [142, 143], "98304": 142, "96k": 142, "perf_count": 142, "logger": [142, 192], "getlogg": [142, 192], "preset": [142, 282], "env_rank": 142, "env_world_s": 142, "env_master_addr": 142, "env_master_port": 142, "23456": [142, 155], "tcp_store": 142, "is_mast": 142, "time_elaps": 142, "client": 142, "timeout": [142, 153, 176, 266], "store_based_barri": 142, "timedelta": [142, 266], "diststoreerror": 142, "_diststoreerror": 142, "_store_based_barri": 142, "group_nam": 142, "rendezvous_count": 142, "default_pg_timeout": 142, "logging_interv": 142, "store_kei": 142, "store_based_barrier_kei": 142, "worker_count": 142, "last_worker_kei": 142, "last_work": 142, "num_workers_join": 142, "tcpstore_test": 142, "number_run": 142, "spectrum": 142, "listen_fd": 142, "socket": [142, 155, 161, 242, 259], "listen_sock": 142, "af_inet": 142, "sock_stream": 142, "addr": [142, 266], "getsocknam": 142, "master_listen_fd": 142, "notimplementederror": 142, "gloo": [142, 153, 155, 176, 189, 197, 208, 260], "vairabl": 142, "plane": 142, "notifi": [142, 181], "wanchao": [143, 211], "liang": [143, 211], "tianyu": 143, "liu": 143, "megatron": 143, "lm": [143, 207], "sp": 143, "parallelstyl": 143, "parallelize_modul": 143, "foward": 143, "aris": [143, 196, 200, 256, 268, 277], "exceed": [143, 179], "domin": [143, 164, 192], "inter": [143, 152, 167, 200, 211, 242], "ballpark": 143, "flop": [143, 197, 253], "llm": [143, 175, 279], "trillion": [143, 151], "month": 143, "llama": [143, 200, 217, 282], "70b": 143, "2k": 143, "llama2": 143, "colwiseparallel": 143, "rowwiseparallel": 143, "sequenceparallel": 143, "rmsnormpython": 143, "preparemoduleinput": 143, "preparemoduleoutput": 143, "init_device_mesh": [143, 211, 264], "tp_mesh": [143, 211], "feedforward": 143, "swiglu": 143, "w2": 143, "silu": 143, "w1": 143, "w3": 143, "colwis": 143, "rowwis": [143, 227], "parallelize_plan": 143, "layer_tp_plan": 143, "feed_foward": 143, "feed_forward": 143, "wq": 143, "wk": 143, "wv": 143, "wo": 143, "tp_plan": 143, "draft": [143, 155], "use_local_output": 143, "num_head": 143, "layer_id": [143, 175], "transformer_block": 143, "input_layout": 143, "output_layout": 143, "attention_norm": 143, "ffn_norm": 143, "desired_input_layout": 143, "yellow": 143, "red": [143, 148, 190, 223], "loss_parallel": 143, "seq": 143, "dp": [143, 266], "mesh_2d": [143, 211], "submesh": 143, "dp_mesh": 143, "model_tp": 143, "model_2d": 143, "broadli": 144, "torchviz": [144, 150], "orang": [144, 178], "_save": 144, "kept": [144, 266], "_saved_self": 144, "_saved_oth": 144, "cycl": [144, 189, 203, 227, 232], "thumb": [144, 162, 179, 226], "pack_hook": 144, "unpack_hook": 144, "silli": 144, "harmless": 144, "debat": 144, "__repr__": [144, 227], "152": 144, "48gb": 144, "5gb": 144, "6x": 144, "leak": 144, "autograd_saved_tensors_hooks_tutori": [144, 186, 262], "david": 145, "eriksson": 145, "balandat": 145, "methodologi": [145, 216], "laptop": 145, "sustain": [145, 208], "studi": [145, 177, 192], "botorch": 145, "bayesian": 145, "mnist_train_na": [145, 165, 186, 262], "appdef": 145, "kubernet": 145, "local_cwd": 145, "fetch": [145, 147, 181, 182, 183, 197, 251], "proxi": [145, 227, 246, 275, 278], "tensorboardcurvemetr": 145, "curve_nam": 145, "lower_is_bett": 145, "favor": [145, 167, 179, 196], "multiobjectiveoptimizationconfig": 145, "94": [145, 215, 232], "generationstrategi": 145, "scheduleropt": 145, "max_pending_tri": 145, "pareto": 145, "frontier": 145, "surrog": 145, "uncertainti": 145, "95": [145, 183, 215, 263], "num_param": 145, "val_acc": 145, "contour": 145, "hidden_size_1": 145, "kiuk": 145, "chung": 145, "tristan": [145, 178], "rice": [145, 178], "ax_multiobjective_nas_tutori": [145, 165, 186, 262], "surnam": 146, "spell": 146, "lua": [146, 147, 185], "unreason": [146, 147], "roman": 146, "alphabet": 146, "n_letter": 146, "line_length": 146, "all_lett": 146, "linetotensor": 146, "namesdataset": 146, "20074": 146, "charrnn": 146, "label_from_output": 146, "histor": [146, 147], "all_loss": [146, 147], "minu": [146, 189], "bright": 146, "incorrectli": 146, "chines": [146, 147], "korean": 146, "italian": 146, "greek": 146, "poorli": 146, "gender": 146, "subreddit": 146, "char_rnn_classification_tutori": [146, 168, 186, 262], "russian": 147, "ru": 147, "rovakov": 147, "uantov": 147, "shavakov": 147, "german": 147, "ger": 147, "gerren": 147, "ereng": 147, "rosher": 147, "spa": 147, "salla": 147, "parer": 147, "allan": 147, "chi": 147, "chan": 147, "iun": 147, "category_lin": 147, "o2o": 147, "muscl": [147, 192], "fuzz": 147, "chao": 147, "abcd": 147, "eo": [147, 185], "n_categori": 147, "randomtrainingexampl": 147, "contrast": [147, 153, 172, 173, 196, 275], "timesinc": 147, "timestamp": [147, 160, 223], "print_everi": 147, "plot_everi": 147, "output_nam": 147, "fiction": 147, "countri": 147, "citi": 147, "char_rnn_generation_tutori": [147, 168, 186, 262], "simon": 148, "fan": [148, 178], "torch_log": [148, 196, 246, 248, 256, 261, 262, 279], "_dynamo": [148, 161, 194, 196, 246, 256], "compiled_autograd": 148, "intercept": 148, "bytecod": [148, 194], "aotdispatch": 148, "rout": [148, 161, 196], "rewritten": 148, "compiled_autograd_verbos": 148, "stderr": 148, "aot0_": 148, "aot0_view_2": 148, "view_2": 148, "aot": [148, 161, 253], "unoptim": [148, 194], "aot_eag": [148, 161], "fn": [148, 155, 159, 161, 194, 205, 251, 254, 269], "graph_break": [148, 256], "unique_graph": 148, "call_hook": 148, "div": [148, 161, 275, 277], "adjac": 149, "hardcod": [149, 196], "dilat": 149, "track_running_statist": 149, "denomin": 149, "nenadmarku": [149, 193], "bulk": 149, "fusedconvbn": 149, "geforc": 149, "rtx": 149, "3070": 149, "56gb": 149, "unfus": 149, "68gb": 149, "shallow": [149, 156], "custom_function_conv_bn_tutori": [149, 186, 262], "grad_out": 150, "finit": [150, 167], "differenc": 150, "magnifi": 150, "gradgradcheck": [150, 242], "grad_x": 150, "make_dot": 150, "dout": 150, "ouptut": 150, "sinh": 150, "cosh": 150, "expx": 150, "expnegx": 150, "_grad_out_exp": 150, "_grad_out_negexp": 150, "sinhbad": 150, "cube_backward": 150, "cubebackward": 150, "cube_forward": 150, "cube_backward_backward": 150, "sav_grad_out": 150, "cube_backward_backward_grad_out": 150, "cube": 150, "dgrad_out": 150, "reachabl": [151, 152, 155], "2xlarg": [151, 152], "hydra": 151, "slurm": [151, 152, 153, 155], "char_dataset": 151, "gpt2_train_cfg": 151, "bucket": [151, 242], "aggress": 151, "rendezv": [152, 176], "nccl_debug": 152, "diagnos": 152, "nccl_socket_ifnam": 152, "eth0": 152, "joe": 153, "zhu": [153, 161], "chirag": [153, 266], "pandya": [153, 266], "clarifi": 153, "filestor": 153, "libtmp": 153, "some_fil": 153, "toymodel": [153, 208, 209, 211], "net1": [153, 208, 209, 210, 211], "net2": [153, 208, 209, 210, 211], "demo_bas": 153, "ddp_model": [153, 260], "loss_fn": [153, 175, 181, 208, 209, 260], "run_demo": 153, "demo_fn": 153, "caution": 153, "straggler": [153, 189], "inevit": 153, "spike": [153, 178], "AND": 153, "recoveri": 153, "torchelast": 153, "demo_checkpoint": 153, "checkpoint_path": 153, "gettempdir": 153, "toympmodel": 153, "dev0": 153, "dev1": 153, "output_devic": 153, "demo_model_parallel": 153, "mp_model": 153, "ddp_mp_model": 153, "n_gpu": 153, "elastic_ddp": 153, "rdzv_id": [153, 211], "rdzv_backend": 153, "rdzv_endpoint": [153, 211], "29400": [153, 211], "scontrol": 153, "hostnam": 153, "slurm_nodelist": 153, "srun": 153, "torchrun_script": 153, "s\u00e9b": 155, "arnold": 155, "sysadmin": 155, "coordin": [155, 187, 199, 259, 268, 278], "pdsh": 155, "clustershel": 155, "init_process": 155, "127": [155, 263], "set_start_method": 155, "ip": 155, "recv": [155, 175, 183], "irecv": 155, "dst": 155, "req": 155, "sent": [155, 173, 181, 196, 207], "behaviour": 155, "fanci": 155, "baidu": 155, "deepspeech": 155, "facebook": 155, "communc": 155, "new_group": [155, 175, 211], "commut": 155, "band": 155, "bor": 155, "bxor": 155, "premul_sum": 155, "scatter_list": 155, "gather_list": 155, "all_to_al": 155, "output_tensor_list": 155, "input_tensor_list": 155, "random_split": 155, "data_idx": 155, "datapartition": 155, "1234": 155, "data_len": 155, "part_len": 155, "partition_dataset": 155, "get_world_s": 155, "bsz": 155, "partition_s": 155, "train_set": [155, 189], "30000": 155, "ceil": 155, "epoch_loss": 155, "average_gradi": 155, "voil\u00e0": 155, "send_buff": 155, "recv_buff": 155, "accum": [155, 279], "send_req": 155, "bandwidth": [155, 189, 197, 215, 290], "subsect": 155, "mpi": 155, "eleg": 155, "device_typ": [155, 249, 264], "smi": [155, 226], "mvapich2": 155, "ipc": [155, 189], "recompil": [155, 194, 206, 246, 250, 251], "requisit": 155, "forg": [155, 259], "openmpi": 155, "mpirun": 155, "myscript": 155, "handshak": 155, "superflu": 155, "xccl": 155, "everybodi": 155, "readili": 155, "race": 155, "fcntl": 155, "nf": [155, 266], "sharedfil": 155, "everyon": 155, "unclear": [155, 196], "natalia": 155, "gimelshein": 155, "actor": 156, "carrier": [156, 179], "step_mdp": 156, "brought": [156, 173, 179, 196], "84x84": 156, "accessori": [156, 178], "inittrack": 156, "stamp": 156, "is_init": 156, "tensordictprim": 156, "primer": [156, 278], "disappear": 156, "lstmmodul": 156, "backbon": [156, 192], "flank": 156, "assist": [156, 211], "tensordictmodulebas": 156, "batch_first": 156, "make_tensordict_prim": 156, "qvaluemodul": 156, "action_valu": 156, "qvalueactor": 156, "set_recurrent_mod": 156, "uniniti": [156, 286], "dqnloss": 156, "delay_valu": 156, "lazymemmapstorag": 156, "dqn_with_rnn_tutori": [156, 186, 262], "tradition": [157, 286], "pretend": [157, 172], "stack_module_st": 157, "functional_cal": [157, 167, 172], "num_model": 157, "in_dim": [157, 172, 288], "weren": [157, 172], "forced_alignment_tutori": 158, "incomplet": [159, 173], "eagerli": [159, 170, 196, 254], "alongsid": [159, 190, 192, 197, 226], "primal": 159, "dual": 159, "dual_level": 159, "fresh": [159, 226], "check_forward_ad": 159, "check_backward_ad": 159, "check_undefined_grad": 159, "check_batched_grad": 159, "functorch": 159, "reformul": [159, 167], "ft": 159, "make_functional_with_buff": 159, "analog": [159, 196, 197, 277, 278], "consolid": [159, 181, 197], "dual_numb": 159, "forward_ad_usag": [159, 186, 262], "jame": 160, "reed": 160, "longest": 160, "nicer": 160, "tabul": [160, 194, 253, 266], "ca": 160, "graphmodul": [160, 263], "symbolic_trac": 160, "profilinginterpret": 160, "clock": [160, 227], "51393": 160, "happi": 160, "hear": 160, "fx_profiling_tutori": [160, 186, 262], "xuan": 161, "liao": 161, "haozh": 161, "jiong": [161, 269, 279], "gong": [161, 269, 279], "weihan": 161, "intricaci": 161, "troubleshoot": 161, "pinpoint": [161, 196, 210], "narrow": [161, 196, 266, 280], "foo1": 161, "x1": [161, 196, 199, 279], "x2": [161, 196], "8390": 161, "compiled_foo1": 161, "neg1": 161, "torch_compile_debug": 161, "xx": [161, 216], "ir": [161, 251], "_inductor": [161, 196, 217, 255, 269, 279], "model___20": 161, "torchinductor_root": 161, "rx": 161, "crxfi2ybd7yp5sbj2pnhw33wfhtdw7wumvrobyp5sjvdui5ktjc2": 161, "fx_graph_runn": 161, "fx_graph_transform": 161, "ir_pre_fus": 161, "ir_post_fus": 161, "output_cod": [161, 257, 279], "forward1": 161, "arg0_1": [161, 269], "arg1_1": 161, "async_compil": [161, 279], "asynccompil": 161, "cpp_fused_cat_maximum_neg_0": 161, "gv": 161, "cgv6n5aotqjo5w4vknjibhengeycuattfto532hkxpozszcgxr3x": 161, "unsign": [161, 227], "char": [161, 216], "in_ptr0": 161, "in_ptr1": 161, "out_ptr0": 161, "pragma": [161, 279], "ivdep": [161, 279], "i0": 161, "0l": [161, 279], "8390l": 161, "1l": [161, 269, 279], "i1": 161, "8l": 161, "tmp0": [161, 279], "tmp1": [161, 279], "tmp2": [161, 279], "tmp3": [161, 279], "max_propagate_nan": 161, "neg2": 161, "exc": [161, 256], "backendcompilerfail": 161, "cppcompileerror": 161, "xg": 161, "cxga5tk3b4lkwoxyigrtocjp5s7vc5cg2ikuscf6bk6pjqip2bhx": 161, "deduct": 161, "substitut": [161, 162, 170], "deduc": 161, "buf0": [161, 269], "schedulernod": 161, "computedbuff": 161, "memorydep": 161, "c0": 161, "67120": 161, "unmet_depend": 161, "met_depend": 161, "nodeus": 161, "can_inplac": 161, "buf0_loop_bodi": 161, "var_rang": 161, "z0": 161, "index0": 161, "index1": 161, "get_index": 161, "get_index_1": 161, "load_1": 161, "get_index_2": 161, "minifi": 161, "dead": 161, "minif": 161, "foo2": 161, "expected_result": 161, "compiled_foo2": 161, "actual_result": 161, "neg3": 161, "tol": 161, "test_script": 161, "torchdynamo_repro_aft": 161, "torchdynamo_repro_level": 161, "forward2": 161, "mobilebertforquestionansw": 161, "xeon": [161, 164, 203, 216, 261], "platinum": 161, "8358": 161, "60ghz": 161, "kmp_blocktim": [161, 242, 259], "kmp_set": 161, "kmp_affin": [161, 242, 259], "compact": [161, 242, 259], "ld_preload": [161, 242, 259], "conda_prefix": [161, 227], "libiomp5": [161, 242, 259], "libjemalloc": [161, 259], "malloc_conf": [161, 259], "oversize_threshold": [161, 259], "background_thread": [161, 259], "metadata_thp": [161, 259], "dirty_decay_m": 161, "muzzy_decay_m": 161, "numactl": [161, 242, 259], "bench": 161, "csarron": 161, "mobilebert": 161, "uncas": 161, "seq_length": [161, 216], "int64": [161, 278], "input_dict": 161, "compiled_model": 161, "num_it": 161, "timeit": [161, 241], "warmup": [161, 189, 200, 205, 206, 214, 215, 232, 254, 255], "eager_t": 161, "inductor_t": 161, "1023553796113": 161, "339": 161, "95180135127157": 161, "359459053287382": 161, "355x": 161, "enable_kernel_profil": 161, "profileract": [161, 215, 232], "result_dir": 161, "prof_trac": 161, "my_schedul": 161, "skip_first": [161, 232], "trace_handl": 161, "self_cpu_time_tot": [161, 215, 232], "row_limit": 161, "export_chrome_trac": [161, 184], "step_num": [161, 232], "on_trace_readi": [161, 189, 232], "73": [161, 183, 227, 284], "370": 161, "814m": 161, "362": 161, "89": [161, 183, 232], "161": 161, "276m": 161, "363": 161, "97": [161, 183, 215], "121": [161, 232], "416m": 161, "488": [161, 227], "154m": 161, "194": 161, "clamp_min": [161, 215], "81": [161, 215], "444m": 161, "bmm": [161, 203, 227, 280], "258m": [161, 215], "810": 161, "920m": 161, "447m": 161, "_softmax": 161, "087m": 161, "376": 161, "888m": 161, "77": 161, "430m": 161, "502m": 161, "161m": 161, "850": 161, "377m": 161, "386": [161, 183, 232], "index_select": 161, "000u": [161, 232], "986": 161, "420m": 161, "703": 161, "656": [161, 260], "963": 161, "864m": 161, "_mkl_linear": [161, 279], "231": [161, 227, 232], "573m": [161, 232], "992m": 161, "336": [161, 232], "642m": 161, "graph_0_cpp_fused_constant_pad_nd_embedding_0": 161, "915": 161, "911": 161, "graph_0_cpp_fused__mkl_linear_add_mul_relu_151": 161, "901": 161, "graph_0_cpp_fused__mkl_linear_add_mul_relu_226": 161, "graph_0_cpp_fused__mkl_linear_add_mul_relu_361": 161, "898": 161, "graph_0_cpp_fused__mkl_linear_add_mul_relu_121": 161, "895": 161, "graph_0_cpp_fused__mkl_linear_add_mul_relu_31": 161, "893": 161, "graph_0_cpp_fused__mkl_linear_add_mul_relu_76": 161, "892": [161, 178, 227], "graph_0_cpp_fused__mkl_linear_add_mul_relu_256": 161, "graph_0_cpp_fused__mkl_linear_add_mul_relu_346": 161, "graph_0_cpp_fused__mkl_linear_add_mul_relu_241": 161, "891": 161, "graph_0_cpp_fused__mkl_linear_add_mul_relu_316": 161, "graph_0_cpp_fused__mkl_linear_add_mul_relu_91": 161, "890": 161, "graph_0_cpp_fused__mkl_linear_add_mul_relu_106": 161, "graph_0_cpp_fused__mkl_linear_add_mul_relu_211": 161, "graph_0_cpp_fused__mkl_linear_add_mul_relu_61": 161, "889": 161, "graph_0_cpp_fused__mkl_linear_add_mul_relu_286": 161, "graph_0_cpp_fused_": 161, "63x": 161, "cblas_sgemm_comput": 161, "339m": 161, "94x": 161, "impress": [161, 196], "cpp_fused__mkl_linear_add_mul_relu_151": 161, "clrlgu27q4ggd472umdzwsu6qcpqxcuusjxqvx2hwitjbujiiz7z": 161, "in_out_ptr0": 161, "in_ptr2": 161, "in_ptr3": 161, "arrayref": 161, "ivalu": [161, 176, 216, 289], "omp": [161, 259, 279], "num_thread": [161, 227, 279], "16384l": 161, "512l": 161, "loadu": [161, 279], "tmp5": [161, 279], "tmp7": [161, 279], "tmp4": [161, 279], "tmp6": [161, 279], "tmp8": [161, 279], "bottl": [161, 208], "neck": [161, 208], "arg_0": 161, "arg_1": 161, "arg_2": 161, "arg_3": 161, "arg_4": 161, "add_0": 161, "add_1": 161, "mul_1": 161, "add_2": 161, "16384": [161, 227], "inductor_func": 161, "780875144992024": 161, "9588955780491233": 161, "0286805751604735": 161, "smallest": [161, 177], "solid": [161, 202], "analyt": 161, "hotspot": [161, 223], "phenomenon": 161, "55": [161, 164, 186, 227, 259, 262], "501": [161, 186, 262], "inductor_debug_cpu": [161, 186, 262], "annoi": 162, "jax": [162, 167, 288], "argnum": 162, "millisecond": [162, 176, 242], "get_perf": 162, "rigor": 162, "taller": 162, "hessiani": 162, "overwhelm": 162, "jacobians_hessian": [162, 186, 262], "yuansong": 163, "steven": 163, "guo": 163, "cheatsheet": 163, "companion": 163, "bro": 163, "ne": [163, 185, 232], "emul": [163, 217], "tube": 163, "mushroom": 163, "screen": [163, 180, 223], "next_stat": [163, 180], "240": [163, 183, 232], "pipe": 163, "sky": 163, "grayscaleobserv": 163, "resizeobserv": 163, "skipfram": 163, "framestack": 163, "hi": [163, 280], "movement": 163, "exploration_r": 163, "he": [163, 185, 193], "marionet": 163, "ddqn": 163, "_e": 163, "argmax_": 163, "td_target": 163, "td_t": 163, "td_e": 163, "leftarrow": 163, "nabla": 163, "episod": [163, 180, 181, 183], "mario_rl_tutori": [163, 186, 262], "vitali": 164, "fedyunin": 164, "densest": 164, "4x4": 164, "10x3x16x16": 164, "768": [164, 284], "minor": [164, 183, 190, 216], "ambigu": [164, 276, 277], "n1hw": 164, "contrari": [164, 173, 177], "restrid": 164, "unintend": 164, "apex": 164, "main_amp": 164, "resnet50": [164, 178, 181, 216, 249], "o2": 164, "opt_level": 164, "keep_batchnorm_fp32": 164, "nonetyp": 164, "loss_scal": 164, "7603": 164, "cast_model_typ": 164, "patch_torch_funct": 164, "master_weight": 164, "125": [164, 232], "230": [164, 183, 192], "949": 164, "6735125184": 164, "6735": 164, "prec": 164, "259": 164, "562": 164, "773": 164, "481": 164, "355": 164, "693": 164, "6968704462": 164, "6852": 164, "258": 164, "461": 164, "775": 164, "089": 164, "433": 164, "965": 164, "7877287269": 164, "7194": 164, "51": [164, 183, 215], "833": 164, "771": 164, "710": 164, "487": 164, "8285319805": 164, "7467": 164, "260": [164, 183], "380": 164, "770": 164, "090": 164, "525": 164, "908": 164, "7370464802": 164, "7447": 164, "360": 164, "623": 164, "555": 164, "7592862844": 164, "7472": 164, "917": 164, "345": [164, 199], "774": 164, "746": [164, 227], "9698858261": 164, "9218": 164, "324": 164, "597": 164, "659": 164, "2505953312": 164, "0879": 164, "767": 164, "785": 164, "7579724789": 164, "7580": 164, "198": 164, "482": 164, "135": [164, 178, 227], "414": 164, "716": [164, 215, 227], "7007197738": 164, "7293": 164, "250": [164, 183, 232], "387": 164, "1010": 164, "516": 164, "7113101482": 164, "7233": 164, "667": 164, "197": 164, "340": 164, "1013": 164, "023": 164, "588": 164, "333": 164, "8943189979": 164, "7661": 164, "541": 164, "7113249302": 164, "9551": 164, "1011": 164, "163": 164, "683": 164, "574": 164, "8537774086": 164, "7716": 164, "279": 164, "453": 164, "7595844269": 164, "3413": 164, "429": 164, "269": 164, "827": 164, "743": 164, "883": 164, "8196096420": 164, "4011": 164, "volta": [164, 226, 242], "alexnet": 164, "mnasnet0_5": 164, "mnasnet0_75": 164, "mnasnet1_0": 164, "mnasnet1_3": 164, "mobilenet_v2": [164, 178, 199, 289], "resnet101": 164, "resnet152": 164, "resnet34": 164, "resnext50_32x4d": 164, "shufflenet_v2_x0_5": [164, 178], "shufflenet_v2_x1_0": [164, 178], "shufflenet_v2_x1_5": [164, 178], "shufflenet_v2_x2_0": [164, 178], "squeezenet1_0": 164, "squeezenet1_1": 164, "vgg11": 164, "vgg11_bn": 164, "vgg13": 164, "vgg13_bn": 164, "vgg16": 164, "vgg16_bn": 164, "vgg19_bn": 164, "wide_resnet101_2": 164, "wide_resnet50_2": 164, "ic": 164, "lake": [164, 216], "densenet121": 164, "densenet161": 164, "densenet169": 164, "googlenet": [164, 178], "inception_v3": [164, 178], "resnext101_32x8d": [164, 178], "spite": 164, "nc11": 164, "memory_format_tutori": [164, 186, 262], "year": [167, 171, 200], "j_": 167, "diagon": 167, "beforehand": 167, "asymptot": 167, "i_o": 167, "i_": 167, "e_o": 167, "textrm": 167, "_o": 167, "tensorfloat": 167, "sacrific": 167, "empirical_ntk_ntk_vp": 167, "luck": [167, 170, 197], "altogeth": [167, 277], "neural_tangent_kernel": [167, 186, 262], "french": [168, 185], "seq2seq_translation_tutori": [168, 185, 186, 262], "homepag": [169, 265], "ooz": 170, "_might_": 170, "2p": 170, "ephemer": 170, "timelin": [170, 189, 223], "memory_viz": 170, "devot": 170, "bat": [170, 270], "2gb": [170, 178], "6gb": 170, "foreach": [170, 214], "reveal": [170, 184, 194, 225, 227], "bullet": 170, "sizabl": [170, 173], "tantamount": 170, "eat": 170, "lora": 170, "unlock": [170, 282], "vit_l_16": 170, "neat": 170, "slate": 170, "woohoo": 170, "apart": 170, "shrunk": 170, "0gb": 170, "optimizer_step_in_backward_tutori": [170, 186, 262], "lezcano": 171, "surprisingli": 171, "ill": 171, "frobeniu": 171, "spectral": 171, "lipschitz": 171, "x\u1d40": 171, "upper": [171, 184, 196, 232], "triangular": 171, "reimplement": [171, 177, 196], "skew": [171, 189, 232], "unparametr": 171, "linearsymmetr": 171, "moduledict": [171, 175, 284], "parametrizationlist": [171, 284], "modulelist": 171, "inbuilt": 171, "caylei": 171, "spd": 171, "right_invers": 171, "succinctli": 171, "relax": [171, 256], "remove_parametr": 171, "parametri": 171, "leave_parametr": 171, "privaci": [172, 177], "sample_grad": 172, "compute_loss": 172, "ft_compute_grad": 172, "0th": [172, 177, 184, 280], "25x": [172, 192, 284], "opacu": 172, "per_sample_grad": [172, 186, 262], "cpu_tensor": 173, "cuda_tensor": [173, 242], "erron": 173, "carefulli": [173, 242], "distinguish": [173, 183, 190], "isol": [173, 194], "illus": 173, "anywher": 173, "cudastreamsynchron": 173, "dma": 173, "volterra": 173, "tesla": 173, "h100": [173, 194], "t3_cuda": 173, "belief": [173, 196], "brand": 173, "cudahostalloc": 173, "cudamemcpi": 173, "doubt": 173, "interestingli": 173, "pronounc": 173, "tick": 173, "__whenev": 173, "memory__": 173, "corrupt": 173, "garbag": 173, "reliabl": [173, 227], "annihil": 173, "legitim": 173, "notori": 173, "inher": [173, 196, 197, 209], "blockag": 173, "non_blocking_pin": 173, "ration": 173, "outweigh": [173, 215], "perman": [173, 177], "shuttl": 173, "expedit": 173, "advers": 173, "bu": 173, "monopol": 173, "pinmem_nonblock": [173, 186, 262], "huang": [175, 176, 208, 209, 264], "microbatch": 175, "micro": 175, "educ": [175, 200], "dataclass": 175, "modelarg": 175, "n_head": 175, "witout": 175, "layernorm": [175, 200, 284], "splitpoint": 175, "pipelinestag": 175, "schedulegpip": 175, "pp_group": 175, "stage_index": 175, "num_stag": 175, "init_distribut": 175, "peer": [175, 260], "manual_model_split": 175, "tracer": 175, "split_spec": 175, "4th": [175, 203], "mirror": 175, "build_stag": 175, "gpipe": 175, "1f1b": 175, "interleaved1f1b": 175, "loopedbf": 175, "num_microbatch": 175, "example_input_microbatch": 175, "tracer_model_split": 175, "tokenwise_loss_fn": 175, "n_microbatch": 175, "pipelining_tutori": 175, "tian": 176, "si": 176, "zeroredundancyoptim": [176, 261], "processgroupnccl": 176, "processgroupgloo": 176, "processgroupmpi": 176, "ucc": 176, "oneccl": [176, 242], "trainum": 176, "emerg": 176, "backenddummi": 176, "chrono": 176, "outputtensor": [176, 289], "inputtensor": [176, 289], "allgatheropt": 176, "allreduceopt": 176, "workdummi": 176, "optyp": 176, "recvanysourc": 176, "future_": 176, "iscomplet": 176, "issuccess": 176, "kunsettimeout": 176, "getfutur": 176, "outputtensorvec": 176, "make_intrus": 176, "listtyp": 176, "tensortyp": 176, "markcomplet": 176, "createbackenddummi": 176, "backenddummyconstructor": 176, "__attribute__": 176, "register_backend": 176, "cpp_function": [176, 227], "libraries_dir": 176, "abspath": 176, "dummy_collect": 176, "michela": 177, "paganini": 177, "biolog": 177, "batteri": 177, "subnetwork": 177, "lotteri": 177, "ticket": 177, "destruct": [177, 259], "0a0": [177, 289], "8e8a5e0": 177, "lecun": 177, "1998": 177, "nelement": 177, "unprun": 177, "0829": 177, "0190": 177, "1972": 177, "1241": 177, "1719": 177, "1778": 177, "1340": 177, "1231": 177, "1555": 177, "1990": 177, "0606": 177, "0952": 177, "1305": 177, "0230": 177, "0836": 177, "1100": [177, 227, 241], "0379": 177, "0861": 177, "1249": 177, "0542": 177, "0318": 177, "0600": 177, "1381": 177, "0267": 177, "0732": 177, "0995": 177, "1767": 177, "1728": 177, "1027": 177, "1213": 177, "1968": 177, "0815": 177, "1092": 177, "1416": 177, "1924": 177, "1522": 177, "0097": 177, "0558": 177, "0077": 177, "1900": 177, "1202": 177, "0897": 177, "1356": 177, "0117": 177, "0585": 177, "0582": 177, "1370": 177, "0711": 177, "0747": 177, "1061": 177, "1602": 177, "0929": 177, "1633": 177, "1658": 177, "1253": 177, "1198": 177, "1265": 177, "1882": 177, "1960": 177, "1217": 177, "1590": 177, "1388": 177, "0679": 177, "1558": 177, "0328": 177, "0772": 177, "1415": 177, "1963": 177, "1966": 177, "0776": 177, "1029": 177, "1429": 177, "0917": 177, "0978": 177, "0524": 177, "1296": [177, 227], "0146": 177, "0365": 177, "0541": 177, "0105": 177, "0768": 177, "1836": 177, "0469": 177, "0659": 177, "1182": 177, "1287": 177, "0305": 177, "1819": 177, "1776": 177, "1794": 177, "1864": 177, "1830": 177, "0226": 177, "0899": 177, "0334": 177, "1531": 177, "0957": 177, "0925": 177, "0895": 177, "0513": 177, "1935": 177, "0950": 177, "0988": 177, "0700": 177, "0924": 177, "1358": 177, "0358": 177, "1721": 177, "0954": 177, "0653": 177, "0981": 177, "0096": 177, "1702": 177, "0059": 177, "1919": 177, "1535": 177, "0756": 177, "0167": 177, "0228": 177, "0922": 177, "1872": 177, "1653": 177, "1127": 177, "1773": 177, "1422": 177, "0628": 177, "1875": 177, "0963": 177, "0481": 177, "1330": 177, "0222": 177, "0826": 177, "0933": 177, "0761": [177, 284], "0285": 177, "1162": 177, "named_buff": 177, "basepruningmethod": 177, "adequ": [177, 179], "random_unstructur": 177, "weight_orig": 177, "_orig": 177, "intact": [177, 181, 239], "weight_mask": 177, "_mask": 177, "mulbackward0": 177, "forward_pre_hook": 177, "_forward_pre_hook": 177, "randomunstructur": 177, "0x7fc3f52c7be0": 177, "l1_unstructur": 177, "bias_orig": 177, "bias_mask": 177, "l1unstructur": 177, "0x7fc3f52c73d0": 177, "pruningcontain": 177, "compute_mask": 177, "ln_structur": 177, "_tensor_nam": 177, "lnstructur": 177, "0x7fc3f4712260": 177, "odict_kei": 177, "undo": 177, "reassign": 177, "new_model": 177, "named_modul": [177, 284], "dict_kei": 177, "global_unstructur": 177, "parameters_to_prun": 177, "pruning_method": 177, "apply_mask": 177, "unstructur": 177, "preprun": 177, "pruning_typ": 177, "foobarpruningmethod": 177, "default_mask": 177, "foobar_unstructur": 177, "503": [177, 186, 262], "pruning_tutori": [177, 186, 262], "sink": 178, "5v": 178, "sd": 178, "card": [178, 184], "8gb": 178, "arm": [178, 215], "64bit": 178, "aarch64": 178, "arm64": [178, 289], "raspberrypi": 178, "raspios_arm64": 178, "rpi": 178, "sdcard": 178, "start_x": 178, "128m": 178, "gpu_mem": 178, "commment": 178, "camera_auto_detect": 178, "v4l2": 178, "reboot": 178, "video4linux2": 178, "video0": 178, "picamera": 178, "36fp": 178, "30fp": 178, "framer": 178, "cv2": 178, "cap": [178, 179, 189], "videocaptur": 178, "cap_prop_frame_width": 178, "cap_prop_frame_height": 178, "cap_prop_fp": 178, "bgr": 178, "ret": [178, 181], "input_tensor": 178, "input_batch": 178, "qnnpack": [178, 263], "mobilenet_v3_larg": 178, "109": 178, "233": [178, 183], "885": [178, 215], "204": [178, 215, 227], "195": [178, 183], "132": 178, "82": [178, 215, 232], "prequant": 178, "20fp": 178, "cap_v4l2": 178, "last_log": 178, "frame_count": 178, "ui": [178, 189, 223, 240, 261], "htop": 178, "mug": 178, "allevi": [178, 201], "set_num_thread": 178, "repetit": [179, 227], "maximis": 179, "clipppoloss": 179, "theta_k": 179, "pi_": 179, "lingua": 179, "franca": 179, "sub_batch_s": 179, "deepmind": [179, 187], "interchang": 179, "panel": [179, 189], "transmit": 179, "gymwrapp": 179, "loos": 179, "supplementari": 179, "stringent": 179, "n_step": [179, 181, 183], "mu_": 179, "d_ob": 179, "d_action": 179, "mu": [179, 192], "normalparamextractor": 179, "probabilisticactor": 179, "tanhnorm": 179, "discount": [179, 180, 181], "amort": [179, 181], "datacollector": 179, "multisyncdatacollector": 179, "refil": 179, "replaybuff": 179, "gae": 179, "value_target": 179, "videorecord": 179, "reinforcement_ppo": [179, 186, 262], "tower": 180, "cart": 180, "pole": 180, "upright": 180, "fork": [180, 259], "classic_control": 180, "42": [180, 183, 227], "action_spac": 180, "observation_spac": 180, "decorrel": 180, "replaymemori": 180, "cyclic": 180, "formul": 180, "r_": 180, "t_0": 180, "r_t": 180, "uncertain": 180, "tempor": 180, "max_a": 180, "univers": [180, 192], "obei": 180, "bellman": 180, "huber": 180, "noisi": [180, 227, 241], "mathcal": 180, "le": [180, 185], "mathrm": 180, "select_act": [180, 181, 183], "eps_start": 180, "eps_end": 180, "eps_decai": 180, "plot_dur": 180, "underneath": [180, 196], "tau": 180, "optimize_model": 180, "s_t": 180, "a_t": 180, "num_episod": [180, 181], "target_net": 180, "reinforcement_q_learn": [180, 186, 262], "calle": [181, 182, 207], "unblock": 181, "idl": [181, 189, 232], "callback": 181, "paus": 181, "update_and_fetch_model": 181, "future_model": 181, "batch_update_s": 181, "batchupdateparameterserv": 181, "curr_update_s": 181, "ps_rref": 181, "local_valu": [181, 182], "fut": [181, 183], "setti": 181, "set_result": 181, "rpc_sync": [181, 182, 183, 207], "image_w": 181, "image_h": 181, "one_hot_indic": 181, "random_": 181, "get_worker_info": [181, 183], "543": 181, "affine1": [181, 183], "affine2": [181, 183], "action_scor": [181, 183], "govern": 181, "select_action_batch": 181, "shortli": 181, "run_episod": [181, 183], "agent_rref": [181, 183], "ep_reward": [181, 183], "num_step": 181, "start_step": 181, "from_numpi": [181, 183], "curr_reward": 181, "prob": [181, 183, 190], "saved_log_prob": [181, 183], "rob": 181, "ob_rref": [181, 183], "running_reward": [181, 183], "ob_rank": [181, 183], "ob_info": [181, 183], "observer_nam": [181, 183], "future_act": 181, "pending_st": 181, "select_acion": 181, "ob_id": [181, 183], "log_prob": [181, 183], "stitch": [181, 182], "async": [181, 183, 197, 208, 242], "oberv": [181, 183], "wait_al": 181, "policy_loss": [181, 183], "passiv": [181, 183], "run_work": [181, 182, 183, 207], "n_episod": 181, "print_log": 181, "init_rpc": [181, 182, 183, 207], "agent_nam": [181, 183], "i_episod": [181, 183], "last_reward": [181, 183], "tlast": [181, 183], "taverag": [181, 183], "shutdown": [181, 182, 183, 207], "tik": [181, 207], "tok": [181, 207], "dist_autograd": [182, 183], "num_gpu": 182, "dropout2d": 182, "next_devic": 182, "caller": [182, 207], "call_method": 182, "remote_method": 182, "foo_inst": 182, "parameterserv": 182, "input_devic": 182, "intention": [182, 183, 207], "miscellan": 182, "get_dist_gradi": 182, "get_gradi": 182, "get_param_rref": 182, "cid": 182, "cpu_grad": 182, "k_cpu": 182, "v_cpu": 182, "paramt": 182, "param_rref": [182, 183], "run_parameter_serv": 182, "param_serv": 182, "global_lock": 182, "get_parameter_serv": 182, "parameter_serv": 182, "shut": 182, "offlin": 182, "trainernet": 182, "param_server_rref": 182, "get_global_param_rref": 182, "paramat": 182, "remote_param": [182, 183], "model_output": 182, "run_training_loop": 182, "nueral": 182, "context_id": [182, 183], "get_accuraci": 182, "correct_sum": 182, "trainer_": 182, "traffic": 182, "listen": 182, "subprocess": [182, 227, 242], "rpc_parameter_serv": 182, "solver": 183, "formatter_class": 183, "argumentdefaultshelpformatt": 183, "log_interv": 183, "report_reward": 183, "_max_episode_step": 183, "lifetim": 183, "finfo": 183, "reward_threshold": 183, "finish_episod": 183, "min_reward": 183, "surpass": 183, "ob": 183, "ctrl": 183, "475": 183, "111": [183, 227, 259], "130": [183, 215], "137": 183, "140": 183, "104": 183, "170": [183, 199], "126": 183, "180": [183, 196, 215, 227], "213": 183, "322": [183, 215], "165": 183, "272": [183, 215], "210": 183, "168": [183, 259], "184": 183, "208": [183, 192, 225], "270": [183, 192], "405": 183, "280": 183, "290": 183, "464": 183, "3163778435275": 183, "embeddingt": 183, "destin": [183, 207], "rnnmodel": 183, "ntoken": 183, "ninp": 183, "nhid": 183, "nlayer": 183, "emb_table_rref": 183, "decoder_rref": 183, "_remote_method": 183, "rremot": 183, "_parameter_rref": 183, "parameter_rref": [183, 207], "run_train": 183, "nindic": 183, "driss": 184, "guessou": 184, "multiheadattent": 184, "flashattent": 184, "flash": [184, 268], "andrej": 184, "karpathi": 184, "nanogpt": 184, "causalselfattent": 184, "mine": 184, "166": 184, "616": 184, "726": 184, "amaz": 184, "prof": [184, 215, 232], "compiled_causal_attention_trac": 184, "concentr": 184, "6090": 184, "49m": 184, "3273": 184, "17m": 184, "commit": [184, 203, 290], "ae3a8d5": 184, "causal_upper_left": 184, "causal_lower_right": 184, "is_caus": [184, 200, 264], "causalbia": 184, "corner": 184, "attn_scor": 184, "sdpa_kernel": [184, 264], "scaled_dot_product_attention_tutori": [184, 186, 262], "il": 185, "est": [185, 189], "peindr": 185, "tableau": 185, "paint": 185, "pourquoi": 185, "pa": 185, "essay": 185, "vin": 185, "delicieux": 185, "delici": 185, "wine": 185, "poet": 185, "romancier": 185, "she": 185, "novelist": 185, "vou": 185, "trop": 185, "maigr": 185, "skinni": 185, "condens": [185, 241], "unfold": 185, "tatoeba": 185, "eng": 185, "manyth": 185, "anki": 185, "fra": 185, "froid": 185, "dozen": 185, "trim": [185, 241], "lang": 185, "word2index": 185, "index2word": 185, "word2count": 185, "apostroph": 185, "je": 185, "sui": 185, "noir": 185, "attn_appli": 185, "exhibit": 185, "coher": 185, "grammar": 185, "wander": 185, "freedom": 185, "plot_loss": 185, "judgement": 185, "matshow": 185, "iot": 185, "word2vec": 185, "glove": 185, "autoencod": 185, "067": 186, "torch_compile_tutori": [186, 194, 262], "torch_export_tutori": [186, 195, 196, 262], "sdpa": [186, 200, 262, 264], "transformer_building_block": [186, 200, 262], "spatial_transformer_tutori": [186, 187, 262], "na": [186, 262], "visualizing_gradients_tutori": [186, 201, 262], "sphx_glr_intermediate_mnist_train_na": [186, 262], "tensorboard_profiler_tutori": [186, 189, 262], "torch_compile_conv_bn_fus": [186, 193, 262], "torchrec_intro_tutori": [186, 197, 262], "ghassen": 187, "hamrouni": 187, "geometr": 187, "invari": [187, 276], "boil": 187, "affine_grid": 187, "grid_sampl": 187, "speech_recognition_pipeline_tutori": 188, "perfetto": 189, "tensorboard_trace_handl": 189, "record_shap": [189, 232], "profile_memori": [189, 232], "dealloc": [189, 242], "torch_tb_profil": 189, "safari": 189, "pytorch_profil": 189, "dropdown": 189, "callstack": 189, "sm": 189, "multiprocessor": 189, "occup": 189, "tooltip": 189, "toolbar": 189, "keyboard": 189, "mous": 189, "resnet18_4work": 189, "76m": 189, "132m": 189, "azur": 189, "torchtbprofil": 189, "memory_demo_1_10": 189, "gpu0": 189, "children": [189, 232], "distributed_bert": 189, "docker": 189, "profiler_tutori": 189, "test_cifar10": 189, "vi": 189, "hub": [189, 217], "kfd": 189, "sys_ptrac": 189, "seccomp": 189, "unconfin": 189, "shm": [189, 207], "8g": 189, "apt": [189, 192, 259], "libjpeg": 189, "whl": [189, 194, 197, 268], "rocm5": 189, "scp": 189, "testset": 190, "testload": 190, "plot_classes_pr": 190, "four_fashion_mnist_imag": 190, "refresh": [190, 197], "datapoint": 190, "thoroughli": 190, "images_to_prob": 190, "preds_tensor": 190, "el": 190, "fig": 190, "arang": [190, 277], "xtick": 190, "ytick": 190, "set_titl": 190, "1f": [190, 227], "add_figur": 190, "global_step": [190, 240], "scroll": 190, "test_siz": 190, "class_prob": 190, "class_probs_batch": 190, "test_prob": 190, "test_label": 190, "add_pr_curve_tensorboard": 190, "class_index": 190, "tensorboard_truth": 190, "tensorboard_prob": 190, "add_pr_curv": 190, "poke": 190, "tacotron2_pipeline_tutori": 191, "wsi": 192, "tissu": 192, "surgeri": 192, "biopsi": 192, "scanner": 192, "pathologist": 192, "diseas": 192, "cancer": 192, "microscop": 192, "tumor": 192, "growth": [192, 278], "treatment": [192, 277, 278], "patient": 192, "000x100": 192, "25x0": 192, "micron": 192, "pyramid": 192, "magnif": 192, "sketch": 192, "histoencod": 192, "jopo666": 192, "openjpeg": 192, "openslid": 192, "pixman": 192, "qq": 192, "libopenjp2": 192, "libpixman": 192, "echo": 192, "brew": 192, "__future__": [192, 231, 239], "hashandl": 192, "nopython": 192, "shutil": 192, "zipfil": 192, "mpl": 192, "cm": 192, "sklearn": 192, "accuracy_scor": 192, "confusion_matrix": 192, "patch_predictor": 192, "iopatchpredictorconfig": 192, "misc": 192, "download_data": 192, "grab_files_from_dir": 192, "overlay_prediction_mask": 192, "wsicor": 192, "wsiread": 192, "rcparam": 192, "dpi": 192, "facecolor": 192, "on_gpu": 192, "suppress": 192, "overli": 192, "suppress_console_output": 192, "redirect_stderr": 192, "stringio": 192, "abnorm": [192, 223], "global_save_dir": 192, "rmdir": 192, "dir_path": 192, "is_dir": 192, "rmtree": 192, "kather": 192, "100k": 192, "wsi_path": 192, "sample_wsi": 192, "sv": 192, "patches_path": 192, "kather100k": 192, "weights_path": 192, "dc": 192, "warwick": 192, "uk": 192, "tcga": 192, "3l": 192, "aa1b": 192, "01z": 192, "dx1": 192, "8923a151": 192, "a690": 192, "40b7": 192, "9e5a": 192, "fcbedfc2394f": 192, "extractal": 192, "pc": 192, "label_list": 192, "patch_list": 192, "dataset_path": 192, "image_ext": 192, "tif": 192, "label_dict": 192, "glass": 192, "mucosa": 192, "deb": 192, "debri": 192, "tum": 192, "colorect": 192, "adenocarcinoma": 192, "epithelium": 192, "adi": 192, "adipos": 192, "muc": 192, "mucu": 192, "stroma": 192, "lym": 192, "lymphocyt": 192, "dataset_class_path": 192, "patch_list_single_class": 192, "file_typ": 192, "xlabel": 192, "ylabel": 192, "211": [192, 215, 232], "176": 192, "178": 192, "209": 192, "232": [192, 227], "abc": 192, "modelabc": 192, "tia": 192, "toolbox": 192, "readthedoc": 192, "_autosummari": 192, "models_abc": 192, "preproc_func": 192, "predictor": [192, 256], "pretrained_weight": 192, "cnnmodel": 192, "fromarrai": 192, "conf": 192, "df_cm": 192, "993000": 192, "000000": 192, "00000": 192, "988636": 192, "011364": 192, "991304": 192, "008696": 192, "996503": 192, "003497": 192, "004808": 192, "990385": 192, "988764": 192, "011236": 192, "996296": 192, "003704": 192, "004785": 192, "985646": 192, "004310": 192, "99569": 192, "input_resolut": 192, "patch_input_shap": 192, "stride_shap": 192, "wsi_ioconfig": 192, "mpp": 192, "return_prob": 192, "ioconfig": 192, "greatest": [192, 226], "unnecessari": [192, 196, 200, 207, 245, 259], "merge_predict": 192, "wsi_output": 192, "wsi_predict": 192, "overlai": 192, "overlay_patch_predict": 192, "overview_resolut": 192, "overview_unit": 192, "wsi_overview": 192, "slide_thumbnail": 192, "label_color_dict": 192, "get_cmap": 192, "set1": 192, "pred_map": 192, "label_info": 192, "return_ax": 192, "histologi": 192, "pohjonen": 192, "joona": 192, "helsinki": 192, "umap": 192, "semantic_segmentor": 192, "deepfeatureextractor": 192, "iosegmentorconfig": 192, "histoencwrapp": 192, "histoenc": 192, "feat_extract": 192, "extract_featur": 192, "num_block": 192, "avg_pool": 192, "infer_batch": 192, "batch_data": 192, "img_patches_devic": 192, "inference_mod": [192, 284], "create_encod": 192, "prostate_medium": 192, "662": 192, "446": 192, "605": 192, "169": [192, 215], "155": 192, "output_resolut": 192, "patch_output_shap": 192, "auto_generate_mask": 192, "otsu": 192, "num_loader_work": 192, "num_postproc_work": 192, "wsi_featur": 192, "umap_reduc": 192, "n_neighbor": 192, "n_compon": 192, "manhattan": 192, "random_st": 192, "fit_transform": 192, "npy": 192, "feat": 192, "5mpp": 192, "4mpp": 192, "histolog": 192, "horac": 193, "clariti": 193, "batch_norm": [193, 232], "conv_bn_pattern": 193, "conv_bn_replac": 193, "conv_weight": 193, "out_channel": 193, "in_channel": 193, "kernel_h": 193, "kernel_w": 193, "conv_bia": 193, "bn_mean": 193, "bn_var": 193, "bn_weight": 193, "bn_bia": 193, "num_featur": 193, "simplif": 193, "example_input": [193, 217, 263, 282], "conclus": 193, "william": [194, 196, 254], "devel": 194, "elsewher": 194, "torchinductor": [194, 242, 250, 269, 270, 279], "torchtriton": 194, "cu117": 194, "opt_mod": 194, "complex_funct": 194, "complex_conjug": 194, "outer_funct": 194, "_orig_": 194, "dashboard": [194, 240], "struggl": 194, "fn1": 194, "fn2": 194, "f2": 194, "disallow": 194, "zhengxu": 196, "angela": [196, 255], "pian": 196, "pawakapan": 196, "synonym": 196, "dynamic_shap": [196, 256], "graph_signatur": 196, "range_constraint": 196, "stronger": [196, 256], "safeti": [196, 256], "cond": 196, "predic": 196, "true_fn": 196, "false_fn": 196, "while_loop": 196, "associative_scan": 196, "adher": [196, 286], "x0": [196, 199, 279], "s0": 196, "s1": 196, "x3": 196, "s3": 196, "s5": 196, "proof": 196, "_log": [196, 257], "set_log": 196, "spit": 196, "create_symbol": 196, "int_oo": 196, "2841": 196, "runtime_assert": 196, "ncreate_symbol": 196, "nruntime_assert": 196, "dynamic_shapes_tutori": 196, "_subclass": [196, 256], "fake_impl": 196, "845": 196, "infer_s": [196, 241], "torchdynamo_extended_debug_guard_ad": 196, "_meta_registr": 196, "2127": 196, "meta_mm": 196, "marker": 196, "aliv": 196, "attract": 196, "friction": 196, "believ": [196, 276], "stanc": [196, 254], "constraintviol": 196, "unrel": [196, 254], "univari": 196, "diverg": [196, 227, 275, 277], "tolist": [196, 284], "unbind": 196, "unback": 196, "nomenclatur": 196, "absenc": [196, 210, 225], "u0": 196, "unhint": 196, "is_compil": 196, "invas": 196, "smart": 196, "bypass": [196, 279], "offend": 196, "smarter": 196, "prevail": 196, "prohibit": 196, "_check_is_s": 196, "guard_size_oblivi": 196, "starter": 196, "guardondatadependentsymnod": 196, "_schema": 196, "is_mut": 196, "export_for_train": 196, "run_decomposit": 196, "mutabl": 196, "conv1d": [196, 203, 242], "cond_pred": 196, "tensorrt": [196, 263], "pt2_path": 196, "aoti_compile_and_packag": [196, 255], "compiler_aot_inductor": 196, "aoti_compil": 196, "aoti_load_packag": [196, 255], "cu121": [197, 268], "fbgemm_gpu": 197, "torchmetr": 197, "cardin": 197, "relationship": 197, "hash": 197, "conjunct": [197, 242, 266, 267], "ctr": 197, "dlrm": [197, 242], "embedding_collect": 197, "embedding_bag_collect": 197, "vast": [197, 278], "collis": [197, 241], "80g": 197, "embeddingcollect": 197, "jaggedtensor": 197, "keyedjaggedtensor": 197, "keyedtensor": 197, "product_t": 197, "user_t": 197, "id_list_featur": 197, "id_score_list_featur": 197, "id_list_feature_offset": 197, "q1": 197, "product_jt": 197, "user_jt": 197, "q2": 197, "reread": 197, "to_dict": 197, "congrat": 197, "pat": 197, "grasp": [197, 202], "scarc": [197, 208], "hbm": 197, "gb": [197, 200], "shardedembeddingbagcollect": 197, "incredibli": 197, "ton": 197, "everytim": 197, "await": 197, "input_dist": 197, "tbe": 197, "output_dist": 197, "twpooledembeddingshard": 197, "kjt": 197, "canon": 197, "dmp": 197, "hyperoptim": 197, "combinedoptim": 197, "keyedoptim": 197, "in_backward_optimizer_filt": 197, "fused_optim": 197, "fused_param": 197, "apply_optimizer_in_backward": 197, "criteo": 197, "1tb": 197, "penn": 199, "fudan": 199, "databas": [199, 250, 251], "pedestrian": 199, "keypoint": 199, "tv_tensor": 199, "boundingbox": 199, "y0": 199, "image_id": 199, "iscrowd": 199, "pycocotool": 199, "gautamchitni": 199, "git": [199, 268], "cocoapi": 199, "cocodataset": 199, "pythonapi": 199, "get_height_and_width": 199, "ci": 199, "upenn": 199, "edu": 199, "jshi": 199, "ped_html": 199, "pennfudanp": 199, "pedmask": 199, "fudanped00001_mask": 199, "fudanped00002_mask": 199, "fudanped00003_mask": 199, "fudanped00004_mask": 199, "pngimag": 199, "fudanped00001": 199, "fudanped00002": 199, "fudanped00003": 199, "fudanped00004": 199, "tvtensor": 199, "zoo": 199, "fasterrcnn": 199, "rpn": 199, "anchor": 199, "featmap_nam": 199, "rcnn": 199, "train2017": 199, "mikayla": [200, 231, 239], "gawarecki": [200, 231, 239], "jag": [200, 280], "famili": [200, 215, 259], "xformer": 200, "torchtun": 200, "rag": [200, 280], "ux": [200, 280, 282], "key_padding_mask": 200, "qk": 200, "premis": 200, "rmsnorm": 200, "sinusoid": 200, "rotari": [200, 264], "alibi": 200, "threefold": 200, "query_padding_mask": 200, "mha": [200, 276], "nestedtensor": [200, 262, 280, 285, 290], "cleanli": [200, 205, 206, 214, 252, 257], "zipf": [200, 280], "pariti": 200, "attn_mask": 200, "padded_tim": 200, "03454": 200, "padded_peak_memori": 200, "nested_tim": 200, "00612": 200, "nested_peak_memori": 200, "padded_bw_tim": 200, "09337": 200, "padded_bw_peak_mem": 200, "nested_bw_tim": 200, "01452": 200, "nested_bw_peak_mem": 200, "144": [200, 215, 262, 277, 285], "out_proj": 200, "000244140625": 200, "packed_proj": 200, "001556396484375": 200, "001953125": 200, "causal": 200, "breviti": [200, 239, 275], "trust": 200, "ragged": 200, "alibi_mod": 200, "block_mask": 200, "create_nested_block_mask": 200, "e_q": 200, "e_tot": 200, "05x": 200, "swish": 200, "08x": [200, 215], "kv": [200, 264], "lucidrain": 200, "navit": 200, "visiontransform": 200, "norm_lay": 201, "batchnorm1d": 201, "register_full_backward_hook": 201, "grads_bn": 201, "grads_nobn": 201, "qualit": 201, "num_lay": [201, 226], "hook_forward": 201, "covari": 201, "newcom": 202, "deep_learning_60min_blitz": 202, "tmul": 203, "gen": 203, "processor": [203, 216, 242, 259, 261], "10x": [203, 268], "avx": [203, 216], "vnni": [203, 216], "024": 203, "bf16": [203, 215, 268, 279], "onednn": [203, 215, 216, 223, 279], "memory_format": [203, 216, 289], "channels_last": [203, 216], "conv3d": [203, 242], "conv_transpose1d": 203, "conv_transpose2d": 203, "conv_transpose3d": 203, "baddbmm": 203, "addbmm": 203, "onednn_verbos": 203, "mkldnn": [203, 215, 279], "verbose_on": 203, "6dbeffbae1f23cbbeae17adb7b5b13f1f37c080": 203, "openmp": [203, 223], "nthr": 203, "isa": 203, "prim_templ": 203, "prop_kind": 203, "memory_descriptor": 203, "auxiliari": [203, 270], "problem_desc": 203, "exec_tim": 203, "exec": 203, "reorder": [203, 215, 223, 242], "undef": 203, "src_f32": 203, "f0": 203, "dst_f32": 203, "scratchpad": 203, "2561": 203, "avx512_core_amx_bf16": 203, "forward_train": 203, "src_bf16": 203, "acdb": 203, "wei_bf16": 203, "abcd16b16a2b": 203, "bia_f32": 203, "dst_bf16": 203, "alg": 203, "convolution_direct": 203, "mb7_ic2oc1_ih224oh111kh3sh2dh1ph1_iw224ow111kw3sw2dw1pw1": 203, "628906": 203, "brg": 203, "avx512_core_amx_int8": 203, "src_s8": 203, "wei_s8": 203, "ba16a64b4a": 203, "dst_s8": 203, "1x30522": 203, "30522x768": 203, "1x768": 203, "66382": 203, "lazo": [205, 206, 214, 252, 257], "get_device_cap": 205, "benchmark_torch_function_in_microsecond": 205, "stmt": [205, 227, 284], "blocked_autorang": [205, 227, 284], "eager_runtim": 205, "compiled_runtim": 205, "747": 205, "2437149845064u": 205, "392": 205, "07384741178u": 205, "linearlr": 206, "compiling_optimizer_lr_schedul": [206, 248, 262], "set_device_map": 207, "worker0": 207, "worker1": 207, "payload": [207, 239], "infiniband": 207, "cma": 207, "comm_mod": [207, 210], "pend": [207, 240], "current_stream": 207, "tensorpiperpcbackendopt": 207, "num_worker_thread": 207, "rpc_backend_opt": 207, "34x": 207, "3145179748535156": 207, "06867480278015137": 207, "luca": [208, 209], "pasqualin": [208, 209], "iri": [208, 209, 211], "rodrigo": [208, 209], "kumpera": [208, 209], "chien": [208, 209, 264], "chin": [208, 209, 264], "async_sav": 208, "checkpoint_size_per_rank": 208, "number_of_rank": 208, "pageabl": 208, "get_state_dict": [208, 209], "set_state_dict": [208, 209], "appstat": [208, 209], "protocol": [208, 209], "load_stat_dict": [208, 209], "fqn": [208, 209, 284], "sharded_state_dict": [208, 209], "optim_state_dict": [208, 209], "run_fsdp_checkpoint_save_exampl": [208, 209], "checkpoint_futur": 208, "checkpoint_id": [208, 209], "_step": 208, "attack": 208, "filesystemwrit": 208, "storagewrit": 208, "cached_state_dict": 208, "cache_staged_state_dict": 208, "storage_writ": 208, "adddition": 209, "run_fsdp_checkpoint_load_exampl": 209, "run_checkpoint_load_exampl": 209, "format_util": 209, "torch_to_dcp": 209, "dcp_to_torch": 209, "dcp_to_torch_sav": 209, "torch_save_to_dcp": 209, "torch_save_checkpoint_dir": 209, "torch_save_checkpoint": 209, "_new": 209, "anshul": 210, "sinha": 210, "distributedtensor": 210, "interoper": 210, "mlpmodul": 210, "generate_comm_debug_tracing_t": 210, "noise_level": 210, "log_comm_debug_tracing_table_to_fil": 210, "file_nam": [210, 256], "transformer_operation_log": 210, "generate_json_dump": 210, "c10d_function": 210, "comm_mode_features_exampl": 210, "effortlessli": 211, "homogen": 211, "num_node_devic": 211, "shard_rank_list": 211, "shard_group": 211, "current_shard_group": 211, "current_replicate_group": 211, "shard_factor": 211, "replicate_group_rank": 211, "replicate_group": 211, "2d_setup": 211, "mesh_dim_nam": [211, 264], "thru": 211, "get_group": 211, "mesh_dim": 211, "2d_setup_with_device_mesh": 211, "meshshap": 211, "dp_replic": 211, "dp_shard": 211, "mesh_3d": 211, "hsdp_mesh": 211, "tp_group": 211, "_foreach": 214, "horizton": 214, "sunita": 215, "nadamp": 215, "graviton3": 215, "sve": 215, "simd": 215, "graviton2": 215, "bla": 215, "acl": 215, "c7g": 215, "bfloa16": 215, "r7g": 215, "m7g": 215, "4vcpu": 215, "myneuralnetwork": 215, "linear_relu_stack": 215, "11008": 215, "pred_probab": 215, "set_grad_en": 215, "mymodel_infer": 215, "813": 215, "255m": 215, "177": 215, "032m": 215, "160u": 215, "162": [215, 227], "054m": 215, "540": 215, "180u": 215, "738m": 215, "201": 215, "955m": 215, "985": 215, "282m": 215, "421m": 215, "043m": 215, "810u": 215, "356m": 215, "179": 215, "388m": 215, "896": 215, "940u": 215, "mmla": 215, "torchbench": 215, "dnnl_default_fpmath_mod": 215, "943": 215, "052": 215, "507m": 215, "167": [215, 259], "653m": 215, "838": 215, "265u": 215, "107": 215, "593m": 215, "358": 215, "643u": 215, "43": [215, 227], "167m": 215, "262": 215, "911m": 215, "060": 215, "533m": 215, "414m": 215, "892m": 215, "307u": 215, "281m": 215, "934m": 215, "849": [215, 227], "670u": 215, "fastmath": 215, "821": 215, "914": 215, "713m": 215, "244m": 215, "711": 215, "220u": 215, "322m": 215, "307": 215, "740u": 215, "094": 215, "495m": 215, "921": 215, "736m": 215, "131m": 215, "441m": 215, "803u": 215, "942m": 215, "186m": 215, "720": 215, "930u": 215, "848": 215, "148m": 215, "141": [215, 227], "309m": 215, "706": 215, "545u": 215, "916m": 215, "720u": 215, "431m": 215, "471m": 215, "951": 215, "170m": 215, "027m": 215, "243m": 215, "143u": 215, "928m": 215, "143": [215, 259], "237m": 215, "185u": 215, "47x": 215, "noteworthi": 215, "till": 215, "torch_mkldnn_matmul_min_dim": 215, "958": 215, "612m": 215, "124m": 215, "620u": 215, "951m": 215, "170u": 215, "423m": 215, "034": 215, "691m": 215, "988": 215, "628m": 215, "520m": 215, "945m": 215, "817u": 215, "382m": 215, "136": 215, "910u": 215, "781": 215, "604m": 215, "295": 215, "437m": 215, "477m": 215, "516m": 215, "558": 215, "387u": 215, "708m": 215, "499m": 215, "788": 215, "627m": 215, "982m": 215, "385m": 215, "617u": 215, "932m": 215, "297": 215, "369m": 215, "487m": 215, "038m": 215, "060m": 215, "300u": 215, "013m": 215, "106": 215, "710u": 215, "521m": 215, "750m": 215, "216": 215, "475m": 215, "033m": 215, "110u": 215, "285m": 215, "345m": 215, "186": [215, 268], "725u": 215, "margin": 215, "thp_mem_alloc_en": 215, "321": 215, "069m": 215, "568m": 215, "613m": 215, "602m": 215, "682": 215, "007u": 215, "777m": 215, "697": 215, "082m": 215, "329": 215, "097m": 215, "547m": 215, "325": 215, "115m": 215, "626m": 215, "avx512": 216, "amx": 216, "xmx": 216, "claus": [216, 260], "nhwc": 216, "cooper": 216, "roialign": 216, "imper": 216, "intel_extension_for_pytorch": [216, 249], "ipex": [216, 249, 261], "bertmodel": 216, "cache_en": 216, "argc": 216, "cerr": 216, "intel_ext_pt_cpu": 216, "libpytorch_path": 216, "ldd": 216, "libintel": 216, "ext": 216, "0x00007f3cf98e0000": 216, "libc10": 216, "0x00007f3cf985a000": 216, "0x00007f3cf70fc000": 216, "libtorch_cpu": [216, 241], "0x00007f3ce16ac000": 216, "mitig": [217, 242], "autotun": [217, 242, 250, 251, 253, 268, 290], "mx": [217, 277], "hpu": [217, 283], "inc_target_devic": 217, "gaudi": [217, 283], "neural_compressor": 217, "fp8config": 217, "fp8_config": 217, "e4m3": 217, "calibration_data": 217, "input_data": 217, "theblok": 217, "7b": 217, "gptq": 217, "model_name_or_path": 217, "torch_dtyp": 217, "hpu_model": 217, "safetensor": 217, "qd": 217, "w8a8": 217, "staticquantconfig": 217, "userfloatmodel": 217, "exported_model": [217, 282], "quant_config": 217, "prepared_model": [217, 282], "run_fn": 217, "q_model": 217, "opt_model": 217, "rtnconfig": 217, "tuningconfig": 217, "eval_fn": 217, "tune_config": 217, "config_set": 217, "use_sym": 217, "group_siz": 217, "tolerable_loss": 217, "max_trial": 217, "gui": [223, 261], "emit_itt": 223, "ex": [223, 270, 284], "8080": 223, "path_of_launch": 223, "iteration_n": 223, "range_push": 223, "range_pop": 223, "oneapi": 223, "brown": 223, "percerntag": 223, "jitter": [223, 227], "enrich": 223, "ittsampl": 223, "292820": 223, "unmark": 223, "244": [223, 284], "iteration_": 223, "basefold": 223, "bash_sourc": 223, "gradcam": 225, "283": 225, "occlus": 225, "deconvolut": 225, "guidedbackprop": 225, "deeplift": 225, "gradientshap": 225, "forward_func": 225, "pictori": 225, "textual": 225, "distractor": 225, "visualize_text": 225, "imdb_torchtext_interpret": 225, "gilbert": 225, "tanner": 225, "gilberttann": 225, "captum_recip": [225, 230, 238, 262], "carilli": 226, "ordinarili": 226, "ture": 226, "kepler": 226, "maxwel": 226, "pascal": 226, "modest": 226, "in_siz": 226, "out_siz": 226, "underflow": 226, "scaler": 226, "unscal": 226, "unscale_": 226, "rough": 226, "coalesc": [226, 275], "binary_cross_entropy_with_logit": 226, "suspect": 226, "docstr": 226, "subregion": 226, "backtrac": 226, "torch_show_cpp_stacktrac": 226, "amp_recip": [226, 230, 238, 262], "tediou": 227, "batched_dot_mul_sum": 227, "batched_dot_bmm": 227, "mul_sum": 227, "0x7fb10400d0f0": 227, "379": 227, "0x7fb103d67048": 227, "sub_label": 227, "get_num_thread": 227, "0x7fb103d54080": 227, "118": 227, "0x7fb16935d2e8": 227, "2775": 227, "0x7fb10400d080": 227, "181": 227, "min_run_tim": [227, 241], "m0": 227, "m1": 227, "median": [227, 241, 284], "274": 227, "748": 227, "432": [227, 232], "22657": 227, "11899": 227, "609": 227, "23098": 227, "27246": 227, "267073": 227, "118823": 227, "189": 227, "2782": 227, "7471": 227, "11874": 227, "173": 227, "7264": 227, "27824": 227, "100060": 227, "121499": 227, "188": 227, "2773": 227, "6111": 227, "12833": 227, "6295": 227, "27062": 227, "71804": 227, "120365": 227, "103": 227, "2804": 227, "6764": 227, "11871": 227, "6640": 227, "27592": 227, "73003": 227, "120083": 227, "trim_significant_figur": 227, "callgrindstat": [227, 241], "trip": [227, 241], "ab_test_result": 227, "dot_fn": 227, "batched_dot": 227, "ab_result": 227, "36000": 227, "40000": 227, "round_tripped_result": 227, "stark": 227, "fuzzer": 227, "fuzzedparamet": 227, "fuzzedtensor": 227, "parameteralia": 227, "10000000": 227, "k0": 227, "k1": 227, "discontigu": 227, "example_fuzz": 227, "minval": 227, "maxval": 227, "min_el": 227, "max_el": 227, "probability_contigu": 227, "tensor_param": 227, "725": 227, "383": 227, "1468": 227, "5039": 227, "2140": 227, "41000": 227, "1598": 227, "310": 227, "519": 227, "763": 227, "1082": 227, "op_fuzz": 227, "binaryopfuzz": 227, "473": 227, "12642115": 227, "8192": [227, 264], "4800": 227, "20400": 227, "110000": 227, "400000": 227, "493": 227, "2440": 227, "870": 227, "2030": 227, "495": 227, "23600": 227, "24000": [227, 241], "62374": 227, "90000": 227, "240372": 227, "69": 227, "16000": 227, "40156": 227, "2670": 227, "opac": 227, "complementari": 227, "insensit": 227, "environment": 227, "batched_dot_src": 227, "batched_dot_mul_sum_v0": 227, "batched_dot_mul_sum_v1": 227, "cpp_lib": 227, "cpp_sourc": 227, "extra_cflag": 227, "extra_include_path": 227, "getenv": 227, "module_import_str": 227, "67631": 227, "importlib": 227, "spec_from_file_loc": 227, "repr": 227, "module_from_spec": 227, "exec_modul": 227, "textwrap": 227, "pretty_print": 227, "t_baselin": 227, "stats_v0": 227, "collect_callgrind": 227, "stats_v1": 227, "as_standard": [227, 241], "denois": 227, "cancel": [227, 242], "ing": 227, "wrap_pybind_function_impl_": 227, "set_printopt": [227, 284], "linewidth": 227, "valgrind_wrapp": [227, 241], "timer_interfac": [227, 241], "0x7fb0f06e7630": 227, "2392671": 227, "4367": 227, "rel_with_deb_info": [227, 241], "0x7fb10400d208": 227, "2378978": 227, "functioncount": [227, 241], "0x7fb1000ab358": 227, "0x000000000020d9e0": 227, "0x000000000020db10": 227, "integer_sequ": 227, "0ul": 227, "1ul": 227, "5200": 227, "undefinedtensorimpl": 227, "reset_": 227, "5935": 227, "0x000000000022c0e0": 227, "13693": 227, "impos": [228, 239], "changing_default_devic": [228, 238, 262], "subsidiari": [229, 243, 244], "neighbor": 229, "sharp": 229, "blurri": 229, "defining_a_neural_network": [229, 230, 238, 262], "what_is_state_dict": [230, 238, 244, 262], "saving_and_loading_models_for_infer": 230, "custom_dataset_transforms_load": 230, "dynamic_quant": 230, "warmstarting_model_using_parameters_from_a_different_model": [230, 238, 243, 262], "zeroing_out_gradi": [230, 238, 245, 262], "mobile_perf": 230, "regional_compil": [230, 246, 248, 262], "undesir": 231, "unload": 231, "upfront": [231, 279], "somemodul": 231, "overwritten": [231, 245, 259], "param_in_model": 231, "param_in_state_dict": 231, "set_swap_module_params_on_convers": [231, 239], "swap_tensor": [231, 238, 262], "module_load_state_dict_tip": [231, 238, 262], "shivam": 232, "raikundalia": 232, "model_infer": 232, "_fork": 232, "509m": 232, "503m": 232, "931m": 232, "597m": 232, "700m": 232, "585m": 232, "_convolut": 232, "450m": 232, "mkldnn_convolut": 232, "838m": 232, "114m": 232, "556m": 232, "693m": 232, "734": 232, "_batch_norm_impl_index": 232, "482m": 232, "724": 232, "100u": 232, "native_batch_norm": 232, "229m": 232, "109m": 232, "705": 232, "450u": 232, "332": 232, "631m": 232, "286u": 232, "668m": 232, "292m": 232, "988u": 232, "549m": 232, "dnn": 232, "group_by_input_shap": 232, "008m": 232, "956m": 232, "909m": 232, "834m": 232, "332m": 232, "303m": 232, "273m": 232, "233m": 232, "751m": 232, "occurr": 232, "666m": 232, "484m": 232, "_convolution_nogroup": 232, "thnn_conv2d": 232, "thnn_conv2d_forward": 232, "im2col_kernel": 232, "844m": 232, "sgemm_32x32x32_nn": 232, "206m": 232, "sgemm_32x32x32_nn_vec": 232, "093m": 232, "015m": 232, "567m": 232, "871m": 232, "560u": 232, "convolution_overrid": 232, "gen_conv": 232, "216u": 232, "640u": 232, "632u": 232, "conv_reord": 232, "880u": 232, "448u": 232, "712": 232, "486m": 232, "max_pool2d_with_indic": 232, "kb": 232, "empty_strid": [232, 269, 289], "572": 232, "resize_": 232, "masked_select": 232, "112": [232, 256, 259], "122": 232, "064m": 232, "viewer": 232, "439": 232, "_conv_forward": 232, "1051": 232, "_call_impl": 232, "016m": 232, "659m": 232, "profiler_recip": [232, 238, 262], "reasoning_about_shap": [233, 238, 262], "008": 238, "tensorboard_with_pytorch": [238, 240, 262], "timer_quick_start": [238, 241, 262], "tuning_guid": [238, 242, 262], "hereaft": 239, "__class__": 239, "__slots__": 239, "pertin": 239, "glanc": [239, 275], "__torch_dispatch__": [239, 256], "new_param": 239, "myquantizedlinearweight": 239, "elem": 239, "__setattr__": 239, "module_load": 239, "__torch_function__": 239, "param_kei": 239, "scalar_valu": 240, "walltim": 240, "anymor": [240, 279], "tfevent": 240, "OR": 240, "0x7f1929a38ed0": 241, "iqr": 241, "424": 241, "0x7f192b019ed0": 241, "unsurprisingli": 241, "0x7f1929a35850": 241, "563600": 241, "tensormethod": 241, "ab_ref": 241, "0x7f192a6dfd90": 241, "47264": 241, "_int_fre": 241, "25963": 241, "_int_malloc": 241, "19900": 241, "tensorit": 241, "tensoriteratorconfig": 241, "18000": 241, "__tls_get_addr": 241, "13500": 241, "malloc": [241, 242, 259], "11300": 241, "smallvector": 241, "10345": 241, "_int_memalign": 241, "9200": 241, "iteratorbas": 241, "get_strid": 241, "173472": 241, "0x7f192995d750": 241, "118200": 241, "tensoriter": 241, "65000": 241, "20900": 241, "15900": 241, "15100": 241, "cpualloc": 241, "12500": 241, "352327": 241, "a0": 241, "b0": 241, "a1": 241, "a127": 241, "pickleabl": 241, "broadcasting_stat": 241, "17600": 241, "tensoriteratorbas": 241, "compute_strid": 241, "12700": 241, "allocate_or_resize_output": 241, "10200": 241, "smallvectorimpl": 241, "7400": 241, "6200": 241, "invert_perm": 241, "6064": 241, "5100": 241, "reorder_dimens": 241, "4300": 241, "compatible_strid": 241, "check_tensor_options_and_extract_memory_format": 241, "__memcmp_avx2_movb": 241, "empty_cpu": 241, "1300": 241, "2400": 241, "6100": 241, "compute_fast_setup_typ": 241, "22600": 241, "fast_set_up": 241, "58091": 241, "580": 241, "0x7f19299544d0": 241, "compute_shap": 241, "2300": 241, "coalesce_dimens": 241, "promin": 241, "__add__": 241, "__sub__": 241, "dice": 241, "szymon": 242, "migacz": 242, "set_to_non": 242, "elementwis": [242, 257], "anomali": 242, "detect_anomali": 242, "set_detect_anomali": 242, "emit_nvtx": 242, "nth": 242, "cpunodebind": 242, "membind": 242, "pytorch_script": 242, "omp_num_thread": [242, 259], "invalid": [242, 276, 277, 278], "thrash": 242, "gomp_cpu_affin": 242, "omp_proc_bind": 242, "omp_schedul": 242, "libgomp": [242, 259], "sleep": 242, "jemalloc": [242, 259], "tcmalloc": [242, 259], "emphas": 242, "fragment": 242, "ccl": 242, "alltoal": [242, 264], "set_float32_matmul_precis": 242, "neta": 243, "netb": 243, "judgment": 245, "animesh": 246, "jain": 246, "startup": 246, "inline_inbuilt_nn_modul": 246, "graph_cod": 246, "strateg": 246, "horizont": [248, 261, 262], "foreach_map": [248, 261, 262], "torch_compiler_set_stance_tutori": [248, 254, 262], "torch_compile_torch_function_mod": [248, 252, 262], "torch_compile_user_defined_triton_kernel_tutori": [248, 253, 262], "torch_export_aoti_python": [248, 255, 262], "compile_model": 249, "resnet50_weight": 249, "weights_prepack": 249, "oguz": [250, 251, 253], "ulgen": [250, 251, 253], "sam": [250, 256], "larsen": 250, "fxgraphcach": [250, 251], "aotautogradcach": [250, 251], "redi": [250, 251], "usernam": 250, "aotautograd": [250, 251], "fxgraph": 250, "torchinductor_": 250, "torchinductor_myusernam": [250, 251], "triton_cache_dir": 250, "torchinductor_redis_host": 250, "torchinductor_redis_port": 250, "6379": 250, "cachebench": 251, "onward": 251, "save_cache_artifact": 251, "load_cache_artifact": 251, "artifact_byt": 251, "cache_info": 251, "pgo": 251, "tritoncach": 251, "cubin": [251, 255, 269], "inductorcach": 251, "autotuningcach": 251, "torchinductor_cache_dir": 251, "basetorchfunctionmod": 252, "flopcountermod": 253, "wrap_triton": 253, "footgun": 253, "register_kernel": 253, "register_flop_formula": 253, "flop_count": 253, "mysin": 253, "reappli": 254, "force_eag": 254, "eager_on_recompil": 254, "fail_on_recompil": 254, "torch.export": 255, "torch._inductor.aoti_compile_and_packag": 255, "aot_compil": 255, "torch._export.aoti_load_packag": 255, "ankith": [255, 256], "gunap": [255, 256], "bao": [255, 269], "_export": 255, "aot_load": 255, "max_autotun": 255, "runner": 255, "archive_format": 255, "10088": 255, "cagzt6akdaczvxwtbvqe34otfe5jlorktbqlojbzqjqvbfsjlge4": 255, "17160": 255, "c6oytfjmt5w4c7onvtm6fray7clirxt7q5xjbwx3hdydclmwoujz": 255, "16616": 255, "c7ydp7nocyz323hij4tmlf2kcedmwlyg6r57gaqzcsy3huneamu6": 255, "17776": 255, "cyqdf46ordevqhiddvpdpp3uzwatfbzdpl3auj2nx23uxvplnne2": 255, "10856": 255, "cpzfebfgrusqslui7fxsuoo4tvwulmrxirc5tmrpa4mvrbdno7kn": 255, "14608": 255, "c5ukeoz5wmaszd7vczdz2qhtt6n7tdbl3b6wuy4rb2se24fjwfoi": 255, "11376": 255, "csu3nstcp56tsjfycygaqsewpu64l5s6zavvz7537cm4s4cv2k3r": 255, "10984": 255, "cp76lez4glmgq7gedf2u25zvvv6rksv5lav4q22dibd2zicbgwj3": 255, "14736": 255, "c2bb5p6tnwz4elgujqelsrp3unvkgsyiv7xqxmpvuxcm4jfl7pc2": 255, "c6eopmb2b4ngodwsayae4r5q6ni3jlfogfbdk3ypg56tgpzhubfi": 255, "11624": 255, "chmwe6lvoekzfowdbiizitm3haiiuad5kdm6sd2m6mv6dkn2zk32": 255, "15632": 255, "c3jop5g344hj3ztsu4qm6ibxyaaerlhkzh2e6emak23rxfje6jam": 255, "25472": 255, "chaiixybeiuuitm2nmqnxzijzwgnn2n7uuss4qmsupgblfh3h5hk": 255, "139389": 255, "cvk6qzuybruhwxtfblzxiov3rlrziv5fkqc4mdhbmantfu3lmd6t": 255, "cvk6qzuybruhwxtfblzxiov3rlrziv5fkqc4mdhbmantfu3lmd6t_metadata": 255, "47195424": 255, "47523148": 255, "jordi": 256, "ramon": 256, "marco": 256, "carranza": 256, "mvit": 256, "whisper": 256, "blip": 256, "sam2": 256, "timm": 256, "multiscal": 256, "kinet": 256, "mvit_v1_b_weight": 256, "mvit_v1_b": 256, "224x224x3": 256, "input_fram": 256, "num_clip": 256, "print_exc": 256, "batch_dim": 256, "asr": 256, "transcrib": 256, "spoken": 256, "680k": 256, "whisperprocessor": 256, "whisperforconditionalgener": 256, "decoder_input_id": 256, "decoder_start_token_id": 256, "internaltorchdynamoerror": 256, "attributeerror": 256, "dynamiccach": 256, "key_cach": 256, "non_strict": 256, "proxytensor": 256, "gameplai": 256, "gamer": 256, "salesforc": 256, "blip_decod": 256, "384": [256, 284], "caption_input": 256, "model_url": 256, "googleapi": 256, "sfr": 256, "model_base_capfilt_larg": 256, "exportdb": 256, "bos_token_id": 256, "anaconda3": 256, "functional_tensor": 256, "545": 256, "outs_unwrap": 256, "_op_dk": 256, "sam2imagepredictor": 256, "_predict": 256, "unnorm_coord": 256, "unnorm_box": 256, "mask_input": 256, "multimask_output": 256, "return_logit": 256, "image_predict": 256, "sam2_image_predictor": 256, "359": 256, "exporthelp": 256, "model_to_export": 256, "aoti": 256, "preload": 259, "tunabl": 259, "taskset": 259, "uniform": [259, 286], "uma": 259, "lscpu": 259, "9480": 259, "223": 259, "vendor": 259, "genuineintel": 259, "node0": 259, "node1": 259, "cento": 259, "yum": 259, "libiomp": 259, "perftool": 259, "gperftool": 259, "libjemalloc2": 259, "ninstanc": 259, "ncore": 259, "program_arg": 259, "iomp": 259, "prepend": 259, "core_id": 259, "dafault": 259, "ncores_per_inst": 259, "libtcmalloc": 259, "preliminarili": 259, "deepspe": 260, "marian": 260, "oftentim": 260, "exp_avg": 260, "exp_avg_sq": 260, "print_peak_memori": 260, "max_memory_alloc": 260, "use_zero": 260, "optimizer_class": 260, "992": 260, "1361": 260, "3453": 260, "6123046875": 260, "1697": 260, "itt": 261, "vtune": 261, "torchcompil": 261, "run_cpu": 261, "graviton": 261, "compressor": 261, "tensorpip": 261, "dcp": 261, "commdebugmod": 261, "396": 262, "galleri": 262, "intermediate_sourc": 262, "maskedtensor": [262, 285, 290], "unstable_sourc": 262, "maskedtensor_overview": [262, 276, 277, 278, 285], "torchao": [262, 285], "gpu_quantization_torchao_tutori": [262, 268, 285], "advanced_sourc": 262, "maskedtensor_adagrad": [262, 275, 285], "recipes_sourc": 262, "vmap_recip": [262, 285, 288], "maskedtensor_spars": [262, 278, 285], "maskedtensor_advanced_semant": [262, 276, 285], "gpu_direct_storag": [262, 267, 285], "readm": 263, "prepare_fx": 263, "convert_fx": 263, "default_weight_observ": 263, "get_default_qconfig_map": 263, "minmaxobserv": 263, "backend_config": 263, "backendpatternconfig": 263, "dtypewithconstraint": 263, "observationtyp": 263, "quantize_fx": 263, "fp32_linear": 263, "quant1": 263, "dequant1": 263, "quant2": 263, "dequant2": 263, "fp32_conv_relu": 263, "quint8_with_constraint": 263, "quant_min_lower_bound": 263, "quant_max_upper_bound": 263, "scale_min_lower_bound": 263, "weighted_int8_dtype_config": 263, "input_dtyp": [263, 266], "weight_dtyp": 263, "qint8": 263, "bias_dtyp": 263, "fuse_conv2d_relu": 263, "convrelu2d": 263, "linear_config": 263, "set_pattern": 263, "set_observation_typ": 263, "output_use_different_observer_as_input": 263, "add_dtype_config": 263, "set_root_modul": 263, "set_qat_modul": 263, "set_reference_quantized_modul": 263, "conv_relu_config": 263, "set_fused_modul": 263, "set_fuser_method": 263, "fused_conv_relu_config": 263, "my_backend": 263, "set_backend_pattern_config": 263, "quant_max": 263, "activation_observ": 263, "with_arg": 263, "quant_min": 263, "qconfig_map": 263, "set_object_typ": 263, "use_bn": 263, "quantizedlinear": 263, "012136868201196194": 263, "zero_point": 263, "qscheme": 263, "per_tensor_affin": 263, "quantizedconvrelu2d": 263, "0029353597201406956": 263, "linear_input_scale_0": 263, "linear_input_zero_point_0": 263, "quantize_per_tensor": 263, "dequantize_2": 263, "015307803638279438": 263, "track_running_stat": 263, "dequantize_1": 263, "get_fbgemm_backend_config": 263, "get_qnnpack_backend_config": 263, "get_native_backend_config": 263, "union": 263, "rfc": [263, 276, 279, 283], "llama3": 264, "freq_ci": 264, "context_parallel": 264, "buffer_seq_dim": 264, "miscalcul": 264, "set_rotate_method": 264, "sdpbackend": 264, "sdpa_exampl": 264, "nhead": 264, "qkv_len": 264, "flash_attent": 264, "cudnn_attent": 264, "qkv": 264, "cp_sdpa_exampl": 264, "_attent": 264, "context_parallel_unshard": 264, "context_parallel_sdpa_exampl": 264, "mesh_shap": 264, "cp_qkv": 264, "cp_out": 264, "atol": [264, 284], "junji": 266, "impedi": 266, "starvat": 266, "deadlock": 266, "indefinit": 266, "diagnost": 266, "flight_record": 266, "torch_nccl_trace_buffer_s": 266, "torch_nccl_dump_on_timeout": 266, "torch_fr_dump_temp_fil": 266, "nccl_trace_rank_": 266, "torch_nccl_trace_cpp_stack": 266, "torch_symbolize_mod": 266, "torch_nccl_enable_tim": 266, "dladdr": 266, "addr2lin": 266, "debuginfowrit": 266, "registerwrit": 266, "_distributed_c10d": 266, "_dump_nccl_trac": 266, "includecollect": 266, "includestacktrac": 266, "onlyact": 266, "pg_config": 266, "default_pg": 266, "pg_statu": 266, "last_enqueued_collect": 266, "last_started_collect": 266, "last_completed_collect": 266, "test_short_pickl": 266, "test_c10d_nccl": 266, "3647": 266, "spawn_main": 266, "record_id": 266, "pg_id": 266, "collective_seq_id": 266, "p2p_seq_id": 266, "op_id": 266, "profiling_nam": 266, "time_created_n": 266, "1724779239936775119": 266, "input_s": 266, "time_discovered_started_n": 266, "time_discovered_completed_n": 266, "1724779239975811724": 266, "retir": 266, "timeout_m": 266, "600000": 266, "is_p2p": 266, "fr_trace": 266, "use_distribut": 266, "torchfrtrac": 266, "culprit": 266, "recod": 266, "torch_nccl_debug_info_temp_fil": 266, "trace_": 266, "trace_0": 266, "trace_1": 266, "bounc": 267, "gd": 267, "cufil": 267, "4kb": 267, "storage_align": 267, "gdsfile": 267, "skip_data": 267, "faketensormod": 267, "gds_register_buff": 267, "cufilebufregist": 267, "save_storag": 267, "cufilewrit": 267, "load_storag": 267, "cufileread": 267, "hdcharl": 268, "pg509": 268, "330": 268, "myenv": 268, "facebookresearch": 268, "vit_h": 268, "fbaipublicfil": 268, "segment_anyth": 268, "sam_vit_h_4b8939": 268, "sam_checkpoint_base_path": 268, "image_encod": 268, "instant": 268, "protect": 268, "43m": 268, "17gb": 268, "7x": 268, "16m": 268, "95m": 268, "24gb": 268, "int4": 268, "int8dynamicactivationint8weightconfig": 268, "int8weightonlyconfig": 268, "int4weightonlyconfig": 268, "apply_dynamic_qu": 268, "apply_weight_only_int8_qu": 268, "04m": 268, "58gb": 268, "int32": 268, "force_fuse_int_mm_with_mul": 268, "78m": 268, "37gb": 268, "unquant": 268, "epilogu": [268, 279], "enlarg": 268, "39gb": 268, "appl": 268, "677": 268, "28m": 268, "729": 268, "65m": 268, "chunyuan": [269, 279], "cpp_wrapper": 269, "opt_fn": 269, "assert_size_strid": 269, "cpp_fused_add_lift_fresh_0": 269, "c_void_p": 269, "constant0": 269, "inductor_entry_cpp": 269, "19l": 269, "cppwrappercodecach": 269, "cpp_wrapper_src": 269, "c2buojsvlqbywxe3itb43hldieh4jqulk72iswa2awalwev7hjn2": 269, "_wrap_func": 269, "args_tensor": 269, "constants_tensor": 269, "_deviceguard": 269, "lift_fresh": 269, "stream0": 269, "get_cuda_stream": 269, "triton_poi_fused_add_lift_fresh_0": 269, "run_intermediate_hook": 269, "cudaguard": 269, "device_guard": 269, "loadkernel": 269, "torchinductor_us": 269, "cmm6xjgijjffxjku4akv55eyzibirvw6bti6uqmfnruujm5cvvmw": 269, "triton_poi_fused_add_lift_fresh_0_0d1d2d3": 269, "cudeviceptr": 269, "var_0": 269, "reinterpret_cast": 269, "var_1": 269, "var_2": 269, "var_3": 269, "kernel_args_var_0": 269, "cudastream_t": 269, "getcurrentcudastream": 269, "launchkernel": 269, "czbpeilh4qqmbyejdgsbpdfuk2ss5jigl2qjb7xs4gearrjvuwem": 269, "zhaoqiong": 270, "zheng": 270, "xu": 270, "han": 270, "msvc": 270, "desktop": 270, "checkmark": 270, "cmd": 270, "vc": 270, "vcvars64": 270, "opt_foo1": 270, "9074e": 270, "3994e": 270, "3894e": 270, "2630e": 270, "3060e": 270, "1833e": 270, "4016e": 270, "1905e": 270, "0637e": 270, "3648e": 270, "3728e": 270, "2863e": 270, "6888e": 270, "5442e": 270, "6790e": 270, "2025e": 270, "2647e": 270, "2684e": 270, "2483e": 270, "2845e": 270, "7747e": 270, "2028e": 270, "1431e": 270, "7196e": 270, "5304e": 270, "1945e": 270, "6654e": 270, "7376e": 270, "3644e": 270, "3600e": 270, "0157e": 270, "7200e": 270, "0146e": 270, "8175e": 270, "4057e": 270, "8119e": 270, "2853e": 270, "2773e": 270, "5082e": 270, "4615e": 270, "4140e": 270, "2130e": 270, "0762e": 270, "3914e": 270, "1122e": 270, "6895e": 270, "8852e": 270, "3310e": 270, "4101e": 270, "8318e": 270, "2355e": 270, "9290e": 270, "3707e": 270, "3754e": 270, "3768e": 270, "8970e": 270, "1171e": 270, "9944e": 270, "2553e": 270, "3394e": 270, "3428e": 270, "8400e": 270, "1756e": 270, "0654e": 270, "7973e": 270, "4019e": 270, "1886e": 270, "9194e": 270, "3632e": 270, "1811e": 270, "1615e": 270, "6622e": 270, "2089e": 270, "2011e": 270, "0659e": 270, "0892e": 270, "1932e": 270, "3888e": 270, "3898e": 270, "3218e": 270, "4139e": 270, "4000e": 270, "1192e": 270, "0175e": 270, "6432e": 270, "0498e": 270, "4115e": 270, "3212e": 270, "0964e": 270, "0127e": 270, "7244e": 270, "2799e": 270, "3595e": 270, "0907e": 270, "7191e": 270, "4062e": 270, "3672e": 270, "8502e": 270, "5216e": 270, "6046e": 270, "icx": 270, "win64": 270, "inductor_window": 271, "mobile_interpret": 274, "1369": 275, "weed": 275, "state_sum": 275, "addcmul_": 275, "addcdiv_": 275, "clr": 275, "_make_spars": 275, "grad_indic": 275, "sparse_coo_tensor": [275, 278], "_indic": 275, "grad_valu": 275, "_valu": 275, "sparse_mask": [275, 278], "std_valu": 275, "sqrt_": 275, "state_sum2": 275, "masked_grad": 275, "get_data": [275, 277], "std2": 275, "masked_tensor": [275, 277, 278], "to_spars": [275, 278], "param2": [275, 286], "dodg": 275, "make_spars": 275, "brittl": 275, "argu": 275, "densif": 275, "csc": [275, 278], "bsr": [275, 278], "bsc": 275, "inconveni": 275, "conflat": 275, "disentangl": 275, "purposefulli": 275, "relianc": 275, "unreli": [275, 277], "maskedarrai": [275, 290], "Their": [276, 278], "unspecifi": [276, 277, 278, 290], "intersect": 276, "logical_or": 276, "to_tensor": [276, 277], "mt0": 276, "get_mask": [276, 277], "mt1": 276, "revisit": 276, "ma": 276, "masked_arrai": 276, "mask0": 276, "mask1": 276, "necessit": 276, "as_masked_tensor": 277, "as_tensor": 277, "mt": [277, 278], "afterthought": 277, "born": 277, "recur": 277, "inabl": 277, "10729": 277, "troubl": 277, "5400e": 277, "7379e": 277, "0000e": 277, "0067": 277, "52248": 277, "wherebackward0": 277, "frustrat": 277, "4132": 277, "67180": 277, "longstand": 277, "bgrad1": 277, "isnan": 277, "masked_fil": 277, "2787": 277, "5283": 277, "0577": 277, "unsaf": 277, "7772": 277, "2228": 277, "61474": 277, "nanmax": 277, "nanmin": 277, "lend": 277, "fmod": 277, "6667": 277, "argmin": 277, "substructur": 278, "sparse_coo": 278, "sparse_csr": 278, "ndim": 278, "nse": 278, "sparse_tensor_data": 278, "sparse_tensor_mask": 278, "dense_masked_tensor": 278, "to_sparse_coo": 278, "to_sparse_csr": 278, "nuanc": 278, "crow_indic": 278, "col_indic": 278, "nnz": 278, "to_dens": 278, "is_spars": 278, "is_sparse_coo": 278, "is_sparse_csr": 278, "mt2": 278, "surfac": 278, "synergi": 278, "invest": 278, "lesli": 279, "fang": 279, "torchinductor_max_autotune_gemm_backend": 279, "torchinductor_freez": 279, "log_autotuning_result": 279, "amp_en": 279, "outperform": 279, "linear_unari": 279, "64x16": 279, "32x16": 279, "cpp_packed_gemm_0": 279, "2142": 279, "_linear_pointwis": 279, "2441": 279, "cpp_fused__to_copy_relu_1": 279, "cpp_pybind": 279, "kernel_micro_gemm_amx_kernel_32_2": 279, "amxstat": 279, "amx_stat": 279, "lda": 279, "ldb": 279, "ldc": 279, "uint8_t": 279, "tilecfg_row": 279, "kernel_micro_gemm": 279, "64l": 279, "tid": 279, "omp_get_thread_num": 279, "mc_block_id": 279, "num_mc_blocks_per_thread": 279, "n_block_start": 279, "n_block_end": 279, "nc_block": 279, "kc": 279, "k_block_start": 279, "k_block_end": 279, "kc_block": 279, "nci": 279, "nc_block_end": 279, "m_end": 279, "m_start": 279, "16l": 279, "div_floor_integ": 279, "n_end": 279, "n_start": 279, "local_acc_buf": 279, "nr": 279, "32l": 279, "invalu": 280, "nt": 280, "poss": 280, "irregularli": 280, "legal": 280, "semnat": 280, "law": 280, "daniil": 282, "lyakhov": 282, "aamir": 282, "nazir": 282, "suslov": 282, "yamini": 282, "nimmagadda": 282, "kozlov": 282, "openvinoquant": 282, "quantize_pt2": 282, "prepare_pt2": 282, "convert_pt2": 282, "traced_b": 282, "disable_patch": 282, "asymmetr": 282, "prelu": 282, "quantizationpreset": 282, "model_typ": 282, "modeltyp": 282, "ignored_scop": 282, "layer_1": 282, "layer_2": 282, "layer_3": 282, "ignoredscop": 282, "regex": 282, "layer_": 282, "subgraph": 282, "target_devic": 282, "cpu_spr": 282, "targetdevic": 282, "fold": 282, "fold_quant": 282, "optimized_model": 282, "smoothquant": 282, "biascorrect": 282, "calibration_load": 282, "transform_fn": 282, "data_item": 282, "calibration_dataset": 282, "smooth_quant": 282, "fast_bias_correct": 282, "yuanhao": 283, "ji": 283, "effortless": 283, "huawei": 283, "torch_device_backend_autoload": 283, "torch_foo": 283, "_autoload": 283, "entry_point": 283, "habana_framework": 283, "__autoload": 283, "device_backend": 283, "is_load": 283, "entrypoint": 283, "_force_cutlass": 284, "2560": 284, "10240": 284, "dense_output": 284, "dense_t": 284, "1e3": 284, "sparse_output": 284, "sparse_t": 284, "80gb": 284, "870m": 284, "630m": 284, "382x": 284, "weightnormsparsifi": 284, "preprocess_validation_funct": 284, "only_second": 284, "return_overflowing_token": 284, "return_offsets_map": 284, "sample_map": 284, "overflow_to_sample_map": 284, "example_id": 284, "sequence_id": 284, "offset_map": 284, "preprocess_train_funct": 284, "start_posit": 284, "end_posit": 284, "start_char": 284, "answer_start": 284, "end_char": 284, "context_start": 284, "context_end": 284, "compute_metr": 284, "start_logit": 284, "end_logit": 284, "n_best": 284, "max_answer_length": 284, "example_to_featur": 284, "defaultdict": 284, "predicted_answ": 284, "feature_index": 284, "start_index": 284, "argsort": 284, "end_index": 284, "logit_scor": 284, "best_answ": 284, "prediction_text": 284, "theoretical_answ": 284, "measure_execution_tim": 284, "dataset_for_model": 284, "remove_column": 284, "set_format": 284, "batch_size_to_time_sec": 284, "column_nam": 284, "p50": 284, "automodelforquestionansw": 284, "squad_dataset": 284, "tokenized_squad_dataset": 284, "data_col": 284, "datacollatorwithpad": 284, "hyperparam": 284, "training_arg": 284, "trainingargu": 284, "num_train_epoch": 284, "lr_scheduler_typ": 284, "per_device_train_batch_s": 284, "per_device_eval_batch_s": 284, "eval_dataset": 284, "fp16_baselin": 284, "fp16_time": 284, "cuda_fp16": 284, "exact_match": 284, "53358561967833": 284, "9280493093186": 284, "927572380751371": 284, "607915310189128": 284, "18846387788653": 284, "91255673766136": 284, "sparsity_level": 284, "elemen": 284, "sparse_block_shap": 284, "zeros_per_block": 284, "sparse_config": 284, "tensor_fqn": 284, "paramter": 284, "bertoutput": 284, "parametrizedlinear": 284, "fakespars": 284, "elementwise_affin": 284, "59602649006622": 284, "51610004515979": 284, "edgeitem": 284, "0237": 284, "0130": 284, "0462": 284, "0272": 284, "0436": 284, "0492": 284, "0844": 284, "0340": 284, "0302": 284, "0350": 284, "0303": 284, "0175": 284, "0529": 284, "0327": 284, "0213": 284, "0258": 284, "0239": 284, "0380": 284, "0562": 284, "0432": 284, "0598": 284, "0262": 284, "0227": 284, "0244": 284, "0921": 284, "0784": 284, "0225": 284, "0395": 284, "0684": 284, "0344": 284, "metrics_spars": 284, "sparse_perf": 284, "43897824030275": 284, "48718950090766": 284, "621004460379481": 284, "368514601141214": 284, "702805917710066": 284, "19364519417286": 284, "87x": 284, "orthogonal_": 286, "skip_init": 286, "param1": 286, "kaiming_uniform_": 286, "register_buff": 286, "some_buff": 286, "intial": 286, "autovector": [288, 290], "42368": 288, "unsuccessfulli": 288, "rummag": 288, "shenanigin": 288, "8304": 288, "23475": 288, "performantli": 288, "7786": 288, "batch_of_sampl": 288, "grad_sampl": 288, "ivan": 289, "kobzarev": 289, "mac": 289, "use_vulkan": 289, "vulkan_wrapp": 289, "use_vulkan_wrapp": 289, "libvulkan": 289, "vulkansdk": 289, "lunarg": 289, "vulkan_sdk": 289, "vulkan_sdk_root": 289, "install_vulkan": 289, "pytorch_root": 289, "use_vulkan_shaderc_runtim": 289, "macosx_deployment_target": 289, "41237a4": 289, "android_abi": 289, "v8a": 289, "build_android": 289, "pytorch_android": 289, "aar": 289, "build_pytorch_android": 289, "script_model": 289, "mobilenet2": 289, "32bit": 289, "mobile_optim": 289, "optimize_for_mobil": 289, "script_model_vulkan": 289, "optimization_blocklist": 289, "mobileoptimizertyp": 289, "vulkan_automatic_gpu_transf": 289, "is_vulkan_avail": 289, "tensor_vulkan": 289, "tensor_output_vulkan": 289, "tensor_output": 289, "_adaptive_avg_pool2d": 289, "_cat": 289, "clamp": 289, "hardtanh_": 289, "relu_": 289, "transpose_": 289, "upsample_nearest2d": 289, "floatbuff": 289, "allocatefloatbuff": 289, "fromblob": 289, "mmodul": 289, "apploc": 289, "asset": 289, "test_app": 289, "gradl": 289, "installmbvulkanlocalbasedebug": 289, "mbq": 289, "swiftshad": 289, "googlesourc": 289, "pypi": 290, "optimizi": 290, "coo": 290, "csr": 290, "flight": 290, "flightrecord": 290, "autoload": 290}, "objects": {}, "objtypes": {}, "objnames": {}, "titleterms": {"onnx": [0, 114, 115, 116, 117, 118], "live": 0, "tutori": [0, 39, 42, 54, 55, 57, 59, 62, 92, 99, 105, 125, 128, 138, 140, 171, 177, 179, 180, 187, 195, 196, 199, 200, 216, 217, 255, 263, 269], "torchrl": [1, 17, 179], "object": [1, 107, 145, 199], "code": [1, 2, 10, 17, 39, 40, 59, 99, 223, 269, 275, 289], "ddpg": 1, "loss": [1, 15, 40, 48, 51, 54, 57, 100, 104, 105, 106, 143, 147, 156, 179, 226, 245], "overview": [1, 21, 65, 114, 118, 125, 148, 156, 161, 184, 197, 208, 217, 242, 266, 277], "prerequisit": [1, 40, 105, 114, 118, 178, 210, 214, 232, 246, 250, 251, 253, 254, 255, 256, 266, 269, 279, 282], "import": [1, 15, 49, 60, 93, 192, 229, 232, 243, 244, 245], "setup": [1, 21, 23, 93, 113, 131, 148, 155, 156, 167, 175, 178, 189, 190, 201, 205, 206, 214, 227, 229, 232, 243, 244, 245, 246, 257, 263, 264, 284], "lossmodul": 1, "The": [1, 8, 10, 93, 95, 104, 144, 175, 176, 185, 200, 223], "__init__": [1, 37], "method": [1, 18, 155, 167, 199, 239, 278], "valu": [1, 156, 171, 179, 196], "estim": [1, 163], "actor": 1, "put": [1, 163, 178, 199], "thing": [1, 17], "togeth": [1, 17, 143, 163, 170, 178, 199, 226], "forward": [1, 7, 8, 120, 141, 148, 159, 162, 199, 200], "call": [1, 194], "environ": [1, 17, 58, 142, 156, 163, 179, 192, 268, 270], "transform": [1, 11, 17, 45, 46, 56, 100, 129, 130, 140, 143, 162, 172, 174, 175, 179, 184, 187, 200], "parallel": [1, 11, 49, 59, 61, 65, 134, 139, 140, 141, 143, 153, 154, 166, 174, 175, 211, 242, 264], "execut": [1, 17, 23, 115, 175, 181, 189, 232, 242], "normal": [1, 48, 179, 245], "observ": 1, "stat": 1, "build": [1, 4, 5, 7, 13, 36, 100, 107, 160, 176, 193, 200, 245, 287, 289], "model": [1, 8, 11, 15, 21, 23, 24, 36, 40, 41, 42, 49, 54, 60, 65, 80, 81, 90, 96, 98, 100, 102, 104, 105, 110, 112, 114, 115, 122, 124, 128, 129, 140, 141, 143, 144, 151, 153, 156, 157, 160, 163, 164, 166, 167, 174, 175, 177, 178, 185, 187, 189, 190, 192, 199, 205, 206, 214, 221, 222, 223, 225, 229, 232, 236, 237, 242, 243, 244, 255, 256, 263, 282, 289], "explor": [1, 23], "data": [1, 8, 11, 24, 29, 37, 41, 48, 49, 54, 55, 57, 59, 60, 61, 93, 100, 103, 113, 128, 139, 140, 141, 143, 146, 147, 153, 179, 185, 187, 189, 190, 192, 196, 197, 218, 229, 242, 243, 244, 245, 266, 277], "collector": [1, 156, 179], "evalu": [1, 54, 128, 144, 145, 146, 185, 226], "your": [1, 7, 13, 17, 37, 65, 98, 102, 113, 120, 169, 199, 211, 229, 268], "record": [1, 189, 266], "replai": [1, 156, 179, 180], "buffer": [1, 156, 179, 242], "storag": [1, 256, 267], "batch": [1, 12, 17, 149, 162, 181, 193, 215, 242, 256], "size": [1, 256], "modul": [1, 8, 18, 72, 90, 100, 113, 120, 121, 156, 159, 171, 177, 197, 231, 239, 256, 286], "construct": [1, 23, 60, 277, 278], "target": [1, 163, 242], "network": [1, 8, 36, 48, 51, 57, 93, 107, 110, 146, 147, 156, 163, 179, 180, 185, 187, 200, 226, 229, 243, 244, 245], "updat": [1, 51, 163, 181, 286], "optim": [1, 40, 41, 48, 57, 74, 104, 107, 113, 121, 141, 145, 170, 183, 197, 205, 206, 215, 242, 244, 245, 247, 259, 260], "time": [1, 22, 43, 52, 69, 75, 79, 87, 91, 101, 111, 119, 120, 123, 178, 186, 232, 238, 241, 246, 248, 250, 251, 262, 285], "train": [1, 3, 4, 8, 11, 14, 17, 19, 24, 28, 36, 37, 48, 54, 57, 58, 60, 93, 95, 98, 102, 104, 107, 122, 128, 140, 143, 144, 146, 147, 151, 152, 155, 156, 163, 170, 174, 179, 180, 185, 187, 190, 197, 201, 216, 242, 245, 249, 253, 282], "polici": [1, 17, 140, 156, 179], "experi": [1, 17, 18, 145, 263], "result": [1, 3, 49, 57, 80, 115, 120, 145, 146, 150, 179, 185, 187, 189, 197, 223, 225, 227, 284], "conclus": [1, 2, 3, 4, 5, 7, 8, 17, 18, 19, 21, 24, 54, 87, 105, 114, 115, 118, 125, 131, 142, 143, 148, 156, 160, 161, 163, 164, 170, 173, 175, 179, 184, 194, 196, 197, 200, 201, 203, 206, 208, 209, 210, 211, 214, 215, 231, 239, 242, 246, 250, 251, 252, 253, 254, 255, 256, 257, 259, 264, 266, 267, 268, 269, 270, 275, 276, 277, 278, 279, 280, 282, 283, 284], "next": [1, 48, 57, 80, 178, 179], "step": [1, 125, 170, 175, 176, 178, 179, 189, 200, 227, 229, 232, 243, 244, 245, 246], "autograd": [2, 4, 12, 13, 35, 47, 67, 68, 82, 95, 121, 144, 148, 159, 183], "c": [2, 3, 4, 7, 8, 9, 10, 12, 13, 216, 241, 269, 289], "frontend": [2, 8, 90, 92], "basic": [2, 8, 38, 39, 148, 153, 159, 173, 176, 181, 194, 196, 215, 253], "oper": [2, 4, 5, 7, 10, 12, 13, 19, 44, 53, 95, 109, 118, 173, 203, 242, 263, 277, 278, 280], "comput": [2, 17, 22, 35, 43, 47, 52, 69, 75, 79, 87, 91, 101, 109, 111, 112, 119, 123, 128, 162, 167, 186, 225, 238, 242, 248, 262, 285], "higher": 2, "order": [2, 242], "gradient": [2, 15, 35, 80, 96, 141, 172, 201, 226, 242, 245, 277], "us": [2, 3, 7, 8, 11, 14, 15, 16, 28, 39, 47, 55, 58, 88, 113, 114, 115, 118, 120, 122, 127, 139, 141, 148, 149, 151, 153, 154, 156, 157, 159, 172, 174, 176, 181, 182, 183, 184, 189, 190, 192, 204, 207, 209, 210, 211, 217, 223, 225, 231, 232, 240, 242, 243, 253, 255, 257, 259, 260, 267, 270, 273, 277, 279, 289], "custom": [2, 4, 5, 7, 9, 10, 13, 17, 18, 19, 37, 56, 72, 118, 121, 127, 128, 134, 149, 150, 159, 176, 177, 196, 199, 211], "function": [2, 15, 18, 24, 35, 40, 48, 51, 57, 68, 80, 90, 93, 100, 104, 105, 106, 107, 113, 121, 149, 150, 159, 162, 167, 172, 177, 179, 214, 227, 232, 242, 245, 252], "translat": [2, 124, 130, 185], "from": [2, 10, 24, 47, 55, 113, 115, 122, 146, 147, 151, 168, 185, 192, 197, 199, 231, 243], "python": [2, 4, 5, 7, 10, 19, 90, 176, 255, 257, 289], "cuda": [3, 4, 7, 10, 55, 87, 173, 207, 242], "graph": [3, 35, 47, 102, 109, 115, 148, 194, 196, 242, 256, 282], "pytorch": [3, 7, 8, 10, 13, 15, 18, 24, 28, 47, 50, 55, 59, 62, 65, 67, 68, 70, 72, 73, 74, 78, 86, 94, 97, 98, 99, 100, 102, 103, 104, 107, 108, 109, 110, 112, 115, 118, 120, 121, 138, 155, 164, 173, 178, 189, 192, 197, 200, 203, 204, 213, 215, 216, 217, 218, 220, 223, 224, 227, 229, 230, 232, 233, 240, 242, 243, 244, 245, 249, 263, 265, 273, 282, 289], "api": [3, 8, 65, 95, 141, 159, 164, 170, 176, 223, 242, 257, 266, 269, 289], "get": [3, 13, 36, 87, 112, 139, 141, 153, 161, 169, 183, 209, 210, 211, 216, 217, 280], "start": [3, 87, 102, 139, 141, 153, 169, 183, 209, 210, 211, 216, 217, 241, 246, 259, 280], "set": [4, 5, 93, 142, 145, 192, 205, 206, 214, 242, 250, 263, 266, 268, 270], "up": [4, 5, 77, 121, 145, 192, 199, 205, 206, 214, 215, 241, 263, 268, 270], "system": [4, 5], "defin": [4, 5, 8, 12, 24, 36, 48, 51, 54, 68, 105, 114, 121, 145, 175, 179, 192, 199, 227, 229, 241, 243, 244, 245, 253, 263], "op": [4, 5, 7, 12, 196, 252], "ad": [4, 5, 12, 19, 93, 190, 197, 226, 253], "backend": [4, 5, 12, 13, 18, 142, 155, 161, 176, 217, 242, 249, 259, 263, 282, 289], "implement": [4, 5, 12, 40, 57, 80, 106, 118, 149, 171, 176, 181, 182, 184, 214, 275, 277, 286], "an": [4, 13, 17, 48, 110, 112, 118, 122, 144, 156, 179, 197, 206, 231, 259, 266], "regist": [4, 8, 12, 13, 18, 201], "torch": [4, 9, 35, 47, 86, 100, 109, 113, 114, 122, 146, 148, 153, 177, 184, 193, 194, 195, 196, 200, 205, 214, 226, 227, 231, 239, 246, 251, 252, 253, 254, 255, 256, 257, 259, 267, 270, 277, 282, 288], "compil": [4, 7, 9, 132, 148, 161, 184, 193, 194, 200, 205, 206, 214, 246, 250, 251, 252, 253, 254, 255, 257, 270, 279, 282], "support": [4, 9, 12, 13, 19, 93, 102, 118, 184, 253, 278, 286], "hybrid": [4, 90, 92], "registr": 4, "test": [4, 5, 13, 17, 19, 48, 80, 93, 149, 193, 199, 229, 241, 289], "creat": [4, 5, 10, 16, 37, 41, 49, 54, 103, 107, 109, 113, 145, 146, 147, 160, 167, 177, 242], "mutabl": [4, 19], "sycl": 5, "interfac": 5, "initi": [5, 44, 53, 57, 58, 141, 142, 153, 155, 163, 171, 229, 243, 244, 280, 286], "packag": [5, 15, 83], "extens": [5, 7, 13, 16, 134, 137, 176, 203, 206, 216, 239, 249, 283], "motiv": [7, 8, 90, 275], "exampl": [7, 16, 19, 80, 84, 90, 95, 96, 107, 110, 112, 121, 122, 144, 200, 216, 217, 249, 254, 259, 266, 269, 279, 283], "write": [7, 8, 17, 56, 155, 190, 199, 275], "setuptool": 7, "pass": [7, 14, 120, 142, 148, 170, 193, 229], "backward": [7, 13, 140, 141, 148, 149, 150, 170], "bind": 7, "perform": [7, 120, 142, 157, 160, 161, 164, 172, 178, 184, 189, 208, 215, 220, 242, 254, 259, 270, 279], "comparison": [7, 149, 153, 172, 194], "gpu": [7, 8, 48, 49, 60, 84, 93, 122, 173, 189, 197, 216, 242, 268, 273], "devic": [7, 15, 18, 36, 122, 140, 207, 228, 231, 234, 242, 289], "jit": [7, 13, 114, 178], "mix": [7, 140, 141, 151, 226, 242], "accessor": 7, "integr": [7, 10, 18, 96], "applic": [8, 155, 176, 204, 239], "neural": [8, 15, 36, 48, 51, 93, 113, 163, 167, 217, 229, 243, 244, 245], "paramet": [8, 16, 36, 40, 41, 49, 100, 122, 177, 179, 181, 182, 227, 242, 243, 286], "submodul": 8, "travers": 8, "hierarchi": [8, 223], "run": [8, 39, 49, 54, 55, 58, 59, 60, 80, 90, 99, 105, 145, 153, 189, 192, 196, 205, 206, 214, 232, 240], "mode": [8, 23, 24, 159, 162, 252, 279], "ownership": 8, "dcgan": [8, 57], "what": [8, 13, 14, 18, 21, 48, 57, 61, 62, 95, 113, 122, 150, 157, 172, 173, 206, 207, 210, 211, 223, 244, 255, 259, 260, 266, 284, 288], "wa": 8, "gan": [8, 57], "agan": 8, "gener": [8, 18, 57, 80, 122, 145, 147, 227, 235, 242], "discrimin": [8, 57, 106], "load": [8, 15, 37, 41, 42, 48, 54, 58, 105, 122, 128, 151, 153, 185, 187, 209, 218, 227, 229, 231, 234, 235, 236, 242, 243, 244, 245, 267], "loop": [8, 17, 40, 104, 156, 179, 180], "move": [8, 103], "checkpoint": [8, 60, 122, 140, 153, 163, 208, 209, 231, 235, 242], "recov": 8, "state": [8, 141, 260], "inspect": [8, 148, 171, 177, 190, 226], "imag": [8, 15, 48, 63, 64, 102, 115, 128, 178, 192, 256], "class": [9, 14, 17, 36, 56, 105, 171, 197], "export": [9, 114, 115, 118, 122, 195, 196, 255, 256, 282], "why": [9, 10, 58, 61, 143, 144, 210, 211, 277, 280], "do": [9, 12, 48, 95, 150, 164], "we": [9, 95], "need": [9, 12, 95, 200], "make": [9, 14, 106, 204], "fake": 9, "author": [10, 115], "manual": 10, "when": [10, 143, 150, 151, 255, 277], "should": [10, 61, 143], "i": [10, 14, 18, 33, 48, 57, 61, 62, 113, 122, 150, 151, 157, 170, 172, 200, 203, 207, 210, 211, 223, 226, 244, 256, 260, 277, 288], "distribut": [11, 14, 20, 23, 58, 59, 60, 61, 65, 87, 134, 153, 154, 155, 175, 182, 183, 197, 208, 209, 242], "pipelin": [11, 154, 174, 175], "dispatch": [12, 13, 184], "schema": 12, "For": [12, 95, 236], "In": [12, 95, 103, 237], "place": [12, 95, 103], "view": [12, 189], "go": [12, 48, 57, 80, 192, 200], "beyond": 12, "autocast": [12, 226], "tracer": 12, "extend": [13, 118, 177, 200], "new": [13, 18, 68, 106, 121, 149], "": [13, 19, 109, 163, 276], "kei": [13, 256], "full": [13, 40, 93], "list": 13, "kernel": [13, 18, 87, 167, 214, 215, 253], "against": 13, "nativ": [13, 204], "compat": 13, "known": 13, "issu": 13, "addit": [13, 125, 138, 173, 175, 189, 201, 266], "note": [13, 106, 225], "futur": [13, 18], "work": [13, 14, 18, 41, 139, 140, 141, 143, 164, 209, 283], "stai": 13, "touch": 13, "uneven": 14, "input": [14, 57, 60, 80, 150, 197, 200, 227, 242], "join": 14, "context": [14, 264], "manag": [14, 173], "requir": [14, 21, 115, 144, 177, 207, 223, 256, 260, 284], "distributeddataparallel": [14, 153, 242], "zeroredundancyoptim": [14, 260], "keyword": 14, "argument": 14, "how": [14, 18, 39, 139, 140, 141, 143, 170, 207, 209, 211, 223, 229, 240, 260, 270, 283], "doe": [14, 21, 144, 284], "joinabl": 14, "joinhook": 14, "toi": 14, "transfer": [15, 128], "introduct": [15, 28, 47, 57, 65, 87, 94, 96, 97, 98, 99, 102, 103, 104, 109, 117, 142, 171, 173, 175, 189, 192, 194, 197, 198, 203, 227, 229, 232, 243, 244, 245, 250, 251, 259, 264, 269, 270, 275, 278, 279, 282, 286, 289], "underli": 15, "principl": [15, 278], "select": [15, 156, 264, 287], "content": [15, 121, 215], "style": [15, 200], "descent": 15, "numpi": [16, 44, 53, 77, 103, 121, 276], "scipi": 16, "less": 16, "parametr": [16, 171, 177], "pendulum": 17, "effect": 17, "action": [17, 156], "_step": 17, "reset": 17, "simul": 17, "_reset": 17, "metadata": [17, 18], "env": 17, "_spec": 17, "spec": 17, "shape": [17, 42, 103, 196, 233], "reproduc": 17, "seed": [17, 103], "wrap": [17, 19, 113, 140, 199, 241, 253], "envbas": 17, "our": [17, 23, 149, 155, 170, 193, 229, 243, 244, 245], "rollout": 17, "simpl": [17, 49, 95, 115, 160, 185, 226, 232], "facilit": 18, "privateuse1": 18, "via": [18, 266], "guard": [18, 196], "serial": [18, 177], "deseri": 18, "other": [18, 23, 100, 102, 104, 173, 189], "improv": [18, 120, 189, 215, 282], "user": [18, 86, 253, 289], "renam": 18, "name": [18, 146, 147, 196], "properti": 18, "relat": [18, 42, 192, 239], "pil": 19, "crop": 19, "combin": [20, 143, 153], "dataparallel": [20, 49, 61, 93, 122, 153], "rpc": [20, 134, 154, 181, 182, 183, 207, 213, 265], "framework": [20, 182, 183], "beta": [21, 24, 159, 160, 184, 205, 206, 215, 219, 252, 255, 257, 281], "acceler": [21, 103, 113, 169, 200, 267, 284], "bert": [21, 284], "semi": [21, 28, 284], "structur": [21, 284], "2": [21, 24, 48, 49, 90, 115, 142, 167, 175, 176, 189, 190, 199, 227, 229, 232, 241, 243, 244, 245, 263, 282, 284], "4": [21, 24, 48, 90, 115, 176, 178, 189, 190, 227, 229, 232, 241, 243, 244, 245, 263, 282, 284], "sparsiti": [21, 278, 284], "problem": [21, 284], "solv": [21, 284], "intro": [21, 202, 284], "establish": 21, "baselin": 21, "prune": [21, 177, 284], "spars": [21, 275, 278, 284], "infer": [21, 46, 122, 128, 178, 215, 216, 226, 236, 242, 249, 255], "torchrec": [23, 197, 198], "shard": [23, 65, 139, 140, 141, 143, 197, 260], "instal": [23, 87, 96, 115, 178, 197, 217, 240, 270, 282], "embed": [23, 102, 112, 197], "distributedmodelparallel": [23, 197], "multiprocess": 23, "tabl": [23, 121, 131], "wise": 23, "static": [24, 106, 217, 256], "quantiz": [24, 178, 217, 263, 268, 282], "eager": 24, "1": [24, 48, 90, 115, 142, 167, 175, 176, 189, 190, 196, 199, 227, 229, 232, 241, 243, 244, 245, 263, 282], "architectur": 24, "helper": [24, 214, 278], "3": [24, 48, 49, 90, 115, 142, 175, 176, 189, 190, 227, 229, 232, 241, 243, 244, 245, 263, 282], "dataset": [24, 30, 37, 49, 56, 98, 102, 104, 113, 127, 199, 245], "loader": [24, 93], "imagenet": 24, "post": [24, 282], "5": [24, 48, 115, 189, 190, 227, 232, 241, 245, 263], "awar": 24, "speedup": [24, 194, 226], "supervis": 28, "learn": [28, 38, 39, 50, 62, 90, 106, 107, 108, 121, 128, 134, 163, 173, 179, 180, 181, 183, 189, 227, 229, 232, 240, 243, 244, 245, 255, 259, 266], "usb": 28, "built": [28, 263], "upon": 28, "freematch": 28, "softmatch": 28, "cifar": [28, 105], "10": [28, 105, 170], "onli": [28, 216, 217], "40": 28, "label": [28, 192], "specif": [28, 192, 242], "imbalanc": 28, "algorithm": [28, 180], "audio": [29, 30, 31, 32, 33, 34], "augment": [29, 31, 87, 110, 242], "featur": [31, 32, 96, 110, 128, 140, 189, 192, 197, 216, 217], "extract": [32, 192], "o": 33, "resampl": 34, "automat": [35, 109, 159, 226, 256], "differenti": [35, 47, 109, 159], "tensor": [35, 44, 53, 67, 78, 85, 98, 103, 109, 121, 131, 134, 143, 144, 146, 170, 184, 200, 206, 239, 242, 256, 278, 280], "disabl": [35, 242], "track": [35, 150, 190], "more": [35, 95, 103, 144, 161, 162, 181, 189, 208, 227, 229, 232, 240, 243, 244, 245], "option": [35, 47, 49, 125, 199, 201, 229, 259, 282, 289], "read": [35, 36, 37, 40, 45, 47, 58, 60, 61, 114, 115, 117, 118, 120, 125, 151, 152, 156, 192, 223, 242, 263, 275, 277, 278], "jacobian": [35, 162, 167], "product": [35, 162, 167, 184], "further": [35, 36, 37, 40, 45, 47, 58, 60, 61, 114, 115, 117, 118, 120, 125, 128, 151, 152, 156, 200, 242, 263, 275, 277, 278], "layer": [36, 96, 100, 143, 149, 200, 242], "nn": [36, 72, 73, 83, 90, 100, 113, 121, 122, 129, 130, 177, 200, 231, 239, 256], "flatten": 36, "linear": [36, 100, 107, 113], "relu": [36, 263], "sequenti": [36, 113], "softmax": [36, 107, 277], "dataload": [37, 56, 98, 104, 113], "iter": [37, 54, 56, 177], "visual": [37, 96, 102, 115, 128, 170, 185, 187, 190, 201, 223, 225], "file": [37, 54, 115, 122, 151, 185, 237, 266], "__len__": 37, "__getitem__": 37, "prepar": [37, 54, 146, 147, 185, 189, 221, 222, 263, 275, 276, 277, 289], "through": [37, 56, 90, 229, 263], "thi": [39, 62, 140, 170, 200, 283], "guid": [39, 141, 173, 242], "hyperparamet": [40, 93, 179, 180], "quickstart": 41, "save": [41, 42, 58, 60, 115, 122, 140, 144, 150, 151, 153, 163, 170, 208, 209, 226, 227, 234, 235, 236, 237, 243, 267], "weight": [42, 51, 57, 70, 121, 217], "attribut": [44, 53, 96, 225], "bridg": [44, 53, 103], "arrai": [44, 53], "totensor": 45, "lambda": 45, "fast": [46, 80, 215], "better": [46, 270, 279], "A": [47, 50, 62, 95, 96, 106, 149, 173, 223, 226, 235, 241, 243], "gentl": 47, "background": [47, 173], "usag": [47, 148, 149, 159, 170, 173, 194, 196, 215, 249, 253, 289], "vector": [47, 157, 162, 167], "calculu": 47, "exclus": 47, "dag": 47, "classifi": [48, 107, 115, 146, 192], "about": [48, 233], "cifar10": 48, "convolut": [48, 100, 149, 156, 193, 242], "multipl": [48, 122, 177, 237], "where": [48, 57, 80, 192, 277], "dummi": 49, "8": [49, 227, 241], "summari": [49, 131, 140, 184, 224], "deep": [50, 62, 106, 107, 108, 133], "60": [50, 62], "minut": [50, 62], "blitz": [50, 62], "backprop": 51, "chatbot": 54, "preprocess": [54, 127, 163, 178], "format": [54, 115, 164, 209, 242, 266], "trim": 54, "seq2seq": [54, 185], "encod": [54, 112, 185], "decod": [54, 185], "procedur": 54, "mask": [54, 200, 277], "singl": [54, 166], "greedi": 54, "my": 54, "text": [54, 126, 127, 191], "googl": 55, "colab": 55, "version": [55, 167], "drive": 55, "enabl": [55, 141, 242, 264, 266, 269], "compos": [56, 162, 253], "afterword": 56, "torchvis": [56, 81, 199], "adversari": [57, 80], "fault": 58, "toler": 58, "torchrun": [58, 153], "grace": 58, "restart": 58, "process": [58, 60, 153, 175, 176, 181], "group": [58, 60, 176], "provid": 58, "variabl": [58, 142, 242], "snapshot": [58, 170], "trainer": 58, "constructor": [58, 242], "resum": [58, 122, 226], "script": [58, 90, 169, 247, 259], "video": [59, 178, 256], "section": 59, "multi": [60, 84, 93, 145], "ddp": [60, 61, 134, 151, 153, 242], "job": [60, 232, 266], "you": [61, 102, 143, 173, 200, 225, 255, 259, 266], "prefer": 61, "over": 61, "dp": 61, "goal": 62, "segment": [63, 64, 199, 256], "deeplabv3": [63, 64], "android": [63, 204, 219, 221, 274, 287, 289], "io": [64, 219, 222, 273, 274, 287], "primit": 65, "commun": [65, 87, 93, 155, 207], "launcher": 65, "appli": [65, 143, 259, 282, 283], "To": 65, "scale": [65, 143, 152, 184], "develop": 65, "control": [70, 114, 121, 184, 196, 242, 254, 259], "flow": [70, 114, 121, 196, 256], "share": [70, 121], "warm": [77, 121], "threat": 80, "sign": 80, "attack": 80, "under": 80, "fgsm": 80, "accuraci": [80, 93, 161, 217], "v": [80, 131, 162, 173, 276], "epsilon": 80, "sampl": [80, 147, 172, 223], "finetun": [81, 128, 199], "former": 86, "holist": [87, 88], "trace": [87, 88, 90, 114, 160, 194, 223, 232, 256, 287], "analysi": [87, 88], "hta": 87, "tempor": 87, "breakdown": 87, "idl": 87, "durat": 87, "overlap": 87, "counter": 87, "memori": [87, 110, 120, 144, 149, 164, 170, 173, 180, 208, 215, 232, 242, 259], "bandwidth": 87, "queue": 87, "length": [87, 242], "launch": [87, 175, 223], "statist": 87, "diff": 88, "syntax": 90, "inform": [90, 161], "part": [90, 110], "pure": 90, "top": 90, "level": [90, 95, 110, 146, 147], "tune": [93, 140, 215, 217, 242], "rai": 93, "configur": [93, 145, 223, 250], "search": 93, "space": 93, "youtub": [94, 97, 99], "seri": [94, 99], "fundament": 95, "turn": [95, 146], "off": 95, "On": 95, "profil": [95, 120, 160, 161, 189, 213, 223, 232, 265], "advanc": [95, 106, 140, 155, 189, 203, 226, 253, 276], "topic": [95, 155, 226], "detail": [95, 286], "high": [95, 184], "understand": [96, 131], "captum": [96, 225], "first": [96, 114, 171], "occlus": 96, "gradcam": 96, "insight": 96, "common": [100, 148, 256], "type": [100, 103, 197, 226, 256], "recurr": [100, 156], "manipul": [100, 103], "activ": [100, 104, 279], "tensorboard": [102, 189, 190, 240], "befor": [102, 192, 225], "show": 102, "scalar": [102, 240], "resourc": [102, 104, 138, 173, 175], "random": [103, 106], "math": [103, 215], "logic": 103, "brief": 103, "broadcast": 103, "alter": 103, "copi": [103, 173], "chang": [103, 228], "number": 103, "dimens": [103, 215], "per": [104, 172], "epoch": 104, "knowledg": 105, "distil": 105, "util": [105, 177, 180, 200, 203, 227, 239, 242, 252], "cross": [105, 200], "entropi": 105, "cosin": 105, "minim": 105, "intermedi": [105, 150, 242], "regressor": 105, "dynam": [106, 196, 254], "decis": 106, "bi": 106, "lstm": [106, 110, 156], "crf": 106, "versu": 106, "toolkit": 106, "condit": 106, "field": 106, "discuss": 106, "exercis": [106, 110, 112, 125, 146, 147, 185, 201], "tag": [106, 110], "block": [107, 200, 227], "affin": 107, "map": 107, "non": [107, 131, 173, 196, 206, 242], "probabl": 107, "compon": [107, 161], "logist": 107, "regress": 107, "bag": [107, 112], "word": [107, 112], "nlp": [108, 146, 147, 168, 185], "librari": [109, 126, 192, 204, 229, 232, 242, 243, 244, 245, 259], "reshap": 109, "sequenc": [110, 143, 185], "long": [110, 232], "short": [110, 223], "term": 110, "speech": [110, 188, 191, 256], "tagger": 110, "charact": [110, 146, 147], "lexic": 112, "semant": [112, 275, 276], "dens": [112, 184], "n": 112, "gram": 112, "languag": [112, 129, 130], "continu": 112, "realli": 113, "mnist": 113, "net": 113, "scratch": [113, 146, 147, 168, 185], "without": [113, 289], "refactor": [113, 114], "add": [113, 142, 199, 252], "valid": [113, 242], "fit": [113, 170], "get_data": 113, "switch": [113, 242], "cnn": 113, "close": 113, "thought": 113, "attempt": 114, "suggest": [114, 196], "patch": [114, 192], "cond": 114, "depend": [115, 117, 184, 196, 197], "netron": 115, "6": [115, 189, 190, 227, 232, 241, 263], "runtim": [115, 242, 255, 259], "7": [115, 189, 227, 232, 241, 263], "compar": [115, 227], "ones": 115, "overrid": 118, "exist": [118, 164], "debug": [120, 161, 242, 266], "print": 120, "state_dict": [122, 244], "recommend": [122, 146, 173, 194], "entir": 122, "program": [122, 196], "One": [122, 237], "warmstart": [122, 243], "differ": [122, 148, 199, 243], "across": [122, 234], "cpu": [122, 140, 144, 160, 161, 173, 203, 216, 223, 242, 249, 253, 259, 270, 279], "t5": [124, 140], "base": [124, 213, 265, 287], "summar": 124, "sentiment": 124, "classif": [124, 126, 192, 256], "templat": 125, "torchtext": [126, 127, 129, 130], "vision": [128, 242], "few": 128, "predict": [128, 192], "convnet": 128, "fix": [128, 196], "extractor": 128, "requires_grad": 131, "retain_grad": 131, "leaf": 131, "refer": [131, 201, 263], "dive": 133, "fsdp2": [134, 141], "tp": [134, 143], "devicemesh": [134, 211], "domain": 135, "ecosystem": 136, "welcom": 138, "fulli": [139, 140, 141, 143, 200], "fsdp": [139, 140], "recap": 140, "fine": 140, "hf": 140, "precis": [140, 141, 151, 226, 242], "intial": 140, "strategi": [140, 145], "prefetch": [140, 141], "stream": 140, "rank0": 140, "clip": [141, 226], "dtensor": 141, "dict": 141, "dcp": [141, 208, 209], "fsdp1": 141, "migrat": 141, "libuv": 142, "tcpstore": 142, "benchmark": [142, 193, 205, 227], "impact": 142, "exit": 142, "rout": 142, "use_libuv": 142, "fals": 142, "0": [142, 196, 277], "init_method": 142, "processgroup": 142, "larg": 143, "layernorm": 143, "rmsnorm": 143, "hook": [144, 170, 201], "typic": 144, "than": 144, "concept": [144, 196], "pack": [144, 200], "unpack": 144, "some": 144, "unconvent": 144, "return": 144, "int": 144, "tupl": 144, "str": 144, "disk": 144, "na": 145, "ax": 145, "torchx": 145, "app": [145, 289], "runner": 145, "searchspac": 145, "metric": [145, 282], "optimizationconfig": 145, "choos": [145, 259], "schedul": [145, 206], "acknowledg": 145, "rnn": [146, 147, 183], "plot": [146, 147, 185], "captur": [148, 160, 170, 178, 282], "larger": 148, "log": [148, 161, 163, 240], "flag": 148, "address": [148, 256], "certain": 148, "limit": [148, 253], "aotautograd": 148, "recompil": [148, 254], "reason": [148, 233], "fuse": [149, 170, 184, 193, 197, 242], "norm": [149, 193, 242], "formula": [149, 253], "batchnorm": 149, "out": [149, 193, 245, 283], "doubl": 150, "output": [150, 197], "real": [151, 178], "world": 151, "cloud": 151, "enough": 151, "multinod": 152, "local": 152, "global": [152, 177], "rank": 152, "heteregen": 152, "troubleshoot": [152, 178, 226], "between": [153, 277], "case": [153, 242], "skew": 153, "speed": [153, 215], "point": [155, 239], "collect": [155, 179, 227], "own": 155, "ring": 155, "allreduc": 155, "dqn": [156, 180], "mlp": 156, "q": [156, 180], "ensembl": 157, "vmap": [157, 288], "forc": 158, "align": 158, "wav2vec2": [158, 188], "fx": [160, 194, 282], "symbol": [160, 196], "interpret": [160, 219, 225, 274, 287], "investig": 160, "resnet18": [160, 193], "inductor": [161, 250, 269], "determin": 161, "error": [161, 196, 226, 256], "hessian": 162, "hvp": 162, "vhp": 162, "revers": 162, "jacrev": 162, "jacfwd": 162, "functorch": 162, "mario": 163, "plai": 163, "rl": 163, "agent": 163, "definit": 163, "act": 163, "cach": [163, 171, 250, 251], "recal": 163, "td": 163, "all": [163, 170, 200, 226, 232, 242], "let": 163, "channel": 164, "last": 164, "gain": [164, 254], "convert": [164, 263, 272, 281], "machin": 166, "best": [166, 194, 197], "practic": [166, 173, 189, 194, 197], "tangent": 167, "ntk": 167, "contract": 167, "nvfuser": 169, "dure": [170, 242], "disclaim": 170, "techniqu": 170, "register_post_accumulate_grad_hook": 170, "everyth": [170, 199], "line": 170, "hand": 171, "ar": [171, 200], "citizen": 171, "concaten": 171, "remov": [171, 177], "grad": [172, 242, 277], "effici": [172, 219, 242, 275], "wai": 172, "good": 173, "non_block": 173, "pin_memori": 173, "preambl": 173, "pageabl": 173, "asynchron": [173, 181, 208, 242], "synchron": [173, 242], "true": [173, 231, 242], "cudamemcpyasync": 173, "perspect": 173, "synergi": 173, "direct": [173, 207], "mp": 173, "consider": 173, "partit": 175, "main": 175, "cpp": 176, "subclass": [176, 184, 239], "expos": 176, "re": 177, "raspberri": 178, "pi": 178, "30": 178, "fp": 178, "opencv": 178, "choic": 178, "mobilenetv2": [178, 272, 281], "It": 178, "reinforc": [179, 180, 183], "ppo": 179, "server": [181, 182], "cartpol": 181, "solver": 181, "rref": 183, "dot": 184, "attent": [184, 185, 200], "sdpa": 184, "explicit": [184, 214], "hardwar": 184, "causal": 184, "self": 184, "nestedtensor": 184, "attn_bia": 184, "spatial": 187, "depict": 187, "stn": 187, "recognit": [188, 256], "With": 189, "event": 189, "analyz": [189, 232, 266], "help": 189, "amd": 189, "projector": 190, "assess": 190, "tacotron2": 191, "whole": 192, "slide": 192, "tiatoolbox": 192, "clean": 192, "download": 192, "patchpredictor": 192, "pathologi": 192, "here": 192, "fuser": 193, "pattern": [193, 263], "match": [193, 242], "fusion": [193, 214, 263], "nest": [194, 200, 280], "demonstr": [194, 256], "torchscript": 194, "torchdynamo": [194, 251, 256], "nightli": 195, "break": [196, 256], "strict": [196, 256], "constraint": [196, 263], "special": 196, "dim": 196, "violat": 196, "_check": 196, "ir": 196, "decomposit": 196, "exportdb": 196, "recsi": 197, "embeddingbag": 197, "embeddingbagcollect": 197, "planner": 197, "lazyawait": 197, "anatomi": 197, "lookup": 197, "detect": 199, "pennfudan": 199, "pretrain": 199, "modifi": [199, 226], "backbon": 199, "instanc": 199, "replac": 200, "me": 200, "introduc": [200, 274], "abov": 200, "octob": 200, "2024": 200, "multiheadattent": 200, "gpt": 200, "one": 200, "row": 200, "longer": 200, "caus": 200, "nan": [200, 226, 277], "flexattent": 200, "njt": 200, "project": 200, "swiglu": 200, "feed": 200, "leverag": 203, "intel": [203, 216, 217, 223, 242, 249, 259, 270], "matrix": 203, "amx": 203, "guidelin": 203, "workload": [203, 213, 223, 242, 265], "can": 203, "confirm": 203, "being": 203, "prebuilt": 204, "see": [205, 253, 280], "also": [205, 253, 280], "lr": 206, "happen": 206, "tensorpip": 207, "even": 208, "pin": 208, "commdebugmod": 210, "hsdp": 211, "solut": [211, 256], "horizont": 214, "foreach_map": 214, "aw": 215, "graviton": 215, "processor": 215, "bfloat16": [215, 216], "openbla": 215, "smaller": 215, "alloc": [215, 242, 259], "overhead": 215, "linux": 215, "transpar": 215, "huge": 215, "page": 215, "thp": 215, "float32": 216, "float16": 216, "eas": 217, "compressor": 217, "fp8": 217, "pt2e": 217, "driven": 217, "mobil": [219, 220, 224, 247, 287], "recip": [220, 221, 222, 224, 230, 247, 261], "instrument": 223, "technologi": 223, "itt": 223, "vtune": 223, "xpu": [223, 270], "showcas": 223, "begin": 225, "final": 225, "default": [226, 228], "gradscal": 226, "e": 226, "g": 226, "amp": [226, 242], "minor": 226, "inf": 226, "mismatch": 226, "mai": 226, "manifest": 226, "cudnn_status_bad_param": 226, "timeit": 227, "timer": [227, 241], "autorang": 227, "fuzz": 227, "instruct": [227, 241], "count": [227, 241], "callgrind": [227, 241], "necessari": [229, 232, 243, 244, 245], "specifi": 229, "tip": 231, "mmap": 231, "meta": 231, "load_state_dict": [231, 239], "assign": 231, "instanti": 232, "resnet": 232, "consumpt": 232, "examin": 232, "stack": 232, "And": [235, 236], "swap_tensor": 239, "quick": [241, 259], "wall": 241, "blocked_autorang": 241, "snippet": 241, "collect_callgrind": 241, "delv": 241, "deeper": 241, "b": [241, 243], "footnot": 241, "calcul": 242, "bia": 242, "directli": 242, "follow": 242, "none": 242, "instead": 242, "zero_grad": 242, "channels_last": 242, "uniform": 242, "access": [242, 244, 259, 277], "numa": [242, 259], "openmp": [242, 259], "libiomp": 242, "core": [242, 272], "cudnn": 242, "auto": 242, "tuner": 242, "avoid": 242, "unnecessari": 242, "prealloc": 242, "skip": [242, 286], "reduc": [242, 246], "accumul": 242, "find_unused_paramet": 242, "balanc": 242, "zero": 245, "while": 245, "cold": 246, "region": 246, "fp32": 249, "bf16": 249, "torchinductor_fx_graph_cach": 250, "torchinductor_autograd_cach": 250, "torchinductor_cache_dir": 250, "torchinductor_fx_graph_remote_cach": 250, "torchinductor_autograd_remote_cach": 250, "torchinductor_autotune_remote_cach": 250, "torchinductor_force_disable_cach": 250, "offer": 251, "end": [251, 266], "mega": 251, "modular": 251, "torchinductor": 251, "triton": [251, 253], "remot": 251, "rewrit": 252, "mul": 252, "triton_op": 253, "fallback": 253, "flopcount": 253, "set_stanc": 254, "descript": 254, "prevent": 254, "measur": 254, "crash": 254, "sooner": 254, "aotinductor": 255, "challeng": 256, "them": 256, "No": 256, "caption": 256, "cannot": 256, "mutat": 256, "frozen": 256, "promptabl": 256, "torch_log": 257, "xeon": 259, "run_cpu": 259, "Will": 259, "command": 259, "explan": 259, "prototyp": [263, 267, 268, 272, 273, 274, 284, 287], "backendconfig": 263, "deriv": 263, "each": 263, "dtypeconfig": 263, "conv": 263, "qconfigmap": 263, "satisfi": 263, "faulti": 263, "rotat": 264, "approach": 264, "flight": 266, "stuck": 266, "retriev": 266, "dump": 266, "gpudirect": 267, "torchao": 268, "wrapper": [269, 289], "window": 270, "softwar": 270, "altern": 270, "llvm": 270, "ml": 272, "lite": 274, "workflow": [274, 289], "adagrad": 275, "maskedtensor": [275, 276, 277, 278], "simpler": 275, "origin": 275, "maskedarrai": 276, "reduct": [276, 278], "index": 277, "slice": 277, "distinguish": 277, "anoth": 277, "x": 277, "yield": 277, "nansum": 277, "nanmean": 277, "safe": 277, "miss": 277, "coo": 278, "csr": 278, "unari": 278, "binari": 278, "appendix": 278, "max": 279, "autotun": 279, "nnapi": 281, "openvino": 282, "nncf": 282, "lower": 282, "represent": 282, "autoload": 283, "tree": 283, "mechan": 283, "so": 288, "vulkan": 289, "desktop": 289, "sdk": 289, "java": 289, "upload": 289, "unstabl": 290}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 60}, "alltitles": {"ONNX Live Tutorial": [[0, "onnx-live-tutorial"]], "TorchRL objectives: Coding a DDPG loss": [[1, "torchrl-objectives-coding-a-ddpg-loss"]], "Overview": [[1, "overview"], [21, "overview"], [114, "overview"], [118, "overview"], [125, "overview"], [148, "overview"], [156, "overview"], [161, "overview"], [184, "overview"], [217, "overview"], [242, "overview"], [266, "overview"]], "Prerequisites": [[1, "prerequisites"], [105, "prerequisites"], [114, "prerequisites"], [118, "prerequisites"], [178, "prerequisites"], [210, "prerequisites"], [214, "prerequisites"], [232, "prerequisites"], [246, "prerequisites"], [250, "prerequisites"], [251, "prerequisites"], [253, "prerequisites"], [254, "prerequisites"], [255, "prerequisites"], [256, "prerequisites"], [266, "prerequisites"], [282, "prerequisites"]], "Imports and setup": [[1, "imports-and-setup"]], "TorchRL LossModule": [[1, "torchrl-lossmodule"]], "The __init__ method": [[1, "the-init-method"]], "The value estimator loss method": [[1, "the-value-estimator-loss-method"]], "The actor loss method": [[1, "the-actor-loss-method"]], "The value loss method": [[1, "the-value-loss-method"]], "Putting things together in a forward call": [[1, "putting-things-together-in-a-forward-call"]], "Environment": [[1, "environment"], [156, "environment"], [163, "environment"]], "Transforms": [[1, "transforms"], [45, "transforms"], [56, "transforms"], [179, "transforms"]], "Parallel execution": [[1, "parallel-execution"]], "Normalization of the observations": [[1, "normalization-of-the-observations"]], "Normalization stats": [[1, "normalization-stats"]], "Building the model": [[1, "building-the-model"]], "Exploration": [[1, "exploration"]], "Data collector": [[1, "data-collector"], [179, "data-collector"]], "Evaluator: building your recorder object": [[1, "evaluator-building-your-recorder-object"]], "Replay buffer": [[1, "replay-buffer"], [179, "replay-buffer"]], "Replay buffer storage and batch size": [[1, "replay-buffer-storage-and-batch-size"]], "Loss module construction": [[1, "loss-module-construction"]], "Target network updater": [[1, "target-network-updater"]], "Optimizer": [[1, "optimizer"], [40, "optimizer"], [104, "optimizer"]], "Time to train the policy": [[1, "time-to-train-the-policy"]], "Experiment results": [[1, "experiment-results"]], "Conclusion": [[1, "conclusion"], [2, "conclusion"], [3, "conclusion"], [4, "conclusion"], [5, "conclusion"], [7, "conclusion"], [8, "conclusion"], [17, "conclusion"], [18, "conclusion"], [19, "conclusion"], [21, "conclusion"], [24, "conclusion"], [54, "conclusion"], [87, "conclusion"], [105, "conclusion"], [114, "conclusion"], [115, "conclusion"], [118, "conclusion"], [125, "conclusion"], [131, "conclusion"], [142, "conclusion"], [143, "conclusion"], [148, "conclusion"], [156, "conclusion"], [160, "conclusion"], [161, "conclusion"], [163, "conclusion"], [164, "conclusion"], [170, "conclusion"], [173, "conclusion"], [175, "conclusion"], [184, "conclusion"], [194, "conclusion"], [196, "conclusion"], [197, "conclusion"], [200, "conclusion"], [201, "conclusion"], [203, "conclusion"], [206, "conclusion"], [208, "conclusion"], [209, "conclusion"], [210, "conclusion"], [211, "conclusion"], [214, "conclusion"], [215, "conclusion"], [231, "conclusion"], [239, "conclusion"], [242, "conclusion"], [246, "conclusion"], [250, "conclusion"], [251, "conclusion"], [252, "conclusion"], [253, "conclusion"], [254, "conclusion"], [255, "conclusion"], [256, "conclusion"], [257, "conclusion"], [259, "conclusion"], [264, "conclusion"], [266, "conclusion"], [267, "conclusion"], [268, "conclusion"], [269, "conclusion"], [270, "conclusion"], [275, "conclusion"], [276, "conclusion"], [277, "conclusion"], [278, "conclusion"], [279, "conclusion"], [280, "conclusion"], [282, "conclusion"], [283, "conclusion"], [284, "conclusion"]], "Next Steps": [[1, "next-steps"], [178, "next-steps"]], "Autograd in C++ Frontend": [[2, "autograd-in-c-frontend"]], "Basic autograd operations": [[2, "basic-autograd-operations"]], "Computing higher-order gradients in C++": [[2, "computing-higher-order-gradients-in-c"]], "Using custom autograd function in C++": [[2, "using-custom-autograd-function-in-c"]], "Translating autograd code from Python to C++": [[2, "translating-autograd-code-from-python-to-c"]], "Using CUDA Graphs in PyTorch C++ API": [[3, "using-cuda-graphs-in-pytorch-c-api"]], "Getting Started": [[3, "getting-started"], [87, "getting-started"], [216, "getting-started"], [217, "getting-started"]], "Training Results": [[3, "training-results"]], "Custom C++ and CUDA Operators": [[4, "custom-c-and-cuda-operators"]], "Setting up the Build System": [[4, "setting-up-the-build-system"], [5, "setting-up-the-build-system"]], "Defining the custom op and adding backend implementations": [[4, "defining-the-custom-op-and-adding-backend-implementations"], [5, "defining-the-custom-op-and-adding-backend-implementations"]], "Defining an operator": [[4, "defining-an-operator"]], "Registering backend implementations for an operator": [[4, "registering-backend-implementations-for-an-operator"]], "Adding torch.compile support for an operator": [[4, "adding-torch-compile-support-for-an-operator"]], "Setting up hybrid Python/C++ registration": [[4, "setting-up-hybrid-python-c-registration"]], "Adding training (autograd) support for an operator": [[4, "adding-training-autograd-support-for-an-operator"]], "Testing an operator": [[4, "testing-an-operator"]], "Creating mutable operators": [[4, "creating-mutable-operators"]], "Custom SYCL Operators": [[5, "custom-sycl-operators"]], "Create a Python Interface": [[5, "create-a-python-interface"]], "Initialize Package": [[5, "initialize-package"]], "Testing SYCL extension operator": [[5, "testing-sycl-extension-operator"]], "Custom C++ and CUDA Extensions": [[7, "custom-c-and-cuda-extensions"]], "Motivation and Example": [[7, "motivation-and-example"]], "Writing a C++ Extension": [[7, "writing-a-c-extension"]], "Building with setuptools": [[7, "building-with-setuptools"]], "Writing the C++ Op": [[7, "writing-the-c-op"]], "Forward Pass": [[7, "forward-pass"]], "Backward Pass": [[7, "backward-pass"]], "Binding to Python": [[7, "binding-to-python"]], "Using Your Extension": [[7, "using-your-extension"]], "Performance Comparison": [[7, "performance-comparison"], [7, "id4"]], "Performance on GPU Devices": [[7, "performance-on-gpu-devices"]], "JIT Compiling Extensions": [[7, "jit-compiling-extensions"]], "Writing a Mixed C++/CUDA extension": [[7, "writing-a-mixed-c-cuda-extension"]], "Using accessors": [[7, "using-accessors"]], "Integrating a C++/CUDA Operation with PyTorch": [[7, "integrating-a-c-cuda-operation-with-pytorch"]], "Using the PyTorch C++ Frontend": [[8, "using-the-pytorch-c-frontend"]], "Motivation": [[8, "motivation"]], "Writing a Basic Application": [[8, "writing-a-basic-application"]], "Defining the Neural Network Models": [[8, "defining-the-neural-network-models"]], "Module API Basics": [[8, "module-api-basics"]], "Defining a Module and Registering Parameters": [[8, "defining-a-module-and-registering-parameters"]], "Registering Submodules and Traversing the Module Hierarchy": [[8, "registering-submodules-and-traversing-the-module-hierarchy"]], "Running the Network in Forward Mode": [[8, "running-the-network-in-forward-mode"]], "Module Ownership": [[8, "module-ownership"]], "Defining the DCGAN Modules": [[8, "defining-the-dcgan-modules"]], "What was a GAN aGAN?": [[8, "what-was-a-gan-agan"]], "The Generator Module": [[8, "the-generator-module"]], "The Discriminator Module": [[8, "the-discriminator-module"]], "Loading Data": [[8, "loading-data"]], "Writing the Training Loop": [[8, "writing-the-training-loop"]], "Moving to the GPU": [[8, "moving-to-the-gpu"]], "Checkpointing and Recovering the Training State": [[8, "checkpointing-and-recovering-the-training-state"]], "Inspecting Generated Images": [[8, "inspecting-generated-images"]], "Supporting Custom C++ Classes in torch.compile/torch.export": [[9, "supporting-custom-c-classes-in-torch-compile-torch-export"]], "Why do we need to make a Fake Class?": [[9, "why-do-we-need-to-make-a-fake-class"]], "PyTorch Custom Operators": [[10, "pytorch-custom-operators"]], "Authoring a custom operator from Python": [[10, "authoring-a-custom-operator-from-python"]], "Integrating custom C++ and/or CUDA code with PyTorch": [[10, "integrating-custom-c-and-or-cuda-code-with-pytorch"]], "The Custom Operators Manual": [[10, "the-custom-operators-manual"]], "When should I create a Custom Operator?": [[10, "when-should-i-create-a-custom-operator"]], "Why should I create a Custom Operator?": [[10, "why-should-i-create-a-custom-operator"]], "Training Transformer models using Distributed Data Parallel and Pipeline Parallelism": [[11, "training-transformer-models-using-distributed-data-parallel-and-pipeline-parallelism"]], "Registering a Dispatched Operator in C++": [[12, "registering-a-dispatched-operator-in-c"]], "Defining schema and backend implementations": [[12, "defining-schema-and-backend-implementations"]], "For operators that do not need autograd": [[12, "for-operators-that-do-not-need-autograd"]], "In-place or view ops": [[12, "in-place-or-view-ops"]], "Adding autograd support": [[12, "adding-autograd-support"]], "Going beyond autograd": [[12, "going-beyond-autograd"]], "Autocast": [[12, "autocast"]], "Batched": [[12, "batched"]], "Tracer": [[12, "tracer"]], "Extending dispatcher for a new backend in C++": [[13, "extending-dispatcher-for-a-new-backend-in-c"]], "What\u2019s a new backend?": [[13, "what-s-a-new-backend"]], "Get a dispatch key for your backend": [[13, "get-a-dispatch-key-for-your-backend"]], "Get the full list of PyTorch operators": [[13, "get-the-full-list-of-pytorch-operators"]], "Register kernels for the new backend": [[13, "register-kernels-for-the-new-backend"], [18, "register-kernels-for-the-new-backend"]], "Autograd support for the new backend": [[13, "autograd-support-for-the-new-backend"]], "Build an extension": [[13, "build-an-extension"]], "Custom operator support": [[13, "custom-operator-support"]], "JIT support": [[13, "jit-support"]], "Testing your backend against native PyTorch backends": [[13, "testing-your-backend-against-native-pytorch-backends"]], "Backward Compatibility": [[13, "backward-compatibility"]], "Known issues & additional notes": [[13, "known-issues-additional-notes"]], "Future Work": [[13, "future-work"], [18, "future-work"]], "Stay in touch": [[13, "stay-in-touch"]], "Distributed Training with Uneven Inputs Using the Join Context Manager": [[14, "distributed-training-with-uneven-inputs-using-the-join-context-manager"]], "Requirements": [[14, "requirements"], [21, "requirements"], [177, "requirements"], [207, "requirements"], [223, "requirements"], [260, "requirements"], [284, "requirements"]], "What is Join?": [[14, "what-is-join"]], "Using Join with DistributedDataParallel": [[14, "using-join-with-distributeddataparallel"]], "Using Join with DistributedDataParallel and ZeroRedundancyOptimizer": [[14, "using-join-with-distributeddataparallel-and-zeroredundancyoptimizer"]], "Passing Keyword Arguments": [[14, "passing-keyword-arguments"]], "How Does Join Work?": [[14, "how-does-join-work"]], "Joinable": [[14, "joinable"]], "JoinHook": [[14, "joinhook"]], "Join": [[14, "join"]], "Making a Toy Class Work with Join": [[14, "making-a-toy-class-work-with-join"]], "Neural Transfer Using PyTorch": [[15, "neural-transfer-using-pytorch"]], "Introduction": [[15, "introduction"], [57, "introduction"], [65, "introduction"], [96, "id1"], [102, "id1"], [104, "id1"], [142, "introduction"], [173, "introduction"], [189, "introduction"], [192, "introduction"], [203, "introduction"], [227, "introduction"], [229, "introduction"], [232, "introduction"], [243, "introduction"], [244, "introduction"], [245, "introduction"], [250, "introduction"], [251, "introduction"], [264, "introduction"], [269, "introduction"], [270, "introduction"], [278, "introduction"], [279, "introduction"], [282, "introduction"], [286, "introduction"], [289, "introduction"]], "Underlying Principle": [[15, "underlying-principle"]], "Importing Packages and Selecting a Device": [[15, "importing-packages-and-selecting-a-device"]], "Loading the Images": [[15, "loading-the-images"]], "Loss Functions": [[15, "loss-functions"], [100, "loss-functions"]], "Content Loss": [[15, "content-loss"]], "Style Loss": [[15, "style-loss"]], "Importing the Model": [[15, "importing-the-model"]], "Gradient Descent": [[15, "gradient-descent"]], "Creating Extensions Using NumPy and SciPy": [[16, "creating-extensions-using-numpy-and-scipy"]], "Parameter-less example": [[16, "parameter-less-example"]], "Parametrized example": [[16, "parametrized-example"]], "Pendulum: Writing your environment and transforms with TorchRL": [[17, "pendulum-writing-your-environment-and-transforms-with-torchrl"]], "Coding the effect of an action: _step()": [[17, "coding-the-effect-of-an-action-step"]], "Resetting the simulator: _reset()": [[17, "resetting-the-simulator-reset"]], "Environment metadata: env.*_spec": [[17, "environment-metadata-env-spec"]], "Specs shape": [[17, "specs-shape"]], "Reproducible experiments: seeding": [[17, "reproducible-experiments-seeding"]], "Wrapping things together: the EnvBase class": [[17, "wrapping-things-together-the-envbase-class"]], "Testing our environment": [[17, "testing-our-environment"]], "Transforming an environment": [[17, "transforming-an-environment"]], "Writing custom transforms": [[17, "writing-custom-transforms"]], "Executing a rollout": [[17, "executing-a-rollout"]], "Batching computations": [[17, "batching-computations"]], "Training a simple policy": [[17, "training-a-simple-policy"]], "Training loop": [[17, "training-loop"], [156, "training-loop"], [179, "training-loop"], [180, "training-loop"]], "Facilitating New Backend Integration by PrivateUse1": [[18, "facilitating-new-backend-integration-by-privateuse1"]], "What is PrivateUse1?": [[18, "what-is-privateuse1"]], "How to integrate new backend via PrivateUse1": [[18, "how-to-integrate-new-backend-via-privateuse1"]], "Register generator for the new backend": [[18, "register-generator-for-the-new-backend"]], "Register device guard for the new backend": [[18, "register-device-guard-for-the-new-backend"]], "Register serialization and deserialization functions for new backend metadata": [[18, "register-serialization-and-deserialization-functions-for-new-backend-metadata"]], "Other Modules": [[18, "other-modules"]], "How to Improve User Experience with Privateuse1": [[18, "how-to-improve-user-experience-with-privateuse1"]], "Register new backend module to Pytorch": [[18, "register-new-backend-module-to-pytorch"]], "Rename PrivateUse1 to a custom name for the new backend": [[18, "rename-privateuse1-to-a-custom-name-for-the-new-backend"]], "Generate methods and properties related to the new backend": [[18, "generate-methods-and-properties-related-to-the-new-backend"]], "Custom Python Operators": [[19, "custom-python-operators"]], "Example: Wrapping PIL\u2019s crop into a custom operator": [[19, "example-wrapping-pil-s-crop-into-a-custom-operator"]], "Adding training support for crop": [[19, "adding-training-support-for-crop"]], "Testing Python Custom operators": [[19, "testing-python-custom-operators"]], "Mutable Python Custom operators": [[19, "mutable-python-custom-operators"]], "Combining Distributed DataParallel with Distributed RPC Framework": [[20, "combining-distributed-dataparallel-with-distributed-rpc-framework"]], "(beta) Accelerating BERT with semi-structured (2:4) sparsity": [[21, "beta-accelerating-bert-with-semi-structured-2-4-sparsity"]], "What problem does semi-structured sparsity solve?": [[21, "what-problem-does-semi-structured-sparsity-solve"], [284, "what-problem-does-semi-structured-sparsity-solve"]], "Intro & Setup": [[21, "intro-setup"], [284, "intro-setup"]], "Establishing a baseline": [[21, "establishing-a-baseline"]], "Pruning BERT to be 2:4 sparse": [[21, "pruning-bert-to-be-2-4-sparse"], [284, "pruning-bert-to-be-2-4-sparse"]], "Accelerating 2:4 sparse models for inference": [[21, "accelerating-2-4-sparse-models-for-inference"]], "Computation times": [[22, "computation-times"], [43, "computation-times"], [52, "computation-times"], [69, "computation-times"], [75, "computation-times"], [79, "computation-times"], [91, "computation-times"], [101, "computation-times"], [111, "computation-times"], [119, "computation-times"], [123, "computation-times"], [186, "computation-times"], [238, "computation-times"], [248, "computation-times"], [262, "computation-times"], [285, "computation-times"]], "Exploring TorchRec sharding": [[23, "exploring-torchrec-sharding"]], "Installation": [[23, "installation"], [96, "installation"], [217, "installation"], [240, "installation"]], "Distributed Setup": [[23, "distributed-setup"]], "Constructing our embedding model": [[23, "constructing-our-embedding-model"]], "DistributedModelParallel in multiprocessing": [[23, "distributedmodelparallel-in-multiprocessing"]], "Multiprocessing Execution": [[23, "multiprocessing-execution"]], "Table Wise Sharding": [[23, "table-wise-sharding"]], "Explore other sharding modes": [[23, "explore-other-sharding-modes"]], "(beta) Static Quantization with Eager Mode in PyTorch": [[24, "beta-static-quantization-with-eager-mode-in-pytorch"]], "1. Model architecture": [[24, "model-architecture"]], "2. Helper functions": [[24, "helper-functions"]], "3. Define dataset and data loaders": [[24, "define-dataset-and-data-loaders"]], "ImageNet Data": [[24, "imagenet-data"]], "4. Post-training static quantization": [[24, "post-training-static-quantization"]], "5. Quantization-aware training": [[24, "quantization-aware-training"]], "Speedup from quantization": [[24, "speedup-from-quantization"]], "Semi-Supervised Learning using USB built upon PyTorch": [[28, "semi-supervised-learning-using-usb-built-upon-pytorch"]], "Introduction to FreeMatch and SoftMatch in Semi-Supervised Learning": [[28, "introduction-to-freematch-and-softmatch-in-semi-supervised-learning"]], "Use USB to Train FreeMatch/SoftMatch on CIFAR-10 with only 40 labels": [[28, "use-usb-to-train-freematch-softmatch-on-cifar-10-with-only-40-labels"]], "Use USB to Train SoftMatch with specific imbalanced algorithm on imbalanced CIFAR-10": [[28, "use-usb-to-train-softmatch-with-specific-imbalanced-algorithm-on-imbalanced-cifar-10"]], "Audio Data Augmentation": [[29, "audio-data-augmentation"]], "Audio Datasets": [[30, "audio-datasets"]], "Audio Feature Augmentation": [[31, "audio-feature-augmentation"]], "Audio Feature Extractions": [[32, "audio-feature-extractions"]], "Audio I/O": [[33, "audio-i-o"]], "Audio Resampling": [[34, "audio-resampling"]], "Automatic Differentiation with torch.autograd": [[35, "automatic-differentiation-with-torch-autograd"]], "Tensors, Functions and Computational graph": [[35, "tensors-functions-and-computational-graph"]], "Computing Gradients": [[35, "computing-gradients"]], "Disabling Gradient Tracking": [[35, "disabling-gradient-tracking"]], "More on Computational Graphs": [[35, "more-on-computational-graphs"]], "Optional Reading: Tensor Gradients and Jacobian Products": [[35, "optional-reading-tensor-gradients-and-jacobian-products"]], "Further Reading": [[35, "further-reading"], [36, "further-reading"], [37, "further-reading"], [40, "further-reading"], [45, "further-reading"], [58, "further-reading"], [60, "further-reading"], [61, "further-reading"], [120, "further-reading"], [125, "further-reading"], [151, "further-reading"], [152, "further-reading"], [156, "further-reading"], [242, "further-reading"], [263, "further-reading"], [275, "further-reading"], [277, "further-reading"], [278, "further-reading"]], "Build the Neural Network": [[36, "build-the-neural-network"]], "Get Device for Training": [[36, "get-device-for-training"]], "Define the Class": [[36, "define-the-class"]], "Model Layers": [[36, "model-layers"]], "nn.Flatten": [[36, "nn-flatten"]], "nn.Linear": [[36, "nn-linear"]], "nn.ReLU": [[36, "nn-relu"]], "nn.Sequential": [[36, "nn-sequential"]], "nn.Softmax": [[36, "nn-softmax"]], "Model Parameters": [[36, "model-parameters"]], "Datasets & DataLoaders": [[37, "datasets-dataloaders"]], "Loading a Dataset": [[37, "loading-a-dataset"]], "Iterating and Visualizing the Dataset": [[37, "iterating-and-visualizing-the-dataset"]], "Creating a Custom Dataset for your files": [[37, "creating-a-custom-dataset-for-your-files"]], "__init__": [[37, "init"]], "__len__": [[37, "len"]], "__getitem__": [[37, "getitem"]], "Preparing your data for training with DataLoaders": [[37, "preparing-your-data-for-training-with-dataloaders"]], "Iterate through the DataLoader": [[37, "iterate-through-the-dataloader"]], "Learn the Basics": [[38, "learn-the-basics"], [39, "learn-the-basics"]], "Running the Tutorial Code": [[39, "running-the-tutorial-code"], [99, "running-the-tutorial-code"]], "How to Use this Guide": [[39, "how-to-use-this-guide"]], "Optimizing Model Parameters": [[40, "optimizing-model-parameters"]], "Prerequisite Code": [[40, "prerequisite-code"]], "Hyperparameters": [[40, "hyperparameters"]], "Optimization Loop": [[40, "optimization-loop"]], "Loss Function": [[40, "loss-function"], [51, "loss-function"], [104, "loss-function"]], "Full Implementation": [[40, "full-implementation"]], "Quickstart": [[41, "quickstart"]], "Working with data": [[41, "working-with-data"]], "Creating Models": [[41, "creating-models"]], "Optimizing the Model Parameters": [[41, "optimizing-the-model-parameters"]], "Saving Models": [[41, "saving-models"]], "Loading Models": [[41, "loading-models"]], "Save and Load the Model": [[42, "save-and-load-the-model"]], "Saving and Loading Model Weights": [[42, "saving-and-loading-model-weights"]], "Saving and Loading Models with Shapes": [[42, "saving-and-loading-models-with-shapes"]], "Related Tutorials": [[42, "related-tutorials"]], "Tensors": [[44, "tensors"], [53, "tensors"], [85, "tensors"], [121, "tensors"], [121, "id1"]], "Initializing a Tensor": [[44, "initializing-a-tensor"]], "Attributes of a Tensor": [[44, "attributes-of-a-tensor"]], "Operations on Tensors": [[44, "operations-on-tensors"]], "Bridge with NumPy": [[44, "bridge-with-numpy"], [53, "bridge-with-numpy"]], "Tensor to NumPy array": [[44, "tensor-to-numpy-array"], [53, "tensor-to-numpy-array"]], "NumPy array to Tensor": [[44, "numpy-array-to-tensor"], [53, "numpy-array-to-tensor"]], "ToTensor()": [[45, "totensor"]], "Lambda Transforms": [[45, "lambda-transforms"]], "Fast Transformer Inference with Better Transformer": [[46, "fast-transformer-inference-with-better-transformer"]], "A Gentle Introduction to torch.autograd": [[47, "a-gentle-introduction-to-torch-autograd"]], "Background": [[47, "background"], [173, "background"]], "Usage in PyTorch": [[47, "usage-in-pytorch"]], "Differentiation in Autograd": [[47, "differentiation-in-autograd"]], "Optional Reading - Vector Calculus using autograd": [[47, "optional-reading-vector-calculus-using-autograd"]], "Computational Graph": [[47, "computational-graph"]], "Exclusion from the DAG": [[47, "exclusion-from-the-dag"]], "Further readings:": [[47, "further-readings"]], "Training a Classifier": [[48, "training-a-classifier"]], "What about data?": [[48, "what-about-data"]], "Training an image classifier": [[48, "training-an-image-classifier"]], "1. Load and normalize CIFAR10": [[48, "load-and-normalize-cifar10"]], "2. Define a Convolutional Neural Network": [[48, "define-a-convolutional-neural-network"]], "3. Define a Loss function and optimizer": [[48, "define-a-loss-function-and-optimizer"]], "4. Train the network": [[48, "train-the-network"]], "5. Test the network on the test data": [[48, "test-the-network-on-the-test-data"]], "Training on GPU": [[48, "training-on-gpu"]], "Training on multiple GPUs": [[48, "training-on-multiple-gpus"]], "Where do I go next?": [[48, "where-do-i-go-next"]], "Optional: Data Parallelism": [[49, "optional-data-parallelism"]], "Imports and parameters": [[49, "imports-and-parameters"]], "Dummy DataSet": [[49, "dummy-dataset"]], "Simple Model": [[49, "simple-model"]], "Create Model and DataParallel": [[49, "create-model-and-dataparallel"]], "Run the Model": [[49, "run-the-model"]], "Results": [[49, "results"], [57, "results"], [80, "results"], [179, "results"]], "2 GPUs": [[49, "gpus"]], "3 GPUs": [[49, "id1"]], "8 GPUs": [[49, "id2"]], "Summary": [[49, "summary"], [140, "summary"], [184, "summary"]], "Deep Learning with PyTorch: A 60 Minute Blitz": [[50, "deep-learning-with-pytorch-a-60-minute-blitz"], [62, "deep-learning-with-pytorch-a-60-minute-blitz"]], "Neural Networks": [[51, "neural-networks"]], "Define the network": [[51, "define-the-network"]], "Backprop": [[51, "backprop"]], "Update the weights": [[51, "update-the-weights"]], "Tensor Initialization": [[53, "tensor-initialization"]], "Tensor Attributes": [[53, "tensor-attributes"]], "Tensor Operations": [[53, "tensor-operations"]], "Chatbot Tutorial": [[54, "chatbot-tutorial"]], "Preparations": [[54, "preparations"]], "Load & Preprocess Data": [[54, "load-preprocess-data"]], "Create formatted data file": [[54, "create-formatted-data-file"]], "Load and trim data": [[54, "load-and-trim-data"]], "Prepare Data for Models": [[54, "prepare-data-for-models"]], "Define Models": [[54, "define-models"]], "Seq2Seq Model": [[54, "seq2seq-model"]], "Encoder": [[54, "encoder"]], "Decoder": [[54, "decoder"]], "Define Training Procedure": [[54, "define-training-procedure"]], "Masked loss": [[54, "masked-loss"]], "Single training iteration": [[54, "single-training-iteration"]], "Training iterations": [[54, "training-iterations"]], "Define Evaluation": [[54, "define-evaluation"]], "Greedy decoding": [[54, "greedy-decoding"]], "Evaluate my text": [[54, "evaluate-my-text"]], "Run Model": [[54, "run-model"]], "Run Training": [[54, "run-training"]], "Run Evaluation": [[54, "run-evaluation"]], "Running Tutorials in Google Colab": [[55, "running-tutorials-in-google-colab"]], "PyTorch Version in Google Colab": [[55, "pytorch-version-in-google-colab"]], "Using Tutorial Data from Google Drive in Colab": [[55, "using-tutorial-data-from-google-drive-in-colab"]], "Enabling CUDA": [[55, "enabling-cuda"]], "Writing Custom Datasets, DataLoaders and Transforms": [[56, "writing-custom-datasets-dataloaders-and-transforms"]], "Dataset class": [[56, "dataset-class"]], "Compose transforms": [[56, "compose-transforms"]], "Iterating through the dataset": [[56, "iterating-through-the-dataset"]], "Afterword: torchvision": [[56, "afterword-torchvision"]], "DCGAN Tutorial": [[57, "dcgan-tutorial"]], "Generative Adversarial Networks": [[57, "generative-adversarial-networks"]], "What is a GAN?": [[57, "what-is-a-gan"]], "What is a DCGAN?": [[57, "what-is-a-dcgan"]], "Inputs": [[57, "inputs"], [80, "inputs"]], "Data": [[57, "data"]], "Implementation": [[57, "implementation"], [80, "implementation"]], "Weight Initialization": [[57, "weight-initialization"]], "Generator": [[57, "generator"]], "Discriminator": [[57, "discriminator"]], "Loss Functions and Optimizers": [[57, "loss-functions-and-optimizers"]], "Training": [[57, "training"], [146, "training"], [147, "training"], [180, "training"], [185, "training"], [216, "training"], [216, "id3"]], "Where to Go Next": [[57, "where-to-go-next"]], "Fault-tolerant Distributed Training with torchrun": [[58, "fault-tolerant-distributed-training-with-torchrun"]], "Why use torchrun": [[58, "why-use-torchrun"]], "Graceful restarts": [[58, "graceful-restarts"]], "Process group initialization": [[58, "process-group-initialization"]], "Use torchrun-provided environment variables": [[58, "use-torchrun-provided-environment-variables"]], "Saving and loading snapshots": [[58, "saving-and-loading-snapshots"]], "Loading a snapshot in the Trainer constructor": [[58, "loading-a-snapshot-in-the-trainer-constructor"]], "Resuming training": [[58, "resuming-training"]], "Running the script": [[58, "running-the-script"]], "Distributed Data Parallel in PyTorch - Video Tutorials": [[59, "distributed-data-parallel-in-pytorch-video-tutorials"]], "Running the code": [[59, "running-the-code"]], "Tutorial sections": [[59, "tutorial-sections"]], "Multi GPU training with DDP": [[60, "multi-gpu-training-with-ddp"]], "Imports": [[60, "imports"]], "Constructing the process group": [[60, "constructing-the-process-group"]], "Constructing the DDP model": [[60, "constructing-the-ddp-model"]], "Distributing input data": [[60, "distributing-input-data"]], "Saving model checkpoints": [[60, "saving-model-checkpoints"]], "Running the distributed training job": [[60, "running-the-distributed-training-job"]], "What is Distributed Data Parallel (DDP)": [[61, "what-is-distributed-data-parallel-ddp"]], "Why you should prefer DDP over DataParallel (DP)": [[61, "why-you-should-prefer-ddp-over-dataparallel-dp"]], "What is PyTorch?": [[62, "what-is-pytorch"]], "Goal of this tutorial:": [[62, "goal-of-this-tutorial"]], "Image Segmentation DeepLabV3 on Android": [[63, "image-segmentation-deeplabv3-on-android"]], "Image Segmentation DeepLabV3 on iOS": [[64, "image-segmentation-deeplabv3-on-ios"]], "PyTorch Distributed Overview": [[65, "pytorch-distributed-overview"]], "Parallelism APIs": [[65, "parallelism-apis"]], "Sharding primitives": [[65, "sharding-primitives"]], "Communications APIs": [[65, "communications-apis"]], "Launcher": [[65, "launcher"]], "Applying Parallelism To Scale Your Model": [[65, "applying-parallelism-to-scale-your-model"]], "PyTorch Distributed Developers": [[65, "pytorch-distributed-developers"]], "PyTorch: Tensors and autograd": [[67, "pytorch-tensors-and-autograd"], [121, "pytorch-tensors-and-autograd"]], "PyTorch: Defining New autograd Functions": [[68, "pytorch-defining-new-autograd-functions"]], "PyTorch: Control Flow + Weight Sharing": [[70, "pytorch-control-flow-weight-sharing"], [121, "pytorch-control-flow-weight-sharing"]], "PyTorch: Custom nn Modules": [[72, "pytorch-custom-nn-modules"], [121, "pytorch-custom-nn-modules"]], "PyTorch: nn": [[73, "pytorch-nn"], [121, "pytorch-nn"]], "PyTorch: optim": [[74, "pytorch-optim"], [121, "pytorch-optim"]], "Warm-up: numpy": [[77, "warm-up-numpy"], [121, "warm-up-numpy"]], "PyTorch: Tensors": [[78, "pytorch-tensors"], [121, "pytorch-tensors"]], "Adversarial Example Generation": [[80, "adversarial-example-generation"]], "Threat Model": [[80, "threat-model"]], "Fast Gradient Sign Attack": [[80, "fast-gradient-sign-attack"]], "Model Under Attack": [[80, "model-under-attack"]], "FGSM Attack": [[80, "fgsm-attack"]], "Testing Function": [[80, "testing-function"]], "Run Attack": [[80, "run-attack"]], "Accuracy vs Epsilon": [[80, "accuracy-vs-epsilon"]], "Sample Adversarial Examples": [[80, "sample-adversarial-examples"]], "Where to go next?": [[80, "where-to-go-next"]], "Finetuning Torchvision Models": [[81, "finetuning-torchvision-models"]], "Autograd": [[82, "autograd"], [121, "autograd"], [121, "id2"]], "nn Package": [[83, "nn-package"]], "Multi-GPU Examples": [[84, "multi-gpu-examples"]], "PyTorch for Former Torch Users": [[86, "pytorch-for-former-torch-users"]], "Introduction to Holistic Trace Analysis": [[87, "introduction-to-holistic-trace-analysis"]], "Installing HTA": [[87, "installing-hta"]], "Temporal Breakdown": [[87, "temporal-breakdown"]], "Idle Time Breakdown": [[87, "idle-time-breakdown"]], "Kernel Breakdown": [[87, "kernel-breakdown"]], "Kernel Duration Distribution": [[87, "kernel-duration-distribution"]], "Communication Computation Overlap": [[87, "communication-computation-overlap"]], "Augmented Counters": [[87, "augmented-counters"]], "Memory Bandwidth & Queue Length Counters": [[87, "memory-bandwidth-queue-length-counters"]], "CUDA Kernel Launch Statistics": [[87, "cuda-kernel-launch-statistics"]], "Trace Diff using Holistic Trace Analysis": [[88, "trace-diff-using-holistic-trace-analysis"]], "Learning Hybrid Frontend Syntax Through Example": [[90, "learning-hybrid-frontend-syntax-through-example"]], "Hybrid Frontend Information": [[90, "hybrid-frontend-information"]], "Motivating Example": [[90, "motivating-example"]], "Part 1 - Tracing a pure python function": [[90, "part-1-tracing-a-pure-python-function"]], "Part 2 - Scripting a pure python function": [[90, "part-2-scripting-a-pure-python-function"]], "Part 3 - Tracing a nn.Module": [[90, "part-3-tracing-a-nn-module"]], "Part 4 - Scripting a nn.Module": [[90, "part-4-scripting-a-nn-module"]], "Top-Level Module": [[90, "top-level-module"]], "Running the Model": [[90, "running-the-model"]], "Tracing the Top-Level Model": [[90, "tracing-the-top-level-model"]], "Hybrid Frontend Tutorials": [[92, "hybrid-frontend-tutorials"]], "Hyperparameter tuning with Ray Tune": [[93, "hyperparameter-tuning-with-ray-tune"]], "Setup / Imports": [[93, "setup-imports"]], "Data loaders": [[93, "data-loaders"]], "Configurable neural network": [[93, "configurable-neural-network"]], "The train function": [[93, "the-train-function"]], "Adding (multi) GPU support with DataParallel": [[93, "adding-multi-gpu-support-with-dataparallel"]], "Communicating with Ray Tune": [[93, "communicating-with-ray-tune"]], "Full training function": [[93, "full-training-function"]], "Test set accuracy": [[93, "test-set-accuracy"]], "Configuring the search space": [[93, "configuring-the-search-space"]], "Introduction to PyTorch - YouTube Series": [[94, "introduction-to-pytorch-youtube-series"], [99, "introduction-to-pytorch-youtube-series"]], "The Fundamentals of Autograd": [[95, "the-fundamentals-of-autograd"]], "What Do We Need Autograd For?": [[95, "what-do-we-need-autograd-for"]], "A Simple Example": [[95, "a-simple-example"]], "Autograd in Training": [[95, "autograd-in-training"]], "Turning Autograd Off and On": [[95, "turning-autograd-off-and-on"]], "Autograd and In-place Operations": [[95, "autograd-and-in-place-operations"]], "Autograd Profiler": [[95, "autograd-profiler"]], "Advanced Topic: More Autograd Detail and the High-Level API": [[95, "advanced-topic-more-autograd-detail-and-the-high-level-api"]], "The High-Level API": [[95, "the-high-level-api"]], "Model Understanding with Captum": [[96, "model-understanding-with-captum"]], "A First Example": [[96, "a-first-example"]], "Feature Attribution with Integrated Gradients": [[96, "feature-attribution-with-integrated-gradients"]], "Feature Attribution with Occlusion": [[96, "feature-attribution-with-occlusion"]], "Layer Attribution with Layer GradCAM": [[96, "layer-attribution-with-layer-gradcam"]], "Visualization with Captum Insights": [[96, "visualization-with-captum-insights"]], "Introduction to PyTorch on YouTube": [[97, "introduction-to-pytorch-on-youtube"]], "Introduction to PyTorch": [[98, "introduction-to-pytorch"], [109, "introduction-to-pytorch"]], "PyTorch Tensors": [[98, "pytorch-tensors"]], "PyTorch Models": [[98, "pytorch-models"]], "Datasets and Dataloaders": [[98, "datasets-and-dataloaders"]], "Training Your PyTorch Model": [[98, "training-your-pytorch-model"]], "Building Models with PyTorch": [[100, "building-models-with-pytorch"]], "torch.nn.Module and torch.nn.Parameter": [[100, "torch-nn-module-and-torch-nn-parameter"]], "Common Layer Types": [[100, "common-layer-types"]], "Linear Layers": [[100, "linear-layers"]], "Convolutional Layers": [[100, "convolutional-layers"]], "Recurrent Layers": [[100, "recurrent-layers"]], "Transformers": [[100, "transformers"]], "Other Layers and Functions": [[100, "other-layers-and-functions"]], "Data Manipulation Layers": [[100, "data-manipulation-layers"]], "Activation Functions": [[100, "activation-functions"]], "PyTorch TensorBoard Support": [[102, "pytorch-tensorboard-support"]], "Before You Start": [[102, "before-you-start"]], "Showing Images in TensorBoard": [[102, "showing-images-in-tensorboard"]], "Graphing Scalars to Visualize Training": [[102, "graphing-scalars-to-visualize-training"]], "Visualizing Your Model": [[102, "visualizing-your-model"]], "Visualizing Your Dataset with Embeddings": [[102, "visualizing-your-dataset-with-embeddings"]], "Other Resources": [[102, "other-resources"], [104, "other-resources"]], "Introduction to PyTorch Tensors": [[103, "introduction-to-pytorch-tensors"]], "Creating Tensors": [[103, "creating-tensors"], [109, "creating-tensors"]], "Random Tensors and Seeding": [[103, "random-tensors-and-seeding"]], "Tensor Shapes": [[103, "tensor-shapes"]], "Tensor Data Types": [[103, "tensor-data-types"]], "Math & Logic with PyTorch Tensors": [[103, "math-logic-with-pytorch-tensors"]], "In Brief: Tensor Broadcasting": [[103, "in-brief-tensor-broadcasting"]], "More Math with Tensors": [[103, "more-math-with-tensors"]], "Altering Tensors in Place": [[103, "altering-tensors-in-place"]], "Copying Tensors": [[103, "copying-tensors"]], "Moving to Accelerator": [[103, "moving-to-accelerator"]], "Manipulating Tensor Shapes": [[103, "manipulating-tensor-shapes"]], "Changing the Number of Dimensions": [[103, "changing-the-number-of-dimensions"]], "NumPy Bridge": [[103, "numpy-bridge"]], "Training with PyTorch": [[104, "training-with-pytorch"]], "Dataset and DataLoader": [[104, "dataset-and-dataloader"]], "The Model": [[104, "the-model"]], "The Training Loop": [[104, "the-training-loop"]], "Per-Epoch Activity": [[104, "per-epoch-activity"]], "Knowledge Distillation Tutorial": [[105, "knowledge-distillation-tutorial"]], "Loading CIFAR-10": [[105, "loading-cifar-10"]], "Defining model classes and utility functions": [[105, "defining-model-classes-and-utility-functions"]], "Cross-entropy runs": [[105, "cross-entropy-runs"]], "Knowledge distillation run": [[105, "knowledge-distillation-run"]], "Cosine loss minimization run": [[105, "cosine-loss-minimization-run"]], "Intermediate regressor run": [[105, "intermediate-regressor-run"]], "Advanced: Making Dynamic Decisions and the Bi-LSTM CRF": [[106, "advanced-making-dynamic-decisions-and-the-bi-lstm-crf"]], "Dynamic versus Static Deep Learning Toolkits": [[106, "dynamic-versus-static-deep-learning-toolkits"]], "Bi-LSTM Conditional Random Field Discussion": [[106, "bi-lstm-conditional-random-field-discussion"]], "Implementation Notes": [[106, "implementation-notes"]], "Exercise: A new loss function for discriminative tagging": [[106, "exercise-a-new-loss-function-for-discriminative-tagging"]], "Deep Learning with PyTorch": [[107, "deep-learning-with-pytorch"]], "Deep Learning Building Blocks: Affine maps, non-linearities and objectives": [[107, "deep-learning-building-blocks-affine-maps-non-linearities-and-objectives"]], "Affine Maps": [[107, "affine-maps"]], "Non-Linearities": [[107, "non-linearities"]], "Softmax and Probabilities": [[107, "softmax-and-probabilities"]], "Objective Functions": [[107, "objective-functions"]], "Optimization and Training": [[107, "optimization-and-training"]], "Creating Network Components in PyTorch": [[107, "creating-network-components-in-pytorch"]], "Example: Logistic Regression Bag-of-Words classifier": [[107, "example-logistic-regression-bag-of-words-classifier"]], "Deep Learning for NLP with Pytorch": [[108, "deep-learning-for-nlp-with-pytorch"]], "Introduction to Torch\u2019s tensor library": [[109, "introduction-to-torch-s-tensor-library"]], "Operations with Tensors": [[109, "operations-with-tensors"]], "Reshaping Tensors": [[109, "reshaping-tensors"]], "Computation Graphs and Automatic Differentiation": [[109, "computation-graphs-and-automatic-differentiation"]], "Sequence Models and Long Short-Term Memory Networks": [[110, "sequence-models-and-long-short-term-memory-networks"]], "LSTMs in Pytorch": [[110, "lstms-in-pytorch"]], "Example: An LSTM for Part-of-Speech Tagging": [[110, "example-an-lstm-for-part-of-speech-tagging"]], "Exercise: Augmenting the LSTM part-of-speech tagger with character-level features": [[110, "exercise-augmenting-the-lstm-part-of-speech-tagger-with-character-level-features"]], "Word Embeddings: Encoding Lexical Semantics": [[112, "word-embeddings-encoding-lexical-semantics"]], "Getting Dense Word Embeddings": [[112, "getting-dense-word-embeddings"]], "Word Embeddings in Pytorch": [[112, "word-embeddings-in-pytorch"]], "An Example: N-Gram Language Modeling": [[112, "an-example-n-gram-language-modeling"]], "Exercise: Computing Word Embeddings: Continuous Bag-of-Words": [[112, "exercise-computing-word-embeddings-continuous-bag-of-words"]], "What is torch.nn really?": [[113, "what-is-torch-nn-really"]], "MNIST data setup": [[113, "mnist-data-setup"]], "Neural net from scratch (without torch.nn)": [[113, "neural-net-from-scratch-without-torch-nn"]], "Using torch.nn.functional": [[113, "using-torch-nn-functional"]], "Refactor using nn.Module": [[113, "refactor-using-nn-module"]], "Refactor using nn.Linear": [[113, "refactor-using-nn-linear"]], "Refactor using torch.optim": [[113, "refactor-using-torch-optim"]], "Refactor using Dataset": [[113, "refactor-using-dataset"]], "Refactor using DataLoader": [[113, "refactor-using-dataloader"]], "Add validation": [[113, "add-validation"]], "Create fit() and get_data()": [[113, "create-fit-and-get-data"]], "Switch to CNN": [[113, "switch-to-cnn"]], "Using nn.Sequential": [[113, "using-nn-sequential"]], "Wrapping DataLoader": [[113, "wrapping-dataloader"]], "Using your Accelerator": [[113, "using-your-accelerator"]], "Closing thoughts": [[113, "closing-thoughts"]], "Export a model with control flow to ONNX": [[114, "export-a-model-with-control-flow-to-onnx"]], "Define the Models": [[114, "define-the-models"]], "Exporting the Model: First Attempt": [[114, "exporting-the-model-first-attempt"]], "Using torch.onnx.export() with JIT Tracing": [[114, "using-torch-onnx-export-with-jit-tracing"]], "Suggested Patch: Refactoring with torch.cond()": [[114, "suggested-patch-refactoring-with-torch-cond"]], "Further reading": [[114, "further-reading"], [115, "further-reading"], [117, "further-reading"], [118, "further-reading"]], "Export a PyTorch model to ONNX": [[115, "export-a-pytorch-model-to-onnx"]], "1. Install the required dependencies": [[115, "install-the-required-dependencies"]], "2. Author a simple image classifier model": [[115, "author-a-simple-image-classifier-model"]], "3. Export the model to ONNX format": [[115, "export-the-model-to-onnx-format"]], "4. Save the ONNX model in a file": [[115, "save-the-onnx-model-in-a-file"]], "5. Visualize the ONNX model graph using Netron": [[115, "visualize-the-onnx-model-graph-using-netron"]], "6. Execute the ONNX model with ONNX Runtime": [[115, "execute-the-onnx-model-with-onnx-runtime"]], "7. Compare the PyTorch results with the ones from the ONNX Runtime": [[115, "compare-the-pytorch-results-with-the-ones-from-the-onnx-runtime"]], "ONNX": [[116, "onnx"]], "Introduction to ONNX": [[117, "introduction-to-onnx"]], "Dependencies": [[117, "dependencies"]], "Extending the ONNX Exporter Operator Support": [[118, "extending-the-onnx-exporter-operator-support"]], "Overriding the implementation of an existing PyTorch operator": [[118, "overriding-the-implementation-of-an-existing-pytorch-operator"]], "Using custom ONNX operators": [[118, "using-custom-onnx-operators"]], "Supporting a custom PyTorch operator": [[118, "supporting-a-custom-pytorch-operator"]], "Profiling your PyTorch Module": [[120, "profiling-your-pytorch-module"]], "Performance debugging using Profiler": [[120, "performance-debugging-using-profiler"]], "Profile the forward pass": [[120, "profile-the-forward-pass"]], "Print profiler results": [[120, "print-profiler-results"]], "Improve memory performance": [[120, "improve-memory-performance"]], "Improve time performance": [[120, "improve-time-performance"]], "Learning PyTorch with Examples": [[121, "learning-pytorch-with-examples"]], "Table of Contents": [[121, "table-of-contents"]], "PyTorch: Defining new autograd functions": [[121, "pytorch-defining-new-autograd-functions"]], "nn module": [[121, "nn-module"], [121, "id3"]], "Examples": [[121, "examples"], [217, "examples"], [254, "examples"], [283, "examples"]], "Saving and Loading Models": [[122, "saving-and-loading-models"]], "What is a state_dict?": [[122, "what-is-a-state-dict"]], "Example:": [[122, "example"]], "Saving & Loading Model for Inference": [[122, "saving-loading-model-for-inference"]], "Save/Load state_dict (Recommended)": [[122, "save-load-state-dict-recommended"]], "Save/Load Entire Model": [[122, "save-load-entire-model"]], "Saving an Exported Program": [[122, "saving-an-exported-program"]], "Saving & Loading a General Checkpoint for Inference and/or Resuming Training": [[122, "saving-loading-a-general-checkpoint-for-inference-and-or-resuming-training"]], "Save:": [[122, "save"], [122, "id1"], [122, "id3"]], "Load:": [[122, "load"], [122, "id2"], [122, "id4"]], "Saving Multiple Models in One File": [[122, "saving-multiple-models-in-one-file"]], "Warmstarting Model Using Parameters from a Different Model": [[122, "warmstarting-model-using-parameters-from-a-different-model"]], "Saving & Loading Model Across Devices": [[122, "saving-loading-model-across-devices"]], "Save on GPU, Load on CPU": [[122, "save-on-gpu-load-on-cpu"]], "Save on GPU, Load on GPU": [[122, "save-on-gpu-load-on-gpu"]], "Save on CPU, Load on GPU": [[122, "save-on-cpu-load-on-gpu"]], "Saving torch.nn.DataParallel Models": [[122, "saving-torch-nn-dataparallel-models"]], "T5-Base Model for Summarization, Sentiment Classification, and Translation": [[124, "t5-base-model-for-summarization-sentiment-classification-and-translation"]], "Template Tutorial": [[125, "template-tutorial"]], "Steps": [[125, "steps"], [189, "steps"], [227, "steps"], [229, "steps"], [232, "steps"], [243, "steps"], [244, "steps"], [245, "steps"], [246, "steps"]], "(Optional) Additional Exercises": [[125, "optional-additional-exercises"]], "Text classification with the torchtext library": [[126, "text-classification-with-the-torchtext-library"]], "Preprocess custom text dataset using torchtext": [[127, "preprocess-custom-text-dataset-using-torchtext"]], "Transfer Learning for Computer Vision Tutorial": [[128, "transfer-learning-for-computer-vision-tutorial"]], "Load Data": [[128, "load-data"]], "Visualize a few images": [[128, "visualize-a-few-images"]], "Training the model": [[128, "training-the-model"], [187, "training-the-model"]], "Visualizing the model predictions": [[128, "visualizing-the-model-predictions"]], "Finetuning the ConvNet": [[128, "finetuning-the-convnet"]], "Train and evaluate": [[128, "train-and-evaluate"], [128, "id1"]], "ConvNet as fixed feature extractor": [[128, "convnet-as-fixed-feature-extractor"]], "Inference on custom images": [[128, "inference-on-custom-images"]], "Further Learning": [[128, "further-learning"]], "Language Modeling with nn.Transformer and torchtext": [[129, "language-modeling-with-nn-transformer-and-torchtext"]], "Language Translation with nn.Transformer and torchtext": [[130, "language-translation-with-nn-transformer-and-torchtext"]], "Understanding requires_grad, retain_grad, Leaf, and Non-leaf Tensors": [[131, "understanding-requires-grad-retain-grad-leaf-and-non-leaf-tensors"]], "Setup": [[131, "setup"], [148, "setup"], [155, "setup"], [156, "setup"], [167, "setup"], [175, "setup"], [189, "setup"], [201, "setup"], [227, "setup"], [229, "setup"], [232, "setup"], [243, "setup"], [244, "setup"], [245, "setup"], [246, "setup"], [257, "setup"], [264, "setup"]], "Leaf vs.\u00a0non-leaf tensors": [[131, "leaf-vs-non-leaf-tensors"]], "requires_grad": [[131, "requires-grad"]], "retain_grad": [[131, "retain-grad"]], "Summary table": [[131, "summary-table"]], "References": [[131, "references"], [201, "references"]], "Compilers": [[132, "compilers"]], "Deep Dive": [[133, "deep-dive"]], "Distributed": [[134, "distributed"]], "Learn DDP": [[134, "learn-ddp"]], "Learn FSDP2": [[134, "learn-fsdp2"]], "Learn Tensor Parallel (TP)": [[134, "learn-tensor-parallel-tp"]], "Learn DeviceMesh": [[134, "learn-devicemesh"]], "Learn RPC": [[134, "learn-rpc"]], "Custom Extensions": [[134, "custom-extensions"]], "Domains": [[135, "domains"]], "Ecosystem": [[136, "ecosystem"]], "Extension": [[137, "extension"]], "Welcome to PyTorch Tutorials": [[138, "welcome-to-pytorch-tutorials"]], "Additional Resources": [[138, "additional-resources"], [175, "additional-resources"]], "Getting Started with Fully Sharded Data Parallel(FSDP)": [[139, "getting-started-with-fully-sharded-data-parallel-fsdp"]], "How FSDP works": [[139, "how-fsdp-works"]], "How to use FSDP": [[139, "how-to-use-fsdp"]], "Advanced Model Training with Fully Sharded Data Parallel (FSDP)": [[140, "advanced-model-training-with-fully-sharded-data-parallel-fsdp"]], "FSDP Features in This Tutorial": [[140, "fsdp-features-in-this-tutorial"]], "Recap on How FSDP Works": [[140, "recap-on-how-fsdp-works"]], "Fine-tuning HF T5": [[140, "fine-tuning-hf-t5"]], "Transformer Wrapping Policy": [[140, "transformer-wrapping-policy"]], "Mixed Precision": [[140, "mixed-precision"]], "Intializing FSDP Model on Device": [[140, "intializing-fsdp-model-on-device"]], "Sharding Strategy": [[140, "sharding-strategy"]], "Backward Prefetch": [[140, "backward-prefetch"]], "Model Checkpoint Saving, by streaming to the Rank0 CPU": [[140, "model-checkpoint-saving-by-streaming-to-the-rank0-cpu"]], "Getting Started with Fully Sharded Data Parallel (FSDP2)": [[141, "getting-started-with-fully-sharded-data-parallel-fsdp2"]], "How FSDP2 works": [[141, "how-fsdp2-works"]], "How to use FSDP2": [[141, "how-to-use-fsdp2"]], "Model Initialization": [[141, "model-initialization"]], "Forward/Backward with Prefetching": [[141, "forward-backward-with-prefetching"]], "Enabling Mixed Precision": [[141, "enabling-mixed-precision"]], "Gradient Clipping and Optimizer with DTensor": [[141, "gradient-clipping-and-optimizer-with-dtensor"]], "State Dicts with DTensor APIs": [[141, "state-dicts-with-dtensor-apis"]], "State Dict with DCP APIs": [[141, "state-dict-with-dcp-apis"]], "FSDP1-to-FSDP2 migration guide": [[141, "fsdp1-to-fsdp2-migration-guide"]], "Introduction to Libuv TCPStore Backend": [[142, "introduction-to-libuv-tcpstore-backend"]], "Performance Benchmark": [[142, "performance-benchmark"]], "Impact": [[142, "impact"]], "Exit Route 1: Pass use_libuv=False to TCPStore Initialization": [[142, "exit-route-1-pass-use-libuv-false-to-tcpstore-initialization"]], "Exit Route 2: Add use_libuv=0 to init_method at ProcessGroup Initialization": [[142, "exit-route-2-add-use-libuv-0-to-init-method-at-processgroup-initialization"]], "Exit Route 3: Set Environment Variable USE_LIBUV to 0": [[142, "exit-route-3-set-environment-variable-use-libuv-to-0"]], "Large Scale Transformer model training with Tensor Parallel (TP)": [[143, "large-scale-transformer-model-training-with-tensor-parallel-tp"]], "How Tensor Parallel works?": [[143, "how-tensor-parallel-works"]], "When and Why you should apply Tensor Parallel": [[143, "when-and-why-you-should-apply-tensor-parallel"]], "How to apply Tensor Parallel": [[143, "how-to-apply-tensor-parallel"]], "Apply Sequence Parallel to LayerNorm/RMSNorm layers": [[143, "apply-sequence-parallel-to-layernorm-rmsnorm-layers"]], "Apply Loss Parallel": [[143, "apply-loss-parallel"]], "Combine Tensor Parallel with Fully Sharded Data Parallel together": [[143, "combine-tensor-parallel-with-fully-sharded-data-parallel-together"]], "Hooks for autograd saved tensors": [[144, "hooks-for-autograd-saved-tensors"]], "Saved tensors": [[144, "saved-tensors"]], "Why does training a model (typically) requires more memory than evaluating it?": [[144, "why-does-training-a-model-typically-requires-more-memory-than-evaluating-it"]], "The concept of packing / unpacking": [[144, "the-concept-of-packing-unpacking"]], "Saved tensors hooks": [[144, "saved-tensors-hooks"]], "Some unconventional examples": [[144, "some-unconventional-examples"]], "Returning an int": [[144, "returning-an-int"]], "Returning a tuple": [[144, "returning-a-tuple"]], "Returning a str": [[144, "returning-a-str"]], "Saving tensors to CPU": [[144, "saving-tensors-to-cpu"]], "Saving tensors to disk": [[144, "saving-tensors-to-disk"]], "Multi-Objective NAS with Ax": [[145, "multi-objective-nas-with-ax"]], "Defining the TorchX App": [[145, "defining-the-torchx-app"]], "Setting up the Runner": [[145, "setting-up-the-runner"]], "Setting up the SearchSpace": [[145, "setting-up-the-searchspace"]], "Setting up Metrics": [[145, "setting-up-metrics"]], "Setting up the OptimizationConfig": [[145, "setting-up-the-optimizationconfig"]], "Creating the Ax Experiment": [[145, "creating-the-ax-experiment"]], "Choosing the Generation Strategy": [[145, "choosing-the-generation-strategy"]], "Configuring the Scheduler": [[145, "configuring-the-scheduler"]], "Running the optimization": [[145, "running-the-optimization"]], "Evaluating the results": [[145, "evaluating-the-results"]], "Acknowledgments": [[145, "acknowledgments"]], "NLP From Scratch: Classifying Names with a Character-Level RNN": [[146, "nlp-from-scratch-classifying-names-with-a-character-level-rnn"]], "Recommended Preparation": [[146, "recommended-preparation"]], "Preparing Torch": [[146, "preparing-torch"]], "Preparing the Data": [[146, "preparing-the-data"], [147, "preparing-the-data"]], "Turning Names into Tensors": [[146, "turning-names-into-tensors"]], "Creating the Network": [[146, "creating-the-network"], [147, "creating-the-network"]], "Training the Network": [[146, "training-the-network"], [147, "training-the-network"]], "Plotting the Results": [[146, "plotting-the-results"]], "Evaluating the Results": [[146, "evaluating-the-results"]], "Exercises": [[146, "exercises"], [147, "exercises"], [185, "exercises"]], "NLP From Scratch: Generating Names with a Character-Level RNN": [[147, "nlp-from-scratch-generating-names-with-a-character-level-rnn"]], "Preparing for Training": [[147, "preparing-for-training"]], "Plotting the Losses": [[147, "plotting-the-losses"]], "Sampling the Network": [[147, "sampling-the-network"]], "Compiled Autograd: Capturing a larger backward graph for torch.compile": [[148, "compiled-autograd-capturing-a-larger-backward-graph-for-torch-compile"]], "Basic usage": [[148, "basic-usage"]], "Inspecting the compiled autograd logs": [[148, "inspecting-the-compiled-autograd-logs"]], "Compiling the forward and backward pass using different flags": [[148, "compiling-the-forward-and-backward-pass-using-different-flags"]], "Compiled Autograd addresses certain limitations of AOTAutograd": [[148, "compiled-autograd-addresses-certain-limitations-of-aotautograd"]], "Common recompilation reasons for Compiled Autograd": [[148, "common-recompilation-reasons-for-compiled-autograd"]], "Fusing Convolution and Batch Norm using Custom Function": [[149, "fusing-convolution-and-batch-norm-using-custom-function"]], "Backward Formula Implementation for Convolution": [[149, "backward-formula-implementation-for-convolution"]], "Backward Formula Implementation for Batch Norm": [[149, "backward-formula-implementation-for-batch-norm"]], "Fusing Convolution and BatchNorm": [[149, "fusing-convolution-and-batchnorm"]], "Testing out our new Layer": [[149, "testing-out-our-new-layer"]], "A Comparison of Memory Usage": [[149, "a-comparison-of-memory-usage"]], "Double Backward with Custom Functions": [[150, "double-backward-with-custom-functions"]], "Saving the Inputs": [[150, "saving-the-inputs"]], "Saving the Outputs": [[150, "saving-the-outputs"]], "Saving Intermediate Results": [[150, "saving-intermediate-results"]], "Saving Intermediate Results: What not to do": [[150, "saving-intermediate-results-what-not-to-do"]], "When Backward is not Tracked": [[150, "when-backward-is-not-tracked"]], "Training \u201creal-world\u201d models with DDP": [[151, "training-real-world-models-with-ddp"]], "Files used for training": [[151, "files-used-for-training"]], "Saving and Loading from the cloud": [[151, "saving-and-loading-from-the-cloud"]], "Using Mixed Precision": [[151, "using-mixed-precision"]], "When is DDP not enough?": [[151, "when-is-ddp-not-enough"]], "Multinode Training": [[152, "multinode-training"]], "Local and Global ranks": [[152, "local-and-global-ranks"]], "Heteregeneous Scaling": [[152, "heteregeneous-scaling"]], "Troubleshooting": [[152, "troubleshooting"], [226, "troubleshooting"]], "Getting Started with Distributed Data Parallel": [[153, "getting-started-with-distributed-data-parallel"]], "Comparison between DataParallel and DistributedDataParallel": [[153, "comparison-between-dataparallel-and-distributeddataparallel"]], "Basic Use Case": [[153, "basic-use-case"]], "Skewed Processing Speeds": [[153, "skewed-processing-speeds"]], "Save and Load Checkpoints": [[153, "save-and-load-checkpoints"]], "Combining DDP with Model Parallelism": [[153, "combining-ddp-with-model-parallelism"]], "Initialize DDP with torch.distributed.run/torchrun": [[153, "initialize-ddp-with-torch-distributed-run-torchrun"]], "Distributed Pipeline Parallelism Using RPC": [[154, "distributed-pipeline-parallelism-using-rpc"]], "Writing Distributed Applications with PyTorch": [[155, "writing-distributed-applications-with-pytorch"]], "Point-to-Point Communication": [[155, "point-to-point-communication"]], "Collective Communication": [[155, "collective-communication"]], "Distributed Training": [[155, "distributed-training"]], "Our Own Ring-Allreduce": [[155, "our-own-ring-allreduce"]], "Advanced Topics": [[155, "advanced-topics"]], "Communication Backends": [[155, "communication-backends"]], "Initialization Methods": [[155, "initialization-methods"]], "Recurrent DQN: Training recurrent policies": [[156, "recurrent-dqn-training-recurrent-policies"]], "Policy": [[156, "policy"], [179, "policy"]], "Convolutional network": [[156, "convolutional-network"]], "LSTM Module": [[156, "lstm-module"]], "MLP": [[156, "mlp"]], "Using the Q-Values to select an action": [[156, "using-the-q-values-to-select-an-action"]], "Using the model for the loss": [[156, "using-the-model-for-the-loss"]], "DQN Loss": [[156, "dqn-loss"]], "Collector and replay buffer": [[156, "collector-and-replay-buffer"]], "Model ensembling": [[157, "model-ensembling"]], "What is model ensembling?": [[157, "what-is-model-ensembling"]], "Using vmap to vectorize the ensemble": [[157, "using-vmap-to-vectorize-the-ensemble"]], "Performance": [[157, "performance"]], "Forced Alignment with Wav2Vec2": [[158, "forced-alignment-with-wav2vec2"]], "Forward-mode Automatic Differentiation (Beta)": [[159, "forward-mode-automatic-differentiation-beta"]], "Basic Usage": [[159, "basic-usage"], [194, "basic-usage"], [196, "basic-usage"], [215, "basic-usage"], [253, "basic-usage"]], "Usage with Modules": [[159, "usage-with-modules"]], "Using the functional Module API (beta)": [[159, "using-the-functional-module-api-beta"]], "Custom autograd Function": [[159, "custom-autograd-function"]], "Functional API (beta)": [[159, "functional-api-beta"]], "Using the functional API with Modules": [[159, "using-the-functional-api-with-modules"]], "(beta) Building a Simple CPU Performance Profiler with FX": [[160, "beta-building-a-simple-cpu-performance-profiler-with-fx"]], "Capturing the Model with Symbolic Tracing": [[160, "capturing-the-model-with-symbolic-tracing"]], "Creating a Profiling Interpreter": [[160, "creating-a-profiling-interpreter"]], "Investigating the Performance of ResNet18": [[160, "investigating-the-performance-of-resnet18"]], "Inductor CPU backend debugging and profiling": [[161, "inductor-cpu-backend-debugging-and-profiling"]], "Debugging": [[161, "debugging"]], "Get more logging information": [[161, "get-more-logging-information"]], "Determine component of error": [[161, "determine-component-of-error"]], "Compilation error": [[161, "compilation-error"]], "Accuracy debugging": [[161, "accuracy-debugging"]], "Performance profiling": [[161, "performance-profiling"]], "Jacobians, Hessians, hvp, vhp, and more: composing function transforms": [[162, "jacobians-hessians-hvp-vhp-and-more-composing-function-transforms"]], "Computing the Jacobian": [[162, "computing-the-jacobian"]], "Reverse-mode Jacobian (jacrev) vs forward-mode Jacobian (jacfwd)": [[162, "reverse-mode-jacobian-jacrev-vs-forward-mode-jacobian-jacfwd"]], "Hessian computation with functorch.hessian": [[162, "hessian-computation-with-functorch-hessian"]], "Batch Jacobian and Batch Hessian": [[162, "batch-jacobian-and-batch-hessian"]], "Computing Hessian-vector products": [[162, "computing-hessian-vector-products"]], "Train a Mario-playing RL Agent": [[163, "train-a-mario-playing-rl-agent"]], "RL Definitions": [[163, "rl-definitions"]], "Initialize Environment": [[163, "initialize-environment"]], "Preprocess Environment": [[163, "preprocess-environment"]], "Agent": [[163, "agent"]], "Act": [[163, "act"]], "Cache and Recall": [[163, "cache-and-recall"]], "Learn": [[163, "learn"]], "Neural Network": [[163, "neural-network"]], "TD Estimate & TD Target": [[163, "td-estimate-td-target"]], "Updating the model": [[163, "updating-the-model"]], "Save checkpoint": [[163, "save-checkpoint"]], "Putting it all together": [[163, "putting-it-all-together"]], "Logging": [[163, "logging"]], "Let\u2019s play!": [[163, "lets-play"]], "Channels Last Memory Format in PyTorch": [[164, "channels-last-memory-format-in-pytorch"]], "Memory Format API": [[164, "memory-format-api"]], "Performance Gains": [[164, "performance-gains"]], "Converting existing models": [[164, "converting-existing-models"]], "Work to do": [[164, "work-to-do"]], "Single-Machine Model Parallel Best Practices": [[166, "single-machine-model-parallel-best-practices"]], "Neural Tangent Kernels": [[167, "neural-tangent-kernels"]], "Create a function version of the model": [[167, "create-a-function-version-of-the-model"]], "Compute the NTK: method 1 (Jacobian contraction)": [[167, "compute-the-ntk-method-1-jacobian-contraction"]], "Compute the NTK: method 2 (NTK-vector products)": [[167, "compute-the-ntk-method-2-ntk-vector-products"]], "NLP from Scratch": [[168, "nlp-from-scratch"]], "Getting Started - Accelerate Your Scripts with nvFuser": [[169, "getting-started-accelerate-your-scripts-with-nvfuser"]], "How to save memory by fusing the optimizer step into the backward pass": [[170, "how-to-save-memory-by-fusing-the-optimizer-step-into-the-backward-pass"]], "Memory usage during training": [[170, "memory-usage-during-training"]], "Capturing and visualizing memory snapshots": [[170, "capturing-and-visualizing-memory-snapshots"]], "DISCLAIMER: This technique is not for all": [[170, "disclaimer-this-technique-is-not-for-all"]], "Tensor.register_post_accumulate_grad_hook(hook) API and our technique": [[170, "tensor-register-post-accumulate-grad-hook-hook-api-and-our-technique"]], "How everything fits together in 10 lines": [[170, "how-everything-fits-together-in-10-lines"]], "Parametrizations Tutorial": [[171, "parametrizations-tutorial"]], "Implementing parametrizations by hand": [[171, "implementing-parametrizations-by-hand"]], "Introduction to parametrizations": [[171, "introduction-to-parametrizations"]], "Inspecting a parametrized module": [[171, "inspecting-a-parametrized-module"]], "Parametrizations are first-class citizens": [[171, "parametrizations-are-first-class-citizens"]], "Caching the value of a parametrization": [[171, "caching-the-value-of-a-parametrization"]], "Concatenating parametrizations": [[171, "concatenating-parametrizations"]], "Initializing parametrizations": [[171, "initializing-parametrizations"]], "Removing parametrizations": [[171, "removing-parametrizations"]], "Per-sample-gradients": [[172, "per-sample-gradients"]], "What is it?": [[172, "what-is-it"]], "Per-sample-grads, the efficient way, using function transforms": [[172, "per-sample-grads-the-efficient-way-using-function-transforms"]], "Performance comparison": [[172, "performance-comparison"]], "A guide on good usage of non_blocking and pin_memory() in PyTorch": [[173, "a-guide-on-good-usage-of-non-blocking-and-pin-memory-in-pytorch"]], "What you will learn": [[173, "what-you-will-learn"], [255, "what-you-will-learn"], [266, "what-you-will-learn"]], "Preamble": [[173, "preamble"]], "Memory management basics": [[173, "memory-management-basics"]], "CUDA and (non-)pageable memory": [[173, "cuda-and-non-pageable-memory"]], "Asynchronous vs. Synchronous Operations with non_blocking=True (CUDA cudaMemcpyAsync)": [[173, "asynchronous-vs-synchronous-operations-with-non-blocking-true-cuda-cudamemcpyasync"]], "A PyTorch perspective": [[173, "a-pytorch-perspective"]], "pin_memory()": [[173, "pin-memory"]], "non_blocking=True": [[173, "non-blocking-true"]], "Synergies": [[173, "synergies"]], "Other copy directions (GPU -> CPU, CPU -> MPS)": [[173, "other-copy-directions-gpu-cpu-cpu-mps"]], "Practical recommendations": [[173, "practical-recommendations"]], "Additional considerations": [[173, "additional-considerations"]], "Additional resources": [[173, "additional-resources"]], "Training Transformer models using Pipeline Parallelism": [[174, "training-transformer-models-using-pipeline-parallelism"]], "Introduction to Distributed Pipeline Parallelism": [[175, "introduction-to-distributed-pipeline-parallelism"]], "Step 1: Partition the Transformer Model": [[175, "step-1-partition-the-transformer-model"]], "Step 2: Define The Main Execution": [[175, "step-2-define-the-main-execution"]], "Step 3: Launch the Distributed Processes": [[175, "step-3-launch-the-distributed-processes"]], "Customize Process Group Backends Using Cpp Extensions": [[176, "customize-process-group-backends-using-cpp-extensions"]], "Basics": [[176, "basics"], [181, "basics"]], "Step 1: Implement a Subclass of Backend": [[176, "step-1-implement-a-subclass-of-backend"]], "Step 2: Expose The Extension Python APIs": [[176, "step-2-expose-the-extension-python-apis"]], "Step 3: Build The Custom Extension": [[176, "step-3-build-the-custom-extension"]], "Step 4: Use The Extension in Application": [[176, "step-4-use-the-extension-in-application"]], "Pruning Tutorial": [[177, "pruning-tutorial"]], "Create a model": [[177, "create-a-model"]], "Inspect a Module": [[177, "inspect-a-module"]], "Pruning a Module": [[177, "pruning-a-module"]], "Iterative Pruning": [[177, "iterative-pruning"]], "Serializing a pruned model": [[177, "serializing-a-pruned-model"]], "Remove pruning re-parametrization": [[177, "remove-pruning-re-parametrization"]], "Pruning multiple parameters in a model": [[177, "pruning-multiple-parameters-in-a-model"]], "Global pruning": [[177, "global-pruning"]], "Extending torch.nn.utils.prune with custom pruning functions": [[177, "extending-torch-nn-utils-prune-with-custom-pruning-functions"]], "Real Time Inference on Raspberry Pi 4 (30 fps!)": [[178, "real-time-inference-on-raspberry-pi-4-30-fps"]], "Raspberry Pi 4 Setup": [[178, "raspberry-pi-4-setup"]], "Installing PyTorch and OpenCV": [[178, "installing-pytorch-and-opencv"]], "Video Capture": [[178, "video-capture"]], "Image Preprocessing": [[178, "image-preprocessing"]], "Model Choices": [[178, "model-choices"]], "MobileNetV2: Quantization and JIT": [[178, "mobilenetv2-quantization-and-jit"]], "Putting It Together": [[178, "putting-it-together"]], "Troubleshooting: Performance": [[178, "troubleshooting-performance"]], "Reinforcement Learning (PPO) with TorchRL Tutorial": [[179, "reinforcement-learning-ppo-with-torchrl-tutorial"]], "Define Hyperparameters": [[179, "define-hyperparameters"]], "Data collection parameters": [[179, "data-collection-parameters"]], "PPO parameters": [[179, "ppo-parameters"]], "Define an environment": [[179, "define-an-environment"]], "Normalization": [[179, "normalization"]], "Value network": [[179, "value-network"]], "Loss function": [[179, "loss-function"]], "Conclusion and next steps": [[179, "conclusion-and-next-steps"]], "Reinforcement Learning (DQN) Tutorial": [[180, "reinforcement-learning-dqn-tutorial"]], "Replay Memory": [[180, "replay-memory"]], "DQN algorithm": [[180, "dqn-algorithm"]], "Q-network": [[180, "q-network"]], "Hyperparameters and utilities": [[180, "hyperparameters-and-utilities"]], "Implementing Batch RPC Processing Using Asynchronous Executions": [[181, "implementing-batch-rpc-processing-using-asynchronous-executions"]], "Batch-Updating Parameter Server": [[181, "batch-updating-parameter-server"]], "Batch-Processing CartPole Solver": [[181, "batch-processing-cartpole-solver"]], "Learn More": [[181, "learn-more"], [189, "learn-more"], [227, "learn-more"], [229, "learn-more"], [232, "learn-more"], [240, "learn-more"], [243, "learn-more"], [244, "learn-more"], [245, "learn-more"]], "Implementing a Parameter Server Using Distributed RPC Framework": [[182, "implementing-a-parameter-server-using-distributed-rpc-framework"]], "Getting Started with Distributed RPC Framework": [[183, "getting-started-with-distributed-rpc-framework"]], "Distributed Reinforcement Learning using RPC and RRef": [[183, "distributed-reinforcement-learning-using-rpc-and-rref"]], "Distributed RNN using Distributed Autograd and Distributed Optimizer": [[183, "distributed-rnn-using-distributed-autograd-and-distributed-optimizer"]], "(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)": [[184, "beta-implementing-high-performance-transformers-with-scaled-dot-product-attention-sdpa"]], "Fused implementations": [[184, "fused-implementations"]], "Explicit Dispatcher Control": [[184, "explicit-dispatcher-control"]], "Hardware dependence": [[184, "hardware-dependence"]], "Causal Self Attention": [[184, "causal-self-attention"]], "NestedTensor and Dense tensor support": [[184, "nestedtensor-and-dense-tensor-support"]], "Using SDPA with torch.compile": [[184, "using-sdpa-with-torch-compile"]], "Using SDPA with attn_bias subclasses": [[184, "using-sdpa-with-attn-bias-subclasses"]], "NLP From Scratch: Translation with a Sequence to Sequence Network and Attention": [[185, "nlp-from-scratch-translation-with-a-sequence-to-sequence-network-and-attention"]], "Loading data files": [[185, "loading-data-files"]], "The Seq2Seq Model": [[185, "the-seq2seq-model"]], "The Encoder": [[185, "the-encoder"]], "The Decoder": [[185, "the-decoder"]], "Simple Decoder": [[185, "simple-decoder"]], "Attention Decoder": [[185, "attention-decoder"]], "Preparing Training Data": [[185, "preparing-training-data"]], "Training the Model": [[185, "training-the-model"]], "Plotting results": [[185, "plotting-results"]], "Evaluation": [[185, "evaluation"]], "Training and Evaluating": [[185, "training-and-evaluating"]], "Visualizing Attention": [[185, "visualizing-attention"]], "Spatial Transformer Networks Tutorial": [[187, "spatial-transformer-networks-tutorial"]], "Loading the data": [[187, "loading-the-data"]], "Depicting spatial transformer networks": [[187, "depicting-spatial-transformer-networks"]], "Visualizing the STN results": [[187, "visualizing-the-stn-results"]], "Speech Recognition with Wav2Vec2": [[188, "speech-recognition-with-wav2vec2"]], "PyTorch Profiler With TensorBoard": [[189, "pytorch-profiler-with-tensorboard"]], "1. Prepare the data and model": [[189, "prepare-the-data-and-model"]], "2. Use profiler to record execution events": [[189, "use-profiler-to-record-execution-events"]], "3. Run the profiler": [[189, "run-the-profiler"]], "4. Use TensorBoard to view results and analyze model performance": [[189, "use-tensorboard-to-view-results-and-analyze-model-performance"]], "5. Improve performance with the help of profiler": [[189, "improve-performance-with-the-help-of-profiler"]], "6. Analyze performance with other advanced features": [[189, "analyze-performance-with-other-advanced-features"]], "7. Additional Practices: Profiling PyTorch on AMD GPUs": [[189, "additional-practices-profiling-pytorch-on-amd-gpus"]], "Visualizing Models, Data, and Training with TensorBoard": [[190, "visualizing-models-data-and-training-with-tensorboard"]], "1. TensorBoard setup": [[190, "tensorboard-setup"]], "2. Writing to TensorBoard": [[190, "writing-to-tensorboard"]], "3. Inspect the model using TensorBoard": [[190, "inspect-the-model-using-tensorboard"]], "4. Adding a \u201cProjector\u201d to TensorBoard": [[190, "adding-a-projector-to-tensorboard"]], "5. Tracking model training with TensorBoard": [[190, "tracking-model-training-with-tensorboard"]], "6. Assessing trained models with TensorBoard": [[190, "assessing-trained-models-with-tensorboard"]], "Text-to-speech with Tacotron2": [[191, "text-to-speech-with-tacotron2"]], "Whole Slide Image Classification Using PyTorch and TIAToolbox": [[192, "whole-slide-image-classification-using-pytorch-and-tiatoolbox"]], "Setting up the environment": [[192, "setting-up-the-environment"]], "Importing related libraries": [[192, "importing-related-libraries"]], "Clean-up before a run": [[192, "clean-up-before-a-run"]], "Downloading the data": [[192, "downloading-the-data"]], "Reading the data": [[192, "reading-the-data"]], "Classify image patches": [[192, "classify-image-patches"]], "Define PatchPredictor model": [[192, "define-patchpredictor-model"]], "Predict patch labels": [[192, "predict-patch-labels"]], "Predict patch labels for a whole slide": [[192, "predict-patch-labels-for-a-whole-slide"]], "Feature extraction with a pathology-specific model": [[192, "feature-extraction-with-a-pathology-specific-model"]], "Where to Go From Here": [[192, "where-to-go-from-here"]], "Building a Convolution/Batch Norm fuser with torch.compile": [[193, "building-a-convolution-batch-norm-fuser-with-torch-compile"]], "Fusing Convolution with Batch Norm": [[193, "fusing-convolution-with-batch-norm"], [193, "id1"]], "Pattern Matching with torch.compile": [[193, "pattern-matching-with-torch-compile"]], "Testing out our Fusion Pass": [[193, "testing-out-our-fusion-pass"]], "Benchmarking our Fusion on ResNet18": [[193, "benchmarking-our-fusion-on-resnet18"]], "Introduction to torch.compile": [[194, "introduction-to-torch-compile"]], "torch.compile and Nested Calls": [[194, "torch-compile-and-nested-calls"]], "Best Practices and Recommendations": [[194, "best-practices-and-recommendations"]], "Demonstrating Speedups": [[194, "demonstrating-speedups"]], "Comparison to TorchScript and FX Tracing": [[194, "comparison-to-torchscript-and-fx-tracing"]], "TorchDynamo and FX Graphs": [[194, "torchdynamo-and-fx-graphs"]], "torch.export Nightly Tutorial": [[195, "torch-export-nightly-tutorial"]], "torch.export Tutorial": [[196, "torch-export-tutorial"]], "Graph Breaks": [[196, "graph-breaks"]], "Non-Strict Export": [[196, "non-strict-export"]], "Control Flow Ops": [[196, "control-flow-ops"]], "Constraints/Dynamic Shapes": [[196, "constraints-dynamic-shapes"]], "Basic concepts: symbols and guards": [[196, "basic-concepts-symbols-and-guards"]], "0/1 specialization": [[196, "specialization"]], "Named Dims": [[196, "named-dims"]], "Constraint violations, suggested fixes": [[196, "constraint-violations-suggested-fixes"]], "Data-dependent errors": [[196, "data-dependent-errors"]], "Guards, torch._check()": [[196, "guards-torch-check"]], "Specialized values": [[196, "specialized-values"]], "Custom Ops": [[196, "custom-ops"]], "IR/Decompositions": [[196, "ir-decompositions"]], "ExportDB": [[196, "exportdb"]], "Running the Exported Program": [[196, "running-the-exported-program"]], "Introduction to TorchRec": [[197, "introduction-to-torchrec"], [198, "introduction-to-torchrec"]], "Install Dependencies": [[197, "install-dependencies"]], "Embeddings": [[197, "embeddings"]], "Embeddings in RecSys": [[197, "embeddings-in-recsys"]], "Embeddings in PyTorch": [[197, "embeddings-in-pytorch"]], "TorchRec Features Overview": [[197, "torchrec-features-overview"]], "From EmbeddingBag to EmbeddingBagCollection": [[197, "from-embeddingbag-to-embeddingbagcollection"]], "TorchRec Input/Output Data Types": [[197, "torchrec-input-output-data-types"]], "Distributed Training and Sharding": [[197, "distributed-training-and-sharding"]], "Distributed Embeddings": [[197, "distributed-embeddings"]], "Sharding": [[197, "sharding"]], "Sharded Modules": [[197, "sharded-modules"]], "Planner": [[197, "planner"]], "Planner Result": [[197, "planner-result"]], "GPU Training with LazyAwaitable": [[197, "gpu-training-with-lazyawaitable"]], "Anatomy of Sharded TorchRec modules": [[197, "anatomy-of-sharded-torchrec-modules"]], "Optimizing Embedding Lookups": [[197, "optimizing-embedding-lookups"]], "DistributedModelParallel": [[197, "distributedmodelparallel"]], "Sharding Best Practices": [[197, "sharding-best-practices"]], "Adding in the Optimizer": [[197, "adding-in-the-optimizer"]], "Optimizer Classes": [[197, "optimizer-classes"]], "Fused optimizer in TorchRec": [[197, "fused-optimizer-in-torchrec"]], "Adding an Optimizer to EmbeddingBagCollection": [[197, "adding-an-optimizer-to-embeddingbagcollection"]], "TorchVision Object Detection Finetuning Tutorial": [[199, "torchvision-object-detection-finetuning-tutorial"]], "Defining the Dataset": [[199, "defining-the-dataset"]], "Writing a custom dataset for PennFudan": [[199, "writing-a-custom-dataset-for-pennfudan"]], "Defining your model": [[199, "defining-your-model"]], "1 - Finetuning from a pretrained model": [[199, "finetuning-from-a-pretrained-model"]], "2 - Modifying the model to add a different backbone": [[199, "modifying-the-model-to-add-a-different-backbone"]], "Object detection and instance segmentation model for PennFudan Dataset": [[199, "object-detection-and-instance-segmentation-model-for-pennfudan-dataset"]], "Putting everything together": [[199, "putting-everything-together"]], "Testing forward() method (Optional)": [[199, "testing-forward-method-optional"]], "Wrapping up": [[199, "wrapping-up"]], "Accelerating PyTorch Transformers by replacing nn.Transformer with Nested Tensors and torch.compile()": [[200, "accelerating-pytorch-transformers-by-replacing-nn-transformer-with-nested-tensors-and-torch-compile"]], "Is this tutorial for me?": [[200, "is-this-tutorial-for-me"]], "Introducing the Building Blocks": [[200, "introducing-the-building-blocks"]], "The above building blocks are \u201cAll You Need\u201d (as of October 2024)": [[200, "the-above-building-blocks-are-all-you-need-as-of-october-2024"]], "MultiheadAttention": [[200, "multiheadattention"]], "Utilities": [[200, "utilities"]], "GPT-style layer": [[200, "gpt-style-layer"]], "Going one step further": [[200, "going-one-step-further"]], "Cross Attention": [[200, "cross-attention"]], "Fully masked rows no longer cause NaNs": [[200, "fully-masked-rows-no-longer-cause-nans"]], "FlexAttention + NJT": [[200, "flexattention-njt"]], "Packed Projection": [[200, "packed-projection"]], "Input projection for MultiheadAttention": [[200, "input-projection-for-multiheadattention"]], "SwiGLU feed forward network of Transformer Layer": [[200, "swiglu-feed-forward-network-of-transformer-layer"]], "Extended examples": [[200, "extended-examples"]], "Visualizing Gradients": [[201, "visualizing-gradients"]], "Registering hooks": [[201, "registering-hooks"]], "Training and visualization": [[201, "training-and-visualization"]], "(Optional) Additional exercises": [[201, "optional-additional-exercises"]], "Intro": [[202, "intro"]], "Leverage Intel\u00ae Advanced Matrix Extensions": [[203, "leverage-intel-advanced-matrix-extensions"]], "AMX in PyTorch": [[203, "amx-in-pytorch"]], "Guidelines of leveraging AMX with workloads": [[203, "guidelines-of-leveraging-amx-with-workloads"]], "CPU operators that can leverage AMX:": [[203, "cpu-operators-that-can-leverage-amx"]], "Confirm AMX is being utilized": [[203, "confirm-amx-is-being-utilized"]], "Making Native Android Application that uses PyTorch prebuilt libraries": [[204, "making-native-android-application-that-uses-pytorch-prebuilt-libraries"]], "(beta) Compiling the optimizer with torch.compile": [[205, "beta-compiling-the-optimizer-with-torch-compile"]], "Model Setup": [[205, "model-setup"], [206, "model-setup"], [214, "model-setup"]], "Setting up and running the optimizer benchmark": [[205, "setting-up-and-running-the-optimizer-benchmark"]], "See Also": [[205, "see-also"], [253, "see-also"], [280, "see-also"]], "(beta) Running the compiled optimizer with an LR Scheduler": [[206, "beta-running-the-compiled-optimizer-with-an-lr-scheduler"]], "Setting up and running the compiled optimizer with LR Scheduler": [[206, "setting-up-and-running-the-compiled-optimizer-with-lr-scheduler"]], "Extension: What happens with a non-tensor LR?": [[206, "extension-what-happens-with-a-non-tensor-lr"]], "Direct Device-to-Device Communication with TensorPipe CUDA RPC": [[207, "direct-device-to-device-communication-with-tensorpipe-cuda-rpc"]], "What is CUDA RPC?": [[207, "what-is-cuda-rpc"]], "How to use CUDA RPC?": [[207, "how-to-use-cuda-rpc"]], "Asynchronous Saving with Distributed Checkpoint (DCP)": [[208, "asynchronous-saving-with-distributed-checkpoint-dcp"]], "Asynchronous Checkpointing Overview": [[208, "asynchronous-checkpointing-overview"]], "Even more performance with Pinned Memory": [[208, "even-more-performance-with-pinned-memory"]], "Getting Started with Distributed Checkpoint (DCP)": [[209, "getting-started-with-distributed-checkpoint-dcp"]], "How DCP works": [[209, "how-dcp-works"]], "How to use DCP": [[209, "how-to-use-dcp"]], "Saving": [[209, "saving"]], "Loading": [[209, "loading"]], "Formats": [[209, "formats"]], "Getting Started with CommDebugMode": [[210, "getting-started-with-commdebugmode"]], "What is CommDebugMode and why is it useful": [[210, "what-is-commdebugmode-and-why-is-it-useful"]], "Using CommDebugMode": [[210, "using-commdebugmode"]], "Getting Started with DeviceMesh": [[211, "getting-started-with-devicemesh"]], "What is DeviceMesh": [[211, "what-is-devicemesh"]], "Why DeviceMesh is Useful": [[211, "why-devicemesh-is-useful"]], "How to use DeviceMesh with HSDP": [[211, "how-to-use-devicemesh-with-hsdp"]], "How to use DeviceMesh for your custom parallel solutions": [[211, "how-to-use-devicemesh-for-your-custom-parallel-solutions"]], "Profiling PyTorch RPC-Based Workloads": [[213, "profiling-pytorch-rpc-based-workloads"], [265, "profiling-pytorch-rpc-based-workloads"]], "Explicit horizontal fusion with foreach_map and torch.compile": [[214, "explicit-horizontal-fusion-with-foreach-map-and-torch-compile"]], "Helper functions for foreach_map implementation": [[214, "helper-functions-for-foreach-map-implementation"]], "Setting up and running the compiled kernel": [[214, "setting-up-and-running-the-compiled-kernel"]], "(Beta) PyTorch Inference Performance Tuning on AWS Graviton Processors": [[215, "beta-pytorch-inference-performance-tuning-on-aws-graviton-processors"]], "Contents": [[215, "contents"]], "Speed up Inference with bfloat16 Fast Math Kernels": [[215, "speed-up-inference-with-bfloat16-fast-math-kernels"]], "Improve Inference Performance with OpenBLAS for Smaller Batch Dimensions": [[215, "improve-inference-performance-with-openblas-for-smaller-batch-dimensions"]], "Optimize Memory Allocation Overhead with Linux Transparent Huge Pages (THP)": [[215, "optimize-memory-allocation-overhead-with-linux-transparent-huge-pages-thp"]], "Intel\u00ae Extension for PyTorch*": [[216, "intel-extension-for-pytorch"]], "Features": [[216, "features"], [217, "features"]], "Examples \u2013 CPU": [[216, "examples-cpu"]], "Float32": [[216, "float32"], [216, "id1"], [216, "id4"], [216, "id7"]], "BFloat16": [[216, "bfloat16"], [216, "id2"], [216, "id5"], [216, "id8"]], "Inference": [[216, "inference"], [216, "id6"]], "Examples \u2013 GPU": [[216, "examples-gpu"]], "Float16": [[216, "float16"]], "C++ (CPU only)": [[216, "c-cpu-only"]], "Tutorials": [[216, "tutorials"], [217, "tutorials"]], "Ease-of-use quantization for PyTorch with Intel\u00ae Neural Compressor": [[217, "ease-of-use-quantization-for-pytorch-with-intel-neural-compressor"]], "FP8 Quantization": [[217, "fp8-quantization"]], "Weight-only Quantization": [[217, "weight-only-quantization"]], "Static Quantization with PT2E Backend": [[217, "static-quantization-with-pt2e-backend"]], "Accuracy-driven Tuning": [[217, "accuracy-driven-tuning"]], "Loading data in PyTorch": [[218, "loading-data-in-pytorch"]], "(beta) Efficient mobile interpreter in Android and iOS": [[219, "beta-efficient-mobile-interpreter-in-android-and-ios"]], "Pytorch Mobile Performance Recipes": [[220, "pytorch-mobile-performance-recipes"]], "Model Preparation for Android Recipe": [[221, "model-preparation-for-android-recipe"]], "Model Preparation for iOS Recipe": [[222, "model-preparation-for-ios-recipe"]], "Profiling PyTorch workloads with The Instrumentation and Tracing Technology (ITT) API": [[223, "profiling-pytorch-workloads-with-the-instrumentation-and-tracing-technology-itt-api"]], "What is Intel\u00ae VTune\u2122 Profiler": [[223, "what-is-intel-vtune-profiler"]], "What is Instrumentation and Tracing Technology (ITT) API": [[223, "what-is-instrumentation-and-tracing-technology-itt-api"]], "How to visualize PyTorch model hierarchy in Intel\u00ae VTune\u2122 Profiler": [[223, "how-to-visualize-pytorch-model-hierarchy-in-intel-vtune-profiler"]], "Launch Intel\u00ae VTune\u2122 Profiler": [[223, "launch-intel-vtune-profiler"]], "Configure Profiling for CPU": [[223, "configure-profiling-for-cpu"]], "Configure Profiling for XPU": [[223, "configure-profiling-for-xpu"]], "Read Profiling Result": [[223, "read-profiling-result"]], "Read XPU Profiling Result": [[223, "read-xpu-profiling-result"]], "A short sample code showcasing how to use PyTorch ITT APIs": [[223, "a-short-sample-code-showcasing-how-to-use-pytorch-itt-apis"]], "Summary of PyTorch Mobile Recipes": [[224, "summary-of-pytorch-mobile-recipes"]], "Model Interpretability using Captum": [[225, "model-interpretability-using-captum"]], "Before you begin": [[225, "before-you-begin"]], "Computing Attribution": [[225, "computing-attribution"]], "Visualizing the Results": [[225, "visualizing-the-results"]], "Final Notes": [[225, "final-notes"]], "Automatic Mixed Precision": [[226, "automatic-mixed-precision"]], "A simple network": [[226, "a-simple-network"]], "Default Precision": [[226, "default-precision"]], "Adding torch.autocast": [[226, "adding-torch-autocast"]], "Adding GradScaler": [[226, "adding-gradscaler"]], "All together: \u201cAutomatic Mixed Precision\u201d": [[226, "all-together-automatic-mixed-precision"]], "Inspecting/modifying gradients (e.g., clipping)": [[226, "inspecting-modifying-gradients-e-g-clipping"]], "Saving/Resuming": [[226, "saving-resuming"]], "Inference/Evaluation": [[226, "inference-evaluation"]], "Advanced topics": [[226, "advanced-topics"]], "Speedup with Amp is minor": [[226, "speedup-with-amp-is-minor"]], "Loss is inf/NaN": [[226, "loss-is-inf-nan"]], "Type mismatch error (may manifest as CUDNN_STATUS_BAD_PARAM)": [[226, "type-mismatch-error-may-manifest-as-cudnn-status-bad-param"]], "PyTorch Benchmark": [[227, "pytorch-benchmark"]], "1. Defining functions to benchmark": [[227, "defining-functions-to-benchmark"]], "2. Benchmarking with timeit.Timer": [[227, "benchmarking-with-timeit-timer"]], "3. Benchmarking with torch.utils.benchmark.Timer": [[227, "benchmarking-with-torch-utils-benchmark-timer"]], "4. Benchmarking with Blocked Autorange": [[227, "benchmarking-with-blocked-autorange"]], "5. Comparing benchmark results": [[227, "comparing-benchmark-results"]], "6. Saving/Loading benchmark results": [[227, "saving-loading-benchmark-results"]], "7. Generating inputs with Fuzzed Parameters": [[227, "generating-inputs-with-fuzzed-parameters"]], "8. Collecting instruction counts with Callgrind": [[227, "collecting-instruction-counts-with-callgrind"]], "Changing default device": [[228, "changing-default-device"]], "Defining a Neural Network in PyTorch": [[229, "defining-a-neural-network-in-pytorch"]], "1. Import necessary libraries for loading our data": [[229, "import-necessary-libraries-for-loading-our-data"], [243, "import-necessary-libraries-for-loading-our-data"], [244, "import-necessary-libraries-for-loading-our-data"], [245, "import-necessary-libraries-for-loading-our-data"]], "2. Define and initialize the neural network": [[229, "define-and-initialize-the-neural-network"], [244, "define-and-initialize-the-neural-network"]], "3. Specify how data will pass through your model": [[229, "specify-how-data-will-pass-through-your-model"]], "4. [Optional] Pass data through your model to test": [[229, "optional-pass-data-through-your-model-to-test"]], "PyTorch Recipes": [[230, "pytorch-recipes"]], "Tips for Loading an nn.Module from a Checkpoint": [[231, "tips-for-loading-an-nn-module-from-a-checkpoint"]], "Using torch.load(mmap=True)": [[231, "using-torch-load-mmap-true"]], "Using torch.device('meta')": [[231, "using-torch-device-meta"]], "Using load_state_dict(assign=True)": [[231, "using-load-state-dict-assign-true"]], "PyTorch Profiler": [[232, "pytorch-profiler"]], "1. Import all necessary libraries": [[232, "import-all-necessary-libraries"]], "2. Instantiate a simple Resnet model": [[232, "instantiate-a-simple-resnet-model"]], "3. Using profiler to analyze execution time": [[232, "using-profiler-to-analyze-execution-time"]], "4. Using profiler to analyze memory consumption": [[232, "using-profiler-to-analyze-memory-consumption"]], "5. Using tracing functionality": [[232, "using-tracing-functionality"]], "6. Examining stack traces": [[232, "examining-stack-traces"]], "7. Using profiler to analyze long-running jobs": [[232, "using-profiler-to-analyze-long-running-jobs"]], "Reasoning about Shapes in PyTorch": [[233, "reasoning-about-shapes-in-pytorch"]], "Save Load Across Devices": [[234, "save-load-across-devices"]], "Saving And Loading A General Checkpoint": [[235, "saving-and-loading-a-general-checkpoint"]], "Saving And Loading Models For Inference": [[236, "saving-and-loading-models-for-inference"]], "Saving Multiple Models In One File": [[237, "saving-multiple-models-in-one-file"]], "Extension points in nn.Module for load_state_dict and tensor subclasses": [[239, "extension-points-in-nn-module-for-load-state-dict-and-tensor-subclasses"]], "torch.utils.swap_tensors": [[239, "torch-utils-swap-tensors"]], "Application to nn.Module": [[239, "application-to-nn-module"]], "nn.Module.to() and related methods": [[239, "nn-module-to-and-related-methods"]], "nn.Module.load_state_dict()": [[239, "nn-module-load-state-dict"]], "How to use TensorBoard with PyTorch": [[240, "how-to-use-tensorboard-with-pytorch"]], "Using TensorBoard in PyTorch": [[240, "using-tensorboard-in-pytorch"]], "Log scalars": [[240, "log-scalars"]], "Run TensorBoard": [[240, "run-tensorboard"]], "Timer quick start": [[241, "timer-quick-start"]], "1. Defining a Timer": [[241, "defining-a-timer"]], "2. Wall time: Timer.blocked_autorange(...)": [[241, "wall-time-timer-blocked-autorange"]], "3. C++ snippets": [[241, "c-snippets"]], "4. Instruction counts: Timer.collect_callgrind(...)": [[241, "instruction-counts-timer-collect-callgrind"]], "5. Instruction counts: Delving deeper": [[241, "instruction-counts-delving-deeper"]], "6. A/B testing with Callgrind": [[241, "a-b-testing-with-callgrind"]], "7. Wrapping up": [[241, "wrapping-up"]], "8. Footnotes": [[241, "footnotes"]], "Performance Tuning Guide": [[242, "performance-tuning-guide"]], "General optimizations": [[242, "general-optimizations"]], "Enable asynchronous data loading and augmentation": [[242, "enable-asynchronous-data-loading-and-augmentation"]], "Disable gradient calculation for validation or inference": [[242, "disable-gradient-calculation-for-validation-or-inference"]], "Disable bias for convolutions directly followed by a batch norm": [[242, "disable-bias-for-convolutions-directly-followed-by-a-batch-norm"]], "Use parameter.grad = None instead of model.zero_grad() or optimizer.zero_grad()": [[242, "use-parameter-grad-none-instead-of-model-zero-grad-or-optimizer-zero-grad"]], "Fuse operations": [[242, "fuse-operations"]], "Enable channels_last memory format for computer vision models": [[242, "enable-channels-last-memory-format-for-computer-vision-models"]], "Checkpoint intermediate buffers": [[242, "checkpoint-intermediate-buffers"]], "Disable debugging APIs": [[242, "disable-debugging-apis"]], "CPU specific optimizations": [[242, "cpu-specific-optimizations"]], "Utilize Non-Uniform Memory Access (NUMA) Controls": [[242, "utilize-non-uniform-memory-access-numa-controls"]], "Utilize OpenMP": [[242, "utilize-openmp"]], "Intel OpenMP Runtime Library (libiomp)": [[242, "intel-openmp-runtime-library-libiomp"]], "Switch Memory allocator": [[242, "switch-memory-allocator"]], "Train a model on CPU with PyTorch ``DistributedDataParallel``(DDP) functionality": [[242, "train-a-model-on-cpu-with-pytorch-distributeddataparallel-ddp-functionality"]], "GPU specific optimizations": [[242, "gpu-specific-optimizations"]], "Enable Tensor cores": [[242, "enable-tensor-cores"]], "Use CUDA Graphs": [[242, "use-cuda-graphs"]], "Enable cuDNN auto-tuner": [[242, "enable-cudnn-auto-tuner"]], "Avoid unnecessary CPU-GPU synchronization": [[242, "avoid-unnecessary-cpu-gpu-synchronization"]], "Create tensors directly on the target device": [[242, "create-tensors-directly-on-the-target-device"]], "Use mixed precision and AMP": [[242, "use-mixed-precision-and-amp"]], "Preallocate memory in case of variable input length": [[242, "preallocate-memory-in-case-of-variable-input-length"]], "Distributed optimizations": [[242, "distributed-optimizations"]], "Use efficient data-parallel backend": [[242, "use-efficient-data-parallel-backend"]], "Skip unnecessary all-reduce if training with DistributedDataParallel and gradient accumulation": [[242, "skip-unnecessary-all-reduce-if-training-with-distributeddataparallel-and-gradient-accumulation"]], "Match the order of layers in constructors and during the execution if using DistributedDataParallel(find_unused_parameters=True)": [[242, "match-the-order-of-layers-in-constructors-and-during-the-execution-if-using-distributeddataparallel-find-unused-parameters-true"]], "Load-balance workload in a distributed setting": [[242, "load-balance-workload-in-a-distributed-setting"]], "Warmstarting model using parameters from a different model in PyTorch": [[243, "warmstarting-model-using-parameters-from-a-different-model-in-pytorch"]], "2. Define and initialize the neural network A and B": [[243, "define-and-initialize-the-neural-network-a-and-b"]], "3. Save model A": [[243, "save-model-a"]], "4. Load into model B": [[243, "load-into-model-b"]], "What is a state_dict in PyTorch": [[244, "what-is-a-state-dict-in-pytorch"]], "3. Initialize the optimizer": [[244, "initialize-the-optimizer"]], "4. Access the model and optimizer state_dict": [[244, "access-the-model-and-optimizer-state-dict"]], "Zeroing out gradients in PyTorch": [[245, "zeroing-out-gradients-in-pytorch"]], "2. Load and normalize the dataset": [[245, "load-and-normalize-the-dataset"]], "3. Build the neural network": [[245, "build-the-neural-network"]], "4. Define a Loss function and optimizer": [[245, "define-a-loss-function-and-optimizer"]], "5. Zero the gradients while training the network": [[245, "zero-the-gradients-while-training-the-network"]], "Reducing torch.compile cold start compilation time with regional compilation": [[246, "reducing-torch-compile-cold-start-compilation-time-with-regional-compilation"]], "Script and Optimize for Mobile Recipe": [[247, "script-and-optimize-for-mobile-recipe"]], "Intel\u00ae Extension for PyTorch* Backend on Intel\u00ae CPUs": [[249, "intel-extension-for-pytorch-backend-on-intel-cpus"]], "Usage Example": [[249, "usage-example"]], "Train FP32": [[249, "train-fp32"]], "Train BF16": [[249, "train-bf16"]], "Inference FP32": [[249, "inference-fp32"]], "Inference BF16": [[249, "inference-bf16"]], "Compile Time Caching Configuration": [[250, "compile-time-caching-configuration"]], "Inductor Cache Settings": [[250, "inductor-cache-settings"]], "TORCHINDUCTOR_FX_GRAPH_CACHE": [[250, "torchinductor-fx-graph-cache"]], "TORCHINDUCTOR_AUTOGRAD_CACHE": [[250, "torchinductor-autograd-cache"]], "TORCHINDUCTOR_CACHE_DIR": [[250, "torchinductor-cache-dir"]], "TORCHINDUCTOR_FX_GRAPH_REMOTE_CACHE": [[250, "torchinductor-fx-graph-remote-cache"]], "TORCHINDUCTOR_AUTOGRAD_REMOTE_CACHE": [[250, "torchinductor-autograd-remote-cache"]], "TORCHINDUCTOR_AUTOTUNE_REMOTE_CACHE": [[250, "torchinductor-autotune-remote-cache"]], "TORCHINDUCTOR_FORCE_DISABLE_CACHES": [[250, "torchinductor-force-disable-caches"]], "Compile Time Caching in torch.compile": [[251, "compile-time-caching-in-torch-compile"]], "Caching Offerings": [[251, "caching-offerings"]], "torch.compile end-to-end caching (Mega-Cache)": [[251, "torch-compile-end-to-end-caching-mega-cache"]], "Modular caching of TorchDynamo, TorchInductor, and Triton": [[251, "modular-caching-of-torchdynamo-torchinductor-and-triton"]], "Remote Caching": [[251, "remote-caching"]], "(beta) Utilizing Torch Function modes with torch.compile": [[252, "beta-utilizing-torch-function-modes-with-torch-compile"]], "Rewriting a torch op (torch.add -> torch.mul)": [[252, "rewriting-a-torch-op-torch-add-torch-mul"]], "Using User-Defined Triton Kernels with torch.compile": [[253, "using-user-defined-triton-kernels-with-torch-compile"]], "Advanced Usage": [[253, "advanced-usage"]], "Composability": [[253, "composability"]], "Wrapping Triton kernels with triton_op": [[253, "wrapping-triton-kernels-with-triton-op"]], "Adding training support": [[253, "adding-training-support"]], "Adding a CPU Fallback": [[253, "adding-a-cpu-fallback"]], "Adding a FlopCounter Formula": [[253, "adding-a-flopcounter-formula"]], "Limitations": [[253, "limitations"]], "Dynamic Compilation Control with torch.compiler.set_stance": [[254, "dynamic-compilation-control-with-torch-compiler-set-stance"]], "Description": [[254, "description"]], "Preventing recompilation": [[254, "preventing-recompilation"]], "Measuring performance gains": [[254, "measuring-performance-gains"]], "Crashing sooner": [[254, "crashing-sooner"]], "torch.export AOTInductor Tutorial for Python runtime (Beta)": [[255, "torch-export-aotinductor-tutorial-for-python-runtime-beta"]], "Model Compilation": [[255, "model-compilation"]], "Model Inference in Python": [[255, "model-inference-in-python"]], "When to use AOTInductor with a Python Runtime": [[255, "when-to-use-aotinductor-with-a-python-runtime"]], "Demonstration of torch.export flow, common challenges and the solutions to address them": [[256, "demonstration-of-torch-export-flow-common-challenges-and-the-solutions-to-address-them"]], "Key requirement for torch.export: No graph break": [[256, "key-requirement-for-torch-export-no-graph-break"]], "Video Classification": [[256, "video-classification"]], "Error: Static batch size": [[256, "error-static-batch-size"]], "Solution": [[256, "solution"], [256, "id1"], [256, "id2"], [256, "id3"]], "Automatic Speech Recognition": [[256, "automatic-speech-recognition"]], "Error: strict tracing with TorchDynamo": [[256, "error-strict-tracing-with-torchdynamo"]], "Image Captioning": [[256, "image-captioning"]], "Error: Cannot mutate tensors with frozen storage": [[256, "error-cannot-mutate-tensors-with-frozen-storage"]], "Promptable Image Segmentation": [[256, "promptable-image-segmentation"]], "Error: Model is not of type torch.nn.Module": [[256, "error-model-is-not-of-type-torch-nn-module"]], "(beta) Using TORCH_LOGS python API with torch.compile": [[257, "beta-using-torch-logs-python-api-with-torch-compile"]], "Optimizing CPU Performance on Intel\u00ae Xeon\u00ae with run_cpu Script": [[259, "optimizing-cpu-performance-on-intel-xeon-with-run-cpu-script"]], "What You Will Learn": [[259, "what-you-will-learn"]], "Introduction of the Optimizations": [[259, "introduction-of-the-optimizations"]], "Applying NUMA Access Control": [[259, "applying-numa-access-control"]], "Using Intel\u00ae OpenMP Runtime Library": [[259, "using-intel-openmp-runtime-library"]], "Choosing an Optimized Memory Allocator": [[259, "choosing-an-optimized-memory-allocator"]], "Quick Start Example Commands": [[259, "quick-start-example-commands"]], "Using torch.backends.xeon.run_cpu": [[259, "using-torch-backends-xeon-run-cpu"]], "Explanation of the options": [[259, "explanation-of-the-options"]], "Shard Optimizer States with ZeroRedundancyOptimizer": [[260, "shard-optimizer-states-with-zeroredundancyoptimizer"]], "What is ZeroRedundancyOptimizer?": [[260, "what-is-zeroredundancyoptimizer"]], "How to use ZeroRedundancyOptimizer?": [[260, "how-to-use-zeroredundancyoptimizer"]], "Recipes": [[261, "recipes"]], "(prototype) PyTorch BackendConfig Tutorial": [[263, "prototype-pytorch-backendconfig-tutorial"]], "1. Derive reference pattern for each quantized operator": [[263, "derive-reference-pattern-for-each-quantized-operator"]], "2. Set DTypeConfigs with backend constraints": [[263, "set-dtypeconfigs-with-backend-constraints"]], "3. Set up fusion for conv-relu": [[263, "set-up-fusion-for-conv-relu"]], "4. Define the BackendConfig": [[263, "define-the-backendconfig"]], "5. Set up QConfigMapping that satisfies the backend constraints": [[263, "set-up-qconfigmapping-that-satisfies-the-backend-constraints"]], "6. Quantize the model through prepare and convert": [[263, "quantize-the-model-through-prepare-and-convert"]], "(7. Experiment with faulty BackendConfig setups)": [[263, "experiment-with-faulty-backendconfig-setups"]], "Built-in BackendConfigs": [[263, "built-in-backendconfigs"]], "Introduction to Context Parallel": [[264, "introduction-to-context-parallel"]], "Enable Context Parallel": [[264, "enable-context-parallel"]], "Select Rotation Approach": [[264, "select-rotation-approach"]], "Flight Recorder for Debugging Stuck Jobs": [[266, "flight-recorder-for-debugging-stuck-jobs"]], "Enabling Flight Recorder": [[266, "enabling-flight-recorder"]], "Additional Settings": [[266, "additional-settings"]], "Retrieving Flight Recorder Data via an API": [[266, "retrieving-flight-recorder-data-via-an-api"]], "Flight Recorder File Formats": [[266, "flight-recorder-file-formats"]], "Analyzing Flight Recorder Dumps": [[266, "analyzing-flight-recorder-dumps"]], "An End-to-End Example": [[266, "an-end-to-end-example"]], "(prototype) Accelerating torch.save and torch.load with GPUDirect Storage": [[267, "prototype-accelerating-torch-save-and-torch-load-with-gpudirect-storage"]], "Using GPUDirect Storage with torch.save and torch.load": [[267, "using-gpudirect-storage-with-torch-save-and-torch-load"]], "(prototype) GPU Quantization with TorchAO": [[268, "prototype-gpu-quantization-with-torchao"]], "Set up Your Environment": [[268, "set-up-your-environment"]], "Inductor C++ Wrapper Tutorial": [[269, "inductor-c-wrapper-tutorial"]], "Prerequisites:": [[269, "prerequisites"], [279, "prerequisites"]], "Enabling the API": [[269, "enabling-the-api"]], "Example code": [[269, "example-code"]], "How to use torch.compile on Windows CPU/XPU": [[270, "how-to-use-torch-compile-on-windows-cpu-xpu"]], "Software Installation": [[270, "software-installation"]], "Install a Compiler": [[270, "install-a-compiler"]], "Set Up Environment": [[270, "set-up-environment"]], "Alternative Compiler for better performance on CPU": [[270, "id1"]], "Intel Compiler": [[270, "id2"]], "LLVM Compiler": [[270, "id4"]], "(Prototype) Convert Mobilenetv2 to Core ML": [[272, "prototype-convert-mobilenetv2-to-core-ml"]], "(Prototype) Use iOS GPU in PyTorch": [[273, "prototype-use-ios-gpu-in-pytorch"]], "(Prototype) Introduce lite interpreter workflow in Android and iOS": [[274, "prototype-introduce-lite-interpreter-workflow-in-android-and-ios"]], "Efficiently writing \u201csparse\u201d semantics for Adagrad with MaskedTensor": [[275, "efficiently-writing-sparse-semantics-for-adagrad-with-maskedtensor"]], "Introduction and Motivation": [[275, "introduction-and-motivation"]], "Preparation": [[275, "preparation"], [276, "preparation"], [277, "preparation"]], "Simpler Code with MaskedTensor": [[275, "simpler-code-with-maskedtensor"]], "Original Sparse Implementation": [[275, "original-sparse-implementation"]], "MaskedTensor Sparse Implementation": [[275, "maskedtensor-sparse-implementation"]], "MaskedTensor Advanced Semantics": [[276, "maskedtensor-advanced-semantics"]], "MaskedTensor vs NumPy\u2019s MaskedArray": [[276, "maskedtensor-vs-numpy-s-maskedarray"]], "Reduction Semantics": [[276, "reduction-semantics"]], "MaskedTensor Overview": [[277, "maskedtensor-overview"]], "Using MaskedTensor": [[277, "using-maskedtensor"]], "Construction": [[277, "construction"]], "Accessing the data and mask": [[277, "accessing-the-data-and-mask"]], "Indexing and slicing": [[277, "indexing-and-slicing"]], "Why is MaskedTensor useful?": [[277, "why-is-maskedtensor-useful"]], "Distinguishing between 0 and NaN gradient": [[277, "distinguishing-between-0-and-nan-gradient"]], "torch.where": [[277, "torch-where"]], "Another torch.where": [[277, "another-torch-where"]], "When using mask, x/0 yields NaN grad": [[277, "when-using-mask-x-0-yields-nan-grad"]], "torch.nansum() and torch.nanmean()": [[277, "torch-nansum-and-torch-nanmean"]], "Safe Softmax": [[277, "safe-softmax"]], "Implementing missing torch.nan* operators": [[277, "implementing-missing-torch-nan-operators"]], "MaskedTensor Sparsity": [[278, "maskedtensor-sparsity"]], "Principles": [[278, "principles"]], "Sparse COO tensors": [[278, "sparse-coo-tensors"]], "Sparse CSR tensors": [[278, "sparse-csr-tensors"]], "Supported Operations": [[278, "supported-operations"]], "Unary": [[278, "unary"]], "Binary": [[278, "binary"]], "Reductions": [[278, "reductions"]], "MaskedTensor Helper Methods": [[278, "maskedtensor-helper-methods"]], "Appendix": [[278, "appendix"]], "Sparse COO Construction": [[278, "sparse-coo-construction"]], "Sparse CSR Construction": [[278, "sparse-csr-construction"]], "Using Max-Autotune Compilation on CPU for Better Performance": [[279, "using-max-autotune-compilation-on-cpu-for-better-performance"]], "Activating the max-autotune mode": [[279, "activating-the-max-autotune-mode"]], "Example": [[279, "example"]], "Getting Started with Nested Tensors": [[280, "getting-started-with-nested-tensors"]], "Nested tensor initialization": [[280, "nested-tensor-initialization"]], "Nested Tensor Operations": [[280, "nested-tensor-operations"]], "Why Nested Tensor": [[280, "why-nested-tensor"]], "(Beta) Convert MobileNetV2 to NNAPI": [[281, "beta-convert-mobilenetv2-to-nnapi"]], "PyTorch 2 Export Quantization for OpenVINO torch.compile Backend": [[282, "pytorch-2-export-quantization-for-openvino-torch-compile-backend"]], "Post Training Quantization": [[282, "post-training-quantization"]], "Prerequisite: OpenVINO and NNCF installation": [[282, "prerequisite-openvino-and-nncf-installation"]], "1. Capture FX Graph": [[282, "capture-fx-graph"]], "2. Apply Quantization": [[282, "apply-quantization"]], "3. Lower into OpenVINO representation": [[282, "lower-into-openvino-representation"]], "4. Optional: Improve quantized model metrics": [[282, "optional-improve-quantized-model-metrics"]], "Autoloading Out-of-Tree Extension": [[283, "autoloading-out-of-tree-extension"]], "How to apply this mechanism to out-of-tree extensions?": [[283, "how-to-apply-this-mechanism-to-out-of-tree-extensions"]], "How it works": [[283, "how-it-works"]], "(prototype) Accelerating BERT with semi-structured (2:4) sparsity": [[284, "prototype-accelerating-bert-with-semi-structured-2-4-sparsity"]], "results": [[284, "id1"]], "Skipping Module Parameter Initialization": [[286, "skipping-module-parameter-initialization"]], "Skipping Initialization": [[286, "skipping-initialization"]], "Updating Modules to Support Skipping Initialization": [[286, "updating-modules-to-support-skipping-initialization"]], "Implementation Details": [[286, "implementation-details"]], "(prototype) Tracing-based Selective Build Mobile Interpreter in Android and iOS": [[287, "prototype-tracing-based-selective-build-mobile-interpreter-in-android-and-ios"]], "torch.vmap": [[288, "torch-vmap"]], "So, what is vmap?": [[288, "so-what-is-vmap"]], "PyTorch Vulkan Backend User Workflow": [[289, "pytorch-vulkan-backend-user-workflow"]], "Building PyTorch with Vulkan backend": [[289, "building-pytorch-with-vulkan-backend"]], "Optional usage of vulkan wrapper": [[289, "optional-usage-of-vulkan-wrapper"]], "Desktop build": [[289, "desktop-build"]], "Vulkan SDK": [[289, "vulkan-sdk"]], "Android build": [[289, "android-build"]], "Model preparation": [[289, "model-preparation"]], "Using Vulkan backend in code": [[289, "using-vulkan-backend-in-code"]], "C++ API": [[289, "c-api"]], "Python API": [[289, "python-api"]], "Android Java API": [[289, "android-java-api"]], "Building android test app with Vulkan": [[289, "building-android-test-app-with-vulkan"]], "Testing models without uploading to android device": [[289, "testing-models-without-uploading-to-android-device"]], "Unstable": [[290, "unstable"]]}, "indexentries": {}})