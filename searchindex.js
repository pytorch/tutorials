Search.setIndex({"docnames": ["advanced/ONNXLive", "advanced/coding_ddpg", "advanced/cpp_autograd", "advanced/cpp_custom_ops", "advanced/cpp_custom_ops_sycl", "advanced/cpp_export", "advanced/cpp_frontend", "advanced/custom_class_pt2", "advanced/custom_classes", "advanced/custom_ops_landing_page", "advanced/ddp_pipeline", "advanced/dispatcher", "advanced/extend_dispatcher", "advanced/generic_join", "advanced/neural_style_tutorial", "advanced/numpy_extensions_tutorial", "advanced/pendulum", "advanced/privateuseone", "advanced/python_custom_ops", "advanced/rpc_ddp_tutorial", "advanced/semi_structured_sparse", "advanced/sg_execution_times", "advanced/sharding", "advanced/torch-script-parallelism", "advanced/torch_script_custom_ops", "advanced/usb_semisup_learn", "beginner/audio_data_augmentation_tutorial", "beginner/audio_datasets_tutorial", "beginner/audio_feature_augmentation_tutorial", "beginner/audio_feature_extractions_tutorial", "beginner/audio_io_tutorial", "beginner/audio_resampling_tutorial", "beginner/basics/autogradqs_tutorial", "beginner/basics/buildmodel_tutorial", "beginner/basics/data_tutorial", "beginner/basics/index", "beginner/basics/intro", "beginner/basics/optimization_tutorial", "beginner/basics/quickstart_tutorial", "beginner/basics/saveloadrun_tutorial", "beginner/basics/sg_execution_times", "beginner/basics/tensorqs_tutorial", "beginner/basics/transforms_tutorial", "beginner/bettertransformer_tutorial", "beginner/blitz/autograd_tutorial", "beginner/blitz/cifar10_tutorial", "beginner/blitz/data_parallel_tutorial", "beginner/blitz/index", "beginner/blitz/neural_networks_tutorial", "beginner/blitz/sg_execution_times", "beginner/blitz/tensor_tutorial", "beginner/chatbot_tutorial", "beginner/colab", "beginner/data_loading_tutorial", "beginner/dcgan_faces_tutorial", "beginner/ddp_series_fault_tolerance", "beginner/ddp_series_intro", "beginner/ddp_series_multigpu", "beginner/ddp_series_theory", "beginner/deep_learning_60min_blitz", "beginner/deeplabv3_on_android", "beginner/deeplabv3_on_ios", "beginner/dist_overview", "beginner/examples_autograd/index", "beginner/examples_autograd/polynomial_autograd", "beginner/examples_autograd/polynomial_custom_function", "beginner/examples_autograd/sg_execution_times", "beginner/examples_nn/dynamic_net", "beginner/examples_nn/index", "beginner/examples_nn/polynomial_module", "beginner/examples_nn/polynomial_nn", "beginner/examples_nn/polynomial_optim", "beginner/examples_nn/sg_execution_times", "beginner/examples_tensor/index", "beginner/examples_tensor/polynomial_numpy", "beginner/examples_tensor/polynomial_tensor", "beginner/examples_tensor/sg_execution_times", "beginner/fgsm_tutorial", "beginner/finetuning_torchvision_models_tutorial", "beginner/former_torchies/autograd_tutorial_old", "beginner/former_torchies/nnft_tutorial", "beginner/former_torchies/parallelism_tutorial", "beginner/former_torchies/tensor_tutorial_old", "beginner/former_torchies_tutorial", "beginner/hta_intro_tutorial", "beginner/hta_trace_diff_tutorial", "beginner/hyperparameter_tuning_tutorial", "beginner/introyt", "beginner/introyt/autogradyt_tutorial", "beginner/introyt/captumyt", "beginner/introyt/index", "beginner/introyt/introyt1_tutorial", "beginner/introyt/introyt_index", "beginner/introyt/modelsyt_tutorial", "beginner/introyt/sg_execution_times", "beginner/introyt/tensorboardyt_tutorial", "beginner/introyt/tensors_deeper_tutorial", "beginner/introyt/trainingyt", "beginner/knowledge_distillation_tutorial", "beginner/nlp/advanced_tutorial", "beginner/nlp/deep_learning_tutorial", "beginner/nlp/index", "beginner/nlp/pytorch_tutorial", "beginner/nlp/sequence_models_tutorial", "beginner/nlp/sg_execution_times", "beginner/nlp/word_embeddings_tutorial", "beginner/nn_tutorial", "beginner/onnx/export_control_flow_model_to_onnx_tutorial", "beginner/onnx/export_simple_model_to_onnx_tutorial", "beginner/onnx/index", "beginner/onnx/intro_onnx", "beginner/onnx/onnx_registry_tutorial", "beginner/onnx/sg_execution_times", "beginner/profiler", "beginner/pytorch_with_examples", "beginner/saving_loading_models", "beginner/sg_execution_times", "beginner/t5_tutoria", "beginner/template_tutorial", "beginner/text_sentiment_ngrams_tutorial", "beginner/torchtext_custom_dataset_tutorial", "beginner/transfer_learning_tutorial", "beginner/transformer_tutorial", "beginner/translation_transformer", "beginner/understanding_leaf_vs_nonleaf_tutorial", "compilers_index", "deep-dive", "distributed", "domains", "ecosystem", "extension", "index", "intermediate/FSDP1_tutorial", "intermediate/FSDP_advanced_tutorial", "intermediate/FSDP_tutorial", "intermediate/TCPStore_libuv_backend", "intermediate/TP_tutorial", "intermediate/autograd_saved_tensors_hooks_tutorial", "intermediate/ax_multiobjective_nas_tutorial", "intermediate/char_rnn_classification_tutorial", "intermediate/char_rnn_generation_tutorial", "intermediate/compiled_autograd_tutorial", "intermediate/custom_function_conv_bn_tutorial", "intermediate/custom_function_double_backward_tutorial", "intermediate/ddp_series_minGPT", "intermediate/ddp_series_multinode", "intermediate/ddp_tutorial", "intermediate/dist_pipeline_parallel_tutorial", "intermediate/dist_tuto", "intermediate/dqn_with_rnn_tutorial", "intermediate/ensembling", "intermediate/forced_alignment_with_torchaudio_tutorial", "intermediate/forward_ad_usage", "intermediate/fx_profiling_tutorial", "intermediate/inductor_debug_cpu", "intermediate/jacobians_hessians", "intermediate/mario_rl_tutorial", "intermediate/memory_format_tutorial", "intermediate/mnist_train_nas", "intermediate/model_parallel_tutorial", "intermediate/monarch_distributed_tutorial", "intermediate/neural_tangent_kernels", "intermediate/nlp_from_scratch_index", "intermediate/nvfuser_intro_tutorial", "intermediate/optimizer_step_in_backward_tutorial", "intermediate/parametrizations", "intermediate/per_sample_grads", "intermediate/pinmem_nonblock", "intermediate/pipeline_tutorial", "intermediate/pipelining_tutorial", "intermediate/process_group_cpp_extension_tutorial", "intermediate/pruning_tutorial", "intermediate/realtime_rpi", "intermediate/reinforcement_ppo", "intermediate/reinforcement_q_learning", "intermediate/rpc_async_execution", "intermediate/rpc_param_server_tutorial", "intermediate/rpc_tutorial", "intermediate/scaled_dot_product_attention_tutorial", "intermediate/seq2seq_translation_tutorial", "intermediate/sg_execution_times", "intermediate/spatial_transformer_tutorial", "intermediate/speech_recognition_pipeline_tutorial", "intermediate/tensorboard_profiler_tutorial", "intermediate/tensorboard_tutorial", "intermediate/text_to_speech_with_torchaudio", "intermediate/torch_compile_conv_bn_fuser", "intermediate/torch_compile_tutorial", "intermediate/torch_export_nightly_tutorial", "intermediate/torch_export_tutorial", "intermediate/torchrec_intro_tutorial", "intermediate/torchrec_tutorial", "intermediate/torchvision_tutorial", "intermediate/transformer_building_blocks", "intermediate/visualizing_gradients_tutorial", "intro", "recipes/android_native_app_with_custom_op", "recipes/compiling_optimizer", "recipes/compiling_optimizer_lr_scheduler", "recipes/distributed_async_checkpoint_recipe", "recipes/distributed_checkpoint_recipe", "recipes/distributed_comm_debug_mode", "recipes/distributed_device_mesh", "recipes/distributed_optim_torchscript", "recipes/distributed_rpc_profiling", "recipes/foreach_map", "recipes/intel_neural_compressor_for_pytorch", "recipes/loading_data_recipe", "recipes/mobile_interpreter", "recipes/mobile_perf", "recipes/model_preparation_android", "recipes/model_preparation_ios", "recipes/profile_with_itt", "recipes/ptmobile_recipes_summary", "recipes/recipes/Captum_Recipe", "recipes/recipes/amp_recipe", "recipes/recipes/benchmark", "recipes/recipes/changing_default_device", "recipes/recipes/defining_a_neural_network", "recipes/recipes/index", "recipes/recipes/module_load_state_dict_tips", "recipes/recipes/profiler_recipe", "recipes/recipes/reasoning_about_shapes", "recipes/recipes/save_load_across_devices", "recipes/recipes/saving_and_loading_a_general_checkpoint", "recipes/recipes/saving_and_loading_models_for_inference", "recipes/recipes/saving_multiple_models_in_one_file", "recipes/recipes/sg_execution_times", "recipes/recipes/swap_tensors", "recipes/recipes/tensorboard_with_pytorch", "recipes/recipes/timer_quick_start", "recipes/recipes/tuning_guide", "recipes/recipes/warmstarting_model_using_parameters_from_a_different_model", "recipes/recipes/what_is_state_dict", "recipes/recipes/zeroing_out_gradients", "recipes/regional_aot", "recipes/regional_compilation", "recipes/script_optimized", "recipes/sg_execution_times", "recipes/torch_compile_caching_configuration_tutorial", "recipes/torch_compile_caching_tutorial", "recipes/torch_compile_torch_function_modes", "recipes/torch_compile_user_defined_triton_kernel_tutorial", "recipes/torch_compiler_set_stance_tutorial", "recipes/torch_export_aoti_python", "recipes/torch_export_challenges_solutions", "recipes/torch_logs", "recipes/torchscript_inference", "recipes/xeon_run_cpu", "recipes/zero_redundancy_optimizer", "recipes_index", "sg_execution_times", "unstable/context_parallel", "unstable/distributed_rpc_profiling", "unstable/flight_recorder_tutorial", "unstable/gpu_direct_storage", "unstable/gpu_quantization_torchao_tutorial", "unstable/inductor_cpp_wrapper_tutorial", "unstable/inductor_windows", "unstable/inductor_windows_cpu", "unstable/ios_coreml_workflow", "unstable/ios_gpu_workflow", "unstable/lite_interpreter", "unstable/maskedtensor_adagrad", "unstable/maskedtensor_advanced_semantics", "unstable/maskedtensor_overview", "unstable/maskedtensor_sparsity", "unstable/max_autotune_on_CPU_tutorial", "unstable/nestedtensor", "unstable/nnapi_mobilenetv2", "unstable/openvino_quantizer", "unstable/python_extension_autoload", "unstable/sg_execution_times", "unstable/tracing_based_selective_build", "unstable/vmap_recipe", "unstable_index"], "filenames": ["advanced/ONNXLive.rst", "advanced/coding_ddpg.rst", "advanced/cpp_autograd.rst", "advanced/cpp_custom_ops.rst", "advanced/cpp_custom_ops_sycl.rst", "advanced/cpp_export.rst", "advanced/cpp_frontend.rst", "advanced/custom_class_pt2.rst", "advanced/custom_classes.rst", "advanced/custom_ops_landing_page.rst", "advanced/ddp_pipeline.rst", "advanced/dispatcher.rst", "advanced/extend_dispatcher.rst", "advanced/generic_join.rst", "advanced/neural_style_tutorial.rst", "advanced/numpy_extensions_tutorial.rst", "advanced/pendulum.rst", "advanced/privateuseone.rst", "advanced/python_custom_ops.rst", "advanced/rpc_ddp_tutorial.rst", "advanced/semi_structured_sparse.rst", "advanced/sg_execution_times.rst", "advanced/sharding.rst", "advanced/torch-script-parallelism.rst", "advanced/torch_script_custom_ops.rst", "advanced/usb_semisup_learn.rst", "beginner/audio_data_augmentation_tutorial.rst", "beginner/audio_datasets_tutorial.rst", "beginner/audio_feature_augmentation_tutorial.rst", "beginner/audio_feature_extractions_tutorial.rst", "beginner/audio_io_tutorial.rst", "beginner/audio_resampling_tutorial.rst", "beginner/basics/autogradqs_tutorial.rst", "beginner/basics/buildmodel_tutorial.rst", "beginner/basics/data_tutorial.rst", "beginner/basics/index.rst", "beginner/basics/intro.rst", "beginner/basics/optimization_tutorial.rst", "beginner/basics/quickstart_tutorial.rst", "beginner/basics/saveloadrun_tutorial.rst", "beginner/basics/sg_execution_times.rst", "beginner/basics/tensorqs_tutorial.rst", "beginner/basics/transforms_tutorial.rst", "beginner/bettertransformer_tutorial.rst", "beginner/blitz/autograd_tutorial.rst", "beginner/blitz/cifar10_tutorial.rst", "beginner/blitz/data_parallel_tutorial.rst", "beginner/blitz/index.rst", "beginner/blitz/neural_networks_tutorial.rst", "beginner/blitz/sg_execution_times.rst", "beginner/blitz/tensor_tutorial.rst", "beginner/chatbot_tutorial.rst", "beginner/colab.rst", "beginner/data_loading_tutorial.rst", "beginner/dcgan_faces_tutorial.rst", "beginner/ddp_series_fault_tolerance.rst", "beginner/ddp_series_intro.rst", "beginner/ddp_series_multigpu.rst", "beginner/ddp_series_theory.rst", "beginner/deep_learning_60min_blitz.rst", "beginner/deeplabv3_on_android.rst", "beginner/deeplabv3_on_ios.rst", "beginner/dist_overview.rst", "beginner/examples_autograd/index.rst", "beginner/examples_autograd/polynomial_autograd.rst", "beginner/examples_autograd/polynomial_custom_function.rst", "beginner/examples_autograd/sg_execution_times.rst", "beginner/examples_nn/dynamic_net.rst", "beginner/examples_nn/index.rst", "beginner/examples_nn/polynomial_module.rst", "beginner/examples_nn/polynomial_nn.rst", "beginner/examples_nn/polynomial_optim.rst", "beginner/examples_nn/sg_execution_times.rst", "beginner/examples_tensor/index.rst", "beginner/examples_tensor/polynomial_numpy.rst", "beginner/examples_tensor/polynomial_tensor.rst", "beginner/examples_tensor/sg_execution_times.rst", "beginner/fgsm_tutorial.rst", "beginner/finetuning_torchvision_models_tutorial.rst", "beginner/former_torchies/autograd_tutorial_old.rst", "beginner/former_torchies/nnft_tutorial.rst", "beginner/former_torchies/parallelism_tutorial.rst", "beginner/former_torchies/tensor_tutorial_old.rst", "beginner/former_torchies_tutorial.rst", "beginner/hta_intro_tutorial.rst", "beginner/hta_trace_diff_tutorial.rst", "beginner/hyperparameter_tuning_tutorial.rst", "beginner/introyt.rst", "beginner/introyt/autogradyt_tutorial.rst", "beginner/introyt/captumyt.rst", "beginner/introyt/index.rst", "beginner/introyt/introyt1_tutorial.rst", "beginner/introyt/introyt_index.rst", "beginner/introyt/modelsyt_tutorial.rst", "beginner/introyt/sg_execution_times.rst", "beginner/introyt/tensorboardyt_tutorial.rst", "beginner/introyt/tensors_deeper_tutorial.rst", "beginner/introyt/trainingyt.rst", "beginner/knowledge_distillation_tutorial.rst", "beginner/nlp/advanced_tutorial.rst", "beginner/nlp/deep_learning_tutorial.rst", "beginner/nlp/index.rst", "beginner/nlp/pytorch_tutorial.rst", "beginner/nlp/sequence_models_tutorial.rst", "beginner/nlp/sg_execution_times.rst", "beginner/nlp/word_embeddings_tutorial.rst", "beginner/nn_tutorial.rst", "beginner/onnx/export_control_flow_model_to_onnx_tutorial.rst", "beginner/onnx/export_simple_model_to_onnx_tutorial.rst", "beginner/onnx/index.rst", "beginner/onnx/intro_onnx.rst", "beginner/onnx/onnx_registry_tutorial.rst", "beginner/onnx/sg_execution_times.rst", "beginner/profiler.rst", "beginner/pytorch_with_examples.rst", "beginner/saving_loading_models.rst", "beginner/sg_execution_times.rst", "beginner/t5_tutoria.rst", "beginner/template_tutorial.rst", "beginner/text_sentiment_ngrams_tutorial.rst", "beginner/torchtext_custom_dataset_tutorial.rst", "beginner/transfer_learning_tutorial.rst", "beginner/transformer_tutorial.rst", "beginner/translation_transformer.rst", "beginner/understanding_leaf_vs_nonleaf_tutorial.rst", "compilers_index.rst", "deep-dive.rst", "distributed.rst", "domains.rst", "ecosystem.rst", "extension.rst", "index.rst", "intermediate/FSDP1_tutorial.rst", "intermediate/FSDP_advanced_tutorial.rst", "intermediate/FSDP_tutorial.rst", "intermediate/TCPStore_libuv_backend.rst", "intermediate/TP_tutorial.rst", "intermediate/autograd_saved_tensors_hooks_tutorial.rst", "intermediate/ax_multiobjective_nas_tutorial.rst", "intermediate/char_rnn_classification_tutorial.rst", "intermediate/char_rnn_generation_tutorial.rst", "intermediate/compiled_autograd_tutorial.rst", "intermediate/custom_function_conv_bn_tutorial.rst", "intermediate/custom_function_double_backward_tutorial.rst", "intermediate/ddp_series_minGPT.rst", "intermediate/ddp_series_multinode.rst", "intermediate/ddp_tutorial.rst", "intermediate/dist_pipeline_parallel_tutorial.rst", "intermediate/dist_tuto.rst", "intermediate/dqn_with_rnn_tutorial.rst", "intermediate/ensembling.rst", "intermediate/forced_alignment_with_torchaudio_tutorial.rst", "intermediate/forward_ad_usage.rst", "intermediate/fx_profiling_tutorial.rst", "intermediate/inductor_debug_cpu.rst", "intermediate/jacobians_hessians.rst", "intermediate/mario_rl_tutorial.rst", "intermediate/memory_format_tutorial.rst", "intermediate/mnist_train_nas.rst", "intermediate/model_parallel_tutorial.rst", "intermediate/monarch_distributed_tutorial.rst", "intermediate/neural_tangent_kernels.rst", "intermediate/nlp_from_scratch_index.rst", "intermediate/nvfuser_intro_tutorial.rst", "intermediate/optimizer_step_in_backward_tutorial.rst", "intermediate/parametrizations.rst", "intermediate/per_sample_grads.rst", "intermediate/pinmem_nonblock.rst", "intermediate/pipeline_tutorial.rst", "intermediate/pipelining_tutorial.rst", "intermediate/process_group_cpp_extension_tutorial.rst", "intermediate/pruning_tutorial.rst", "intermediate/realtime_rpi.rst", "intermediate/reinforcement_ppo.rst", "intermediate/reinforcement_q_learning.rst", "intermediate/rpc_async_execution.rst", "intermediate/rpc_param_server_tutorial.rst", "intermediate/rpc_tutorial.rst", "intermediate/scaled_dot_product_attention_tutorial.rst", "intermediate/seq2seq_translation_tutorial.rst", "intermediate/sg_execution_times.rst", "intermediate/spatial_transformer_tutorial.rst", "intermediate/speech_recognition_pipeline_tutorial.rst", "intermediate/tensorboard_profiler_tutorial.rst", "intermediate/tensorboard_tutorial.rst", "intermediate/text_to_speech_with_torchaudio.rst", "intermediate/torch_compile_conv_bn_fuser.rst", "intermediate/torch_compile_tutorial.rst", "intermediate/torch_export_nightly_tutorial.rst", "intermediate/torch_export_tutorial.rst", "intermediate/torchrec_intro_tutorial.rst", "intermediate/torchrec_tutorial.rst", "intermediate/torchvision_tutorial.rst", "intermediate/transformer_building_blocks.rst", "intermediate/visualizing_gradients_tutorial.rst", "intro.rst", "recipes/android_native_app_with_custom_op.rst", "recipes/compiling_optimizer.rst", "recipes/compiling_optimizer_lr_scheduler.rst", "recipes/distributed_async_checkpoint_recipe.rst", "recipes/distributed_checkpoint_recipe.rst", "recipes/distributed_comm_debug_mode.rst", "recipes/distributed_device_mesh.rst", "recipes/distributed_optim_torchscript.rst", "recipes/distributed_rpc_profiling.rst", "recipes/foreach_map.rst", "recipes/intel_neural_compressor_for_pytorch.rst", "recipes/loading_data_recipe.rst", "recipes/mobile_interpreter.rst", "recipes/mobile_perf.rst", "recipes/model_preparation_android.rst", "recipes/model_preparation_ios.rst", "recipes/profile_with_itt.rst", "recipes/ptmobile_recipes_summary.rst", "recipes/recipes/Captum_Recipe.rst", "recipes/recipes/amp_recipe.rst", "recipes/recipes/benchmark.rst", "recipes/recipes/changing_default_device.rst", "recipes/recipes/defining_a_neural_network.rst", "recipes/recipes/index.rst", "recipes/recipes/module_load_state_dict_tips.rst", "recipes/recipes/profiler_recipe.rst", "recipes/recipes/reasoning_about_shapes.rst", "recipes/recipes/save_load_across_devices.rst", "recipes/recipes/saving_and_loading_a_general_checkpoint.rst", "recipes/recipes/saving_and_loading_models_for_inference.rst", "recipes/recipes/saving_multiple_models_in_one_file.rst", "recipes/recipes/sg_execution_times.rst", "recipes/recipes/swap_tensors.rst", "recipes/recipes/tensorboard_with_pytorch.rst", "recipes/recipes/timer_quick_start.rst", "recipes/recipes/tuning_guide.rst", "recipes/recipes/warmstarting_model_using_parameters_from_a_different_model.rst", "recipes/recipes/what_is_state_dict.rst", "recipes/recipes/zeroing_out_gradients.rst", "recipes/regional_aot.rst", "recipes/regional_compilation.rst", "recipes/script_optimized.rst", "recipes/sg_execution_times.rst", "recipes/torch_compile_caching_configuration_tutorial.rst", "recipes/torch_compile_caching_tutorial.rst", "recipes/torch_compile_torch_function_modes.rst", "recipes/torch_compile_user_defined_triton_kernel_tutorial.rst", "recipes/torch_compiler_set_stance_tutorial.rst", "recipes/torch_export_aoti_python.rst", "recipes/torch_export_challenges_solutions.rst", "recipes/torch_logs.rst", "recipes/torchscript_inference.rst", "recipes/xeon_run_cpu.rst", "recipes/zero_redundancy_optimizer.rst", "recipes_index.rst", "sg_execution_times.rst", "unstable/context_parallel.rst", "unstable/distributed_rpc_profiling.rst", "unstable/flight_recorder_tutorial.rst", "unstable/gpu_direct_storage.rst", "unstable/gpu_quantization_torchao_tutorial.rst", "unstable/inductor_cpp_wrapper_tutorial.rst", "unstable/inductor_windows.rst", "unstable/inductor_windows_cpu.rst", "unstable/ios_coreml_workflow.rst", "unstable/ios_gpu_workflow.rst", "unstable/lite_interpreter.rst", "unstable/maskedtensor_adagrad.rst", "unstable/maskedtensor_advanced_semantics.rst", "unstable/maskedtensor_overview.rst", "unstable/maskedtensor_sparsity.rst", "unstable/max_autotune_on_CPU_tutorial.rst", "unstable/nestedtensor.rst", "unstable/nnapi_mobilenetv2.rst", "unstable/openvino_quantizer.rst", "unstable/python_extension_autoload.rst", "unstable/sg_execution_times.rst", "unstable/tracing_based_selective_build.rst", "unstable/vmap_recipe.rst", "unstable_index.rst"], "titles": ["ONNX Live Tutorial", "TorchRL objectives: Coding a DDPG loss", "Autograd in C++ Frontend", "Custom C++ and CUDA Operators", "Custom SYCL Operators", "&lt;no title&gt;", "Using the PyTorch C++ Frontend", "Supporting Custom C++ Classes in torch.compile/torch.export", "Extending PyTorch with Custom C++ Classes", "PyTorch Custom Operators", "Training Transformer models using Distributed Data Parallel and Pipeline Parallelism", "Registering a Dispatched Operator in C++", "Extending dispatcher for a new backend in C++", "Distributed Training with Uneven Inputs Using the Join Context Manager", "Neural Transfer Using PyTorch", "Creating Extensions Using NumPy and SciPy", "Pendulum: Writing your environment and transforms with TorchRL", "Facilitating New Backend Integration by PrivateUse1", "Custom Python Operators", "Combining Distributed DataParallel with Distributed RPC Framework", "(beta) Accelerating BERT with semi-structured (2:4) sparsity", "Computation times", "Exploring TorchRec sharding", "&lt;no title&gt;", "&lt;no title&gt;", "Semi-Supervised Learning using USB built upon PyTorch", "Audio Data Augmentation", "Audio Datasets", "Audio Feature Augmentation", "Audio Feature Extractions", "Audio I/O", "Audio Resampling", "Automatic Differentiation with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.autograd</span></code>", "Build the Neural Network", "Datasets &amp; DataLoaders", "Learn the Basics", "Learn the Basics", "Optimizing Model Parameters", "Quickstart", "Save and Load the Model", "Computation times", "Tensors", "Transforms", "Fast Transformer Inference with Better Transformer", "A Gentle Introduction to <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.autograd</span></code>", "Training a Classifier", "Optional: Data Parallelism", "Deep Learning with PyTorch: A 60 Minute Blitz", "Neural Networks", "Computation times", "Tensors", "Chatbot Tutorial", "Running Tutorials in Google Colab", "Writing Custom Datasets, DataLoaders and Transforms", "DCGAN Tutorial", "Fault-tolerant Distributed Training with <code class=\"docutils literal notranslate\"><span class=\"pre\">torchrun</span></code>", "Distributed Data Parallel in PyTorch - Video Tutorials", "Multi GPU training with DDP", "What is Distributed Data Parallel (DDP)", "Deep Learning with PyTorch: A 60 Minute Blitz", "Image Segmentation DeepLabV3 on Android", "Image Segmentation DeepLabV3 on iOS", "PyTorch Distributed Overview", "&lt;no title&gt;", "PyTorch: Tensors and autograd", "PyTorch: Defining New autograd Functions", "Computation times", "PyTorch: Control Flow + Weight Sharing", "&lt;no title&gt;", "PyTorch: Custom nn Modules", "PyTorch: nn", "PyTorch: optim", "Computation times", "&lt;no title&gt;", "Warm-up: numpy", "PyTorch: Tensors", "Computation times", "Adversarial Example Generation", "Finetuning Torchvision Models", "Autograd", "nn Package", "Multi-GPU Examples", "Tensors", "PyTorch for Former Torch Users", "Introduction to Holistic Trace Analysis", "Trace Diff using Holistic Trace Analysis", "Hyperparameter tuning with Ray Tune", "Introduction to PyTorch - YouTube Series", "The Fundamentals of Autograd", "Model Understanding with Captum", "Introduction to PyTorch on YouTube", "Introduction to PyTorch", "Introduction to PyTorch - YouTube Series", "Building Models with PyTorch", "Computation times", "PyTorch TensorBoard Support", "Introduction to PyTorch Tensors", "Training with PyTorch", "Knowledge Distillation Tutorial", "Advanced: Making Dynamic Decisions and the Bi-LSTM CRF", "Deep Learning with PyTorch", "Deep Learning for NLP with Pytorch", "Introduction to PyTorch", "Sequence Models and Long Short-Term Memory Networks", "Computation times", "Word Embeddings: Encoding Lexical Semantics", "What is <cite>torch.nn</cite> <em>really</em>?", "Export a model with control flow to ONNX", "Export a PyTorch model to ONNX", "ONNX", "Introduction to ONNX", "Extending the ONNX Exporter Operator Support", "Computation times", "Profiling your PyTorch Module", "Learning PyTorch with Examples", "Saving and Loading Models", "Computation times", "T5-Base Model for Summarization, Sentiment Classification, and Translation", "Template Tutorial", "Text classification with the torchtext library", "Preprocess custom text dataset using torchtext", "Transfer Learning for Computer Vision Tutorial", "Language Modeling with <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> and torchtext", "Language Translation with <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> and torchtext", "Understanding requires_grad, retain_grad, Leaf, and Non-leaf Tensors", "Compilers", "Deep Dive", "Distributed", "Domains", "Ecosystem", "Extension", "Welcome to PyTorch Tutorials", "Getting Started with Fully Sharded Data Parallel(FSDP)", "Advanced Model Training with Fully Sharded Data Parallel (FSDP)", "Getting Started with Fully Sharded Data Parallel (FSDP2)", "Introduction to Libuv TCPStore Backend", "Large Scale Transformer model training with Tensor Parallel (TP)", "Hooks for autograd saved tensors", "Multi-Objective NAS with Ax", "NLP From Scratch: Classifying Names with a Character-Level RNN", "NLP From Scratch: Generating Names with a Character-Level RNN", "Compiled Autograd: Capturing a larger backward graph for <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "Fusing Convolution and Batch Norm using Custom Function", "Double Backward with Custom Functions", "Training \u201creal-world\u201d models with DDP", "Multinode Training", "Getting Started with Distributed Data Parallel", "Distributed Pipeline Parallelism Using RPC", "Writing Distributed Applications with PyTorch", "Recurrent DQN: Training recurrent policies", "Model ensembling", "Forced Alignment with Wav2Vec2", "Forward-mode Automatic Differentiation (Beta)", "(beta) Building a Simple CPU Performance Profiler with FX", "Inductor CPU backend debugging and profiling", "Jacobians, Hessians, hvp, vhp, and more: composing function transforms", "Train a Mario-playing RL Agent", "Channels Last Memory Format in PyTorch", "&lt;no title&gt;", "Single-Machine Model Parallel Best Practices", "Interactive Distributed Applications with Monarch", "Neural Tangent Kernels", "NLP from Scratch", "Getting Started - Accelerate Your Scripts with nvFuser", "How to save memory by fusing the optimizer step into the backward pass", "Parametrizations Tutorial", "Per-sample-gradients", "A guide on good usage of <code class=\"docutils literal notranslate\"><span class=\"pre\">non_blocking</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">pin_memory()</span></code> in PyTorch", "Training Transformer models using Pipeline Parallelism", "Introduction to Distributed Pipeline Parallelism", "Customize Process Group Backends Using Cpp Extensions", "Pruning Tutorial", "Real Time Inference on Raspberry Pi 4 and 5 (40 fps!)", "Reinforcement Learning (PPO) with TorchRL Tutorial", "Reinforcement Learning (DQN) Tutorial", "Implementing Batch RPC Processing Using Asynchronous Executions", "Implementing a Parameter Server Using Distributed RPC Framework", "Getting Started with Distributed RPC Framework", "(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)", "NLP From Scratch: Translation with a Sequence to Sequence Network and Attention", "Computation times", "Spatial Transformer Networks Tutorial", "Speech Recognition with Wav2Vec2", "PyTorch Profiler With TensorBoard", "Visualizing Models, Data, and Training with TensorBoard", "Text-to-speech with Tacotron2", "Building a Convolution/Batch Norm fuser with torch.compile", "Introduction to <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "torch.export Nightly Tutorial", "torch.export Tutorial", "Introduction to TorchRec", "Introduction to TorchRec", "TorchVision Object Detection Finetuning Tutorial", "Accelerating PyTorch Transformers by replacing <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> with Nested Tensors and <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile()</span></code>", "Visualizing Gradients", "Intro", "Making Native Android Application that uses PyTorch prebuilt libraries", "(beta) Compiling the optimizer with torch.compile", "(beta) Running the compiled optimizer with an LR Scheduler", "Asynchronous Saving with Distributed Checkpoint (DCP)", "Getting Started with Distributed Checkpoint (DCP)", "Getting Started with <code class=\"docutils literal notranslate\"><span class=\"pre\">CommDebugMode</span></code>", "Getting Started with DeviceMesh", "&lt;no title&gt;", "Profiling PyTorch RPC-Based Workloads", "Explicit horizontal fusion with foreach_map and torch.compile", "Ease-of-use quantization for PyTorch with Intel\u00ae Neural Compressor", "Loading data in PyTorch", "(beta) Efficient mobile interpreter in Android and iOS", "Pytorch Mobile Performance Recipes", "Model Preparation for Android Recipe", "Model Preparation for iOS Recipe", "Profiling PyTorch workloads with The Instrumentation and Tracing Technology (ITT) API", "Summary of PyTorch Mobile Recipes", "Model Interpretability using Captum", "Automatic Mixed Precision", "SyntaxError", "Changing default device", "Defining a Neural Network in PyTorch", "PyTorch Recipes", "Tips for Loading an <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Module</span></code> from a Checkpoint", "PyTorch Profiler", "Reasoning about Shapes in PyTorch", "Save Load Across Devices", "Saving And Loading A General Checkpoint", "Saving And Loading Models For Inference", "Saving Multiple Models In One File", "Computation times", "Extension points in <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Module</span></code> for <code class=\"docutils literal notranslate\"><span class=\"pre\">load_state_dict</span></code> and tensor subclasses", "How to use TensorBoard with PyTorch", "Timer quick start", "Performance Tuning Guide", "Warmstarting model using parameters from a different model in PyTorch", "What is a state_dict in PyTorch", "Zeroing out gradients in PyTorch", "Reducing AoT cold start compilation time with regional compilation", "Reducing torch.compile cold start compilation time with regional compilation", "Script and Optimize for Mobile Recipe", "Computation times", "Compile Time Caching Configuration", "Compile Time Caching in <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "(beta) Utilizing Torch Function modes with torch.compile", "Using User-Defined Triton Kernels with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "Dynamic Compilation Control with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compiler.set_stance</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">torch.export</span></code> AOTInductor Tutorial for Python runtime (Beta)", "Demonstration of torch.export flow, common challenges and the solutions to address them", "(beta) Using TORCH_LOGS python API with torch.compile", "&lt;no title&gt;", "Optimizing CPU Performance on Intel\u00ae Xeon\u00ae with run_cpu Script", "Shard Optimizer States with ZeroRedundancyOptimizer", "Recipes", "Computation times", "Introduction to Context Parallel", "Profiling PyTorch RPC-Based Workloads", "Flight Recorder for Debugging Stuck Jobs", "(prototype) Accelerating <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.save</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.load</span></code> with GPUDirect Storage", "(prototype) GPU Quantization with TorchAO", "Inductor C++ Wrapper Tutorial", "How to use <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code> on Windows CPU/XPU", "&lt;no title&gt;", "(Prototype) Convert Mobilenetv2 to Core ML", "(Prototype) Use iOS GPU in PyTorch", "(Prototype) Introduce lite interpreter workflow in Android and iOS", "Efficiently writing \u201csparse\u201d semantics for Adagrad with MaskedTensor", "MaskedTensor Advanced Semantics", "MaskedTensor Overview", "MaskedTensor Sparsity", "Using Max-Autotune Compilation on CPU for Better Performance", "Getting Started with Nested Tensors", "(Beta) Convert MobileNetV2 to NNAPI", "PyTorch 2 Export Quantization for OpenVINO torch.compile Backend", "Autoloading Out-of-Tree Extension", "Computation times", "(prototype) Tracing-based Selective Build Mobile Interpreter in Android and iOS", "torch.vmap", "Unstable"], "terms": {"thi": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 41, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 64, 65, 67, 69, 70, 71, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 110, 111, 113, 114, 115, 117, 118, 119, 120, 121, 123, 124, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 202, 204, 205, 206, 212, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 262, 263, 264, 265, 266, 267, 268, 270, 273, 274, 275], "ha": [0, 1, 2, 3, 6, 7, 8, 10, 12, 13, 14, 15, 16, 18, 20, 25, 26, 27, 28, 29, 30, 31, 32, 36, 38, 43, 44, 45, 48, 51, 52, 64, 70, 77, 78, 85, 86, 87, 88, 89, 91, 92, 93, 95, 96, 97, 98, 100, 102, 103, 105, 106, 110, 113, 114, 117, 119, 120, 123, 124, 132, 133, 134, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 157, 159, 161, 163, 164, 165, 167, 168, 169, 171, 172, 173, 174, 177, 178, 179, 182, 183, 184, 185, 186, 188, 189, 190, 192, 193, 194, 198, 201, 204, 214, 216, 217, 221, 228, 230, 231, 235, 236, 237, 241, 242, 244, 245, 248, 249, 252, 253, 255, 256, 259, 262, 263, 264, 265, 266, 268, 270, 271, 273], "been": [0, 1, 6, 8, 10, 16, 17, 20, 26, 27, 28, 29, 30, 31, 43, 52, 71, 77, 78, 85, 86, 87, 88, 89, 91, 96, 102, 103, 106, 117, 119, 120, 123, 124, 132, 135, 140, 142, 143, 144, 147, 148, 149, 151, 154, 155, 159, 161, 163, 164, 165, 168, 171, 172, 173, 174, 178, 182, 183, 184, 185, 188, 189, 190, 193, 198, 204, 212, 216, 228, 229, 237, 244, 245, 248, 252, 253, 259, 262, 263, 266, 268, 271, 273], "deprec": [0, 5, 10, 11, 23, 24, 43, 108, 117, 119, 120, 122, 123, 132, 134, 135, 147, 152, 159, 163, 168, 183, 184, 189, 203, 204, 207, 223, 224, 225, 226, 237, 247, 253], "redirect": [0, 10, 26, 27, 28, 29, 30, 31, 43, 60, 61, 78, 79, 80, 81, 82, 83, 87, 117, 119, 120, 123, 147, 151, 159, 163, 168, 182, 185, 188, 191, 196, 204, 208, 209, 210, 211, 213, 223, 224, 225, 226, 237, 253, 259, 260, 261, 269, 273], "3": [0, 2, 3, 4, 6, 7, 8, 10, 16, 19, 20, 22, 25, 26, 27, 28, 29, 30, 31, 33, 36, 42, 43, 44, 54, 60, 61, 64, 65, 69, 70, 71, 77, 78, 79, 80, 81, 82, 83, 88, 89, 91, 93, 96, 98, 99, 100, 102, 103, 105, 106, 107, 110, 111, 113, 114, 115, 117, 118, 119, 120, 123, 132, 133, 134, 136, 141, 142, 143, 147, 148, 149, 151, 152, 154, 156, 157, 159, 161, 162, 163, 164, 166, 168, 171, 172, 173, 175, 176, 177, 178, 182, 185, 187, 188, 189, 190, 192, 193, 196, 198, 201, 202, 206, 208, 209, 210, 211, 212, 213, 214, 215, 220, 223, 224, 225, 226, 228, 231, 237, 242, 244, 245, 252, 254, 256, 258, 259, 260, 261, 268, 269, 273], "second": [0, 1, 3, 6, 8, 10, 11, 14, 15, 16, 18, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 50, 51, 53, 54, 60, 61, 70, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 95, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 108, 111, 117, 118, 119, 120, 121, 123, 124, 131, 132, 135, 137, 138, 139, 140, 141, 142, 143, 147, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 163, 164, 165, 166, 167, 168, 169, 171, 173, 174, 178, 179, 181, 182, 183, 184, 185, 187, 188, 189, 192, 193, 194, 196, 198, 201, 205, 208, 209, 210, 211, 213, 216, 217, 220, 222, 223, 224, 225, 226, 228, 230, 231, 235, 236, 237, 241, 242, 243, 244, 246, 248, 254, 256, 259, 260, 261, 263, 264, 265, 266, 268, 269, 273, 274], "go": [1, 8, 13, 14, 15, 16, 18, 19, 20, 22, 25, 32, 33, 34, 36, 37, 38, 39, 41, 42, 44, 46, 48, 50, 51, 53, 64, 65, 67, 69, 70, 71, 74, 75, 86, 88, 89, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 108, 110, 111, 113, 115, 118, 121, 124, 131, 133, 137, 138, 139, 140, 142, 145, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 161, 164, 165, 166, 167, 169, 171, 172, 173, 174, 176, 178, 179, 181, 183, 184, 186, 187, 189, 190, 192, 194, 198, 200, 205, 214, 215, 216, 217, 218, 220, 221, 222, 228, 229, 230, 231, 232, 233, 234, 235, 236, 241, 242, 243, 244, 246, 255, 256, 263, 264, 265, 266, 268, 274], "end": [1, 3, 6, 7, 8, 11, 14, 15, 16, 18, 20, 25, 32, 33, 34, 36, 37, 38, 39, 41, 42, 44, 45, 46, 48, 50, 51, 53, 54, 56, 62, 64, 65, 67, 69, 70, 71, 74, 75, 77, 84, 86, 88, 89, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 108, 110, 111, 113, 114, 115, 118, 121, 124, 125, 126, 131, 133, 135, 136, 137, 138, 139, 140, 142, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 161, 164, 165, 166, 167, 169, 171, 172, 173, 174, 175, 177, 178, 179, 181, 183, 184, 186, 187, 189, 190, 192, 193, 194, 198, 205, 214, 215, 216, 217, 218, 220, 221, 222, 228, 229, 230, 231, 232, 233, 234, 235, 236, 241, 242, 243, 244, 246, 249, 250, 252, 255, 256, 263, 264, 265, 266, 268, 271, 274], "download": [1, 6, 14, 15, 16, 18, 20, 25, 32, 33, 34, 36, 37, 38, 39, 41, 42, 44, 45, 46, 48, 50, 51, 52, 53, 54, 64, 65, 67, 69, 70, 71, 74, 75, 77, 84, 86, 88, 89, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 108, 110, 111, 113, 115, 118, 121, 124, 132, 133, 137, 138, 139, 140, 142, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 161, 164, 165, 166, 167, 171, 173, 174, 176, 178, 179, 181, 183, 184, 186, 187, 189, 190, 192, 193, 194, 198, 205, 214, 215, 216, 217, 218, 220, 221, 222, 228, 229, 230, 231, 232, 233, 234, 235, 236, 240, 241, 242, 243, 244, 246, 255, 256, 258, 263, 264, 265, 266, 268, 274], "full": [1, 3, 6, 11, 13, 14, 15, 16, 18, 20, 25, 32, 33, 34, 36, 38, 39, 41, 42, 44, 45, 46, 48, 50, 51, 52, 53, 54, 64, 65, 67, 69, 70, 71, 74, 75, 77, 88, 89, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 108, 110, 111, 113, 115, 118, 121, 124, 132, 133, 134, 137, 138, 139, 140, 141, 142, 144, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 161, 164, 165, 166, 167, 170, 171, 173, 174, 175, 178, 179, 181, 183, 186, 187, 189, 190, 192, 193, 194, 198, 205, 214, 215, 216, 217, 218, 220, 221, 222, 228, 229, 230, 231, 232, 233, 234, 235, 236, 241, 242, 243, 244, 246, 248, 250, 252, 254, 255, 256, 263, 264, 265, 266, 268, 270, 274], "exampl": [1, 2, 3, 4, 6, 7, 11, 12, 13, 14, 16, 17, 19, 20, 21, 22, 25, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 64, 65, 66, 67, 69, 70, 71, 72, 74, 75, 76, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 106, 107, 108, 110, 111, 112, 113, 116, 118, 121, 124, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 161, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 186, 187, 189, 190, 192, 194, 197, 198, 199, 200, 201, 202, 205, 212, 214, 215, 216, 217, 218, 220, 221, 222, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 244, 245, 246, 249, 250, 251, 252, 255, 256, 258, 263, 264, 265, 266, 268, 270, 272, 274], "author": [1, 3, 4, 6, 13, 14, 15, 16, 19, 20, 25, 36, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 77, 84, 85, 92, 98, 99, 100, 102, 103, 105, 106, 107, 110, 111, 113, 114, 115, 118, 121, 124, 132, 133, 134, 135, 136, 138, 139, 140, 141, 144, 145, 146, 148, 149, 153, 154, 156, 157, 160, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 186, 187, 189, 193, 194, 197, 198, 199, 200, 201, 202, 205, 215, 220, 221, 228, 231, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 252, 254, 256, 257, 258, 267, 270, 271, 274], "vincent": [1, 16, 149, 167, 173], "moen": [1, 16, 149, 167, 173], "separ": [1, 3, 4, 6, 8, 11, 18, 34, 51, 54, 88, 95, 96, 97, 98, 106, 113, 136, 150, 154, 156, 165, 167, 176, 179, 192, 216, 231, 240, 243, 246, 263], "rl": [1, 128, 131, 173, 174, 175, 180, 251], "algorithm": [1, 6, 12, 13, 14, 32, 37, 42, 51, 54, 58, 71, 84, 86, 89, 91, 97, 99, 100, 101, 102, 106, 114, 128, 131, 133, 136, 138, 142, 148, 149, 156, 167, 170, 173, 176, 181, 197, 198, 214, 218, 231, 252, 270], "variou": [1, 3, 11, 17, 41, 48, 50, 51, 52, 85, 86, 91, 95, 103, 106, 113, 115, 138, 148, 153, 155, 171, 173, 176, 177, 190, 193, 201, 205, 230, 234, 235, 239, 242, 245, 254, 256, 265, 268], "piec": [1, 11, 16, 91, 106, 172, 173, 177, 192], "assembl": [1, 11, 51, 91], "script": [1, 6, 7, 8, 12, 14, 15, 16, 18, 32, 33, 34, 37, 38, 39, 41, 42, 44, 45, 46, 48, 50, 51, 53, 54, 57, 62, 70, 74, 75, 77, 86, 88, 91, 93, 95, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 108, 110, 111, 118, 121, 124, 132, 133, 134, 137, 138, 139, 140, 141, 142, 144, 145, 146, 148, 150, 152, 153, 154, 155, 156, 157, 160, 161, 164, 165, 166, 167, 169, 171, 172, 173, 174, 176, 178, 179, 181, 187, 189, 192, 193, 194, 198, 205, 212, 215, 216, 217, 220, 221, 222, 228, 231, 235, 236, 241, 242, 243, 244, 246, 250, 254, 256, 263, 264, 265, 266, 268, 274], "collect": [1, 4, 6, 13, 16, 17, 22, 37, 44, 46, 51, 57, 62, 91, 96, 97, 100, 105, 131, 132, 133, 136, 146, 149, 153, 170, 174, 177, 189, 190, 195, 200, 201, 202, 212, 230, 231, 250, 252, 254], "final": [1, 6, 8, 12, 13, 14, 16, 17, 19, 20, 25, 42, 44, 48, 51, 54, 77, 86, 88, 91, 93, 96, 97, 98, 103, 106, 108, 111, 113, 115, 121, 131, 132, 133, 134, 136, 138, 139, 140, 142, 143, 148, 152, 153, 154, 155, 156, 160, 161, 164, 166, 169, 171, 173, 174, 175, 176, 177, 179, 183, 184, 189, 190, 206, 252, 254, 256, 263, 266, 270], "function": [1, 3, 4, 6, 8, 9, 11, 12, 15, 16, 18, 19, 20, 22, 25, 34, 38, 39, 41, 42, 44, 50, 51, 53, 55, 57, 62, 63, 66, 67, 69, 70, 71, 84, 85, 88, 89, 91, 95, 96, 102, 103, 105, 107, 110, 111, 113, 115, 121, 124, 125, 126, 127, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 148, 149, 150, 153, 154, 156, 160, 164, 165, 167, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 186, 187, 189, 190, 192, 193, 194, 195, 197, 198, 212, 215, 217, 218, 228, 230, 232, 238, 239, 242, 243, 244, 246, 249, 250, 251, 252, 257, 263, 264, 265, 266, 270, 274], "ar": [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 25, 32, 33, 34, 37, 41, 42, 44, 45, 48, 50, 51, 52, 53, 54, 55, 57, 58, 62, 69, 70, 71, 77, 84, 85, 86, 88, 89, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 110, 111, 113, 114, 115, 121, 124, 127, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 161, 164, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 186, 187, 189, 190, 192, 194, 197, 198, 199, 200, 201, 202, 205, 206, 212, 214, 215, 216, 218, 220, 221, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 245, 246, 248, 249, 250, 252, 254, 255, 256, 263, 264, 265, 266, 267, 268, 270, 271, 274, 275], "state": [1, 3, 7, 8, 11, 12, 13, 16, 20, 38, 39, 45, 51, 54, 55, 57, 86, 89, 91, 93, 97, 98, 99, 103, 106, 114, 115, 124, 132, 133, 139, 140, 142, 144, 146, 149, 150, 152, 156, 160, 164, 166, 171, 173, 174, 175, 176, 177, 179, 183, 189, 194, 199, 200, 205, 214, 215, 220, 230, 233, 250, 254, 255, 266, 271], "contain": [1, 2, 6, 11, 12, 14, 16, 17, 20, 33, 34, 38, 42, 48, 51, 52, 57, 69, 70, 71, 84, 88, 89, 93, 96, 97, 102, 103, 106, 107, 114, 115, 121, 128, 131, 132, 133, 137, 138, 139, 144, 146, 149, 165, 169, 171, 173, 174, 175, 177, 178, 179, 181, 183, 184, 186, 189, 190, 192, 193, 212, 215, 218, 220, 228, 230, 231, 233, 235, 244, 245, 248, 254, 255, 266], "trainabl": [1, 6, 70, 98, 100], "paramet": [1, 8, 12, 13, 14, 16, 17, 19, 20, 25, 32, 34, 35, 36, 39, 41, 42, 44, 45, 48, 50, 51, 53, 54, 69, 70, 77, 86, 88, 91, 97, 98, 100, 102, 103, 105, 106, 111, 113, 114, 121, 124, 126, 127, 131, 132, 133, 134, 136, 138, 139, 144, 146, 148, 149, 150, 152, 154, 155, 156, 161, 164, 165, 166, 177, 178, 181, 183, 184, 189, 190, 194, 197, 199, 200, 212, 215, 219, 220, 221, 222, 227, 228, 233, 234, 235, 242, 248, 249, 250, 251, 256, 263, 270], "tutori": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 25, 26, 27, 28, 29, 30, 31, 35, 38, 43, 44, 45, 46, 47, 53, 55, 57, 58, 62, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 93, 95, 97, 99, 101, 102, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 172, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 190, 191, 194, 195, 197, 198, 199, 200, 201, 202, 204, 205, 214, 215, 219, 220, 221, 223, 224, 225, 226, 228, 229, 230, 231, 235, 237, 238, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 262, 263, 264, 265, 266, 267, 268, 270, 271, 273, 274, 275], "guid": [1, 7, 11, 20, 62, 84, 111, 128, 129, 131, 132, 148, 152, 157, 172, 180, 183, 189, 190, 205, 212, 214, 216, 219, 227, 248, 250, 251, 256, 270], "you": [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 25, 31, 32, 33, 34, 36, 37, 39, 41, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 62, 69, 70, 77, 79, 80, 81, 82, 83, 84, 86, 88, 89, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 111, 113, 114, 115, 118, 121, 124, 125, 127, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 161, 162, 164, 165, 166, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 181, 183, 184, 186, 187, 189, 190, 192, 194, 195, 197, 199, 200, 201, 202, 212, 215, 216, 217, 218, 220, 221, 229, 231, 232, 233, 234, 235, 236, 239, 240, 242, 243, 245, 246, 249, 250, 252, 255, 256, 257, 258, 263, 264, 265, 266, 267, 268, 270, 271, 274], "through": [1, 6, 8, 11, 12, 15, 16, 17, 19, 25, 32, 33, 37, 38, 44, 48, 51, 54, 56, 57, 86, 88, 91, 93, 95, 97, 98, 100, 101, 102, 103, 106, 107, 108, 110, 111, 114, 118, 126, 127, 131, 133, 134, 135, 136, 137, 139, 141, 142, 143, 148, 150, 153, 154, 155, 156, 157, 160, 161, 164, 166, 167, 169, 170, 173, 174, 175, 176, 177, 178, 179, 183, 184, 186, 187, 189, 190, 194, 195, 199, 200, 215, 216, 221, 229, 234, 245, 248, 255, 256, 257, 258, 263, 265, 270, 274], "from": [1, 3, 4, 6, 7, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 25, 32, 34, 37, 38, 39, 40, 41, 42, 45, 48, 49, 50, 51, 53, 54, 55, 57, 64, 65, 66, 69, 70, 71, 72, 74, 75, 76, 77, 84, 85, 86, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 110, 111, 112, 113, 114, 116, 118, 121, 124, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 161, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 183, 184, 186, 187, 189, 193, 194, 195, 199, 200, 202, 205, 206, 212, 214, 215, 216, 218, 219, 221, 227, 228, 230, 231, 233, 235, 238, 240, 241, 242, 244, 245, 248, 249, 250, 251, 252, 254, 256, 258, 263, 264, 265, 266, 267, 268, 270, 271, 272, 275], "ground": [1, 16, 45, 77, 192], "up": [1, 6, 8, 11, 12, 16, 18, 20, 22, 32, 34, 37, 51, 54, 57, 62, 73, 76, 84, 88, 89, 91, 92, 93, 96, 98, 99, 100, 102, 103, 105, 106, 108, 113, 124, 125, 131, 132, 133, 134, 135, 136, 139, 140, 144, 145, 146, 148, 149, 150, 153, 154, 161, 164, 166, 167, 169, 172, 173, 174, 175, 176, 179, 183, 184, 187, 189, 190, 194, 199, 201, 202, 216, 221, 231, 234, 235, 244, 245, 246, 248, 249, 250, 251, 257, 268, 270, 275], "us": [1, 3, 4, 5, 7, 9, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 32, 33, 34, 37, 38, 39, 41, 42, 45, 46, 48, 50, 51, 53, 54, 56, 57, 58, 59, 62, 64, 65, 67, 69, 70, 71, 74, 75, 77, 84, 86, 88, 89, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107, 110, 114, 118, 121, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 143, 145, 148, 153, 154, 155, 156, 157, 161, 162, 164, 165, 167, 169, 171, 172, 173, 174, 179, 180, 181, 186, 187, 189, 190, 192, 193, 194, 197, 198, 199, 203, 205, 215, 216, 217, 218, 219, 222, 227, 228, 230, 233, 234, 235, 236, 238, 239, 240, 241, 243, 245, 247, 250, 251, 252, 254, 256, 257, 263, 264, 266, 268, 270, 271, 274, 275], "To": [1, 3, 6, 11, 12, 13, 14, 16, 18, 19, 20, 32, 33, 37, 38, 39, 42, 48, 51, 52, 53, 59, 67, 75, 84, 85, 86, 89, 95, 97, 98, 99, 100, 102, 103, 105, 106, 107, 110, 114, 115, 118, 124, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 149, 152, 154, 164, 165, 167, 170, 171, 172, 173, 174, 175, 176, 178, 179, 183, 184, 189, 190, 193, 194, 201, 202, 206, 212, 215, 216, 218, 220, 221, 228, 229, 230, 231, 232, 233, 234, 242, 244, 245, 246, 248, 252, 254, 256, 257, 258, 263, 265, 266, 267, 275], "aim": [1, 6, 98, 101, 135, 164, 174, 177, 206, 266], "we": [1, 2, 3, 4, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 25, 32, 33, 34, 36, 37, 38, 39, 41, 42, 44, 45, 46, 48, 50, 51, 52, 53, 54, 57, 64, 65, 67, 69, 70, 71, 77, 84, 85, 86, 89, 91, 93, 95, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 108, 111, 113, 114, 121, 124, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 161, 162, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 186, 187, 189, 190, 192, 193, 194, 197, 198, 199, 200, 201, 202, 205, 212, 214, 216, 218, 220, 221, 222, 228, 229, 230, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 252, 254, 255, 256, 257, 258, 263, 264, 265, 266, 267, 268, 270, 271, 274, 275], "focus": [1, 89, 98, 101, 126, 128, 170, 179, 190], "which": [1, 3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 32, 33, 36, 37, 38, 39, 41, 42, 44, 45, 48, 50, 51, 52, 53, 54, 57, 58, 62, 64, 65, 69, 70, 71, 77, 84, 85, 86, 88, 89, 91, 92, 93, 96, 97, 98, 99, 100, 102, 103, 105, 106, 108, 111, 113, 114, 115, 121, 124, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 150, 152, 153, 154, 155, 157, 161, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 187, 189, 190, 192, 193, 194, 198, 199, 200, 201, 202, 205, 212, 214, 215, 216, 217, 218, 220, 221, 228, 230, 231, 232, 233, 234, 235, 236, 239, 240, 242, 243, 244, 245, 246, 248, 249, 252, 255, 256, 263, 264, 265, 266, 267, 268, 270, 271], "i": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 32, 33, 34, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 60, 61, 62, 64, 65, 67, 70, 74, 75, 77, 79, 80, 81, 82, 83, 84, 86, 88, 89, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 105, 107, 108, 110, 111, 113, 114, 116, 118, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 146, 148, 149, 152, 153, 154, 155, 156, 157, 161, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 186, 187, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 203, 205, 206, 207, 208, 209, 210, 211, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 239, 240, 242, 243, 244, 246, 247, 248, 250, 251, 252, 254, 255, 256, 257, 258, 260, 261, 263, 264, 266, 267, 268, 269, 270, 271], "rel": [1, 6, 89, 97, 121, 137, 155, 160, 161, 177, 179, 193, 257], "straightforward": [1, 4, 6, 19, 20, 51, 88, 91, 96, 98, 99, 154, 167, 189, 193], "deep": [1, 4, 6, 14, 15, 36, 48, 51, 54, 71, 74, 75, 91, 92, 93, 96, 98, 102, 104, 105, 114, 125, 127, 128, 131, 139, 140, 141, 142, 146, 154, 155, 156, 160, 165, 171, 174, 179, 190, 194, 195, 197, 198, 206, 212, 218, 230, 231, 236, 248, 251], "determinist": [1, 13, 16, 134, 149, 174, 230, 231], "gradient": [1, 3, 6, 12, 13, 15, 16, 18, 19, 37, 44, 45, 48, 51, 54, 58, 62, 64, 65, 67, 69, 70, 74, 75, 88, 91, 93, 96, 97, 98, 99, 100, 102, 103, 106, 114, 121, 124, 126, 131, 132, 133, 136, 137, 139, 141, 143, 144, 146, 148, 152, 155, 156, 164, 171, 173, 175, 176, 177, 180, 184, 190, 200, 214, 219, 227, 249, 250, 251, 263, 274], "simpl": [1, 3, 4, 6, 8, 11, 14, 17, 19, 20, 25, 48, 51, 53, 56, 58, 69, 77, 86, 89, 91, 93, 96, 97, 98, 106, 107, 110, 114, 115, 124, 125, 127, 131, 132, 137, 138, 141, 143, 148, 150, 154, 155, 160, 161, 166, 167, 169, 171, 173, 175, 176, 177, 178, 180, 181, 183, 187, 189, 190, 197, 198, 200, 202, 205, 216, 220, 229, 230, 231, 233, 242, 245, 246, 249, 251, 252, 267, 270], "continu": [1, 51, 55, 86, 91, 96, 98, 103, 106, 134, 135, 136, 140, 144, 148, 160, 173, 177, 179, 183, 187, 201, 216, 218, 221, 231, 232, 233, 234, 236, 254, 255, 263, 265, 266], "control": [1, 11, 12, 16, 32, 34, 37, 44, 68, 72, 85, 88, 98, 108, 109, 110, 111, 118, 125, 131, 133, 134, 135, 137, 138, 148, 152, 160, 165, 173, 174, 175, 187, 201, 212, 216, 230, 235, 236, 238, 250, 251, 271], "It": [1, 3, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 25, 26, 27, 28, 29, 30, 32, 42, 44, 45, 46, 48, 51, 53, 54, 77, 78, 84, 86, 88, 89, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 110, 115, 121, 124, 130, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 161, 164, 165, 166, 167, 171, 174, 175, 177, 179, 181, 182, 183, 185, 188, 189, 190, 192, 193, 199, 200, 202, 216, 217, 229, 231, 234, 240, 242, 244, 245, 248, 252, 254, 268, 274], "consist": [1, 3, 6, 8, 16, 17, 25, 32, 33, 34, 37, 44, 98, 100, 106, 134, 136, 144, 153, 156, 160, 161, 164, 173, 174, 178, 179, 183, 186, 190, 193, 198, 216, 221, 231, 252, 254, 265, 266], "learn": [1, 3, 4, 6, 15, 16, 18, 20, 21, 32, 33, 34, 37, 38, 39, 41, 42, 44, 46, 48, 51, 53, 54, 55, 56, 57, 58, 62, 71, 74, 75, 77, 84, 86, 88, 89, 91, 92, 93, 96, 97, 98, 102, 104, 105, 106, 107, 108, 110, 111, 115, 116, 118, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 138, 139, 140, 141, 144, 145, 146, 148, 149, 154, 155, 157, 160, 162, 164, 165, 166, 169, 171, 172, 176, 179, 180, 181, 184, 186, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 205, 206, 212, 214, 220, 228, 231, 235, 236, 239, 240, 243, 245, 249, 250, 251, 252, 255, 256, 263, 264, 265, 266, 267, 268, 271, 275], "parametr": [1, 2, 20, 126, 131, 173, 180, 251], "an": [1, 2, 4, 6, 7, 8, 9, 11, 13, 14, 15, 17, 18, 19, 20, 22, 25, 32, 33, 34, 36, 37, 38, 39, 41, 44, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 64, 67, 69, 71, 77, 84, 85, 86, 88, 89, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 108, 110, 113, 114, 121, 124, 125, 126, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 145, 146, 148, 150, 152, 153, 154, 155, 156, 157, 160, 161, 162, 164, 165, 166, 167, 170, 171, 172, 174, 175, 176, 177, 178, 179, 181, 183, 184, 186, 187, 189, 192, 193, 194, 197, 199, 200, 202, 205, 206, 212, 214, 215, 216, 217, 218, 219, 221, 222, 227, 228, 230, 231, 233, 235, 236, 238, 239, 242, 243, 244, 245, 246, 250, 251, 252, 255, 256, 257, 258, 263, 265, 266, 267, 268, 270, 271, 274, 275], "action": [1, 93, 97, 102, 106, 132, 133, 156, 171, 173, 174, 175, 176, 177, 183, 221, 230, 245, 250, 252], "pair": [1, 6, 48, 51, 54, 89, 139, 140, 142, 166, 173, 174, 179, 183, 192, 198, 206, 212, 230], "output": [1, 2, 3, 4, 6, 7, 12, 13, 14, 16, 18, 19, 20, 32, 33, 37, 41, 44, 45, 46, 48, 50, 51, 54, 64, 65, 67, 69, 70, 71, 74, 75, 77, 84, 85, 86, 88, 89, 91, 93, 96, 97, 98, 100, 102, 103, 105, 106, 108, 111, 113, 114, 115, 118, 121, 124, 132, 133, 134, 136, 137, 139, 140, 141, 146, 148, 149, 150, 152, 154, 155, 157, 160, 161, 166, 167, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 181, 184, 187, 189, 192, 193, 194, 197, 201, 205, 206, 214, 216, 218, 221, 222, 229, 231, 246, 249, 252, 254, 256, 258, 267, 268, 270], "maxim": [1, 16, 54, 77, 84, 98, 100, 138, 156, 174, 187, 231, 248], "given": [1, 3, 6, 8, 11, 12, 14, 16, 18, 20, 32, 34, 37, 41, 42, 44, 50, 51, 54, 57, 77, 84, 89, 93, 97, 98, 101, 102, 105, 106, 115, 133, 139, 140, 148, 150, 152, 155, 156, 157, 166, 171, 173, 174, 176, 177, 179, 187, 189, 190, 192, 206, 216, 222, 231, 241, 245, 249, 255, 266], "certain": [1, 6, 12, 13, 17, 51, 57, 89, 102, 127, 133, 136, 137, 142, 152, 155, 157, 173, 178, 187, 189, 190, 214, 218, 241, 242, 245, 248, 254, 263, 266, 268], "what": [1, 2, 3, 4, 8, 11, 16, 18, 22, 32, 33, 34, 44, 46, 47, 55, 56, 57, 62, 77, 86, 89, 91, 93, 96, 97, 99, 100, 102, 103, 105, 107, 111, 116, 118, 130, 131, 133, 135, 136, 137, 138, 140, 141, 144, 145, 148, 149, 156, 157, 164, 169, 171, 173, 174, 175, 178, 184, 186, 189, 190, 192, 193, 194, 197, 199, 215, 216, 217, 218, 219, 220, 227, 230, 231, 245, 250, 251, 252, 255, 265, 271], "how": [1, 2, 3, 4, 6, 7, 8, 11, 12, 14, 16, 18, 19, 20, 22, 32, 34, 37, 38, 39, 44, 45, 46, 48, 51, 52, 53, 54, 57, 58, 59, 77, 84, 86, 88, 89, 91, 93, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 111, 113, 121, 124, 125, 126, 127, 128, 129, 130, 131, 135, 137, 138, 139, 140, 141, 143, 144, 146, 148, 149, 150, 152, 153, 154, 156, 157, 160, 161, 162, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 186, 187, 189, 190, 192, 193, 194, 198, 199, 201, 205, 214, 215, 216, 219, 220, 221, 227, 228, 230, 231, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 248, 250, 251, 252, 254, 255, 256, 263, 264, 265, 266, 267, 268, 270, 275], "write": [1, 3, 4, 7, 8, 9, 11, 12, 18, 21, 45, 51, 62, 65, 95, 99, 100, 101, 102, 106, 114, 116, 121, 128, 130, 131, 135, 137, 138, 143, 144, 146, 149, 152, 154, 160, 161, 165, 167, 170, 173, 176, 177, 179, 183, 187, 189, 193, 200, 215, 216, 217, 218, 222, 231, 245, 251, 254, 255, 266, 270, 272, 274], "custom": [1, 6, 11, 13, 20, 21, 51, 54, 65, 68, 72, 89, 106, 113, 116, 126, 128, 130, 131, 134, 138, 149, 156, 160, 167, 173, 176, 180, 186, 187, 190, 193, 205, 212, 215, 219, 228, 231, 241, 242, 251, 270], "its": [1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 32, 33, 37, 42, 44, 48, 51, 53, 54, 55, 57, 70, 84, 88, 89, 91, 93, 96, 98, 100, 102, 103, 105, 106, 108, 113, 114, 115, 124, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 146, 148, 149, 150, 152, 153, 154, 156, 157, 160, 164, 165, 169, 171, 173, 174, 175, 176, 177, 179, 183, 184, 187, 189, 190, 194, 200, 202, 206, 212, 215, 216, 218, 220, 221, 228, 231, 232, 233, 234, 249, 256, 265, 266, 268, 271], "includ": [1, 2, 3, 4, 6, 7, 8, 11, 16, 17, 18, 25, 37, 38, 41, 50, 51, 55, 57, 62, 71, 77, 84, 86, 88, 89, 91, 93, 96, 97, 98, 99, 106, 108, 110, 111, 113, 126, 136, 138, 139, 140, 141, 143, 144, 146, 148, 149, 154, 156, 160, 167, 169, 170, 171, 173, 176, 179, 183, 184, 186, 187, 189, 190, 192, 193, 200, 201, 206, 212, 214, 215, 216, 218, 221, 228, 231, 240, 242, 243, 248, 254, 256, 263, 265, 267, 270, 271], "design": [1, 6, 16, 20, 25, 54, 58, 77, 89, 105, 106, 140, 146, 149, 160, 167, 173, 174, 175, 177, 178, 183, 184, 189, 216, 218, 231, 242, 245, 248, 252, 263, 264, 265, 270, 274], "effici": [1, 4, 12, 14, 17, 20, 32, 51, 53, 77, 84, 96, 98, 102, 105, 125, 126, 132, 133, 136, 138, 146, 148, 149, 155, 160, 161, 171, 173, 177, 178, 183, 190, 199, 216, 220, 242, 248, 251, 254, 257, 266, 267, 268, 272], "store": [1, 6, 8, 19, 20, 32, 33, 34, 38, 39, 41, 44, 50, 53, 55, 70, 86, 88, 95, 96, 99, 100, 102, 105, 106, 108, 114, 124, 135, 137, 138, 140, 148, 149, 152, 154, 156, 157, 165, 167, 169, 170, 171, 173, 174, 175, 176, 177, 179, 189, 190, 221, 230, 231, 239, 240, 252, 256, 266, 267], "them": [1, 2, 3, 6, 11, 12, 13, 14, 16, 20, 22, 32, 34, 37, 44, 45, 48, 50, 51, 53, 55, 57, 62, 69, 70, 86, 88, 89, 91, 93, 95, 96, 97, 98, 101, 102, 103, 105, 106, 107, 108, 110, 111, 114, 115, 124, 125, 126, 131, 133, 134, 136, 138, 139, 140, 142, 143, 148, 149, 150, 153, 154, 155, 160, 161, 164, 165, 166, 167, 171, 172, 174, 175, 176, 177, 186, 187, 189, 192, 193, 194, 198, 215, 216, 220, 228, 230, 231, 239, 240, 248, 250, 252, 256, 265, 267, 268, 271], "trajectori": [1, 16, 149, 173, 174], "transit": [1, 16, 99, 149, 167, 174], "assum": [1, 2, 6, 7, 11, 12, 16, 17, 36, 44, 45, 53, 56, 77, 88, 91, 92, 98, 99, 101, 103, 106, 111, 124, 136, 137, 139, 140, 148, 149, 165, 171, 173, 176, 178, 179, 192, 200, 220, 221, 228, 230, 245, 265, 266, 268], "have": [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 25, 32, 33, 34, 37, 41, 42, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 57, 59, 70, 71, 77, 84, 85, 86, 88, 89, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 110, 111, 113, 114, 115, 118, 121, 124, 127, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 164, 165, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 186, 187, 189, 190, 192, 193, 194, 198, 199, 200, 201, 202, 205, 212, 215, 216, 217, 218, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 242, 243, 244, 245, 248, 249, 252, 254, 255, 256, 257, 263, 264, 265, 266, 267, 268, 270, 271, 274], "complet": [1, 6, 17, 36, 86, 88, 91, 99, 100, 102, 111, 131, 133, 135, 136, 138, 139, 141, 143, 148, 167, 169, 171, 172, 173, 176, 187, 192, 214, 231, 244, 245, 254, 256, 265, 266, 270], "ppo": [1, 128, 131, 180, 251], "give": [1, 2, 6, 13, 16, 20, 37, 46, 48, 51, 52, 54, 77, 88, 89, 91, 93, 98, 100, 102, 103, 105, 106, 115, 140, 144, 150, 153, 154, 155, 156, 166, 172, 176, 179, 183, 187, 189, 190, 193, 216, 264, 268], "compon": [1, 6, 11, 12, 16, 54, 93, 98, 102, 115, 126, 130, 131, 138, 139, 141, 149, 156, 160, 173, 177, 181, 183, 186, 187, 189, 193, 240, 268], "depend": [1, 6, 8, 11, 13, 48, 52, 54, 77, 84, 88, 89, 95, 96, 98, 99, 103, 106, 136, 138, 139, 142, 143, 148, 149, 152, 153, 155, 156, 167, 170, 172, 173, 176, 183, 187, 193, 197, 216, 217, 222, 228, 231, 235, 236, 248, 256, 265, 275], "tensordict": [1, 16, 149, 156, 167, 173], "nn": [1, 2, 6, 7, 8, 13, 14, 15, 16, 17, 19, 20, 22, 37, 38, 39, 44, 45, 46, 48, 51, 57, 68, 71, 72, 86, 88, 91, 97, 100, 103, 105, 110, 113, 116, 121, 124, 126, 131, 132, 133, 134, 136, 137, 139, 140, 141, 142, 146, 149, 152, 161, 165, 166, 169, 173, 174, 175, 176, 177, 178, 180, 184, 187, 189, 190, 194, 197, 199, 200, 202, 212, 215, 218, 219, 221, 222, 227, 231, 232, 233, 235, 236, 249, 250, 251, 252, 264, 267, 268], "tensordictmodul": [1, 149, 173], "although": [1, 14, 19, 44, 51, 99, 100, 105, 106, 108, 111, 124, 135, 137, 156, 165, 167, 176, 187, 189], "should": [1, 2, 3, 6, 7, 8, 11, 12, 13, 16, 17, 18, 19, 22, 32, 44, 45, 51, 52, 53, 54, 55, 57, 71, 77, 84, 86, 88, 89, 91, 93, 95, 96, 97, 98, 99, 100, 101, 103, 105, 106, 108, 114, 121, 130, 131, 133, 134, 135, 137, 138, 141, 143, 146, 148, 149, 150, 153, 156, 157, 161, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 184, 186, 187, 189, 190, 192, 194, 199, 200, 212, 215, 216, 221, 229, 230, 231, 234, 241, 245, 248, 250, 254, 255, 256, 258, 263, 264, 265, 270, 271, 274], "suffici": [1, 6, 51, 54, 98, 99, 121, 144, 146, 160, 164, 167, 189], "transpar": [1, 14, 89, 100, 149, 160, 176, 201, 239], "understood": [1, 3, 18, 242], "without": [1, 6, 11, 12, 16, 18, 20, 32, 51, 55, 57, 93, 96, 98, 99, 110, 131, 132, 134, 136, 137, 140, 141, 148, 152, 153, 155, 156, 157, 160, 164, 166, 167, 170, 171, 172, 173, 174, 175, 178, 183, 189, 194, 198, 199, 202, 215, 220, 222, 228, 231, 240, 241, 243, 249, 255, 263, 265, 266, 268, 271], "understand": [1, 2, 3, 4, 6, 9, 17, 44, 45, 54, 59, 84, 88, 90, 91, 92, 93, 95, 96, 97, 99, 102, 106, 107, 111, 116, 121, 126, 131, 134, 137, 138, 139, 140, 143, 148, 152, 154, 167, 179, 189, 190, 194, 195, 199, 202, 212, 214, 229, 233, 236, 239, 240, 242, 244, 245, 248, 251, 255, 264, 267], "class": [1, 2, 4, 6, 11, 12, 15, 17, 25, 32, 34, 36, 38, 39, 45, 48, 51, 54, 55, 67, 69, 77, 85, 89, 91, 93, 95, 96, 97, 100, 101, 103, 105, 106, 111, 114, 115, 121, 131, 132, 133, 134, 138, 139, 141, 143, 144, 146, 148, 149, 152, 153, 154, 156, 157, 160, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 184, 189, 192, 194, 199, 200, 202, 212, 214, 216, 218, 230, 234, 235, 236, 245, 254, 263, 264, 265, 267], "do": [1, 2, 3, 6, 8, 9, 12, 13, 14, 15, 16, 17, 18, 20, 22, 32, 33, 39, 48, 51, 52, 53, 54, 56, 64, 65, 71, 86, 91, 93, 95, 96, 97, 98, 99, 100, 102, 103, 105, 106, 108, 114, 115, 118, 124, 126, 131, 132, 136, 137, 138, 139, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 161, 164, 165, 167, 170, 171, 172, 173, 174, 177, 179, 184, 189, 190, 192, 193, 194, 200, 212, 215, 216, 217, 220, 228, 229, 230, 231, 232, 234, 242, 243, 244, 250, 252, 254, 256, 264, 265, 266, 271, 274], "sota": 1, "implement": [1, 2, 6, 7, 12, 13, 14, 15, 16, 17, 20, 25, 33, 34, 36, 44, 46, 48, 51, 53, 57, 59, 62, 64, 65, 67, 69, 70, 71, 74, 75, 88, 91, 97, 105, 106, 107, 114, 126, 127, 128, 131, 134, 136, 137, 139, 141, 143, 148, 149, 150, 152, 154, 155, 156, 157, 160, 161, 166, 167, 169, 171, 173, 174, 177, 180, 183, 186, 189, 190, 192, 193, 199, 216, 220, 228, 231, 239, 241, 242, 245, 248, 251, 252, 254, 257, 264, 266, 267, 268, 270, 271], "rather": [1, 15, 51, 54, 71, 77, 93, 96, 98, 105, 106, 115, 131, 140, 142, 154, 165, 166, 167, 173, 189, 193, 216, 231, 239, 243, 254, 256, 263], "provid": [1, 3, 6, 7, 11, 12, 13, 16, 17, 18, 19, 20, 22, 25, 33, 34, 45, 51, 53, 54, 57, 58, 77, 84, 85, 86, 88, 89, 91, 96, 97, 98, 99, 100, 106, 107, 110, 111, 114, 115, 127, 130, 131, 133, 135, 136, 137, 138, 144, 145, 146, 148, 149, 153, 154, 155, 156, 160, 167, 171, 172, 173, 175, 176, 178, 183, 186, 187, 189, 190, 192, 193, 200, 201, 205, 206, 212, 214, 215, 216, 218, 220, 221, 229, 230, 231, 235, 236, 240, 243, 244, 245, 248, 254, 265, 266, 274, 275], "high": [1, 2, 6, 17, 45, 51, 54, 55, 57, 59, 62, 84, 93, 100, 105, 108, 113, 126, 131, 132, 133, 136, 138, 141, 142, 148, 180, 183, 184, 189, 190, 206, 230, 231, 242, 248, 249, 251, 257, 266, 270, 275], "level": [1, 2, 3, 6, 18, 20, 45, 51, 55, 57, 59, 62, 70, 93, 101, 108, 114, 131, 132, 133, 136, 141, 144, 146, 148, 152, 154, 157, 162, 178, 179, 180, 183, 187, 189, 190, 193, 201, 202, 239, 249, 251, 270, 275], "illustr": [1, 33, 45, 48, 58, 121, 136, 137, 138, 150, 167, 174, 184, 192, 194, 202, 212, 214, 221, 228, 265, 266], "": [1, 2, 3, 4, 6, 7, 8, 9, 11, 13, 14, 16, 19, 20, 22, 25, 32, 33, 34, 36, 37, 38, 41, 42, 44, 45, 46, 48, 50, 51, 53, 54, 55, 57, 59, 70, 77, 86, 88, 89, 91, 93, 95, 96, 97, 98, 99, 100, 103, 105, 106, 107, 108, 110, 111, 113, 114, 115, 121, 124, 127, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 146, 148, 149, 150, 152, 153, 154, 155, 157, 160, 161, 164, 165, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 186, 187, 189, 190, 192, 193, 194, 195, 197, 199, 200, 201, 202, 214, 215, 216, 218, 220, 221, 228, 229, 230, 231, 233, 234, 235, 236, 239, 240, 242, 248, 249, 250, 252, 254, 256, 257, 258, 263, 265, 266, 268, 271, 274, 275], "librari": [1, 3, 4, 6, 7, 8, 9, 11, 14, 16, 18, 22, 34, 38, 45, 52, 53, 59, 62, 86, 89, 106, 110, 111, 124, 128, 131, 135, 138, 142, 143, 153, 160, 167, 169, 170, 172, 173, 177, 183, 190, 193, 194, 202, 212, 235, 236, 242, 244, 254, 258, 267, 273], "featur": [1, 6, 7, 8, 12, 13, 14, 16, 34, 38, 42, 51, 52, 53, 54, 84, 85, 88, 91, 93, 96, 98, 99, 105, 106, 110, 114, 131, 132, 137, 141, 149, 154, 155, 156, 164, 167, 170, 172, 173, 177, 178, 184, 187, 189, 192, 193, 205, 212, 214, 218, 220, 228, 230, 231, 234, 236, 239, 242, 245, 250, 257, 266, 267, 268, 270, 271, 274, 275], "context": [1, 2, 11, 16, 19, 20, 44, 51, 77, 88, 93, 105, 106, 113, 124, 127, 136, 141, 152, 165, 167, 173, 176, 177, 178, 179, 183, 187, 193, 201, 215, 217, 220, 221, 222, 231, 243, 245, 248, 255, 257, 267, 275], "bash": [1, 22, 156, 160, 174, 212], "pip3": [1, 22, 52, 133, 149, 167, 173, 174, 183, 190, 256], "instal": [1, 3, 4, 6, 11, 20, 25, 36, 52, 53, 55, 57, 59, 86, 92, 95, 106, 110, 114, 124, 132, 133, 136, 139, 140, 144, 145, 148, 149, 152, 153, 156, 160, 162, 167, 170, 173, 174, 175, 179, 183, 187, 192, 194, 212, 214, 216, 218, 221, 230, 232, 233, 234, 235, 236, 242, 248, 254, 255, 256, 271], "mujoco": [1, 149, 173], "glfw": 1, "cuda": [1, 4, 6, 11, 12, 13, 14, 17, 20, 22, 25, 33, 38, 41, 44, 45, 46, 55, 56, 57, 64, 65, 75, 77, 85, 86, 96, 100, 106, 113, 114, 115, 121, 125, 130, 131, 132, 133, 134, 135, 136, 139, 142, 144, 145, 146, 148, 157, 160, 164, 165, 166, 169, 170, 174, 175, 176, 177, 178, 183, 187, 190, 192, 197, 198, 199, 200, 202, 205, 206, 215, 216, 217, 221, 240, 243, 244, 245, 249, 250, 252, 254, 255, 256, 257, 267], "avail": [1, 2, 3, 4, 6, 8, 12, 14, 17, 20, 22, 32, 33, 34, 37, 38, 39, 41, 44, 45, 50, 51, 52, 53, 54, 55, 64, 77, 86, 89, 91, 93, 96, 97, 98, 102, 106, 108, 114, 121, 133, 137, 139, 148, 149, 152, 156, 157, 160, 167, 171, 172, 173, 174, 177, 178, 179, 183, 186, 189, 190, 192, 200, 206, 212, 214, 216, 217, 218, 231, 232, 233, 234, 235, 236, 244, 246, 254, 270, 274, 275], "seri": [1, 6, 17, 54, 55, 56, 57, 58, 84, 90, 93, 96, 97, 127, 131, 135, 139, 140, 144, 145, 153, 162, 171, 173, 179, 193, 195, 248, 265], "easili": [1, 14, 25, 33, 46, 62, 77, 89, 96, 97, 98, 106, 113, 114, 115, 133, 136, 138, 139, 146, 148, 153, 154, 160, 161, 171, 173, 174, 177, 187, 189, 192, 199, 200, 202, 216, 233, 252, 256, 270, 275], "reusabl": [1, 6], "swappabl": 1, "signatur": [1, 11, 12, 16, 17, 111, 148, 165, 176, 186, 189], "main": [1, 4, 6, 13, 19, 37, 54, 55, 57, 86, 98, 111, 114, 132, 133, 139, 144, 148, 152, 154, 160, 167, 172, 174, 175, 176, 177, 181, 189, 190, 192, 193, 199, 212, 231, 249, 256, 257, 274, 275], "characterist": [1, 16, 44, 141, 153, 155, 156, 172, 178, 189, 245], "thei": [1, 6, 11, 12, 14, 16, 18, 19, 33, 34, 41, 45, 50, 51, 54, 57, 77, 84, 88, 91, 93, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 110, 111, 113, 114, 115, 124, 133, 137, 138, 139, 140, 143, 146, 148, 149, 154, 155, 157, 164, 165, 173, 174, 175, 177, 179, 189, 190, 193, 200, 202, 216, 220, 221, 229, 230, 233, 234, 258, 263, 264, 265, 266, 268], "copi": [1, 6, 14, 22, 36, 41, 45, 46, 52, 57, 77, 84, 88, 92, 97, 98, 113, 115, 118, 131, 132, 137, 142, 146, 148, 149, 152, 153, 156, 165, 176, 183, 186, 189, 199, 205, 220, 231, 252, 254, 270], "loss_modul": 1, "whatev": [1, 8, 11, 91, 96, 97, 100, 102, 106, 115, 212], "need": [1, 3, 4, 6, 8, 12, 13, 14, 16, 17, 18, 19, 20, 22, 25, 32, 33, 34, 37, 38, 39, 41, 42, 44, 45, 46, 48, 51, 52, 53, 55, 56, 57, 62, 64, 65, 69, 84, 85, 86, 89, 91, 95, 96, 97, 98, 100, 102, 103, 105, 106, 108, 114, 115, 121, 124, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 186, 187, 189, 190, 192, 194, 199, 200, 202, 212, 215, 216, 218, 221, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 243, 244, 245, 254, 255, 256, 263, 267, 268, 271], "follow": [1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 32, 33, 34, 36, 37, 41, 45, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 77, 84, 85, 86, 88, 89, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 105, 106, 108, 110, 111, 115, 118, 121, 124, 131, 132, 133, 134, 136, 137, 138, 141, 144, 145, 146, 148, 149, 153, 154, 155, 156, 157, 162, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 178, 183, 184, 186, 187, 189, 190, 192, 193, 194, 200, 202, 212, 214, 215, 218, 220, 221, 222, 228, 229, 235, 236, 239, 240, 242, 244, 245, 248, 252, 254, 255, 257, 264, 266, 267, 268, 270, 271, 274], "convent": [1, 16, 54, 106, 115, 124, 149, 193, 216], "torch": [1, 2, 4, 5, 6, 8, 9, 11, 12, 13, 14, 16, 17, 18, 20, 22, 23, 24, 33, 34, 35, 37, 38, 39, 41, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 59, 62, 64, 65, 69, 75, 77, 86, 88, 89, 91, 95, 96, 97, 98, 100, 103, 105, 108, 110, 111, 113, 114, 116, 118, 121, 124, 125, 126, 130, 131, 132, 133, 134, 135, 136, 140, 143, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 161, 164, 165, 166, 167, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 183, 184, 190, 192, 194, 198, 199, 200, 202, 203, 206, 212, 217, 218, 219, 221, 222, 229, 230, 231, 232, 233, 234, 235, 238, 239, 247, 249, 250, 251, 252, 254, 256, 257, 263, 264, 266, 267, 268, 271, 272, 275], "receiv": [1, 6, 16, 19, 57, 86, 96, 102, 114, 148, 167, 169, 173, 175, 176, 177, 187, 190, 215, 218, 231, 254], "input": [1, 2, 3, 6, 7, 11, 12, 14, 15, 16, 18, 19, 32, 33, 36, 37, 41, 44, 45, 46, 48, 50, 51, 58, 62, 64, 65, 67, 69, 70, 71, 74, 75, 85, 86, 88, 89, 91, 93, 95, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 108, 111, 113, 114, 115, 124, 127, 132, 133, 136, 138, 139, 140, 141, 142, 144, 146, 148, 149, 150, 152, 154, 155, 156, 157, 161, 164, 166, 169, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 186, 187, 189, 192, 197, 200, 206, 214, 215, 218, 221, 222, 234, 235, 239, 243, 245, 248, 252, 256, 266, 268, 270, 274], "all": [1, 2, 4, 6, 8, 11, 12, 13, 14, 16, 17, 19, 20, 22, 32, 33, 34, 37, 38, 41, 42, 44, 45, 46, 48, 51, 52, 53, 54, 55, 57, 58, 62, 77, 84, 88, 89, 91, 93, 96, 97, 99, 100, 101, 102, 103, 105, 106, 107, 108, 110, 111, 113, 115, 118, 121, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 157, 160, 161, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 186, 187, 189, 190, 192, 194, 201, 205, 212, 214, 216, 218, 220, 228, 229, 230, 232, 233, 234, 235, 236, 239, 240, 242, 243, 245, 246, 248, 249, 250, 251, 252, 254, 255, 256, 263, 264, 266, 268, 270, 271, 274, 275], "necessari": [1, 3, 6, 11, 12, 14, 17, 22, 25, 39, 45, 54, 55, 57, 86, 96, 97, 99, 106, 115, 124, 132, 133, 136, 142, 146, 156, 169, 175, 176, 177, 183, 189, 194, 206, 215, 231, 235, 236, 243, 252, 265, 268, 270, 271], "inform": [1, 2, 3, 8, 9, 11, 12, 16, 18, 20, 32, 46, 51, 55, 77, 84, 86, 88, 93, 95, 96, 98, 102, 103, 105, 115, 132, 137, 138, 139, 140, 146, 148, 149, 152, 153, 156, 172, 173, 174, 176, 178, 179, 183, 184, 187, 189, 190, 192, 194, 200, 201, 202, 212, 215, 216, 230, 231, 233, 234, 243, 246, 248, 254, 255, 256, 266, 268, 270, 274], "return": [1, 2, 3, 4, 6, 7, 11, 12, 13, 14, 16, 17, 18, 19, 22, 33, 34, 38, 41, 46, 48, 51, 53, 54, 69, 77, 84, 88, 89, 96, 97, 98, 100, 102, 103, 106, 108, 111, 113, 114, 115, 124, 132, 133, 134, 136, 140, 141, 143, 146, 148, 149, 152, 154, 156, 157, 160, 161, 165, 166, 169, 170, 172, 173, 174, 175, 176, 177, 178, 183, 184, 187, 189, 190, 192, 197, 199, 200, 202, 206, 212, 214, 216, 218, 221, 230, 240, 243, 245, 256, 257, 258, 263, 265, 267, 270, 271, 274], "replay_buff": 1, "sampl": [1, 3, 4, 6, 11, 33, 34, 37, 38, 41, 45, 48, 50, 51, 53, 54, 57, 62, 86, 91, 93, 95, 96, 98, 115, 121, 126, 131, 132, 139, 142, 148, 155, 156, 164, 165, 173, 174, 175, 177, 180, 189, 192, 193, 197, 214, 221, 230, 231, 235, 243, 251, 268, 274], "loss_dict": 1, "instanc": [1, 6, 8, 13, 14, 16, 33, 39, 46, 55, 56, 57, 62, 84, 86, 91, 93, 96, 97, 98, 99, 100, 103, 105, 106, 107, 114, 132, 133, 137, 138, 141, 144, 145, 146, 149, 154, 156, 160, 167, 169, 173, 175, 176, 177, 187, 194, 205, 212, 215, 221, 229, 230, 231, 235, 236, 245, 248, 249, 271], "written": [1, 3, 4, 6, 7, 8, 11, 12, 16, 18, 95, 101, 106, 107, 143, 149, 153, 161, 165, 166, 169, 178, 183, 229, 240, 242, 254, 255, 256, 263], "under": [1, 11, 22, 32, 48, 51, 52, 54, 56, 58, 62, 95, 98, 100, 113, 114, 134, 136, 137, 141, 148, 155, 156, 165, 167, 171, 177, 183, 184, 192, 200, 201, 212, 215, 239, 242, 255, 264, 266], "loss_": 1, "smth": 1, "where": [1, 3, 6, 11, 13, 14, 15, 16, 19, 20, 22, 25, 32, 34, 48, 51, 53, 62, 65, 70, 85, 86, 88, 89, 91, 93, 95, 96, 98, 99, 100, 102, 103, 105, 114, 131, 133, 136, 138, 139, 140, 143, 145, 146, 148, 150, 152, 154, 157, 160, 161, 164, 165, 166, 167, 169, 172, 173, 174, 175, 176, 177, 178, 179, 184, 187, 189, 190, 192, 193, 199, 202, 212, 215, 216, 218, 228, 229, 230, 234, 245, 248, 252, 254, 256, 263, 266, 267], "string": [1, 3, 7, 8, 11, 17, 51, 69, 96, 108, 114, 138, 139, 140, 149, 171, 173, 179, 190, 212, 216, 230, 254], "describ": [1, 6, 11, 12, 16, 17, 19, 39, 41, 50, 51, 54, 62, 77, 91, 98, 108, 111, 118, 127, 148, 161, 169, 173, 174, 177, 183, 189, 190, 194, 202, 205, 216, 248], "addit": [1, 2, 3, 7, 11, 13, 17, 20, 52, 57, 77, 89, 96, 98, 103, 106, 108, 113, 133, 136, 137, 139, 146, 148, 150, 154, 157, 160, 171, 172, 175, 176, 179, 184, 186, 187, 189, 193, 199, 216, 221, 231, 241, 242, 244, 245, 248, 263, 264, 265, 266, 270, 271, 275], "kei": [1, 3, 6, 7, 11, 13, 16, 17, 51, 84, 101, 105, 108, 113, 115, 118, 133, 134, 135, 138, 149, 156, 160, 167, 172, 173, 175, 178, 179, 183, 184, 189, 190, 193, 197, 198, 205, 206, 220, 229, 231, 232, 235, 241, 242, 252, 268, 271], "mai": [1, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 20, 37, 51, 52, 54, 70, 77, 88, 89, 91, 93, 96, 100, 107, 111, 114, 115, 132, 135, 136, 137, 138, 141, 142, 143, 148, 149, 150, 152, 154, 155, 161, 164, 165, 167, 172, 173, 176, 179, 183, 187, 189, 193, 197, 200, 202, 206, 216, 221, 231, 234, 235, 240, 242, 243, 245, 254, 265, 268], "metric": [1, 20, 86, 95, 96, 98, 113, 133, 183, 192, 212, 216, 229], "log": [1, 22, 37, 51, 52, 54, 55, 95, 99, 100, 103, 105, 106, 132, 135, 138, 145, 160, 172, 173, 175, 177, 183, 184, 189, 190, 198, 201, 240, 246, 248, 250, 267], "dure": [1, 11, 14, 16, 22, 32, 33, 37, 38, 39, 51, 54, 64, 65, 88, 91, 93, 96, 97, 98, 100, 105, 106, 107, 114, 115, 125, 131, 132, 133, 134, 136, 137, 140, 141, 142, 143, 144, 146, 149, 153, 154, 160, 161, 165, 172, 173, 174, 175, 177, 183, 186, 187, 189, 192, 194, 200, 212, 221, 228, 229, 235, 236, 254, 255, 258, 267, 270], "reason": [1, 6, 11, 16, 17, 18, 20, 32, 54, 84, 88, 91, 98, 100, 103, 106, 115, 121, 137, 142, 148, 154, 173, 178, 179, 189, 190, 200, 216, 219, 220, 227, 244, 250, 251, 254, 256, 265], "independ": [1, 51, 105, 106, 155, 156, 161, 176, 205, 263, 271], "let": [1, 2, 3, 4, 6, 8, 11, 12, 13, 14, 16, 18, 19, 20, 22, 25, 33, 37, 44, 45, 46, 48, 51, 53, 54, 70, 77, 86, 88, 89, 91, 93, 95, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 108, 111, 113, 114, 115, 121, 124, 125, 134, 136, 138, 143, 146, 148, 149, 150, 153, 154, 155, 157, 160, 161, 164, 165, 166, 167, 169, 171, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 186, 187, 189, 190, 192, 193, 194, 197, 200, 202, 214, 216, 218, 220, 221, 228, 229, 230, 231, 234, 235, 236, 244, 245, 252, 256, 258, 263, 264, 268], "user": [1, 7, 8, 16, 20, 22, 25, 42, 45, 51, 52, 84, 85, 89, 98, 102, 111, 118, 124, 125, 133, 134, 135, 136, 139, 140, 146, 154, 157, 160, 167, 175, 177, 178, 179, 183, 189, 190, 192, 193, 199, 200, 201, 202, 206, 212, 221, 236, 238, 239, 240, 241, 248, 250, 251, 252, 263, 264, 265, 266, 271], "differ": [1, 3, 6, 8, 11, 12, 13, 14, 15, 16, 19, 20, 22, 25, 32, 37, 41, 48, 50, 51, 53, 54, 62, 75, 77, 84, 85, 86, 89, 91, 93, 96, 97, 98, 99, 100, 105, 106, 108, 124, 131, 132, 133, 134, 136, 138, 139, 140, 142, 145, 146, 148, 150, 152, 153, 154, 155, 157, 161, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 186, 187, 189, 190, 193, 199, 200, 201, 202, 205, 212, 216, 219, 221, 227, 229, 230, 231, 236, 240, 243, 245, 248, 249, 250, 251, 254, 256, 257, 263, 264, 265, 266, 267, 268], "set": [1, 2, 6, 8, 11, 12, 13, 14, 16, 17, 18, 20, 22, 25, 32, 37, 39, 44, 45, 48, 50, 51, 52, 54, 55, 57, 62, 64, 65, 70, 77, 84, 85, 88, 89, 91, 92, 93, 95, 96, 97, 98, 99, 100, 103, 105, 106, 108, 110, 114, 115, 121, 124, 129, 131, 132, 133, 134, 136, 139, 140, 141, 144, 145, 146, 148, 149, 154, 156, 160, 164, 165, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 186, 187, 189, 190, 192, 193, 194, 199, 200, 202, 212, 216, 217, 220, 228, 230, 232, 234, 240, 246, 248, 263, 265, 267, 268, 270, 271], "sum": [1, 2, 3, 4, 9, 13, 16, 18, 22, 33, 44, 51, 54, 69, 84, 88, 89, 99, 100, 102, 114, 132, 133, 134, 140, 141, 143, 148, 155, 174, 175, 176, 177, 183, 187, 189, 190, 197, 199, 200, 216, 234, 249, 264], "can": [1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 25, 32, 33, 34, 36, 37, 38, 39, 41, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 62, 69, 70, 75, 77, 84, 85, 86, 88, 89, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 110, 111, 113, 114, 115, 118, 121, 124, 126, 127, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 161, 162, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 186, 187, 189, 190, 192, 193, 194, 197, 198, 199, 200, 201, 202, 205, 212, 214, 215, 216, 217, 218, 220, 221, 222, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 252, 254, 255, 256, 258, 263, 264, 265, 266, 267, 268, 270, 271, 274, 275], "simpli": [1, 6, 11, 15, 44, 45, 51, 55, 91, 102, 105, 114, 115, 124, 135, 136, 138, 140, 143, 148, 154, 155, 164, 170, 171, 173, 174, 175, 176, 179, 181, 183, 184, 187, 189, 190, 193, 200, 216, 230, 232, 233, 234, 252, 254, 264, 271, 274], "done": [1, 3, 6, 8, 11, 12, 16, 19, 20, 51, 56, 84, 93, 96, 98, 99, 100, 106, 132, 133, 136, 137, 140, 142, 149, 150, 153, 154, 156, 157, 160, 167, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 184, 189, 190, 194, 220, 231, 244, 254, 256], "via": [1, 3, 6, 8, 9, 19, 20, 22, 39, 56, 57, 77, 98, 131, 132, 133, 136, 138, 148, 149, 155, 165, 172, 173, 178, 184, 187, 189, 190, 192, 202, 212, 220, 228, 229, 231, 239, 242, 255, 258, 267, 270], "loss_val": 1, "item": [1, 2, 4, 6, 12, 13, 17, 41, 51, 69, 70, 114, 115, 118, 132, 133, 134, 139, 140, 148, 149, 152, 172, 173, 175, 176, 177, 184, 189, 215, 231], "startswith": [1, 85, 230], "parent": [1, 3, 4, 16, 202], "As": [1, 2, 6, 8, 11, 12, 13, 14, 16, 19, 39, 44, 51, 52, 54, 77, 86, 89, 91, 93, 96, 97, 98, 106, 108, 114, 115, 132, 133, 134, 135, 136, 137, 138, 146, 148, 149, 152, 153, 154, 155, 156, 160, 164, 165, 167, 169, 171, 173, 174, 175, 176, 177, 178, 183, 186, 189, 190, 192, 193, 201, 212, 216, 220, 231, 236, 242, 248, 249, 256, 266, 268, 271], "mani": [1, 2, 6, 12, 16, 17, 18, 20, 22, 32, 33, 37, 38, 51, 53, 54, 67, 71, 77, 84, 88, 89, 91, 93, 96, 98, 100, 101, 102, 106, 108, 110, 114, 133, 136, 138, 142, 148, 150, 155, 157, 161, 166, 167, 173, 175, 176, 179, 186, 187, 189, 190, 193, 214, 215, 216, 218, 231, 235, 236, 242, 248, 265, 274], "other": [1, 6, 7, 8, 11, 12, 13, 16, 20, 32, 33, 36, 41, 45, 48, 50, 51, 54, 55, 57, 58, 59, 70, 71, 77, 84, 85, 86, 88, 89, 91, 96, 98, 100, 102, 103, 105, 106, 114, 115, 118, 124, 126, 128, 132, 134, 135, 136, 139, 140, 142, 144, 145, 146, 148, 149, 152, 153, 154, 155, 156, 160, 161, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 184, 186, 187, 189, 190, 192, 193, 194, 200, 202, 215, 216, 218, 220, 221, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 249, 254, 256, 263, 264, 265, 266, 268], "expect": [1, 3, 4, 6, 8, 12, 13, 16, 46, 48, 51, 53, 77, 86, 88, 89, 91, 93, 96, 97, 98, 102, 103, 105, 106, 107, 115, 121, 135, 138, 142, 146, 149, 155, 156, 164, 165, 171, 172, 173, 174, 175, 176, 178, 189, 190, 192, 201, 212, 214, 215, 216, 221, 228, 231, 235, 243, 245, 249, 254, 270], "ani": [1, 2, 3, 6, 7, 8, 11, 12, 13, 14, 15, 16, 18, 19, 20, 32, 42, 44, 46, 48, 51, 53, 55, 57, 69, 88, 91, 93, 96, 98, 99, 101, 102, 105, 106, 108, 110, 114, 115, 124, 127, 132, 134, 136, 137, 139, 141, 143, 144, 148, 150, 152, 153, 156, 157, 160, 164, 165, 166, 167, 169, 172, 173, 174, 176, 177, 181, 183, 186, 189, 190, 194, 197, 198, 199, 200, 202, 205, 212, 215, 218, 220, 222, 228, 230, 234, 239, 240, 242, 243, 244, 246, 248, 255, 257, 263, 264, 265, 266, 267, 270], "similar": [1, 3, 4, 6, 8, 11, 12, 13, 16, 17, 20, 41, 50, 51, 84, 85, 89, 91, 93, 96, 98, 99, 105, 106, 111, 114, 136, 139, 143, 148, 149, 160, 165, 173, 175, 176, 177, 178, 179, 183, 184, 189, 192, 194, 215, 216, 230, 231, 235, 239, 245, 249, 255, 263, 264, 265, 266, 267, 268], "structur": [1, 4, 6, 8, 11, 16, 21, 22, 33, 38, 39, 41, 50, 51, 54, 55, 88, 91, 93, 97, 98, 99, 103, 108, 115, 131, 141, 144, 150, 153, 156, 157, 165, 166, 171, 173, 177, 184, 187, 192, 229, 235, 242, 244, 251, 266, 274], "format": [1, 14, 20, 42, 106, 110, 115, 126, 131, 132, 133, 135, 153, 154, 172, 175, 177, 180, 183, 184, 190, 192, 206, 214, 216, 251, 263, 265, 266], "make": [1, 3, 4, 6, 8, 11, 12, 14, 16, 22, 33, 37, 38, 42, 44, 45, 46, 51, 52, 53, 55, 56, 57, 59, 70, 77, 86, 88, 91, 93, 95, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 115, 118, 121, 124, 126, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 146, 148, 149, 153, 154, 155, 156, 160, 164, 165, 167, 170, 171, 173, 174, 175, 176, 177, 179, 184, 186, 187, 189, 190, 192, 193, 194, 200, 201, 202, 214, 215, 216, 220, 222, 229, 230, 231, 239, 240, 242, 245, 251, 252, 254, 256, 263, 264, 265, 266, 268, 274], "possibl": [1, 2, 3, 6, 9, 11, 12, 16, 17, 20, 88, 89, 93, 96, 99, 102, 110, 134, 137, 141, 142, 143, 149, 150, 152, 153, 155, 156, 167, 172, 173, 175, 176, 179, 186, 187, 189, 190, 192, 193, 205, 215, 220, 231, 242, 248, 254, 268], "re": [1, 3, 6, 7, 8, 9, 12, 16, 19, 25, 36, 38, 41, 45, 50, 51, 52, 89, 91, 93, 95, 96, 97, 98, 99, 106, 114, 121, 124, 137, 139, 140, 149, 150, 152, 155, 160, 161, 164, 166, 167, 172, 173, 174, 175, 176, 179, 189, 190, 192, 200, 202, 206, 215, 216, 220, 230, 231, 235, 255, 256, 263, 274], "across": [1, 3, 11, 13, 16, 19, 22, 25, 41, 51, 54, 56, 57, 58, 84, 89, 96, 98, 108, 127, 132, 133, 134, 136, 144, 145, 146, 148, 150, 156, 160, 167, 169, 171, 174, 176, 177, 186, 189, 190, 198, 200, 202, 205, 214, 229, 231, 232, 234, 239, 243, 245, 248, 249, 252], "modal": [1, 167, 214], "complex": [1, 6, 33, 34, 52, 69, 70, 88, 89, 93, 98, 108, 114, 115, 127, 132, 146, 160, 161, 165, 167, 175, 177, 184, 186, 187, 189, 190, 201, 202, 222, 232, 242, 254, 268], "read": [1, 2, 6, 7, 8, 9, 16, 38, 48, 51, 53, 77, 91, 102, 103, 106, 115, 121, 127, 133, 134, 135, 137, 138, 139, 140, 141, 148, 154, 160, 164, 167, 172, 173, 174, 176, 179, 181, 184, 186, 187, 193, 215, 216, 245, 248, 255], "multipl": [1, 3, 11, 12, 13, 16, 18, 19, 20, 22, 41, 46, 50, 51, 55, 56, 57, 58, 62, 67, 84, 86, 88, 89, 93, 96, 97, 98, 102, 106, 114, 127, 132, 134, 136, 137, 138, 139, 140, 146, 148, 150, 154, 156, 160, 167, 169, 172, 173, 175, 176, 177, 179, 183, 184, 187, 189, 190, 193, 200, 215, 216, 221, 230, 231, 232, 244, 248, 252, 254, 256, 267, 268], "entri": [1, 13, 16, 55, 102, 105, 113, 115, 144, 149, 154, 171, 173, 175, 183, 189, 233, 239, 254, 265, 266, 268, 271], "In": [1, 2, 3, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 25, 32, 33, 34, 36, 38, 39, 41, 44, 46, 50, 51, 52, 53, 54, 55, 57, 58, 59, 65, 69, 70, 77, 84, 85, 86, 89, 91, 93, 95, 97, 98, 99, 100, 102, 103, 105, 106, 108, 111, 113, 114, 115, 121, 124, 126, 127, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 153, 154, 155, 156, 157, 160, 161, 162, 164, 165, 166, 167, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 186, 187, 189, 190, 192, 193, 194, 197, 198, 199, 200, 201, 202, 205, 212, 214, 215, 216, 218, 220, 221, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 252, 254, 255, 256, 257, 258, 263, 264, 265, 266, 267, 268, 270, 271], "word": [1, 6, 12, 13, 16, 45, 51, 77, 84, 89, 93, 98, 99, 101, 103, 104, 115, 131, 139, 140, 148, 162, 164, 165, 171, 177, 179, 190, 245, 251, 264, 266, 268], "allow": [1, 2, 6, 7, 8, 11, 12, 13, 14, 16, 25, 32, 33, 34, 44, 51, 52, 53, 54, 55, 84, 85, 86, 88, 89, 93, 96, 98, 100, 102, 103, 105, 106, 108, 114, 132, 133, 134, 135, 136, 138, 139, 140, 141, 143, 146, 148, 149, 156, 157, 160, 161, 164, 165, 167, 170, 171, 173, 174, 175, 177, 178, 179, 181, 186, 187, 189, 190, 192, 193, 202, 205, 212, 215, 216, 221, 228, 229, 230, 239, 248, 252, 254, 257, 263, 264, 268, 270], "u": [1, 3, 6, 7, 11, 12, 13, 16, 18, 20, 32, 34, 45, 48, 51, 53, 54, 71, 84, 86, 88, 89, 91, 93, 96, 98, 99, 100, 102, 105, 106, 111, 114, 124, 133, 136, 139, 142, 144, 148, 149, 150, 153, 154, 155, 156, 157, 160, 161, 164, 165, 166, 167, 169, 172, 173, 174, 176, 179, 184, 186, 187, 189, 190, 193, 197, 214, 216, 218, 220, 228, 230, 235, 243, 256, 263, 264, 266, 268, 270, 274], "oblivi": [1, 173], "type": [1, 3, 6, 8, 11, 12, 16, 22, 41, 50, 51, 52, 77, 84, 89, 91, 92, 95, 97, 102, 106, 108, 111, 127, 132, 133, 136, 138, 148, 150, 154, 166, 167, 170, 171, 173, 175, 176, 177, 178, 183, 187, 189, 193, 199, 200, 206, 212, 214, 228, 229, 231, 232, 235, 241, 248, 263, 267, 270], "being": [1, 3, 6, 12, 14, 16, 20, 48, 51, 54, 84, 89, 97, 98, 99, 100, 102, 106, 108, 121, 124, 133, 136, 138, 142, 148, 149, 165, 167, 169, 171, 173, 174, 176, 187, 189, 190, 194, 199, 216, 220, 231, 244, 248, 264, 265, 268], "run": [1, 2, 3, 7, 8, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 25, 32, 33, 34, 37, 38, 39, 41, 42, 44, 45, 48, 50, 53, 54, 58, 59, 62, 65, 70, 74, 75, 84, 86, 88, 89, 91, 93, 95, 96, 97, 99, 100, 102, 103, 105, 106, 107, 108, 110, 111, 113, 114, 115, 118, 121, 124, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 152, 153, 154, 155, 156, 157, 161, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 184, 186, 187, 190, 192, 193, 194, 199, 200, 201, 202, 206, 212, 215, 216, 217, 220, 222, 228, 230, 231, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 248, 250, 251, 254, 256, 257, 263, 264, 265, 266, 267, 268, 270, 271, 274, 275], "elementari": [1, 2], "onli": [1, 3, 6, 8, 9, 11, 12, 13, 15, 16, 17, 22, 32, 39, 44, 45, 46, 48, 51, 55, 57, 58, 77, 84, 86, 88, 91, 93, 96, 98, 99, 100, 105, 106, 113, 115, 118, 121, 124, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 157, 161, 164, 165, 166, 167, 169, 170, 171, 172, 173, 176, 177, 178, 179, 183, 184, 186, 187, 189, 190, 192, 193, 194, 197, 198, 202, 205, 212, 215, 216, 221, 228, 231, 232, 233, 236, 239, 242, 243, 245, 248, 249, 255, 256, 263, 264, 265, 266, 267, 268, 270, 271, 274, 275], "those": [1, 3, 6, 9, 12, 13, 16, 20, 32, 39, 44, 86, 88, 96, 99, 105, 106, 111, 124, 135, 136, 137, 139, 150, 153, 164, 169, 170, 171, 177, 179, 184, 189, 190, 195, 200, 212, 215, 216, 230, 239, 242, 244, 248, 256, 264, 274], "keep": [1, 3, 6, 12, 13, 16, 32, 41, 44, 51, 54, 77, 84, 91, 93, 96, 98, 100, 102, 103, 106, 114, 115, 124, 130, 131, 132, 133, 134, 135, 136, 137, 140, 145, 146, 149, 154, 160, 161, 167, 177, 179, 189, 190, 193, 216, 231, 249], "didact": [1, 148], "ll": [1, 3, 6, 8, 11, 12, 18, 20, 33, 34, 36, 41, 50, 51, 52, 79, 80, 81, 82, 86, 88, 89, 91, 93, 95, 96, 97, 99, 106, 108, 124, 134, 139, 140, 146, 148, 149, 150, 152, 155, 160, 161, 164, 166, 172, 173, 174, 176, 179, 184, 189, 190, 193, 194, 197, 198, 205, 216, 241, 246, 256, 263, 265, 267], "displai": [1, 2, 6, 14, 34, 45, 89, 95, 97, 113, 121, 142, 172, 179, 183, 201, 215, 216, 229], "each": [1, 2, 3, 6, 7, 11, 12, 13, 14, 16, 18, 19, 20, 22, 25, 32, 33, 34, 36, 37, 38, 41, 44, 45, 46, 50, 51, 53, 54, 55, 57, 58, 62, 67, 77, 84, 85, 86, 88, 89, 91, 92, 93, 95, 96, 97, 98, 99, 100, 103, 105, 106, 110, 113, 114, 115, 121, 124, 127, 131, 132, 133, 134, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 152, 153, 155, 156, 157, 160, 161, 164, 165, 166, 167, 169, 171, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 189, 190, 192, 193, 194, 198, 201, 202, 212, 214, 215, 216, 218, 220, 221, 222, 228, 229, 230, 231, 233, 234, 235, 245, 246, 248, 249, 252, 254, 255, 257, 263, 266, 268], "popul": [1, 32, 44, 51, 86, 96, 124, 133, 149, 156, 173, 175, 198, 205, 230, 240, 254], "later": [1, 3, 4, 6, 13, 18, 32, 41, 48, 51, 77, 86, 89, 93, 98, 102, 103, 106, 115, 132, 133, 135, 136, 140, 141, 143, 148, 150, 152, 153, 154, 155, 156, 161, 166, 169, 173, 174, 177, 178, 179, 184, 186, 189, 190, 193, 197, 198, 199, 201, 205, 212, 215, 216, 217, 220, 228, 231, 235, 236, 239, 240, 241, 242, 244, 245, 246, 252, 254, 255, 258, 263, 271], "stage": [1, 16, 19, 93, 106, 169, 199, 205, 257, 267], "start": [1, 4, 6, 13, 19, 20, 22, 25, 32, 36, 44, 45, 51, 52, 54, 55, 56, 57, 62, 77, 86, 88, 89, 92, 93, 96, 97, 98, 101, 102, 106, 107, 108, 111, 124, 125, 127, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 148, 154, 155, 156, 160, 164, 165, 167, 172, 174, 175, 176, 179, 183, 184, 187, 189, 190, 192, 194, 195, 199, 212, 216, 219, 221, 227, 229, 234, 238, 239, 240, 242, 249, 250, 251, 252, 254, 256, 258, 265, 270, 272], "solv": [1, 6, 16, 51, 53, 98, 105, 121, 165, 173, 175, 177, 216, 220, 231, 265], "task": [1, 6, 15, 16, 20, 25, 37, 38, 51, 97, 98, 99, 105, 113, 121, 127, 128, 131, 132, 139, 149, 165, 167, 173, 174, 179, 181, 192, 216, 221, 230, 231, 239, 245, 248], "strategi": [1, 20, 22, 25, 54, 84, 131, 140, 148, 154, 155, 166, 167, 175, 176, 199, 201, 202, 206, 231], "predict": [1, 33, 36, 37, 38, 39, 44, 45, 51, 54, 64, 65, 69, 70, 71, 74, 75, 88, 89, 91, 93, 97, 98, 99, 103, 105, 106, 114, 124, 136, 138, 139, 140, 150, 155, 156, 166, 167, 174, 179, 184, 190, 192, 214, 218, 245, 250], "henc": [1, 16, 20, 41, 44, 50, 84, 132, 137, 146, 157, 161, 167, 170, 173, 175, 177, 190, 216, 245], "our": [1, 2, 3, 4, 6, 8, 9, 11, 12, 14, 19, 20, 32, 33, 34, 36, 37, 38, 41, 42, 44, 45, 46, 50, 51, 52, 53, 54, 55, 57, 62, 64, 65, 67, 69, 70, 71, 77, 86, 88, 89, 91, 93, 95, 96, 97, 98, 99, 100, 103, 105, 106, 108, 111, 113, 114, 121, 124, 131, 132, 133, 135, 138, 139, 140, 141, 143, 144, 145, 146, 149, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 169, 171, 173, 174, 175, 176, 178, 179, 181, 184, 187, 189, 190, 192, 193, 194, 195, 198, 199, 200, 205, 214, 216, 230, 235, 236, 240, 241, 249, 250, 252, 256, 258, 263, 264, 265, 266, 271, 274], "two": [1, 3, 6, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 25, 32, 34, 37, 38, 41, 42, 44, 50, 51, 52, 54, 59, 77, 85, 86, 88, 89, 91, 93, 96, 98, 99, 100, 102, 103, 105, 106, 107, 108, 113, 114, 121, 124, 132, 133, 138, 139, 141, 142, 143, 145, 146, 148, 149, 152, 153, 154, 155, 156, 157, 161, 165, 166, 167, 169, 170, 171, 173, 174, 175, 177, 178, 179, 190, 192, 193, 194, 202, 205, 212, 214, 216, 218, 220, 221, 228, 230, 231, 232, 240, 242, 244, 248, 249, 252, 254, 256, 257, 264, 266, 268, 270], "constructor": [1, 6, 8, 12, 13, 14, 69, 71, 93, 97, 114, 124, 132, 133, 146, 167, 170, 171, 173, 175, 177, 215, 216, 266], "both": [1, 2, 6, 8, 11, 12, 13, 14, 16, 19, 25, 34, 51, 53, 54, 62, 77, 84, 89, 96, 97, 98, 105, 106, 113, 114, 133, 134, 136, 138, 142, 145, 146, 148, 152, 154, 155, 157, 160, 161, 167, 171, 173, 175, 176, 177, 178, 179, 186, 189, 190, 192, 193, 199, 200, 202, 212, 214, 215, 216, 228, 230, 235, 239, 240, 245, 248, 256, 257, 263, 266, 267], "compat": [1, 4, 6, 7, 11, 13, 20, 52, 95, 96, 102, 107, 135, 141, 149, 178, 187, 189, 244, 245, 271], "comput": [1, 3, 4, 6, 11, 13, 14, 15, 18, 19, 20, 25, 37, 41, 45, 48, 50, 51, 53, 54, 55, 59, 62, 64, 65, 67, 69, 70, 74, 75, 77, 85, 88, 89, 91, 93, 96, 97, 98, 99, 100, 101, 103, 106, 108, 110, 114, 124, 126, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 148, 149, 152, 154, 156, 160, 164, 165, 166, 167, 169, 171, 172, 173, 174, 176, 178, 179, 183, 186, 187, 189, 190, 192, 193, 194, 197, 198, 205, 212, 215, 216, 218, 220, 222, 230, 235, 242, 245, 248, 252, 254, 256, 267, 268, 274, 275], "fit": [1, 6, 12, 13, 25, 62, 86, 105, 114, 132, 133, 134, 136, 146, 167, 177, 190, 215, 248], "gener": [1, 8, 11, 12, 13, 16, 19, 20, 22, 25, 39, 44, 45, 51, 53, 55, 74, 75, 84, 88, 89, 91, 95, 96, 97, 98, 100, 102, 103, 105, 106, 107, 114, 116, 118, 121, 126, 128, 131, 136, 137, 139, 141, 146, 148, 150, 154, 155, 156, 157, 161, 162, 164, 165, 166, 167, 171, 173, 175, 177, 178, 179, 180, 181, 183, 184, 187, 189, 190, 192, 193, 199, 200, 205, 212, 221, 230, 233, 235, 240, 244, 245, 246, 248, 251, 254, 255, 256, 257, 258, 263, 264, 265, 267, 268, 270], "crucial": [1, 2, 14, 16, 84, 102, 149, 167, 173, 190, 231], "convert_to_funct": 1, "extract": [1, 51, 54, 77, 95, 98, 121, 124, 131, 139, 140, 152, 154, 166, 173, 179, 187, 189, 192, 194, 205, 218], "convert": [1, 12, 14, 33, 34, 41, 42, 45, 51, 53, 54, 57, 91, 93, 96, 98, 106, 108, 110, 115, 125, 131, 134, 139, 140, 172, 173, 175, 176, 184, 190, 200, 206, 214, 228, 231, 256, 263, 264, 266, 267, 268, 270], "strictli": [1, 96, 173], "speak": [1, 11, 44, 96, 137, 148, 231], "one": [1, 3, 4, 6, 7, 8, 9, 11, 13, 14, 16, 17, 20, 22, 32, 34, 36, 41, 42, 46, 48, 50, 51, 53, 54, 57, 58, 62, 77, 86, 88, 89, 91, 93, 96, 97, 98, 99, 101, 102, 103, 105, 106, 111, 114, 115, 118, 121, 124, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 148, 149, 150, 152, 153, 154, 155, 160, 164, 165, 166, 167, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 186, 189, 190, 192, 194, 199, 200, 201, 202, 216, 218, 220, 221, 231, 232, 234, 242, 243, 244, 245, 248, 249, 254, 255, 256, 263, 264, 265, 267, 268, 274], "perfectli": [1, 16], "howev": [1, 3, 4, 6, 7, 8, 9, 11, 12, 14, 16, 17, 18, 20, 32, 39, 46, 48, 51, 53, 54, 77, 86, 98, 99, 114, 121, 136, 137, 141, 142, 143, 148, 149, 150, 153, 157, 164, 167, 170, 171, 174, 175, 176, 177, 178, 179, 184, 186, 187, 189, 190, 194, 200, 201, 205, 216, 220, 228, 230, 231, 236, 242, 245, 248, 257, 258, 264, 265, 268, 274], "encourag": [1, 6, 93, 174, 179], "usag": [1, 3, 13, 15, 17, 84, 88, 113, 125, 126, 130, 131, 132, 134, 137, 148, 149, 154, 155, 160, 169, 173, 175, 177, 178, 180, 183, 193, 199, 206, 212, 215, 229, 231, 243, 248, 250, 251, 252, 256, 258, 267, 268], "doe": [1, 2, 3, 6, 11, 15, 16, 17, 18, 32, 42, 44, 48, 74, 75, 77, 88, 89, 91, 93, 95, 96, 97, 98, 100, 102, 105, 106, 108, 111, 114, 115, 121, 124, 132, 133, 134, 135, 141, 143, 146, 148, 149, 155, 156, 157, 164, 165, 167, 169, 172, 173, 174, 176, 177, 178, 179, 183, 184, 186, 187, 189, 190, 192, 193, 194, 199, 212, 215, 216, 220, 228, 230, 231, 242, 244, 248, 254, 255, 256, 264, 265, 266, 274], "often": [1, 6, 12, 16, 20, 41, 51, 77, 86, 88, 89, 91, 96, 98, 100, 102, 105, 106, 114, 115, 136, 137, 138, 140, 156, 165, 189, 190, 197, 199, 215, 230, 231, 254, 268], "same": [1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 14, 17, 20, 32, 33, 39, 41, 44, 45, 51, 53, 54, 55, 57, 67, 75, 77, 86, 88, 96, 97, 98, 100, 102, 103, 105, 106, 108, 111, 113, 114, 115, 124, 132, 133, 134, 135, 136, 137, 139, 141, 142, 145, 146, 148, 150, 152, 154, 155, 156, 157, 160, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 187, 189, 190, 193, 199, 200, 212, 215, 216, 221, 223, 224, 225, 226, 228, 231, 234, 235, 239, 240, 243, 244, 248, 249, 252, 255, 257, 263, 264, 265, 266, 268], "usual": [1, 6, 11, 18, 44, 89, 91, 93, 95, 96, 100, 101, 103, 105, 106, 121, 136, 137, 140, 142, 143, 146, 148, 149, 154, 157, 164, 167, 171, 173, 189, 193, 215, 220, 221, 231, 248, 274], "former": [1, 139, 140, 179], "some": [1, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 20, 32, 33, 34, 37, 41, 42, 44, 45, 48, 50, 51, 52, 53, 54, 64, 70, 77, 84, 86, 88, 89, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 111, 113, 114, 115, 124, 131, 132, 133, 135, 138, 139, 140, 141, 142, 143, 144, 146, 148, 149, 150, 152, 153, 154, 155, 160, 161, 164, 166, 167, 169, 171, 172, 173, 174, 176, 177, 179, 181, 183, 184, 186, 187, 189, 190, 192, 193, 194, 200, 215, 216, 218, 220, 221, 222, 230, 231, 232, 235, 236, 242, 243, 245, 248, 252, 254, 256, 263, 264, 265, 266, 268, 270, 271, 274], "lag": [1, 173], "absolut": [1, 6, 12, 84, 100, 171, 174, 194, 230], "dilut": 1, "move": [1, 8, 9, 14, 26, 27, 28, 29, 30, 31, 33, 38, 41, 44, 48, 50, 78, 87, 88, 100, 106, 132, 133, 134, 136, 145, 146, 149, 151, 160, 164, 165, 166, 167, 170, 174, 176, 177, 182, 183, 185, 188, 192, 199, 200, 216, 230, 231, 259, 262, 264], "averag": [1, 51, 54, 62, 84, 86, 89, 91, 97, 98, 106, 132, 135, 140, 148, 166, 174, 177, 179, 183, 194, 216, 231], "These": [1, 11, 13, 14, 16, 20, 39, 44, 51, 54, 57, 62, 84, 86, 93, 101, 103, 105, 106, 113, 121, 128, 129, 148, 156, 160, 172, 173, 176, 178, 179, 186, 189, 190, 193, 195, 216, 230, 231, 239, 240, 242, 256, 270], "associ": [1, 3, 6, 11, 12, 33, 34, 52, 84, 89, 143, 152, 167, 171, 178, 190, 218, 228, 231, 244, 255, 264], "One": [1, 2, 3, 6, 12, 13, 17, 51, 53, 77, 84, 88, 93, 96, 98, 99, 100, 102, 132, 133, 134, 135, 136, 137, 140, 146, 148, 150, 164, 165, 167, 181, 184, 186, 187, 189, 190, 192, 193, 199, 200, 216, 222, 228, 230, 231, 245, 254, 265, 274], "advantag": [1, 6, 16, 20, 51, 96, 99, 106, 127, 133, 134, 137, 148, 149, 165, 167, 173, 187, 199, 200, 212, 231, 235, 240, 244, 266], "match": [1, 12, 16, 20, 70, 91, 96, 98, 106, 108, 111, 114, 115, 150, 154, 157, 164, 166, 173, 176, 187, 189, 206, 215, 218, 222, 232, 248, 264, 266], "exactli": [1, 11, 12, 14, 20, 32, 44, 53, 54, 91, 102, 105, 106, 108, 114, 149, 154, 165, 189, 190], "current": [1, 3, 6, 8, 11, 12, 13, 14, 16, 17, 33, 38, 41, 51, 54, 64, 77, 84, 89, 98, 106, 114, 121, 132, 133, 135, 137, 138, 139, 140, 148, 149, 152, 156, 157, 166, 167, 169, 171, 173, 174, 175, 176, 177, 178, 179, 183, 189, 190, 193, 200, 221, 231, 239, 242, 254, 263, 265, 266, 268], "configur": [1, 4, 6, 8, 16, 22, 25, 51, 52, 84, 89, 97, 125, 133, 136, 144, 146, 154, 160, 164, 172, 173, 176, 183, 190, 194, 206, 231, 236, 240, 242, 245, 248, 250, 256, 258, 267], "pessimist": [1, 173], "bound": [1, 51, 115, 134, 138, 154, 173, 174, 183, 189, 190, 192, 193, 215, 216, 221, 231, 248, 256], "pai": [1, 12, 46, 51, 135, 231, 243], "attent": [1, 12, 46, 51, 93, 126, 128, 131, 135, 136, 139, 140, 162, 180, 181, 242, 251, 252, 256, 268, 275], "create_target_param": 1, "keyword": [1, 171, 173, 220, 228], "argument": [1, 2, 3, 4, 6, 8, 11, 16, 18, 32, 38, 41, 44, 45, 50, 53, 57, 71, 84, 88, 89, 93, 95, 96, 98, 100, 103, 105, 107, 113, 114, 115, 132, 133, 140, 145, 146, 148, 149, 150, 154, 155, 160, 166, 167, 169, 170, 171, 173, 175, 176, 177, 178, 183, 187, 189, 190, 194, 201, 205, 215, 216, 220, 221, 228, 229, 231, 232, 242, 248, 252, 254, 265, 267, 274], "below": [1, 2, 3, 6, 12, 13, 14, 16, 19, 22, 25, 34, 39, 41, 44, 46, 50, 53, 54, 55, 56, 57, 58, 59, 84, 88, 89, 91, 93, 95, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 108, 110, 111, 114, 118, 124, 134, 135, 136, 138, 141, 142, 144, 145, 146, 148, 149, 152, 154, 157, 164, 170, 173, 174, 175, 176, 177, 178, 183, 184, 187, 189, 190, 192, 194, 198, 199, 200, 201, 205, 206, 212, 215, 216, 220, 221, 236, 239, 242, 243, 244, 245, 248, 249, 254, 256, 257, 258, 264, 265, 266, 267, 268, 270, 271], "tell": [1, 7, 18, 22, 71, 86, 88, 91, 93, 97, 105, 106, 114, 124, 138, 139, 149, 150, 152, 164, 174, 175, 177, 179, 189, 216, 221], "creat": [1, 2, 6, 7, 8, 12, 14, 16, 18, 19, 21, 22, 25, 32, 33, 36, 39, 41, 42, 44, 45, 48, 50, 52, 53, 54, 64, 65, 67, 69, 70, 71, 74, 75, 77, 84, 88, 89, 91, 93, 95, 97, 98, 99, 101, 103, 105, 107, 108, 111, 114, 115, 118, 124, 130, 131, 133, 134, 135, 136, 141, 143, 146, 148, 149, 152, 156, 157, 160, 162, 165, 166, 167, 169, 170, 172, 173, 174, 176, 177, 179, 183, 184, 186, 187, 189, 190, 192, 193, 194, 197, 198, 199, 200, 202, 205, 212, 215, 216, 218, 221, 222, 228, 229, 232, 233, 234, 235, 236, 242, 244, 245, 249, 250, 251, 252, 255, 256, 258, 263, 266, 268, 270], "If": [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 18, 19, 20, 22, 25, 32, 33, 36, 38, 41, 44, 45, 46, 48, 50, 51, 52, 54, 55, 57, 62, 64, 77, 84, 86, 88, 91, 93, 95, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 114, 115, 118, 121, 124, 132, 133, 134, 135, 136, 137, 140, 142, 146, 148, 149, 150, 152, 154, 155, 157, 164, 165, 166, 167, 170, 172, 173, 174, 175, 176, 177, 178, 179, 183, 187, 189, 190, 192, 193, 194, 199, 200, 212, 214, 215, 217, 220, 221, 228, 229, 230, 231, 232, 234, 235, 236, 242, 243, 248, 254, 255, 256, 257, 263, 264, 266, 267, 268, 271, 274], "fals": [1, 2, 3, 4, 6, 7, 12, 13, 16, 25, 39, 44, 57, 64, 65, 84, 85, 88, 102, 114, 115, 121, 124, 132, 133, 134, 136, 142, 152, 154, 157, 164, 165, 167, 172, 175, 176, 184, 187, 189, 197, 206, 215, 228, 230, 231, 232, 235, 245, 248, 249, 254, 256, 257, 264, 265, 267, 270, 271], "see": [1, 2, 3, 4, 6, 9, 11, 12, 13, 16, 18, 20, 22, 25, 33, 37, 38, 41, 45, 46, 48, 50, 51, 52, 53, 54, 57, 62, 77, 84, 85, 86, 88, 89, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 113, 115, 124, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 152, 153, 154, 156, 157, 160, 161, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 183, 184, 186, 187, 189, 190, 192, 193, 194, 198, 200, 201, 202, 205, 207, 212, 214, 215, 216, 221, 228, 229, 230, 231, 232, 233, 234, 235, 239, 240, 241, 243, 244, 246, 248, 252, 254, 256, 263, 265, 266, 267, 270, 271, 274, 275], "target_actor_network_param": 1, "attribut": [1, 6, 8, 13, 16, 32, 44, 48, 55, 84, 93, 105, 106, 111, 124, 137, 149, 152, 157, 160, 165, 169, 171, 189, 215, 234, 245, 250, 268], "still": [1, 6, 11, 12, 13, 14, 16, 17, 20, 22, 48, 54, 77, 86, 88, 96, 98, 102, 106, 113, 115, 133, 139, 140, 141, 146, 148, 149, 152, 153, 157, 164, 167, 177, 187, 189, 190, 199, 200, 202, 230, 231, 243, 249, 252, 256, 257, 263, 265, 267], "access": [1, 6, 12, 16, 20, 33, 34, 52, 70, 77, 86, 88, 91, 93, 96, 97, 98, 103, 106, 114, 115, 124, 133, 137, 144, 148, 160, 165, 167, 174, 176, 186, 189, 194, 199, 202, 212, 230, 234, 239, 255, 263, 264, 266, 267, 270], "just": [1, 2, 3, 6, 8, 11, 12, 16, 18, 19, 20, 32, 45, 46, 48, 51, 52, 53, 54, 55, 58, 69, 74, 75, 86, 88, 89, 91, 93, 96, 98, 99, 100, 102, 103, 105, 106, 114, 115, 121, 124, 132, 133, 136, 138, 139, 140, 146, 149, 154, 155, 160, 161, 164, 165, 167, 170, 171, 172, 173, 174, 175, 176, 177, 184, 186, 187, 189, 190, 192, 195, 200, 202, 216, 217, 218, 230, 231, 234, 235, 236, 248, 256, 257, 265], "detach": [1, 2, 6, 13, 32, 88, 96, 102, 135, 161, 166, 214, 252], "version": [1, 3, 6, 8, 11, 12, 14, 16, 89, 91, 93, 96, 97, 106, 107, 108, 110, 111, 132, 133, 137, 148, 149, 150, 152, 155, 157, 165, 167, 169, 170, 171, 172, 173, 181, 183, 184, 190, 192, 193, 194, 205, 206, 215, 216, 220, 230, 236, 240, 244, 254, 255, 256, 258, 263, 271], "q": [1, 44, 51, 128, 131, 136, 156, 178, 206], "base": [1, 6, 12, 13, 16, 19, 20, 22, 25, 34, 45, 51, 59, 77, 86, 88, 89, 93, 97, 98, 100, 108, 113, 115, 127, 128, 131, 132, 133, 134, 135, 138, 139, 141, 149, 156, 160, 167, 169, 170, 171, 174, 176, 179, 183, 184, 186, 189, 190, 192, 215, 228, 230, 231, 240, 244, 245, 252, 256, 257, 265, 267, 270, 271, 275], "empir": [1, 161, 173], "bootstrap": [1, 149], "td": 1, "0": [1, 2, 3, 4, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 49, 50, 51, 53, 54, 57, 65, 66, 70, 72, 74, 75, 76, 77, 84, 86, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 118, 121, 124, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 161, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 186, 187, 190, 192, 193, 194, 197, 198, 199, 200, 201, 202, 205, 206, 212, 214, 216, 217, 218, 220, 221, 222, 227, 228, 230, 231, 235, 236, 238, 241, 242, 243, 244, 245, 246, 248, 249, 251, 252, 254, 255, 256, 257, 263, 264, 266, 267, 268, 271, 272, 274], "low": [1, 3, 6, 16, 18, 25, 51, 54, 70, 84, 93, 100, 114, 126, 131, 139, 183, 189, 193, 206, 230, 270], "varianc": [1, 6, 95, 173], "bia": [1, 2, 6, 44, 48, 70, 100, 106, 114, 115, 132, 141, 142, 149, 155, 171, 173, 177, 178, 193, 228, 267, 268], "mean": [1, 2, 3, 6, 12, 14, 16, 37, 48, 51, 53, 54, 70, 77, 84, 88, 91, 93, 96, 98, 99, 100, 102, 105, 113, 114, 115, 124, 133, 136, 138, 139, 142, 146, 148, 157, 165, 167, 172, 173, 174, 176, 177, 179, 183, 184, 189, 190, 194, 197, 200, 214, 216, 220, 221, 230, 231, 236, 245, 248, 255, 263, 265, 268, 271, 274], "obtain": [1, 25, 32, 37, 51, 70, 86, 106, 114, 138, 139, 142, 148, 155, 166, 173, 174, 176, 183, 192, 221, 235, 244, 255], "reward": [1, 16, 149, 156, 173, 174, 175, 177], "noth": [1, 77, 91, 106, 143, 167, 177, 183], "els": [1, 4, 7, 11, 13, 22, 48, 51, 86, 88, 105, 107, 124, 133, 134, 148, 160, 169, 170, 175, 176, 177, 184, 187, 189, 202, 215, 230, 245, 249, 252, 257, 267], "mont": 1, "carlo": 1, "1": [1, 2, 3, 4, 6, 7, 8, 11, 13, 14, 16, 17, 18, 19, 20, 22, 25, 32, 33, 36, 42, 44, 51, 54, 55, 57, 65, 70, 77, 86, 88, 89, 91, 93, 96, 98, 99, 100, 102, 103, 105, 106, 107, 110, 111, 113, 114, 115, 118, 121, 124, 132, 133, 134, 136, 139, 140, 141, 142, 143, 144, 145, 146, 148, 150, 152, 153, 154, 155, 156, 157, 162, 164, 165, 166, 171, 172, 173, 174, 175, 176, 177, 178, 187, 190, 193, 199, 200, 201, 202, 206, 212, 214, 215, 220, 222, 229, 231, 239, 244, 245, 248, 249, 252, 254, 256, 257, 258, 263, 264, 265, 266, 267, 268, 271], "case": [1, 2, 3, 6, 7, 8, 11, 12, 13, 15, 16, 19, 20, 32, 39, 44, 51, 53, 62, 70, 77, 84, 88, 89, 95, 96, 98, 99, 100, 102, 103, 105, 106, 111, 114, 115, 127, 132, 133, 134, 136, 137, 138, 141, 142, 143, 148, 149, 150, 152, 154, 155, 157, 161, 164, 165, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 187, 189, 190, 192, 193, 200, 214, 215, 216, 221, 222, 228, 230, 234, 235, 236, 240, 242, 243, 245, 248, 252, 256, 263, 265, 266, 267, 268, 270, 271, 274], "whole": [1, 45, 48, 93, 106, 115, 131, 135, 148, 171, 173, 179, 190, 236, 264, 274], "sequenc": [1, 6, 14, 41, 50, 51, 69, 70, 93, 99, 101, 104, 105, 114, 115, 131, 139, 140, 149, 162, 165, 173, 178, 180, 186, 193, 197, 198, 202, 205, 215, 221, 231, 251, 252, 256, 268, 274, 275], "upcom": 1, "intermedi": [1, 78, 88, 93, 96, 124, 127, 144, 152, 154, 155, 156, 162, 164, 167, 180, 188, 193, 194, 216, 222], "lambda": [1, 8, 106, 141, 172, 175, 189, 215, 216, 230], "also": [1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 25, 32, 38, 41, 44, 48, 50, 51, 53, 54, 55, 56, 62, 69, 70, 77, 84, 86, 88, 89, 91, 93, 95, 96, 98, 99, 100, 101, 102, 103, 105, 106, 113, 114, 115, 124, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 146, 148, 149, 152, 154, 155, 160, 164, 165, 166, 167, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 183, 187, 189, 190, 192, 193, 194, 198, 199, 200, 201, 202, 205, 206, 212, 215, 216, 217, 220, 221, 228, 229, 230, 231, 233, 234, 235, 236, 239, 240, 241, 243, 244, 246, 248, 249, 252, 254, 258, 263, 264, 265, 266, 271, 274], "compromis": 1, "easi": [1, 2, 6, 25, 34, 45, 46, 53, 70, 88, 89, 96, 98, 100, 133, 134, 136, 138, 148, 155, 160, 161, 165, 169, 173, 183, 186, 189, 190, 216, 230, 245, 257, 274], "valueestim": 1, "enum": 1, "pointer": [1, 6, 8, 9, 176], "defin": [1, 2, 7, 14, 16, 17, 18, 19, 20, 22, 32, 37, 38, 39, 42, 44, 46, 54, 63, 66, 67, 69, 70, 71, 77, 86, 88, 93, 95, 97, 99, 100, 105, 106, 108, 111, 115, 125, 132, 133, 137, 139, 141, 144, 148, 149, 150, 153, 156, 161, 164, 166, 167, 174, 175, 176, 178, 181, 183, 184, 186, 187, 189, 193, 194, 197, 199, 200, 219, 220, 221, 227, 228, 236, 238, 241, 243, 244, 245, 249, 250, 251, 254, 263, 270, 271], "default": [1, 3, 4, 6, 11, 12, 13, 17, 20, 25, 32, 37, 41, 44, 46, 51, 53, 54, 57, 64, 65, 84, 91, 93, 95, 96, 100, 102, 107, 111, 114, 121, 124, 131, 132, 133, 134, 135, 136, 139, 148, 149, 150, 152, 154, 157, 160, 164, 167, 170, 172, 175, 176, 177, 183, 184, 187, 189, 190, 193, 199, 200, 212, 216, 219, 220, 221, 227, 229, 230, 231, 234, 236, 239, 240, 243, 245, 248, 249, 251, 252, 254, 257, 266, 267, 270, 271], "here": [1, 2, 3, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 25, 34, 37, 38, 41, 42, 45, 48, 50, 52, 53, 54, 55, 57, 71, 77, 83, 84, 86, 88, 89, 91, 93, 96, 97, 98, 100, 102, 103, 105, 106, 113, 114, 115, 118, 121, 124, 132, 133, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 161, 164, 165, 166, 167, 171, 173, 174, 176, 177, 178, 179, 183, 184, 186, 187, 189, 190, 192, 193, 198, 200, 201, 215, 216, 217, 220, 221, 231, 235, 236, 240, 242, 245, 248, 258, 263, 265, 266, 267, 268, 270], "take": [1, 2, 3, 6, 7, 11, 13, 14, 16, 17, 18, 19, 20, 33, 34, 41, 44, 45, 48, 50, 51, 52, 53, 54, 70, 77, 84, 88, 89, 91, 93, 95, 96, 97, 98, 100, 102, 103, 105, 106, 111, 114, 115, 121, 135, 136, 137, 138, 139, 140, 141, 143, 146, 148, 153, 155, 156, 164, 166, 167, 172, 173, 174, 175, 176, 177, 179, 183, 184, 187, 189, 190, 192, 193, 199, 200, 206, 216, 217, 218, 221, 228, 230, 231, 232, 233, 234, 235, 236, 240, 245, 248, 252, 256, 258, 263, 266, 268, 270, 274], "simplest": [1, 6, 32, 48, 88, 96, 100, 149, 173, 179, 231], "show": [1, 12, 13, 18, 20, 22, 25, 45, 53, 54, 62, 77, 84, 85, 86, 88, 89, 91, 93, 96, 97, 106, 111, 113, 132, 135, 138, 139, 140, 142, 143, 146, 149, 154, 157, 167, 170, 172, 174, 175, 177, 183, 184, 187, 189, 190, 194, 198, 199, 200, 202, 206, 212, 214, 215, 216, 221, 229, 230, 231, 235, 236, 244, 245, 248, 249, 263], "chang": [1, 2, 6, 7, 8, 12, 13, 14, 16, 25, 32, 41, 44, 50, 52, 53, 54, 55, 57, 84, 85, 86, 88, 89, 91, 92, 97, 98, 99, 101, 102, 103, 108, 115, 124, 125, 131, 132, 135, 136, 138, 139, 141, 144, 145, 148, 149, 152, 154, 155, 156, 160, 164, 165, 167, 170, 171, 172, 175, 183, 187, 189, 190, 193, 194, 198, 199, 200, 205, 214, 215, 216, 219, 227, 228, 229, 231, 232, 235, 243, 244, 245, 246, 248, 251, 256, 257, 265, 267, 268, 270, 271], "instruct": [1, 6, 25, 36, 89, 92, 95, 97, 139, 140, 149, 152, 160, 169, 171, 173, 175, 177, 179, 212, 214, 231, 248, 250], "queri": [1, 8, 16, 51, 91, 96, 115, 135, 176, 178, 192, 193, 252, 268], "correspond": [1, 2, 3, 6, 11, 12, 14, 16, 17, 33, 34, 38, 44, 51, 57, 84, 88, 89, 93, 95, 100, 103, 113, 115, 132, 137, 138, 141, 154, 164, 169, 171, 173, 176, 179, 181, 183, 184, 187, 189, 190, 192, 193, 200, 214, 220, 221, 231, 248, 250, 255, 266, 271], "make_value_estim": 1, "central": [1, 11, 77, 88, 96, 97, 103, 105, 144, 234], "quit": [1, 6, 20, 51, 77, 137, 148, 164, 173, 177, 189, 190, 199, 202, 205, 216, 230, 263], "weight": [1, 2, 6, 14, 15, 16, 20, 25, 32, 33, 44, 45, 51, 64, 65, 68, 69, 70, 71, 72, 74, 75, 77, 88, 91, 93, 96, 97, 98, 100, 101, 103, 106, 115, 121, 132, 139, 141, 142, 144, 149, 150, 154, 155, 157, 164, 165, 166, 171, 173, 174, 177, 179, 183, 186, 190, 193, 199, 214, 218, 228, 233, 234, 245, 251, 256, 267, 270], "when": [1, 3, 6, 8, 11, 12, 13, 14, 16, 17, 18, 20, 22, 32, 34, 37, 39, 41, 44, 45, 46, 48, 50, 51, 52, 54, 55, 57, 62, 77, 84, 86, 88, 89, 91, 93, 95, 96, 97, 98, 99, 102, 105, 106, 107, 110, 111, 113, 114, 115, 124, 130, 131, 132, 133, 134, 135, 137, 138, 140, 141, 142, 145, 146, 148, 149, 152, 153, 154, 156, 157, 160, 161, 164, 165, 167, 170, 171, 173, 174, 175, 177, 178, 179, 183, 187, 189, 190, 192, 193, 194, 198, 200, 201, 202, 206, 212, 215, 216, 218, 220, 221, 222, 228, 230, 231, 232, 234, 235, 239, 240, 242, 243, 245, 248, 249, 250, 254, 256, 263, 266, 267, 268, 270, 271], "must": [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 18, 33, 34, 51, 54, 69, 77, 88, 89, 96, 99, 105, 110, 111, 114, 115, 133, 146, 148, 149, 150, 152, 167, 173, 176, 183, 187, 189, 190, 201, 220, 222, 228, 231, 242, 254, 255, 263, 264, 266, 268, 274], "sure": [1, 6, 8, 11, 12, 13, 16, 39, 53, 59, 86, 91, 95, 98, 99, 105, 111, 114, 115, 124, 132, 136, 141, 146, 148, 149, 153, 167, 173, 175, 190, 194, 214, 215, 220, 229, 231, 239, 240, 242, 264, 266, 274], "out": [1, 2, 3, 6, 7, 8, 11, 12, 13, 16, 17, 18, 20, 25, 32, 36, 37, 41, 42, 44, 45, 46, 50, 51, 53, 54, 60, 61, 62, 77, 79, 80, 81, 82, 83, 85, 86, 88, 89, 91, 93, 96, 98, 99, 101, 103, 106, 110, 113, 124, 130, 131, 132, 134, 135, 136, 137, 138, 139, 143, 144, 146, 148, 149, 150, 152, 153, 154, 155, 164, 167, 170, 171, 172, 173, 175, 176, 177, 179, 183, 184, 189, 190, 193, 194, 195, 196, 202, 206, 208, 209, 210, 211, 213, 214, 219, 221, 227, 228, 231, 235, 240, 243, 244, 245, 248, 250, 251, 252, 254, 256, 260, 261, 263, 264, 265, 266, 268, 269, 270, 274, 275], "graph": [1, 12, 16, 18, 48, 51, 64, 67, 70, 74, 75, 84, 88, 99, 101, 107, 110, 111, 114, 124, 125, 131, 137, 139, 143, 153, 154, 155, 157, 176, 177, 183, 184, 186, 193, 194, 206, 218, 229, 235, 236, 239, 240, 244, 246, 256, 257, 258], "otherwis": [1, 3, 11, 12, 33, 38, 51, 57, 64, 77, 84, 96, 106, 114, 115, 121, 124, 132, 137, 143, 146, 149, 152, 154, 155, 157, 164, 173, 174, 176, 187, 190, 194, 230, 243, 248, 274], "mix": [1, 11, 17, 62, 113, 157, 219, 227, 250, 251, 270], "For": [1, 2, 3, 4, 6, 7, 8, 9, 12, 13, 14, 16, 17, 18, 19, 20, 22, 32, 37, 38, 41, 42, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 57, 64, 65, 70, 77, 84, 85, 86, 89, 93, 95, 96, 97, 98, 99, 100, 101, 103, 105, 106, 108, 114, 115, 118, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 146, 148, 149, 150, 153, 154, 156, 157, 160, 165, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 186, 187, 189, 190, 192, 193, 194, 197, 198, 199, 200, 201, 202, 205, 206, 212, 214, 215, 216, 218, 220, 222, 228, 229, 230, 231, 232, 233, 234, 236, 241, 242, 243, 246, 248, 249, 252, 254, 255, 256, 257, 263, 264, 265, 266, 268, 270, 271], "hold_out_param": 1, "now": [1, 2, 6, 7, 8, 11, 12, 13, 14, 17, 18, 19, 20, 22, 25, 37, 38, 44, 45, 46, 48, 51, 52, 53, 54, 57, 77, 86, 87, 88, 89, 95, 96, 98, 100, 102, 105, 106, 108, 111, 114, 121, 124, 131, 133, 136, 137, 138, 139, 141, 142, 143, 146, 148, 149, 153, 154, 155, 156, 160, 161, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 181, 183, 184, 186, 187, 189, 190, 192, 193, 194, 198, 199, 200, 217, 218, 228, 229, 230, 233, 235, 240, 252, 256, 258, 263, 264, 268, 270, 271, 274], "reli": [1, 3, 6, 11, 16, 39, 51, 88, 105, 108, 137, 156, 160, 164, 167, 171, 173, 189, 231, 258, 265, 267], "miss": [1, 53, 115, 141, 146, 149, 183, 187, 215, 230, 232, 248, 252, 264], "glue": [1, 177], "cost": [1, 16, 51, 98, 100, 113, 132, 133, 136, 137, 141, 161, 183, 189, 199, 217, 231, 243, 244], "deliv": [1, 242], "most": [1, 2, 8, 13, 16, 20, 32, 36, 44, 51, 53, 54, 77, 86, 88, 89, 91, 93, 96, 100, 102, 103, 106, 113, 114, 115, 121, 127, 132, 136, 137, 138, 140, 142, 143, 148, 153, 154, 156, 157, 160, 164, 167, 172, 173, 175, 176, 177, 178, 179, 183, 187, 189, 190, 193, 199, 206, 214, 221, 228, 230, 231, 236, 239, 243, 245, 248, 265, 266, 267], "first": [1, 2, 3, 4, 6, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 25, 36, 39, 42, 45, 46, 51, 52, 53, 54, 55, 57, 62, 70, 71, 77, 84, 85, 86, 88, 91, 93, 96, 98, 100, 102, 103, 105, 106, 111, 113, 114, 115, 124, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 149, 150, 152, 153, 154, 155, 160, 161, 164, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 183, 186, 187, 189, 190, 192, 193, 194, 199, 200, 202, 206, 215, 216, 218, 220, 221, 228, 231, 235, 236, 240, 242, 243, 244, 245, 248, 252, 254, 256, 258, 263, 265, 266, 268, 274], "taken": [1, 6, 8, 11, 16, 84, 85, 93, 149, 164, 173, 189, 222, 244, 256, 270], "care": [1, 3, 16, 77, 86, 88, 98, 143, 148, 167, 173, 177, 193, 199, 216, 217, 230, 263], "condit": [1, 16, 51, 57, 96, 103, 107, 132, 148, 160, 165, 167, 187, 189, 271], "remaind": [1, 91, 152], "cheetah": 1, "goal": [1, 6, 16, 17, 45, 51, 54, 62, 77, 98, 137, 138, 148, 149, 153, 173, 175, 177, 254, 263], "half": [1, 11, 20, 121, 169, 215, 249], "fast": [1, 6, 20, 22, 51, 88, 106, 132, 136, 146, 161, 167, 173, 178, 190, 193, 230, 254, 256, 275], "dm_control": 1, "gym": [1, 16, 128, 131, 149, 156, 173, 174, 175, 177, 193], "env": [1, 22, 135, 145, 148, 149, 173, 174, 175, 177, 216, 230, 245, 252, 254], "gymenv": [1, 173], "halfcheetah": 1, "v4": 1, "dmcontrolenv": 1, "By": [1, 11, 20, 32, 41, 44, 64, 65, 84, 86, 88, 96, 102, 105, 106, 107, 114, 124, 133, 136, 138, 148, 150, 152, 153, 154, 164, 171, 174, 183, 186, 189, 194, 199, 200, 205, 212, 218, 221, 231, 236, 239, 240, 242, 245, 248, 254, 257, 264, 266, 268], "disabl": [1, 7, 13, 17, 124, 132, 133, 141, 156, 160, 161, 172, 176, 178, 183, 187, 200, 215, 239, 248, 256, 263, 264, 265, 266, 271], "render": [1, 6, 84, 89, 95, 156, 167, 173], "easier": [1, 20, 22, 25, 52, 53, 99, 106, 132, 138, 154, 164, 175, 179, 184, 200, 216, 230, 242, 256, 263, 266, 274], "than": [1, 3, 6, 11, 12, 13, 14, 15, 16, 20, 45, 50, 51, 52, 54, 55, 62, 69, 71, 77, 84, 88, 91, 93, 96, 98, 99, 100, 102, 105, 106, 108, 114, 115, 121, 131, 132, 133, 135, 138, 140, 142, 145, 146, 148, 150, 154, 155, 156, 161, 164, 165, 166, 167, 172, 173, 174, 175, 183, 184, 186, 187, 190, 192, 193, 216, 220, 231, 232, 239, 245, 248, 250, 254, 256, 263, 268], "imag": [1, 33, 34, 36, 42, 44, 48, 51, 53, 54, 59, 77, 84, 86, 89, 91, 93, 96, 97, 98, 106, 125, 126, 128, 129, 131, 136, 141, 150, 156, 157, 164, 166, 174, 181, 183, 184, 190, 192, 202, 214, 218, 229, 232, 233, 250, 256, 268, 270], "focu": [1, 3, 6, 12, 22, 89, 98, 100, 124, 133, 136, 137, 173, 175, 177, 179, 189, 206, 256, 264], "pass": [1, 2, 3, 6, 8, 9, 11, 12, 14, 15, 16, 17, 18, 19, 32, 33, 34, 37, 38, 39, 44, 45, 51, 53, 54, 55, 58, 64, 65, 67, 69, 74, 75, 84, 86, 88, 89, 91, 93, 96, 97, 98, 100, 102, 103, 106, 107, 114, 115, 124, 125, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 146, 148, 149, 150, 152, 153, 156, 157, 160, 161, 165, 166, 169, 171, 173, 174, 175, 176, 177, 179, 180, 183, 187, 189, 190, 193, 194, 198, 200, 201, 205, 215, 216, 220, 221, 222, 228, 230, 231, 234, 235, 249, 251, 252, 256, 263, 266], "pixel": [1, 33, 42, 45, 77, 93, 96, 98, 149, 157, 181, 214, 245], "from_pixel": 1, "true": [1, 2, 3, 4, 6, 7, 8, 12, 13, 14, 17, 18, 25, 32, 34, 37, 39, 42, 44, 48, 51, 53, 64, 65, 84, 86, 88, 91, 96, 102, 108, 110, 113, 114, 115, 121, 124, 132, 133, 134, 135, 138, 141, 142, 143, 146, 148, 149, 152, 154, 157, 160, 165, 172, 175, 176, 177, 178, 183, 184, 187, 189, 192, 193, 199, 200, 206, 214, 221, 228, 234, 236, 242, 248, 249, 252, 254, 256, 257, 264, 265, 266, 267, 270, 271], "pixels_onli": 1, "make_env": 1, "helper": [1, 11, 19, 20, 48, 53, 57, 89, 95, 97, 98, 99, 107, 132, 133, 138, 139, 140, 148, 149, 174, 175, 176, 177, 179, 181, 184, 192, 197, 198, 221, 245], "either": [1, 2, 3, 6, 11, 18, 45, 51, 75, 86, 97, 98, 106, 108, 115, 121, 133, 136, 146, 149, 157, 171, 174, 175, 176, 183, 187, 189, 193, 212, 215, 221, 228, 231, 242, 266, 268, 271], "backend": [1, 6, 7, 9, 13, 16, 22, 25, 55, 57, 125, 126, 127, 130, 131, 138, 141, 145, 146, 149, 157, 172, 173, 180, 183, 187, 189, 190, 212, 215, 241, 245, 251, 252, 258, 267, 271], "consid": [1, 3, 6, 12, 13, 16, 32, 39, 51, 70, 77, 84, 114, 124, 132, 134, 143, 146, 148, 152, 157, 161, 164, 165, 167, 170, 175, 179, 183, 187, 189, 190, 192, 199, 220, 221, 222, 240, 254, 263, 264, 265, 267, 274], "abov": [1, 3, 6, 8, 9, 11, 12, 13, 16, 17, 19, 44, 45, 51, 53, 54, 67, 69, 70, 77, 84, 88, 89, 91, 93, 95, 96, 98, 99, 100, 102, 103, 105, 106, 114, 124, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 161, 164, 165, 166, 167, 169, 171, 173, 175, 176, 177, 178, 183, 187, 189, 190, 192, 199, 200, 201, 202, 212, 214, 216, 220, 221, 228, 229, 235, 239, 245, 248, 252, 254, 256, 258, 263, 264, 265, 266, 267, 271], "dm": 1, "want": [1, 2, 3, 6, 7, 8, 9, 11, 12, 14, 16, 17, 19, 25, 32, 33, 34, 37, 39, 44, 45, 48, 51, 53, 54, 62, 64, 65, 69, 77, 86, 88, 89, 91, 93, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 114, 115, 121, 135, 136, 137, 138, 146, 148, 149, 150, 152, 153, 155, 157, 161, 165, 167, 169, 171, 172, 173, 176, 178, 179, 181, 186, 187, 189, 190, 192, 193, 194, 200, 201, 212, 215, 216, 220, 228, 230, 232, 242, 244, 263, 265, 270, 274, 275], "modifi": [1, 6, 12, 13, 16, 38, 42, 44, 45, 54, 77, 98, 99, 136, 139, 148, 153, 154, 160, 170, 173, 175, 179, 189, 193, 194, 228, 243, 245, 252], "represent": [1, 12, 16, 44, 54, 89, 93, 95, 98, 100, 103, 105, 107, 108, 110, 125, 138, 153, 156, 179, 183, 184, 186, 189, 190, 193, 216, 228, 230, 244, 268], "more": [1, 2, 3, 6, 8, 9, 11, 12, 13, 16, 17, 18, 20, 34, 36, 37, 38, 41, 44, 45, 46, 50, 51, 52, 53, 54, 55, 57, 58, 62, 69, 77, 89, 91, 93, 95, 97, 98, 99, 100, 102, 103, 105, 106, 108, 110, 113, 114, 115, 121, 124, 126, 127, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 152, 153, 156, 160, 161, 164, 165, 167, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 184, 186, 187, 189, 190, 192, 193, 194, 200, 201, 202, 206, 212, 214, 220, 228, 230, 231, 235, 236, 240, 242, 243, 244, 245, 246, 248, 249, 251, 254, 256, 263, 264, 265, 266, 268, 270, 274, 275], "friendli": [1, 17, 195, 215], "append": [1, 7, 11, 16, 19, 22, 51, 96, 113, 115, 133, 148, 171, 173, 175, 176, 177, 179, 184, 248], "special": [1, 8, 12, 22, 41, 50, 91, 93, 100, 102, 105, 106, 111, 128, 137, 149, 157, 170, 171, 183, 200, 228, 231, 245, 268, 270], "torchr": 1, "transformedenv": [1, 16, 173], "common": [1, 6, 11, 12, 16, 18, 20, 37, 38, 45, 51, 53, 62, 84, 91, 96, 98, 100, 102, 105, 107, 115, 121, 125, 131, 136, 146, 153, 156, 160, 165, 166, 167, 171, 173, 178, 189, 190, 192, 216, 217, 230, 231, 232, 236, 241, 250, 265, 268], "rescal": [1, 53, 192, 256], "heurist": [1, 84, 242, 254], "multipli": [1, 3, 14, 50, 51, 88, 89, 91, 96, 106, 179, 186, 230, 241], "5": [1, 2, 6, 13, 20, 25, 36, 42, 46, 49, 51, 54, 67, 84, 86, 91, 93, 95, 97, 100, 103, 104, 105, 110, 113, 114, 115, 118, 132, 133, 142, 146, 148, 152, 154, 157, 166, 175, 176, 177, 189, 190, 192, 193, 197, 202, 212, 236, 254, 256, 258, 271, 274], "interfac": [1, 3, 6, 8, 16, 17, 51, 96, 106, 138, 145, 148, 160, 173, 190, 212, 245, 257], "between": [1, 6, 8, 11, 13, 14, 16, 19, 20, 33, 41, 48, 50, 51, 67, 75, 77, 84, 85, 86, 88, 91, 93, 96, 98, 99, 100, 103, 105, 106, 114, 124, 129, 131, 132, 134, 136, 138, 148, 149, 153, 157, 160, 161, 167, 169, 171, 174, 176, 177, 178, 179, 184, 187, 189, 190, 192, 193, 194, 199, 201, 214, 215, 216, 217, 221, 231, 236, 245, 246, 249, 252, 254, 255, 256, 257, 263, 264, 266, 270, 275], "simul": [1, 20, 22, 93, 141, 173, 202, 206], "work": [1, 2, 3, 4, 6, 8, 9, 14, 16, 18, 20, 22, 36, 37, 44, 51, 52, 53, 54, 57, 58, 62, 77, 86, 88, 89, 91, 93, 96, 97, 98, 99, 101, 105, 106, 107, 110, 124, 131, 137, 139, 140, 142, 143, 144, 146, 148, 149, 150, 152, 153, 155, 160, 164, 165, 166, 167, 170, 171, 172, 173, 175, 177, 178, 179, 183, 186, 189, 190, 192, 193, 194, 199, 202, 206, 215, 216, 221, 228, 230, 231, 236, 239, 242, 245, 254, 256, 263, 264, 265, 266, 274], "doubl": [1, 2, 3, 4, 6, 37, 88, 95, 106, 113, 128, 130, 131, 142, 149, 152, 156, 166, 173, 184, 215], "precis": [1, 11, 12, 17, 62, 137, 142, 143, 157, 167, 173, 184, 206, 219, 227, 236, 250, 251, 270], "number": [1, 3, 6, 13, 14, 17, 22, 34, 37, 42, 45, 53, 54, 55, 57, 67, 84, 86, 88, 91, 93, 98, 100, 102, 105, 106, 113, 114, 115, 132, 133, 135, 136, 137, 138, 139, 145, 146, 148, 149, 150, 152, 154, 155, 160, 161, 165, 167, 169, 171, 172, 173, 174, 175, 176, 177, 183, 187, 190, 192, 194, 197, 200, 216, 218, 221, 230, 231, 235, 240, 246, 248, 254, 256, 266, 267, 268, 274], "presum": 1, "singl": [1, 2, 3, 6, 8, 11, 12, 13, 17, 20, 22, 38, 41, 44, 48, 53, 55, 56, 57, 58, 62, 86, 88, 89, 93, 95, 96, 97, 98, 100, 106, 131, 132, 133, 134, 136, 139, 141, 142, 143, 144, 145, 146, 148, 149, 155, 156, 160, 161, 166, 167, 169, 173, 174, 175, 176, 177, 179, 183, 187, 189, 190, 193, 200, 216, 230, 231, 235, 245, 248, 252, 254, 256, 268, 274], "ones": [1, 2, 3, 6, 7, 13, 16, 18, 93, 96, 98, 124, 148, 150, 153, 165, 166, 167, 169, 170, 173, 174, 183, 189, 193, 230, 245, 264], "goe": [1, 53, 96, 99, 100, 131, 135, 143, 155, 170, 173, 176, 190], "wai": [1, 2, 3, 6, 8, 11, 12, 13, 14, 16, 32, 36, 38, 41, 44, 45, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 69, 74, 77, 84, 86, 88, 89, 91, 92, 96, 99, 100, 102, 105, 106, 108, 110, 111, 115, 124, 127, 132, 136, 137, 138, 139, 143, 145, 146, 152, 153, 154, 155, 156, 157, 161, 164, 165, 169, 171, 173, 175, 176, 178, 181, 184, 186, 189, 190, 192, 193, 200, 214, 217, 221, 222, 228, 231, 242, 252, 256, 264, 265, 266, 268, 275], "repres": [1, 3, 12, 14, 15, 22, 33, 44, 51, 53, 54, 62, 64, 77, 84, 88, 89, 91, 93, 97, 98, 105, 107, 108, 110, 113, 114, 132, 133, 134, 136, 138, 139, 141, 149, 152, 153, 156, 157, 173, 174, 177, 179, 189, 190, 192, 193, 216, 218, 228, 230, 235, 254, 263, 268], "doubletofloat": [1, 173], "in_kei": [1, 16, 149, 173], "list": [1, 3, 4, 6, 7, 11, 13, 14, 16, 17, 19, 25, 34, 38, 41, 45, 48, 50, 51, 52, 54, 70, 77, 86, 89, 93, 96, 102, 103, 105, 107, 108, 110, 111, 114, 137, 140, 148, 157, 160, 165, 166, 167, 172, 175, 176, 177, 179, 183, 184, 187, 189, 190, 202, 205, 214, 216, 220, 221, 239, 245, 248, 257, 265, 268, 270], "refer": [1, 3, 4, 6, 8, 9, 11, 15, 17, 20, 25, 32, 38, 62, 77, 84, 88, 89, 96, 98, 100, 102, 103, 105, 107, 108, 110, 111, 113, 115, 132, 133, 134, 136, 137, 140, 141, 145, 146, 148, 154, 160, 164, 167, 171, 173, 175, 176, 177, 183, 189, 190, 192, 193, 206, 214, 215, 216, 218, 220, 221, 228, 231, 240, 242, 245, 248, 254, 258, 263, 266, 270, 271], "float": [1, 3, 4, 6, 11, 13, 42, 91, 96, 102, 105, 113, 132, 133, 136, 138, 148, 157, 170, 171, 175, 177, 189, 190, 192, 206, 215, 221, 228, 254, 256, 257, 265, 266, 267], "while": [1, 2, 6, 7, 13, 14, 15, 16, 20, 34, 37, 51, 54, 57, 84, 89, 96, 107, 108, 113, 125, 127, 131, 133, 134, 135, 137, 138, 141, 144, 146, 148, 149, 154, 155, 157, 160, 164, 167, 171, 172, 173, 176, 177, 178, 179, 181, 187, 189, 190, 199, 206, 215, 216, 220, 221, 228, 235, 236, 239, 242, 245, 254, 256, 263, 264, 265, 266, 267, 268, 270], "in_keys_inv": [1, 16], "befor": [1, 3, 6, 11, 12, 13, 14, 16, 19, 32, 37, 39, 44, 45, 46, 48, 51, 53, 54, 57, 62, 77, 88, 89, 93, 98, 99, 100, 102, 103, 105, 106, 108, 110, 111, 113, 114, 115, 121, 124, 125, 131, 133, 134, 136, 138, 139, 141, 146, 148, 149, 152, 154, 156, 162, 164, 165, 167, 169, 171, 172, 173, 175, 176, 177, 179, 183, 184, 186, 187, 189, 190, 192, 194, 199, 202, 215, 216, 218, 220, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 242, 243, 248, 249, 254, 263, 264, 266, 271], "concaten": [1, 16, 41, 50, 51, 102, 103, 136, 140, 174], "cattensor": 1, "leav": [1, 11, 18, 20, 32, 44, 51, 53, 55, 88, 124, 138, 164, 165, 172, 228], "constant": [1, 2, 6, 41, 50, 84, 86, 88, 96, 100, 135, 149, 165, 174, 184, 187, 189, 231, 267], "significantli": [1, 103, 127, 136, 142, 167, 187, 222, 235, 240, 248, 256, 270], "speed": [1, 6, 12, 16, 32, 34, 37, 50, 51, 88, 91, 92, 98, 106, 125, 126, 127, 131, 133, 134, 136, 139, 144, 149, 150, 154, 157, 167, 172, 173, 175, 178, 187, 199, 216, 229, 231, 235, 244, 245, 248, 250, 256, 257, 270, 275], "throughput": [1, 133, 167, 231, 248], "choos": [1, 11, 12, 14, 17, 51, 54, 57, 62, 67, 86, 89, 100, 114, 115, 135, 136, 140, 146, 148, 156, 160, 165, 172, 173, 174, 179, 183, 190, 192, 212, 214, 215, 221, 236, 252, 256, 258], "whether": [1, 6, 11, 12, 13, 16, 51, 54, 88, 89, 91, 95, 96, 98, 106, 108, 115, 124, 143, 148, 153, 156, 164, 167, 173, 175, 183, 184, 189, 216, 221, 231, 232, 266], "individu": [1, 6, 14, 33, 51, 88, 89, 93, 114, 134, 136, 138, 142, 166, 167, 171, 176, 179, 184, 187, 189, 190, 193, 212, 215, 216, 231, 240], "approach": [1, 3, 6, 8, 9, 39, 58, 89, 106, 108, 110, 115, 135, 139, 144, 165, 166, 167, 173, 174, 176, 179, 187, 189, 192, 216, 228, 236, 254, 263, 266, 267, 270, 274], "parallelenv": [1, 173], "num_work": [1, 25, 45, 53, 86, 132, 133, 183, 231], "4": [1, 2, 3, 6, 11, 14, 18, 19, 21, 25, 36, 42, 46, 53, 55, 56, 57, 64, 65, 67, 72, 77, 86, 89, 91, 93, 95, 96, 97, 99, 100, 102, 103, 105, 106, 112, 114, 129, 131, 132, 133, 135, 141, 142, 144, 145, 148, 149, 154, 156, 157, 164, 169, 171, 174, 175, 176, 177, 187, 189, 192, 193, 199, 202, 229, 236, 239, 240, 245, 248, 251, 252, 254, 256, 258, 266], "leverag": [1, 6, 51, 77, 98, 108, 111, 115, 129, 131, 133, 136, 146, 148, 155, 160, 192, 201, 202, 205, 206, 231, 232, 244, 248, 257, 267, 271, 275], "vector": [1, 2, 6, 7, 8, 14, 16, 32, 51, 54, 84, 88, 89, 93, 95, 96, 98, 100, 102, 103, 105, 106, 139, 140, 141, 149, 152, 166, 170, 179, 190, 231, 242, 257, 267, 274], "capabl": [1, 13, 17, 20, 51, 77, 130, 136, 157, 167, 178, 183, 186, 197, 198, 205, 215, 231], "pytorch": [1, 2, 3, 4, 7, 11, 13, 16, 18, 20, 21, 22, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 45, 46, 50, 51, 53, 54, 55, 57, 58, 60, 61, 63, 66, 68, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 88, 89, 98, 99, 104, 106, 107, 109, 110, 115, 116, 118, 121, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 164, 166, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 194, 195, 197, 198, 199, 200, 201, 202, 205, 208, 210, 211, 214, 215, 216, 217, 220, 223, 224, 225, 226, 227, 228, 230, 235, 236, 239, 240, 241, 242, 244, 245, 246, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 271, 273, 274, 275], "adopt": [1, 25, 62, 164, 170, 176, 206, 271], "frame_skip": [1, 173], "frame": [1, 6, 149, 156, 172, 173, 183, 245, 254], "count": [1, 6, 8, 13, 37, 45, 51, 84, 100, 148, 149, 173, 177, 179, 183, 201], "frames_per_batch": [1, 173], "total_fram": [1, 173], "adjust": [1, 4, 16, 32, 37, 38, 44, 54, 77, 88, 91, 97, 136, 138, 139, 160, 161, 175, 231], "total": [1, 13, 14, 15, 16, 18, 19, 20, 21, 32, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 57, 66, 70, 72, 74, 75, 76, 77, 85, 86, 88, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 116, 118, 121, 124, 133, 135, 137, 138, 139, 140, 142, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 161, 164, 165, 166, 167, 171, 172, 173, 174, 176, 178, 179, 180, 181, 183, 187, 189, 190, 192, 193, 194, 198, 205, 216, 217, 220, 221, 222, 227, 228, 230, 235, 236, 238, 241, 242, 243, 244, 246, 248, 251, 256, 263, 264, 265, 266, 268, 272, 274], "rais": [1, 11, 13, 18, 77, 107, 135, 136, 137, 154, 157, 160, 173, 187, 189, 199, 231, 243, 245], "skip": [1, 12, 16, 20, 44, 99, 115, 143, 152, 156, 175, 177, 183, 187, 189, 193, 216, 221, 234, 248, 271], "unchang": [1, 11, 85, 88], "seem": [1, 45, 54, 137, 139, 149, 167, 169, 190, 216], "like": [1, 3, 6, 8, 9, 11, 12, 13, 14, 16, 18, 19, 20, 22, 33, 34, 37, 38, 41, 44, 45, 46, 48, 50, 51, 53, 54, 55, 57, 62, 69, 70, 84, 86, 88, 89, 91, 93, 96, 98, 99, 100, 102, 103, 105, 106, 107, 108, 111, 113, 114, 118, 121, 124, 125, 127, 128, 130, 131, 132, 136, 137, 138, 140, 143, 145, 146, 148, 149, 150, 152, 153, 154, 155, 157, 160, 161, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 178, 179, 183, 184, 186, 189, 190, 192, 193, 194, 200, 201, 202, 212, 214, 215, 216, 217, 218, 221, 230, 231, 235, 239, 240, 241, 242, 243, 245, 248, 257, 264, 265, 266, 270, 271, 274, 275], "cheat": [1, 96, 179], "compar": [1, 4, 12, 17, 20, 37, 45, 85, 89, 96, 98, 103, 106, 111, 121, 132, 134, 135, 136, 138, 148, 153, 154, 155, 157, 161, 164, 166, 167, 171, 173, 174, 175, 177, 179, 183, 187, 189, 193, 194, 199, 205, 206, 220, 229, 230, 231, 243, 244, 248, 250, 252, 255, 256, 257, 263, 275], "dataset": [1, 6, 20, 25, 32, 33, 35, 36, 37, 38, 39, 41, 42, 44, 45, 48, 51, 54, 55, 57, 59, 77, 89, 93, 98, 100, 116, 121, 131, 132, 133, 138, 139, 140, 144, 148, 150, 160, 166, 167, 172, 176, 178, 179, 181, 183, 184, 190, 194, 207, 218, 231, 245, 250, 251, 270], "10m": 1, "element": [1, 6, 7, 14, 20, 38, 41, 50, 51, 88, 89, 93, 96, 100, 102, 103, 105, 124, 137, 148, 154, 161, 165, 173, 189, 192, 216, 218, 231, 264, 265, 266, 268], "2": [1, 2, 3, 4, 6, 7, 11, 13, 14, 16, 17, 18, 19, 21, 22, 25, 33, 36, 42, 44, 51, 53, 54, 55, 57, 64, 65, 66, 69, 70, 71, 76, 77, 86, 88, 89, 91, 96, 98, 99, 100, 102, 103, 105, 107, 110, 111, 114, 115, 118, 121, 124, 131, 132, 133, 134, 136, 138, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 154, 155, 157, 162, 164, 166, 171, 172, 173, 174, 175, 176, 177, 178, 187, 189, 190, 193, 197, 198, 201, 202, 206, 214, 215, 217, 220, 228, 231, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 251, 252, 254, 255, 256, 257, 258, 263, 268, 271], "anoth": [1, 3, 11, 13, 16, 32, 41, 44, 50, 51, 54, 64, 77, 91, 93, 96, 97, 99, 103, 106, 113, 114, 115, 124, 131, 140, 141, 142, 143, 145, 148, 149, 152, 165, 167, 171, 173, 175, 176, 177, 178, 179, 186, 187, 189, 190, 192, 194, 214, 216, 221, 231, 232, 248, 256], "actual": [1, 6, 8, 11, 13, 15, 16, 17, 32, 39, 51, 53, 54, 77, 91, 98, 99, 102, 105, 111, 124, 130, 131, 134, 137, 138, 139, 142, 146, 148, 153, 164, 167, 173, 179, 183, 184, 187, 189, 190, 206, 216, 235, 241, 255, 256, 263, 265, 274], "ratio": [1, 84, 98, 154, 167, 173, 183, 192], "interact": [1, 6, 16, 51, 89, 95, 96, 131, 138, 141, 143, 156, 173, 176, 184, 187, 189, 190, 195, 201, 242], "nutshel": [1, 265], "cautiou": 1, "about": [1, 3, 6, 8, 11, 12, 16, 17, 20, 36, 37, 38, 41, 44, 51, 54, 55, 56, 57, 59, 74, 75, 77, 86, 88, 91, 93, 95, 96, 98, 100, 101, 102, 103, 105, 106, 107, 108, 110, 111, 113, 114, 115, 121, 124, 125, 127, 131, 133, 135, 138, 139, 140, 143, 145, 146, 148, 150, 153, 154, 155, 164, 166, 167, 172, 173, 174, 175, 177, 178, 179, 181, 183, 187, 189, 190, 192, 193, 194, 199, 201, 202, 219, 220, 227, 228, 230, 233, 240, 244, 245, 250, 251, 254, 255, 256, 264, 265, 266, 271, 275], "deal": [1, 45, 51, 53, 54, 91, 98, 106, 114, 115, 133, 155, 167, 173, 189, 190, 194, 201, 233], "lead": [1, 3, 6, 16, 18, 51, 54, 77, 84, 86, 98, 106, 139, 141, 143, 149, 167, 189, 199, 228, 231, 235, 236, 248, 265, 274], "bias": [1, 33, 44, 93, 98, 115, 178, 193, 228, 233, 234], "comparison": [1, 20, 85, 89, 96, 97, 98, 99, 132, 154, 155, 230, 252, 256, 263, 265, 268, 270], "scale": [1, 6, 33, 42, 53, 58, 77, 93, 95, 98, 108, 126, 127, 131, 132, 133, 135, 146, 148, 149, 156, 160, 169, 173, 174, 180, 181, 190, 201, 202, 215, 231, 236, 242, 251, 252, 256], "help": [1, 3, 8, 11, 12, 17, 20, 22, 32, 33, 44, 51, 54, 70, 84, 86, 89, 98, 99, 102, 103, 105, 106, 115, 126, 127, 129, 131, 132, 133, 138, 145, 146, 149, 150, 154, 155, 161, 164, 170, 173, 174, 175, 176, 177, 178, 179, 187, 189, 190, 194, 195, 197, 199, 200, 202, 206, 212, 214, 215, 216, 218, 229, 231, 232, 240, 242, 243, 246, 248, 250, 254, 256, 264, 265, 266, 268, 270, 271, 274], "signal": [1, 44, 89, 91, 173, 175, 221, 230], "magnitud": [1, 20, 88, 171, 190, 215], "truncat": [1, 96, 113, 154, 173], "A": [1, 6, 7, 8, 11, 13, 14, 16, 20, 32, 33, 34, 38, 41, 48, 49, 50, 51, 53, 54, 55, 57, 64, 65, 69, 70, 71, 74, 75, 77, 84, 85, 91, 93, 96, 97, 98, 100, 102, 103, 105, 106, 107, 114, 115, 124, 127, 131, 133, 137, 138, 139, 140, 143, 144, 148, 150, 153, 157, 160, 164, 165, 166, 173, 174, 175, 176, 178, 179, 180, 181, 184, 187, 189, 190, 193, 194, 195, 200, 206, 216, 220, 228, 231, 233, 240, 242, 245, 248, 251, 254, 255, 267, 268, 271], "thousand": [1, 105, 127, 136, 139, 149, 179], "500": [1, 6, 25, 157, 169, 174, 177, 216], "good": [1, 2, 6, 45, 52, 54, 91, 95, 96, 98, 105, 108, 131, 132, 138, 148, 149, 154, 160, 161, 172, 174, 178, 180, 184, 189, 190, 192, 193, 212, 216, 231, 236, 248, 251, 267], "statist": [1, 54, 91, 125, 131, 142, 153, 171, 173, 179, 183, 184, 216], "arbitrari": [1, 11, 16, 18, 32, 69, 75, 89, 98, 103, 114, 133, 150, 156, 166, 184, 187, 193, 221, 222], "random": [1, 6, 16, 19, 41, 44, 45, 46, 48, 50, 53, 54, 64, 65, 67, 74, 75, 77, 89, 91, 95, 102, 103, 106, 107, 108, 113, 114, 121, 132, 133, 138, 140, 141, 146, 148, 150, 156, 160, 161, 164, 165, 171, 173, 174, 175, 177, 179, 184, 187, 216, 218, 222, 231], "standard": [1, 11, 41, 45, 50, 54, 84, 86, 89, 91, 98, 99, 100, 106, 108, 110, 111, 125, 148, 172, 181, 187, 189, 190, 192, 218, 231, 256, 268], "deviat": [1, 84, 91, 98], "observationnorm": [1, 173], "init_stat": 1, "purpos": [1, 8, 59, 77, 88, 93, 97, 114, 132, 137, 138, 140, 148, 149, 153, 154, 160, 164, 169, 172, 173, 176, 177, 183, 186, 187, 190, 200, 228, 231, 235, 236, 239, 254, 256, 264, 267], "get": [1, 2, 4, 6, 8, 9, 11, 13, 16, 17, 18, 19, 20, 25, 34, 36, 44, 45, 46, 51, 52, 53, 54, 57, 58, 62, 77, 85, 86, 88, 89, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 113, 114, 115, 121, 124, 126, 127, 130, 131, 133, 135, 136, 138, 139, 140, 141, 148, 150, 153, 155, 164, 165, 166, 167, 170, 171, 173, 174, 175, 176, 179, 183, 184, 186, 189, 190, 192, 195, 199, 212, 214, 216, 221, 231, 234, 236, 245, 248, 249, 250, 251, 254, 255, 256, 258, 263, 270, 271, 272], "summari": [1, 84, 105, 138, 149, 167, 173, 183, 189, 229, 230], "dummi": [1, 3, 11, 18, 91, 97, 146, 150, 155, 160, 166, 169, 170, 190, 194, 200, 245, 270], "over": [1, 3, 6, 8, 12, 13, 16, 18, 20, 22, 33, 34, 37, 38, 41, 45, 48, 50, 51, 52, 53, 54, 55, 57, 88, 89, 91, 93, 95, 96, 97, 98, 99, 100, 102, 103, 106, 113, 114, 129, 131, 132, 133, 134, 135, 136, 139, 141, 145, 146, 148, 150, 153, 154, 155, 156, 157, 161, 166, 171, 173, 174, 175, 176, 177, 178, 179, 183, 184, 187, 189, 190, 192, 193, 194, 215, 231, 234, 243, 244, 252, 256, 267, 274], "earlier": [1, 6, 8, 77, 91, 93, 96, 99, 100, 103, 106, 132, 134, 136, 149, 164, 167, 173, 179, 189, 215, 216], "turn": [1, 6, 11, 16, 17, 42, 51, 89, 93, 96, 103, 113, 140, 149, 155, 164, 165, 167, 171, 175, 179, 190, 257, 264, 265, 267], "seen": [1, 12, 13, 22, 45, 48, 51, 53, 93, 96, 98, 103, 105, 106, 113, 149, 166, 176, 187, 189, 190, 216, 235, 242, 267], "requir": [1, 2, 3, 4, 6, 7, 8, 11, 12, 14, 16, 17, 18, 22, 25, 36, 42, 44, 51, 52, 53, 54, 57, 62, 85, 86, 88, 92, 97, 105, 106, 110, 111, 124, 132, 136, 138, 140, 142, 143, 145, 146, 148, 149, 150, 152, 155, 160, 161, 164, 165, 166, 167, 169, 172, 173, 175, 176, 177, 178, 179, 186, 187, 189, 190, 192, 193, 197, 198, 199, 200, 202, 206, 215, 217, 218, 220, 221, 228, 230, 231, 235, 236, 239, 240, 241, 242, 243, 246, 254, 255, 256, 257, 258, 264, 265, 266, 270, 274], "select": [1, 3, 12, 52, 84, 86, 95, 98, 106, 108, 148, 157, 171, 174, 175, 177, 183, 184, 187, 189, 221, 231, 240, 242, 254, 258, 265, 267], "recal": [1, 6, 54, 88, 96, 99, 105, 146, 173, 184, 228, 230, 264, 265, 266], "wrap": [1, 3, 6, 12, 19, 34, 38, 46, 86, 91, 100, 102, 103, 108, 113, 132, 134, 137, 142, 146, 149, 156, 160, 167, 173, 176, 177, 186, 189, 190, 194, 197, 198, 200, 201, 212, 215, 221, 249, 255], "flow": [1, 16, 32, 44, 54, 68, 72, 95, 98, 108, 109, 110, 111, 125, 131, 134, 173, 174, 183, 187, 194, 231, 250, 251, 255, 270], "handl": [1, 4, 11, 12, 18, 51, 54, 55, 93, 96, 106, 107, 111, 125, 131, 132, 136, 139, 150, 160, 162, 166, 167, 169, 171, 172, 173, 176, 177, 178, 186, 187, 189, 190, 199, 200, 214, 220, 221, 230, 245, 248, 263, 265, 268, 274], "specifi": [1, 3, 6, 8, 11, 13, 18, 20, 25, 34, 38, 53, 54, 84, 86, 88, 89, 91, 93, 96, 97, 102, 107, 114, 132, 133, 134, 135, 136, 138, 139, 143, 149, 150, 152, 170, 171, 173, 176, 177, 183, 189, 206, 220, 221, 229, 231, 232, 235, 239, 242, 244, 245, 248, 252, 263, 264, 265, 266, 268, 270, 274, 275], "scenario": [1, 6, 16, 107, 108, 110, 111, 115, 121, 124, 137, 167, 174, 177, 189, 228, 232, 248, 254, 267], "tensordictsequenti": [1, 149], "valueoper": 1, "automat": [1, 2, 3, 4, 6, 8, 11, 12, 17, 33, 35, 36, 38, 41, 44, 46, 47, 48, 50, 55, 59, 62, 95, 97, 99, 106, 114, 118, 124, 126, 131, 132, 133, 134, 136, 137, 138, 143, 154, 157, 160, 167, 169, 173, 174, 177, 180, 181, 183, 186, 189, 190, 194, 199, 200, 206, 212, 217, 219, 220, 221, 227, 230, 231, 242, 250, 251, 252, 254, 271], "out_kei": [1, 16, 149, 173], "state_action_valu": 1, "state_valu": 1, "built": [1, 3, 6, 8, 9, 11, 21, 32, 48, 88, 89, 91, 93, 100, 124, 131, 139, 148, 149, 173, 178, 184, 187, 189, 192, 214, 216, 218, 234, 240, 251], "present": [1, 6, 8, 11, 22, 37, 84, 85, 98, 107, 165, 170, 171, 174, 175, 177, 187, 189, 192, 194, 231, 249, 268], "origin": [1, 6, 7, 11, 14, 16, 20, 32, 51, 54, 77, 86, 89, 96, 98, 103, 108, 134, 136, 137, 139, 140, 161, 162, 165, 166, 167, 171, 174, 186, 187, 189, 212, 245, 256, 257, 266, 270], "paper": [1, 14, 19, 20, 54, 77, 118, 133, 136, 173, 174, 176, 178, 179, 181, 190, 193, 194, 268], "found": [1, 3, 4, 6, 8, 12, 19, 51, 52, 89, 98, 138, 146, 148, 149, 153, 157, 167, 176, 177, 178, 189, 212, 231, 245, 268], "ddpgmlpactor": 1, "ddpgmlpqnet": 1, "sinc": [1, 3, 7, 11, 12, 13, 15, 16, 19, 45, 51, 53, 54, 55, 77, 88, 89, 91, 98, 99, 100, 102, 103, 105, 106, 121, 124, 134, 135, 136, 138, 139, 140, 141, 143, 144, 148, 149, 153, 164, 165, 167, 171, 172, 173, 174, 175, 176, 177, 178, 179, 184, 187, 189, 190, 192, 193, 197, 199, 200, 212, 216, 220, 221, 222, 234, 235, 236, 243, 245, 249, 256, 263, 264, 265], "lazi": 1, "materi": [1, 132, 136, 155, 190, 193, 222, 228, 255, 263], "abl": [1, 3, 6, 16, 17, 20, 32, 33, 51, 64, 77, 91, 98, 99, 101, 105, 106, 114, 121, 138, 142, 143, 144, 145, 146, 148, 149, 150, 154, 156, 157, 164, 166, 173, 176, 184, 187, 189, 190, 192, 193, 205, 218, 228, 234, 242, 245, 254, 265], "devic": [1, 3, 4, 6, 11, 12, 13, 16, 18, 19, 20, 22, 25, 41, 44, 45, 46, 50, 51, 52, 54, 55, 57, 58, 62, 65, 75, 86, 96, 98, 100, 108, 114, 127, 130, 131, 132, 134, 136, 138, 139, 145, 146, 148, 149, 154, 157, 164, 166, 167, 169, 171, 173, 176, 177, 183, 190, 192, 197, 198, 199, 200, 202, 205, 206, 216, 219, 221, 222, 227, 228, 232, 234, 240, 241, 242, 244, 245, 246, 249, 250, 251, 252, 254, 255, 256, 257, 258, 270, 271], "achiev": [1, 3, 6, 16, 20, 25, 32, 45, 51, 58, 84, 86, 98, 131, 134, 137, 142, 148, 149, 154, 164, 165, 167, 171, 173, 174, 183, 190, 193, 231, 242, 244, 248, 250, 255, 256], "oper": [1, 6, 7, 15, 16, 17, 20, 21, 22, 32, 33, 38, 44, 46, 48, 51, 53, 62, 64, 65, 69, 75, 84, 85, 91, 92, 96, 98, 99, 100, 105, 106, 107, 108, 109, 110, 113, 114, 124, 125, 130, 131, 132, 134, 135, 136, 137, 139, 141, 143, 148, 149, 150, 152, 154, 155, 157, 161, 166, 169, 170, 172, 173, 175, 179, 183, 184, 186, 187, 189, 190, 193, 194, 195, 200, 201, 205, 206, 212, 214, 215, 216, 218, 221, 222, 230, 234, 240, 241, 242, 245, 248, 249, 250, 251, 256, 263, 264, 267, 270, 274, 275], "practic": [1, 6, 13, 39, 48, 51, 53, 54, 88, 89, 91, 96, 98, 100, 106, 107, 114, 118, 121, 126, 129, 131, 136, 137, 144, 149, 154, 157, 165, 171, 173, 174, 189, 193, 216, 217, 220, 231, 235, 236, 244, 245, 248, 263, 264, 268], "small": [1, 6, 20, 22, 25, 44, 45, 48, 59, 77, 88, 91, 93, 95, 96, 98, 100, 101, 103, 108, 114, 121, 132, 133, 135, 138, 139, 140, 142, 153, 164, 165, 167, 172, 173, 174, 177, 179, 181, 190, 192, 215, 216, 218, 231, 245, 246, 254, 256, 263], "fake": [1, 6, 20, 48, 54, 164, 189, 268], "spec": [1, 111, 149, 173, 177, 189, 216], "ornsteinuhlenbeckprocessmodul": 1, "suggest": [1, 3, 14, 54, 98, 134, 140, 154, 155, 156, 157, 161, 183, 206, 254], "ou": 1, "nois": [1, 6, 14, 54, 77, 201, 230], "reach": [1, 7, 12, 20, 54, 62, 98, 124, 139, 146, 148, 156, 157, 173, 177, 189, 194, 216], "minimum": [1, 3, 84, 134, 173, 177, 265], "iter": [1, 6, 13, 14, 16, 25, 32, 33, 37, 38, 44, 45, 48, 54, 55, 57, 86, 88, 89, 91, 93, 99, 106, 108, 115, 138, 141, 144, 146, 149, 154, 160, 173, 174, 175, 176, 177, 183, 184, 187, 190, 192, 198, 206, 212, 215, 231, 234, 243, 245, 249], "reset": [1, 37, 91, 96, 106, 121, 149, 173, 174, 175, 177, 183, 187, 246, 257], "develop": [1, 3, 11, 12, 14, 17, 25, 84, 89, 102, 106, 108, 110, 125, 128, 141, 148, 157, 160, 170, 177, 183, 187, 193, 200, 201, 205, 219, 231, 256, 257, 258, 263, 266, 267], "tight": [1, 107, 108, 110, 111], "per": [1, 3, 6, 11, 13, 98, 105, 126, 131, 133, 139, 140, 142, 146, 148, 149, 155, 157, 160, 164, 169, 171, 177, 178, 179, 180, 183, 184, 189, 190, 192, 199, 200, 216, 220, 230, 239, 248, 249, 251, 252, 254, 255, 263, 274], "sync": [1, 12, 13, 19, 57, 130, 131, 132, 133, 134, 135, 156, 190], "natur": [1, 6, 20, 22, 25, 46, 77, 93, 98, 106, 138, 139, 149, 167, 176, 265, 268], "resourc": [1, 55, 77, 86, 108, 110, 132, 146, 148, 164, 173, 183, 195, 205, 216, 231, 236, 248, 254], "alloc": [1, 6, 8, 22, 41, 50, 57, 96, 142, 148, 160, 164, 167, 183, 189, 190, 200, 220, 221, 249, 256, 268], "gpu": [1, 4, 9, 14, 20, 22, 25, 41, 44, 48, 50, 51, 52, 54, 55, 56, 58, 59, 62, 65, 75, 84, 85, 91, 92, 96, 97, 98, 100, 108, 114, 118, 121, 127, 131, 132, 133, 134, 136, 137, 139, 144, 145, 146, 148, 149, 150, 154, 157, 160, 161, 164, 166, 169, 173, 174, 176, 177, 178, 187, 192, 197, 199, 200, 206, 212, 215, 216, 221, 234, 240, 242, 250, 251, 252, 254, 255, 257, 258, 270, 272], "worker": [1, 6, 13, 19, 53, 54, 91, 127, 132, 133, 135, 148, 157, 160, 173, 176, 177, 183, 231], "so": [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 20, 22, 25, 32, 45, 48, 51, 53, 54, 55, 67, 70, 77, 85, 86, 88, 89, 91, 93, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 113, 114, 121, 124, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 148, 149, 154, 155, 156, 160, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 187, 189, 190, 192, 193, 194, 206, 212, 215, 216, 220, 230, 231, 234, 235, 243, 244, 245, 248, 249, 250, 254, 255, 256, 263, 265, 266, 267, 268], "syncdatacollector": [1, 173], "process": [1, 3, 4, 6, 8, 13, 14, 16, 17, 19, 20, 22, 25, 34, 37, 38, 42, 48, 51, 52, 53, 54, 58, 62, 77, 84, 88, 89, 91, 93, 97, 98, 106, 107, 108, 115, 118, 125, 127, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 144, 145, 148, 149, 153, 154, 156, 157, 160, 166, 167, 172, 174, 176, 177, 178, 179, 183, 189, 190, 199, 200, 202, 206, 216, 218, 220, 221, 230, 231, 232, 234, 239, 244, 245, 246, 248, 249, 250, 254, 255, 256, 267, 270, 271], "offer": [1, 3, 4, 9, 13, 16, 18, 22, 38, 42, 44, 55, 62, 88, 89, 100, 133, 134, 136, 148, 150, 152, 154, 155, 167, 190, 193, 200, 214, 216, 221, 230, 231, 235, 236, 248], "multiasyncdatacollector": [1, 173], "rollout": [1, 173], "asynchron": [1, 127, 131, 135, 138, 170, 173, 177, 221, 250], "manner": [1, 11, 16, 32, 88, 106, 173, 190], "therebi": [1, 245, 257, 263, 268], "decoupl": [1, 34, 165], "factori": [1, 6, 96, 102, 217, 220, 264, 265], "empti": [1, 3, 6, 7, 11, 16, 96, 140, 154, 172, 179, 183, 189, 193, 221, 230, 255], "maximum": [1, 13, 51, 84, 93, 103, 138, 140, 149, 154, 173, 178, 179, 231, 267], "non": [1, 2, 8, 11, 13, 16, 33, 51, 53, 55, 56, 58, 84, 93, 96, 98, 99, 101, 105, 106, 115, 116, 131, 133, 134, 138, 142, 143, 148, 149, 152, 155, 157, 161, 171, 175, 178, 179, 183, 187, 190, 193, 194, 200, 216, 228, 232, 244, 248, 251, 256, 263, 270], "termin": [1, 16, 55, 86, 160, 172, 173, 174, 176, 177], "max_frames_per_traj": [1, 173], "effect": [1, 6, 7, 11, 13, 18, 57, 77, 84, 89, 93, 96, 98, 106, 111, 136, 139, 140, 146, 150, 164, 166, 167, 171, 174, 178, 179, 190, 194, 199, 201, 215, 231, 235, 236, 244, 265, 274], "regist": [1, 4, 7, 8, 9, 18, 37, 44, 48, 93, 111, 113, 115, 130, 131, 133, 134, 136, 146, 152, 164, 165, 173, 186, 189, 212, 215, 222, 233, 254, 255], "new": [1, 2, 3, 4, 6, 8, 9, 11, 14, 16, 18, 25, 31, 32, 36, 41, 44, 46, 50, 51, 52, 54, 57, 63, 66, 77, 79, 80, 81, 82, 84, 95, 96, 97, 98, 100, 103, 105, 110, 111, 113, 115, 121, 124, 126, 128, 130, 131, 132, 133, 134, 135, 137, 141, 149, 152, 154, 156, 160, 164, 165, 166, 167, 170, 171, 173, 174, 175, 178, 179, 183, 186, 189, 190, 192, 212, 221, 228, 231, 232, 237, 250, 251, 254, 255, 257, 258, 263, 268, 274, 275], "stepcount": [1, 149, 173], "infer": [1, 4, 6, 9, 11, 12, 39, 41, 50, 51, 89, 91, 93, 97, 98, 102, 105, 106, 108, 125, 129, 131, 134, 137, 138, 141, 142, 154, 173, 175, 186, 187, 189, 190, 192, 200, 206, 212, 218, 219, 233, 235, 236, 242, 245, 248, 267, 268, 270], "manual": [1, 3, 8, 11, 14, 18, 34, 48, 51, 55, 71, 74, 75, 96, 98, 106, 114, 115, 134, 143, 149, 150, 152, 165, 166, 167, 169, 189, 190, 202, 212, 215, 231, 248, 268], "around": [1, 6, 13, 25, 34, 38, 51, 57, 89, 91, 93, 96, 98, 121, 131, 140, 150, 154, 155, 161, 166, 179, 183, 184, 189, 190, 222, 255, 263, 264], "1m": [1, 149, 173, 252], "outer": [1, 6, 133, 155, 230], "loop": [1, 11, 13, 19, 36, 38, 45, 48, 51, 53, 54, 77, 88, 91, 95, 98, 106, 114, 132, 134, 138, 139, 141, 150, 154, 155, 156, 160, 164, 166, 167, 176, 177, 184, 190, 216, 221, 230, 231, 234], "equal": [1, 12, 88, 96, 98, 137, 157, 171, 173, 174, 189, 245, 248, 254, 266], "length": [1, 14, 16, 51, 54, 88, 89, 93, 103, 105, 106, 136, 140, 173, 178, 179, 190, 193, 244, 250, 252, 265, 268, 274, 275], "sub": [1, 6, 88, 113, 136, 141, 169, 173, 177, 183, 187, 190, 202, 230, 239, 248], "shape": [1, 3, 4, 7, 18, 20, 32, 41, 44, 50, 51, 54, 70, 88, 91, 98, 99, 102, 105, 113, 114, 133, 136, 139, 140, 141, 150, 152, 155, 166, 173, 183, 186, 190, 192, 193, 212, 216, 219, 221, 227, 239, 240, 242, 243, 245, 250, 251, 256, 266, 268], "env_per_collector": 1, "traj_len": 1, "perform": [1, 4, 6, 11, 12, 13, 14, 16, 17, 18, 19, 20, 32, 33, 37, 38, 42, 44, 45, 46, 51, 58, 65, 69, 74, 77, 84, 86, 88, 91, 93, 96, 97, 98, 99, 100, 105, 106, 114, 115, 124, 125, 126, 127, 129, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 148, 149, 152, 155, 156, 161, 167, 169, 170, 173, 174, 175, 177, 180, 181, 184, 186, 187, 189, 190, 192, 193, 194, 197, 202, 205, 206, 212, 215, 216, 217, 219, 220, 221, 227, 230, 234, 235, 236, 242, 244, 245, 246, 250, 251, 252, 255, 256, 257, 263, 264, 268, 270, 275], "assess": [1, 167, 190], "mode": [1, 14, 39, 44, 51, 54, 57, 77, 84, 89, 95, 115, 126, 131, 133, 141, 142, 143, 149, 154, 156, 157, 161, 169, 172, 175, 178, 179, 180, 184, 186, 187, 189, 190, 193, 200, 216, 231, 238, 244, 245, 248, 250, 251, 254, 256, 270, 275], "dedic": [1, 12, 57, 96, 176, 177, 214, 215, 249], "frequenc": [1, 85, 138], "everi": [1, 2, 6, 11, 12, 16, 17, 20, 22, 25, 32, 33, 34, 38, 44, 45, 48, 51, 53, 54, 57, 62, 88, 91, 93, 95, 96, 97, 121, 136, 137, 139, 140, 142, 148, 149, 152, 157, 164, 165, 166, 167, 171, 173, 174, 175, 177, 179, 183, 184, 187, 189, 190, 197, 217, 229, 231, 241, 249, 268], "10": [1, 6, 7, 11, 13, 20, 33, 34, 42, 44, 45, 46, 51, 55, 77, 85, 86, 91, 97, 113, 115, 132, 133, 135, 141, 146, 148, 150, 152, 157, 166, 172, 175, 176, 177, 178, 179, 183, 184, 189, 190, 193, 197, 199, 202, 206, 212, 216, 218, 221, 230, 245, 254, 256, 258], "come": [1, 4, 6, 8, 12, 20, 42, 53, 54, 77, 86, 88, 93, 96, 98, 99, 111, 115, 132, 136, 138, 148, 149, 154, 164, 165, 167, 170, 173, 178, 187, 189, 190, 193, 206, 216, 240, 249, 256], "flavor": [1, 3], "priorit": [1, 231, 268], "error": [1, 3, 6, 8, 11, 12, 13, 14, 18, 37, 38, 44, 48, 51, 52, 55, 70, 88, 91, 93, 96, 98, 102, 106, 110, 111, 114, 124, 133, 135, 137, 143, 160, 164, 170, 173, 174, 187, 190, 193, 202, 216, 228, 231, 234, 243, 254, 256, 263, 271], "higher": [1, 45, 50, 55, 84, 88, 89, 93, 98, 100, 114, 132, 133, 139, 140, 143, 152, 155, 172, 173, 174, 183, 184, 189, 190, 198, 202, 205, 270, 274], "likelihood": [1, 37, 51, 93, 100, 106], "regular": [1, 6, 11, 12, 25, 98, 106, 118, 136, 139, 140, 155, 165, 166, 167, 181, 190, 193, 231, 242, 263, 265, 268, 270], "circular": [1, 254, 271], "compos": [1, 3, 6, 9, 12, 18, 20, 62, 91, 93, 100, 131, 132, 148, 152, 161, 166, 172, 173, 176, 178, 180, 184, 193, 202, 214, 218, 221, 235, 236, 240, 251], "pick": [1, 6, 45, 99, 139, 174, 179, 212, 230, 240], "tensor": [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 20, 33, 34, 35, 36, 37, 38, 39, 42, 44, 45, 46, 47, 48, 49, 51, 59, 62, 63, 65, 66, 67, 69, 70, 71, 73, 76, 77, 88, 89, 90, 92, 93, 95, 97, 98, 100, 103, 106, 107, 108, 111, 113, 115, 116, 118, 126, 131, 132, 133, 134, 140, 141, 142, 143, 146, 148, 149, 150, 152, 154, 155, 157, 161, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 183, 184, 186, 187, 189, 190, 192, 194, 201, 202, 205, 214, 215, 216, 218, 219, 220, 221, 222, 227, 230, 233, 234, 235, 239, 242, 250, 251, 252, 254, 255, 256, 257, 258, 263, 264, 265, 272, 274, 275], "physic": [1, 16, 105, 167, 220, 231, 248], "memori": [1, 6, 11, 12, 19, 20, 22, 41, 50, 51, 53, 57, 86, 93, 96, 97, 98, 101, 104, 106, 108, 115, 126, 130, 131, 132, 133, 134, 136, 144, 148, 149, 154, 155, 156, 161, 171, 176, 178, 180, 183, 189, 190, 192, 193, 215, 216, 220, 222, 239, 249, 250, 251, 252, 254, 255, 256, 263, 266, 268], "map": [1, 6, 14, 33, 51, 54, 89, 91, 93, 98, 103, 105, 115, 134, 139, 149, 150, 155, 164, 165, 166, 173, 174, 177, 189, 192, 200, 220, 230, 231, 233, 274], "arrai": [1, 6, 32, 33, 44, 45, 48, 53, 62, 74, 75, 88, 89, 96, 105, 106, 113, 114, 139, 140, 156, 179, 214, 266], "desir": [1, 3, 11, 14, 16, 19, 51, 54, 77, 84, 98, 115, 134, 148, 171, 183, 189, 212, 215, 218, 245, 248, 252, 254, 256, 264], "hyperparamet": [1, 6, 16, 20, 54, 106, 115, 116, 126, 129, 131, 138, 139, 160, 233, 251, 263, 268], "temporari": [1, 138], "directori": [1, 6, 8, 14, 34, 51, 53, 54, 86, 95, 98, 115, 118, 121, 138, 139, 140, 154, 160, 179, 183, 200, 206, 212, 229, 239, 248, 254, 256], "disk": [1, 7, 34, 91, 95, 108, 115, 149, 167, 216, 220, 221, 229, 239, 240, 254, 255], "along": [1, 6, 11, 16, 20, 32, 33, 41, 44, 50, 51, 55, 56, 57, 58, 85, 88, 89, 91, 92, 93, 95, 96, 97, 98, 102, 103, 106, 107, 121, 132, 133, 139, 140, 144, 145, 149, 164, 171, 174, 176, 184, 189, 190, 244, 252, 265, 270, 275], "dimens": [1, 6, 14, 16, 22, 33, 41, 48, 50, 51, 89, 91, 93, 95, 102, 103, 105, 106, 126, 131, 136, 139, 149, 150, 157, 166, 172, 173, 175, 186, 189, 190, 215, 231, 245, 252, 264, 268, 274, 275], "feed": [1, 6, 14, 45, 48, 51, 91, 93, 97, 98, 101, 103, 108, 115, 136, 139, 140, 146, 156, 174, 179, 184, 200, 218, 234], "adapt": [1, 2, 16, 20, 25, 86, 91, 108, 138, 194, 216, 252], "divid": [1, 11, 12, 13, 14, 16, 17, 98, 100, 135, 148, 165, 167, 177, 245, 248], "yield": [1, 6, 13, 14, 20, 37, 39, 96, 115, 136, 137, 175, 177, 193, 231, 235, 256, 266], "regard": [1, 6, 7, 13, 16, 115, 154, 155, 173, 183, 190, 244], "200": [1, 6, 149, 157, 177, 256], "random_crop_len": 1, "25": [1, 77, 88, 98, 113, 121, 132, 176, 216, 221, 256], "balanc": [1, 6, 22, 146, 183, 190, 212], "choic": [1, 3, 6, 11, 18, 86, 138, 140, 148, 167, 190, 197, 231, 256], "heterogen": [1, 275], "figur": [1, 8, 11, 14, 16, 51, 77, 84, 91, 98, 130, 131, 135, 136, 138, 149, 154, 167, 175, 183, 184, 189], "dataflow": 1, "8": [1, 4, 6, 7, 20, 86, 93, 94, 103, 113, 114, 133, 136, 142, 146, 154, 157, 160, 166, 169, 172, 183, 189, 190, 199, 200, 201, 202, 215, 221, 231, 248, 249, 252, 254, 256, 258, 272], "1000": [1, 2, 44, 95, 97, 121, 132, 133, 137, 154, 173, 184, 212, 216, 230], "known": [1, 3, 14, 20, 88, 136, 148, 152, 153, 171, 174, 179, 189, 190, 216, 230, 240, 254], "utd": 1, "64": [1, 6, 17, 20, 22, 34, 38, 44, 86, 96, 103, 106, 132, 133, 136, 149, 150, 166, 172, 175, 176, 190, 216, 221, 235, 236, 252, 256, 267, 274], "reproduc": [1, 14, 54, 77, 91, 96, 98, 154, 173, 174, 177, 187, 216, 231], "realiz": [1, 20], "sever": [1, 2, 3, 7, 8, 12, 13, 17, 19, 32, 38, 42, 46, 48, 54, 55, 56, 77, 98, 100, 131, 133, 136, 139, 145, 148, 156, 160, 164, 165, 167, 170, 173, 175, 176, 183, 184, 187, 189, 193, 216, 230, 239, 240, 248, 265, 270], "qnet": 1, "ve": [1, 6, 8, 11, 20, 46, 48, 52, 88, 89, 91, 93, 96, 97, 106, 137, 149, 152, 153, 155, 164, 166, 167, 176, 184, 189, 190, 199, 200, 216, 256, 263, 265, 266, 267], "becaus": [1, 2, 3, 6, 8, 11, 14, 16, 17, 18, 19, 20, 32, 34, 39, 41, 44, 45, 48, 50, 51, 53, 54, 57, 58, 77, 86, 88, 89, 91, 93, 96, 98, 99, 100, 102, 106, 107, 108, 111, 115, 121, 124, 133, 134, 137, 139, 142, 143, 146, 149, 152, 155, 156, 157, 161, 166, 167, 171, 175, 177, 179, 181, 183, 187, 189, 192, 193, 194, 197, 216, 228, 231, 233, 234, 245, 256, 263, 265, 274], "_must_": 1, "off": [1, 11, 19, 25, 32, 44, 51, 93, 96, 115, 132, 138, 139, 154, 160, 164, 173, 175, 176, 177, 199, 263], "dictat": [1, 16], "introduc": [1, 7, 8, 13, 17, 19, 20, 25, 33, 36, 56, 86, 89, 98, 100, 113, 114, 131, 133, 135, 141, 146, 154, 157, 164, 175, 177, 178, 179, 187, 189, 190, 199, 228, 231, 245, 246, 248, 255, 257, 258, 263, 265, 266, 267, 270, 274], "outdat": 1, "trick": [1, 3, 6, 12, 51, 96, 143, 148, 155], "multi": [1, 6, 16, 22, 48, 51, 54, 55, 56, 58, 62, 88, 89, 93, 96, 100, 129, 131, 133, 134, 136, 144, 145, 146, 149, 173, 175, 178, 180, 183, 192, 200, 202, 231, 248, 251, 268], "altern": [1, 6, 12, 50, 51, 103, 121, 132, 150, 153, 157, 170, 173, 179, 183, 187, 193, 194, 200, 228, 230, 231, 246, 256, 266, 267], "hack": [1, 228, 263], "find": [1, 2, 3, 6, 8, 11, 12, 20, 32, 34, 41, 50, 77, 84, 85, 86, 91, 93, 96, 99, 102, 106, 129, 131, 132, 135, 139, 148, 152, 154, 160, 165, 174, 177, 179, 183, 189, 190, 206, 212, 214, 216, 229, 263, 264, 265, 266, 267], "well": [1, 3, 6, 11, 12, 13, 34, 41, 45, 50, 51, 55, 69, 84, 86, 89, 91, 98, 100, 102, 106, 108, 114, 115, 121, 124, 125, 132, 133, 134, 137, 138, 139, 142, 143, 148, 149, 152, 164, 165, 167, 169, 172, 175, 176, 177, 178, 179, 183, 184, 187, 190, 192, 199, 200, 202, 212, 216, 220, 228, 230, 233, 240, 241, 242, 245, 246, 248, 263, 264, 265, 268], "despit": [1, 77, 141, 146], "fact": [1, 3, 6, 11, 14, 16, 32, 41, 77, 88, 89, 91, 93, 96, 98, 100, 105, 137, 165, 173, 174, 184, 189, 190, 193], "part": [1, 6, 11, 12, 15, 16, 17, 19, 37, 44, 46, 51, 54, 77, 86, 88, 89, 93, 99, 101, 105, 106, 107, 131, 133, 136, 137, 139, 140, 143, 144, 148, 149, 153, 154, 162, 164, 165, 173, 179, 189, 190, 212, 214, 215, 228, 230, 236, 239, 242, 245, 252, 254, 256, 257, 263, 265, 267, 275], "made": [1, 6, 12, 17, 54, 86, 89, 96, 98, 133, 135, 137, 148, 149, 160, 167, 179, 184, 189, 214, 231, 266, 275], "thank": [1, 51, 106, 138, 139, 140, 148, 179, 193], "hardupd": 1, "softupd": [1, 149], "appropri": [1, 6, 11, 51, 89, 106, 138, 146, 165, 176, 184, 190, 193, 215, 255, 270], "locat": [1, 3, 6, 31, 34, 41, 50, 84, 89, 91, 105, 113, 148, 167, 173, 183, 192, 200, 212, 221, 231, 239, 254], "adam": [1, 6, 13, 15, 37, 48, 54, 71, 97, 100, 114, 124, 134, 148, 164, 174, 175, 177, 197, 198, 199, 200, 205, 249], "pretti": [1, 19, 45, 96, 113, 114, 155, 177, 274], "plot": [1, 6, 54, 77, 84, 88, 138, 149, 167, 174, 175, 184, 194], "alreadi": [1, 2, 3, 6, 8, 12, 13, 17, 88, 91, 96, 98, 99, 106, 124, 136, 138, 146, 157, 164, 167, 169, 172, 173, 178, 184, 190, 202, 216, 218, 231, 232, 233, 234, 235, 236, 249, 265, 267, 271], "mention": [1, 3, 6, 12, 13, 17, 19, 54, 77, 96, 98, 99, 115, 132, 136, 148, 149, 167, 174, 176, 183, 189, 193, 200, 212, 220, 228, 235, 239, 248], "greater": [1, 13, 51, 54, 89, 114, 137, 248], "concret": [1, 6, 7, 11, 13, 88, 160, 167, 173, 189, 263], "takeawai": [1, 118, 193, 231], "further": [1, 6, 11, 48, 77, 86, 93, 98, 106, 136, 148, 154, 160, 167, 171, 173, 186, 187, 189, 199, 220, 256, 268, 270, 271, 275], "might": [1, 3, 7, 11, 12, 17, 18, 19, 32, 39, 45, 52, 53, 54, 55, 88, 91, 96, 98, 99, 103, 105, 108, 111, 113, 124, 134, 143, 144, 145, 146, 148, 153, 155, 165, 167, 174, 177, 178, 179, 183, 187, 189, 190, 192, 193, 202, 216, 217, 221, 228, 231, 236, 245, 248, 254, 256, 263, 271], "dispatch": [1, 3, 17, 130, 131, 134, 170, 193, 212, 215, 241], "distpatch": 1, "iql": 1, "flexibl": [1, 2, 6, 25, 51, 88, 106, 108, 115, 126, 131, 133, 134, 144, 160, 193, 200, 216, 270], "runnable_code_remov": [1, 8, 14, 15, 16, 18, 20, 32, 33, 34, 36, 37, 38, 39, 41, 44, 45, 46, 48, 50, 51, 53, 54, 64, 65, 67, 70, 71, 74, 75, 77, 86, 88, 89, 91, 93, 95, 96, 97, 98, 99, 100, 102, 105, 106, 107, 108, 110, 111, 113, 114, 115, 121, 124, 137, 138, 139, 140, 142, 149, 150, 153, 154, 155, 156, 157, 158, 161, 164, 165, 167, 171, 173, 174, 178, 179, 181, 183, 186, 187, 189, 190, 192, 193, 194, 198, 205, 215, 216, 217, 218, 220, 221, 222, 228, 229, 231, 232, 233, 234, 235, 236, 241, 242, 243, 244, 246, 255, 263, 264, 265, 266, 268, 274], "minut": [1, 14, 15, 16, 18, 32, 33, 34, 37, 38, 39, 41, 42, 44, 45, 46, 48, 50, 51, 53, 54, 70, 74, 75, 77, 86, 88, 89, 91, 93, 95, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 108, 111, 118, 121, 124, 135, 137, 138, 139, 140, 142, 150, 152, 153, 154, 155, 156, 157, 161, 164, 165, 166, 167, 171, 172, 173, 174, 178, 179, 181, 184, 187, 189, 192, 193, 194, 198, 205, 217, 220, 222, 228, 235, 236, 241, 242, 243, 244, 246, 256, 263, 264, 265, 266, 268, 274], "002": [1, 14, 15, 16, 18, 21, 32, 33, 34, 37, 38, 39, 40, 41, 44, 46, 48, 49, 50, 53, 70, 72, 74, 75, 76, 86, 88, 93, 94, 96, 99, 104, 105, 106, 107, 108, 111, 112, 116, 121, 124, 133, 137, 138, 139, 142, 150, 153, 156, 157, 161, 164, 165, 171, 173, 174, 179, 180, 181, 192, 194, 198, 205, 217, 220, 222, 227, 228, 235, 236, 238, 241, 242, 243, 244, 246, 251, 263, 264, 265, 266, 268, 272, 274], "jupyt": [1, 14, 15, 16, 18, 20, 25, 32, 33, 34, 36, 37, 38, 39, 41, 42, 44, 45, 46, 48, 50, 51, 53, 54, 64, 65, 67, 69, 70, 71, 74, 75, 77, 84, 86, 88, 89, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 108, 110, 111, 113, 115, 118, 121, 124, 137, 138, 139, 140, 142, 149, 150, 152, 153, 154, 155, 156, 157, 158, 161, 164, 165, 166, 167, 171, 173, 174, 178, 179, 181, 183, 184, 186, 187, 189, 190, 192, 193, 194, 198, 205, 214, 215, 216, 217, 218, 220, 221, 222, 228, 229, 230, 231, 232, 233, 234, 235, 236, 241, 242, 243, 244, 246, 255, 256, 263, 264, 265, 266, 268, 274], "notebook": [1, 14, 15, 16, 18, 20, 22, 25, 32, 33, 34, 36, 37, 38, 39, 41, 42, 44, 45, 46, 48, 50, 51, 52, 53, 54, 64, 65, 67, 69, 70, 71, 74, 75, 77, 84, 85, 86, 88, 89, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 110, 111, 113, 115, 118, 121, 124, 137, 138, 139, 140, 142, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 161, 164, 165, 166, 167, 171, 173, 174, 178, 179, 181, 183, 184, 186, 187, 189, 190, 192, 193, 194, 198, 205, 214, 215, 216, 217, 218, 220, 221, 222, 228, 229, 230, 231, 232, 233, 234, 235, 236, 241, 242, 243, 244, 246, 255, 256, 263, 264, 265, 266, 268, 274], "coding_ddpg": [1, 21, 251], "ipynb": [1, 14, 15, 16, 18, 20, 25, 32, 33, 34, 36, 37, 38, 39, 41, 42, 44, 45, 46, 48, 50, 51, 53, 54, 64, 65, 67, 69, 70, 71, 74, 75, 77, 86, 88, 89, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 108, 110, 111, 113, 115, 118, 121, 124, 137, 138, 139, 140, 142, 149, 150, 152, 153, 154, 155, 156, 157, 158, 161, 164, 165, 166, 167, 171, 173, 174, 178, 179, 181, 183, 186, 187, 189, 190, 192, 193, 194, 198, 205, 214, 215, 216, 217, 218, 220, 221, 222, 228, 229, 230, 231, 232, 233, 234, 235, 236, 241, 242, 243, 244, 246, 255, 256, 263, 264, 265, 266, 268, 274], "python": [1, 6, 7, 12, 14, 15, 16, 17, 20, 21, 22, 25, 32, 33, 34, 36, 37, 38, 39, 41, 42, 44, 45, 46, 48, 50, 51, 53, 54, 55, 57, 58, 59, 64, 65, 67, 69, 70, 71, 74, 75, 77, 86, 88, 89, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 108, 110, 111, 113, 114, 115, 118, 121, 124, 125, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 161, 164, 165, 166, 167, 171, 172, 173, 174, 176, 178, 179, 181, 183, 186, 187, 189, 190, 192, 193, 194, 198, 200, 201, 202, 205, 212, 214, 215, 216, 217, 218, 220, 221, 222, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 241, 242, 243, 245, 248, 250, 251, 252, 254, 255, 256, 257, 263, 264, 265, 266, 268, 270, 271, 274, 275], "sourc": [1, 4, 6, 12, 13, 14, 15, 16, 18, 19, 20, 25, 32, 33, 34, 36, 37, 38, 39, 41, 42, 44, 45, 46, 48, 50, 51, 53, 54, 57, 64, 65, 67, 69, 70, 71, 74, 75, 77, 86, 88, 89, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 108, 110, 111, 113, 115, 118, 121, 124, 133, 136, 137, 138, 139, 140, 142, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 161, 164, 165, 166, 167, 170, 171, 173, 174, 175, 177, 178, 179, 181, 183, 186, 187, 189, 190, 192, 193, 194, 198, 205, 206, 214, 215, 216, 217, 218, 220, 221, 222, 228, 229, 230, 231, 232, 233, 234, 235, 236, 241, 242, 243, 244, 246, 254, 255, 256, 257, 263, 264, 265, 266, 268, 274, 275], "py": [1, 3, 4, 6, 8, 11, 12, 14, 15, 16, 18, 20, 21, 25, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 64, 65, 66, 67, 69, 70, 71, 72, 74, 75, 76, 77, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 118, 121, 124, 132, 133, 134, 137, 138, 139, 140, 141, 142, 144, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 161, 164, 165, 166, 167, 169, 170, 171, 173, 174, 176, 178, 179, 180, 181, 183, 186, 187, 189, 190, 192, 193, 194, 198, 201, 202, 205, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 241, 242, 243, 244, 245, 246, 248, 251, 252, 254, 255, 256, 263, 264, 265, 266, 268, 271, 272, 274], "zip": [1, 6, 14, 15, 16, 18, 20, 22, 25, 32, 33, 34, 36, 37, 38, 39, 41, 42, 44, 45, 46, 48, 50, 51, 52, 53, 54, 64, 65, 67, 69, 70, 71, 74, 75, 77, 86, 88, 89, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 108, 110, 111, 113, 115, 118, 121, 124, 137, 138, 139, 140, 142, 149, 150, 152, 153, 154, 155, 156, 157, 158, 161, 164, 165, 166, 167, 171, 173, 174, 175, 177, 178, 179, 181, 183, 184, 186, 187, 189, 190, 192, 193, 194, 198, 205, 214, 215, 216, 217, 218, 220, 221, 222, 228, 229, 230, 231, 232, 233, 234, 235, 236, 241, 242, 243, 244, 246, 255, 256, 263, 264, 265, 266, 268, 274], "The": [2, 3, 4, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 25, 32, 33, 34, 37, 38, 41, 42, 44, 45, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 69, 70, 71, 75, 77, 84, 85, 89, 90, 91, 93, 95, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 110, 111, 113, 114, 115, 118, 121, 122, 124, 126, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 161, 164, 165, 166, 167, 171, 172, 173, 174, 175, 176, 177, 178, 181, 183, 186, 187, 189, 190, 192, 194, 197, 198, 199, 200, 201, 202, 206, 207, 215, 216, 218, 220, 221, 228, 229, 230, 231, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 252, 254, 255, 256, 257, 263, 264, 265, 266, 267, 268, 270, 271, 274], "packag": [2, 3, 6, 20, 22, 25, 45, 48, 53, 59, 62, 70, 71, 86, 97, 98, 100, 106, 110, 114, 121, 126, 127, 131, 132, 133, 146, 148, 153, 170, 172, 174, 177, 183, 187, 202, 214, 218, 221, 230, 234, 245, 250, 271], "build": [2, 6, 7, 16, 32, 34, 35, 36, 37, 38, 39, 41, 42, 48, 51, 62, 70, 71, 86, 88, 89, 90, 91, 92, 95, 96, 97, 99, 105, 106, 113, 114, 118, 124, 125, 126, 127, 131, 139, 140, 148, 149, 152, 160, 162, 164, 166, 167, 173, 174, 175, 176, 177, 180, 189, 190, 195, 216, 218, 230, 231, 242, 245, 251, 254, 258, 268, 274, 275], "highli": [2, 6, 12, 22, 51, 86, 179, 190, 231, 274], "dynam": [2, 6, 7, 8, 11, 14, 16, 17, 32, 44, 55, 67, 88, 98, 101, 104, 107, 114, 115, 124, 125, 126, 131, 141, 157, 171, 173, 215, 219, 231, 238, 240, 242, 245, 250, 251, 256], "neural": [2, 15, 16, 20, 21, 32, 35, 36, 38, 44, 47, 49, 51, 53, 59, 70, 77, 88, 89, 91, 93, 97, 98, 99, 100, 101, 102, 103, 105, 108, 110, 114, 121, 126, 128, 129, 131, 138, 139, 140, 141, 142, 149, 162, 171, 173, 174, 176, 179, 180, 181, 184, 194, 212, 219, 227, 231, 236, 250, 251, 267, 270], "network": [2, 7, 11, 14, 15, 16, 20, 32, 35, 36, 37, 38, 39, 44, 47, 49, 51, 53, 59, 70, 71, 77, 88, 89, 91, 93, 97, 98, 99, 101, 102, 104, 105, 106, 108, 110, 114, 121, 124, 126, 128, 131, 137, 138, 141, 142, 145, 146, 161, 162, 165, 167, 171, 176, 180, 183, 184, 194, 212, 219, 222, 227, 231, 236, 250, 251, 254, 267, 270], "api": [2, 3, 4, 8, 9, 10, 11, 12, 13, 16, 17, 18, 22, 25, 33, 34, 36, 38, 41, 42, 50, 58, 84, 89, 110, 113, 115, 125, 126, 130, 131, 132, 133, 135, 136, 137, 138, 141, 146, 148, 153, 154, 155, 159, 160, 166, 168, 169, 175, 176, 177, 183, 184, 187, 189, 190, 192, 199, 200, 201, 202, 206, 214, 216, 217, 221, 230, 238, 239, 240, 241, 242, 243, 244, 245, 248, 250, 251, 252, 255, 256, 267, 270, 274, 275], "explor": [2, 6, 11, 16, 46, 51, 77, 111, 125, 126, 129, 131, 138, 143, 149, 154, 156, 160, 164, 167, 169, 173, 174, 178, 179, 190, 193, 201, 214, 239, 242, 245, 248, 254, 267], "note": [2, 3, 6, 8, 11, 14, 17, 18, 19, 20, 22, 25, 32, 44, 45, 46, 48, 51, 52, 54, 77, 88, 89, 91, 93, 96, 97, 100, 101, 102, 103, 105, 106, 111, 113, 115, 121, 124, 132, 133, 134, 136, 137, 142, 143, 145, 146, 148, 150, 152, 154, 155, 157, 160, 164, 166, 167, 170, 171, 175, 176, 177, 178, 183, 184, 186, 187, 189, 190, 192, 193, 194, 199, 200, 202, 206, 221, 230, 233, 236, 239, 240, 241, 242, 248, 249, 254, 255, 256, 263, 264, 265, 266, 268, 274], "pleas": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 18, 20, 23, 24, 45, 46, 48, 53, 60, 61, 83, 86, 124, 132, 133, 136, 146, 148, 150, 152, 153, 154, 157, 160, 164, 166, 170, 175, 176, 177, 183, 187, 189, 190, 192, 193, 194, 196, 200, 202, 203, 206, 208, 209, 210, 211, 212, 213, 215, 217, 245, 247, 248, 254, 255, 257, 258, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 274], "differenti": [2, 6, 16, 22, 35, 36, 41, 47, 48, 59, 88, 114, 124, 126, 131, 149, 166, 174, 180, 181, 194, 251, 265], "requires_grad": [2, 3, 4, 6, 11, 32, 44, 48, 64, 65, 88, 96, 102, 106, 114, 116, 121, 131, 141, 143, 152, 220, 234, 251, 252], "track": [2, 11, 16, 33, 37, 44, 54, 84, 88, 93, 95, 96, 100, 102, 106, 114, 124, 133, 135, 140, 141, 145, 149, 160, 177, 179, 183, 201, 221, 229, 234, 244, 245, 271], "auto": [2, 6, 7, 8, 11, 12, 14, 57, 132, 133, 154, 170, 189, 190, 206, 216, 230, 248, 257, 267], "x": [2, 3, 6, 7, 8, 14, 22, 32, 41, 44, 48, 50, 51, 54, 64, 65, 69, 70, 71, 74, 75, 77, 88, 91, 93, 96, 98, 99, 100, 102, 106, 114, 115, 118, 124, 132, 134, 136, 137, 139, 140, 141, 143, 146, 148, 152, 155, 165, 166, 167, 169, 170, 172, 175, 176, 177, 184, 186, 187, 189, 192, 199, 200, 202, 212, 216, 230, 240, 242, 245, 256, 257, 258, 267, 268, 270], "std": [2, 6, 7, 8, 14, 17, 53, 91, 98, 170, 172, 177, 214, 216, 257, 263], "cout": [2, 6], "endl": [2, 6], "cpufloattyp": [2, 6], "y": [2, 8, 22, 32, 41, 42, 44, 50, 54, 64, 65, 69, 70, 71, 74, 75, 77, 84, 88, 93, 96, 98, 99, 102, 103, 106, 114, 124, 133, 137, 152, 169, 170, 172, 183, 187, 189, 230, 240, 242, 257, 258, 265, 267], "wa": [2, 3, 8, 13, 18, 20, 45, 53, 54, 77, 88, 89, 91, 93, 96, 97, 98, 99, 100, 102, 106, 111, 115, 124, 132, 136, 138, 141, 146, 148, 156, 161, 164, 165, 166, 167, 169, 171, 172, 173, 174, 177, 178, 179, 184, 189, 190, 193, 200, 212, 215, 216, 221, 223, 224, 225, 226, 235, 245, 248, 256, 265, 266], "result": [2, 3, 4, 6, 7, 11, 12, 14, 16, 20, 25, 32, 37, 39, 41, 44, 45, 53, 65, 69, 84, 85, 86, 88, 89, 91, 96, 97, 98, 102, 106, 111, 114, 115, 118, 124, 133, 134, 135, 136, 137, 140, 146, 148, 149, 152, 154, 155, 156, 161, 166, 167, 170, 171, 172, 174, 175, 176, 177, 178, 184, 186, 187, 189, 192, 193, 197, 199, 205, 206, 218, 220, 221, 228, 230, 231, 235, 236, 239, 240, 242, 243, 244, 248, 249, 250, 252, 254, 256, 264, 265, 266, 267, 268], "grad_fn": [2, 32, 44, 48, 88, 102, 103, 124, 137, 143], "name": [2, 3, 4, 6, 8, 11, 12, 14, 15, 16, 18, 20, 22, 32, 52, 53, 54, 84, 99, 105, 106, 108, 111, 113, 115, 131, 133, 136, 138, 141, 146, 149, 152, 154, 160, 162, 165, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 183, 187, 190, 192, 194, 200, 202, 206, 216, 220, 221, 230, 232, 244, 248, 251, 254, 270, 271], "addbackward1": 2, "z": [2, 54, 96, 102, 124, 189, 265], "27": [2, 53, 154, 177, 216, 244, 256], "mulbackward1": 2, "meanbackward0": 2, "requires_grad_": [2, 32, 102, 124], "exist": [2, 6, 8, 11, 12, 13, 18, 20, 48, 54, 55, 62, 69, 85, 96, 102, 114, 131, 141, 148, 160, 171, 172, 177, 178, 179, 181, 183, 187, 189, 193, 199, 201, 215, 216, 228, 231, 235, 263, 264, 266, 271], "flag": [2, 3, 16, 44, 88, 102, 165, 179, 189, 220, 230, 236, 248, 275], "place": [2, 6, 8, 13, 16, 22, 41, 44, 46, 50, 54, 89, 93, 95, 100, 102, 106, 133, 138, 146, 148, 150, 164, 166, 167, 173, 179, 187, 189, 190, 193, 194, 200, 220, 228, 230, 231, 252, 263, 270, 274], "randn": [2, 3, 4, 6, 7, 14, 69, 102, 103, 114, 115, 141, 146, 152, 166, 175, 177, 206, 216, 245, 249, 256, 257, 258, 267, 270, 274], "b": [2, 3, 4, 6, 20, 22, 32, 42, 44, 64, 65, 69, 85, 88, 96, 100, 103, 105, 106, 113, 114, 124, 137, 139, 140, 154, 155, 157, 172, 174, 187, 189, 190, 193, 216, 221, 240, 254, 258, 267], "sumbackward0": 2, "backprop": [2, 44, 102, 106, 139, 156], "scalar": [2, 16, 17, 32, 44, 51, 54, 64, 88, 91, 96, 102, 114, 124, 184, 189, 205], "backward": [2, 3, 4, 6, 7, 11, 13, 14, 15, 17, 18, 19, 32, 37, 44, 46, 48, 54, 64, 65, 69, 74, 75, 88, 89, 91, 97, 102, 103, 106, 114, 121, 124, 125, 130, 131, 132, 136, 137, 140, 144, 146, 148, 152, 155, 161, 166, 169, 175, 176, 177, 180, 183, 184, 189, 190, 193, 194, 197, 198, 199, 200, 205, 215, 221, 231, 234, 242, 244, 249, 251], "equival": [2, 8, 13, 32, 44, 88, 100, 114, 134, 152, 166, 169, 174, 176, 189, 190, 193, 231, 246, 257, 263, 265, 268], "print": [2, 6, 8, 13, 16, 22, 33, 38, 45, 46, 51, 53, 54, 55, 69, 77, 86, 88, 91, 93, 96, 98, 100, 103, 105, 106, 107, 110, 114, 115, 118, 124, 132, 133, 134, 135, 140, 141, 142, 145, 146, 148, 149, 154, 165, 166, 169, 170, 172, 175, 176, 177, 179, 184, 186, 187, 189, 190, 193, 197, 199, 200, 201, 202, 206, 215, 216, 221, 222, 230, 231, 233, 246, 249, 254, 256, 258, 263, 265, 271], "d": [2, 3, 6, 8, 11, 38, 42, 54, 62, 64, 65, 69, 88, 89, 91, 93, 96, 100, 105, 106, 114, 133, 136, 138, 140, 142, 148, 155, 156, 164, 169, 183, 189, 193, 202, 243, 266], "dx": [2, 65, 100, 114, 143], "grad": [2, 3, 6, 14, 18, 32, 44, 48, 64, 88, 102, 106, 114, 124, 132, 137, 141, 143, 146, 148, 152, 155, 161, 164, 175, 176, 177, 193, 198, 205, 215, 234, 263, 274], "5000": [2, 216], "got": [2, 17, 57, 89, 96, 99, 100, 102, 106, 146, 170, 176, 189, 245], "matrix": [2, 6, 14, 20, 32, 41, 44, 50, 84, 88, 91, 93, 96, 99, 100, 102, 105, 106, 113, 136, 139, 140, 155, 161, 165, 178, 179, 189, 190, 193, 194, 206, 212, 218, 231, 244, 266, 268, 274], "explan": [2, 54, 184, 220], "arriv": [2, 6, 17, 133, 146, 175, 231], "valu": [2, 3, 6, 7, 8, 14, 16, 22, 32, 33, 37, 41, 42, 44, 48, 50, 51, 52, 57, 64, 77, 84, 86, 88, 89, 91, 93, 96, 97, 98, 100, 102, 103, 105, 106, 108, 114, 124, 136, 137, 138, 141, 145, 146, 148, 152, 153, 156, 160, 166, 169, 170, 174, 175, 176, 177, 178, 179, 183, 187, 190, 193, 194, 198, 214, 215, 216, 221, 228, 229, 235, 239, 248, 249, 252, 254, 263, 264, 265, 266, 268, 270, 275], "section": [2, 3, 6, 11, 13, 17, 22, 33, 34, 36, 37, 38, 39, 41, 44, 45, 48, 52, 53, 54, 77, 89, 92, 96, 97, 98, 99, 100, 103, 105, 106, 111, 124, 126, 128, 130, 134, 137, 141, 142, 148, 152, 154, 156, 161, 167, 174, 175, 177, 183, 189, 190, 192, 193, 198, 205, 206, 212, 215, 216, 220, 231, 240, 244, 264, 265], "look": [2, 3, 6, 8, 11, 12, 13, 14, 16, 19, 22, 34, 39, 41, 44, 45, 48, 50, 51, 52, 53, 54, 57, 77, 86, 88, 89, 91, 93, 95, 96, 97, 99, 100, 102, 103, 105, 106, 107, 108, 115, 121, 124, 128, 132, 134, 136, 137, 138, 143, 148, 149, 150, 157, 161, 164, 167, 171, 172, 173, 176, 177, 178, 179, 183, 184, 189, 190, 192, 193, 195, 201, 205, 216, 218, 221, 229, 230, 232, 233, 234, 236, 240, 244, 257, 263, 266, 268, 270], "jacobian": [2, 44, 88, 126, 131, 152, 180, 251, 274], "product": [2, 6, 41, 44, 50, 88, 100, 108, 125, 126, 129, 131, 133, 148, 152, 169, 179, 180, 190, 242, 251, 252, 274], "norm": [2, 16, 20, 54, 93, 98, 125, 130, 131, 136, 165, 169, 171, 180, 193, 251], "1021": 2, "4020": 2, "314": 2, "6695": 2, "613": 2, "4944": 2, "v": [2, 20, 22, 25, 32, 44, 54, 55, 57, 88, 95, 97, 102, 103, 105, 133, 136, 152, 166, 174, 176, 183, 184, 193, 243, 255, 256, 265, 275], "0001": [2, 86, 154], "kfloat": [2, 3, 4, 257], "102": 2, "4000": [2, 91, 230], "1024": [2, 22, 84, 98, 135, 197, 216, 256], "0000": 2, "stop": [2, 32, 86, 88, 102, 140, 157, 164, 173, 175, 179, 183, 206, 221, 254], "histori": [2, 32, 41, 48, 50, 88, 96, 102, 141, 171], "put": [2, 6, 11, 14, 16, 19, 33, 46, 51, 53, 91, 93, 96, 126, 131, 132, 133, 148, 149, 165, 173, 174, 176, 177], "nogradguard": 2, "block": [2, 3, 4, 6, 8, 11, 12, 14, 20, 32, 33, 48, 51, 84, 88, 102, 107, 132, 135, 136, 148, 149, 154, 167, 169, 175, 176, 177, 178, 183, 231, 235, 236, 252, 256, 267], "pow": [2, 263], "no_grad": [2, 32, 44, 88, 100, 102, 103, 106, 114, 132, 133, 156, 172, 176, 184, 189, 231, 256, 267, 270], "Or": [2, 141, 164, 177], "content": [2, 3, 16, 52, 58, 95, 96, 97, 115, 122, 137, 146, 148, 167, 172, 173, 177, 179, 187, 189, 207, 214, 216, 230, 244, 245, 254], "eq": [2, 51, 132, 176, 189, 221], "bool": [2, 13, 16, 17, 170, 248, 267], "is_leaf": [2, 124], "detach_": [2, 177], "register_hook": [2, 141], "retain_grad": [2, 116, 131, 194, 251], "doc": [2, 3, 6, 9, 51, 64, 77, 88, 96, 97, 98, 113, 114, 121, 134, 145, 146, 148, 152, 153, 167, 175, 177, 189, 190, 206, 212, 215, 229, 243, 244, 256, 268, 274], "applic": [2, 13, 14, 16, 17, 34, 51, 62, 89, 93, 98, 108, 121, 126, 127, 128, 131, 132, 137, 138, 142, 146, 153, 164, 167, 171, 175, 177, 189, 199, 200, 205, 206, 212, 231, 244, 248, 256, 265, 271], "calcul": [2, 14, 20, 32, 37, 44, 45, 51, 54, 58, 77, 84, 86, 88, 89, 91, 97, 98, 106, 124, 139, 140, 156, 160, 174, 175, 177, 178, 179, 190, 193, 202, 234, 252, 265], "penalti": [2, 165, 172, 215], "h": [2, 3, 4, 6, 7, 8, 11, 12, 51, 136, 154, 157, 169, 170, 192, 230, 248], "model": [2, 8, 11, 13, 16, 19, 25, 32, 34, 35, 36, 41, 42, 44, 45, 48, 50, 54, 55, 56, 58, 64, 67, 69, 70, 71, 86, 88, 90, 92, 96, 99, 100, 101, 102, 104, 106, 109, 110, 111, 113, 114, 116, 125, 126, 127, 128, 129, 131, 132, 138, 139, 140, 141, 142, 145, 148, 152, 154, 155, 160, 162, 164, 165, 166, 173, 174, 175, 176, 177, 178, 180, 186, 187, 189, 190, 193, 194, 199, 200, 201, 202, 206, 215, 219, 220, 222, 227, 228, 229, 234, 236, 240, 242, 243, 248, 249, 250, 251, 252, 254, 256, 257, 267, 268, 271, 274, 275], "linear": [2, 6, 13, 19, 20, 41, 44, 46, 48, 50, 70, 77, 91, 96, 101, 103, 113, 114, 115, 121, 132, 134, 136, 139, 140, 141, 146, 152, 154, 155, 165, 166, 169, 175, 176, 177, 179, 184, 189, 193, 194, 197, 198, 199, 200, 201, 202, 205, 212, 215, 220, 222, 228, 229, 233, 236, 249, 256, 263, 267, 268, 270], "loss": [2, 6, 13, 16, 19, 20, 21, 32, 38, 41, 44, 50, 67, 69, 70, 71, 74, 75, 77, 86, 88, 91, 95, 100, 103, 105, 106, 114, 115, 124, 128, 131, 132, 133, 134, 139, 141, 148, 156, 157, 166, 169, 174, 176, 177, 179, 183, 184, 190, 206, 229, 249, 251], "target": [2, 6, 8, 16, 19, 22, 37, 45, 48, 51, 57, 77, 89, 96, 98, 100, 103, 105, 106, 111, 132, 140, 148, 149, 154, 164, 166, 167, 169, 170, 172, 174, 175, 176, 177, 179, 184, 187, 189, 192, 206, 212, 214, 216, 218, 270], "mseloss": [2, 14, 37, 48, 69, 114, 146, 175, 199, 200, 249], "grad_output": [2, 11, 12], "ones_lik": [2, 96], "create_graph": [2, 143], "gradient_penalti": 2, "dim": [2, 13, 33, 42, 91, 96, 103, 132, 134, 166, 169, 171, 172, 175, 176, 177, 184, 245, 252, 264, 265], "add": [2, 3, 4, 6, 7, 8, 9, 11, 12, 14, 16, 17, 18, 20, 37, 45, 48, 52, 77, 86, 93, 96, 97, 100, 103, 111, 118, 130, 131, 132, 133, 136, 140, 141, 142, 148, 149, 153, 154, 155, 164, 166, 167, 170, 172, 173, 175, 176, 177, 179, 183, 186, 189, 193, 200, 216, 218, 221, 242, 246, 252, 256, 257, 263, 265, 271], "combined_loss": 2, "1042": 2, "0638": 2, "0103": 2, "0723": 2, "2543": 2, "1222": 2, "0071": 2, "0814": 2, "1683": 2, "1052": 2, "0355": 2, "document": [2, 3, 6, 18, 32, 48, 54, 62, 84, 86, 88, 89, 93, 95, 96, 97, 102, 115, 121, 131, 146, 148, 149, 152, 153, 154, 160, 176, 177, 178, 183, 187, 189, 192, 200, 206, 231, 239, 240, 242, 243, 246, 255, 256, 265, 270, 274], "link": [2, 6, 8, 12, 14, 36, 38, 54, 84, 92, 106, 108, 118, 148, 152, 245, 265, 267], "ad": [2, 6, 7, 12, 17, 22, 25, 32, 51, 52, 55, 77, 85, 88, 91, 93, 95, 96, 97, 100, 102, 115, 132, 133, 139, 140, 141, 146, 149, 152, 155, 161, 164, 170, 174, 178, 179, 189, 192, 228, 230, 233, 243, 271], "subclass": [2, 6, 16, 20, 33, 34, 69, 88, 91, 93, 106, 114, 134, 138, 149, 171, 176, 184, 192, 214, 215, 219, 227, 242, 250, 251, 256, 265, 268], "encod": [2, 16, 41, 42, 48, 50, 93, 101, 104, 133, 138, 149, 165, 173, 177, 193, 215, 245, 251, 256], "method": [2, 3, 6, 7, 11, 12, 13, 14, 16, 19, 20, 32, 33, 39, 41, 45, 48, 51, 53, 57, 69, 77, 85, 88, 89, 91, 93, 95, 96, 98, 100, 102, 106, 107, 114, 115, 127, 131, 135, 138, 139, 143, 146, 149, 152, 153, 154, 155, 156, 160, 165, 166, 167, 169, 170, 171, 173, 174, 175, 176, 184, 187, 189, 190, 193, 194, 199, 200, 206, 214, 215, 218, 229, 230, 231, 236, 245, 248, 263, 267, 270], "forward": [2, 7, 8, 11, 12, 13, 14, 16, 17, 19, 32, 33, 38, 44, 46, 48, 51, 54, 58, 64, 65, 67, 69, 74, 75, 88, 91, 93, 96, 98, 99, 100, 101, 103, 106, 107, 114, 115, 121, 124, 126, 131, 132, 133, 136, 137, 139, 142, 143, 144, 146, 148, 160, 161, 164, 165, 166, 169, 171, 174, 175, 176, 177, 179, 180, 183, 184, 187, 189, 190, 194, 198, 199, 200, 201, 202, 205, 212, 215, 218, 221, 222, 231, 245, 249, 251, 267], "detail": [2, 3, 4, 6, 11, 12, 14, 17, 18, 19, 34, 37, 44, 45, 46, 54, 55, 77, 84, 85, 93, 96, 97, 107, 111, 132, 134, 136, 138, 140, 142, 144, 146, 152, 154, 160, 161, 164, 177, 178, 183, 184, 186, 187, 189, 190, 198, 201, 205, 206, 212, 214, 215, 216, 220, 230, 231, 240, 245, 252, 254, 263, 264, 265, 266, 270, 271, 274], "namespac": [2, 3, 4, 6, 7, 8, 11, 12, 33, 106, 111, 170, 187, 268], "inherit": [2, 8, 13, 17, 38, 53, 91, 96, 97, 100, 153, 156, 173, 192, 245, 254, 265, 268], "linearfunct": 2, "public": [2, 4, 11, 12, 17, 134, 170], "static": [2, 3, 4, 11, 12, 16, 88, 152, 170, 189, 190, 231, 256], "option": [2, 3, 4, 6, 11, 12, 13, 36, 45, 47, 49, 53, 55, 84, 86, 88, 89, 92, 93, 96, 98, 108, 111, 113, 125, 127, 134, 135, 138, 144, 149, 150, 154, 157, 167, 169, 171, 172, 187, 189, 190, 205, 215, 216, 221, 231, 239, 240, 243, 244, 246, 251, 254, 256], "autogradcontext": [2, 11, 12], "ctx": [2, 3, 11, 12, 22, 143, 152], "save_for_backward": [2, 3, 143], "mm": [2, 256, 257], "t": [2, 6, 7, 8, 9, 11, 12, 13, 15, 16, 17, 18, 20, 25, 32, 36, 37, 41, 44, 45, 48, 52, 54, 55, 57, 62, 69, 77, 86, 88, 89, 91, 93, 96, 98, 99, 100, 102, 103, 105, 106, 108, 111, 114, 115, 121, 124, 132, 133, 137, 143, 149, 150, 152, 153, 154, 155, 156, 157, 161, 164, 166, 167, 171, 173, 174, 175, 177, 178, 179, 184, 186, 187, 189, 190, 193, 194, 197, 198, 205, 212, 215, 216, 218, 230, 231, 232, 233, 234, 241, 242, 243, 245, 246, 248, 252, 254, 256, 263, 264, 265, 267, 274], "unsqueez": [2, 16, 48, 70, 96, 114, 166, 172, 175, 177, 184, 214], "expand_a": 2, "tensor_list": [2, 11, 12, 148], "save": [2, 3, 6, 8, 13, 14, 32, 33, 34, 35, 36, 37, 41, 42, 45, 50, 51, 52, 54, 77, 86, 95, 97, 98, 116, 121, 131, 132, 134, 136, 138, 142, 154, 155, 169, 171, 175, 176, 177, 179, 180, 183, 190, 206, 218, 219, 220, 221, 229, 230, 231, 233, 234, 236, 240, 244, 250, 251, 254, 272], "get_saved_vari": 2, "grad_input": [2, 143], "grad_weight": 2, "grad_bia": 2, "Then": [2, 3, 8, 14, 17, 20, 25, 45, 46, 54, 77, 99, 100, 103, 105, 106, 111, 118, 132, 146, 164, 169, 170, 171, 173, 174, 175, 177, 179, 183, 202, 228, 252, 271], "appli": [2, 6, 11, 12, 16, 17, 20, 32, 33, 42, 53, 54, 70, 84, 88, 91, 93, 96, 98, 100, 114, 128, 131, 132, 134, 139, 141, 142, 143, 146, 148, 150, 152, 155, 156, 157, 160, 161, 164, 165, 166, 169, 171, 173, 175, 176, 177, 179, 181, 186, 189, 190, 192, 193, 194, 197, 200, 201, 202, 206, 214, 228, 231, 235, 236, 239, 242, 244, 246, 252, 254, 256, 263, 264, 268, 274], "5314": 2, "2807": 2, "4864": 2, "7608": 2, "9101": 2, "0073": 2, "mulconst": 2, "object": [2, 3, 6, 7, 8, 12, 13, 16, 21, 32, 33, 34, 37, 38, 44, 51, 54, 88, 89, 91, 93, 96, 98, 102, 103, 106, 114, 115, 121, 128, 129, 131, 137, 139, 142, 148, 152, 153, 160, 166, 167, 170, 172, 175, 176, 177, 178, 180, 183, 184, 189, 199, 200, 214, 216, 228, 230, 231, 233, 236, 245, 250, 251, 252, 268], "stash": 2, "saved_data": 2, "were": [2, 6, 14, 20, 22, 32, 54, 85, 88, 93, 96, 98, 100, 102, 106, 118, 138, 141, 145, 146, 150, 157, 165, 173, 174, 176, 178, 179, 186, 189, 190, 193, 205, 212, 216, 220, 221, 228, 245, 248, 255, 263, 274], "todoubl": 2, "On": [2, 6, 8, 11, 92, 96, 106, 121, 133, 146, 148, 157, 165, 171, 175, 176, 187, 190, 192, 193, 194, 212, 215, 231, 248, 275], "easiest": [2, 36, 92, 106, 155, 173, 189, 231], "your": [2, 3, 4, 6, 8, 9, 11, 13, 14, 17, 18, 20, 21, 22, 32, 33, 36, 38, 44, 45, 46, 48, 51, 52, 53, 55, 56, 57, 69, 77, 84, 86, 88, 89, 92, 93, 96, 97, 100, 102, 103, 105, 107, 108, 110, 111, 114, 115, 116, 118, 125, 126, 128, 129, 131, 132, 133, 134, 137, 139, 142, 143, 144, 145, 146, 148, 149, 152, 153, 155, 156, 157, 160, 162, 164, 165, 167, 170, 171, 172, 173, 176, 177, 178, 181, 183, 184, 187, 189, 190, 193, 195, 197, 201, 214, 215, 216, 221, 229, 230, 232, 233, 234, 235, 236, 242, 243, 244, 245, 250, 251, 254, 257, 258, 267, 271, 274, 275], "tabl": [2, 19, 105, 113, 131, 133, 148, 154, 176, 177, 183, 189, 190, 216, 221], "set_data": 2, "data": [2, 3, 7, 8, 9, 13, 14, 16, 19, 20, 22, 25, 32, 33, 36, 37, 41, 42, 44, 47, 48, 49, 50, 53, 62, 69, 74, 75, 77, 84, 88, 89, 91, 95, 97, 98, 99, 100, 101, 102, 103, 105, 108, 114, 115, 127, 128, 131, 137, 138, 144, 148, 149, 150, 153, 154, 155, 156, 157, 161, 162, 164, 166, 167, 169, 172, 174, 175, 176, 177, 187, 192, 193, 194, 200, 201, 202, 206, 212, 214, 215, 216, 220, 221, 222, 228, 229, 235, 236, 244, 245, 249, 250, 251, 255, 256, 264, 266, 267, 268, 270, 274, 275], "output_nr": 2, "after": [2, 6, 7, 12, 14, 16, 17, 18, 20, 22, 25, 32, 33, 34, 41, 44, 46, 48, 51, 54, 55, 86, 88, 89, 93, 98, 99, 100, 103, 105, 106, 108, 115, 124, 131, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 148, 149, 150, 154, 156, 157, 160, 164, 165, 167, 169, 170, 171, 173, 174, 176, 177, 179, 181, 183, 184, 189, 190, 192, 194, 200, 215, 216, 220, 221, 228, 229, 231, 240, 242, 244, 249, 270, 271], "file": [2, 3, 4, 6, 8, 11, 12, 17, 21, 40, 49, 52, 53, 54, 57, 66, 72, 76, 84, 85, 86, 88, 89, 94, 102, 104, 106, 112, 113, 116, 118, 133, 137, 139, 140, 146, 148, 154, 160, 164, 167, 170, 172, 180, 183, 189, 192, 200, 201, 202, 215, 216, 220, 221, 227, 229, 230, 232, 238, 239, 240, 244, 245, 248, 251, 252, 255, 257, 258, 266, 267, 268, 271, 272], "bug": [2, 12, 95, 154, 193, 245, 254, 257, 267], "report": [2, 12, 20, 54, 77, 86, 88, 91, 93, 97, 125, 131, 135, 154, 167, 175, 177, 178, 221, 242, 254, 257, 267], "github": [2, 6, 7, 8, 12, 13, 19, 25, 51, 55, 56, 57, 62, 111, 132, 133, 135, 136, 144, 145, 146, 148, 150, 156, 166, 169, 170, 175, 176, 177, 183, 192, 200, 202, 206, 214, 245, 252, 255, 256, 257, 267], "issu": [2, 6, 7, 8, 11, 53, 124, 133, 134, 145, 150, 153, 154, 157, 166, 167, 183, 187, 189, 190, 193, 194, 200, 201, 212, 215, 217, 228, 245, 254, 255, 256, 257, 263, 265, 267, 268, 271], "fix": [2, 16, 20, 25, 32, 51, 52, 53, 54, 98, 124, 137, 174, 175, 194, 212, 230, 231, 243, 256], "soon": [2, 54, 157, 164, 199], "overview": [2, 6, 13, 55, 57, 91, 126, 127, 131, 139, 140, 146, 148, 170, 173, 175, 176, 177, 179, 183, 193, 197, 251, 263, 264, 266, 272, 275], "alwai": [2, 3, 4, 6, 8, 16, 19, 22, 42, 54, 91, 93, 97, 103, 105, 106, 134, 135, 136, 137, 142, 148, 149, 160, 167, 172, 173, 174, 175, 177, 189, 190, 192, 243, 263, 267], "problem": [2, 6, 8, 13, 16, 17, 22, 51, 53, 54, 99, 101, 105, 106, 114, 121, 138, 149, 154, 155, 165, 173, 175, 177, 183, 186, 187, 190, 216, 217, 220, 231, 245, 248, 263, 265], "question": [2, 6, 8, 11, 12, 20, 51, 89, 133, 148, 153, 179, 190, 216, 264], "forum": [2, 6, 8, 45, 124, 153, 194], "touch": [2, 6, 8, 16], "richard": 3, "zou": 3, "integr": [3, 4, 6, 12, 16, 18, 36, 86, 107, 111, 113, 130, 131, 138, 141, 152, 160, 169, 183, 184, 187, 193, 199, 212, 214, 228, 233, 242, 248, 267, 271, 275], "opcheck": [3, 18], "prerequisit": [3, 4, 6, 18, 55, 57, 58, 101, 118, 133, 135, 136, 141, 144, 145, 146, 148, 149, 157, 169, 170, 175, 176, 177, 186, 190, 193, 199, 200, 202, 231, 252, 255, 271], "basic": [3, 4, 11, 13, 17, 18, 19, 25, 32, 33, 34, 37, 38, 39, 40, 41, 42, 51, 56, 58, 59, 75, 79, 82, 88, 91, 92, 93, 96, 98, 101, 105, 106, 107, 108, 110, 111, 114, 124, 125, 131, 136, 139, 142, 154, 162, 169, 173, 178, 190, 193, 194, 195, 199, 200, 216, 229, 239, 240, 244, 245, 250, 251, 264, 268], "program": [3, 4, 6, 9, 22, 62, 93, 99, 101, 102, 105, 131, 136, 139, 153, 160, 167, 169, 176, 187, 200, 216, 231, 235, 244, 245, 248, 252, 254, 258, 271], "amd": 3, "rocm": [3, 183], "modif": [3, 16, 17, 86, 99, 106, 142, 148, 171, 173, 176, 181, 184, 189, 193, 230, 236, 245], "larg": [3, 4, 6, 9, 14, 18, 19, 20, 22, 37, 41, 51, 62, 86, 89, 93, 95, 98, 103, 105, 106, 108, 114, 121, 127, 131, 132, 133, 135, 138, 142, 146, 148, 150, 160, 161, 167, 169, 173, 174, 176, 177, 178, 187, 190, 192, 197, 202, 215, 221, 222, 231, 235, 236, 252, 254, 256, 265], "e": [3, 4, 6, 7, 8, 9, 11, 12, 13, 18, 22, 32, 33, 38, 44, 45, 51, 53, 54, 62, 77, 86, 88, 91, 93, 96, 98, 101, 105, 106, 115, 121, 124, 126, 131, 132, 134, 135, 136, 138, 139, 140, 143, 145, 146, 148, 150, 157, 160, 165, 166, 170, 171, 175, 177, 179, 183, 186, 187, 189, 193, 194, 202, 205, 206, 216, 218, 221, 230, 231, 233, 234, 256, 265, 266, 268, 270, 274, 275], "g": [3, 4, 6, 7, 9, 11, 12, 13, 16, 18, 22, 44, 51, 53, 54, 62, 86, 88, 91, 93, 96, 98, 100, 101, 105, 121, 124, 126, 131, 132, 134, 138, 139, 140, 146, 148, 150, 154, 160, 164, 166, 170, 173, 175, 177, 179, 183, 187, 189, 193, 194, 202, 205, 206, 216, 221, 230, 231, 256, 257, 266, 270, 274, 275], "etc": [3, 4, 9, 12, 18, 45, 46, 48, 51, 53, 71, 91, 93, 96, 99, 100, 101, 102, 103, 106, 115, 124, 136, 167, 171, 173, 174, 179, 189, 190, 193, 194, 216, 218, 231, 233, 265, 270], "wish": [3, 4, 6, 9, 18, 54, 77, 89, 96, 115, 135, 161, 166, 176, 190, 200, 215, 243, 264], "bring": [3, 4, 9, 89, 135, 167, 173, 183, 190, 221, 231, 248, 256, 266, 274], "demonstr": [3, 4, 8, 16, 18, 19, 20, 39, 44, 52, 59, 84, 89, 91, 97, 107, 111, 125, 127, 128, 131, 132, 133, 135, 136, 137, 142, 143, 146, 150, 152, 153, 154, 157, 160, 161, 167, 169, 170, 173, 175, 176, 177, 178, 183, 186, 189, 190, 193, 194, 198, 199, 200, 202, 205, 215, 216, 220, 221, 234, 235, 239, 241, 242, 243, 244, 246, 248, 249, 250, 252, 254, 255, 256, 257, 265, 267, 268, 270, 271], "bless": 3, "path": [3, 4, 6, 8, 22, 34, 51, 52, 54, 55, 77, 84, 86, 88, 91, 96, 97, 98, 99, 106, 115, 132, 133, 154, 160, 170, 187, 193, 199, 200, 206, 212, 216, 228, 230, 231, 232, 235, 248, 254, 255, 256, 263, 270], "fuse": [3, 4, 20, 125, 129, 130, 131, 154, 172, 180, 193, 205, 250, 251, 256, 267], "subsystem": [3, 9, 18, 189, 242], "semant": [3, 6, 8, 51, 70, 96, 101, 103, 104, 114, 134, 148, 189, 190, 251, 265, 266, 268, 272, 274, 275], "def": [3, 4, 6, 7, 8, 11, 13, 16, 22, 55, 57, 69, 103, 114, 115, 132, 133, 134, 135, 136, 141, 143, 146, 148, 152, 154, 160, 165, 166, 169, 170, 175, 176, 177, 184, 197, 199, 200, 202, 206, 212, 216, 230, 240, 245, 249, 252, 256, 257, 258, 263, 267, 270, 271], "mymuladd": [3, 4], "code": [3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 25, 32, 33, 34, 38, 39, 41, 42, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 64, 65, 67, 69, 70, 71, 74, 75, 77, 84, 85, 86, 88, 89, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 110, 111, 113, 114, 115, 118, 121, 124, 125, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 186, 187, 189, 190, 192, 193, 194, 195, 198, 200, 201, 202, 205, 214, 215, 216, 217, 218, 220, 221, 222, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 254, 255, 256, 264, 265, 266, 267, 268, 271, 274], "bind": [3, 4, 6, 7, 9, 12, 135, 231, 248, 255], "precompil": [3, 256], "instead": [3, 5, 6, 9, 11, 12, 18, 20, 23, 24, 32, 45, 46, 51, 53, 54, 55, 65, 88, 91, 96, 99, 100, 105, 106, 113, 114, 121, 132, 133, 134, 137, 138, 140, 143, 144, 148, 152, 153, 155, 156, 157, 160, 161, 164, 170, 171, 172, 175, 176, 177, 179, 181, 183, 184, 186, 187, 189, 190, 192, 193, 194, 200, 203, 207, 212, 222, 236, 241, 243, 247, 249, 256, 263, 265, 266, 267, 268, 274], "util": [3, 4, 6, 8, 12, 17, 25, 34, 38, 45, 51, 53, 55, 57, 84, 91, 95, 97, 106, 113, 114, 115, 121, 126, 131, 132, 133, 134, 136, 139, 141, 148, 152, 154, 155, 157, 160, 165, 166, 167, 169, 170, 172, 173, 176, 178, 179, 183, 184, 187, 192, 197, 199, 200, 212, 214, 215, 229, 230, 238, 240, 242, 244, 248, 250, 251, 255, 256, 268, 270], "cpp_extens": [3, 4, 12, 170, 216], "extens": [3, 6, 9, 17, 21, 54, 89, 115, 129, 131, 134, 141, 143, 148, 216, 219, 227, 241, 250, 251, 257, 263, 265, 275], "ahead": [3, 8, 37, 91, 141, 164, 184, 189, 200, 231, 244], "time": [3, 6, 7, 11, 13, 14, 15, 16, 17, 18, 20, 32, 33, 34, 37, 38, 39, 41, 42, 44, 45, 46, 48, 50, 51, 52, 53, 54, 62, 67, 70, 74, 75, 77, 85, 86, 88, 89, 91, 93, 95, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 108, 111, 114, 115, 118, 121, 124, 125, 129, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 161, 164, 165, 166, 167, 171, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 187, 189, 190, 192, 193, 194, 198, 199, 200, 205, 206, 212, 215, 216, 217, 219, 220, 222, 228, 231, 241, 242, 243, 244, 246, 250, 254, 256, 263, 264, 265, 266, 267, 268, 270, 274, 275], "setuptool": [3, 4, 12, 170, 183], "load_inlin": [3, 216], "setup": [3, 4, 6, 12, 19, 36, 54, 55, 57, 132, 133, 138, 146, 160, 164, 170, 177, 199, 200, 202, 216, 230, 254, 256, 265, 266, 271, 274], "import": [3, 4, 6, 7, 8, 11, 12, 13, 16, 20, 22, 25, 32, 42, 44, 48, 51, 52, 53, 54, 55, 69, 77, 84, 88, 89, 91, 93, 95, 96, 98, 100, 103, 106, 110, 114, 115, 118, 124, 132, 133, 134, 135, 136, 141, 142, 143, 146, 148, 149, 152, 153, 160, 164, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 183, 184, 186, 187, 189, 190, 194, 197, 198, 199, 200, 202, 206, 212, 214, 216, 228, 229, 230, 231, 235, 236, 240, 245, 246, 248, 249, 252, 254, 256, 257, 258, 263, 265, 266, 267, 268, 270, 271], "extension_cpp": 3, "ext_modul": [3, 4, 12, 170], "cppextens": [3, 12, 170], "muladd": [3, 4], "cpp": [3, 6, 8, 11, 127, 131, 154, 230, 244, 267, 275], "py_limited_api": [3, 4], "min": [3, 54, 84, 93, 98, 121, 148, 170, 173, 175, 177, 189, 245], "9": [3, 6, 20, 22, 34, 40, 44, 51, 86, 91, 105, 106, 113, 115, 154, 165, 172, 175, 184, 190, 214, 216, 218, 221, 238, 256, 258], "expos": [3, 6, 8, 11, 97, 134, 177, 190, 231, 271], "stabl": [3, 26, 27, 28, 29, 30, 51, 64, 77, 98, 99, 114, 121, 135, 146, 151, 172, 182, 183, 185, 206, 215, 256, 273], "limit": [3, 6, 12, 13, 17, 20, 39, 51, 62, 77, 132, 136, 139, 149, 150, 156, 157, 166, 167, 179, 186, 187, 189, 190, 199, 216, 228, 256], "subset": [3, 16, 86, 91, 95, 98, 110, 121, 148, 170, 216, 265, 266], "extra_compile_arg": [3, 4, 12], "cxx": [3, 4, 6, 8, 258], "dpy_limited_api": [3, 4], "0x03090000": [3, 4], "wheel": [3, 51, 98, 173, 183, 275], "cmdclass": [3, 4, 12, 170], "build_ext": [3, 4, 12, 170], "buildextens": [3, 4, 12, 170], "bdist_wheel": [3, 4], "cp39": [3, 4], "cu": 3, "cudaextens": [3, 170], "cpython": [3, 230], "agnost": [3, 186, 217], "pure": [3, 6, 12, 139, 143, 150, 166, 189, 192, 257, 267], "agnostic": 3, "minim": [3, 6, 12, 14, 20, 37, 54, 64, 65, 69, 70, 71, 74, 75, 77, 84, 88, 100, 105, 106, 114, 125, 131, 133, 138, 145, 154, 169, 174, 187, 231, 234, 236, 263, 270], "releas": [3, 6, 12, 20, 25, 52, 113, 115, 132, 133, 137, 152, 160, 164, 176, 178, 183, 199, 221, 231, 236, 245], "oldest": 3, "hexcod": 3, "throughout": [3, 14, 54, 103, 148, 164, 167, 173, 184, 228, 265], "environ": [3, 4, 6, 7, 9, 13, 18, 21, 22, 36, 57, 84, 89, 92, 95, 108, 118, 128, 131, 132, 133, 136, 141, 145, 146, 148, 154, 160, 167, 169, 170, 174, 175, 176, 177, 187, 189, 190, 193, 199, 200, 201, 202, 206, 212, 214, 216, 230, 231, 239, 244, 246, 248, 249, 251, 252, 254, 267, 271], "unknown": 3, "behavior": [3, 7, 8, 11, 12, 13, 14, 16, 37, 51, 53, 93, 103, 106, 107, 124, 149, 153, 154, 157, 160, 164, 167, 187, 189, 220, 231, 241, 243, 248, 264, 265], "runnabl": [3, 138, 154, 234], "three": [3, 6, 12, 14, 16, 17, 34, 37, 53, 54, 65, 77, 84, 88, 89, 95, 96, 99, 106, 111, 114, 115, 131, 135, 136, 139, 140, 157, 162, 165, 167, 170, 173, 177, 178, 179, 181, 183, 184, 190, 212, 221, 254, 256, 266, 267], "line": [3, 6, 8, 11, 14, 18, 51, 52, 53, 57, 58, 84, 91, 95, 96, 97, 98, 100, 106, 113, 138, 139, 140, 146, 148, 154, 174, 176, 177, 179, 183, 184, 187, 189, 199, 200, 202, 220, 229, 231, 245, 246, 248, 254, 257, 258, 263, 265], "specif": [3, 4, 6, 8, 11, 12, 13, 20, 22, 34, 38, 45, 57, 77, 84, 86, 88, 89, 91, 93, 95, 97, 100, 101, 102, 106, 107, 108, 110, 111, 115, 118, 124, 128, 132, 133, 136, 139, 140, 142, 148, 149, 154, 167, 169, 171, 173, 175, 176, 177, 178, 179, 183, 184, 186, 189, 190, 192, 193, 199, 200, 212, 214, 221, 228, 230, 239, 242, 244, 248, 249, 250, 264, 267, 268, 270, 271], "would": [3, 6, 8, 11, 16, 18, 19, 22, 32, 44, 51, 55, 57, 77, 86, 88, 91, 93, 96, 98, 102, 103, 105, 106, 111, 115, 121, 124, 132, 135, 136, 137, 138, 139, 140, 142, 143, 146, 149, 153, 154, 155, 157, 164, 165, 166, 170, 172, 173, 174, 175, 176, 177, 179, 187, 189, 190, 192, 193, 194, 200, 202, 212, 239, 240, 244, 248, 254, 255, 265, 266, 274, 275], "verifi": [3, 4, 6, 88, 96, 111, 118, 124, 143, 150, 152, 155, 157, 171, 172, 186, 190, 192, 194, 212, 255], "met": [3, 16, 132, 167], "crash": [3, 6, 254], "wors": 3, "silent": [3, 18, 154, 187, 228], "incorrect": [3, 18, 54, 88, 91, 137, 143, 167, 187], "avoid": [3, 19, 45, 86, 95, 98, 132, 133, 134, 136, 142, 146, 148, 157, 161, 164, 173, 175, 187, 189, 194, 199, 215, 216, 220, 221, 228, 239, 248, 255, 256, 263, 264, 268, 271], "unstabl": [3, 272], "libtorch_python": 3, "particular": [3, 6, 11, 13, 34, 45, 53, 84, 85, 86, 88, 89, 91, 93, 105, 128, 138, 139, 141, 148, 150, 161, 166, 169, 176, 189, 192, 193, 220, 231, 239, 263, 264, 266, 268], "libtorch": [3, 6, 8], "aten": [3, 4, 11, 12, 17, 111, 113, 154, 183, 189, 212, 221, 230, 257, 267, 270], "strongli": [3, 17, 149, 165, 193], "recommend": [3, 6, 9, 11, 12, 17, 22, 62, 84, 89, 95, 106, 108, 110, 131, 134, 140, 146, 160, 162, 172, 179, 183, 189, 190, 192, 193, 199, 212, 220, 229, 230, 231, 235, 252, 254, 265, 270, 275], "ascertain": [3, 255], "compliant": [3, 192, 199, 200], "safe": [3, 7, 98, 167], "guarante": [3, 12, 98, 145, 148, 157, 167, 171, 176, 177, 189, 245, 264], "better": [3, 6, 16, 20, 34, 37, 38, 45, 54, 58, 88, 91, 93, 95, 98, 105, 106, 110, 113, 126, 131, 134, 135, 138, 139, 140, 141, 154, 155, 156, 164, 166, 167, 173, 174, 179, 183, 184, 189, 216, 231, 248, 252, 256, 263, 264], "wild": 3, "west": 3, "There": [3, 6, 8, 11, 12, 16, 17, 20, 32, 48, 77, 88, 89, 91, 93, 96, 97, 98, 99, 100, 103, 105, 106, 121, 124, 127, 140, 141, 145, 149, 150, 153, 155, 157, 161, 164, 166, 169, 172, 173, 176, 177, 179, 189, 190, 191, 192, 193, 206, 216, 218, 223, 224, 225, 226, 230, 231, 234, 235, 237, 239, 244, 246, 248, 254, 265], "caveat": [3, 7, 146, 175, 216, 220, 254], "yourself": [3, 6, 11, 36, 91, 102, 131, 156, 190], "truli": [3, 6, 51, 156], "relev": [3, 6, 16, 55, 99, 101, 105, 118, 133, 136, 171, 189, 231, 233, 239, 245, 255], "third": [3, 6, 7, 8, 11, 14, 18, 54, 64, 65, 67, 69, 70, 71, 74, 75, 93, 96, 103, 114, 125, 131, 135, 143, 170, 179, 263, 274], "intend": [3, 6, 11, 14, 88, 98, 132, 136, 154, 157, 178, 187, 189, 193, 194, 218, 231, 240, 263], "influenc": [3, 6, 54, 93, 167, 248], "accordingli": [3, 8, 12, 22, 149, 164, 175], "command": [3, 6, 16, 52, 89, 95, 97, 110, 118, 131, 134, 145, 146, 167, 170, 173, 175, 176, 177, 179, 183, 184, 192, 200, 202, 221, 229, 231, 244, 245, 246, 252, 254, 258], "consequ": [3, 136, 167, 174, 189], "properli": [3, 11, 12, 16, 52, 57, 98, 143, 146, 148, 157, 160, 164, 165, 173, 175, 176, 177, 179, 193, 228, 263, 265], "could": [3, 6, 7, 11, 12, 13, 54, 86, 88, 93, 98, 99, 100, 102, 103, 105, 108, 113, 132, 133, 136, 137, 140, 148, 157, 164, 167, 173, 174, 175, 176, 177, 179, 183, 184, 189, 192, 200, 201, 202, 206, 212, 220, 221, 248, 263, 265, 267, 270, 274], "outsid": [3, 7, 12, 16, 17, 46, 130, 131, 134, 136, 142, 183, 189, 228, 236, 243, 263], "cannot": [3, 6, 7, 8, 13, 16, 22, 51, 62, 84, 96, 107, 111, 114, 115, 134, 135, 143, 146, 148, 149, 157, 167, 173, 187, 189, 242, 256, 274], "mymuladd_cpu": 3, "const": [3, 4, 6, 7, 8, 11, 12, 17, 154, 170, 216, 230, 257, 267], "torch_check": [3, 4, 11], "size": [3, 4, 6, 7, 11, 13, 14, 16, 20, 22, 32, 33, 37, 38, 42, 44, 45, 46, 48, 51, 53, 54, 57, 84, 86, 89, 91, 93, 96, 97, 98, 102, 103, 105, 106, 115, 121, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 148, 149, 150, 152, 154, 155, 156, 157, 160, 161, 164, 166, 167, 170, 172, 173, 174, 175, 176, 179, 183, 186, 187, 189, 190, 192, 193, 195, 199, 200, 201, 214, 215, 216, 220, 222, 230, 231, 249, 250, 252, 254, 255, 256, 263, 266, 268], "dtype": [3, 4, 11, 12, 16, 17, 18, 42, 96, 102, 103, 134, 143, 152, 169, 189, 215, 228, 240, 252, 255, 256, 257, 266], "torch_internal_assert": [3, 11], "devicetyp": [3, 11, 17], "cpu": [3, 6, 7, 11, 12, 13, 16, 17, 22, 33, 38, 41, 44, 45, 50, 51, 54, 64, 75, 77, 84, 85, 86, 96, 98, 100, 106, 108, 113, 114, 121, 125, 126, 131, 132, 134, 135, 136, 139, 146, 148, 157, 165, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 183, 190, 192, 199, 206, 214, 215, 216, 217, 220, 221, 228, 245, 250, 251, 254, 255, 257, 270, 275], "a_contig": [3, 4], "contigu": [3, 4, 11, 33, 157, 231, 267], "b_contig": [3, 4], "a_ptr": [3, 4], "data_ptr": [3, 4, 11, 257], "b_ptr": [3, 4], "result_ptr": [3, 11], "int64_t": [3, 6, 7, 11, 267], "numel": [3, 4, 11, 175, 230, 263], "order": [3, 4, 6, 8, 9, 13, 14, 17, 18, 20, 32, 33, 34, 45, 46, 51, 52, 57, 64, 65, 67, 69, 70, 71, 74, 75, 77, 84, 86, 88, 89, 91, 96, 106, 107, 108, 110, 111, 113, 114, 126, 131, 132, 134, 137, 138, 140, 143, 146, 148, 153, 154, 155, 157, 170, 171, 176, 179, 181, 187, 189, 190, 192, 193, 220, 230, 239, 240, 248, 252, 265, 268, 274], "frontend": [3, 4, 12, 126, 130, 131, 257, 268, 275], "torch_librari": [3, 4, 6, 7, 8, 9, 11, 18], "step": [3, 6, 7, 11, 12, 13, 14, 16, 17, 19, 20, 22, 32, 36, 37, 44, 45, 48, 51, 54, 62, 69, 77, 84, 88, 91, 97, 98, 99, 100, 103, 106, 108, 111, 114, 127, 131, 132, 133, 134, 139, 140, 141, 142, 144, 146, 148, 149, 152, 154, 156, 161, 165, 167, 174, 175, 176, 177, 178, 179, 180, 184, 187, 189, 190, 195, 197, 198, 199, 200, 206, 212, 215, 228, 229, 231, 244, 249, 251, 254, 255, 256, 258, 267, 268, 270], "ensur": [3, 4, 8, 11, 12, 13, 14, 16, 17, 38, 51, 55, 58, 65, 98, 106, 107, 113, 114, 115, 132, 136, 145, 146, 148, 152, 160, 167, 169, 173, 174, 176, 178, 186, 187, 190, 199, 216, 218, 228, 234, 242, 248, 255, 257, 267, 271], "awar": [3, 77, 88, 96, 136, 138, 148, 149, 178, 189, 242, 263], "top": [3, 6, 8, 11, 20, 36, 52, 54, 84, 85, 89, 92, 95, 98, 106, 136, 148, 172, 177, 178, 183, 184, 187, 192, 212, 214, 270], "project": [3, 6, 54, 88, 95, 115, 136, 170, 174, 179, 184, 206, 212, 249, 268], "schema": [3, 7, 12], "mutat": [3, 7, 11, 12, 18, 114, 150, 166, 167, 189, 198, 274], "m": [3, 4, 6, 7, 8, 11, 12, 16, 17, 32, 44, 51, 88, 93, 102, 106, 132, 133, 154, 155, 166, 170, 172, 175, 177, 200, 212, 230, 231, 248, 256, 267], "torch_library_impl": [3, 4, 7, 11, 12, 17], "impl": [3, 4, 7, 11, 12, 17, 230], "myaddmul": [3, 4], "__global__": 3, "void": [3, 4, 6, 7, 8, 17, 154, 170, 216, 221, 230, 257, 267], "muladd_kernel": [3, 4], "int": [3, 4, 6, 13, 22, 25, 53, 55, 57, 132, 133, 135, 146, 148, 154, 160, 169, 170, 175, 176, 177, 183, 187, 189, 192, 202, 248, 252, 254, 267], "idx": [3, 4, 34, 103, 172, 184], "blockidx": 3, "blockdim": 3, "threadidx": 3, "mymuladd_cuda": 3, "255": [3, 6, 14, 98, 221], "256": [3, 4, 6, 20, 53, 86, 136, 137, 156, 179, 189, 214, 221, 256], "faketensor": [3, 18, 189, 255], "kernel": [3, 4, 6, 9, 11, 15, 18, 20, 22, 85, 93, 96, 106, 111, 125, 126, 131, 134, 139, 150, 154, 157, 165, 166, 167, 178, 179, 180, 183, 186, 187, 189, 190, 193, 212, 216, 218, 220, 221, 231, 238, 240, 245, 250, 251, 256, 257, 258, 267, 270, 273], "meta": [3, 18, 22, 134, 136, 138, 150, 166, 173, 189, 222, 228, 250], "abstract": [3, 6, 13, 16, 34, 53, 62, 86, 96, 97, 101, 106, 114, 136, 138, 148, 160, 167, 170, 173, 190, 201, 202], "metadata": [3, 8, 12, 18, 20, 141, 152, 173, 184, 189, 220, 235, 255], "correct": [3, 4, 6, 11, 12, 13, 14, 15, 18, 37, 44, 45, 48, 51, 65, 77, 86, 88, 89, 91, 93, 96, 97, 99, 100, 103, 106, 114, 132, 133, 137, 142, 149, 154, 157, 165, 173, 175, 176, 179, 181, 183, 184, 190, 202, 215, 228, 245, 252, 255, 268], "stride": [3, 6, 18, 54, 89, 93, 132, 142, 154, 157, 189, 214, 220, 255, 256, 266], "register_fak": [3, 7, 18], "though": [3, 6, 12, 48, 77, 88, 96, 98, 99, 121, 142, 143, 150, 153, 160, 166, 173, 184, 189, 190, 216, 230, 235, 256, 263], "definit": [3, 6, 8, 11, 12, 39, 48, 70, 77, 100, 114, 124, 126, 131, 153, 165, 174, 178, 230, 231, 264], "load": [3, 7, 8, 20, 22, 25, 32, 33, 35, 36, 37, 41, 42, 44, 48, 53, 54, 57, 77, 86, 91, 96, 97, 99, 106, 108, 116, 131, 132, 134, 139, 154, 157, 164, 167, 169, 173, 183, 184, 189, 192, 199, 206, 215, 219, 227, 228, 230, 235, 236, 244, 245, 250, 251, 254, 256, 257, 271, 272], "call": [3, 6, 8, 9, 11, 12, 13, 15, 16, 17, 19, 20, 25, 32, 33, 34, 37, 39, 41, 42, 44, 45, 46, 48, 51, 53, 54, 55, 57, 69, 77, 88, 89, 91, 93, 95, 96, 98, 100, 102, 103, 105, 106, 111, 113, 114, 115, 124, 125, 127, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 146, 148, 149, 152, 153, 154, 156, 157, 160, 161, 164, 165, 166, 167, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 181, 183, 189, 190, 198, 199, 200, 201, 215, 216, 217, 218, 220, 221, 229, 230, 231, 234, 240, 241, 242, 243, 245, 248, 254, 257, 271, 274], "strive": 3, "load_librari": [3, 7, 8], "next": [3, 6, 8, 11, 13, 14, 16, 17, 19, 20, 34, 44, 51, 53, 55, 57, 58, 84, 88, 91, 93, 96, 98, 99, 103, 106, 108, 115, 124, 132, 133, 134, 136, 137, 139, 140, 141, 142, 143, 145, 149, 150, 153, 154, 156, 160, 161, 164, 166, 167, 174, 175, 176, 177, 179, 183, 184, 189, 190, 194, 206, 212, 220, 221, 235, 236, 240, 252, 256, 258, 265, 266], "_c": [3, 4, 103, 135, 254], "_": [3, 13, 14, 16, 17, 41, 50, 51, 54, 96, 99, 103, 106, 124, 134, 135, 139, 148, 161, 173, 175, 177, 184, 197, 214, 215, 220, 245, 249, 252, 256, 270], "_check": 3, "empty_lik": [3, 4, 96, 157, 263], "formula": [3, 12, 18, 98, 152, 173], "matter": [3, 197, 215, 263, 265], "wrong": [3, 54, 77, 100, 139, 154, 187], "hold": [3, 16, 19, 22, 48, 64, 65, 67, 69, 70, 71, 86, 106, 114, 132, 133, 134, 139, 145, 164, 174, 175, 177, 220, 228, 231], "happen": [3, 11, 32, 33, 34, 37, 44, 54, 88, 91, 93, 96, 98, 100, 106, 108, 133, 134, 136, 143, 146, 148, 152, 167, 171, 175, 183, 184, 189, 190, 201, 216, 220, 231, 234, 243, 245, 256], "modul": [3, 7, 8, 14, 15, 16, 19, 22, 25, 33, 38, 39, 42, 45, 46, 48, 51, 55, 57, 62, 68, 70, 72, 88, 89, 91, 96, 97, 100, 103, 105, 110, 115, 116, 121, 124, 125, 131, 132, 133, 134, 136, 137, 141, 142, 146, 148, 153, 154, 157, 161, 164, 166, 169, 170, 172, 173, 175, 176, 177, 178, 181, 184, 186, 187, 189, 193, 194, 199, 200, 201, 202, 212, 216, 218, 219, 221, 227, 231, 233, 235, 236, 248, 250, 251, 254, 256, 257, 267, 270, 271], "initi": [3, 6, 8, 11, 13, 16, 19, 22, 33, 34, 37, 44, 51, 57, 65, 74, 75, 77, 89, 91, 96, 97, 98, 100, 103, 105, 106, 113, 114, 115, 121, 132, 133, 136, 139, 140, 149, 150, 154, 157, 160, 164, 167, 169, 171, 172, 174, 175, 176, 177, 179, 183, 186, 187, 190, 193, 194, 199, 200, 202, 212, 214, 216, 220, 228, 231, 235, 236, 252, 254, 266], "pybind11_modul": [3, 170], "notic": [3, 8, 11, 16, 32, 44, 45, 54, 77, 88, 91, 96, 98, 100, 115, 124, 143, 148, 154, 156, 165, 166, 173, 183, 187, 189, 193, 194, 234, 245, 263, 265], "pybind11": [3, 8, 11, 170, 216], "promis": [3, 106, 267], "With": [3, 11, 12, 17, 19, 20, 22, 41, 50, 54, 77, 88, 89, 95, 102, 134, 136, 143, 146, 148, 154, 160, 161, 164, 169, 175, 176, 177, 178, 179, 180, 194, 198, 199, 202, 212, 214, 220, 228, 231, 244, 248, 249, 251, 252, 256, 257], "sadli": 3, "foreshadow": 3, "wonder": [3, 100, 124, 164, 167, 190, 193], "sai": [3, 6, 18, 25, 44, 53, 96, 100, 102, 105, 134, 137, 150, 155, 164, 171, 183, 256], "not_agnost": 3, "csrc": [3, 8, 170], "extension_bad": 3, "__init__": [3, 4, 6, 7, 8, 13, 16, 33, 38, 53, 55, 69, 91, 93, 100, 103, 114, 115, 132, 139, 141, 146, 148, 160, 166, 169, 171, 175, 176, 177, 184, 199, 200, 202, 212, 218, 220, 245, 267, 271], "replac": [3, 6, 25, 44, 57, 59, 89, 100, 106, 107, 111, 113, 121, 131, 132, 134, 148, 152, 171, 177, 179, 180, 183, 186, 189, 192, 206, 216, 245, 251, 252, 256, 265, 268, 273], "successfulli": [3, 6, 8, 52, 108, 135, 138, 148, 154, 160, 169, 176, 189, 190, 205, 218, 232, 233, 234, 265], "extern": [3, 53, 98, 115, 138, 153, 154, 231, 257, 267], "pyobject": 3, "pyinit__c": 3, "struct": [3, 6, 7, 8, 17], "pymoduledef": 3, "module_def": 3, "pymoduledef_head_init": 3, "null": [3, 6, 212, 254], "interpret": [3, 6, 58, 84, 89, 105, 125, 131, 140, 141, 179, 187, 189, 216, 219, 227, 230, 245, 248, 250, 251, 257], "global": [3, 6, 51, 58, 86, 136, 164, 166, 169, 176, 181, 189, 197, 201, 217, 228, 230, 231, 256, 271], "variabl": [3, 6, 8, 11, 32, 51, 84, 86, 88, 96, 99, 100, 102, 106, 118, 141, 145, 148, 154, 169, 175, 178, 189, 190, 193, 212, 230, 239, 246, 248, 254, 256, 258, 265, 267, 268, 271, 274], "pymodule_cr": 3, "entir": [3, 6, 16, 19, 22, 48, 51, 55, 98, 100, 103, 106, 121, 131, 132, 133, 139, 141, 142, 164, 166, 169, 171, 173, 177, 179, 186, 189, 190, 200, 215, 220, 222, 231, 236, 245, 263, 264, 265], "statement": [3, 11, 32, 44, 46, 107, 179, 189, 215, 217, 271], "trigger": [3, 134, 146, 154, 167, 175, 177, 186, 231], "challeng": [3, 16, 102, 103, 107, 125, 132, 135, 136, 148, 165, 174, 186, 200, 201, 202, 216, 250], "shift": [3, 173, 194], "toward": [3, 51, 98, 140, 174], "trivial": [3, 16, 53, 58, 96, 137, 190, 201], "pathlib": [3, 4, 106, 133], "so_fil": [3, 4], "__file__": [3, 4, 170, 216], "glob": [3, 4], "assert": [3, 4, 7, 13, 22, 134, 141, 146, 152, 154, 166, 176, 178, 184, 189, 197, 240, 252, 254], "len": [3, 4, 7, 53, 57, 103, 106, 121, 132, 133, 134, 148, 175, 176, 184, 202], "f": [3, 4, 8, 11, 13, 14, 18, 22, 32, 44, 48, 55, 57, 69, 88, 100, 103, 106, 114, 115, 124, 132, 133, 135, 136, 137, 146, 148, 154, 155, 160, 166, 169, 170, 172, 175, 176, 177, 184, 197, 199, 200, 202, 212, 216, 230, 249, 252, 254, 256, 257, 274], "register_autograd": [3, 18, 242], "prefer": [3, 6, 11, 18, 55, 155, 161, 170, 173, 187, 190, 194, 195, 215, 242, 254, 267], "directli": [3, 6, 8, 11, 13, 14, 16, 18, 33, 41, 50, 54, 86, 88, 89, 96, 107, 108, 110, 111, 134, 135, 136, 141, 143, 144, 155, 167, 172, 173, 177, 179, 190, 194, 200, 248, 254, 256, 265, 266], "veri": [3, 4, 6, 8, 11, 16, 17, 22, 25, 41, 46, 48, 50, 51, 67, 77, 89, 93, 100, 102, 106, 114, 121, 132, 136, 137, 139, 164, 165, 174, 175, 177, 178, 179, 181, 183, 184, 190, 192, 194, 212, 221, 230, 243, 263, 265], "_backward": 3, "saved_tensor": [3, 143], "grad_a": 3, "grad_b": 3, "none": [3, 7, 13, 16, 17, 22, 25, 51, 86, 88, 98, 106, 124, 132, 133, 134, 148, 150, 152, 154, 157, 160, 166, 169, 176, 189, 199, 200, 202, 229, 240, 270], "needs_input_grad": 3, "_setup_context": 3, "saved_a": 3, "saved_b": 3, "setup_context": 3, "composit": [3, 6, 9, 13, 18, 100, 101, 155, 169, 173, 202, 242], "had": [3, 6, 48, 53, 88, 91, 96, 103, 106, 108, 114, 124, 164, 165, 174, 184, 212, 228], "own": [3, 6, 11, 12, 13, 16, 19, 20, 22, 33, 34, 51, 54, 65, 77, 86, 88, 89, 91, 106, 111, 113, 114, 126, 131, 132, 133, 134, 140, 141, 142, 146, 154, 160, 164, 165, 171, 172, 173, 176, 177, 179, 187, 189, 190, 192, 193, 199, 201, 216, 228, 254, 256], "mymul": 3, "mymul_cpu": 3, "correctli": [3, 4, 14, 18, 51, 54, 77, 88, 89, 91, 118, 131, 134, 152, 157, 164, 167, 169, 171, 172, 187, 190, 193, 202, 234, 265], "mathemat": [3, 12, 15, 18, 44, 50, 65, 88, 91, 93, 102, 148, 173, 189], "plan": [3, 6, 9, 12, 22, 115, 133, 136, 190, 266], "gradcheck": [3, 18, 142, 143, 152, 231], "sample_input": [3, 4, 115], "make_tensor": [3, 4], "make_nondiff_tensor": [3, 4], "20": [3, 4, 6, 84, 86, 96, 113, 132, 138, 139, 146, 148, 149, 157, 164, 171, 175, 177, 183, 216, 221, 230, 245, 249, 256], "14": [3, 4, 8, 25, 42, 91, 132, 154, 193, 216, 221, 248, 256], "123": [3, 4, 53, 177, 251], "reference_muladd": [3, 4], "extend": [3, 6, 7, 11, 25, 54, 86, 107, 108, 109, 110, 125, 126, 130, 131, 132, 140, 149, 172, 176, 177, 186, 190, 206, 231, 236, 239, 241, 254, 257, 275], "arg": [3, 4, 22, 55, 57, 102, 115, 132, 133, 146, 148, 153, 160, 174, 175, 176, 177, 187, 189, 197, 199, 200, 245, 249, 256, 257], "assert_clos": [3, 4], "check": [3, 4, 6, 8, 11, 15, 16, 17, 36, 37, 38, 41, 44, 45, 46, 51, 52, 54, 57, 60, 61, 77, 83, 88, 91, 93, 96, 97, 98, 99, 102, 106, 108, 113, 124, 131, 132, 133, 134, 135, 138, 139, 146, 148, 149, 152, 154, 157, 166, 167, 171, 172, 173, 176, 186, 187, 189, 190, 192, 193, 196, 200, 208, 209, 210, 211, 212, 213, 215, 221, 235, 240, 244, 245, 258, 260, 261, 266, 267, 268, 269, 270, 271], "undefin": [3, 7, 148, 193, 263, 264, 265], "myadd_out": 3, "myadd_out_cpu": 3, "is_contigu": [3, 157, 230], "caus": [3, 8, 14, 17, 77, 84, 88, 96, 106, 137, 154, 167, 172, 175, 179, 183, 189, 190, 212, 217, 231, 243, 248, 254, 263, 271], "incompat": [3, 135, 189, 235, 245], "went": [3, 54, 93, 96, 141, 154], "fairli": [3, 98, 106, 148, 164, 174, 193], "serv": [4, 6, 9, 59, 62, 91, 98, 103, 114, 131, 146, 153, 156, 170, 176, 177, 190, 201, 205, 215, 216, 230, 239, 255, 265], "languag": [4, 6, 9, 25, 45, 51, 93, 99, 101, 103, 131, 136, 138, 139, 140, 162, 177, 179, 230, 231, 235, 236, 240, 242, 245, 252, 257], "intel": [4, 9, 131, 148, 154, 157, 250, 270, 271], "label": [4, 6, 34, 37, 38, 42, 44, 45, 53, 54, 77, 86, 88, 89, 91, 95, 96, 97, 100, 105, 113, 121, 124, 133, 136, 139, 146, 167, 172, 175, 179, 184, 190, 192, 212, 216, 218, 221, 245, 249, 250], "xpu": [4, 33, 38, 41, 64, 77, 96, 114, 121, 146, 148, 192, 221], "compil": [4, 6, 8, 9, 11, 12, 18, 20, 99, 126, 130, 131, 148, 153, 180, 189, 206, 216, 219, 221, 230, 231, 238, 245, 250, 251, 256, 257, 268, 275], "bundl": [4, 240], "essenti": [4, 6, 12, 16, 18, 32, 51, 99, 100, 102, 141, 148, 162, 167, 174, 189, 195, 248, 270], "activ": [4, 6, 12, 14, 16, 17, 20, 33, 54, 60, 61, 84, 88, 89, 91, 98, 100, 106, 124, 125, 133, 136, 141, 144, 148, 155, 164, 171, 172, 183, 193, 194, 196, 208, 209, 210, 211, 212, 213, 214, 221, 231, 252, 257, 258, 260, 261, 269, 270], "prior": [4, 13, 17, 52, 54, 88, 93, 98, 146, 156, 171, 184, 193, 200], "execut": [4, 6, 11, 13, 17, 19, 21, 32, 33, 39, 40, 44, 46, 49, 52, 66, 72, 76, 84, 88, 91, 94, 96, 99, 104, 107, 111, 112, 116, 127, 131, 134, 135, 137, 138, 141, 148, 149, 153, 154, 157, 167, 170, 173, 174, 176, 177, 178, 180, 187, 189, 193, 212, 215, 227, 230, 238, 240, 244, 245, 248, 251, 252, 254, 257, 267, 272], "best": [4, 6, 11, 39, 44, 54, 62, 77, 86, 108, 111, 113, 115, 121, 126, 129, 131, 144, 148, 150, 154, 166, 167, 172, 175, 177, 181, 189, 193, 206, 221, 230, 231, 234, 240, 242, 248, 256, 267], "c": [4, 14, 17, 18, 22, 44, 64, 65, 69, 88, 89, 95, 96, 98, 105, 114, 126, 130, 131, 133, 140, 141, 143, 148, 154, 157, 167, 172, 177, 178, 187, 189, 190, 212, 215, 216, 228, 229, 244, 254, 258, 267], "sycl_exampl": 4, "sycl_extens": 4, "test_sycl_extens": 4, "syclextens": 4, "except": [4, 11, 13, 20, 41, 44, 50, 51, 54, 89, 93, 96, 100, 103, 107, 121, 124, 134, 135, 139, 150, 152, 155, 157, 160, 166, 170, 179, 189, 230, 239, 245, 255, 256, 268, 274, 275], "o": [4, 6, 8, 13, 22, 51, 52, 55, 57, 98, 132, 133, 135, 146, 148, 160, 161, 164, 167, 169, 170, 172, 175, 176, 177, 199, 200, 202, 216, 220, 230, 249, 252, 254, 255, 271], "find_packag": [4, 6, 8], "library_nam": 4, "o3": [4, 216], "fdiagnost": 4, "color": [4, 45, 54, 89, 91, 93, 95, 96, 138, 156, 157, 172, 184, 192], "is_avail": [4, 6, 14, 86, 96, 169, 170, 174, 176, 245, 252, 271], "this_dir": 4, "dirnam": [4, 154, 170, 212], "curdir": 4, "extensions_dir": 4, "join": [4, 12, 22, 41, 50, 51, 52, 55, 127, 132, 139, 146, 148, 160, 175, 176, 177, 199, 200, 216, 230, 249, 254], "construct": [4, 6, 16, 32, 48, 54, 67, 69, 98, 114, 121, 126, 131, 134, 140, 143, 149, 150, 155, 160, 162, 166, 173, 174, 176, 179, 190, 192, 193, 215, 218, 233, 249, 268, 274], "install_requir": 4, "descript": [4, 6, 52, 132, 133, 154, 173, 175, 176, 177, 178, 189, 194, 216, 231, 245, 246, 270], "c10": [4, 7, 8, 11, 12, 17, 170, 216, 230, 257, 267], "xpustream": 4, "hpp": [4, 170], "nd_item": 4, "get_global_id": 4, "muladdkernelfunctor": 4, "_numel": 4, "_a": 4, "_b": 4, "_result": 4, "privat": [4, 7, 16, 17, 135, 170, 171, 256, 263], "mymuladd_xpu": 4, "is_xpu": 4, "res_ptr": 4, "queue": [4, 7, 212, 231], "getcurrentxpustream": 4, "constexpr": [4, 267], "thread": [4, 6, 7, 8, 11, 54, 113, 134, 135, 146, 166, 167, 172, 175, 176, 177, 212, 216, 221, 230, 231, 248], "submit": [4, 12, 160], "handler": [4, 11, 228], "cgh": 4, "parallel_for": 4, "nd_rang": 4, "static_cast": [4, 154, 267], "__all__": 4, "ctype": 4, "current_dir": 4, "build_dir": 4, "_op": [4, 111], "dl_open_guard": 4, "loaded_lib": 4, "cdll": 4, "_intern": 4, "common_util": 4, "testcas": 4, "unittest": 4, "testmymuladd": 4, "self": [4, 6, 7, 8, 11, 12, 13, 16, 17, 25, 34, 51, 55, 57, 69, 100, 103, 106, 113, 114, 115, 131, 132, 136, 141, 146, 148, 154, 156, 160, 165, 166, 169, 175, 176, 177, 183, 184, 189, 193, 199, 200, 202, 212, 221, 228, 236, 245, 267], "_test_correct": 4, "skipif": 4, "test_correctness_xpu": 4, "__name__": [4, 13, 53, 55, 57, 132, 133, 135, 146, 148, 160, 169, 175, 176, 177, 199, 200, 212, 249, 252], "__main__": [4, 13, 53, 55, 57, 132, 133, 146, 148, 160, 169, 175, 176, 177, 199, 200, 212, 216, 249, 252], "against": [4, 8, 18, 37, 38, 45, 93, 95, 108, 135, 148, 157, 173, 193, 216], "showcas": [4, 16, 67, 133, 134, 161, 164, 190, 257, 275], "support": [4, 6, 8, 13, 16, 17, 19, 20, 22, 25, 32, 38, 48, 53, 58, 60, 61, 77, 85, 88, 89, 90, 91, 92, 93, 96, 97, 98, 107, 108, 109, 110, 113, 125, 130, 131, 132, 133, 134, 135, 138, 143, 145, 146, 148, 149, 152, 154, 157, 160, 165, 167, 169, 170, 171, 172, 173, 175, 176, 177, 183, 187, 189, 192, 196, 197, 198, 200, 205, 206, 208, 209, 210, 211, 213, 214, 216, 221, 231, 239, 241, 244, 245, 246, 248, 250, 254, 255, 258, 260, 261, 263, 264, 265, 267, 268, 269, 270, 271], "enabl": [4, 6, 11, 13, 16, 17, 19, 22, 25, 34, 48, 57, 58, 84, 88, 96, 98, 110, 115, 132, 133, 135, 136, 138, 141, 142, 143, 146, 148, 154, 157, 160, 167, 169, 171, 172, 173, 183, 184, 186, 189, 190, 194, 199, 200, 201, 212, 215, 221, 228, 236, 239, 240, 241, 243, 244, 248, 249, 255, 256, 263, 265, 267, 268, 271, 275], "torchscript": [5, 7, 8, 23, 24, 108, 125, 203, 221, 247], "export": [5, 9, 11, 23, 24, 48, 88, 109, 110, 125, 131, 145, 146, 154, 178, 180, 187, 203, 206, 215, 231, 235, 238, 247, 250, 251, 267, 271], "peter": 6, "goldsborough": 6, "ubuntu": [6, 183, 248], "linux": [6, 8, 22, 108, 136, 146, 148, 172, 183, 192, 231, 248], "cmake": 6, "maco": [6, 45, 108, 148, 231], "window": [6, 45, 53, 93, 105, 108, 146, 176, 183, 192, 212, 231, 275], "machin": [6, 22, 36, 38, 42, 45, 51, 52, 53, 55, 56, 57, 58, 62, 77, 86, 88, 89, 92, 108, 110, 131, 132, 133, 138, 144, 145, 146, 148, 153, 166, 167, 172, 176, 177, 178, 179, 190, 192, 197, 205, 212, 229, 231, 239, 240, 245, 248, 254], "framework": [6, 12, 25, 36, 54, 88, 100, 101, 114, 127, 129, 131, 160, 167, 169, 175, 178, 193, 245, 254, 270], "primari": [6, 17, 160, 167, 186, 201, 230, 231, 248, 257, 267, 268], "sit": [6, 107, 108, 110, 111, 165], "atop": 6, "substanti": [6, 138, 167], "codebas": [6, 12, 16], "foundat": [6, 139, 173, 190, 195], "17": [6, 91, 113, 154, 189, 216, 256], "underli": [6, 11, 16, 41, 50, 62, 77, 96, 98, 115, 138, 150, 154, 166, 176, 189, 202, 231, 254, 265, 266, 268], "tool": [6, 11, 16, 53, 84, 86, 88, 89, 93, 97, 99, 114, 129, 132, 146, 148, 149, 154, 160, 167, 175, 178, 183, 184, 193, 201, 212, 220, 242, 248, 254], "popular": [6, 70, 77, 98, 114, 125, 138, 148, 149, 190, 193, 206, 245, 250, 256, 267], "optim": [6, 11, 12, 13, 14, 16, 17, 19, 20, 22, 25, 32, 33, 34, 35, 36, 39, 41, 42, 44, 48, 51, 55, 57, 62, 67, 68, 69, 72, 84, 86, 88, 91, 95, 98, 99, 103, 107, 111, 115, 121, 124, 125, 126, 128, 129, 131, 132, 133, 136, 141, 142, 144, 146, 148, 149, 150, 154, 156, 157, 165, 166, 167, 171, 172, 173, 174, 175, 176, 179, 180, 183, 184, 186, 187, 189, 192, 193, 194, 199, 200, 205, 206, 215, 216, 220, 228, 232, 235, 236, 238, 239, 242, 244, 245, 250, 251, 256, 258, 263, 268, 270, 275], "stochast": [6, 37, 48, 54, 67, 88, 91, 97, 106, 114, 148, 173, 174], "descent": [6, 37, 44, 48, 67, 88, 91, 97, 106, 114, 124, 148, 190, 234, 256], "parallel": [6, 13, 19, 22, 45, 47, 49, 51, 53, 57, 77, 86, 91, 115, 131, 138, 144, 148, 160, 161, 173, 176, 177, 190, 199, 200, 201, 205, 215, 221, 248, 249, 251, 254, 267, 275], "loader": [6, 25, 38, 45, 97, 106, 173, 176, 192, 216], "serial": [6, 12, 38, 39, 106, 115, 189, 212, 216, 235, 244, 255], "routin": [6, 190], "walk": [6, 8, 12, 17, 19, 25, 44, 56, 88, 101, 106, 118, 126, 127, 131, 137, 154, 156, 176, 215, 229, 256, 257, 258, 270], "kind": [6, 37, 45, 48, 51, 77, 89, 97, 99, 103, 115, 126, 131, 206, 248], "mnist": [6, 34, 45, 48, 77, 91, 95, 97, 126, 131, 132, 138, 148, 150, 166, 176, 181, 184, 194, 218, 250], "digit": [6, 48, 91, 106, 126, 131, 132, 133, 245], "conceptu": [6, 32, 44, 51, 114, 230], "enough": [6, 20, 51, 84, 91, 102, 106, 114, 137, 142, 172, 189, 199, 214, 215, 254], "whirlwind": 6, "wet": 6, "appetit": 6, "begin": [6, 7, 8, 13, 14, 20, 32, 44, 51, 52, 54, 57, 77, 88, 91, 103, 105, 133, 136, 162, 164, 174, 176, 183, 184, 190, 205, 215, 216, 218, 221, 232, 233, 234, 235, 236, 265], "why": [6, 11, 13, 16, 18, 45, 54, 89, 98, 100, 105, 115, 118, 143, 146, 154, 164, 179, 187, 189, 190, 216, 244, 245, 264, 266], "dive": [6, 13, 38, 125, 141, 146, 154, 160, 230, 267], "straight": [6, 179], "watch": [6, 97, 144, 148], "lightn": [6, 138], "talk": [6, 11, 51, 54, 57, 91, 102, 167, 173, 176, 189, 190], "cppcon": 6, "2018": 6, "quick": [6, 20, 33, 50, 88, 98, 100, 103, 105, 133, 146, 150, 155, 166, 190, 216, 219, 227, 250, 251, 256], "humor": 6, "sweep": [6, 178], "philosophi": 6, "ecosystem": [6, 111, 141], "http": [6, 22, 25, 26, 27, 28, 29, 30, 35, 46, 47, 51, 64, 77, 78, 79, 80, 81, 82, 83, 90, 95, 98, 101, 108, 109, 111, 114, 121, 127, 132, 139, 140, 142, 146, 151, 152, 153, 162, 164, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 195, 214, 215, 216, 219, 220, 223, 224, 225, 226, 229, 245, 256, 259, 262, 264, 266, 273], "org": [6, 26, 27, 28, 29, 30, 35, 46, 47, 51, 64, 77, 78, 79, 80, 81, 82, 83, 90, 93, 95, 97, 98, 101, 109, 114, 121, 127, 139, 140, 146, 151, 152, 153, 162, 164, 179, 182, 183, 185, 187, 188, 189, 190, 195, 212, 215, 219, 220, 223, 224, 225, 226, 256, 259, 262, 264, 266, 273, 274, 275], "cppdoc": 6, "embark": 6, "excit": [6, 153, 164], "journei": [6, 54, 195], "back": [6, 8, 11, 12, 16, 17, 32, 45, 48, 53, 77, 86, 88, 96, 98, 102, 106, 108, 113, 134, 137, 157, 160, 164, 166, 167, 173, 175, 176, 177, 179, 187, 189, 190, 193, 200, 228, 231, 242, 243, 263, 268], "discuss": [6, 11, 12, 17, 19, 45, 77, 88, 91, 93, 97, 102, 103, 124, 132, 133, 141, 148, 153, 154, 161, 167, 169, 187, 193, 220, 240, 242, 254, 263, 264, 265, 266], "team": [6, 111, 138, 174, 193], "research": [6, 20, 51, 54, 77, 89, 96, 100, 118, 148, 161, 166, 171, 206, 245], "right": [6, 11, 12, 14, 16, 32, 36, 41, 44, 50, 51, 54, 65, 84, 88, 93, 95, 98, 100, 102, 105, 114, 139, 148, 156, 160, 161, 164, 173, 174, 175, 178, 179, 183, 192, 193, 212, 274], "job": [6, 46, 54, 55, 56, 62, 84, 98, 135, 138, 144, 145, 146, 148, 160, 169, 275], "latenc": [6, 20, 129, 131, 136, 138, 145, 154, 167, 172, 187, 235, 239, 240, 248], "system": [6, 8, 11, 12, 14, 16, 17, 57, 98, 124, 131, 134, 138, 148, 165, 167, 172, 173, 175, 186, 187, 189, 190, 194, 199, 218, 231, 239, 248, 254], "reinforc": [6, 16, 97, 128, 131, 156, 175, 176, 180, 251], "game": [6, 45, 54, 156, 245], "engin": [6, 16, 32, 44, 86, 88, 124, 132, 141, 167, 172, 177, 189, 190, 192, 245, 254, 274], "much": [6, 11, 12, 14, 16, 20, 37, 54, 58, 88, 89, 98, 99, 100, 105, 106, 115, 133, 137, 138, 155, 156, 164, 167, 172, 173, 176, 177, 179, 183, 184, 186, 187, 189, 190, 212, 215, 216, 220, 229, 231, 232, 236, 248, 250, 254, 256, 263, 266], "tractabl": [6, 99], "slow": [6, 11, 37, 132, 134, 160, 167, 190, 193, 221, 231], "multithread": [6, 44, 58, 113, 167, 212, 216, 248], "due": [6, 8, 20, 22, 54, 84, 96, 111, 132, 136, 141, 146, 164, 165, 176, 187, 193, 198, 201, 206, 245, 248, 254, 256, 265, 270], "lock": [6, 7, 16, 58, 148, 167, 175, 176, 199], "gil": [6, 58, 146], "multiprocess": [6, 13, 16, 34, 38, 45, 53, 55, 57, 58, 132, 133, 146, 148, 173, 176, 177, 199, 200, 248, 249, 254], "scalabl": [6, 131, 135, 138, 160, 190, 231, 248, 263], "signific": [6, 54, 84, 89, 133, 135, 139, 142, 154, 155, 157, 164, 167, 173, 178, 183, 187, 190, 200, 201, 202, 206, 215, 216, 231, 242, 254], "shortcom": [6, 265], "constraint": [6, 14, 20, 22, 100, 126, 131, 136, 138, 165, 173, 190, 199, 215, 216, 228, 245, 252, 254], "heavi": [6, 51, 98, 102], "neuroevolut": 6, "benefit": [6, 20, 22, 44, 86, 133, 135, 152, 157, 160, 164, 167, 178, 193, 215, 231, 235, 241, 248, 256], "owner": [6, 175, 176, 177], "anyth": [6, 15, 18, 45, 74, 75, 91, 93, 96, 99, 102, 103, 105, 106, 114, 172, 193, 212, 228, 229, 245, 256], "web": [6, 108, 212], "page": [6, 8, 9, 12, 18, 52, 56, 62, 87, 106, 113, 114, 130, 131, 139, 141, 167, 177, 183, 189, 190, 199, 204, 231, 243], "server": [6, 19, 127, 131, 135, 146, 170, 177, 200, 212, 239, 245, 248], "3d": [6, 62, 93, 95, 102, 103, 169, 231], "graphic": [6, 178], "photo": [6, 89, 214], "edit": [6, 13, 14, 19, 50, 52, 62, 135, 136, 146, 148, 153, 154, 169, 170, 172, 175, 176, 177, 200, 202, 252, 256], "softwar": [6, 170, 183, 254], "remain": [6, 86, 88, 98, 124, 134, 135, 148, 164, 167, 171, 179, 231, 252, 254, 256, 265, 268], "spare": 6, "hassl": 6, "forth": [6, 106], "retain": [6, 41, 50, 96, 115, 124, 235], "intuit": [6, 54, 77, 91, 96, 100, 115, 154, 179, 189, 212, 228, 264], "tradit": [6, 54, 98, 100, 155, 176, 189, 190, 193, 254, 267], "experi": [6, 12, 98, 99, 133, 135, 148, 156, 160, 167, 170, 173, 174, 178, 179, 181, 187, 189, 190, 193, 201, 215, 230, 232, 239, 245, 246, 248, 256, 263, 271, 274, 275], "compet": [6, 138, 167], "meant": [6, 9, 13, 88, 93, 133, 190, 231, 254, 265], "complement": 6, "know": [6, 8, 11, 13, 22, 32, 44, 51, 74, 75, 77, 91, 93, 96, 100, 102, 105, 106, 114, 137, 139, 140, 143, 148, 149, 150, 154, 156, 157, 161, 166, 167, 169, 173, 174, 175, 179, 184, 189, 190, 192, 216, 241, 264], "alik": 6, "love": 6, "simplic": [6, 77, 133, 142, 167, 173, 174, 202, 216, 267], "core": [6, 11, 12, 13, 46, 99, 100, 101, 114, 115, 131, 136, 148, 149, 154, 157, 160, 167, 172, 183, 189, 195, 212, 215, 230, 248, 254], "principl": [6, 11, 103, 105, 138, 235], "interest": [6, 12, 16, 20, 45, 51, 53, 86, 88, 89, 98, 100, 107, 108, 110, 111, 121, 133, 138, 155, 164, 165, 173, 181, 189, 190, 192, 193, 216, 230, 233, 234, 274], "curiou": [6, 150, 164, 166, 198], "paragraph": 6, "tri": [6, 22, 54, 88, 99, 105, 174, 189, 215, 245, 256], "close": [6, 16, 20, 54, 88, 93, 96, 98, 99, 133, 138, 160, 164, 184, 229, 231], "experienc": 6, "ever": [6, 137, 146, 189, 220], "ask": [6, 8, 20, 89, 91, 93, 140, 149, 167, 173, 189, 190, 216, 271], "rememb": [6, 45, 54, 77, 103, 106, 113, 115, 124, 155, 156, 160, 164, 167, 179, 190, 193, 216], "dot": [6, 16, 32, 54, 103, 105, 124, 126, 131, 155, 179, 180, 216, 242, 251, 252, 274], "colon": 6, "grab": [6, 9, 54, 95, 177], "distribut": [6, 16, 17, 25, 54, 77, 86, 91, 96, 97, 98, 100, 105, 131, 132, 133, 134, 135, 136, 138, 144, 145, 157, 164, 170, 173, 175, 183, 193, 201, 202, 214, 216, 248, 249, 250, 252, 254, 270, 275], "readi": [6, 8, 12, 19, 51, 89, 91, 97, 99, 100, 103, 105, 106, 131, 133, 148, 161, 169, 170, 173, 175, 176, 177, 190, 192, 221, 245], "archiv": [6, 134, 157, 189, 244], "header": [6, 8, 11, 170, 216], "websit": [6, 89, 174, 212, 214], "rest": [6, 16, 45, 121, 134, 149, 153, 173, 175, 176, 190, 193, 228, 265], "free": [6, 8, 12, 37, 44, 51, 77, 98, 107, 108, 110, 111, 115, 133, 134, 138, 148, 152, 153, 156, 157, 160, 164, 167, 173, 175, 179, 183, 189, 214, 230, 256], "too": [6, 12, 16, 45, 65, 70, 84, 86, 91, 93, 98, 99, 105, 106, 113, 114, 134, 136, 146, 164, 167, 171, 174, 175, 177, 179, 189, 230, 243, 263], "debug": [6, 11, 62, 99, 125, 126, 131, 137, 160, 174, 180, 189, 194, 201, 216, 230, 239, 251, 257, 275], "abi": [6, 8], "try": [6, 8, 14, 16, 17, 20, 37, 41, 45, 48, 50, 51, 54, 55, 62, 77, 88, 96, 97, 98, 99, 100, 101, 102, 106, 107, 108, 113, 124, 135, 138, 139, 140, 141, 149, 154, 156, 160, 161, 164, 167, 169, 170, 171, 173, 174, 179, 183, 186, 187, 189, 193, 194, 215, 216, 228, 229, 245, 248, 252, 256, 264], "local": [6, 8, 11, 19, 22, 36, 51, 52, 62, 88, 92, 99, 107, 115, 118, 124, 133, 134, 136, 138, 146, 148, 160, 164, 171, 175, 176, 177, 179, 181, 190, 206, 215, 218, 231, 239, 240, 248, 249, 252, 254, 255], "retriev": [6, 16, 19, 32, 34, 51, 137, 138, 169, 173, 175, 176, 190, 212, 248], "vanilla": [6, 51, 67, 100, 114, 193, 249, 263], "cu90": 6, "url": [6, 183, 187, 190, 229, 256], "wget": [6, 22, 192, 256], "nightli": [6, 22, 152, 160, 187, 192, 245, 254, 256, 274, 275], "share": [6, 8, 12, 13, 22, 41, 50, 57, 68, 72, 86, 98, 102, 133, 137, 146, 148, 149, 156, 160, 167, 173, 176, 177, 189, 200, 216, 220, 230, 235, 239, 244, 248, 251, 254], "dep": 6, "latest": [6, 10, 12, 16, 20, 86, 89, 114, 115, 125, 131, 133, 141, 148, 159, 168, 173, 176, 179, 181, 187, 206], "unzip": [6, 52, 192, 244], "tini": [6, 132, 164, 245], "ident": [6, 20, 57, 88, 96, 97, 106, 114, 136, 145, 161, 184, 186, 189, 194, 216, 266], "iostream": [6, 7], "ey": [6, 167], "fledg": 6, "cmakelist": [6, 8], "txt": [6, 8, 51, 139, 140, 154, 172, 179, 201], "cmake_minimum_requir": [6, 8], "fatal_error": [6, 8], "add_execut": 6, "target_link_librari": [6, 8], "set_properti": 6, "properti": [6, 13, 16, 32, 41, 50, 88, 91, 96, 102, 105, 124, 138, 165, 179, 189, 215, 216, 228, 233, 264], "cxx_standard": 6, "hard": [6, 11, 17, 34, 100, 138, 167, 171, 189, 216, 239], "visual": [6, 16, 44, 54, 77, 84, 85, 91, 97, 128, 131, 133, 137, 138, 143, 153, 173, 180, 183, 201, 221, 229, 250, 251, 257, 258, 265], "studio": [6, 258], "qmake": 6, "plain": [6, 51, 106, 134, 139, 140, 179, 192, 228, 230], "makefil": 6, "feel": [6, 12, 37, 44, 51, 98, 107, 108, 110, 111, 115, 133, 153, 154, 156, 157, 160, 164, 183, 189], "comfort": 6, "box": [6, 11, 12, 13, 18, 20, 42, 77, 130, 131, 134, 138, 141, 143, 148, 172, 175, 183, 189, 192, 193, 212, 214, 245, 274], "cmake_prefix_path": [6, 8], "invok": [6, 8, 11, 98, 146, 148, 152, 153, 154, 160, 167, 170, 176, 177, 212, 228, 242, 248, 257, 265], "agre": [6, 249], "someth": [6, 13, 16, 45, 86, 91, 96, 100, 102, 148, 154, 172, 179, 189, 193, 216, 230, 274], "break": [6, 7, 11, 12, 13, 18, 33, 34, 84, 88, 93, 107, 115, 134, 135, 141, 164, 172, 175, 177, 187, 244, 252, 263], "unexpect": [6, 53, 231, 265], "pwd": [6, 212], "root": [6, 8, 16, 32, 34, 42, 44, 53, 54, 91, 99, 124, 134, 142, 149, 154, 176, 177, 212, 229, 254], "fa350df05ecf": 6, "home": [6, 41, 50, 204, 263], "mkdir": [6, 183], "cd": [6, 8, 183, 192, 212], "dcmake_prefix_path": [6, 8], "identif": [6, 8], "gnu": [6, 8, 231, 248], "usr": [6, 8, 22, 148], "bin": [6, 8, 91, 148, 212, 244, 257], "cc": [6, 8, 44], "detect": [6, 8, 13, 14, 22, 54, 93, 128, 131, 172, 180, 183, 187, 189, 206, 218, 231, 243, 248, 251], "info": [6, 8, 84, 135, 145, 148, 156, 160, 189], "pthread": [6, 8], "pthread_creat": [6, 8], "lib": [6, 8, 12, 22, 152, 154, 230, 245, 248, 254], "config": [6, 12, 20, 25, 86, 132, 134, 138, 141, 160, 186, 206, 228, 236, 239, 242, 245, 255, 256, 257, 267], "scan": [6, 8, 91, 93, 189], "50": [6, 8, 20, 25, 54, 55, 91, 106, 149, 157, 160, 171, 174, 177, 192, 231, 270], "cmakefil": [6, 8], "dir": [6, 8, 84, 95, 138, 230, 239, 254], "100": [6, 8, 42, 50, 69, 100, 114, 132, 135, 141, 146, 154, 157, 166, 172, 173, 174, 177, 184, 202, 216, 230, 240, 256, 267], "folder": [6, 52, 54, 84, 85, 89, 91, 133, 184, 192, 254], "insid": [6, 8, 12, 19, 22, 33, 37, 46, 134, 136, 183, 187, 192, 267, 274], "enter": [6, 51, 133, 146, 148], "ran": [6, 105, 135, 173, 176, 178, 216], "binari": [6, 51, 54, 96, 108, 148, 157, 187, 235, 244, 264, 275], "me": [6, 20, 51, 164, 179], "deriv": [6, 12, 18, 20, 32, 37, 41, 44, 50, 88, 96, 100, 102, 103, 105, 114, 137, 139, 143, 152, 155, 231], "besid": [6, 91, 105, 165, 175, 214, 231], "encapsul": [6, 37, 48, 93, 97, 141, 160, 164, 175], "buffer": [6, 16, 45, 48, 115, 133, 134, 142, 146, 150, 152, 156, 161, 164, 165, 166, 167, 171, 174, 189, 199, 220, 233, 234, 235, 252, 254, 255], "form": [6, 14, 17, 20, 42, 48, 51, 54, 62, 99, 106, 108, 137, 140, 154, 160, 179, 193, 199, 200, 212, 231, 240, 248, 256, 268], "record": [6, 11, 32, 44, 51, 106, 115, 124, 125, 131, 132, 133, 141, 142, 143, 164, 173, 174, 176, 177, 189, 206, 221, 245, 275], "batch": [6, 19, 20, 34, 37, 38, 39, 46, 48, 51, 53, 54, 55, 57, 58, 77, 84, 86, 88, 89, 91, 95, 96, 97, 98, 103, 106, 115, 121, 125, 127, 130, 131, 132, 133, 134, 136, 137, 138, 139, 144, 148, 149, 150, 156, 157, 160, 161, 164, 166, 167, 169, 172, 173, 174, 176, 177, 178, 180, 181, 183, 184, 187, 190, 192, 193, 194, 215, 216, 251, 252, 256, 265, 268, 274, 275], "normal": [6, 11, 13, 14, 37, 39, 42, 51, 53, 54, 89, 91, 93, 97, 98, 100, 103, 105, 114, 115, 121, 132, 142, 148, 149, 165, 167, 172, 175, 176, 178, 179, 184, 187, 190, 193, 194, 214, 231, 243, 256, 264], "logic": [6, 13, 20, 37, 42, 99, 107, 125, 131, 132, 138, 145, 160, 169, 171, 176, 177, 186, 194, 200, 248], "nest": [6, 16, 33, 44, 91, 96, 131, 134, 173, 175, 177, 178, 180, 186, 251, 272, 275], "term": [6, 17, 41, 54, 62, 77, 88, 89, 93, 97, 100, 101, 102, 104, 113, 133, 135, 136, 161, 171, 173, 189, 190, 193, 222, 248, 251, 256, 266], "explicitli": [6, 22, 37, 41, 44, 50, 54, 55, 86, 88, 102, 124, 134, 135, 136, 145, 149, 157, 177, 178, 181, 189, 212, 231, 266, 268, 271], "onc": [6, 8, 11, 12, 13, 16, 19, 20, 32, 34, 37, 53, 54, 58, 84, 89, 91, 95, 96, 97, 98, 99, 103, 108, 144, 149, 157, 164, 165, 171, 172, 173, 174, 176, 179, 183, 184, 189, 190, 201, 212, 215, 216, 231, 244, 245, 255, 256, 268], "similarli": [6, 14, 53, 85, 89, 96, 134, 137, 138, 139, 154, 155, 164, 167, 169, 200, 255, 266], "kcuda": [6, 257], "net": [6, 25, 45, 46, 48, 51, 54, 77, 86, 91, 95, 96, 98, 132, 148, 161, 172, 176, 183, 184, 218], "n": [6, 7, 14, 20, 32, 44, 62, 74, 75, 84, 88, 93, 96, 98, 106, 114, 132, 133, 134, 146, 148, 155, 156, 160, 161, 169, 171, 175, 176, 177, 179, 184, 189, 190, 192, 231, 254, 256, 267, 274], "super": [6, 8, 13, 22, 69, 103, 114, 115, 132, 135, 141, 146, 156, 166, 169, 175, 176, 177, 184, 199, 200, 202, 212, 245, 267], "w": [6, 32, 37, 44, 48, 77, 103, 105, 124, 133, 157, 177, 183, 189, 192, 256, 267], "addmm": [6, 113, 154, 221], "register_paramet": 6, "reflect": [6, 11, 41, 50, 91, 96, 173, 189], "less": [6, 9, 11, 18, 58, 84, 93, 98, 99, 106, 110, 121, 133, 138, 149, 152, 164, 167, 173, 174, 175, 183, 184, 187, 189, 190, 193, 202, 216, 220, 254, 256], "magic": [6, 100, 140, 148, 155], "assign": [6, 8, 42, 46, 48, 55, 69, 89, 93, 96, 98, 99, 100, 103, 105, 107, 114, 134, 148, 160, 165, 173, 190, 202, 212, 228, 231, 248], "behind": [6, 11, 20, 46, 84, 98, 100, 106, 114, 142, 174, 264, 266, 275], "scene": [6, 106, 114, 245], "another_bia": 6, "rand": [6, 17, 96, 118, 143, 197, 199, 200, 212, 231, 240, 252], "recurs": [6, 19, 45, 134, 141, 187, 229], "0808": 6, "8613": 6, "2017": [6, 77], "5206": 6, "5353": 6, "3740": 6, "0976": 6, "4786": 6, "4928": 6, "1434": 6, "4713": 6, "1735": 6, "3293": 6, "3467": 6, "3858": 6, "1980": 6, "1986": 6, "1975": 6, "4278": 6, "1831": 6, "2709": 6, "3730": 6, "4307": 6, "3236": 6, "0629": 6, "2038": 6, "4638": 6, "2023": 6, "1230": 6, "0516": 6, "aptli": [6, 15], "register_modul": 6, "dropout": [6, 39, 51, 77, 93, 106, 115, 132, 136, 138, 140, 149, 175, 177, 179, 268], "conv2d": [6, 14, 45, 48, 54, 91, 106, 115, 132, 142, 166, 172, 176, 184, 186, 189, 212, 221, 231, 270], "subtleti": [6, 124, 131, 266], "bodi": [6, 154], "upon": [6, 21, 51, 58, 121, 148, 152, 179, 184, 187, 193, 214, 231, 251, 254], "tree": [6, 8, 12, 17, 99, 105, 160, 201, 275], "p": [6, 22, 51, 70, 93, 99, 105, 106, 114, 132, 133, 142, 148, 152, 157, 161, 164, 175, 176, 177, 186, 192], "0345": 6, "4456": 6, "6313": 6, "3585": 6, "4008": 6, "1647": 6, "2891": 6, "0527": 6, "0354": 6, "3084": 6, "2025": [6, 244], "0343": 6, "1824": 6, "4630": 6, "2862": 6, "2500": 6, "0420": 6, "3679": 6, "1482": 6, "0460": 6, "1967": 6, "2132": 6, "1992": 6, "4257": 6, "0739": 6, "01": [6, 13, 42, 44, 48, 113, 148, 177, 193, 197, 244, 249, 258], "6861": 6, "1166": 6, "45": [6, 138, 154, 177, 214], "0333": 6, "7": [6, 8, 20, 21, 22, 36, 42, 53, 103, 113, 121, 132, 133, 148, 156, 157, 172, 186, 187, 190, 197, 198, 202, 205, 215, 241, 245, 252, 255, 256, 258, 267], "9983": 6, "0705": 6, "named_paramet": [6, 33, 152, 166, 190], "ordereddict": [6, 192], "again": [6, 45, 52, 88, 89, 93, 95, 96, 98, 99, 103, 106, 107, 137, 142, 148, 149, 164, 175, 177, 179, 183, 187, 190, 216, 255, 256, 271], "11": [6, 13, 20, 22, 113, 132, 133, 152, 172, 177, 187, 190, 201, 202, 216, 221, 256], "13": [6, 42, 91, 113, 177, 193, 212, 256], "48": [6, 20, 42, 154, 157, 184, 221, 256], "1863": 6, "8611": 6, "1228": 6, "3269": 6, "9858": 6, "0339": 6, "2484": 6, "2035": 6, "2103": 6, "0715": 6, "2975": 6, "4350": 6, "1878": 6, "3616": 6, "1050": 6, "4982": 6, "0335": 6, "1605": 6, "4963": 6, "4099": 6, "2883": 6, "1818": 6, "3447": 6, "1501": 6, "0215": 6, "0250": 6, "0408": 6, "3756": 6, "2149": [6, 256], "3636": 6, "ourselv": [6, 37, 51, 142, 173], "8559": 6, "1572": 6, "1069": 6, "1247": 6, "8060": 6, "At": [6, 11, 16, 17, 20, 44, 48, 51, 52, 86, 103, 106, 114, 132, 133, 136, 149, 152, 156, 160, 173, 174, 175, 178, 179, 183, 221, 228, 231, 244, 263, 266], "point": [6, 11, 12, 13, 16, 20, 22, 44, 48, 51, 52, 53, 54, 55, 84, 88, 91, 93, 96, 98, 99, 101, 102, 103, 105, 106, 114, 132, 134, 136, 137, 138, 143, 144, 146, 153, 156, 161, 167, 173, 175, 179, 184, 189, 190, 206, 219, 227, 229, 231, 241, 245, 250, 251, 254, 256, 263, 265, 266, 271], "topic": [6, 51, 62, 77, 89, 96, 107, 108, 110, 111, 118, 124, 125, 127, 130, 160, 191, 223, 224, 225, 226, 237, 273], "devour": 6, "menu": [6, 52], "concept": [6, 8, 13, 36, 37, 57, 92, 101, 102, 106, 114, 118, 131, 138, 156, 160, 167, 175, 178, 179, 190, 195, 221, 230, 248, 254, 257, 267], "pipelin": [6, 19, 62, 106, 131, 173, 192, 254], "briefli": [6, 37, 62, 131, 136, 173, 187, 193], "determin": [6, 7, 11, 13, 20, 41, 50, 89, 91, 96, 97, 98, 99, 102, 103, 105, 108, 124, 135, 136, 138, 150, 160, 164, 165, 166, 171, 187, 189, 190, 216, 221, 222, 231, 254, 268, 271], "who": [6, 51, 77, 98, 101, 135, 148, 164, 189, 195, 200, 212, 216, 240, 244], "heap": 6, "forget": [6, 106, 115, 160, 187], "live": [6, 12, 17, 96, 130, 131, 137, 167, 176, 177, 266], "referenc": [6, 177], "thing": [6, 8, 11, 17, 18, 32, 44, 45, 48, 51, 86, 88, 91, 96, 97, 98, 99, 100, 102, 103, 105, 106, 130, 131, 134, 136, 137, 138, 143, 144, 145, 148, 149, 153, 154, 157, 165, 172, 173, 181, 189, 199, 216, 234, 256, 271], "lower": [6, 16, 20, 52, 77, 84, 93, 95, 131, 133, 134, 135, 138, 146, 152, 154, 164, 165, 173, 174, 178, 184, 189, 190, 193, 230, 231, 245, 266], "realm": 6, "increas": [6, 22, 25, 37, 38, 45, 77, 84, 85, 86, 89, 98, 106, 132, 133, 134, 136, 138, 139, 140, 144, 164, 167, 172, 183, 190, 194, 201, 214, 215, 216, 230, 231, 234, 236, 248, 250, 256, 268], "heavili": [6, 167, 179, 256], "ergonom": 6, "shown": [6, 11, 20, 54, 88, 96, 106, 124, 134, 136, 138, 154, 156, 174, 175, 177, 178, 183, 187, 190, 200, 212, 244, 245, 246, 248, 249, 254, 264, 265, 266, 271], "thu": [6, 11, 12, 32, 39, 51, 86, 98, 106, 124, 133, 150, 164, 167, 179, 212, 216, 221, 231, 248, 267], "far": [6, 8, 16, 48, 51, 65, 88, 91, 93, 96, 98, 99, 100, 114, 137, 148, 164, 171, 174, 179, 189, 190, 193, 216, 263], "stack": [6, 11, 16, 17, 41, 50, 91, 113, 131, 136, 150, 156, 161, 166, 167, 170, 175, 179, 183, 184, 190, 254], "shared_ptr": [6, 8], "reduc": [6, 13, 20, 34, 37, 44, 58, 91, 93, 98, 113, 125, 132, 133, 134, 136, 138, 139, 142, 144, 146, 148, 155, 156, 157, 164, 167, 171, 172, 175, 177, 183, 187, 190, 194, 201, 215, 216, 219, 220, 238, 239, 240, 248, 249, 250, 251, 252, 257], "cognit": 6, "overhead": [6, 12, 20, 58, 84, 113, 132, 133, 136, 141, 146, 155, 157, 167, 172, 175, 177, 178, 183, 187, 193, 199, 216, 221, 231, 241, 248, 254, 256, 257, 268], "think": [6, 8, 45, 54, 70, 89, 91, 99, 100, 102, 103, 105, 114, 155, 173, 176, 178, 190, 193, 266, 274], "declar": [6, 15, 77], "everywher": [6, 96, 105], "make_shar": 6, "greatli": [6, 51, 88, 106, 174], "even": [6, 11, 12, 16, 19, 44, 45, 53, 77, 88, 91, 93, 96, 105, 106, 115, 124, 132, 133, 136, 141, 143, 146, 153, 155, 160, 165, 167, 173, 175, 178, 189, 190, 193, 216, 231, 232, 235, 256, 263, 265, 266], "latter": [6, 138, 175], "nativ": [6, 11, 17, 18, 57, 86, 110, 111, 130, 131, 133, 136, 149, 160, 169, 177, 193, 221, 230, 231, 252, 256, 263, 266], "stai": [6, 84, 135, 136, 141, 173, 174, 175], "shorten": 6, "therefor": [6, 7, 17, 51, 53, 98, 115, 127, 139, 146, 157, 161, 167, 170, 171, 176, 177, 189, 215, 248, 258, 265, 266], "But": [6, 11, 12, 45, 46, 54, 77, 89, 96, 102, 105, 137, 146, 157, 164, 165, 166, 174, 189, 192, 206, 216, 263, 266, 274], "wait": [6, 19, 84, 135, 140, 146, 148, 149, 160, 167, 170, 175, 176, 177, 183, 190, 199, 220, 221, 231, 254], "don": [6, 7, 11, 12, 18, 44, 45, 54, 55, 57, 86, 93, 96, 99, 100, 103, 106, 111, 115, 121, 124, 137, 143, 153, 155, 156, 164, 167, 173, 174, 177, 178, 186, 189, 190, 194, 198, 212, 215, 242, 243, 263, 264, 265], "mymodul": 6, "hell": 6, "lot": [6, 11, 12, 17, 53, 88, 99, 106, 132, 134, 148, 161, 176, 179, 183, 187, 190, 215, 216, 230, 256, 263], "came": [6, 54, 264], "elabor": [6, 136, 154, 175], "scheme": [6, 22, 97, 98, 131, 190, 220, 228, 263, 270], "hide": [6, 142, 173, 274], "reserv": [6, 12, 17, 183, 255, 256], "simplifi": [6, 12, 16, 25, 106, 139, 146, 160, 169, 179, 192, 202, 254, 263, 266, 270, 275], "linearimpl": 6, "torch_modul": 6, "brief": [6, 25, 84, 88, 99, 173, 190, 193], "macro": [6, 11, 17], "wrapper": [6, 11, 57, 106, 115, 132, 133, 143, 149, 156, 160, 173, 190, 194, 199, 200, 242, 255, 275], "typedef": 6, "among": [6, 8, 11, 55, 84, 86, 97, 136, 171, 183, 214, 248], "holder": 6, "arrow": [6, 44, 136], "resembl": [6, 14, 99, 144, 174], "becom": [6, 13, 25, 54, 77, 89, 98, 136, 143, 155, 157, 160, 167, 183, 184, 190, 197, 215, 235, 248, 254, 257, 268], "extra": [6, 11, 58, 91, 96, 98, 102, 103, 106, 110, 134, 139, 140, 142, 149, 152, 165, 173, 179, 187, 192, 221, 230, 231], "netimpl": 6, "subtl": [6, 96, 215], "deserv": 6, "tricki": [6, 20, 143, 186, 189, 190], "decid": [6, 11, 12, 20, 22, 54, 62, 86, 88, 174, 189, 190, 234, 266, 275], "nullptr": [6, 257], "familiar": [6, 8, 11, 12, 36, 37, 41, 45, 50, 55, 56, 58, 91, 92, 96, 97, 99, 101, 106, 115, 131, 133, 137, 144, 145, 148, 156, 169, 176, 189, 212, 216, 230, 235, 271], "pythonista": 6, "disadvantag": [6, 115], "mechan": [6, 13, 16, 17, 25, 32, 51, 58, 97, 124, 128, 131, 143, 153, 165, 179, 181, 183, 189, 194, 212, 239, 240, 270, 275], "boilerpl": [6, 45, 100, 184, 263], "That": [6, 7, 20, 44, 45, 46, 51, 88, 89, 91, 96, 100, 102, 103, 105, 106, 108, 136, 139, 146, 152, 153, 155, 157, 161, 164, 173, 174, 178, 183, 189, 190, 192, 230, 263, 264, 266], "said": [6, 156, 164, 173, 174, 263, 264], "introduct": [6, 13, 18, 20, 47, 49, 55, 56, 57, 58, 59, 88, 93, 100, 101, 104, 107, 108, 109, 111, 124, 131, 141, 144, 145, 154, 180, 193, 194, 195, 216, 231, 242, 245, 251, 265], "awai": [6, 48, 93, 95, 99, 100, 102, 173, 174, 175, 190, 201, 266], "sooner": [6, 133], "technic": [6, 148, 149, 164, 190, 197, 198, 205, 263], "henceforth": 6, "background": [6, 33, 77, 95, 172, 184, 192, 240, 241], "post": [6, 13, 51, 98, 132, 133, 134, 138, 157, 181, 190, 214, 252], "recap": [6, 48, 174, 220, 266], "adversari": [6, 45, 97, 116, 128, 131, 251], "architectur": [6, 20, 33, 54, 58, 77, 93, 98, 99, 129, 131, 133, 136, 138, 144, 150, 160, 161, 167, 169, 171, 178, 184, 187, 193, 194, 212, 215, 231, 267, 270], "repositori": [6, 12, 56, 85, 118, 133, 136, 148, 169, 170, 177, 178, 179, 192, 254], "distinct": [6, 20, 54, 84, 96, 105, 124, 133, 177, 184, 189, 190, 245], "transform": [6, 14, 20, 21, 25, 32, 33, 34, 35, 36, 37, 38, 39, 41, 45, 51, 54, 86, 88, 89, 91, 96, 97, 113, 116, 126, 127, 128, 131, 132, 134, 148, 149, 150, 152, 154, 156, 161, 164, 165, 172, 176, 179, 180, 183, 184, 186, 192, 194, 214, 216, 218, 228, 230, 231, 235, 236, 242, 245, 251, 252, 256, 268, 270], "real": [6, 7, 16, 32, 38, 54, 56, 88, 98, 99, 100, 101, 105, 129, 132, 139, 140, 148, 149, 160, 164, 170, 174, 179, 187, 189, 190, 216, 235, 254, 265, 268], "emit": [6, 99, 189], "probabl": [6, 8, 11, 33, 51, 54, 89, 93, 96, 98, 99, 102, 105, 132, 137, 138, 140, 172, 174, 184, 268], "judg": 6, "closer": [6, 88, 98, 174], "feedback": [6, 124, 133, 153, 156, 157, 194, 205, 255, 275], "produc": [6, 8, 13, 70, 98, 107, 114, 138, 141, 149, 150, 152, 153, 155, 157, 167, 173, 174, 179, 189, 190, 200, 215, 231, 236, 270], "authent": 6, "theori": [6, 51, 54, 88, 98, 137, 167], "delic": 6, "improv": [6, 11, 12, 20, 25, 37, 51, 58, 91, 96, 98, 106, 111, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 139, 142, 157, 165, 166, 174, 178, 179, 186, 187, 193, 194, 197, 205, 215, 216, 229, 231, 242, 254, 255, 256, 267, 275], "tandem": [6, 241], "indistinguish": 6, "fool": [6, 51, 77], "excel": [6, 53, 160, 184, 199], "realist": [6, 193, 268], "transpos": [6, 14, 41, 50, 51, 54, 154, 184, 214, 245, 268], "2d": [6, 33, 54, 93, 106, 134, 139, 175, 186, 190, 202], "convolut": [6, 11, 14, 15, 54, 89, 91, 96, 98, 106, 115, 121, 125, 126, 128, 130, 131, 157, 161, 171, 180, 181, 189, 212, 215, 218, 221, 222, 233, 234, 244, 251, 256], "relu": [6, 14, 48, 54, 93, 100, 106, 115, 124, 132, 146, 154, 166, 172, 175, 176, 177, 184, 199, 200, 201, 202, 215, 231, 267, 270], "unit": [6, 51, 93, 96, 132, 133, 155, 167, 171, 173, 174, 179, 189, 193, 218, 231], "dcgangeneratorimpl": 6, "knoises": 6, "conv1": [6, 48, 93, 115, 132, 166, 171, 176, 184], "convtranspose2dopt": 6, "batch_norm1": 6, "conv2": [6, 93, 115, 132, 166, 176, 184], "128": [6, 8, 53, 54, 57, 86, 98, 132, 136, 139, 148, 150, 166, 172, 175, 176, 177, 190, 193, 206, 216, 230, 256], "pad": [6, 51, 93, 142, 178, 193, 231, 265, 268], "batch_norm2": 6, "conv3": 6, "batch_norm3": 6, "conv4": 6, "tanh": [6, 54, 93, 100, 173, 231], "convtranspose2d": 6, "batchnorm2d": [6, 54, 106, 142, 231], "dcgangener": 6, "chosen": [6, 8, 89, 93, 135, 174, 187, 215, 216, 245], "outlin": [6, 167, 190], "cours": [6, 16, 20, 55, 88, 89, 96, 98, 101, 102, 105, 106, 137, 148, 184, 212], "student": [6, 98], "No": [6, 55, 111, 134, 154, 198, 242], "harm": [6, 98], "discoveri": [6, 189], "fed": [6, 14, 38, 51, 54, 190], "soylent": 6, "regularli": [6, 55], "channel": [6, 12, 14, 44, 45, 54, 89, 91, 93, 96, 98, 106, 126, 131, 136, 171, 180, 184, 186, 192, 218, 231, 251], "moduleopt": 6, "linearopt": 6, "leaki": [6, 54], "alpha": [6, 17, 156, 263], "sigmoid": [6, 54, 93, 194, 231], "squash": [6, 149, 156], "rang": [6, 7, 13, 14, 16, 22, 42, 45, 53, 54, 55, 69, 77, 84, 86, 89, 98, 103, 106, 107, 108, 110, 111, 114, 132, 133, 134, 135, 138, 148, 166, 169, 172, 175, 177, 179, 183, 184, 189, 192, 197, 199, 202, 212, 214, 215, 221, 231, 242, 245, 248, 249, 252, 254, 256, 257], "sequenti": [6, 14, 51, 70, 93, 105, 114, 149, 165, 186, 197, 231, 248, 249, 268, 274], "success": [6, 16, 77, 102, 138, 154, 179, 212], "orient": [6, 181], "layer": [6, 11, 12, 13, 14, 15, 17, 19, 20, 32, 38, 39, 44, 48, 51, 54, 57, 62, 70, 77, 86, 88, 91, 95, 96, 97, 98, 100, 103, 106, 114, 115, 121, 124, 132, 133, 134, 138, 139, 140, 141, 149, 157, 165, 169, 171, 172, 173, 176, 177, 179, 181, 189, 190, 192, 194, 197, 198, 201, 205, 214, 215, 218, 220, 222, 228, 232, 233, 235, 236, 252, 256, 267, 270], "conv2dopt": 6, "leakyrelu": [6, 54], "leakyreluopt": 6, "negative_slop": 6, "fourth": [6, 67, 114, 143], "power": [6, 44, 51, 59, 67, 77, 86, 88, 91, 98, 100, 106, 114, 126, 131, 132, 138, 146, 148, 154, 156, 160, 161, 170, 171, 172, 179, 186, 205, 216, 242, 248, 256, 266], "knob": [6, 248], "launch": [6, 55, 62, 135, 138, 145, 146, 160, 175, 176, 177, 178, 183, 216, 221, 231, 248, 252], "few": [6, 7, 8, 11, 12, 17, 48, 53, 58, 88, 89, 91, 96, 98, 100, 101, 102, 103, 105, 115, 127, 133, 134, 137, 139, 140, 141, 146, 148, 149, 165, 167, 172, 173, 176, 179, 187, 193, 194, 198, 200, 215, 230, 231, 232, 235, 239, 256, 264, 265, 266], "sampler": [6, 34, 57, 97, 132, 133, 173, 181], "indic": [6, 12, 13, 16, 33, 51, 64, 65, 84, 88, 89, 91, 93, 95, 99, 100, 103, 105, 111, 113, 114, 138, 139, 149, 154, 171, 173, 174, 176, 183, 184, 190, 214, 216, 245, 254, 263, 265, 266], "index": [6, 7, 17, 34, 41, 42, 45, 50, 51, 53, 85, 96, 99, 100, 102, 103, 105, 106, 113, 132, 137, 138, 139, 148, 165, 169, 175, 179, 183, 187, 189, 190, 214, 248, 256, 268, 274], "instanti": [6, 8, 12, 16, 34, 39, 53, 54, 67, 69, 91, 98, 106, 108, 114, 124, 138, 160, 170, 171, 174, 194, 205, 220], "collat": [6, 53], "wherev": 6, "make_data_load": 6, "unique_ptr": 6, "data_load": 6, "zero": [6, 7, 13, 20, 32, 37, 42, 48, 51, 69, 88, 89, 91, 93, 96, 97, 105, 106, 114, 124, 132, 133, 140, 148, 149, 152, 161, 165, 167, 170, 171, 175, 177, 179, 184, 194, 215, 219, 221, 227, 230, 231, 245, 249, 250, 251, 263, 265, 266, 271], "spawn": [6, 13, 22, 51, 54, 55, 57, 62, 132, 146, 148, 160, 175, 176, 177, 199, 200, 249, 254], "concurr": [6, 113, 136, 138, 167, 199, 231, 248, 252], "kbatchsiz": 6, "dataloaderopt": 6, "batch_siz": [6, 16, 25, 34, 51, 53, 54, 57, 86, 132, 133, 134, 136, 148, 166, 174, 175, 176, 183, 184, 186, 190, 215, 245, 267], "consol": [6, 160, 184], "field": [6, 12, 13, 16, 17, 33, 51, 93, 103, 105, 124, 128, 148, 164, 175, 183, 189, 192, 254, 265], "rebuild": [6, 216], "6": [6, 13, 36, 42, 51, 69, 89, 91, 93, 96, 103, 105, 107, 111, 113, 114, 115, 142, 143, 148, 154, 157, 161, 170, 171, 172, 175, 177, 187, 189, 193, 202, 215, 235, 242, 243, 244, 248, 256, 258], "finish": [6, 19, 46, 91, 146, 175, 177, 184, 199, 212, 218, 231, 270], "danc": [6, 14], "generator_optim": 6, "adamopt": 6, "2e": [6, 88, 166], "beta": [6, 21, 125, 126, 131, 180, 238, 250, 251, 266], "make_tupl": 6, "discriminator_optim": 6, "5e": [6, 25], "adagrad": [6, 97, 114, 251, 266, 272, 275], "lbfg": [6, 14], "rmsprop": [6, 37, 48, 71, 100, 114], "sgd": [6, 37, 44, 45, 48, 69, 71, 86, 97, 100, 103, 106, 114, 115, 124, 146, 148, 175, 176, 177, 181, 184, 233, 234], "date": [6, 11, 12, 77, 79, 80, 81, 82, 83, 133, 176, 228, 244], "updat": [6, 12, 13, 14, 15, 16, 19, 20, 37, 44, 45, 51, 54, 69, 71, 84, 88, 98, 100, 103, 105, 106, 107, 114, 115, 132, 133, 134, 138, 142, 146, 149, 157, 164, 173, 174, 176, 177, 183, 190, 193, 197, 200, 205, 215, 228, 233, 249, 263, 271], "exhaust": [6, 13, 189], "epoch": [6, 19, 25, 34, 37, 38, 54, 55, 57, 86, 91, 95, 98, 100, 103, 106, 115, 121, 132, 133, 134, 138, 139, 148, 157, 164, 173, 177, 184, 192, 194, 229], "knumberofepoch": 6, "batch_index": 6, "zero_grad": [6, 37, 48, 69, 88, 103, 106, 114, 132, 133, 134, 146, 148, 164, 175, 177, 184, 190, 199, 200, 234], "real_imag": 6, "real_label": 6, "uniform_": [6, 177], "real_output": 6, "reshap": [6, 14, 93, 96, 105, 106, 169, 268], "d_loss_real": 6, "binary_cross_entropi": [6, 215], "fake_imag": 6, "fake_label": 6, "fake_output": 6, "d_loss_fak": 6, "d_loss": 6, "fill_": [6, 7, 183], "g_loss": 6, "printf": 6, "r": [6, 13, 16, 37, 44, 48, 77, 99, 114, 128, 131, 154, 155, 156, 157, 161, 174, 175, 177, 192, 216, 230, 231, 248, 274], "2ld": 6, "3ld": 6, "4f": [6, 132, 133, 166], "batches_per_epoch": 6, "evalu": [6, 14, 20, 25, 37, 39, 77, 88, 89, 95, 98, 108, 115, 141, 155, 161, 169, 174, 176, 184, 187, 189, 192, 206, 245], "uniformli": [6, 86, 174, 231], "robust": [6, 51, 55, 56, 77, 96, 135, 174], "smooth": [6, 98, 107], "propag": [6, 12, 19, 32, 37, 44, 46, 48, 54, 98, 102, 103, 106, 143, 152, 157, 160, 166, 173, 231], "repeat": [6, 16, 22, 88, 139, 140, 173, 183, 189, 194, 221, 230, 235, 236, 252, 263], "spiel": 6, "ideal": [6, 16, 34, 88, 91, 96, 98, 167, 179, 189, 240], "progress": [6, 11, 17, 25, 54, 55, 95, 97, 149, 160, 179, 184, 200, 254, 267], "fill": [6, 16, 91, 105, 106, 139, 149, 152, 264, 265], "yet": [6, 12, 13, 22, 52, 77, 88, 91, 96, 103, 110, 111, 141, 148, 167, 176, 179, 190, 200, 245, 268], "captur": [6, 8, 54, 88, 107, 108, 110, 125, 131, 132, 152, 186, 187, 189, 190, 193, 206, 216, 245, 254, 257], "moment": [6, 13, 266], "observ": [6, 16, 48, 53, 84, 97, 121, 132, 133, 138, 141, 149, 156, 157, 164, 167, 173, 174, 175, 177, 178, 179, 187, 193, 197, 206, 215, 216, 222, 228, 236, 246, 249, 250, 266, 270], "meaning": [6, 51, 98, 157, 254], "3c0711f20896": 6, "dcga": 6, "938": [6, 157], "6876": 6, "1304": 6, "3776": 6, "3101": 6, "300": [6, 103, 133, 177, 216, 230], "3652": 6, "6626": 6, "400": [6, 115, 216, 230, 245], "8057": 6, "2795": [6, 216], "3531": 6, "4452": 6, "600": [6, 157, 174], "3501": 6, "0811": 6, "700": 6, "3581": 6, "5623": 6, "800": 6, "6423": 6, "7385": 6, "900": [6, 251, 256, 272], "3592": 6, "7333": 6, "4660": 6, "5242": 6, "6364": 6, "0886": 6, "3717": 6, "8103": 6, "0201": 6, "3544": 6, "4522": 6, "6545": 6, "fine": [6, 20, 51, 53, 88, 99, 137, 148, 154, 160, 172, 183, 187, 190, 214, 215, 216, 230, 231, 248, 263], "faster": [6, 11, 14, 51, 58, 77, 93, 96, 98, 106, 115, 131, 133, 135, 145, 146, 149, 150, 155, 157, 166, 167, 175, 179, 187, 192, 215, 216, 230, 231, 232, 248, 250, 254, 267], "quickli": [6, 36, 45, 84, 98, 99, 100, 105, 106, 114, 136, 164, 174, 179, 194, 195, 206, 254], "onto": [6, 11, 16, 19, 22, 45, 93, 95, 96, 131, 149, 164, 176, 177, 190, 231, 254], "somewher": [6, 93, 99, 100, 115], "kcpu": [6, 257], "last": [6, 13, 16, 33, 44, 51, 54, 55, 77, 85, 86, 91, 93, 96, 97, 100, 103, 108, 121, 126, 131, 136, 137, 140, 148, 149, 154, 164, 173, 174, 175, 177, 178, 179, 180, 184, 189, 192, 215, 231, 245, 251, 263, 266, 270], "whose": [6, 84, 88, 89, 98, 105, 133, 137, 157, 167, 214, 216], "creation": [6, 12, 96, 220, 266], "hand": [6, 11, 16, 20, 22, 77, 96, 99, 105, 106, 140, 148, 166, 167, 187, 189, 190, 199, 200, 235, 236, 264], "insert": [6, 14, 20, 93, 177, 189, 206, 270], "explicit": [6, 7, 134, 157, 160, 167, 177, 189, 193, 212, 215, 238, 242, 250, 251, 264, 271], "suppli": [6, 102, 157, 172], "op": [6, 7, 8, 12, 13, 17, 50, 84, 111, 124, 125, 131, 132, 133, 134, 136, 141, 142, 146, 148, 154, 157, 172, 183, 193, 205, 215, 220, 250, 256, 257, 264, 265, 267, 268], "previou": [6, 13, 16, 17, 19, 20, 37, 51, 55, 57, 96, 97, 98, 106, 111, 121, 133, 134, 135, 139, 140, 143, 144, 145, 149, 156, 164, 167, 169, 171, 173, 174, 175, 177, 178, 179, 183, 184, 187, 189, 190, 216, 222, 231, 245], "resid": [6, 98, 167], "And": [6, 12, 18, 25, 54, 89, 102, 108, 139, 143, 154, 155, 157, 161, 172, 183, 184, 187, 189, 216, 230], "downstream": 6, "portabl": [6, 240], "augment": [6, 25, 53, 106, 121, 128, 131, 181, 189, 192], "period": [6, 51, 54, 135, 138, 156, 183, 254], "middl": 6, "procedur": [6, 48, 127, 174, 181], "restor": [6, 77, 115, 146, 157, 233], "long": [6, 12, 51, 52, 84, 86, 93, 96, 100, 101, 102, 104, 106, 133, 135, 137, 140, 149, 153, 154, 160, 165, 169, 174, 177, 183, 190, 193, 194, 216, 230, 231, 234, 243, 251, 252, 254, 257], "session": [6, 98, 108, 160], "fortun": [6, 12, 17, 86, 148, 149, 216], "deseri": [6, 115], "filenam": [6, 113, 215, 254], "interv": [6, 16, 88, 138, 177], "kcheckpointeveri": 6, "pt": [6, 55, 115, 132, 133, 134, 206, 240], "str": [6, 7, 22, 85, 133, 160, 169, 173, 176, 189, 230, 248], "checkpoint_count": 6, "integ": [6, 11, 42, 91, 96, 100, 102, 105, 138, 171, 189, 192, 221, 256, 266], "counter": [6, 13, 51, 54, 141, 148, 186, 242], "bump": 6, "beta1": [6, 54], "krestorefromcheckpoint": 6, "intermediari": [6, 137], "xxx": [6, 17, 53], "matplotlib": [6, 14, 34, 54, 59, 88, 89, 91, 95, 174, 179, 184], "argpars": [6, 132, 133, 175, 176, 177], "pyplot": [6, 14, 106, 184], "plt": [6, 14, 179, 184], "parser": [6, 99, 132, 133, 175, 176, 177], "argumentpars": [6, 132, 133, 175, 176, 177], "add_argu": [6, 132, 133, 175, 176, 177], "png": [6, 53, 131, 192], "parse_arg": [6, 132, 133, 160, 175, 176, 177], "jit": [6, 7, 8, 11, 17, 187, 216, 221, 235, 236, 242, 244, 245], "sample_fil": 6, "28": [6, 20, 34, 42, 93, 95, 106, 150, 166, 184, 216, 230, 256], "mul": [6, 141, 154, 189, 216, 230], "uint8": [6, 192], "numpi": [6, 14, 18, 21, 42, 45, 53, 59, 73, 75, 76, 88, 106, 108, 113, 143, 177, 184, 187, 214, 230, 245, 251, 263, 275], "axi": [6, 84, 102, 103, 139, 167, 171], "subplot": 6, "imshow": [6, 14, 184], "cmap": [6, 184], "grai": [6, 156, 214], "get_xaxi": 6, "set_vis": 6, "get_yaxi": 6, "savefig": 6, "out_fil": 6, "30": [6, 46, 84, 100, 129, 133, 135, 157, 171, 172, 175, 177, 216, 221], "57": [6, 20, 113, 154, 221], "4953": 6, "0195": [6, 256], "3610": 6, "8148": 6, "4072": 6, "36760": 6, "4444": 6, "3761": 6, "8790": 6, "3977": 6, "3315": 6, "120": [6, 115, 121, 177, 184, 221], "8084": 6, "hoorai": 6, "ball": 6, "court": 6, "hopefulli": [6, 52, 53, 77, 100, 115, 232], "digest": [6, 230], "necess": [6, 51, 95], "broad": [6, 59, 89, 97], "did": [6, 11, 18, 45, 54, 88, 91, 93, 96, 108, 124, 135, 148, 152, 165, 173, 176, 179, 190, 216, 254], "space": [6, 8, 16, 51, 54, 77, 88, 89, 93, 98, 99, 103, 105, 138, 149, 156, 164, 167, 173, 174, 177, 179, 183, 184, 190, 193, 206, 255], "consult": [6, 160, 164, 214], "stuck": [6, 275], "whenev": [6, 8, 55, 69, 96, 99, 100, 234], "rate": [6, 37, 44, 54, 86, 91, 93, 97, 98, 100, 121, 132, 133, 138, 139, 156, 174, 176, 190, 192, 229, 231, 254], "prototyp": [7, 12, 13, 17, 34, 189, 190, 205, 251, 257, 259, 263, 264, 265, 266, 267, 268, 272, 274, 275], "statu": [7, 25, 135, 138, 141, 177, 189, 244], "subject": [7, 13, 16, 132, 152, 179, 189, 205, 216, 244, 267, 268, 270, 274], "snapshot": [7, 131, 144, 189], "__obj_flatten__": 7, "inspect": [7, 88, 98, 111, 133, 134, 138, 153, 178, 181, 187, 189, 190, 194, 216, 244], "guard": [7, 11, 146, 198], "tupl": [7, 34, 41, 50, 84, 91, 93, 96, 98, 103, 105, 108, 152, 174, 189, 192, 230, 252, 266], "attribute_nam": 7, "_librari": 7, "register_fake_class": 7, "addition": [7, 13, 14, 37, 84, 137, 138, 146, 167, 189, 192, 199, 200, 239, 248, 254, 271], "__obj_unflatten__": 7, "classmethod": 7, "flatten": [7, 48, 70, 98, 106, 114, 132, 136, 166, 176, 189], "breakdown": [7, 183], "diff": [7, 55, 57, 84, 131, 216, 230], "custom_class": [7, 8], "tensorqueu": 7, "customclasshold": [7, 8], "init_tensor_": 7, "dict": [7, 22, 51, 53, 164, 173, 189, 192, 199, 200, 205, 215, 220], "init_tensor": 7, "size_tensor": 7, "size_tensor_acc": 7, "const_data_ptr": 7, "queue_siz": 7, "irang": 7, "val": [7, 8, 20, 133, 172], "queue_": 7, "to_str": 7, "push_back": [7, 8], "push": [7, 8, 54, 77, 93, 98, 155, 256, 274], "rear": 7, "lock_guard": 7, "mutex": 7, "mutex_": 7, "pop": [7, 8, 93], "front": [7, 150, 171, 189], "pop_front": 7, "get_raw_queu": 7, "raw_queu": 7, "dequ": 7, "mycustomclass": 7, "class_": [7, 8], "init": [7, 8, 135, 194, 271], "clone": [7, 8, 13, 56, 96, 139, 143, 144, 148, 154, 157, 169, 245, 252], "2a": 7, "class_nam": [7, 121], "faketensorqueu": 7, "2b": [7, 44], "cl": [7, 14, 258], "flattened_tq": 7, "libcustom_class": [7, 8], "tq": 7, "mod": [7, 187, 189, 245], "sin": [7, 16, 18, 64, 65, 69, 70, 71, 74, 75, 88, 96, 114, 231, 240, 258], "co": [7, 88, 105, 221, 231, 258], "poped_t": 7, "allclos": [7, 152, 154, 166, 252], "eager": [7, 12, 141, 154, 157, 178, 187, 189, 193, 197, 205, 206, 231, 243, 245, 270], "fullgraph": [7, 18, 141, 187, 197, 242], "exported_program": [7, 115, 245], "strict": [7, 115, 232, 264], "for_each_add_": 7, "inc": 7, "add_": [7, 96, 189, 263], "torch_library_frag": 7, "__torch__": [7, 8], "foo": [7, 8, 152, 176, 230, 258, 271], "intrusive_ptr": [7, 8, 170, 216, 230], "fake_for_each_add_": 7, "foreachadd": 7, "scriptobject": 7, "empty_tensor_queu": 7, "qlen": 7, "ep": [7, 142, 177, 189, 245, 263], "trace": [7, 11, 12, 18, 32, 44, 88, 95, 113, 131, 141, 154, 161, 167, 178, 183, 186, 189, 201, 241, 242, 246, 250, 254, 267], "major": [7, 12, 13, 93, 96, 105, 121, 135, 154, 164, 178, 187, 190, 236, 242, 249, 266], "downsid": [7, 152, 167], "consum": [7, 110, 113, 137, 154, 167, 173, 175, 177, 178, 221, 231], "side": [7, 53, 54, 84, 105, 150, 157, 164, 166, 167, 170, 174, 175, 183, 212], "difficult": [7, 99, 155, 165, 179, 190, 205, 265, 274], "parti": [7, 8, 11, 18, 125, 134, 135, 170], "complic": [7, 16, 99, 100, 105, 106, 114, 138, 189, 202, 215, 216, 274], "fakif": 7, "tracing_mod": 7, "alias": [7, 11, 12, 189], "within": [7, 16, 22, 62, 88, 89, 95, 106, 107, 108, 113, 124, 136, 141, 143, 154, 165, 171, 174, 176, 186, 187, 190, 193, 202, 216, 222, 231, 235, 239, 241, 244, 248, 255, 257, 266, 267, 268, 271], "torchbind": 7, "transfer": [8, 11, 21, 45, 53, 98, 106, 115, 116, 128, 131, 148, 167, 172, 176, 183, 192, 217, 232, 251, 255], "maintain": [8, 12, 16, 32, 33, 34, 44, 51, 77, 93, 98, 103, 130, 131, 135, 144, 148, 156, 174, 177, 189, 194, 199, 215, 249, 271], "persist": [8, 13, 39, 160, 199, 215], "member": [8, 69, 114, 271, 275], "portion": [8, 84, 164, 167, 169, 171, 212, 230, 254], "registr": [8, 9, 11, 12, 17, 18, 212], "templat": [8, 11, 116, 148, 154, 186, 251, 267], "mystackclass": 8, "stack_": 8, "pop_back": 8, "make_intrus": [8, 170], "merg": [8, 16, 46, 89, 93, 172], "elem": [8, 228], "smart": [8, 189], "oppos": [8, 9, 51, 54, 121, 148, 155, 161, 176, 216], "intern": [8, 11, 12, 13, 17, 38, 39, 51, 58, 70, 93, 98, 114, 130, 131, 132, 134, 138, 148, 183, 194, 199, 230, 254, 263], "manag": [8, 33, 44, 51, 62, 88, 106, 113, 124, 127, 134, 136, 141, 144, 145, 146, 160, 165, 178, 183, 187, 190, 199, 200, 201, 202, 215, 216, 217, 220, 221, 222, 231, 243, 248, 255, 256], "visibl": [8, 45, 86, 95], "qualifi": [8, 11, 200], "appear": [8, 13, 16, 105, 189, 212, 214], "my_class": 8, "contructor": 8, "overload": [8, 11], "stateless": [8, 16, 150, 152], "yourclass": 8, "ref": 8, "four": [8, 16, 22, 69, 91, 93, 96, 114, 133, 148, 169, 184, 193, 206, 245, 270], "examin": [8, 13, 84, 88, 89, 95, 97, 98, 148, 153, 167, 190], "address": [8, 14, 22, 25, 84, 93, 125, 131, 135, 148, 160, 167, 175, 176, 189, 190, 193, 201, 206, 228, 248, 250, 271], "fulli": [8, 13, 14, 16, 17, 36, 62, 84, 86, 91, 92, 93, 106, 121, 127, 131, 138, 141, 144, 157, 161, 174, 176, 178, 183, 194, 200, 205, 218, 265], "unari": 8, "rule": [8, 11, 32, 44, 48, 88, 96, 103, 124, 137, 150, 155, 165, 166, 173, 174, 189, 215], "cover": [8, 9, 16, 17, 19, 22, 34, 48, 96, 101, 111, 118, 124, 129, 130, 131, 133, 138, 148, 160, 169, 170, 173, 176, 177, 184, 187, 189, 195, 215, 223, 224, 225, 226, 229, 230, 231, 241, 248, 265, 267, 268], "add_librari": 8, "cmake_cxx_standard": 8, "custom_class_project": 8, "opt": [8, 11, 106, 138, 157, 170, 176, 177, 183, 197, 256], "rh": 8, "devtoolset": 8, "torchbind_tutori": 8, "j": [8, 32, 44, 77, 88, 98, 99, 103, 134, 179, 254], "test": [8, 11, 20, 25, 34, 37, 38, 51, 85, 89, 91, 97, 98, 100, 101, 107, 118, 131, 132, 133, 139, 148, 150, 152, 154, 157, 160, 167, 172, 176, 179, 181, 184, 187, 189, 205, 216, 254, 256, 274, 275], "annot": [8, 11, 12, 22, 34, 53, 100, 111, 187, 189, 216], "futur": [8, 22, 51, 106, 111, 113, 124, 132, 152, 156, 164, 170, 174, 175, 176, 177, 199, 233, 243, 266], "scriptmodul": 8, "export_attr": 8, "runtimeerror": [8, 45, 124, 135, 170, 245], "def_pickl": 8, "pushivalueimpl": 8, "pickler": 8, "__getstate__": 8, "__setstate__": 8, "pickl": [8, 39, 86, 106, 115, 164, 216, 230, 254], "salient": 8, "preserv": [8, 11, 20, 96, 126, 131, 134, 157, 171, 228, 233, 264, 270], "conveni": [8, 11, 16, 45, 48, 51, 89, 102, 106, 137, 140, 150, 155, 170, 173, 200, 215, 216, 230, 254, 264, 266], "wherea": [8, 106, 141, 184, 256, 264, 265], "didn": [8, 11, 89, 108, 153, 175, 274], "confus": [8, 106, 139, 152, 190, 256, 264, 265, 266], "de": [8, 20, 22, 179], "suppos": [8, 12, 98, 99, 100, 105, 132, 187, 192, 271], "manipulate_inst": 8, "trycustomop": 8, "bar": [8, 51, 84, 176, 187, 212], "enforc": [8, 12, 16, 138, 165, 263, 264], "relax": [8, 165, 245], "standalon": [8, 55, 215, 242, 252], "blend": 8, "smoothli": 8, "frequent": [8, 32, 84, 105, 114, 132, 243, 265], "faq": 8, "autograd": [9, 14, 17, 18, 19, 33, 34, 36, 37, 38, 39, 41, 42, 47, 48, 49, 59, 63, 66, 70, 89, 90, 91, 92, 93, 95, 96, 97, 101, 102, 106, 124, 125, 126, 130, 131, 139, 140, 143, 146, 154, 155, 161, 166, 174, 175, 176, 179, 180, 189, 194, 212, 215, 231, 242, 251, 274], "vmap": [9, 11, 126, 131, 152, 155, 161, 166, 251, 272, 275], "treat": [9, 18, 88, 105, 166, 175, 187, 189, 190], "opaqu": [9, 18, 230, 242], "callabl": [9, 18, 42, 53, 106, 160, 183, 187, 189, 214, 242], "especi": [9, 20, 51, 54, 77, 89, 96, 133, 135, 146, 153, 161, 164, 167, 189, 193, 256, 264], "respect": [9, 18, 19, 32, 34, 36, 37, 38, 44, 51, 54, 64, 65, 88, 89, 100, 102, 114, 118, 124, 136, 137, 149, 152, 154, 155, 166, 167, 173, 177, 179, 183, 190, 228, 233, 242, 248, 252], "aotinductor": [9, 125, 189, 235, 238, 242, 245, 250, 251], "sycl": [9, 131], "site": [9, 22, 52, 54, 153, 179, 221, 230, 245], "head": [9, 20, 36, 85, 93, 113, 146, 178, 192, 268], "toe": 9, "express": [9, 18, 88, 91, 93, 96, 99, 110, 118, 136, 189, 193, 205, 265, 270], "doesn": [9, 11, 12, 15, 18, 20, 62, 100, 102, 105, 106, 137, 155, 157, 167, 171, 187, 189, 197, 198, 205, 230, 231, 241, 245, 246, 248, 256, 263, 274], "pybind": 9, "ed": [9, 244], "newest": 11, "respons": [11, 13, 19, 22, 51, 88, 89, 97, 106, 130, 131, 136, 142, 146, 148, 175, 176, 179, 187, 189, 197, 214], "nontrivi": 11, "cross": [11, 15, 45, 54, 91, 93, 97, 136, 138, 231, 234, 248], "cut": [11, 169, 189], "concern": [11, 100, 190, 206, 263], "switch": [11, 17, 95, 96, 115, 164, 190, 215, 217, 221, 234], "organ": [11, 16, 53, 91, 115, 139, 160, 216, 248, 252], "convers": [11, 51, 88, 96, 157, 179, 205, 228, 263], "highest": [11, 45, 51, 95, 135, 140, 174, 187, 231], "prioriti": [11, 135], "redispatch": 11, "involv": [11, 17, 20, 36, 39, 52, 88, 89, 96, 99, 102, 108, 115, 124, 127, 137, 139, 145, 156, 164, 177, 179, 189, 222, 231, 236, 242, 245, 254, 255, 256, 268], "unlik": [11, 14, 20, 89, 96, 98, 114, 136, 137, 152, 157, 179, 186, 189, 242, 248, 271], "style": [11, 136, 169, 189, 192, 200], "abid": [11, 54], "myop": 11, "myadd": [11, 12], "realli": [11, 45, 88, 93, 96, 99, 100, 105, 114, 116, 131, 137, 184, 216, 251, 263, 265, 274], "myadd_cpu": 11, "self_": 11, "other_": 11, "self_ptr": 11, "other_ptr": 11, "catch": [11, 13, 187, 189, 243], "previous": [11, 32, 102, 106, 141, 152, 169, 171, 173, 174, 175, 183, 189, 228, 244, 263, 274], "myadd_cuda": 11, "split": [11, 22, 46, 51, 54, 86, 91, 95, 97, 103, 131, 139, 140, 146, 169, 173, 176, 177, 179, 190, 192, 212, 230], "boundari": [11, 134, 173, 239], "myops_cpu": 11, "myops_cuda": 11, "subdivid": 11, "xla": [11, 12, 17, 228], "torch_xla": [11, 12], "useabl": 11, "behav": [11, 18, 96, 106, 157, 165, 175, 212], "autogradnotimplementedfallback": 11, "notimpl": 11, "node": [11, 22, 32, 44, 48, 55, 56, 57, 58, 62, 64, 88, 95, 99, 111, 114, 124, 127, 133, 134, 135, 139, 141, 144, 145, 146, 153, 154, 160, 176, 179, 189, 202, 231, 248, 252, 257, 270], "require_grad": [11, 124], "ness": 11, "larger": [11, 14, 77, 84, 88, 98, 106, 110, 115, 125, 131, 132, 133, 136, 138, 144, 167, 174, 177, 179, 183, 186, 187, 199, 200, 216, 236, 256, 268], "pin": [11, 97, 137, 167, 231], "lost": [11, 20], "adinplaceorview": 11, "bookkeep": [11, 216], "autogradnotimplementedinplaceorviewfallback": 11, "logi": 11, "guess": [11, 37, 44, 51, 54, 139, 179], "twist": 11, "constitut": [11, 16], "hood": [11, 51, 54, 56, 58, 62, 114, 136, 137, 155, 156, 167, 177, 201, 266], "singleton": [11, 176], "findschemaorthrow": 11, "decltyp": 11, "down": [11, 12, 13, 33, 34, 52, 84, 86, 88, 93, 95, 100, 106, 132, 149, 154, 155, 156, 160, 176, 181, 184, 189, 230, 231, 254, 263], "typic": [11, 13, 16, 34, 44, 48, 50, 56, 57, 84, 91, 99, 100, 105, 134, 136, 138, 142, 144, 154, 164, 167, 173, 176, 187, 189, 190, 205, 215, 217, 231, 235, 236, 245, 248], "cast": [11, 20, 22, 75, 113, 133, 134, 167, 189, 215], "runtim": [11, 16, 22, 41, 52, 84, 88, 91, 92, 96, 110, 111, 113, 125, 131, 135, 136, 141, 142, 153, 164, 167, 169, 183, 187, 189, 190, 197, 215, 216, 221, 234, 238, 241, 250, 251, 256, 258, 267], "lookup": [11, 19, 105, 141, 177], "typo": [11, 124, 194], "myaddfunct": [11, 12], "autononvariabletypemod": [11, 12], "myadd_autograd": [11, 12], "raii": 11, "infinit": 11, "overflow": [11, 51, 215, 256], "send": [11, 12, 13, 14, 45, 46, 62, 86, 148, 156, 167, 169, 170, 175, 176, 177, 190, 221], "exclud": [11, 44, 134, 187, 221, 270], "consider": [11, 12, 132, 189, 190, 245], "autogradcpu": 11, "autogradcuda": 11, "pythondispatch": 11, "_python_dispatch": 11, "sens": [11, 14, 16, 98, 105, 106, 124, 150, 167, 184], "isn": [11, 88, 99, 152, 167, 184, 189, 190, 216, 218, 232, 233, 265], "glorifi": 11, "add_cpu": 11, "add_cuda": 11, "unsupport": [11, 107, 111, 125, 131, 187, 189, 245], "decentr": 11, "importantli": [11, 143, 164, 167, 216, 263], "aspect": [11, 17, 77, 148, 160, 192, 216], "patch": [11, 12, 174], "dispatchkei": [11, 12], "varieti": [11, 25, 33, 51, 88, 89, 93, 97, 106, 115, 140, 160, 167, 193, 206, 248, 266], "fallback": [11, 12, 17, 193], "amp": [11, 17, 62, 134, 157, 250, 267], "incom": [11, 91, 183], "float16": [11, 17, 133, 157, 215], "float32": [11, 16, 133, 134, 172, 177, 215, 228, 252, 256, 257, 267], "matmul": [11, 136, 154, 189, 215, 256, 274], "impair": 11, "converg": [11, 37, 51, 54, 65, 97, 98, 114, 115, 136, 148, 165, 174, 179, 198, 215, 232, 250], "hypothet": 11, "autocast_mod": 11, "mymatmul_autocast": 11, "excludedispatchkeyguard": 11, "no_autocast": 11, "mymatmul": 11, "cached_cast": 11, "khalf": 11, "elig": [11, 231], "polici": [11, 17, 128, 131, 132, 134, 156, 174, 175, 177, 180, 206, 248, 251], "mixtur": [11, 205], "meanwhil": [11, 137, 154, 264], "float64": 11, "unaffect": [11, 98], "forc": [11, 16, 20, 51, 93, 131, 179, 187, 193, 215, 231, 239, 263, 265], "fallthrough": 11, "occur": [11, 13, 18, 55, 84, 98, 154, 157, 167, 175, 176, 183, 189, 190, 194, 201, 221, 241, 254, 256], "pointwis": [11, 157, 186, 205, 231, 250], "fall": [11, 17, 89, 165, 174, 194, 243], "unfortun": [11, 114, 148, 189], "aren": [11, 143, 149, 189, 190, 231, 234, 265], "dri": [11, 183], "guidanc": [11, 135, 195, 215, 248], "reduct": [11, 69, 96, 114, 132, 133, 134, 137, 142, 164, 170, 183, 193, 215, 231, 263, 265, 275], "gemm": [11, 154, 267], "unless": [11, 41, 50, 96, 100, 107, 173, 189, 220, 256, 274], "categori": [11, 12, 77, 84, 89, 96, 121, 139, 140, 183, 189], "promote_typ": 11, "widest": 11, "safest": 11, "my_multiple_input_op_autocast": 11, "t0": [11, 133, 197, 216, 256], "t1": [11, 216], "optimist": 11, "exec_typ": 11, "my_multiple_input_op": 11, "myadd_autocast": 11, "gymnast": 11, "suitabl": [11, 42, 144, 148, 230], "invoc": [11, 153, 175, 212, 236, 241], "stabil": [11, 98, 174], "41478": 11, "repo": [12, 17, 22, 56, 84, 130, 131, 144, 148, 160, 167, 175, 176, 190, 255, 256], "mainten": 12, "solut": [12, 20, 54, 107, 115, 125, 131, 154, 166, 167, 187, 190, 201, 216, 231, 240, 250, 265, 268], "pr": [12, 184, 193, 230], "propos": [12, 25, 136, 149, 165, 201, 263, 265], "request": [12, 32, 44, 86, 96, 106, 133, 160, 165, 172, 175, 176, 199, 214, 257, 265, 266, 267, 271], "hardwar": [12, 17, 20, 41, 50, 52, 96, 98, 108, 139, 148, 150, 155, 157, 166, 167, 170, 171, 190, 193, 206, 217, 231, 242, 245, 256], "googl": [12, 20, 25, 36, 51, 54, 95, 131, 148, 149, 173, 174, 183, 190, 248], "tpu": [12, 170, 234], "chip": 12, "layout": [12, 20, 136, 152, 193, 202, 231, 263, 266, 275], "spars": [12, 19, 93, 100, 105, 131, 149, 171, 190, 228, 251, 265, 272, 275], "quantiz": [12, 98, 121, 126, 129, 164, 219, 228, 250, 251, 272], "mainli": [12, 16, 17, 22, 154, 183, 187, 244, 270], "haven": [12, 86, 88, 91, 96, 99, 103, 105, 124, 150, 153, 166], "identifi": [12, 20, 34, 55, 57, 77, 84, 85, 89, 106, 113, 145, 156, 157, 160, 162, 171, 176, 189, 192, 201, 245, 254, 266], "carri": [12, 16, 51, 54, 88, 96, 98, 102, 144, 149, 157, 179, 220], "privateuse1": [12, 130, 131, 271], "autogradprivateuse1": [12, 17], "privateuse2": [12, 17], "autogradprivateuse2": [12, 17], "privateuse3": [12, 17], "autogradprivateuse3": [12, 17], "tensorimpl": [12, 17, 216, 230], "storag": [12, 17, 18, 97, 102, 115, 131, 137, 149, 150, 157, 167, 173, 183, 199, 200, 215, 220, 228, 251, 254, 263, 265, 266, 272, 275], "dispatchkeyset": [12, 17], "k": [12, 14, 84, 89, 99, 124, 136, 166, 175, 176, 178, 254, 267], "caffe2": 12, "typemeta": 12, "data_typ": [12, 102], "opaquetensorimpl": 12, "tweak": [12, 51, 234], "overrid": [12, 17, 53, 91, 100, 135, 153, 157, 160, 170, 241, 250], "vulkan": 12, "src": [12, 13, 111, 148, 170, 230], "registrationdeclar": 12, "snippet": [12, 132, 133, 135, 141, 148, 154, 170, 178, 202, 215, 220, 231, 250, 252, 255, 263, 267, 271], "ab": [12, 187, 221], "abs_": 12, "abs_out": 12, "absolute_": 12, "absolute_out": 12, "angl": [12, 16, 105], "angle_out": 12, "sgn": 12, "uniqu": [12, 20, 51, 55, 57, 99, 100, 101, 103, 105, 133, 145, 160, 176, 179, 190, 192, 245, 263], "boolean": [12, 149, 189], "impli": [12, 98, 103, 189, 199, 220, 230, 242], "schema_my_op1": 12, "my_op1": 12, "schema_my_op2": 12, "my_op2": 12, "schema_my_op2_backward": 12, "my_op2_backward": 12, "zoom": [12, 84, 95, 138, 183], "1600": [12, 216, 230], "grow": [12, 51, 100, 135, 137, 144, 160, 199], "unrealist": 12, "decompos": [12, 20, 132, 189], "combin": [12, 37, 57, 62, 86, 88, 91, 93, 98, 99, 102, 105, 106, 127, 131, 132, 137, 139, 140, 142, 150, 161, 167, 171, 174, 177, 179, 189, 190, 201, 202, 216, 231, 257, 268], "classifi": [12, 14, 25, 33, 44, 47, 48, 49, 54, 59, 77, 84, 86, 91, 93, 98, 115, 121, 125, 131, 134, 140, 156, 162, 179, 180, 192, 193, 214, 245, 250, 251], "accompani": 12, "comment": [12, 148, 164, 179, 217, 263, 274], "sacrif": [12, 171], "max_pool2d": [12, 132, 166, 176, 221], "mostli": [12, 88, 98, 139, 177, 179], "alia": [12, 96], "worri": [12, 54, 100, 143, 146, 164, 177, 202], "my_op": 12, "squeez": [12, 16, 96, 184, 214, 256], "max": [12, 13, 51, 54, 84, 93, 132, 138, 148, 173, 184, 189, 193, 231, 245, 248, 249, 256, 268, 275], "op_backward": 12, "proper": [12, 32, 133, 136, 146, 157, 173, 177, 190, 231, 263], "rare": [12, 17, 51, 121, 167, 179, 231], "assumpt": [12, 16, 77, 98, 105, 106, 161, 167], "myadd_schema": 12, "train": [12, 14, 19, 20, 22, 32, 36, 37, 38, 42, 44, 47, 48, 49, 53, 56, 58, 59, 62, 64, 65, 67, 69, 70, 71, 74, 75, 77, 84, 89, 90, 92, 93, 96, 98, 99, 101, 103, 105, 106, 108, 114, 125, 126, 127, 128, 131, 132, 134, 135, 138, 141, 142, 146, 157, 158, 161, 162, 165, 166, 169, 170, 172, 175, 176, 177, 178, 180, 183, 186, 187, 189, 192, 197, 198, 199, 200, 201, 202, 206, 215, 218, 221, 229, 232, 233, 236, 245, 249, 250, 251, 252, 254, 255, 265], "my_add": 12, "_xlac": 12, "torch_xla_sourc": 12, "include_dir": [12, 170], "library_dir": 12, "extra_link_arg": 12, "make_relative_rpath": 12, "seamlessli": [12, 16, 55, 136, 160, 190, 193, 216, 240], "nm": 12, "torchvsion": 12, "torchvis": [12, 14, 34, 36, 38, 42, 44, 45, 52, 59, 86, 89, 91, 92, 95, 97, 98, 121, 128, 131, 132, 133, 153, 164, 172, 175, 176, 180, 183, 184, 187, 206, 214, 221, 229, 231, 234, 244, 245, 251, 256, 270], "adhoc": 12, "unbox": 12, "potenti": [12, 16, 77, 88, 99, 133, 135, 141, 167, 176, 187, 189, 192, 235, 240, 242, 254, 270, 275], "wiki": [12, 152], "suit": [12, 89, 113, 173, 267], "ship": [12, 45, 91], "delet": [12, 85, 137, 146, 152, 164, 169, 177, 256], "old": [12, 115, 135, 171, 183, 268], "won": [12, 44, 106, 114, 132, 143, 152, 161, 166, 173, 189, 190, 215, 267], "until": [12, 51, 84, 88, 133, 135, 139, 140, 148, 149, 154, 164, 167, 173, 175, 176, 177, 183, 216, 252, 263], "interrupt": [12, 55, 86, 179], "quarterli": 12, "cadenc": 12, "announc": 12, "slack": [12, 45], "com": [12, 22, 25, 51, 111, 132, 139, 140, 142, 179, 186, 192, 214, 216, 245, 256], "Not": [12, 146, 172, 249], "search": [12, 22, 51, 129, 131, 138, 154, 171, 189, 248, 256], "instantiate_device_type_test": 12, "testtorchdevicetyp": 12, "testviewop": 12, "testtensordeviceop": 12, "testtypepromot": 12, "__reduce_ex__": 12, "monkei": 12, "direct": [12, 32, 44, 48, 54, 77, 88, 89, 91, 97, 105, 124, 138, 148, 152, 156, 161, 165, 179, 199, 243, 250, 255, 256, 266], "view": [12, 13, 16, 17, 19, 52, 55, 57, 58, 62, 84, 89, 95, 96, 102, 103, 105, 106, 108, 114, 115, 132, 135, 136, 138, 144, 145, 146, 148, 152, 154, 169, 170, 175, 176, 177, 178, 179, 184, 198, 200, 201, 202, 205, 212, 214, 222, 229, 246, 252, 254, 268], "vice": [12, 41, 50], "versa": [12, 41, 50], "Such": [12, 13, 88], "seamless": [12, 190, 201, 275], "coverag": [12, 152, 155, 157, 215, 268, 270], "math": [12, 69, 88, 102, 114, 161, 172, 231], "comprehens": [12, 25, 41, 50, 89, 111, 154, 160, 189, 205, 230, 231], "refactor": [12, 115, 144], "reus": [12, 67, 106, 114, 143, 152, 165, 174, 190, 231, 235, 236, 248], "codegen": [12, 154], "dev": [12, 100, 141, 183, 187, 212, 215, 275], "andrew": 13, "gu": 13, "shard": [13, 127, 131, 144, 166, 200, 201, 202, 250, 252], "saw": [13, 16, 37, 51, 91, 93, 96, 100, 102, 152, 155, 156], "skeleton": [13, 16, 228], "implicitli": [13, 44, 51, 88, 132, 143, 178, 189, 212], "schedul": [13, 84, 86, 97, 121, 125, 132, 133, 134, 146, 160, 169, 174, 183, 192, 221, 231, 238, 248, 250, 251], "synchron": [13, 19, 57, 58, 84, 132, 134, 146, 148, 160, 173, 175, 176, 183, 187, 199, 212, 215, 216, 243, 249, 254, 255, 256], "rank": [13, 19, 22, 46, 55, 57, 84, 126, 131, 132, 133, 134, 135, 146, 148, 160, 169, 170, 175, 176, 177, 190, 199, 200, 202, 248, 249, 252, 254], "commun": [13, 17, 22, 57, 131, 132, 133, 134, 136, 138, 144, 145, 146, 169, 170, 173, 175, 176, 177, 183, 189, 190, 201, 202, 231, 250, 252, 254, 258, 275], "particip": [13, 93, 145, 176, 215, 231], "group": [13, 22, 25, 51, 62, 85, 93, 96, 113, 127, 131, 132, 133, 134, 135, 140, 142, 144, 146, 148, 154, 160, 169, 183, 190, 192, 193, 199, 200, 202, 216, 245, 248, 249, 254, 256], "fewer": [13, 142, 155], "hang": [13, 57, 140], "facilit": [13, 16, 51, 89, 96, 98, 115, 130, 131, 134, 136, 149, 231, 268, 271], "earli": [13, 54, 86, 146, 148, 167, 205, 265], "shadow": 13, "hook": [13, 134, 136, 141, 146, 171, 180, 222, 251], "dist": [13, 22, 132, 133, 135, 146, 148, 169, 170, 176, 199, 200, 202, 249, 252, 254], "mp": [13, 17, 33, 38, 41, 55, 57, 64, 77, 96, 114, 121, 131, 132, 133, 146, 148, 175, 176, 177, 192, 199, 200, 249], "ddp": [13, 19, 55, 56, 62, 131, 132, 133, 134, 136, 145, 183, 202, 249], "nccl": [13, 22, 55, 57, 84, 132, 133, 135, 136, 148, 183, 190, 200, 202, 252, 254], "world_siz": [13, 19, 22, 25, 55, 57, 132, 133, 135, 146, 148, 169, 170, 175, 176, 177, 199, 200, 202, 249, 252, 254], "num_input": 13, "master_addr": [13, 22, 55, 57, 132, 135, 146, 148, 170, 175, 176, 177, 199, 200, 249, 254], "localhost": [13, 22, 55, 57, 95, 132, 135, 146, 170, 175, 176, 177, 183, 184, 190, 199, 200, 202, 229, 239, 249], "master_port": [13, 22, 55, 57, 132, 135, 146, 148, 170, 175, 176, 177, 199, 200, 249, 254], "29500": [13, 22, 148, 170, 175, 176, 177, 249], "init_process_group": [13, 19, 22, 55, 57, 132, 133, 135, 146, 148, 169, 170, 199, 200, 202, 249, 252, 254], "device_id": [13, 57, 115, 133, 134, 146, 249], "nproc": [13, 55, 57, 132, 146, 175, 177, 199, 200, 249, 252], "arbitrarili": [13, 51, 98, 222], "togeth": [13, 20, 33, 39, 51, 53, 62, 91, 93, 96, 97, 98, 102, 106, 132, 134, 142, 146, 149, 150, 160, 167, 175, 177, 179, 193, 230, 242], "lr": [13, 25, 48, 54, 69, 86, 91, 103, 106, 114, 115, 121, 125, 132, 133, 134, 146, 148, 154, 156, 174, 175, 176, 177, 184, 197, 199, 200, 238, 249, 250, 251], "notabl": [13, 86, 228], "divide_by_initial_world_s": 13, "world": [13, 16, 22, 38, 56, 88, 96, 100, 136, 148, 153, 156, 170, 174, 175, 176, 189, 190, 199, 200, 202, 254, 268], "nonetheless": [13, 98], "mind": [13, 41, 51, 54, 98, 145, 161], "preliminari": [13, 148], "delv": [13, 154, 242], "deeper": [13, 14, 38, 89, 96, 98, 100, 153, 154, 178, 189, 198, 205], "insight": [13, 77, 84, 130, 148, 178, 216, 230], "prepar": [13, 20, 45, 53, 54, 70, 71, 95, 103, 114, 115, 150, 164, 169, 170, 173, 175, 206, 221, 235, 270], "join_hook": 13, "kwarg": [13, 115, 134, 153, 157, 173, 176, 189, 190, 197, 245, 256, 267], "join_devic": 13, "join_process_group": 13, "processgroup": [13, 19, 22, 62, 127, 131, 136, 177, 190, 202, 231, 254], "throw_on_early_termin": 13, "explain": [13, 14, 20, 44, 48, 54, 77, 89, 100, 106, 124, 135, 136, 154, 187, 189, 194, 221, 240, 245, 257, 267, 270], "joinconfig": 13, "_join_config": 13, "main_hook": 13, "repeatedli": [13, 93, 173, 177, 255], "post_hook": 13, "is_last_join": 13, "broadcast": [13, 70, 106, 114, 134, 146, 148, 160, 170, 189, 230, 249], "itself": [13, 32, 33, 44, 84, 93, 96, 98, 102, 103, 106, 111, 115, 124, 136, 137, 139, 143, 148, 152, 156, 173, 176, 177, 179, 190, 215, 221, 244], "vacuou": 13, "contextlib": 13, "nullcontext": 13, "relat": [13, 16, 45, 54, 88, 89, 96, 97, 102, 105, 130, 131, 136, 154, 165, 189, 193, 216, 231, 267], "conform": 13, "interleav": [13, 252], "syncbatchnorm": [13, 57], "proce": [13, 98, 100, 154, 189, 231, 254], "__exit__": 13, "heartbeat": 13, "notify_join_context": 13, "serializ": 13, "proceed": [13, 48, 98, 111, 167], "overlap": [13, 58, 132, 133, 134, 139, 144, 146, 167, 183, 231, 252], "moreov": [13, 167, 216, 263], "permit": [13, 215], "customiz": [13, 149], "idea": [13, 25, 77, 98, 100, 101, 102, 105, 114, 136, 142, 149, 154, 165, 174, 177, 179, 212, 216, 231, 248, 249, 263, 274], "counterjoinhook": 13, "sync_max_count": 13, "all_reduc": [13, 62, 132, 133, 148, 170, 201, 254], "get_rank": [13, 134, 146, 148], "process_group": [13, 202, 254], "common_rank": 13, "find_common_rank": 13, "max_count": 13, "__call__": [13, 53, 171], "increment": [13, 102, 106, 148, 174], "meth": [13, 16], "to_consid": 13, "reduceop": [13, 132, 133, 148], "device_count": [13, 55, 57, 86, 96, 132, 146, 199, 200, 202], "highlight": [13, 51, 107, 118, 127, 133, 134, 160, 178, 183, 187, 189, 190, 242], "alexi": 14, "jacq": 14, "winston": 14, "her": [14, 170], "leon": 14, "gati": 14, "alexand": [14, 270], "ecker": 14, "matthia": 14, "bethg": 14, "artist": 14, "distanc": [14, 64, 65, 69, 70, 71, 74, 75, 88, 98, 114], "d_c": 14, "d_": 14, "measur": [14, 37, 84, 88, 89, 91, 93, 98, 105, 132, 135, 153, 155, 166, 167, 173, 174, 178, 181, 187, 215, 216, 221, 230, 236, 244, 250, 256, 267], "indispens": [14, 173], "pil": [14, 42, 53, 172, 192, 214], "pretrain": [14, 25, 44, 77, 89, 105, 121, 131, 172, 179, 244, 245, 270], "longer": [14, 54, 60, 61, 88, 100, 106, 108, 114, 125, 134, 137, 141, 154, 164, 171, 174, 175, 187, 189, 196, 198, 208, 209, 210, 211, 213, 216, 231, 260, 261, 267, 268, 269], "resiz": [14, 48, 54, 149, 214], "unabl": [14, 18, 150, 166, 189, 256, 265], "caff": 14, "picasso": 14, "jpg": [14, 34, 53, 54, 89, 214], "reconvert": 14, "f_": [14, 173], "xl": 14, "l": [14, 16, 44, 53, 54, 88, 100, 124, 173, 174, 189, 216, 244, 254], "w_": [14, 105], "squar": [14, 37, 48, 53, 64, 65, 69, 70, 71, 74, 75, 88, 93, 96, 98, 114, 142, 143, 156, 165, 174, 178], "contentloss": 14, "recomput": [14, 98, 142, 144, 165, 231], "act": [14, 44, 51, 88, 93, 96, 138, 149, 171, 174, 176, 189, 190], "gram": 14, "g_": 14, "hat": [14, 103], "counteract": 14, "matric": [14, 20, 41, 50, 88, 102, 155, 165], "pool": [14, 22, 54, 93, 98, 106, 115, 184, 190, 256], "impact": [14, 20, 37, 86, 98, 149, 167, 175, 178, 214, 248, 249, 256], "tend": [14, 20, 88, 93, 98, 256], "almost": [14, 103, 105, 132, 136, 149, 172, 189, 235, 256], "sl": 14, "19": [14, 20, 42, 154, 174, 189, 221, 256, 257], "vgg": 14, "child": [14, 113, 183, 202], "connect": [14, 48, 86, 91, 93, 105, 121, 131, 135, 136, 148, 152, 153, 161, 171, 172, 174, 193, 194, 202, 218, 254], "eval": [14, 20, 25, 39, 51, 106, 115, 132, 133, 142, 176, 179, 186, 214, 245, 256, 270], "485": [14, 53, 98, 172, 214], "456": [14, 53, 98, 172, 214], "406": [14, 53, 98, 172, 214], "229": [14, 53, 98, 172, 214], "224": [14, 53, 98, 172, 206, 214, 245, 248, 270], "225": [14, 53, 98, 113, 172, 214], "vgg19": [14, 157], "maxpool2d": [14, 48, 115, 153, 184], "align": [14, 131, 178, 179, 212, 255, 264], "depth": [14, 44, 54, 58, 88, 91, 96, 102, 137, 154, 189, 194, 197, 231], "immedi": [14, 22, 41, 50, 54, 93, 96, 103, 148, 164, 175, 176, 183, 256], "white": [14, 18, 20, 77, 93, 106, 184], "input_img": [14, 214], "content_img": 14, "bfg": 14, "closur": [14, 189, 194], "reevalu": 14, "exce": [14, 77, 142, 190], "sphinx_gallery_thumbnail_numb": 14, "neural_style_tutori": [14, 21, 251], "paszk": [15, 148, 174], "dziedzic": 15, "shall": [15, 48, 54], "learnabl": [15, 48, 69, 114, 115, 233], "particularli": [15, 20, 55, 106, 165, 179, 231, 267], "badfftfunct": 15, "literatur": [15, 174], "confusingli": 15, "correl": [15, 84, 93, 106, 154], "filter": [15, 25, 51, 85, 89, 98, 137, 179, 190, 230, 254], "flip": [15, 155], "wrt": [15, 143], "numpy_extensions_tutori": [15, 21, 251], "freeli": 16, "inspir": [16, 148, 155, 161, 178, 274], "v1": [16, 20, 157, 174, 175, 177, 216], "openai": [16, 128, 131, 156, 173, 174, 175, 177, 245], "farama": [16, 173], "gymnasium": [16, 173, 174], "encount": [16, 45, 51, 133, 141, 154, 187, 189, 190, 193, 231, 239, 245, 271], "undertaken": 16, "broader": 16, "wider": [16, 155], "algebra": [16, 41, 50, 91, 96, 100], "acquaint": 16, "set_se": 16, "avenu": 16, "backpropag": [16, 37, 38, 44, 48, 51, 77, 88, 99, 100, 101, 103, 105, 106, 114, 124, 137, 156, 190], "_set_se": 16, "torqu": 16, "upward": 16, "posit": [16, 89, 93, 100, 126, 131, 165, 173, 174, 178, 179, 189, 193, 214, 248, 254], "angular": 16, "stand": [16, 88, 106, 156, 193, 266], "equat": [16, 54, 174, 218, 222], "motion": 16, "veloc": [16, 174], "theta": [16, 77, 100, 173], "_t": [16, 156], "theta_t": 16, "dt": 16, "rad": 16, "sec": [16, 132], "gravit": 16, "mass": 16, "accord": [16, 17, 25, 32, 96, 97, 115, 154, 156, 169, 171, 174, 178, 239, 266], "theta_": [16, 156], "001": [16, 25, 115, 146, 175, 184], "deleg": [16, 131], "is_shar": 16, "new_th": 16, "th": [16, 53, 100, 105, 148, 156], "plu": [16, 100], "new_thdot": 16, "neg": [16, 37, 51, 89, 93, 99, 100, 106, 107, 154, 167, 171, 173, 214], "inde": [16, 18, 98, 142, 155, 167, 173, 178, 187, 190, 216, 265, 266], "discourag": [16, 41, 50, 173], "possibli": [16, 54, 134, 173, 189, 240, 254], "omit": [16, 88, 113, 134, 154, 173, 193, 221, 228, 230], "agent": [16, 128, 131, 174, 175, 177, 180, 251], "albeit": 16, "param": [16, 53, 115, 132, 133, 134, 143, 146, 148, 150, 152, 166, 176, 177, 228, 249, 263], "mandatori": [16, 152, 173], "domain": [16, 25, 34, 38, 51, 52, 77, 97, 111, 131, 173, 186, 231, 268], "accur": [16, 77, 86, 91, 113, 138, 153, 167, 177, 187, 243, 265, 270], "lazili": [16, 164], "costli": [16, 137, 231], "observation_spec": [16, 173], "compositespec": 16, "dictionari": [16, 38, 39, 51, 84, 105, 108, 115, 140, 164, 166, 173, 175, 176, 179, 190, 220, 233, 250, 255], "action_spec": [16, 173], "reward_spec": [16, 173], "done_spec": 16, "input_spec": [16, 173], "state_spec": 16, "output_spec": 16, "neither": [16, 96, 248], "shortcut": 16, "tensorspec": 16, "irrelev": [16, 170], "incorpor": [16, 98, 107, 131, 149, 178], "pseudo": [16, 25], "_make_spec": 16, "pendulumenv": 16, "gen_param": 16, "batch_lock": 16, "homonym": [16, 167], "check_env_spec": [16, 173], "coupl": [16, 36, 51, 92, 96, 97, 105, 133, 143, 149, 150, 164, 167, 184, 189, 231], "rand_step": 16, "randomli": [16, 45, 53, 54, 74, 75, 86, 91, 93, 114, 140, 156, 174, 179, 190], "slightli": [16, 133, 148, 149, 167, 172, 179, 216, 231, 266], "invers": [16, 96, 255, 264], "thdot": 16, "effort": [16, 51, 53, 54, 111, 230], "summar": [16, 51, 53, 106, 118, 124, 133, 138, 183, 189], "_apply_transform": 16, "_call": 16, "inv": 16, "_inv_apply_transform": 16, "eventu": [16, 135, 142, 149], "out_keys_inv": 16, "replai": [16, 156], "unitari": 16, "sine": [16, 114], "cosin": 16, "raw": [16, 33, 45, 51, 70, 84, 114, 194, 243, 254], "del_kei": 16, "mdp": 16, "gather": [16, 57, 89, 95, 132, 134, 136, 146, 148, 149, 153, 173, 194, 215, 252, 274, 275], "unexplor": 16, "abil": [16, 96, 106, 115, 136, 137, 148, 181, 184, 187, 193, 265], "fly": [16, 53, 99, 173, 193], "recreat": [16, 32, 44], "Of": [16, 98, 102, 106, 137, 148, 184, 212, 244, 256, 264, 266], "clip": [16, 51, 77, 173], "scratch": [16, 32, 44, 51, 55, 98, 99, 115, 118, 121, 131, 180, 232, 250, 251, 254], "advanc": [17, 20, 21, 44, 86, 101, 104, 107, 108, 110, 111, 125, 126, 127, 130, 131, 134, 146, 167, 190, 193, 201, 231, 248, 251, 263, 266, 267, 270, 272, 274, 275], "verif": [17, 176], "rapid": [17, 88, 266], "manufactur": 17, "bit": [17, 70, 91, 96, 113, 114, 149, 172, 173, 179, 190, 206, 216, 256, 263], "imposs": [17, 91, 99, 164, 274], "simultan": [17, 32, 44, 58, 138, 148, 167, 172, 231], "began": 17, "lack": [17, 84, 89, 201, 263], "enhanc": [17, 89, 125, 126, 135, 139, 167, 181, 231, 245, 248, 258, 267, 271], "rapidli": 17, "situat": [17, 88, 96, 134, 142, 143, 146, 148, 192, 256], "wrapper_custom_tensor_add": 17, "torch_fn": 17, "custom_cpu_fallback": 17, "operatorhandl": 17, "hint": [17, 22, 88, 98, 99, 103, 111, 137, 148, 175, 183, 189, 194], "cpu_fallback": 17, "cppfunction": 17, "makefromboxedfunct": 17, "cumtomselufunct": 17, "selu": 17, "wrapper_autogradcumstom__selu": 17, "wrapper_autogradcustom__selu": 17, "autocastprivateuse1": 17, "autocast": [17, 267], "kernel_privateuseon": 17, "makefallthrough": 17, "backendmodul": 17, "_register_device_modul": 17, "backend_nam": 17, "get_amp_supported_dtyp": 17, "is_autocast_en": 17, "get_autocast_dtyp": 17, "set_autocast_dtyp": 17, "set_autocast_en": 17, "generatorimpl": 17, "builder": [17, 189], "register_generator_privateuse1": 17, "customgeneratorimpl": 17, "make_custom_gener": 17, "deviceindex": 17, "device_index": 17, "make_gener": 17, "make_cumstom_gener": 17, "stream": [17, 84, 96, 99, 134, 160, 167, 257], "event": [17, 84, 113, 132, 133, 175, 187, 221, 229, 243, 254], "deviceguard": 17, "deviceguardimplinterfac": 17, "c10_register_guard_impl": 17, "customguardimpl": 17, "backend_meta_": 17, "extrameta": 17, "backendmeta": 17, "custombackendmetadata": 17, "unordered_map": 17, "tensorbackendmetaregistri": 17, "for_seri": 17, "for_deseri": 17, "expand": [17, 88, 102, 108, 154, 162, 184, 199, 245, 268], "benchmark": [17, 20, 25, 34, 113, 131, 138, 154, 155, 166, 167, 172, 178, 187, 193, 205, 221, 227, 230, 231, 240, 245, 248, 250, 251, 256, 267, 268, 270], "timer": [17, 54, 166, 179, 197, 219, 227, 251, 256], "ascend": [17, 54, 85, 271], "npu": [17, 270, 271], "meet": [17, 52, 54, 206, 216], "usabl": [17, 115, 124, 149, 232, 254], "compli": 17, "habit": 17, "torch_npu": [17, 271], "exclus": [17, 171], "rename_privateuse1_backend": 17, "register_privateuse1_backend": 17, "unsupported_dtyp": 17, "quint8": 17, "generate_methods_for_privateuse1_backend": 17, "for_tensor": 17, "for_modul": 17, "for_storag": 17, "is_npu": 17, "perhap": [18, 77, 139, 171, 200], "prevent": [18, 37, 51, 57, 106, 113, 137, 140, 146, 154, 156, 167, 189, 190, 215, 216, 231, 236, 248, 271], "custom_op": [18, 111, 242], "land": [18, 130, 131, 141, 156, 193, 249, 265], "everyth": [18, 44, 86, 96, 98, 100, 124, 129, 138, 139, 143, 149, 160, 172, 173, 174, 175, 179, 184, 190, 230, 255], "induc": [18, 171, 254], "bad": [18, 86, 137, 231, 256], "uncom": [18, 51, 53, 65, 75, 91, 95, 102, 106, 114, 160, 169, 174], "cropped_img": 18, "img": [18, 89, 131, 184, 214], "black": [18, 77, 84, 93, 106, 130, 131, 136, 138, 175, 179], "aka": [18, 155, 157, 167, 193, 244], "mutates_arg": 18, "led": 18, "messag": [18, 51, 88, 111, 141, 148, 160, 189, 248], "past": [18, 51, 52, 97, 102, 189, 193], "exercis": [18, 45, 148, 215], "reader": [18, 103, 148, 193, 230], "region": [18, 89, 96, 125, 138, 153, 181, 192, 212, 215, 219, 231, 238, 241, 243, 250, 251], "unus": [18, 154, 170], "forgot": [18, 254], "python_custom_op": [18, 21, 251], "pritam": 19, "damania": 19, "yi": [19, 189, 235, 244], "wang": [19, 25, 108, 110, 111, 154, 156, 254], "distributeddataparallel": [19, 57, 58, 62, 127, 132, 133, 134, 148, 170, 177, 215, 249], "paradigm": [19, 20, 62, 98, 114, 127, 176, 177], "techniqu": [19, 20, 51, 62, 98, 99, 105, 107, 126, 131, 136, 142, 143, 144, 153, 162, 165, 167, 169, 171, 177, 190, 193, 194, 231, 245, 248, 256, 263, 268], "embed": [19, 51, 93, 99, 101, 103, 104, 115, 131, 133, 134, 136, 169, 176, 177, 179, 184, 193, 201, 251, 252], "dens": [19, 20, 190, 193, 263, 268], "fc": [19, 44, 156], "replic": [19, 22, 58, 62, 131, 132, 136, 144, 146, 148, 160, 176, 177, 190, 202], "trainer": [19, 25, 57, 138, 144, 175, 176, 177, 200], "hybrid": [19, 202], "pipedream": 19, "master": [19, 132, 148, 153, 157, 176, 177, 192, 254], "embeddingbag": [19, 22], "drive": [19, 54, 88, 91, 93, 131, 156, 160, 167, 263], "respond": [19, 89, 156, 176], "amongst": [19, 190, 264], "themselv": [19, 93, 190, 194, 265], "remotemodul": 19, "kick": [19, 32, 44, 160, 164, 175, 176, 177], "remot": [19, 62, 127, 138, 160, 175, 176, 177, 183, 212, 239, 248], "hybridmodel": 19, "allreduc": [19, 84, 132, 136, 146, 170, 231, 254], "firstli": [19, 111, 154, 174], "tcp": [19, 57, 135, 144, 145, 148], "init_method": [19, 146, 148, 252], "_run_train": [19, 177], "rpc_async": [19, 175, 177], "exit": [19, 152, 175, 176, 177, 197, 198, 205, 206, 241, 246, 248, 254], "port": [19, 135, 148, 176, 190, 212, 239, 254], "conflict": [19, 154, 189], "remote_emb_modul": 19, "rref": [19, 175, 176], "distributedoptim": [19, 176, 177], "remote_paramet": 19, "cannnot": 19, "crossentropyloss": [19, 37, 100, 136, 169, 177, 184], "get_next_batch": [19, 175, 177], "jess": 20, "cai": 20, "seek": [20, 89, 201], "expens": [20, 41, 98, 113, 177, 189, 221, 230, 243, 256], "accuraci": [20, 25, 38, 45, 91, 97, 98, 106, 126, 127, 129, 131, 132, 133, 134, 138, 161, 171, 172, 176, 181, 184, 215, 229, 234, 250, 270], "grain": [20, 34, 88, 133, 148, 160, 183, 187, 214, 215, 216, 230], "pattern": [20, 93, 95, 131, 136, 148, 154, 160, 165, 176, 202, 206, 235, 263, 265, 270], "2n": 20, "degrad": [20, 77, 235], "sparsifi": [20, 126, 131, 171], "answer": [20, 37, 89, 93, 100, 148, 153, 164, 179, 189, 190], "tune": [20, 37, 84, 98, 106, 116, 126, 129, 131, 132, 138, 141, 172, 219, 227, 230, 248, 250, 251, 256, 267, 270], "recov": [20, 132, 133, 146, 157], "nearli": [20, 106, 184, 216], "f1": [20, 187], "86": [20, 154, 172, 177, 193, 216, 256], "92": [20, 216, 256], "3x": [20, 65, 114, 215, 231], "speedup": [20, 45, 114, 131, 150, 154, 166, 193, 231, 236, 244, 256, 267, 268], "nvidia": [20, 52, 142, 148, 157, 187, 202, 215, 231, 250], "a100": [20, 133, 137, 166, 187, 193, 256], "80gb": 20, "newer": [20, 110, 147, 157, 164, 166, 191, 223, 224, 225, 226, 231, 273], "readm": 20, "ao": [20, 256, 270], "beginn": [20, 35, 40, 46, 47, 49, 66, 72, 76, 79, 80, 81, 82, 90, 92, 94, 101, 104, 109, 112, 114, 116, 127, 131, 195, 223, 224, 225, 226], "to_sparse_semi_structur": 20, "mask": [20, 89, 93, 113, 128, 131, 149, 165, 171, 178, 192, 245, 256, 263, 264, 266, 268, 275], "motiv": [20, 77, 135, 154, 176, 257, 264, 265, 268], "affect": [20, 89, 93, 97, 98, 143, 167, 169, 231], "gain": [20, 84, 166, 183, 252, 275], "swap": [20, 53, 100, 136, 167, 173, 193, 228, 256, 268], "compress": [20, 89, 171, 263, 266, 270], "arrang": [20, 114], "drawback": [20, 105, 189, 199, 200], "2020": 20, "amper": [20, 133, 161, 166, 215], "cutlass": [20, 267], "cusparselt": 20, "milder": 20, "account": [20, 52, 106, 149, 164, 167, 179, 184, 193, 244, 270], "retrain": 20, "sweet": 20, "spot": [20, 91, 95, 96, 139], "2x": [20, 131, 143, 164], "theoret": [20, 54, 167, 236, 263], "granular": [20, 133, 154, 190, 221, 231, 248], "fp16": [20, 133, 157, 256, 267], "resnet": [20, 44, 45, 89, 137, 183, 231], "imagenet": [20, 45, 53, 89, 121, 172, 214], "76": [20, 157, 177, 193, 216], "resnext": 20, "101_32x8d": 20, "79": [20, 154, 216, 221, 256], "xception": 20, "ssd": [20, 231], "rn50": 20, "coco2017": 20, "bbap": 20, "24": [20, 42, 154, 172, 193, 216, 256], "maskrcnn": 20, "37": [20, 113, 172, 177, 221], "fairseq": 20, "en": [20, 152, 179], "wmt14": 20, "bleu": 20, "squad": 20, "91": [20, 177, 216, 256], "workflow": [20, 36, 84, 86, 107, 131, 132, 190, 195, 266], "perspect": [20, 102, 173, 248], "subproblem": 20, "bmatrix": [20, 103], "handoff": 20, "anticip": 20, "area": [20, 89, 93, 128, 184, 192, 214, 256, 266], "littl": [20, 54, 91, 98, 100, 106, 149, 173, 175, 177, 178, 181, 183], "colab": [20, 22, 25, 36, 41, 50, 92, 95, 106, 131, 148, 149, 155, 173, 174, 190], "pip": [20, 25, 52, 84, 89, 95, 108, 110, 156, 172, 174, 183, 187, 192, 206, 214, 216, 218, 221, 229, 232, 233, 234, 235, 236, 242, 248, 254, 256, 270], "panda": [20, 53, 77], "hug": [20, 154], "face": [20, 45, 53, 54, 77, 154, 245], "token": [20, 51, 105, 133, 136, 140, 160, 169, 178, 179, 193, 231, 245], "span": [20, 99, 146, 183, 212], "segment": [20, 131, 193, 256], "text": [20, 34, 45, 54, 77, 89, 99, 100, 102, 103, 105, 124, 131, 133, 139, 140, 148, 162, 167, 173, 174, 179, 183, 193, 212, 214, 245], "wikipedia": [20, 152], "articl": [20, 34], "score": [20, 51, 89, 99, 103, 105, 113, 178, 179, 192, 193, 214, 245, 252], "fair": [20, 98, 268], "remov": [20, 51, 54, 55, 85, 106, 111, 113, 118, 134, 137, 146, 154, 164, 178, 179, 186, 187, 189, 190, 193, 216, 230, 256, 263, 264, 268], "lowest": [20, 132, 171], "l1": [20, 86, 171], "satisfi": [20, 138, 231], "anytim": 20, "pruner": 20, "update_mask": 20, "shot": [20, 175, 245], "wouldn": [20, 105, 132, 149], "squash_mask": 20, "left": [20, 32, 44, 48, 51, 54, 65, 88, 95, 96, 100, 105, 114, 115, 148, 156, 161, 173, 174, 176, 178, 183, 184, 212], "quickstart": [20, 32, 33, 34, 35, 36, 37, 39, 41, 42, 131], "28x": 20, "16": [20, 25, 86, 91, 93, 98, 115, 146, 149, 152, 157, 172, 177, 184, 189, 192, 199, 200, 216, 221, 244, 245, 256, 267], "amen": 20, "spent": [20, 84, 178, 183, 216, 221, 236], "slower": [20, 58, 146, 167, 174, 187, 192, 214, 256, 257, 268], "counterpart": [20, 154, 189, 202], "delta": [20, 154, 166, 174, 216, 230], "exact": [20, 98, 115, 142, 178, 189, 193, 197, 254], "78": [20, 216, 256], "53": [20, 157, 221, 256], "44": [20, 154, 177], "09": [20, 51, 154, 177], "93": [20, 42, 113, 177, 216, 221, 256], "49": [20, 157, 177, 216], "15": [20, 25, 42, 46, 77, 91, 93, 121, 184, 192, 216, 221, 227, 230, 256], "54": [20, 157, 216], "71x": 20, "35": [20, 136, 157], "74": [20, 177, 216, 221], "23x": 20, "72": [20, 172, 216, 221, 256], "71": [20, 53, 154, 177], "59": [20, 172, 216, 221, 256], "41": [20, 132, 172, 216, 221], "22x": 20, "286": [20, 157], "65": [20, 42, 53, 166, 177, 192, 193, 216], "247": [20, 177], "63": [20, 221], "14x": 20, "46": [20, 154, 157, 172, 256], "02x": 20, "ye": [20, 52, 164, 242], "47": [20, 86, 157, 216, 221, 256], "68": [20, 53, 154, 216, 256], "18x": 20, "36": [20, 172], "13x": 20, "159": 20, "22": [20, 42, 154, 157, 177, 216, 256], "142": 20, "23": [20, 154, 177, 216, 221, 230, 256], "12x": [20, 193], "sparsesemistructuredtensor": 20, "semi_structured_spars": [20, 21, 251], "00": [21, 40, 42, 49, 66, 72, 76, 91, 94, 104, 112, 113, 116, 154, 160, 177, 180, 221, 227, 238, 251, 256, 258, 272], "012": [21, 49], "mem": [21, 40, 49, 66, 72, 76, 84, 94, 104, 112, 113, 116, 180, 221, 227, 238, 251, 272], "mb": [21, 40, 49, 66, 72, 76, 94, 104, 112, 113, 116, 132, 180, 221, 227, 238, 249, 251, 272], "torchrl": [21, 128, 131, 149, 156, 180, 251], "ddpg": [21, 128, 131, 251], "scipi": [21, 45, 143, 187, 251], "pendulum": [21, 128, 131, 173, 251], "acceler": [21, 33, 38, 41, 50, 51, 52, 59, 62, 64, 77, 98, 110, 114, 121, 131, 139, 146, 148, 157, 167, 180, 192, 194, 198, 206, 231, 251, 268, 272], "bert": [21, 93, 131, 132, 251, 270], "semi": [21, 128, 131, 193, 251], "sparsiti": [21, 105, 131, 171, 251, 263, 265, 272, 275], "000": [21, 34, 40, 66, 72, 94, 112, 116, 138, 156, 157, 180, 184, 227, 251, 272], "supervis": [21, 100, 128, 131, 181, 251], "usb": [21, 128, 131, 172, 251], "usb_semisup_learn": [21, 25, 251], "embeddingplann": [22, 131], "conda": [22, 84, 89, 95, 148, 154, 214, 229, 230, 248, 254, 256, 275], "cudatoolkit": 22, "sudo": [22, 172, 183], "rm": 22, "miniconda3": [22, 230], "py37_4": 22, "x86_64": 22, "sh": [22, 146, 212], "anaconda": [22, 84, 89, 148, 229], "miniconda": 22, "chmod": 22, "fbgemm": [22, 190], "ipython": [22, 113], "cp": [22, 252], "restart": [22, 89, 95, 145, 174], "newli": [22, 121, 148], "sy": [22, 55, 57, 146, 148, 170, 197], "python37": 22, "python3": [22, 172, 183, 230, 245, 254], "dynload": 22, "enviro": 22, "spmd": [22, 136, 200], "mimic": [22, 98, 235, 256, 263], "launcher": 22, "embeddingbagcollect": 22, "bag": [22, 36, 184, 190], "ebc": [22, 190], "row": [22, 53, 77, 88, 93, 96, 100, 102, 103, 105, 106, 134, 136, 138, 139, 155, 175, 190, 212, 264, 266, 274], "4096": [22, 190, 256], "parameterconstraint": 22, "placement": [22, 134, 248, 270], "evenli": [22, 88], "column": [22, 88, 96, 100, 102, 113, 136, 139, 154, 155, 161, 183, 190, 221, 264, 265, 266], "intra": [22, 133, 136, 202], "host": [22, 36, 56, 84, 92, 99, 132, 133, 136, 146, 148, 160, 167, 169, 176, 177, 183, 202, 221, 231, 239], "interconnect": [22, 218], "nvlink": [22, 136], "data_parallel": 22, "planner": 22, "embedding_typ": 22, "embeddingcomputekernel": 22, "shardingtyp": 22, "large_table_cnt": 22, "small_table_cnt": 22, "large_t": 22, "embeddingbagconfig": 22, "large_table_": 22, "embedding_dim": [22, 93, 103], "num_embed": 22, "feature_nam": 22, "large_table_feature_": 22, "poolingtyp": 22, "small_tabl": 22, "small_table_": 22, "small_table_feature_": 22, "gen_constraint": 22, "sharding_typ": 22, "table_wis": 22, "large_table_constraint": 22, "small_table_constraint": 22, "mimick": 22, "single_rank_execut": 22, "embeddingbagcollectionshard": [22, 190], "model_parallel": 22, "embeddingshardingplann": 22, "topologi": [22, 190, 200, 202, 212], "moduleshard": 22, "shardingenv": 22, "init_distributed_single_host": 22, "pyre": 22, "fixm": 22, "set_devic": [22, 55, 57, 132, 133, 199, 200, 202, 252, 257], "compute_devic": 22, "pg": [22, 254], "sharder": [22, 190], "shardingplan": 22, "collective_plan": 22, "sharded_model": 22, "from_process_group": 22, "spmd_sharing_simul": 22, "get_context": [22, 148], "exitcod": 22, "factor": [22, 93, 121, 167, 174, 175, 187, 190, 199, 256], "medium": [22, 135, 192, 231], "large_table_0": 22, "parametershard": 22, "compute_kernel": 22, "batched_fus": 22, "sharding_spec": 22, "enumerableshardingspec": 22, "shardmetadata": 22, "shard_offset": 22, "shard_siz": 22, "large_table_1": 22, "small_table_0": 22, "small_table_1": 22, "finer": [22, 34, 221], "halv": [22, 113], "row_wis": 22, "2048": [22, 98], "512": [22, 133, 169, 189, 216, 221], "imbal": [22, 231], "vertic": 22, "column_wis": 22, "32": [22, 25, 57, 86, 91, 93, 96, 98, 103, 113, 132, 161, 166, 169, 172, 176, 177, 183, 189, 206, 216, 252, 256, 267], "unfortu": 22, "batched_dens": 22, "hao": 25, "chen": [25, 189], "unifi": [25, 131, 142, 160, 201, 214, 245], "ssl": 25, "modular": [25, 34, 115, 187, 233], "fixmatch": 25, "defixmatch": 25, "vision": [25, 38, 45, 53, 89, 93, 116, 128, 131, 157, 164, 214, 245, 251], "speech": [25, 77, 93, 99, 101, 105, 131, 140, 231], "light": [25, 54, 91, 95, 96, 142, 214], "vit": [25, 245], "famou": [25, 77], "baselin": [25, 89, 98, 206, 214, 216, 230, 256], "strong": [25, 99, 189, 245, 266], "unlabel": [25, 96], "confid": [25, 54, 89, 91, 97, 100, 138, 173, 174, 184, 215], "threshold": [25, 51, 84, 138, 173, 177, 231], "absorb": 25, "gaussian": [25, 54, 138, 173], "overcom": [25, 107], "quantiti": [25, 98, 126, 131, 136, 155, 161, 166], "qualiti": [25, 156, 179], "trade": [25, 138, 164, 267], "afford": 25, "cv": [25, 268], "nlp": [25, 91, 93, 100, 103, 104, 105, 118, 131, 180, 215, 231, 251, 268], "audio": [25, 34, 45, 131, 151, 182, 185], "semilearn": 25, "get_dataset": 25, "get_data_load": 25, "weak": 25, "get_net_build": 25, "get_algorithm": 25, "get_config": 25, "hyper": [25, 178, 248], "vit_tiny_patch2_32": 25, "use_pretrain": 25, "pretrain_path": 25, "microsoft": [25, 36, 110, 111, 183, 258], "vit_tiny_patch2_32_mlp_im_1k_32": 25, "pth": [25, 115, 200, 245, 256], "num_train_it": 25, "num_eval_it": 25, "num_log_it": 25, "adamw": [25, 133, 174], "layer_decai": 25, "eval_batch_s": 25, "cifar10": [25, 59, 86, 91, 183, 234], "num_label": 25, "num_class": [25, 175, 184, 192], "img_siz": 25, "crop_ratio": 25, "875": 25, "data_dir": [25, 86, 133], "ulb_samples_per_class": 25, "hard_label": 25, "ema_p": 25, "999": [25, 184], "ent_loss_ratio": 25, "uratio": 25, "ulb_loss_ratio": 25, "dataset_dict": 25, "include_lb_to_ulb": 25, "train_lb_load": 25, "train_lb": 25, "train_ulb_load": 25, "train_ulb": 25, "eval_load": 25, "from_nam": 25, "tb_log": 25, "logger": [25, 135, 160], "valid": [25, 37, 51, 86, 93, 95, 97, 98, 110, 113, 115, 121, 124, 132, 133, 138, 139, 142, 143, 160, 167, 170, 186, 189, 192, 216, 240, 243, 264, 265], "87": [25, 113, 177, 216, 256, 267], "lb_imb_ratio": 25, "ulb_imb_ratio": 25, "1500": [25, 133, 216], "ulb_num_label": 25, "3000": [25, 184, 189, 245], "kihyuk": 25, "sohn": 25, "et": [25, 51, 54, 77, 148, 171, 179], "al": [25, 51, 54, 77, 171, 179], "yidong": 25, "audio_data_augmentation_tutori": [26, 28], "html": [26, 27, 28, 29, 30, 35, 46, 47, 51, 59, 64, 77, 78, 79, 80, 81, 82, 90, 98, 101, 109, 114, 118, 121, 127, 146, 151, 152, 153, 162, 182, 185, 188, 189, 190, 195, 215, 219, 220, 223, 224, 225, 226, 256, 259, 262, 264, 266, 273], "audio_datasets_tutori": 27, "audio_feature_extractions_tutori": 29, "audio_io_tutori": 30, "dataload": [32, 33, 35, 36, 37, 38, 39, 41, 42, 45, 46, 54, 57, 77, 86, 98, 116, 132, 133, 139, 148, 167, 169, 176, 183, 184, 207, 219, 231, 251, 270], "frac": [32, 44, 65, 88, 99, 100, 102, 105, 114, 124, 137, 143, 148, 173, 174, 193], "partial": [32, 44, 86, 88, 102, 115, 124, 132, 133, 134, 136, 137, 141, 149, 152, 155, 232, 250, 252], "leaf": [32, 44, 88, 116, 131, 187, 251], "retain_graph": [32, 141], "surround": [32, 167], "mark": [32, 51, 136, 141, 157, 160, 174, 175, 189, 212, 265], "frozen": [32, 44, 134, 156, 267], "acycl": [32, 44, 124], "dag": [32, 124], "chain": [32, 44, 88, 96, 100, 101, 124, 134, 142, 154, 175, 265], "accumul": [32, 44, 48, 51, 54, 88, 91, 102, 103, 124, 143, 156, 164, 174, 175, 176, 177, 215, 234], "vec": [32, 44, 88, 267], "langl": 32, "x_1": [32, 102, 161], "x_n": [32, 54], "rangl": 32, "y_1": [32, 102], "y_m": 32, "ccc": [32, 44, 88], "y_": [32, 44, 88, 99], "x_": [32, 44, 88], "cdot": [32, 44, 54, 88, 105, 124, 137], "vdot": [32, 44, 88], "ddot": [32, 44, 88], "v_1": 32, "v_m": 32, "life": [32, 98, 139, 140, 199], "autogradqs_tutori": [32, 35, 40, 79, 251], "compris": [33, 34, 54, 115], "fashionmnist": [33, 34, 36, 38, 42, 184], "mtia": [33, 38, 41, 64, 77, 96, 114, 121, 146, 192], "neuralnetwork": 33, "dimension": [33, 41, 48, 50, 51, 54, 62, 74, 75, 88, 93, 95, 96, 98, 101, 102, 103, 105, 114, 136, 141, 157, 171, 178, 179, 184, 190, 202, 266], "minibatch": [33, 34, 95, 106, 139, 150, 166, 169], "28x28": [33, 106, 184, 218], "784": [33, 95, 106, 150, 184], "nonlinear": 33, "wide": [33, 62, 88, 93, 106, 135, 136, 139, 140, 148, 170, 179, 214, 231, 256], "phenomena": 33, "seq_modul": 33, "logit": [33, 37, 98], "infti": [33, 174], "parameter": 33, "preview": 33, "buildmodel_tutori": [33, 35, 40, 251], "messi": 34, "readabl": [34, 53, 89, 96, 99, 140, 183, 216, 230, 254], "primit": [34, 38, 114, 131, 136, 155, 160, 167, 190, 193, 254], "pre": [34, 99, 128, 131, 133, 136, 148, 160, 172, 190, 192, 193, 200, 206, 240, 248, 256, 267], "fashion": [34, 51, 95, 97, 110, 133, 136, 138, 176, 181, 184, 187, 190], "zalando": 34, "60": [34, 42, 108, 133, 139, 140, 157, 172, 177, 179, 184, 189, 221, 256], "grayscal": [34, 149, 156], "internet": [34, 172], "target_transform": [34, 38, 42], "training_data": [34, 103], "img_dir": 34, "csv": [34, 51, 53, 133], "annotations_fil": 34, "tshirt1": 34, "tshirt2": 34, "ankleboot999": 34, "decode_imag": 34, "img_label": 34, "reshuffl": 34, "overfit": [34, 91, 106, 115, 140], "train_featur": 34, "train_label": 34, "shuffl": [34, 38, 53, 57, 91, 97, 106, 132, 133, 148, 176, 183, 184, 252], "data_tutori": [34, 35, 40, 251], "intro": [35, 36, 40, 57, 100, 101, 127, 149, 184, 198, 205, 251], "quickstart_tutori": [35, 38, 40, 251], "tensorqs_tutori": [35, 40, 41, 82, 251], "tensor_tutori": [35, 47, 49, 50, 59, 251], "transforms_tutori": [35, 40, 42, 251], "autograd_tutori": [35, 44, 47, 49, 59, 251], "optimization_tutori": [35, 37, 40, 251], "saveloadrun_tutori": [35, 39, 40, 251], "sphx_glr_beginner_basics_autogradqs_tutori": [35, 40, 251], "sphx_glr_beginner_basics_buildmodel_tutori": [35, 40, 251], "sphx_glr_beginner_basics_intro": [35, 40, 251], "sphx_glr_beginner_basics_saveloadrun_tutori": [35, 40, 251], "sphx_glr_beginner_basics_optimization_tutori": [35, 40, 251], "sphx_glr_beginner_basics_data_tutori": [35, 40, 251], "sphx_glr_beginner_basics_quickstart_tutori": [35, 40, 251], "sphx_glr_beginner_basics_tensorqs_tutori": [35, 40, 251], "sphx_glr_beginner_basics_transforms_tutori": [35, 40, 251], "suraj": [36, 55, 56, 57, 58, 113, 144, 145, 156], "subramanian": [36, 55, 56, 57, 58, 113, 144, 145, 156], "seth": 36, "juarez": 36, "cassi": 36, "breviu": 36, "dmitri": 36, "soshnikov": 36, "ari": 36, "bornstein": 36, "ml": [36, 77, 96, 98, 127, 131, 138, 190, 205], "belong": [36, 139, 190], "shirt": [36, 184], "trouser": [36, 184], "pullov": [36, 184], "dress": [36, 184], "coat": [36, 184], "sandal": [36, 184], "sneaker": [36, 184], "ankl": [36, 184], "boot": [36, 172, 184], "cloud": [36, 56, 92, 106, 108, 248], "open": [36, 38, 52, 86, 89, 91, 92, 95, 97, 105, 108, 110, 131, 133, 148, 150, 153, 164, 166, 179, 183, 193, 206, 212, 214, 258], "favorit": [36, 92, 148, 153], "id": [36, 84, 92, 141, 146, 175, 176, 177, 189, 190, 199, 200, 248], "walkthrough": [37, 44, 50, 84, 113], "video": [37, 44, 45, 55, 57, 58, 88, 89, 91, 93, 95, 96, 97, 118, 126, 127, 128, 129, 131, 144, 145, 183, 195], "3blue1brown": [37, 44], "smaller": [37, 93, 98, 105, 106, 132, 136, 173, 175, 214, 216, 220, 236], "unpredict": [37, 88, 146], "jump": [37, 77, 103, 107, 108, 110, 111, 156, 240], "untrain": 37, "degre": [37, 65, 93, 114, 138, 179, 183, 252, 266], "dissimilar": [37, 96, 105], "regress": [37, 106, 181, 216, 229], "nllloss": [37, 100, 103], "classif": [37, 45, 54, 77, 86, 89, 91, 96, 97, 98, 100, 121, 128, 131, 132, 140, 172, 181, 192, 193, 234], "logsoftmax": 37, "deposit": [37, 44], "train_loop": 37, "test_loop": 37, "warmstart": [37, 219, 227, 250, 251], "torchtext": [38, 52, 91, 97, 131], "torchaudio": [38, 52, 91, 97, 128, 131, 133, 183, 256], "cifar": [38, 45, 91, 184], "coco": [38, 192], "conduct": [38, 89, 154, 170, 256], "decreas": [38, 51, 77, 85, 98, 106, 136, 139, 190, 266], "state_dict": [39, 51, 55, 57, 86, 132, 133, 134, 146, 171, 187, 199, 200, 215, 218, 219, 227, 228, 232, 235, 250, 251], "load_state_dict": [39, 55, 86, 97, 115, 134, 146, 199, 200, 215, 219, 227, 232, 251], "weights_onli": [39, 115, 134, 146], "unpickl": [39, 115, 254], "inferenc": 39, "fail": [39, 88, 96, 107, 115, 124, 154, 160, 167, 174, 178, 187, 189, 215, 245, 254, 271, 275], "inconsist": [39, 115, 154], "legaci": [39, 108, 135], "checkpoint": [39, 51, 86, 134, 144, 164, 169, 215, 219, 227, 233, 250, 251, 255, 256], "tip": [39, 54, 92, 105, 184, 219, 227, 250, 251], "04": [40, 183, 216, 251, 258], "411": 40, "396": [40, 42, 251], "ndarrai": [41, 42, 50, 96], "elimin": [41, 113, 142, 150, 154, 155, 172, 189, 193, 268, 271], "datatyp": [41, 50, 75, 91, 96, 113, 215], "overridden": [41, 50, 149, 220], "1200": [41, 216], "arithmet": [41, 91, 96, 167], "manipul": [41, 42, 91, 95, 114, 124, 134, 153, 164, 194], "slice": [41, 50, 103, 106, 160, 171, 193, 202, 230, 268], "breez": [41, 50], "cat": [41, 45, 50, 89, 91, 99, 102, 103, 154, 177, 179, 184, 192, 214], "subtli": [41, 50], "y1": [41, 192], "y2": 41, "y3": 41, "wise": [41, 50, 77, 96, 100, 136, 148, 154, 157, 161, 189, 190, 231, 244], "z1": [41, 154], "z2": 41, "z3": 41, "aggreg": [41, 44, 91, 113, 156, 160, 221, 264], "numer": [41, 51, 74, 75, 96, 98, 99, 108, 114, 134, 138, 215, 231, 252], "operand": [41, 88, 189], "denot": [41, 100, 103, 190, 263, 264, 268], "suffix": [41, 50, 84, 124, 154], "copy_": [41, 50, 113, 134, 154, 175, 220, 228], "t_": [41, 50], "problemat": [41, 50, 154, 165, 231], "accept": [42, 69, 86, 88, 98, 103, 114, 136, 138, 152, 155, 161, 166, 167, 173, 176, 183, 221, 231, 274], "commonli": [42, 51, 71, 86, 93, 98, 114, 169, 172, 179, 183, 222, 231, 236], "hot": [42, 51, 77, 93, 105, 139, 140, 149, 179], "scatter_": [42, 175], "26": [42, 154, 156, 157, 172, 177, 256], "4m": 42, "5k": 42, "361kb": 42, "229k": 42, "38": [42, 113, 177, 230, 251, 256, 272], "679kb": 42, "918k": 42, "12": [42, 91, 113, 116, 132, 133, 154, 175, 184, 216, 251, 256, 272], "10mb": 42, "60m": 42, "02": [42, 54, 154, 177, 258], "82mb": 42, "75m": 42, "7mb": 42, "6m": 42, "0mb": [42, 249], "8m": 42, "5mb": 42, "82": [42, 172, 221, 256], "21": [42, 113, 172, 216, 221, 230], "7m": 42, "8mb": 42, "3mb": 42, "29": [42, 172, 177, 216, 256], "327kb": 42, "42m": 42, "359kb": 42, "06": [42, 160, 256], "680kb": 42, "11mb": 42, "83": [42, 53, 230], "67m": 42, "29mb": 42, "09mb": 42, "15k": 42, "floattensor": [42, 96], "intens": [42, 154, 167, 248], "prop": 44, "proportion": [44, 164], "travers": [44, 177], "resnet18": [44, 157, 172, 183, 206, 214, 244, 270], "height": [44, 48, 93, 96, 186, 192, 212, 245], "width": [44, 45, 48, 93, 96, 138, 161, 186, 192, 245], "momentum": [44, 45, 67, 71, 86, 91, 97, 106, 114, 115, 142, 148, 175, 184, 190, 233, 234], "3a": [44, 172], "9a": 44, "dq": [44, 206], "bf": 44, "external_grad": 44, "blue": [44, 133, 136, 212], "freez": [44, 121, 206], "finetun": [44, 128, 131, 137, 164, 180, 251], "unfrozen": 44, "exclusionari": 44, "revers": [44, 51, 88, 134, 152, 161, 165, 172, 179, 190], "autodiff": [44, 126, 131, 155], "pillow": [45, 91], "opencv": 45, "librosa": 45, "cython": 45, "nltk": 45, "spaci": 45, "viz": [45, 89, 214], "huge": [45, 100, 105, 114, 136, 146, 149], "airplan": [45, 91, 98], "automobil": [45, 91, 98], "bird": [45, 91], "deer": [45, 91], "dog": [45, 91, 98, 103, 192, 214], "frog": [45, 91], "hors": [45, 91], "truck": [45, 91, 98], "3x32x32": 45, "32x32": [45, 48, 91, 98, 108, 184], "extrem": [45, 105, 157, 190, 194], "pilimag": 45, "brokenpipeerror": 45, "fun": [45, 51, 107, 108, 110, 111, 173], "entropi": [45, 54, 91, 93, 97, 136, 234], "learnt": 45, "truth": [45, 77, 108, 192, 275], "okai": 45, "wasn": [45, 99, 102, 189], "energi": [45, 51], "chanc": [45, 51, 98, 156], "hmmm": 45, "massiv": [45, 102, 105, 190], "plai": [45, 51, 54, 98, 100, 128, 131, 173, 180, 248, 251], "art": [45, 54, 89, 91, 93, 171, 214], "recurr": [45, 51, 99, 103, 128, 131, 139, 140, 162, 165, 179, 180, 194, 251], "lstm": [45, 51, 93, 101, 104, 139, 140, 177, 251], "chat": [45, 51, 179], "003": [45, 49, 51, 54, 77, 91, 94, 95, 97, 98, 100, 102, 104, 116, 140, 154, 155, 167, 178, 180, 187, 189, 193, 251], "cifar10_tutori": [45, 47, 49, 59, 251], "sung": 46, "kim": 46, "jenni": 46, "kang": 46, "mytensor": 46, "my_tensor": [46, 115], "rewrit": [46, 141, 165, 189, 274], "parallelli": 46, "getitem": 46, "demo": [46, 131, 170, 183], "cnn": [46, 98, 128, 131, 161, 165, 166, 181, 192], "rnn": [46, 51, 93, 131, 149, 162, 165, 176, 179, 180, 231, 251], "capsul": 46, "monitor": [46, 106, 148, 160], "output_s": [46, 254], "former_torchi": 46, "parallelism_tutori": 46, "data_parallel_tutori": [46, 47, 49, 81, 251], "neural_networks_tutori": [47, 48, 49, 59, 251], "gentl": [47, 49, 58, 59, 124, 127, 194, 251], "glimps": 48, "convnet": [48, 89, 149, 156, 176], "learning_r": [48, 98], "lenet": [48, 77, 91, 95, 97, 171], "mini": [48, 51, 54, 95, 103, 106, 166, 172, 184], "4d": [48, 157], "nsampl": 48, "nchannel": 48, "least": [48, 77, 96, 115, 124, 138, 140, 146, 156, 167, 172, 179, 189, 200, 216, 249], "estim": [48, 53, 54, 93, 138, 173, 174, 179, 190, 216, 236, 256], "clear": [48, 53, 77, 88, 99, 100, 103, 105, 137, 141, 154, 167, 177, 186, 216, 257, 265], "sub_": 48, "nesterov": [48, 115], "criterion": [48, 69, 114, 177, 179, 184], "blitz": [49, 81, 108, 139, 140, 179, 184, 251], "syntax": [50, 115, 216], "matthew": [51, 115], "inkawhich": [51, 54, 77, 115], "movi": [51, 52, 89], "cornel": [51, 52], "dialog": [51, 52], "corpu": [51, 52], "artifici": [51, 98, 218], "intellig": 51, "servic": [51, 172, 236, 248], "onlin": [51, 149, 156, 173, 176], "helpdesk": 51, "bot": 51, "predefin": [51, 98, 106, 149, 206, 231], "restrict": [51, 148, 183, 187, 189, 274], "compani": 51, "IT": 51, "teach": [51, 54, 98, 179], "human": [51, 77, 89, 140, 156, 179, 254], "recent": [51, 103, 113, 135, 136, 148, 154, 161, 165, 174, 183, 245, 248], "boom": 51, "hello": [51, 100, 164, 172], "am": [51, 102, 140, 179], "hospit": 51, "lawyer": 51, "friend": [51, 164], "arrest": 51, "kid": 51, "sorri": 51, "san": 51, "francisco": [51, 106], "goodby": 51, "luong": [51, 179], "jointli": [51, 179], "acknowledg": [51, 148], "borrow": [51, 177], "yuan": 51, "kuei": 51, "wu": [51, 135, 252, 257, 267], "ywk991112": 51, "sean": [51, 139, 140, 179], "robertson": [51, 139, 140, 179], "translat": [51, 108, 110, 111, 131, 139, 140, 161, 162, 180, 231, 245, 251, 265], "spro": 51, "floydhub": 51, "textutil": 51, "__": [51, 64, 77, 98, 114, 121, 146, 190], "reformat": 51, "rich": [51, 212], "charact": [51, 105, 131, 144, 162, 173, 179, 180, 251], "220": [51, 177], "579": [51, 157], "exchang": [51, 108, 110, 133, 148, 179, 183], "292": [51, 86], "035": 51, "617": 51, "304": 51, "713": [51, 91], "utter": [51, 52], "divers": 51, "great": [51, 108, 114, 115, 216, 233, 265], "variat": [51, 97, 106, 143, 193, 216, 230, 263], "formal": [51, 200, 263], "sentiment": 51, "hope": [51, 156, 164, 187, 193], "datafil": 51, "nice": [51, 106, 164, 166, 189, 190, 193], "tab": [51, 95, 97, 179, 184, 212], "sentenc": [51, 93, 99, 100, 103, 105, 140, 148, 179, 193, 268], "pars": [51, 53, 105, 132, 133, 138, 160, 216, 254], "jsonl": [51, 52], "loadlinesandconvers": 51, "lineid": 51, "characterid": 51, "conversationid": 51, "movieid": 51, "extractsentencepair": 51, "formatted_movie_lin": 51, "unescap": 51, "delimit": 51, "busi": [51, 140, 248], "vocabulari": [51, 91, 93, 105, 136, 139, 231, 268], "implicit": [51, 88, 134, 189, 212, 231], "discret": 51, "voc": 51, "addword": 51, "addsent": 51, "infrequ": 51, "unicod": [51, 139, 140, 179], "ascii": [51, 105, 139, 140, 179], "unicodetoascii": 51, "letter": [51, 139, 140, 179], "lowercas": [51, 106, 179], "punctuat": [51, 179], "normalizestr": 51, "aid": [51, 115, 190, 220], "max_length": 51, "filterpair": 51, "stackoverflow": [51, 139, 140, 179, 216], "518232": [51, 139, 140, 179], "2809427": [51, 139, 140, 179], "tactic": 51, "benefici": [51, 93, 127, 174, 231, 234, 235, 248, 267, 271], "soften": 51, "difficulti": [51, 173, 194], "approxim": [51, 89, 133, 142, 153, 156, 161, 171, 174, 218, 231], "min_count": 51, "massag": 51, "ultim": [51, 54, 263], "accommod": 51, "shorter": [51, 53, 106, 179, 183, 263], "eos_token": 51, "english": [51, 100, 103, 139, 162, 179], "indexesfromsent": 51, "zeropad": 51, "inputvar": 51, "outputvar": 51, "pad_token": 51, "batch2traindata": 51, "bunch": [51, 139, 140, 212, 244], "aforement": [51, 84, 98, 193, 206, 240], "brain": 51, "sutskev": 51, "discov": [51, 111, 148, 176, 193, 271], "accomplish": [51, 54, 139, 148, 161, 202, 216, 230], "hidden": [51, 89, 93, 98, 99, 103, 106, 136, 138, 139, 140, 149, 177, 178, 179, 186, 214], "jeddy92": 51, "io": [51, 53, 95, 131, 175, 178, 214], "ts_seq2seq_intro": 51, "heart": 51, "gate": [51, 93, 193, 228], "invent": [51, 54, 173], "cho": 51, "2014": [51, 54, 256], "bidirect": [51, 149], "variant": [51, 91, 93, 95, 97, 136, 142, 172, 178, 190, 193, 205, 252], "gru": [51, 93, 139, 140, 179], "colah": 51, "2015": [51, 98], "fp": [51, 86, 129, 161], "hidden_s": 51, "pack": [51, 154, 173, 175, 177, 267], "unpack": [51, 152], "pack_padded_sequ": 51, "pad_packed_sequ": 51, "input_seq": 51, "input_length": [51, 133], "n_layer": [51, 169], "num_direct": 51, "sole": [51, 183], "combat": [51, 105], "bahdanau": [51, 179], "groundwork": 51, "knowledg": [51, 54, 77, 100, 101, 116, 118, 124, 126, 131, 154, 156, 194, 251], "h_t": [51, 103], "overal": [51, 93, 132, 133, 148, 167, 174, 189, 190, 216, 231], "attn": [51, 179], "softmax": [51, 93, 98, 103, 105, 106, 139, 172, 175, 177, 184, 193, 268], "submodul": [51, 93, 107, 134, 165, 178, 271], "unidirect": 51, "input_step": 51, "last_hidden": 51, "encoder_output": 51, "num_word": 51, "masknllloss": 51, "clever": [51, 100], "teacher": [51, 98, 126, 131, 179], "teacher_forcing_ratio": [51, 179], "instabl": [51, 179], "craft": [51, 77, 105, 140], "explod": [51, 93, 194], "essenc": [51, 102], "exponenti": [51, 88, 96, 100, 102, 165, 174, 256], "nan": [51, 264], "overshoot": 51, "steep": 51, "cliff": 51, "goodfellow": [51, 54, 77], "2016": 51, "www": [51, 179, 192], "deeplearningbook": 51, "sos_token": 51, "realiti": [51, 54, 77, 102, 106, 178, 230], "tie": [51, 160], "trainit": [51, 179], "n_iter": 51, "explanatori": 51, "lift": [51, 235, 274], "tarbal": 51, "NOT": [51, 103, 115, 141, 143, 144, 146, 164], "decoder_output": 51, "greedysearchdecod": 51, "searcher": 51, "evaluateinput": 51, "press": [51, 54], "gracefulli": [51, 55, 176, 200], "prompt": [51, 52, 245, 256], "regardless": [51, 96, 97, 155, 167, 176, 186], "attn_model": 51, "concat": [51, 102], "loadfilenam": 51, "save_dir": 51, "model_nam": [51, 133, 206, 256, 270], "corpus_nam": [51, 52], "encoder_n_lay": 51, "decoder_n_lay": 51, "_checkpoint": [51, 133], "tar": [51, 115], "checkpoint_it": 51, "folk": 51, "congratul": [51, 111, 137, 139, 190, 218, 232, 233, 234], "fundament": [51, 90, 93, 102, 105, 114, 131, 156, 167, 189, 190, 195, 200, 230, 264], "tailor": [51, 148, 167, 190, 248], "cool": [51, 54, 164, 166, 274], "chatbot_tutori": [51, 116, 251], "wen": [52, 187, 189, 243], "uninstal": 52, "reinstal": 52, "torchdata": 52, "chatbot": [52, 116, 251], "browser": [52, 95, 97, 108, 183, 201], "click": [52, 95, 106, 108, 183, 184, 190, 212], "subfold": 52, "visit": [52, 124, 194, 256], "in_": 52, "_colab": 52, "_name": 52, "mount": [52, 254], "gdrive": 52, "my": [52, 99, 105, 193], "upload": [52, 201], "cell": [52, 88, 89, 91, 93, 96, 97, 113, 167, 174, 178, 190, 231, 256], "button": [52, 54, 108, 183, 212], "rerun": [52, 124, 141, 164], "evolv": [52, 154, 161], "drop": [52, 93, 95, 108, 144, 164, 177, 256], "t4": 52, "sasank": [53, 121], "chilamkurthi": [53, 121], "preprocess": [53, 98, 106, 131, 139, 179], "scikit": 53, "ignor": [53, 98, 103, 105, 115, 170, 184, 189, 192, 215, 221, 232, 243, 264, 265, 268], "warn": [53, 124, 154, 216, 221, 230, 263, 264, 265, 266], "facial": 53, "pose": [53, 201, 202], "landmark": 53, "dlib": 53, "tag": [53, 93, 101, 105, 189, 220, 229, 255], "image_nam": 53, "part_0_x": 53, "part_0_i": 53, "part_1_x": 53, "part_1_i": 53, "part_2_x": 53, "part_67_x": 53, "part_67_i": 53, "0805personali01": 53, "98": [53, 154, 177, 256], "84": [53, 113, 115, 156, 184, 256], "134": 53, "1084239450_e76e00b7e7": 53, "70": [53, 157, 177, 216, 256], "236": 53, "257": [53, 216], "312": [53, 157, 245], "person": [53, 190, 192], "img_nam": 53, "__len__": [53, 106, 139, 148, 192], "__getitem__": [53, 106, 139, 148, 192], "randomcrop": 53, "crop": [53, 91, 138, 181, 192], "totensor": [53, 91, 132, 148, 172, 176, 184, 214], "ax": [53, 100, 103, 129, 131, 179, 180, 184, 251], "tsfm": 53, "transformed_sampl": 53, "np": [53, 99, 177, 184, 214, 230, 245, 264], "safer": [53, 216], "stick": [53, 148, 157], "randint": [53, 54, 134, 166, 169], "lose": [53, 55, 96, 98, 156], "collate_fn": 53, "indent": [53, 216], "imagefold": [53, 54, 91], "ant": [53, 121], "xxy": 53, "jpeg": 53, "xxz": 53, "bee": [53, 121], "nsdf3": 53, "asd932_": 53, "randomhorizontalflip": 53, "data_transform": 53, "randomresizedcrop": 53, "hymenoptera_dataset": 53, "hymenoptera_data": 53, "dataset_load": 53, "data_loading_tutori": [53, 116, 251], "nathan": [54, 77], "celebr": [54, 128, 131], "pictur": [54, 77, 134, 136, 179], "thorough": 54, "shed": [54, 214], "spend": [54, 84, 164, 216, 221], "sake": [54, 149, 171, 174, 232, 233], "ian": 54, "constantli": [54, 77, 174], "outsmart": 54, "equilibrium": 54, "perfect": [54, 88, 146, 195, 265], "notat": [54, 77], "chw": [54, 172], "3x64x64": 54, "thought": [54, 85, 230, 264], "latent": [54, 105], "p_": 54, "p_g": 54, "minimax": 54, "logd": 54, "underset": 54, "mathbb": [54, 161, 174], "sim": 54, "big": [54, 93, 99, 105, 114, 134, 140, 150, 164, 173, 179], "radford": 54, "unsupervis": 54, "drawn": [54, 106, 173], "rgb": [54, 91, 98, 156, 214], "conv": [54, 93, 142, 157, 176, 186, 212, 221], "volum": [54, 132], "inlin": [54, 88, 91, 95, 97, 141, 154, 186, 236, 263, 267], "seed": [54, 77, 91, 98, 132, 133, 148, 174, 175, 177], "manualse": 54, "10000": [54, 91, 169, 177, 216, 230], "dataroot": 54, "image_s": [54, 245], "spatial": [54, 89, 91, 93, 128, 131, 180, 186, 192, 251], "64x64": 54, "nc": [54, 267], "nz": 54, "ngf": 54, "ndf": 54, "num_epoch": 54, "0002": [54, 256], "ngpu": 54, "celeb": 54, "img_align_celeba": 54, "celeba": 54, "188242": 54, "173822": 54, "284702": 54, "537394": 54, "subdirectori": [54, 192], "stdev": 54, "weights_init": 54, "reiniti": 54, "criteria": 54, "netg": 54, "netd": 54, "worth": [54, 164, 167, 176], "critic": [54, 134, 145, 167, 199, 230, 252], "contribut": [54, 62, 84, 89, 96, 157, 183], "batchnorm": [54, 57, 115, 157, 186, 194, 231, 233, 270], "downsampl": [54, 91, 156], "promot": 54, "healthi": 54, "bceloss": 54, "ell": [54, 179], "l_1": 54, "l_n": 54, "quad": [54, 174], "y_n": 54, "bce": 54, "gt": [54, 113], "fixed_nois": 54, "establish": 54, "Be": [54, 88], "somewhat": [54, 167], "collaps": 54, "ganhack": 54, "secondli": 54, "loss_d": 54, "loss_g": 54, "versu": [54, 77, 131, 139], "anim": [54, 91], "music": 54, "dcgan_faces_tutori": [54, 116, 251], "mingpt": [55, 56, 57, 58, 144, 145], "aw": [55, 57, 132, 144, 145], "p3": [55, 56, 57, 65, 114, 144, 145], "8xlarg": [55, 57], "youtub": [55, 56, 57, 58, 88, 89, 91, 93, 95, 96, 97, 131, 144, 145, 195], "failur": [55, 107, 145, 146, 154, 160, 189, 198, 245, 254], "disrupt": [55, 243, 254], "suscept": [55, 202], "elast": [55, 133, 146, 202], "attempt": [55, 88, 96, 100, 133, 167, 189, 220, 243, 254], "minutia": 55, "multinod": [55, 144, 190], "load_snapshot": 55, "snapshot_path": 55, "train_step": 55, "should_checkpoint": 55, "save_snapshot": 55, "membership": [55, 145], "intervent": [55, 98, 240], "multigpu": [55, 57, 145], "multigpu_torchrun": 55, "envvari": 55, "ddp_setup": [55, 57], "12355": [55, 57, 132, 146, 199, 200], "local_rank": [55, 133, 145, 146, 169, 254], "gpu_id": [55, 57, 145], "_save_snapshot": 55, "model_st": 55, "epochs_run": 55, "_load_snapshot": 55, "max_epoch": 55, "_run_epoch": [55, 57], "total_epoch": [55, 57], "argv": [55, 57], "save_everi": [55, 57], "nproc_per_nod": [55, 133, 134, 146, 169, 202, 254], "migrat": [55, 57, 152, 231], "fault": [56, 57, 58, 86, 144, 145, 160, 167], "toler": [56, 57, 58, 86, 88, 144, 145, 160], "deploi": [56, 108, 125, 131, 138, 145, 171, 172], "cluster": [56, 95, 133, 138, 144, 145, 146, 148, 160, 200, 202, 239], "torchrun": [56, 62, 133, 134, 144, 145, 169, 202, 252, 254], "amazon": 56, "ec2": [56, 132], "gentli": 56, "gpt": [56, 132, 144, 145, 169], "stat": [57, 133, 141, 173, 183, 190, 221, 230], "replica": [57, 58, 62, 132, 134, 146, 148, 249], "convert_sync_batchnorm": 57, "single_gpu": 57, "mytraindataset": 57, "distributedsampl": [57, 58, 132, 133], "destroy_process_group": [57, 132, 133, 135, 146, 160, 169, 199, 200, 252], "excess": [57, 84, 136, 187, 215], "chunk": [57, 148, 164, 167, 169, 252], "train_data": 57, "train_dataset": [57, 98, 133], "set_epoch": [57, 132, 133], "b_sz": 57, "_run_batch": 57, "ckp": 57, "_save_checkpoint": 57, "load_train_obj": 57, "prepare_dataload": 57, "shorthand": 57, "ring": [58, 136, 252], "older": [58, 113, 114, 150, 166, 167, 174, 256], "destroi": [58, 88, 152, 160], "soumith": [59, 148], "chintala": [59, 148], "scientif": [59, 93, 96, 114], "mobil": [60, 61, 98, 196, 210, 211, 219, 258, 260, 261, 269], "executorch": [60, 61, 131, 196, 208, 209, 210, 211, 213, 245, 260, 261, 269, 273], "Will": [62, 134, 186], "constabl": [62, 134], "wei": [62, 134], "feng": [62, 134, 156, 170, 186], "categor": [62, 84, 95, 149, 175, 177, 190], "navig": [62, 183, 184, 212], "technologi": [62, 98, 131, 148, 193, 250], "infrastructur": 62, "fsdp2": [62, 131, 132], "tp": [62, 202, 254], "pp": 62, "dtensor": [62, 136, 201, 250], "devicemesh": [62, 136, 250], "reshard": [62, 134, 200], "mesh": [62, 127, 134, 136, 160, 202], "recip": [62, 113, 127, 131, 195, 197, 201, 205, 212, 214, 215, 216, 217, 218, 220, 221, 227, 228, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 249, 251, 262], "c10d": [62, 146, 170, 231, 254], "all_gath": [62, 132, 133, 148, 170], "p2p": 62, "isend": [62, 148], "guidelin": [62, 231], "fullyshardeddataparallel": [62, 132, 133, 134, 199, 200], "torchtitan": [62, 160, 169, 252], "polynomi": [64, 65, 67, 69, 70, 71, 74, 75, 114], "pi": [64, 65, 69, 70, 71, 74, 75, 88, 114, 129, 174], "euclidean": [64, 65, 69, 70, 71, 74, 75, 88, 98, 114], "polynomial_autograd": [64, 66, 251], "bx": [65, 114], "cx": [65, 100, 114], "p_3": [65, 114], "5x": [65, 114], "legendr": [65, 114], "polynomial_custom_funct": [65, 66, 251], "examples_autograd": [66, 251], "strang": [67, 114], "fifth": [67, 114], "tough": [67, 114], "dynamic_net": [67, 72, 251], "polynomial3": [69, 114], "linspac": [69, 88, 114], "2000": [69, 70, 91, 98, 114, 184, 189, 216, 249, 254], "1e": [69, 86, 93, 114, 134, 142, 166, 175, 177, 252], "y_pred": [69, 114, 124], "99": [69, 114, 177, 256], "polynomial_modul": [69, 72, 251], "flaten": [70, 114], "1d": [70, 93, 114, 231, 274], "mse": [70, 93, 98, 114, 124], "polynomial_nn": [70, 72, 251], "polynomial_optim": [71, 72, 251], "examples_nn": [72, 251], "warm": [73, 76, 113, 183, 187, 205, 216, 221, 251, 268], "polynomial_numpi": [74, 76, 251], "biggest": [75, 254], "polynomial_tensor": [75, 76, 251], "004": 76, "examples_tensor": [76, 251], "appreci": [77, 99], "overlook": [77, 216], "secur": [77, 183], "vulner": 77, "surpris": [77, 165], "impercept": 77, "perturb": [77, 89], "drastic": [77, 189, 235, 244], "overarch": 77, "amount": [77, 84, 115, 136, 146, 167, 171, 187, 190, 221, 231, 256], "misclassif": 77, "alter": [77, 115, 222, 233, 256], "har": 77, "remark": [77, 187], "mathbf": [77, 124], "nabla_": [77, 100], "007": [77, 112], "misclassifi": 77, "gibbon": 77, "clearli": [77, 138, 254, 263, 264], "pretrained_model": 77, "fgsm_attack": 77, "clean": [77, 103, 132, 133, 139, 146, 164, 169, 190, 252, 263], "data_grad": 77, "_imag": 77, "_grad": 77, "strength": [77, 184], "_data": 77, "allud": 77, "trend": [77, 85, 183], "curv": [77, 183, 184], "linearli": 77, "05": [77, 133, 177], "hit": [77, 136, 183], "lunch": 77, "BUT": [77, 102], "percept": 77, "tradeoff": [77, 129, 131, 137, 138, 148, 173, 236], "titl": [77, 139, 167, 179], "evid": [77, 135], "subsequ": [77, 89, 98, 115, 124, 132, 139, 149, 152, 175, 177, 179, 187, 231, 234, 239, 248, 254, 256], "defend": 77, "nip": 77, "defens": 77, "competit": [77, 150, 166, 248], "defenc": 77, "dirti": 77, "fgsm_tutori": [77, 116, 251], "torchvision_tutori": [78, 180, 192, 251], "nn_tutori": [80, 106, 116, 251], "anupam": [84, 85], "bhatnagar": [84, 85], "analyz": [84, 129, 131, 164, 173, 187, 189, 230, 245], "offici": [84, 111, 135, 148, 172, 174, 187, 189, 206], "holistictraceanalysi": 84, "env_nam": [84, 173], "deactiv": 84, "trace_dir": 84, "trace_analysi": 84, "traceanalysi": 84, "primarili": [84, 176, 187, 201, 215, 231], "engag": [84, 275], "datafram": [84, 138], "time_spent_df": 84, "get_temporal_breakdown": 84, "enqueu": 84, "ineffici": [84, 268], "slowdown": [84, 133, 137], "fusion": [84, 154, 190, 231, 238, 246, 250, 251, 256, 267], "consecut": [84, 140, 149, 156, 167, 172, 248], "insuffici": [84, 174], "delai": [84, 146, 175, 190], "stall": [84, 248, 254], "gap": 84, "nanosecond": 84, "consecutive_kernel_delai": 84, "get_idle_time_breakdown": 84, "idle_time_df": 84, "show_idle_interval_stat": 84, "percentag": [84, 171, 268], "visualize_pctg": 84, "comm": 84, "comp": 84, "proport": [84, 164], "pie": [84, 164], "chart": [84, 95, 242], "kernel_type_metrics_df": 84, "kernel_metrics_df": 84, "get_gpu_kernel_breakdown": 84, "bottleneck": [84, 113, 133, 136, 145, 164, 167, 175, 183, 187, 197, 212], "plotli": [84, 89, 138], "hover": [84, 138, 172], "pan": 84, "num_kernel": 84, "duration_ratio": 84, "preced": [84, 88, 96, 142, 149, 186, 270], "lab": [84, 184], "image_render": 84, "jupyterlab": 84, "gpu_kernel_breakdown": 84, "tflop": 84, "oversubscrib": 84, "unresolv": [84, 265], "extent": [84, 96], "overlap_df": 84, "get_comm_comp_overlap": 84, "h2d": 84, "d2h": 84, "d2d": 84, "memcpi": 84, "memset": 84, "outstand": 84, "generate_trace_with_count": 84, "_with_count": 84, "screenshot": [84, 212], "profil": [84, 116, 125, 126, 129, 131, 132, 167, 178, 180, 216, 219, 227, 231, 250, 251, 267], "get_memory_bw_summari": 84, "get_queue_length_summari": 84, "get_memory_bw_time_seri": 84, "get_queue_length_time_seri": 84, "mem_bw_summari": 84, "queue_len_summari": 84, "mem_bw_seri": 84, "queue_len_seri": 84, "get_queue_length_seri": 84, "25th": 84, "50th": 84, "75th": 84, "percentil": 84, "cudalaunchkernel": 84, "cudamemcpyasync": 84, "cudamemsetasync": 84, "kernel_info_df": 84, "get_cuda_kernel_launch_stat": 84, "short": [84, 93, 96, 99, 101, 104, 127, 140, 148, 165, 167, 173, 179, 181, 189, 231, 234, 251], "outlier": [84, 174], "microsecond": [84, 155, 178, 216], "cutoff": 84, "runtime_cutoff": 84, "launch_delay_cutoff": 84, "occasion": [85, 176, 179], "hta": [85, 183], "tracediff": 85, "cumul": [85, 174], "compare_trac": 85, "durat": [85, 170, 174, 183, 254], "ops_diff": 85, "absent": 85, "visualize_counts_diff": 85, "visualize_duration_diff": 85, "ten": [85, 91, 95, 98], "df": 85, "compare_traces_output": 85, "sort_valu": 85, "diff_count": 85, "largest": [85, 106], "diff_dur": 85, "differer": 85, "overshadow": 85, "profilerstep": [85, 154], "loc": [85, 173, 215], "trace_diff_demo": 85, "dramat": [86, 106], "industri": [86, 89], "analysi": [86, 88, 97, 131, 132, 153, 154, 178, 183, 189, 212, 230, 245, 252, 256], "slight": [86, 135, 143, 217], "trial": [86, 138, 215], "train_cifar": 86, "l2": [86, 93, 171], "get_checkpoint": 86, "as_directori": 86, "checkpoint_dir": [86, 199, 200], "data_path": 86, "pkl": 86, "rb": 86, "checkpoint_st": 86, "start_epoch": 86, "net_state_dict": 86, "optimizer_state_dict": [86, 115, 199, 200], "80": [86, 138, 139, 157, 177, 245, 256], "luckili": [86, 154, 189, 190, 216, 265], "enumer": [86, 97, 132, 134, 136, 172, 176, 183, 184], "trainload": [86, 184], "fraction": [86, 216], "checkpoint_data": 86, "tempfil": [86, 146], "temporarydirectori": 86, "wb": 86, "dump": [86, 154, 201, 230], "from_directori": 86, "val_loss": [86, 133], "val_step": 86, "wast": [86, 183, 216, 220, 222, 236, 268], "lastli": [86, 164, 189], "loguniform": [86, 216], "ashaschedul": 86, "functool": [86, 132, 133, 152], "gpus_per_tri": 86, "resources_per_tri": 86, "num_sampl": [86, 133], "checkpoint_at_end": 86, "000668163": 86, "31479": 86, "0977": 86, "0331514": 86, "31605": 86, "0983": 86, "000150295": 86, "30755": 86, "1023": [86, 256], "0128248": 86, "66912": 86, "4391": 86, "00464561": 86, "7316": 86, "3463": 86, "00031556": 86, "19409": 86, "1736": 86, "00574329": 86, "85679": 86, "3368": [86, 103], "00325652": 86, "30272": 86, "0984": 86, "000342987": 86, "76044": 86, "003734": 86, "53101": 86, "4761": 86, "0037339984519545164": 86, "5310075663924216": 86, "4737": 86, "confirm": [86, 89, 106, 107, 133, 155, 175], "hyperparameter_tuning_tutori": [86, 116, 251], "tensorboard": [88, 89, 90, 91, 92, 93, 96, 97, 129, 131, 138, 180, 219, 221, 227, 250, 251], "decis": [88, 101, 104, 149, 167, 189, 231, 240, 246, 251, 263, 264, 266], "branch": [88, 107, 189, 192], "rigidli": 88, "sign": [88, 165], "contextu": 88, "nudg": [88, 91, 97], "calculu": [88, 124], "next_funct": 88, "drill": [88, 230], "machineri": [88, 216], "took": [88, 148, 153, 164, 178, 187, 243, 254], "ins": [88, 187], "never": [88, 99, 100, 101, 105, 124, 137, 171, 181], "ideal_output": 88, "layer2": 88, "blow": 88, "b1": 88, "b2": 88, "temporarili": 88, "decor": [88, 111, 127, 141, 156, 160, 175, 187, 231, 243], "enable_grad": 88, "throw": [88, 96, 124, 135, 175], "sin_": 88, "handi": [88, 91, 106, 148, 156, 184], "bake": [88, 186], "chrome": [88, 167, 178, 183, 221], "imagin": [88, 96, 99, 105, 143, 148, 164, 165, 179, 190, 216, 228], "hessian": [88, 126, 131, 180, 251, 274], "twice": [88, 106, 143, 167, 216, 221, 249, 256], "jvp": [88, 152, 155], "vjp": [88, 155, 161, 274], "vhp": [88, 126, 131, 180, 251], "hvp": [88, 126, 131, 180, 251], "autogradyt_tutori": [88, 90, 94, 251], "latin": 89, "increasingli": [89, 193], "ai": [89, 100, 101, 106, 132, 138, 156, 179, 200, 206, 214, 231, 254, 267], "review": [89, 144, 162, 189, 236, 263, 264, 266, 271], "neuron": [89, 98, 214], "analag": 89, "ablat": 89, "permut": [89, 98, 157, 205], "valuabl": [89, 98, 179, 205, 268], "certainli": [89, 153, 264, 266], "attr": [89, 170, 214], "widget": 89, "toolset": 89, "flask": 89, "renam": 89, "virtual": [89, 167, 170, 220, 258], "pull": [89, 96, 97, 153, 271], "recogn": [89, 93, 170, 186, 218], "224x224": [89, 172], "visualize_image_attr": 89, "integrated_gradi": 89, "strongest": [89, 91, 93, 97], "visualize_image_attr_multipl": [89, 214], "heat": [89, 172], "upsampl": 89, "interpol": 89, "layerattribut": 89, "novel": [89, 252], "teapot": 89, "trilobit": 89, "fossil": 89, "dig": [89, 100, 178, 189], "attributionvisu": 89, "imagefeatur": 89, "heatmap": 89, "captumyt": [89, 94, 251], "introyt": [90, 94, 195, 251], "introyt1_tutori": [90, 91, 94, 251], "tensors_deeper_tutori": [90, 94, 96, 251], "modelsyt_tutori": [90, 93, 94, 251], "tensorboardyt_tutori": [90, 94, 95, 251], "trainingyt_tutori": 90, "captumyt_tutori": 90, "captum": [90, 219, 227, 250, 251], "sphx_glr_beginner_introyt_introyt_index": [90, 94, 251], "sphx_glr_beginner_introyt_modelsyt_tutori": [90, 94, 251], "sphx_glr_beginner_introyt_autogradyt_tutori": [90, 94, 251], "sphx_glr_beginner_introyt_tensors_deeper_tutori": [90, 94, 251], "sphx_glr_beginner_introyt_captumyt": [90, 94, 251], "sphx_glr_beginner_introyt_introyt1_tutori": [90, 94, 251], "sphx_glr_beginner_introyt_trainingyt": [90, 94, 251], "sphx_glr_beginner_introyt_tensorboardyt_tutori": [90, 94, 251], "03": [91, 176, 177, 230, 252, 256], "5x3": 91, "helpfulli": 91, "prng": 91, "r3": 91, "r1": 91, "r2": 91, "trigonometr": [91, 96], "singular": [91, 165, 178, 244], "decomposit": [91, 111, 134, 154], "diagram": [91, 174], "earliest": 91, "driver": [91, 183], "explos": 91, "handwritten": [91, 132], "abridg": 91, "c1": [91, 154], "s2": [91, 189], "c3": 91, "s4": [91, 189], "f5": 91, "f6": 91, "artifact": [91, 144, 189, 235, 239, 240, 244], "gist": 91, "tile": [91, 95, 97], "hasn": 91, "shouldn": [91, 171], "consumpt": [91, 93, 95, 97, 113, 133, 136, 138, 154, 167, 171, 183, 231, 249, 250], "center": [91, 93, 97, 174, 183, 214, 231], "concatdataset": 91, "trainset": [91, 184], "50000": 91, "4914": 91, "4822": 91, "4465": 91, "2470": 91, "2435": 91, "2616": 91, "rotat": [91, 95, 181, 184], "vehicl": [91, 177], "filesystem": [91, 148, 160, 255], "told": [91, 173], "spin": [91, 131], "strip": [91, 230], "ingredi": 91, "inner": [91, 167, 173], "235": [91, 113, 152], "940": 91, "6000": 91, "8000": [91, 230], "573": 91, "507": 91, "12000": 91, "442": 91, "378": 91, "364": 91, "349": 91, "319": [91, 221], "284": [91, 177], "267": 91, "monoton": 91, "descend": 91, "memor": 91, "roughli": [91, 99, 114, 133, 146, 154, 231], "brad": 92, "heintz": 92, "pro": 92, "introyt_index": [92, 94, 195, 251], "lin": 93, "nearbi": 93, "lenet5": 93, "1x32x32": 93, "liken": 93, "5x5": 93, "3x5": 93, "presenc": [93, 187, 189, 214], "6x28x28": 93, "2x2": 93, "resolut": 93, "6x14x14": 93, "sought": 93, "3x3": 93, "16x12x12": 93, "16x6x6": 93, "576": 93, "edg": [93, 108, 114, 131, 153, 183, 218, 245], "instrument": [93, 153, 250], "dna": 93, "nucleotid": 93, "sort": [93, 99, 103, 113, 172, 193, 221, 231], "moder": 93, "beyond": [93, 96, 102, 170, 171, 231], "scope": [93, 96, 102, 113, 137, 141, 189, 212, 230, 235, 236], "tagger": [93, 99], "noun": [93, 103], "verb": [93, 103], "vocab_s": [93, 103, 134, 169], "tagset_s": [93, 103], "hidden_dim": [93, 103], "log_softmax": [93, 103, 106, 132, 166, 176], "decod": [93, 99, 133, 169, 177, 178, 193, 215, 245, 256], "transformerencod": [93, 193], "transformerdecod": [93, 193], "subcompon": [93, 187], "transformerencoderlay": [93, 178, 193], "transformerdecoderlay": [93, 169, 193], "twin": 93, "maxpool": 93, "quadrant": 93, "6x6": 93, "vanish": [93, 100, 194], "offset": [93, 190, 199, 255], "neighborhood": 93, "sometim": [93, 96, 114, 137, 143, 145, 146, 149, 155, 174, 177, 179, 189, 231, 256, 265, 266], "suffer": [93, 183], "steepest": 93, "feasibl": [93, 132, 134], "hardtanh": 93, "014": 94, "trainingyt": [94, 97, 251], "depict": [95, 190], "garment": 95, "tensorflow": [95, 99, 101, 114], "tf": 95, "tb": [95, 245], "gfile": 95, "tensorflow_stub": 95, "grid": [95, 97, 106, 121, 181, 184, 257], "add_imag": [95, 184], "summarywrit": [95, 184, 229], "flush": [95, 215, 229], "log_dir": [95, 138, 184], "logdir": [95, 183, 184, 229], "6006": [95, 183, 184, 229], "efficaci": 95, "add_graph": [95, 184], "add_embed": [95, 184], "projector": 95, "toggl": [95, 249, 255], "night": [95, 184], "icon": 95, "dark": 95, "upack": 96, "attach": [96, 160, 174, 194, 248], "terminologi": [96, 102], "likewis": [96, 164], "manual_se": [96, 103, 132, 133, 148, 166, 174, 175, 249, 252], "assur": [96, 167], "random1": 96, "random3": 96, "random2": 96, "random4": 96, "rng": [96, 148], "_like": [96, 157], "zeros_lik": [96, 175], "rand_lik": [96, 152], "int16": 96, "cue": 96, "intent": [96, 200, 264], "subtract": [96, 98, 231], "divis": [96, 189], "2x4": 96, "1x4": 96, "honor": 96, "3rd": [96, 134, 141], "2nd": [96, 103, 134, 141, 176], "hundr": [96, 127, 136, 190], "bitwis": [96, 215], "inventori": [96, 97], "occupi": [96, 212], "discard": [96, 132, 133, 183, 221, 230], "underscor": 96, "deepli": 96, "nor": [96, 148, 248, 263], "mid": 96, "someplac": 96, "ram": [96, 133, 167, 190, 220], "colloqui": 96, "fragil": 96, "robustli": [96, 110], "whichev": 96, "acquir": [96, 115, 171, 173, 177], "thrown": [96, 266], "226": 96, "zeroth": 96, "un": [96, 179], "bracket": 96, "eas": [96, 97, 133, 193, 220, 250], "rescu": 96, "squeeze_": 96, "unsqueeze_": 96, "radic": 96, "parenthes": 96, "comma": 96, "convinc": [96, 164], "kinship": 96, "autom": [97, 114, 138, 153, 157], "outcom": [97, 138, 254], "saniti": [97, 124, 138, 173], "nb": [97, 274], "chose": [97, 172], "saved_model": 97, "garmentclassifi": 97, "alexandro": 98, "chariton": 98, "computation": 98, "deploy": [98, 125, 129, 138, 235, 244, 257, 270], "lightweight": [98, 126, 131, 171, 215], "drone": 98, "phone": [98, 108], "4gb": [98, 164, 172], "v2": [98, 118, 149, 172, 186, 190, 199, 205, 271], "3072": 98, "satur": [98, 215], "furthermor": [98, 150, 155, 184, 201, 216, 257], "held": [98, 139, 176], "greedi": [98, 149, 174], "num_images_to_keep": 98, "50_000": 98, "test_dataset": 98, "10_000": 98, "extractor": 98, "emploi": [98, 179, 183, 193, 199], "train_load": [98, 132, 133, 176, 183], "detriment": 98, "workload": [98, 113, 127, 134, 145, 146, 148, 183, 190, 199, 202, 248, 258, 267], "test_load": [98, 132, 176], "sensit": [98, 144, 152], "conclud": [98, 143, 148, 189], "interven": [98, 189], "soft": [98, 174], "mistaken": 98, "alon": [98, 115, 136, 179, 184], "exploit": [98, 156, 179], "meaningfulli": 98, "temperatur": 98, "smoother": 98, "boost": [98, 100, 154, 155, 206, 256, 267, 275], "soft_target_loss_weight": 98, "ce_loss_weight": 98, "train_knowledge_distil": 98, "75": [98, 121, 132, 256], "ce": [98, 179], "coeffici": 98, "convei": 98, "naiv": [98, 137, 155, 166, 178, 268], "rational": 98, "capac": [98, 144, 173, 231, 256], "cosineembeddingloss": 98, "obvious": [98, 102, 177], "resolv": [98, 157, 186, 189, 194, 201, 245, 265], "somehow": [98, 105, 190], "hidden_represent": 98, "hidden_representation_s": 98, "avg_pool1d": 98, "harder": [98, 256], "Its": [98, 100, 268], "modifiedlightnnregressor": 98, "cosineloss": 98, "wiggl": 98, "room": [98, 167], "mismatch": [98, 189, 254], "hinton": 98, "vinyal": 98, "dean": 98, "workshop": 98, "romero": 98, "balla": 98, "kahou": 98, "chassang": 98, "gatta": 98, "bengio": 98, "fitnet": 98, "thin": [98, 255], "confer": 98, "knowledge_distillation_tutori": [98, 116, 251], "kit": 99, "dynet": [99, 101], "opposit": [99, 167, 264], "theano": [99, 101], "kera": [99, 101, 114], "constitu": 99, "bottom": [99, 183, 189, 212], "green": [99, 133, 136, 184], "wall": [99, 153, 216], "fat": 99, "exception": 99, "entiti": [99, 105, 190, 233, 234], "recognit": [99, 131, 231], "ner": 99, "sound": [99, 102, 114], "scari": 99, "viterbi": [99, 103], "exp": [99, 100, 143, 152, 265], "sum_": [99, 105, 174], "psi_i": 99, "sum_i": 99, "partit": [99, 131, 136, 141, 148, 200, 231], "emiss": 99, "timestep": [99, 103, 139, 140, 174], "textbf": 99, "psi_": 99, "y_i": [99, 103], "rightarrow": [99, 148, 174], "x_i": [99, 100], "tran": 99, "h_i": [99, 103], "michael": [99, 197, 198, 205, 215, 241, 246], "collin": 99, "robert": [99, 100, 102, 103, 105], "guthri": [99, 100, 102, 103, 105], "prepare_sequ": [99, 103], "anywai": [99, 102, 167], "gold": [99, 179], "perceptron": 99, "score_sent": 99, "advanced_tutori": [99, 101, 104, 251], "workhors": 100, "2x5": 100, "acx": 100, "ac": 100, "sigma": [100, 173], "plenti": 100, "peopl": [100, 101, 121], "shy": 100, "linearit": 100, "sum_j": 100, "x_j": 100, "unseen": [100, 105], "eta": 100, "vari": [100, 134, 142, 156, 167, 179, 187, 189, 193, 197, 215, 235, 265, 268], "spanish": [100, 139, 140], "bow": 100, "vocab": [100, 103, 136], "word_to_ix": [100, 103, 105], "bowclassifi": 100, "creo": 100, "bigger": [100, 139, 140, 172], "deep_learning_tutori": [100, 101, 104, 251], "toolkit": [101, 156, 167, 189, 229], "russel": 101, "norvig": 101, "book": [101, 103], "rip": 101, "pytorch_tutori": [101, 102, 104, 251], "word_embeddings_tutori": [101, 104, 105, 251], "lexic": [101, 104, 251], "sequence_models_tutori": [101, 103, 104, 251], "bi": [101, 104, 251], "crf": [101, 104, 251], "2x2x2": 102, "complain": [102, 189], "x_2": [102, 161], "vagu": 102, "programm": [102, 105], "mayb": [102, 105, 150, 189, 275], "x_0": 102, "overbrac": [102, 103, 105], "y_0": 102, "z_0": 102, "z_1": 102, "y_2": 102, "z_2": 102, "gloss": 102, "new_z": 102, "NO": 102, "forgotten": 102, "broken": 102, "classic": [103, 106, 157, 165, 181, 206, 228], "markov": 103, "myriad": 103, "cow": 103, "q_": [103, 105, 156], "1st": [103, 132, 134, 141], "0x7f122ff50690": 103, "0187": 103, "1713": 103, "2944": 103, "3521": 103, "1026": 103, "2971": 103, "3191": 103, "0781": 103, "1957": 103, "1634": 103, "0941": 103, "1637": 103, "0959": 103, "0538": 103, "mkldnnrnnlayerbackward0": 103, "stackbackward0": 103, "9825": 103, "4715": 103, "0633": 103, "unfamiliar": 103, "w_1": 103, "w_m": 103, "w_i": [103, 105], "_i": 103, "_1": [103, 124], "_m": 103, "argmax": [103, 132, 172, 176], "_j": 103, "ah_i": 103, "affin": [103, 124, 142, 181, 231, 248], "seq": [103, 136], "to_ix": 103, "det": 103, "ate": 103, "appl": [103, 256], "everybodi": [103, 148], "sent": [103, 148, 167, 175, 189], "tag_to_ix": 103, "lstmtagger": 103, "word_embed": 103, "hidden2tag": 103, "emb": [103, 105, 177], "lstm_out": 103, "tag_spac": 103, "tag_scor": 103, "loss_funct": 103, "toi": [103, 132, 146, 177, 186, 189, 190, 200, 228], "sentence_in": 103, "1389": 103, "2024": 103, "9693": 103, "1065": 103, "2200": 103, "9834": 103, "1286": 103, "2093": 103, "9726": 103, "1190": 103, "1960": 103, "9916": 103, "0137": 103, "2642": 103, "0366": 103, "0462": 103, "0106": 103, "6096": 103, "8205": 103, "0286": 103, "9045": [103, 256], "7876": 103, "1355": 103, "0394": 103, "0185": 103, "7874": 103, "6013": 103, "7881": 103, "0186": 103, "1778": 103, "affix": [103, 105], "bear": 103, "ly": 103, "adverb": 103, "c_w": 103, "x_w": 103, "po": 103, "859": [103, 104, 251], "869": 104, "capit": 105, "enorm": 105, "notion": 105, "mathematician": 105, "physicist": 105, "ok": [105, 135, 175], "role": [105, 171, 177, 190, 248], "orthograph": 105, "linguist": 105, "hypothesi": 105, "coffe": 105, "phi": 105, "gave": 105, "pain": 105, "earth": 105, "herself": 105, "longtensor": [105, 140, 175, 177], "ith": [105, 268], "shakespear": [105, 178], "sonnet": 105, "word_i": 105, "context_s": 105, "beauti": [105, 214], "cbow": 105, "probabilist": [105, 173], "percent": [105, 166], "q_w": 105, "raw_text": 105, "dedupl": 105, "jeremi": 106, "howard": [106, 156, 169, 170], "rachel": 106, "thoma": 106, "ingham": 106, "elegantli": [106, 218], "concis": 106, "trail": 106, "signifi": 106, "xavier": [106, 107], "initialis": 106, "sqrt": [106, 193, 263], "prewritten": 106, "pred": [106, 124, 132, 136, 176, 184], "talli": 106, "debugg": [106, 160], "set_trac": 106, "logist": 106, "cross_entropi": [106, 136], "clearer": [106, 184], "uppercas": 106, "zero_": [106, 170, 177], "prone": [106, 141, 193, 202], "gone": [106, 137], "xb": 106, "faciallandmarkdataset": 106, "tensordataset": 106, "x_train": 106, "y_train": 106, "start_i": 106, "end_i": 106, "yb": 106, "train_d": 106, "cleaner": [106, 263, 265, 275], "train_dl": 106, "phase": [106, 148, 177, 221, 246], "loss_batch": 106, "simpler": [106, 134, 136, 142, 152, 165, 216, 274], "rid": [106, 107, 134, 155, 245], "avgpool2d": 106, "adaptiveavgpool2d": [106, 149], "lucki": [106, 171], "rent": 106, "hour": [106, 245], "mnist_sampl": 106, "fastai": 106, "practition": [106, 148, 266], "dupr\u00e9": 107, "circumv": 107, "forwardwithcontrolflowtest": 107, "modelwithcontrolflowtest": 107, "mlp": [107, 136, 150, 190], "unexpectedli": [107, 212], "succe": [107, 110, 189], "assertionerror": [107, 154], "identity2": 107, "fx": [107, 108, 125, 131, 154, 180, 189, 206, 239, 251, 258], "imperfect": 107, "faith": 107, "pitfal": [107, 189], "necessarili": [107, 108, 110, 111, 141, 143, 167, 189], "export_control_flow_model_to_onnx_tutori": [107, 109, 112, 251], "ti": [108, 110, 111], "tai": [108, 110, 111], "justin": [108, 111, 114, 124, 194], "chu": [108, 111], "thiago": [108, 110], "crepaldi": [108, 110], "dynamo": [108, 110, 141, 154, 206, 245, 246, 257], "opportun": [108, 149, 190], "gamut": 108, "platform": [108, 146, 148, 183, 212, 231, 248], "supercomput": 108, "constrain": [108, 138, 165], "onnxscript": [108, 110, 111], "upgrad": [108, 110, 165, 183, 275], "onnxprogram": [108, 111], "protobuf": 108, "app": [108, 131, 199, 200], "drag": [108, 164, 183, 184, 201], "image_classifier_model": 108, "onnxruntim": [108, 110], "export_simple_model_to_onnx_tutori": [108, 109, 112, 251], "intro_onnx": [109, 110, 112, 251], "onnx_registry_tutori": [109, 111, 112, 251], "sphx_glr_beginner_onnx_intro_onnx": [109, 112, 251], "sphx_glr_beginner_onnx_export_control_flow_model_to_onnx_tutori": [109, 112, 251], "sphx_glr_beginner_onnx_export_simple_model_to_onnx_tutori": [109, 112, 251], "sphx_glr_beginner_onnx_onnx_registry_tutori": [109, 112, 251], "exportedprogram": [110, 111, 115, 189, 235, 244, 245], "__version__": [110, 172], "registri": 111, "opoverload": 111, "opset": 111, "18": [111, 113, 139, 154, 172, 177, 216, 244, 256], "blob": [111, 132, 183], "native_funct": 111, "yaml": [111, 144], "custom_translation_t": 111, "redund": [111, 149], "node_add_0": 111, "input_i": 111, "input_x": 111, "gelu": [111, 270], "op_typ": 111, "round": [111, 133, 175, 216, 230], "mylibrari": 111, "add_and_round_op": 111, "onnx": [112, 125, 131, 251], "json": [113, 167, 178, 183, 201, 221, 244], "quicker": 113, "record_funct": [113, 154, 221], "incur": [113, 136, 199, 231, 254], "investig": [113, 124, 157, 171, 187, 189, 230], "with_stack": [113, 183], "key_averag": 113, "group_by_stack_n": 113, "traceback": [113, 154, 245], "sort_bi": [113, 221], "193a910735e8": 113, "stacktrac": 113, "88": [113, 177, 256], "212": 113, "953": 113, "67": [113, 154], "mnt": [113, 148], "xarfus": 113, "au": 113, "07": [113, 133, 221, 230], "715": 113, "848m": 113, "350": 113, "151u": 113, "293": [113, 157], "342u": 113, "095u": 113, "931": 113, "tackl": 113, "footprint": [113, 132, 133, 134, 144, 164, 215, 249], "61": [113, 157, 256], "006": [113, 116, 118, 251], "476": 113, "34": [113, 172, 216, 221, 230], "338": 113, "759m": 113, "as_strid": [113, 154], "281": [113, 157], "808u": 113, "275": 113, "721u": 113, "_local": 113, "268": 113, "650u": [113, 221], "_scalar_dens": 113, "347": 113, "argwher": 113, "nonzero": [113, 231], "129": 113, "089m": 113, "402m": 113, "491m": 113, "119": 113, "441": 113, "587u": 113, "_numpi": 113, "395": [113, 177], "602u": 113, "801m": 113, "rpc": [113, 131, 250], "johnson": 114, "brows": 114, "utf": 114, "modern": [114, 167, 187, 190], "50x": 114, "hairi": 114, "thankfulli": 114, "wave": 114, "slim": 114, "tflearn": 114, "burden": [114, 179, 231], "sophist": [114, 173], "facil": 115, "running_mean": [115, 233], "themodelclass": 115, "fc1": [115, 132, 150, 166, 176, 184], "fc2": [115, 132, 166, 176, 184], "fc3": [115, 184], "param_tensor": 115, "var_nam": 115, "param_group": [115, 198], "dampen": 115, "weight_decai": 115, "4675713712": 115, "4675713784": 115, "4675714000": 115, "4675714072": 115, "4675714216": 115, "4675714288": 115, "4675714432": 115, "4675714504": 115, "4675714648": 115, "4675714720": 115, "_use_new_zipfile_seri": 115, "best_model_st": 115, "deepcopi": 115, "pt2": [115, 189, 197, 198, 202, 205, 244], "simplemodel": 115, "saved_exported_program": 115, "model_state_dict": [115, 134, 199, 200], "theoptimizerclass": 115, "modela_state_dict": 115, "modela": 115, "modelb_state_dict": 115, "modelb": 115, "optimizera_state_dict": 115, "optimizera": 115, "optimizerb_state_dict": 115, "optimizerb": 115, "themodelaclass": 115, "themodelbclass": 115, "theoptimizeraclass": 115, "theoptimizerbclass": 115, "gan": [115, 128, 131, 165], "ensembl": [115, 126, 131, 180, 251], "map_loc": [115, 134, 146, 215, 220], "remap": 115, "overwrit": 115, "saving_loading_model": [115, 116, 223, 224, 225, 226, 251], "029": 116, "template_tutori": [116, 118, 251], "distil": [116, 126, 131, 251], "dcgan": [116, 126, 128, 131, 251], "transfer_learning_tutori": [116, 121, 251], "understanding_leaf_vs_nonleaf_tutori": [116, 124, 251], "rai": [116, 129, 131, 251], "firstnam": 118, "lastnam": 118, "gallery_pattern": 118, "neural_style_transfer_tutori": 118, "sphinx": 118, "_build": 118, "beginner_sourc": [118, 251], "3660": 118, "5396": 118, "8526": 118, "6765": 118, "2864": 118, "5013": 118, "9467": 118, "4330": 118, "1494": 118, "3162": 118, "3996": 118, "2405": 118, "8163": 118, "3413": [118, 157], "6528": 118, "link1": [118, 133], "link2": [118, 133], "cs231n": 121, "quot": 121, "million": [121, 133, 149], "licens": [121, 181], "bsd": [121, 181], "todai": [121, 190, 265], "lr_schedul": [121, 132, 133], "num_ftr": 121, "decai": [121, 149, 174], "checkout": 121, "silver": [124, 164, 194], "_k": 124, "bigl": 124, "bigr": 124, "programmat": [124, 160], "probe": [124, 194], "phrase": [124, 179], "afterward": [124, 167, 189, 255], "retains_grad": 124, "tracker": [124, 153, 194], "streamlin": [125, 160], "inductor": [125, 126, 131, 141, 180, 189, 235, 240, 242, 246, 251, 256, 258, 267, 270, 275], "set_stanc": [125, 238, 250, 251], "usecas": [125, 160, 250], "lrschedul": [125, 164, 250], "triton": [125, 154, 187, 238, 239, 244, 250, 251, 258, 267], "cach": [125, 141, 154, 183, 193, 206, 231, 243, 248, 250, 256, 267], "cold": [125, 179, 219, 238, 239, 250, 251], "torchdynamo": [125, 131, 141, 189, 258, 270], "fuser": [125, 131, 180, 251], "orthogon": [126, 131, 165], "symmetr": [126, 131, 165, 270], "prune": [126, 131, 165, 180, 251], "scaled_dot_product_attent": [126, 131, 178, 193, 252], "nchw": [126, 131, 157], "func": [126, 131, 150, 152, 155, 161, 166, 241, 245, 274], "tangent": [126, 131, 152, 180, 251], "nerur": 126, "netork": [126, 131], "exploresever": 126, "spread": 127, "demand": [127, 254], "ddp_series_intro": 127, "utm_sourc": 127, "distr_land": 127, "utm_medium": 127, "distributeddata": 127, "ddp_tutori": 127, "intermediate_ddp_tutori": 127, "uneven": 127, "generic_join": 127, "fsdp_tutori": 127, "fsdp_getting_start": 127, "tp_tutori": 127, "distributed_device_mesh": 127, "rpc_tutori": 127, "rpc_getting_start": 127, "rpc_param_server_tutori": 127, "async_execut": [127, 131, 175], "rpc_async_execut": 127, "dataparallel": [127, 131, 137, 215, 231], "rpc_ddp_tutori": 127, "rpc_plus_ddp": 127, "plug": [127, 170, 181], "process_group_cpp_extension_tutori": 127, "custom_extensions_cpp": 127, "dqn": [128, 131, 180, 251], "cartpol": [128, 131, 149, 174, 177], "v0": [128, 131, 156, 174, 192], "proxim": [128, 131, 173], "invert": [128, 131, 173, 264], "mario": [128, 131, 165, 180, 251], "experiment": [129, 132, 138, 177, 194, 229, 231, 252, 254, 257, 270], "torchx": [129, 131], "plugin": [129, 131, 183], "raspberri": 129, "gpudirect": [131, 251, 272, 275], "bite": [131, 195, 250], "non_block": [131, 180, 251], "pin_memori": [131, 132, 133, 180, 231, 251], "resampl": 131, "waveform": 131, "wav2vec2": 131, "holist": 131, "_static": 131, "thumbnail": 131, "matcher": [131, 186], "paral": 131, "fully_shard": [131, 134, 136, 199, 200, 202], "libuv": 131, "tcpstore": [131, 146], "monarch": 131, "singler": 131, "sdk": 131, "mobilenet": [131, 172], "v3": 131, "camera": [131, 172], "xnnpack": 131, "metal": 131, "shader": 131, "android": 131, "deeplab": 131, "fp32": [131, 133, 144, 157, 178, 256, 267], "torchrec": [131, 180, 251], "distributedmodelparallel": 131, "hamid": [132, 133], "shojanazeri": [132, 133], "yanli": [132, 133], "zhao": [132, 133], "shen": [132, 146, 170, 175, 177], "li": [132, 146, 148, 167, 170, 175, 177, 187], "fsdp1": 132, "huggingfac": [132, 133, 193, 206, 245], "1t": [132, 144], "courtesi": 132, "patrick": 132, "hu": 132, "reduce_scatt": [132, 133, 136], "scatter": [132, 134, 146, 148], "possess": [132, 220, 256], "fsdp_mnist": 132, "size_based_auto_wrap_polici": 132, "default_auto_wrap_polici": 132, "fsdp_auto_wrap_polici": 132, "auto_wrap_polici": [132, 133, 134], "steplr": [132, 133], "fully_sharded_data_parallel": 132, "cpuoffload": [132, 134], "backwardprefetch": [132, 133], "enable_wrap": [132, 133], "cleanup": [132, 133, 146, 160, 199, 200], "dropout1": [132, 176], "dropout2": [132, 176], "9216": [132, 166, 176], "ddp_loss": 132, "batch_idx": 132, "nll_loss": [132, 148, 166, 176], "tloss": 132, "6f": 132, "keepdim": [132, 176], "view_a": [132, 176], "test_loss": 132, "2f": [132, 172, 175, 177, 256], "fsdp_main": [132, 133], "1307": [132, 148, 176], "3081": [132, 148, 176], "dataset1": 132, "dataset2": 132, "sampler1": [132, 133], "num_replica": [132, 133], "sampler2": [132, 133], "train_kwarg": [132, 133], "test_kwarg": [132, 133], "test_batch_s": [132, 133], "cuda_kwarg": [132, 133], "my_auto_wrap_polici": 132, "min_num_param": 132, "init_start_ev": [132, 133], "enable_tim": [132, 133], "init_end_ev": [132, 133], "adadelta": 132, "step_siz": [132, 133], "gamma": [132, 133, 156, 174, 175, 177], "elaps": [132, 179], "elapsed_tim": 132, "save_model": [132, 133], "barrier": [132, 133, 135, 146, 148, 252], "mnist_cnn": 132, "metavar": [132, 133, 175, 177], "store_tru": [132, 133], "110": [132, 177, 216], "85": [132, 216, 221, 256], "40": [132, 156, 157, 166, 177, 179, 193, 216, 244, 257, 267], "67462890625sec": 132, "_fsdp_wrapped_modul": 132, "flattenparamswrapp": 132, "_fpw_modul": 132, "kernel_s": 132, "inplac": 132, "in_featur": [132, 222, 267], "out_featur": [132, 267], "peak": [132, 134, 142, 164, 172, 193, 199, 242, 248, 249, 252, 256], "g4dn": 132, "xlarg": 132, "allgath": [132, 133, 136, 170, 231], "seal": 132, "20000": 132, "89130859375sec": 132, "auto_wrap": 132, "66": [132, 216], "offload": [132, 133, 134, 212], "cpu_offload": [132, 134], "offload_param": [132, 134], "dpp": 132, "ddp_mnist": 132, "39": [132, 177, 193, 216, 256], "77766015625sec": 132, "blog": [132, 133, 139, 144, 193, 214], "wright": 133, "rohan": [133, 176], "varma": [133, 176], "wikihow": 133, "p4dn": 133, "pressur": [133, 199], "fdsp": 133, "xxl": 133, "billion": [133, 136], "3b": [133, 172], "wikihowal": 133, "wikihowsep": 133, "summarization_dataset": 133, "t5_train": 133, "autotoken": 133, "gpt2tokenizerfast": 133, "t5token": 133, "t5forconditionalgener": 133, "modeling_t5": 133, "t5block": 133, "checkpoint_wrapp": 133, "checkpointimpl": 133, "apply_activation_checkpointing_wrapp": 133, "mixedprecis": 133, "shardingstrategi": 133, "fullstatedictconfig": 133, "statedicttyp": 133, "transformer_auto_wrap_polici": 133, "tqdm": [133, 149, 173], "datetim": [133, 135, 254], "setup_model": 133, "from_pretrain": [133, 245], "get_date_of_run": 133, "2022": [133, 258], "08": [133, 154, 177, 180, 216, 244, 251, 252], "31": [133, 154, 216, 221, 230], "12_pm": 133, "date_of_run": 133, "strftime": 133, "s_": [133, 174], "format_metrics_to_gb": 133, "gigabyt": 133, "metric_num": 133, "g_gigabyt": 133, "ndigit": 133, "fsdp_loss": 133, "inner_pbar": 133, "colour": 133, "desc": [133, 254], "r0": 133, "input_id": [133, 136, 245], "source_id": 133, "attention_mask": [133, 245], "source_mask": 133, "target_id": 133, "train_accuraci": 133, "val_load": 133, "load_dataset": [133, 245], "type_path": 133, "output_length": 133, "print_text": 133, "150": [133, 177], "val_dataset": 133, "t5_auto_wrap_polici": 133, "transformer_layer_cl": 133, "sharding_strategi": [133, 134], "shard_grad_op": [133, 134], "zero2": 133, "full_shard": [133, 134], "zero3": 133, "bf16_readi": 133, "is_bf16_support": 133, "loosevers": 133, "is_nccl_avail": [133, 252], "mp_polici": [133, 134], "bfsixteen": 133, "mixed_precis": [133, 134], "current_devic": [133, 215], "best_val_loss": 133, "inf": [133, 189, 265, 268], "curr_val_loss": 133, "file_save_nam": 133, "time_of_run": 133, "dur": 133, "train_acc_track": 133, "val_acc_track": 133, "training_start_tim": 133, "track_memori": 133, "mem_alloc_track": 133, "mem_reserved_track": 133, "run_valid": 133, "zone": 133, "memory_alloc": 133, "memory_reserv": 133, "save_polici": 133, "offload_to_cpu": 133, "rank0_onli": 133, "state_dict_typ": 133, "full_state_dict": [133, 134], "cpu_stat": 133, "currepoch": 133, "prefix": [133, 137, 141, 149, 183, 187, 189, 216, 230, 248, 249, 254, 256], "save_nam": 133, "store_fals": 133, "nnode": [133, 146, 169, 252, 254], "transfom": 133, "mhsa": 133, "ffn": [133, 193], "bfloat16": [133, 134, 206, 215, 228, 252, 256, 267], "v100": [133, 187], "fpsixteen": 133, "param_dtyp": [133, 134], "reduce_dtyp": [133, 134], "buffer_dtyp": [133, 134], "fp32_polici": 133, "grad_bf16": 133, "4x": 133, "basi": 133, "oom": [133, 164, 215], "freed": [133, 164], "backward_pr": [133, 134], "backward_prefetch": [133, 134], "backward_post": [133, 134], "contact": [133, 274], "yifan": 134, "mao": 134, "fsdp": [134, 136, 144, 199, 200, 202], "unshard": [134, 190, 252], "recordstream": 134, "float8": 134, "nf4": 134, "qlora": 134, "eg": 134, "fsdpmodul": 134, "isinst": [134, 257], "fsdptransform": 134, "tok_embed": [134, 136, 169], "fsdptransformerblock": 134, "joint": [134, 240], "to_loc": 134, "clip_grad_norm_": 134, "seq_len": 134, "queu": [134, 199], "set_modules_to_forward_prefetch": 134, "set_modules_to_backward_prefetch": 134, "perf": 134, "layers_to_prefetch": 134, "num_to_forward_prefetch": 134, "num_to_backward_prefetch": 134, "upcast": 134, "model_arg": [134, 169], "fsdp_kwarg": 134, "mixedprecisionpolici": 134, "max_norm": 134, "resum": [134, 187, 200, 245], "distribute_tensor": 134, "mmap": 134, "full_sd": 134, "meta_sharded_sd": 134, "sharded_sd": 134, "param_nam": [134, 228], "full_tensor": 134, "sharded_meta_param": 134, "sharded_tensor": 134, "device_mesh": [134, 136, 202, 252], "full_param": 134, "cpu_state_dict": 134, "sharded_param": 134, "del": [134, 152, 169, 256, 257], "set_model_state_dict": 134, "broadcast_from_rank0": 134, "statedictopt": 134, "get_model_state_dict": 134, "set_optimizer_state_dict": 134, "get_optimizer_state_dict": 134, "modulewrappolici": 134, "transformerblock": [134, 136], "param_init_fn": 134, "itertool": [134, 177], "to_empti": [134, 228], "reset_paramet": 134, "sublay": 134, "reshard_after_forward": 134, "hybrid_shard": 134, "_hybrid_shard_zero2": 134, "offload_polici": 134, "cpuoffloadpolici": 134, "cast_forward_input": 134, "cast_root_forward_input": 134, "output_dtyp": [134, 254], "sync_module_st": 134, "rank0": [134, 175, 177, 254], "forward_prefetch": 134, "fsdp_modul": 134, "limit_all_gath": 134, "use_orig_param": 134, "flat": 134, "no_sync": [134, 231], "set_requires_gradient_sync": 134, "ignored_param": 134, "ignored_st": 134, "xilun": [135, 252], "roll": 135, "1k": [135, 136], "98304": 135, "96k": 135, "perf_count": 135, "getlogg": 135, "var": [135, 152], "preset": [135, 270], "env_rank": 135, "env_world_s": 135, "env_master_addr": 135, "env_master_port": 135, "23456": [135, 148], "tcp_store": 135, "is_mast": 135, "time_elaps": 135, "client": [135, 160], "superior": [135, 267], "timeout": [135, 146, 170, 254], "store_based_barri": 135, "timedelta": [135, 254], "diststoreerror": 135, "_diststoreerror": 135, "_store_based_barri": 135, "group_nam": 135, "rendezvous_count": 135, "default_pg_timeout": 135, "logging_interv": 135, "store_kei": 135, "store_based_barrier_kei": 135, "worker_count": 135, "last_worker_kei": 135, "last_work": 135, "num_workers_join": 135, "tcpstore_test": 135, "number_run": 135, "spectrum": 135, "listen_fd": 135, "socket": [135, 148, 154, 231, 248], "listen_sock": 135, "af_inet": 135, "sock_stream": 135, "addr": [135, 254], "getsocknam": 135, "master_listen_fd": 135, "notimplementederror": 135, "gloo": [135, 146, 148, 170, 183, 190, 199, 249], "vairabl": 135, "plane": 135, "notifi": [135, 175], "wanchao": [136, 202], "liang": [136, 202], "tianyu": 136, "liu": 136, "megatron": 136, "lm": 136, "sp": 136, "parallelstyl": 136, "parallelize_modul": 136, "foward": 136, "aris": [136, 189, 193, 245, 256, 265], "exceed": [136, 160, 173], "domin": [136, 157], "inter": [136, 145, 161, 202, 231], "ballpark": 136, "flop": [136, 190, 242], "llm": [136, 169, 267], "trillion": [136, 144], "month": 136, "llama": [136, 193, 206, 270], "70b": 136, "2k": 136, "dai": [136, 190, 228], "llama2": 136, "colwiseparallel": 136, "rowwiseparallel": 136, "sequenceparallel": 136, "rmsnormpython": 136, "preparemoduleinput": 136, "preparemoduleoutput": 136, "init_device_mesh": [136, 202, 252], "tp_mesh": [136, 202], "feedforward": 136, "swiglu": 136, "w2": 136, "silu": 136, "w1": 136, "w3": 136, "colwis": 136, "rowwis": 136, "parallelize_plan": 136, "layer_tp_plan": 136, "feed_foward": 136, "feed_forward": 136, "wq": 136, "wk": 136, "wv": 136, "wo": 136, "tp_plan": 136, "draft": [136, 148], "use_local_output": 136, "num_head": 136, "layer_id": [136, 169], "transformer_block": 136, "input_layout": 136, "output_layout": 136, "residu": 136, "attention_norm": 136, "ffn_norm": 136, "desired_input_layout": 136, "yellow": 136, "red": [136, 141, 184, 212], "loss_parallel": 136, "dp": [136, 254], "mesh_2d": [136, 202], "submesh": 136, "dp_mesh": 136, "model_tp": 136, "model_2d": 136, "broadli": 137, "torchviz": [137, 143], "orang": [137, 172], "_save": 137, "kept": [137, 254], "_saved_self": 137, "_saved_oth": 137, "cycl": [137, 183, 216, 221], "thumb": [137, 155, 173, 215], "pack_hook": 137, "unpack_hook": 137, "silli": 137, "harmless": 137, "debat": 137, "__repr__": [137, 216], "152": 137, "48gb": 137, "5gb": 137, "6x": 137, "leak": 137, "autograd_saved_tensors_hooks_tutori": [137, 180, 251], "david": 138, "eriksson": 138, "balandat": 138, "methodologi": 138, "laptop": 138, "sustain": [138, 199], "studi": [138, 171], "botorch": 138, "bayesian": 138, "mnist_train_na": [138, 158, 180, 251], "appdef": 138, "kubernet": [138, 160], "local_cwd": 138, "fetch": [138, 140, 175, 176, 177, 190, 240], "proxi": [138, 216, 235, 236, 263, 266], "tensorboardcurvemetr": 138, "curve_nam": 138, "lower_is_bett": 138, "favor": [138, 161, 173, 189], "multiobjectiveoptimizationconfig": 138, "94": [138, 221, 256], "generationstrategi": 138, "scheduleropt": 138, "max_pending_tri": 138, "pareto": 138, "frontier": 138, "surrog": 138, "uncertainti": 138, "95": [138, 177, 256], "num_param": 138, "val_acc": 138, "contour": 138, "hidden_size_1": 138, "kiuk": 138, "chung": 138, "tristan": [138, 172], "rice": [138, 172], "ax_multiobjective_nas_tutori": [138, 158, 180, 251], "surnam": 139, "spell": 139, "lua": [139, 140, 179], "unreason": [139, 140], "roman": 139, "alphabet": 139, "n_letter": 139, "line_length": 139, "all_lett": 139, "linetotensor": 139, "namesdataset": 139, "20074": 139, "charrnn": 139, "cudnn": [139, 142, 149, 157, 215], "58": [139, 157], "label_from_output": 139, "histor": [139, 140], "all_loss": [139, 140], "minu": [139, 183], "bright": 139, "incorrectli": 139, "chines": [139, 140], "korean": 139, "italian": 139, "greek": 139, "poorli": 139, "gender": 139, "writer": [139, 172, 173, 184, 199, 229, 254], "subreddit": 139, "char_rnn_classification_tutori": [139, 162, 180, 251], "russian": 140, "ru": 140, "rovakov": 140, "uantov": 140, "shavakov": 140, "german": 140, "ger": 140, "gerren": 140, "ereng": 140, "rosher": 140, "spa": 140, "salla": 140, "parer": 140, "allan": 140, "chi": 140, "chan": 140, "iun": 140, "category_lin": 140, "o2o": 140, "muscl": 140, "fuzz": 140, "chao": 140, "abcd": 140, "eo": [140, 179], "n_categori": 140, "randomtrainingexampl": 140, "contrast": [140, 146, 166, 167, 189, 263], "timesinc": 140, "timestamp": [140, 153, 212], "print_everi": 140, "plot_everi": 140, "output_nam": 140, "fiction": 140, "countri": 140, "citi": 140, "char_rnn_generation_tutori": [140, 162, 180, 251], "simon": 141, "fan": [141, 172], "torch_log": [141, 189, 236, 238, 245, 250, 251, 267], "_dynamo": [141, 154, 187, 189, 236, 245], "compiled_autograd": 141, "intercept": 141, "bytecod": [141, 187], "aotdispatch": 141, "rout": [141, 154, 189], "rewritten": 141, "compiled_autograd_verbos": 141, "stderr": 141, "aot0_": 141, "aot0_view_2": 141, "view_2": 141, "aot": [141, 154, 238, 242, 250, 251], "unoptim": [141, 187], "aot_eag": [141, 154], "fn": [141, 148, 152, 154, 187, 197, 230, 240, 243, 257], "temp": [141, 239], "graph_break": [141, 245], "unique_graph": 141, "call_hook": 141, "div": [141, 154, 263], "adjac": 142, "hardcod": [142, 189], "dilat": 142, "track_running_statist": 142, "epsilon": [142, 149, 173, 174], "denomin": 142, "nenadmarku": [142, 186], "bulk": 142, "fusedconvbn": 142, "geforc": 142, "rtx": 142, "3070": 142, "56gb": 142, "unfus": 142, "68gb": 142, "shallow": [142, 149], "bn": [142, 186], "custom_function_conv_bn_tutori": [142, 180, 251], "equip": [143, 149, 248, 263], "staticmethod": [143, 152, 175], "grad_out": 143, "finit": [143, 161], "differenc": 143, "magnifi": 143, "gradgradcheck": [143, 231], "grad_x": 143, "make_dot": 143, "dout": 143, "ouptut": 143, "sinh": 143, "cosh": 143, "expx": 143, "expnegx": 143, "_grad_out_exp": 143, "_grad_out_negexp": 143, "sinhbad": 143, "cube_backward": 143, "workaround": [143, 152, 245], "cubebackward": 143, "cube_forward": 143, "cube_backward_backward": 143, "sav_grad_out": 143, "cube_backward_backward_grad_out": 143, "cube": 143, "dgrad_out": 143, "reachabl": [144, 145, 148], "2xlarg": [144, 145], "hydra": 144, "slurm": [144, 145, 146, 148, 160], "char_dataset": 144, "gpt2_train_cfg": 144, "bucket": [144, 231], "accomod": 144, "aggress": 144, "rendezv": [145, 170], "nccl_debug": 145, "verbos": [145, 189, 201], "diagnos": 145, "nccl_socket_ifnam": 145, "eth0": 145, "joe": 146, "zhu": [146, 154], "chirag": [146, 254], "pandya": [146, 254], "fire": 146, "clarifi": 146, "filestor": 146, "libtmp": 146, "some_fil": 146, "acc": 146, "current_acceler": [146, 148], "get_default_backend_for_devic": 146, "toymodel": [146, 199, 200, 202], "net1": [146, 199, 200, 201, 202], "net2": [146, 199, 200, 201, 202], "demo_bas": 146, "ddp_model": [146, 249], "loss_fn": [146, 166, 169, 175, 199, 200, 249], "run_demo": 146, "demo_fn": 146, "caution": 146, "straggler": [146, 183], "inevit": 146, "spike": [146, 172], "AND": 146, "recoveri": [146, 160], "torchelast": 146, "demo_checkpoint": 146, "checkpoint_path": [146, 256], "gettempdir": 146, "toympmodel": 146, "dev0": 146, "dev1": 146, "output_devic": 146, "demo_model_parallel": 146, "mp_model": 146, "ddp_mp_model": 146, "n_gpu": 146, "elastic_ddp": 146, "set_device_index": 146, "rdzv_id": [146, 202], "rdzv_backend": 146, "rdzv_endpoint": [146, 202], "29400": [146, 202], "scontrol": 146, "hostnam": 146, "slurm_nodelist": 146, "srun": 146, "torchrun_script": 146, "s\u00e9b": 148, "arnold": 148, "sysadmin": 148, "coordin": [148, 160, 181, 192, 248, 256, 266], "pdsh": 148, "clustershel": 148, "init_process": 148, "127": 148, "set_start_method": 148, "ip": 148, "recv": [148, 169, 177], "irecv": 148, "dst": 148, "req": 148, "behaviour": 148, "fanci": 148, "baidu": 148, "deepspeech": 148, "facebook": 148, "communc": 148, "new_group": [148, 169, 202], "commut": 148, "band": 148, "bor": 148, "bxor": 148, "premul_sum": 148, "scatter_list": 148, "gather_list": 148, "all_to_al": 148, "output_tensor_list": 148, "input_tensor_list": 148, "random_split": 148, "data_idx": 148, "datapartition": 148, "1234": 148, "data_len": 148, "part_len": 148, "partition_dataset": 148, "get_world_s": 148, "bsz": 148, "partition_s": 148, "train_set": [148, 183], "60000": 148, "30000": 148, "num_batch": 148, "ceil": 148, "epoch_loss": 148, "average_gradi": 148, "voil\u00e0": 148, "send_buff": 148, "recv_buff": 148, "accum": [148, 267], "send_req": 148, "bandwidth": [148, 183, 190, 275], "subsect": 148, "mpi": 148, "eleg": 148, "device_typ": [148, 252], "smi": [148, 215], "mvapich2": 148, "ipc": [148, 183], "recompil": [148, 187, 198, 236, 239, 240], "requisit": 148, "forg": [148, 248], "openmpi": 148, "mpirun": 148, "myscript": 148, "handshak": 148, "superflu": 148, "xccl": 148, "readili": 148, "race": 148, "fcntl": 148, "nf": [148, 254], "sharedfil": 148, "everyon": 148, "unclear": [148, 189], "natalia": 148, "gimelshein": 148, "actor": 149, "carrier": [149, 173], "step_mdp": 149, "brought": [149, 167, 173, 189], "84x84": 149, "accessori": [149, 172], "inittrack": 149, "stamp": 149, "is_init": 149, "tensordictprim": 149, "primer": [149, 266], "disappear": 149, "lstmmodul": 149, "backbon": 149, "flank": 149, "assist": [149, 202], "tensordictmodulebas": 149, "batch_first": 149, "make_tensordict_prim": 149, "qvaluemodul": 149, "action_valu": 149, "qvalueactor": 149, "set_recurrent_mod": 149, "uniniti": 149, "dqnloss": 149, "delay_valu": 149, "lazymemmapstorag": 149, "dqn_with_rnn_tutori": [149, 180, 251], "tradition": 150, "pretend": [150, 166], "stack_module_st": 150, "functional_cal": [150, 152, 161, 166], "num_model": [150, 166], "in_dim": [150, 166, 274], "weren": [150, 166], "forced_alignment_tutori": 151, "incomplet": [152, 167], "eagerli": [152, 164, 189, 243], "alongsid": [152, 184, 190, 215, 235], "primal": 152, "dual": 152, "forward_ad": 152, "fwad": 152, "dual_level": 152, "make_du": 152, "dual_input": 152, "unpack_du": 152, "dual_input_alt": 152, "plain_tensor": 152, "dual_output": 152, "namedtupl": 152, "delattr": 152, "setattr": 152, "fresh": [152, 215], "dual_param": 152, "jvp2": 152, "gi": 152, "check_forward_ad": 152, "check_backward_ad": 152, "check_undefined_grad": 152, "check_batched_grad": 152, "functorch": 152, "ft": 152, "primal0": 152, "tangent0": 152, "primal1": 152, "tangent1": 152, "primal_out": 152, "tangent_out": 152, "new_fn": 152, "workspac": [152, 160], "intermediate_sourc": [152, 251], "forward_ad_usag": [152, 180, 251], "203": 152, "futurewarn": 152, "214": [152, 256], "reformul": [152, 161], "make_functional_with_buff": 152, "analog": [152, 189, 190, 265, 266], "consolid": [152, 175, 190], "func_params_onli": 152, "model_output": [152, 176], "jvp_out": 152, "242": 152, "dual_numb": 152, "122": [152, 180, 221, 251], "jame": 153, "reed": 153, "longest": 153, "nicer": 153, "tabul": [153, 187, 242, 254], "ca": 153, "graphmodul": 153, "symbolic_trac": 153, "profilinginterpret": 153, "clock": [153, 216], "51393": 153, "happi": 153, "hear": 153, "fx_profiling_tutori": [153, 180, 251], "xuan": 154, "liao": 154, "haozh": 154, "jiong": [154, 257, 267], "gong": [154, 257, 267], "weihan": 154, "intricaci": 154, "troubleshoot": 154, "pinpoint": [154, 189, 201], "narrow": [154, 189, 254, 268], "torch_compile_debug": 154, "xx": 154, "ir": [154, 240], "_inductor": [154, 189, 206, 244, 256, 257, 267], "model___20": 154, "tmp": [154, 239, 240, 254, 257], "torchinductor_root": 154, "rx": 154, "crxfi2ybd7yp5sbj2pnhw33wfhtdw7wumvrobyp5sjvdui5ktjc2": 154, "fx_graph_runn": 154, "fx_graph_transform": 154, "ir_pre_fus": 154, "ir_post_fus": 154, "output_cod": [154, 246, 267], "gv": 154, "cgv6n5aotqjo5w4vknjibhengeycuattfto532hkxpozszcgxr3x": 154, "tmp2": [154, 267], "tmp1": [154, 267], "exc": [154, 245], "backendcompilerfail": 154, "cppcompileerror": 154, "xg": 154, "cxga5tk3b4lkwoxyigrtocjp5s7vc5cg2ikuscf6bk6pjqip2bhx": 154, "unsign": [154, 216], "char": 154, "max_propagate_nan": 154, "tmp3": [154, 267], "tmp0": [154, 267], "candid": 154, "scalar_t": 154, "deduct": 154, "substitut": [154, 155, 164], "deduc": 154, "in_ptr0": 154, "in_ptr1": 154, "out_ptr0": 154, "pragma": [154, 267], "gcc": [154, 267], "ivdep": [154, 267], "i0": 154, "0l": [154, 267], "8390l": 154, "1l": [154, 257, 267], "i1": 154, "8l": 154, "buf0": [154, 257], "schedulernod": 154, "computedbuff": 154, "memorydep": 154, "c0": 154, "67120": 154, "unmet_depend": 154, "met_depend": 154, "arg0_1": [154, 257], "8390": 154, "arg1_1": 154, "nodeus": 154, "can_inplac": 154, "buf0_loop_bodi": 154, "var_rang": 154, "z0": 154, "index0": 154, "index1": 154, "get_index": 154, "get_index_1": 154, "load_1": 154, "get_index_2": 154, "minifi": 154, "dead": 154, "minif": 154, "tol": 154, "test_script": 154, "expected_result": 154, "actual_result": 154, "torchdynamo_repro_aft": 154, "torchdynamo_repro_level": 154, "mobilebertforquestionansw": 154, "xeon": [154, 157, 250], "platinum": 154, "8358": [154, 256], "60ghz": 154, "kmp_blocktim": [154, 231, 248], "kmp_set": 154, "kmp_affin": [154, 231, 248], "compact": [154, 231, 248], "ld_preload": [154, 231, 248], "conda_prefix": [154, 216], "libiomp5": [154, 231, 248], "libjemalloc": [154, 248], "malloc_conf": [154, 248], "oversize_threshold": [154, 248], "background_thread": [154, 248], "metadata_thp": [154, 248], "dirty_decay_m": 154, "muzzy_decay_m": 154, "numactl": [154, 231, 248], "bench": 154, "eager_t": 154, "num_it": 154, "inductor_t": 154, "802": 154, "1023553796113": 154, "339": 154, "95180135127157": 154, "359459053287382": 154, "355x": 154, "enable_kernel_profil": 154, "73": [154, 177, 216, 256], "370": 154, "814m": 154, "362": 154, "89": [154, 177, 221, 256], "161": 154, "276m": 154, "363": 154, "97": [154, 177, 256], "121": [154, 221], "416m": 154, "488": [154, 216], "154m": 154, "194": 154, "clamp_min": 154, "81": [154, 256], "444m": 154, "96": [154, 177, 256], "bmm": [154, 216, 256, 268], "258m": 154, "810": 154, "920m": 154, "447m": 154, "_softmax": 154, "087m": 154, "376": 154, "888m": 154, "77": [154, 256], "430m": 154, "502m": 154, "161m": 154, "850": 154, "377m": 154, "386": [154, 177, 221], "index_select": 154, "952": 154, "000u": [154, 221], "986": 154, "458": 154, "420m": 154, "703": 154, "656": [154, 249], "963": 154, "864m": 154, "mkl": [154, 221, 248, 267], "_mkl_linear": [154, 267], "231": [154, 216, 221], "573m": [154, 221], "992m": 154, "336": [154, 221], "642m": 154, "graph_0_cpp_fused_constant_pad_nd_embedding_0": 154, "915": 154, "911": 154, "graph_0_cpp_fused__mkl_linear_add_mul_relu_151": 154, "901": 154, "graph_0_cpp_fused__mkl_linear_add_mul_relu_226": 154, "899": 154, "graph_0_cpp_fused__mkl_linear_add_mul_relu_361": 154, "898": 154, "graph_0_cpp_fused__mkl_linear_add_mul_relu_121": 154, "895": 154, "graph_0_cpp_fused__mkl_linear_add_mul_relu_31": 154, "893": 154, "graph_0_cpp_fused__mkl_linear_add_mul_relu_76": 154, "892": [154, 172, 216], "graph_0_cpp_fused__mkl_linear_add_mul_relu_256": 154, "graph_0_cpp_fused__mkl_linear_add_mul_relu_346": 154, "graph_0_cpp_fused__mkl_linear_add_mul_relu_241": 154, "891": 154, "graph_0_cpp_fused__mkl_linear_add_mul_relu_316": 154, "graph_0_cpp_fused__mkl_linear_add_mul_relu_91": 154, "890": 154, "graph_0_cpp_fused__mkl_linear_add_mul_relu_106": 154, "graph_0_cpp_fused__mkl_linear_add_mul_relu_211": 154, "graph_0_cpp_fused__mkl_linear_add_mul_relu_61": 154, "889": 154, "graph_0_cpp_fused__mkl_linear_add_mul_relu_286": 154, "graph_0_cpp_fused_": 154, "63x": 154, "cblas_sgemm_comput": 154, "339m": 154, "94x": 154, "impress": [154, 189], "cpp_fused__mkl_linear_add_mul_relu_151": 154, "clrlgu27q4ggd472umdzwsu6qcpqxcuusjxqvx2hwitjbujiiz7z": 154, "bottl": [154, 199], "neck": [154, 199], "780875144992024": 154, "9588955780491233": 154, "0286805751604735": 154, "smallest": [154, 171], "solid": [154, 195], "analyt": 154, "hotspot": [154, 212], "phenomenon": 154, "inductor_debug_cpu": [154, 180, 251], "annoi": 155, "jax": [155, 161, 274], "argnum": 155, "millisecond": [155, 170, 231], "get_perf": [155, 166], "rigor": 155, "taller": 155, "hessiani": 155, "overwhelm": 155, "jacobians_hessian": [155, 180, 251], "yuansong": 156, "steven": 156, "guo": 156, "cheatsheet": 156, "companion": 156, "bro": 156, "ne": [156, 179, 221], "emul": [156, 206], "tube": 156, "mushroom": 156, "screen": [156, 174, 212], "next_stat": [156, 174], "240": [156, 177, 221], "pipe": 156, "sky": 156, "grayscaleobserv": 156, "resizeobserv": 156, "skipfram": 156, "framestack": 156, "hi": [156, 268], "movement": 156, "exploration_r": 156, "he": [156, 179, 186], "marionet": 156, "ddqn": 156, "_e": 156, "argmax_": 156, "td_target": 156, "td_t": 156, "td_e": 156, "leftarrow": 156, "nabla": 156, "episod": [156, 174, 175, 177], "enjoi": 156, "mario_rl_tutori": [156, 180, 251], "vitali": 157, "fedyunin": 157, "densest": 157, "4x4": 157, "10x3x16x16": 157, "768": [157, 256], "minor": [157, 177, 184], "ambigu": [157, 264, 265], "n1hw": 157, "contrari": [157, 167, 171], "restrid": 157, "unintend": 157, "nevertheless": [157, 173], "apex": 157, "main_amp": 157, "resnet50": [157, 172, 175], "o2": 157, "opt_level": 157, "keep_batchnorm_fp32": 157, "nonetyp": 157, "loss_scal": 157, "7603": 157, "cast_model_typ": 157, "patch_torch_funct": 157, "master_weight": 157, "125": [157, 221], "866": 157, "230": [157, 177], "949": 157, "6735125184": 157, "6735": 157, "prec": 157, "259": 157, "562": 157, "773": 157, "481": 157, "355": 157, "693": 157, "6968704462": 157, "6852": 157, "55": [157, 216, 248, 256], "258": 157, "461": 157, "775": 157, "089": 157, "433": 157, "965": 157, "7877287269": 157, "7194": 157, "51": [157, 177], "833": 157, "410": 157, "771": 157, "710": 157, "487": 157, "8285319805": 157, "7467": 157, "260": [157, 177], "380": 157, "770": 157, "090": 157, "525": 157, "908": 157, "7370464802": 157, "7447": 157, "56": [157, 172, 216, 221, 248], "360": 157, "623": 157, "555": 157, "728": 157, "7592862844": 157, "7472": 157, "917": 157, "345": [157, 192], "774": 157, "746": [157, 216], "115": 157, "9698858261": 157, "9218": 157, "335": [157, 177, 249], "324": 157, "597": 157, "659": 157, "2505953312": 157, "0879": 157, "52": [157, 251, 256], "767": 157, "785": 157, "7579724789": 157, "7580": 157, "198": 157, "482": 157, "1012": 157, "135": [157, 172, 216], "414": 157, "716": [157, 216], "7007197738": 157, "7293": 157, "250": [157, 177, 221], "387": 157, "1010": 157, "977": 157, "516": 157, "7113101482": 157, "7233": 157, "667": 157, "197": [157, 256], "340": 157, "1013": 157, "023": 157, "588": 157, "333": 157, "8943189979": 157, "7661": 157, "541": 157, "641": 157, "7113249302": 157, "9551": 157, "1011": 157, "163": 157, "683": 157, "574": 157, "8537774086": 157, "7716": 157, "279": 157, "453": 157, "7595844269": 157, "429": 157, "269": 157, "827": 157, "743": 157, "883": 157, "8196096420": 157, "4011": 157, "volta": [157, 215, 231], "alexnet": 157, "mnasnet0_5": 157, "mnasnet0_75": 157, "mnasnet1_0": 157, "mnasnet1_3": 157, "mobilenet_v2": [157, 172, 192], "resnet101": 157, "resnet152": 157, "resnet34": 157, "resnext50_32x4d": 157, "shufflenet_v2_x0_5": [157, 172], "shufflenet_v2_x1_0": [157, 172], "shufflenet_v2_x1_5": [157, 172], "shufflenet_v2_x2_0": [157, 172], "squeezenet1_0": 157, "squeezenet1_1": 157, "vgg11": 157, "vgg11_bn": 157, "vgg13": 157, "vgg13_bn": 157, "vgg16": 157, "vgg16_bn": 157, "vgg19_bn": 157, "wide_resnet101_2": 157, "wide_resnet50_2": 157, "ic": 157, "lake": 157, "densenet121": 157, "densenet161": 157, "densenet169": 157, "googlenet": [157, 172], "inception_v3": [157, 172], "resnext101_32x8d": [157, 172], "spite": 157, "nc11": 157, "memory_format_tutori": [157, 180, 251], "amir": 160, "afzali": 160, "async": [160, 175, 177, 190, 199, 231], "titan": 160, "debug_model": 160, "toml": 160, "permiss": 160, "sbatch": 160, "jobtrait": 160, "slurmjob": 160, "create_slurm_job": 160, "mesh_nam": 160, "num_nod": 160, "gpus_per_nod": 160, "time_limit": 160, "ongo": 160, "default_job_nam": 160, "monarch_titan": 160, "job_nam": 160, "endpoint": 160, "lifecycl": 160, "current_rank": 160, "setup_env_for_distribut": 160, "init_logg": 160, "traineractor": 160, "lifetim": [160, 177], "start_train": 160, "job_config": 160, "uid": 160, "jobconfig": 160, "trainer_": [160, 176], "ping_rank": 160, "ping": 160, "pseudocod": 160, "mesh0": 160, "proc_mesh": 160, "spawn_proc": 160, "trainer_actor": 160, "await": [160, 190], "ONE": 160, "supervisionev": 160, "breakpoint": 160, "ping_debuggable_rank": 160, "pong": 160, "dataclass": [160, 169], "runparam": 160, "training_step": 160, "model_config": 160, "c4": 160, "c4_test": 160, "configmanag": 160, "make_job_config": 160, "data_parallel_shard_degre": 160, "output_path": 160, "script_dir": 160, "getcwd": 160, "default_arg": 160, "config_fil": 160, "tokenizer_path": 160, "dump_fold": 160, "config_manag": 160, "orchestr": 160, "appar": 160, "proc": 160, "execute_train": 160, "slurm_job": 160, "job_stat": 160, "stream_to_cli": 160, "aggregate_window_sec": 160, "logging_opt": 160, "cleanup_job": 160, "aliv": [160, 189], "cancel": [160, 216, 231], "ttl": 160, "kill": 160, "asyncio": 160, "congrat": [160, 190], "torchft": 160, "proof": [160, 189], "year": [161, 165, 193], "j_": 161, "diagon": 161, "beforehand": 161, "asymptot": 161, "i_o": 161, "i_": 161, "e_o": 161, "textrm": 161, "_o": 161, "tensorfloat": 161, "sacrific": 161, "empirical_ntk_ntk_vp": 161, "luck": [161, 164, 190], "altogeth": [161, 265], "neural_tangent_kernel": [161, 180, 251], "french": [162, 179], "seq2seq_translation_tutori": [162, 179, 180, 251], "homepag": [163, 253], "ooz": 164, "_might_": 164, "2p": 164, "ephemer": 164, "timelin": [164, 183, 212], "memory_viz": 164, "devot": 164, "bat": [164, 258], "gradual": 164, "2gb": [164, 172], "6gb": 164, "foreach": [164, 205], "reveal": [164, 178, 187, 214, 216], "bullet": 164, "sizabl": [164, 167], "tantamount": 164, "eat": 164, "lora": 164, "win": 164, "unlock": [164, 270], "vit_l_16": 164, "neat": 164, "intrus": 164, "slate": 164, "woohoo": 164, "apart": 164, "shrunk": 164, "0gb": 164, "optimizer_step_in_backward_tutori": [164, 180, 251], "lezcano": 165, "surprisingli": 165, "ill": 165, "frobeniu": 165, "spectral": 165, "lipschitz": 165, "x\u1d40": 165, "upper": [165, 178, 189, 221], "triangular": 165, "reimplement": [165, 171, 189], "skew": [165, 183, 221], "unparametr": 165, "linearsymmetr": 165, "moduledict": [165, 169], "parametrizationlist": 165, "modulelist": 165, "inbuilt": 165, "caylei": 165, "spd": 165, "right_invers": 165, "succinctli": 165, "remove_parametr": 165, "parametri": 165, "leave_parametr": 165, "privaci": [166, 171], "simplecnn": 166, "compute_grad": 166, "prepend": [166, 248], "compute_sample_grad": 166, "sample_grad": 166, "per_sample_grad": [166, 180, 251], "named_buff": 166, "compute_loss": 166, "ft_compute_grad": 166, "0th": [166, 171, 178, 268], "ft_compute_sample_grad": 166, "ft_per_sample_grad": 166, "atol": [166, 252], "rtol": 166, "25x": 166, "first_descriptor": 166, "second_descriptor": 166, "second_r": 166, "first_r": 166, "final_gain": 166, "without_vmap": 166, "stmt": [166, 197, 216, 230, 256], "with_vmap": 166, "no_vmap_tim": 166, "timeit": [166, 230], "with_vmap_tim": 166, "0x7f11dc0e4460": 166, "43": [166, 216], "0x7f11dc0cfbb0": 166, "1826": 166, "5827": 166, "opacu": 166, "320": [166, 180, 251], "cpu_tensor": 167, "cuda_tensor": [167, 231], "erron": 167, "carefulli": [167, 231], "distinguish": [167, 177, 184], "isol": [167, 187], "illus": 167, "circumst": [167, 215], "anywher": 167, "cudastreamsynchron": 167, "dma": 167, "volterra": 167, "tesla": 167, "h100": [167, 187], "t3_cuda": 167, "belief": [167, 189], "brand": 167, "cudahostalloc": 167, "cudamemcpi": 167, "doubt": 167, "interestingli": 167, "pronounc": 167, "tick": 167, "__whenev": 167, "memory__": 167, "corrupt": 167, "garbag": 167, "reliabl": [167, 216], "annihil": 167, "legitim": 167, "notori": 167, "inher": [167, 189, 190, 200], "blockag": 167, "non_blocking_pin": 167, "ration": 167, "outweigh": 167, "perman": [167, 171], "shuttl": 167, "expedit": 167, "advers": 167, "bu": 167, "monopol": 167, "calibr": [167, 206, 270], "pinmem_nonblock": [167, 180, 251], "huang": [169, 170, 199, 200, 252], "microbatch": 169, "micro": 169, "educ": [169, 193], "modelarg": 169, "n_head": 169, "witout": 169, "layernorm": [169, 193], "splitpoint": 169, "pipelinestag": 169, "schedulegpip": 169, "pp_group": 169, "stage_index": 169, "num_stag": [169, 256], "init_distribut": 169, "peer": [169, 249], "manual_model_split": 169, "elif": 169, "tracer": 169, "split_spec": 169, "4th": 169, "mirror": 169, "build_stag": 169, "gpipe": 169, "1f1b": 169, "interleaved1f1b": 169, "loopedbf": 169, "num_microbatch": 169, "example_input_microbatch": 169, "tracer_model_split": 169, "tokenwise_loss_fn": 169, "n_microbatch": 169, "pipelining_tutori": 169, "tian": 170, "si": 170, "zeroredundancyoptim": [170, 250], "processgroupnccl": 170, "processgroupgloo": 170, "processgroupmpi": 170, "ucc": 170, "oneccl": [170, 231], "trainum": 170, "emerg": 170, "backenddummi": 170, "chrono": 170, "outputtensor": 170, "inputtensor": 170, "allgatheropt": 170, "allreduceopt": 170, "workdummi": 170, "optyp": 170, "ivalu": 170, "recvanysourc": 170, "future_": 170, "iscomplet": 170, "issuccess": 170, "kunsettimeout": 170, "getfutur": 170, "outputtensorvec": 170, "listtyp": 170, "tensortyp": 170, "markcomplet": 170, "createbackenddummi": 170, "backenddummyconstructor": 170, "__attribute__": 170, "register_backend": 170, "cpp_function": [170, 216], "torch_extension_nam": 170, "libraries_dir": 170, "abspath": 170, "dummy_collect": 170, "builtin": [170, 216, 230], "michela": 171, "paganini": 171, "biolog": 171, "batteri": 171, "subnetwork": 171, "lotteri": 171, "ticket": 171, "destruct": [171, 248], "0a0": 171, "8e8a5e0": 171, "lecun": 171, "1998": 171, "unprun": 171, "basepruningmethod": 171, "adequ": [171, 173], "weight_orig": 171, "_orig": 171, "intact": [171, 175, 228], "weight_mask": 171, "_mask": 171, "forward_pre_hook": 171, "l1_unstructur": 171, "bias_orig": 171, "bias_mask": 171, "pruningcontain": 171, "compute_mask": 171, "ln_structur": 171, "undo": 171, "reassign": 171, "global_unstructur": 171, "apply_mask": 171, "unstructur": 171, "preprun": 171, "pruning_typ": 171, "pruning_tutori": [171, 180, 251], "sink": 172, "5v": 172, "sd": 172, "card": [172, 178], "8gb": 172, "arm": 172, "64bit": 172, "aarch64": 172, "rpi": 172, "rasbperri": 172, "sdcard": 172, "start_x": 172, "128m": 172, "gpu_mem": 172, "reboot": 172, "apt": [172, 183, 248], "libcamera": 172, "36fp": 172, "30fp": 172, "framer": 172, "picam2": 172, "sensor": 172, "sensor_mod": 172, "create_still_configur": 172, "bgr888": 172, "set_control": 172, "capture_imag": 172, "input_tensor": 172, "input_batch": 172, "qnnpack": 172, "33": [172, 177, 180, 216], "mobilenet_v3_larg": 172, "109": 172, "233": [172, 177], "885": 172, "204": [172, 216], "195": [172, 177], "132": 172, "int8": [172, 206, 256, 267], "prequant": 172, "20fp": 172, "last_log": 172, "frame_count": 172, "ui": [172, 183, 212, 229, 250], "htop": 172, "mug": 172, "allevi": [172, 194], "set_num_thread": 172, "repetit": [173, 216], "six": 173, "maximis": 173, "clipppoloss": 173, "theta_k": 173, "pi_": 173, "lingua": 173, "franca": 173, "sub_batch_s": 173, "deepmind": [173, 181], "interchang": 173, "panel": [173, 183], "transmit": 173, "gymwrapp": 173, "loos": 173, "supplementari": 173, "stringent": 173, "n_step": [173, 175, 177], "mu_": 173, "d_ob": 173, "d_action": 173, "mu": 173, "normalparamextractor": 173, "probabilisticactor": 173, "tanhnorm": 173, "discount": [173, 174, 175], "amort": [173, 175], "datacollector": 173, "multisyncdatacollector": 173, "refil": 173, "replaybuff": 173, "gae": 173, "value_target": 173, "cap": [173, 183], "videorecord": 173, "reinforcement_ppo": [173, 180, 251], "tower": 174, "cart": 174, "pole": 174, "upright": 174, "fork": [174, 248], "classic_control": 174, "42": [174, 177, 216], "action_spac": 174, "observation_spac": 174, "decorrel": 174, "replaymemori": 174, "cyclic": 174, "formul": 174, "r_": 174, "t_0": 174, "r_t": 174, "uncertain": 174, "tempor": 174, "max_a": 174, "univers": 174, "obei": 174, "bellman": 174, "huber": 174, "noisi": [174, 216, 230], "mathcal": 174, "le": [174, 179], "mathrm": 174, "select_act": [174, 175, 177], "eps_start": 174, "eps_end": 174, "eps_decai": 174, "plot_dur": 174, "underneath": [174, 189], "tau": 174, "optimize_model": 174, "s_t": 174, "a_t": 174, "num_episod": [174, 175], "target_net": 174, "reinforcement_q_learn": [174, 180, 251], "calle": [175, 176], "unblock": 175, "idl": [175, 183, 221], "callback": 175, "paus": 175, "update_and_fetch_model": 175, "future_model": 175, "batch_update_s": 175, "batchupdateparameterserv": 175, "curr_update_s": 175, "get_model": 175, "ps_rref": 175, "local_valu": [175, 176], "fut": [175, 177], "setti": 175, "set_result": 175, "rpc_sync": [175, 176, 177], "image_w": 175, "image_h": 175, "one_hot_indic": 175, "random_": 175, "get_worker_info": [175, 177], "543": 175, "num": 175, "affine1": [175, 177], "affine2": [175, 177], "action_scor": [175, 177], "govern": 175, "select_action_batch": 175, "shortli": 175, "run_episod": [175, 177], "agent_rref": [175, 177], "ep_reward": [175, 177], "num_step": 175, "start_step": 175, "from_numpi": [175, 177], "curr_reward": 175, "prob": [175, 177, 184], "saved_log_prob": [175, 177], "rob": 175, "ob_rref": [175, 177], "running_reward": [175, 177], "ob_rank": [175, 177], "ob_info": [175, 177], "observer_nam": [175, 177], "future_act": 175, "pending_st": 175, "select_acion": 175, "ob_id": [175, 177], "log_prob": [175, 177], "stitch": [175, 176], "oberv": [175, 177], "ret": 175, "wait_al": 175, "policy_loss": [175, 177], "passiv": [175, 177], "run_work": [175, 176, 177], "n_episod": 175, "print_log": 175, "init_rpc": [175, 176, 177], "agent_nam": [175, 177], "i_episod": [175, 177], "last_reward": [175, 177], "tlast": [175, 177], "taverag": [175, 177], "shutdown": [175, 176, 177], "tik": 175, "tok": 175, "dist_autograd": [176, 177], "num_gpu": 176, "dropout2d": 176, "next_devic": 176, "caller": 176, "call_method": 176, "remote_method": 176, "arg1": 176, "arg2": 176, "foo_inst": 176, "parameterserv": 176, "input_devic": 176, "intention": [176, 177], "inp": [176, 189, 201, 267], "miscellan": 176, "get_dist_gradi": 176, "get_gradi": 176, "get_param_rref": 176, "cid": 176, "cpu_grad": 176, "k_cpu": 176, "v_cpu": 176, "paramt": 176, "param_rref": [176, 177], "run_parameter_serv": 176, "param_serv": 176, "global_lock": 176, "get_parameter_serv": 176, "parameter_serv": 176, "shut": 176, "offlin": 176, "trainernet": 176, "param_server_rref": 176, "get_global_param_rref": 176, "paramat": 176, "remote_param": [176, 177], "run_training_loop": 176, "nueral": 176, "context_id": [176, 177], "get_accuraci": 176, "correct_sum": 176, "traffic": 176, "listen": 176, "subprocess": [176, 216, 231], "rpc_parameter_serv": 176, "solver": 177, "formatter_class": 177, "argumentdefaultshelpformatt": 177, "log_interv": 177, "report_reward": 177, "_max_episode_step": 177, "finfo": 177, "reward_threshold": 177, "finish_episod": 177, "min_reward": 177, "surpass": 177, "ob": 177, "ctrl": 177, "475": 177, "62": 177, "111": [177, 216, 248], "131": 177, "90": [177, 256], "130": 177, "137": 177, "140": 177, "104": 177, "160": [177, 216, 221], "170": [177, 192], "126": 177, "180": [177, 189, 216], "213": 177, "190": [177, 216], "322": 177, "165": 177, "272": 177, "210": 177, "168": [177, 248], "184": 177, "208": [177, 214], "270": 177, "405": 177, "280": 177, "443": [177, 221], "290": 177, "464": 177, "3163778435275": 177, "embeddingt": 177, "destin": 177, "rnnmodel": 177, "ntoken": 177, "ninp": 177, "nhid": 177, "nlayer": 177, "emb_table_rref": 177, "decoder_rref": 177, "_remote_method": 177, "rremot": 177, "_parameter_rref": 177, "parameter_rref": 177, "run_train": 177, "nindic": 177, "driss": 178, "guessou": 178, "multiheadattent": 178, "flashattent": 178, "fastest": [178, 240], "flash": [178, 256], "andrej": 178, "karpathi": 178, "nanogpt": 178, "causalselfattent": 178, "mine": 178, "166": 178, "616": 178, "726": 178, "amaz": 178, "prof": [178, 221], "export_chrome_trac": 178, "compiled_causal_attention_trac": 178, "concentr": 178, "6090": 178, "49m": 178, "3273": 178, "17m": 178, "commit": [178, 275], "ae3a8d5": 178, "causal_upper_left": 178, "causal_lower_right": 178, "is_caus": [178, 193, 252], "causalbia": 178, "corner": 178, "attn_scor": 178, "sdpa_kernel": [178, 252], "scaled_dot_product_attention_tutori": [178, 180, 251], "il": 179, "est": [179, 183], "peindr": 179, "tableau": 179, "paint": 179, "pourquoi": 179, "pa": 179, "essay": 179, "vin": 179, "delicieux": 179, "delici": 179, "wine": 179, "poet": 179, "romancier": 179, "she": 179, "novelist": 179, "vou": 179, "trop": 179, "maigr": 179, "skinni": 179, "condens": [179, 230], "unfold": 179, "tatoeba": 179, "eng": 179, "someon": 179, "manyth": 179, "anki": 179, "fra": 179, "froid": 179, "giant": 179, "dozen": 179, "trim": [179, 230], "lang": 179, "word2index": 179, "index2word": 179, "word2count": 179, "apostroph": 179, "je": 179, "sui": 179, "noir": 179, "attn_appli": 179, "exhibit": 179, "coher": 179, "grammar": 179, "wander": 179, "freedom": 179, "plot_loss": 179, "judgement": 179, "macbook": 179, "matshow": 179, "iot": 179, "word2vec": 179, "glove": 179, "autoencod": 179, "505": 180, "torch_compile_tutori": [180, 187, 251], "sdpa": [180, 193, 251, 252], "torch_export_tutori": [180, 188, 189, 251], "transformer_building_block": [180, 193, 251], "spatial_transformer_tutori": [180, 181, 251], "visualizing_gradients_tutori": [180, 194, 251], "na": [180, 251], "sphx_glr_intermediate_mnist_train_na": [180, 251], "tensorboard_profiler_tutori": [180, 183, 251], "torch_compile_conv_bn_fus": [180, 186, 251], "torchrec_intro_tutori": [180, 190, 251], "ghassen": 181, "hamrouni": 181, "geometr": 181, "invari": [181, 264], "boil": 181, "affine_grid": 181, "grid_sampl": 181, "speech_recognition_pipeline_tutori": 182, "perfetto": 183, "warmup": [183, 193, 197, 198, 205, 221, 243, 244], "on_trace_readi": [183, 221], "tensorboard_trace_handl": 183, "record_shap": [183, 221], "profile_memori": [183, 221], "dealloc": [183, 231], "torch_tb_profil": 183, "safari": 183, "pytorch_profil": 183, "dropdown": 183, "callstack": 183, "sm": 183, "multiprocessor": 183, "occup": 183, "tooltip": 183, "toolbar": 183, "keyboard": 183, "mous": 183, "resnet18_4work": 183, "76m": 183, "132m": 183, "azur": 183, "torchtbprofil": 183, "memory_demo_1_10": 183, "gpu0": 183, "children": [183, 221], "distributed_bert": 183, "docker": 183, "profiler_tutori": 183, "test_cifar10": 183, "vi": 183, "hub": [183, 206], "kfd": 183, "sys_ptrac": 183, "seccomp": 183, "unconfin": 183, "shm": 183, "8g": 183, "libjpeg": 183, "whl": [183, 187, 190, 256], "rocm5": 183, "scp": 183, "testset": 184, "testload": 184, "plot_classes_pr": 184, "matplotlib_imshow": 184, "one_channel": 184, "unnorm": 184, "npimg": 184, "grei": 184, "fashion_mnist_experiment_1": 184, "make_grid": 184, "datait": 184, "img_grid": 184, "four_fashion_mnist_imag": 184, "pythonwarn": 184, "pkg_resourc": 184, "userwarn": 184, "refresh": [184, 190], "select_n_random": 184, "datapoint": 184, "perm": 184, "randperm": 184, "class_label": 184, "label_img": 184, "thoroughli": 184, "images_to_prob": 184, "preds_tensor": 184, "el": 184, "fig": 184, "figsiz": 184, "arang": 184, "add_subplot": 184, "xtick": 184, "ytick": 184, "set_titl": 184, "1f": 184, "add_scalar": [184, 229], "running_loss": 184, "add_figur": 184, "global_step": [184, 229], "scroll": 184, "test_siz": 184, "class_prob": 184, "class_probs_batch": 184, "test_prob": 184, "test_label": 184, "add_pr_curve_tensorboard": 184, "class_index": 184, "tensorboard_truth": 184, "tensorboard_prob": 184, "add_pr_curv": 184, "poke": 184, "tacotron2_pipeline_tutori": 185, "horac": 186, "clariti": 186, "batch_norm": [186, 221], "conv_bn_pattern": 186, "conv_bn_replac": 186, "conv_weight": 186, "out_channel": 186, "in_channel": 186, "kernel_h": [186, 256], "kernel_w": [186, 256], "conv_bia": 186, "bn_mean": 186, "bn_var": 186, "bn_weight": 186, "bn_bia": 186, "num_featur": 186, "simplif": 186, "example_input": [186, 206, 270], "conclus": 186, "william": [187, 189, 243], "devel": 187, "elsewher": 187, "torchinductor": [187, 231, 239, 257, 258, 267], "torchtriton": 187, "cu117": 187, "opt_mod": 187, "complex_funct": 187, "complex_conjug": 187, "outer_funct": 187, "_orig_": 187, "wrote": [187, 192], "dashboard": [187, 229], "struggl": 187, "fn1": 187, "fn2": 187, "f2": 187, "disallow": 187, "zhengxu": 189, "angela": [189, 235, 244], "pian": 189, "pawakapan": 189, "synonym": 189, "dynamic_shap": [189, 245], "graph_signatur": 189, "range_constraint": 189, "byte": [189, 245, 255], "stronger": [189, 245], "safeti": [189, 245], "cond": 189, "predic": 189, "true_fn": 189, "false_fn": 189, "while_loop": 189, "associative_scan": 189, "entail": 189, "adher": 189, "x0": [189, 192, 267], "x1": [189, 192, 267], "s0": 189, "s1": 189, "x2": 189, "x3": 189, "s3": 189, "s5": 189, "obviou": [189, 216], "_log": [189, 246], "set_log": 189, "spit": 189, "unnecessari": [189, 193, 234, 248], "create_symbol": 189, "int_oo": 189, "2841": 189, "runtime_assert": 189, "ncreate_symbol": 189, "nruntime_assert": 189, "dynamic_shapes_tutori": 189, "_subclass": [189, 245], "fake_impl": 189, "845": 189, "infer_s": [189, 230], "torchdynamo_extended_debug_guard_ad": 189, "_meta_registr": 189, "2127": 189, "meta_mm": 189, "marker": 189, "attract": 189, "friction": 189, "believ": [189, 264], "stanc": [189, 243], "constraintviol": 189, "unrel": [189, 243], "univari": 189, "diverg": [189, 216, 263, 265], "tolist": 189, "unbind": 189, "unback": 189, "nomenclatur": 189, "absenc": [189, 201, 214], "u0": 189, "unhint": 189, "is_compil": 189, "invas": 189, "bypass": [189, 267], "offend": 189, "smarter": 189, "refin": 189, "prevail": 189, "prohibit": 189, "_check_is_s": 189, "guard_size_oblivi": 189, "starter": 189, "guardondatadependentsymnod": 189, "_schema": 189, "is_mut": 189, "export_for_train": 189, "run_decomposit": 189, "mutabl": 189, "conv1d": [189, 231], "cond_pred": 189, "tensorrt": 189, "pt2_path": 189, "aoti_compile_and_packag": [189, 244], "compiler_aot_inductor": 189, "aoti_compil": 189, "aoti_load_packag": [189, 244], "cu121": [190, 256], "fbgemm_gpu": 190, "torchmetr": 190, "cardin": 190, "relationship": 190, "hash": 190, "conjunct": [190, 231, 254, 255], "ctr": 190, "dlrm": [190, 231], "embedding_collect": 190, "embedding_bag_collect": 190, "vast": [190, 266], "collis": [190, 230], "80g": 190, "embeddingcollect": 190, "jaggedtensor": 190, "keyedjaggedtensor": 190, "keyedtensor": 190, "product_t": 190, "user_t": 190, "id_list_featur": 190, "id_score_list_featur": 190, "__str__": 190, "id_list_feature_offset": 190, "q1": 190, "product_jt": 190, "user_jt": 190, "q2": 190, "reread": 190, "to_dict": 190, "pat": 190, "grasp": [190, 195], "scarc": [190, 199], "hbm": 190, "gb": [190, 193, 256], "shardedembeddingbagcollect": 190, "incredibli": 190, "ton": 190, "everytim": 190, "input_dist": 190, "tbe": 190, "output_dist": 190, "twpooledembeddingshard": 190, "kjt": 190, "canon": 190, "dmp": 190, "hyperoptim": 190, "combinedoptim": 190, "keyedoptim": 190, "in_backward_optimizer_filt": 190, "fused_optim": 190, "fused_param": 190, "apply_optimizer_in_backward": 190, "criteo": 190, "1tb": 190, "penn": 192, "fudan": 192, "databas": [192, 239, 240], "pedestrian": 192, "keypoint": 192, "tv_tensor": 192, "boundingbox": 192, "y0": 192, "image_id": 192, "iscrowd": 192, "pycocotool": 192, "gautamchitni": 192, "git": [192, 256], "cocoapi": 192, "cocodataset": 192, "pythonapi": 192, "get_height_and_width": 192, "ci": 192, "upenn": 192, "edu": 192, "jshi": 192, "ped_html": 192, "pennfudanp": 192, "pedmask": 192, "fudanped00001_mask": 192, "fudanped00002_mask": 192, "fudanped00003_mask": 192, "fudanped00004_mask": 192, "pngimag": 192, "fudanped00001": 192, "fudanped00002": 192, "fudanped00003": 192, "fudanped00004": 192, "tvtensor": 192, "zoo": 192, "fasterrcnn": 192, "1280": [192, 256], "rpn": 192, "anchor": 192, "featmap_nam": 192, "rcnn": 192, "train2017": 192, "mikayla": [193, 220, 228], "gawarecki": [193, 220, 228], "flexattent": 193, "jag": [193, 268], "njt": 193, "famili": [193, 248], "xformer": 193, "torchtun": 193, "rag": [193, 268], "ux": [193, 268, 270], "key_padding_mask": 193, "qk": 193, "premis": 193, "rmsnorm": 193, "sinusoid": 193, "rotari": [193, 252], "alibi": 193, "threefold": 193, "query_padding_mask": 193, "mha": [193, 264], "nestedtensor": [193, 251, 268, 272, 275], "cleanli": [193, 197, 198, 205, 241, 246], "zipf": [193, 268], "pariti": 193, "attn_mask": 193, "padded_tim": 193, "03454": 193, "padded_peak_memori": 193, "nested_tim": 193, "00612": 193, "nested_peak_memori": 193, "padded_bw_tim": 193, "09337": 193, "padded_bw_peak_mem": 193, "nested_bw_tim": 193, "01452": 193, "nested_bw_peak_mem": 193, "144": 193, "out_proj": 193, "000244140625": 193, "packed_proj": 193, "001556396484375": 193, "001953125": 193, "causal": 193, "breviti": [193, 228, 263], "trust": 193, "ragged": 193, "e_q": 193, "e_tot": 193, "05x": 193, "swish": 193, "08x": 193, "kv": [193, 252], "lucidrain": 193, "navit": 193, "visiontransform": 193, "norm_lay": 194, "batchnorm1d": 194, "register_full_backward_hook": 194, "grads_bn": 194, "grads_nobn": 194, "qualit": 194, "num_lay": [194, 215], "hook_forward": 194, "covari": 194, "newcom": 195, "deep_learning_60min_blitz": 195, "lazo": [197, 198, 205, 241, 246], "get_device_cap": 197, "benchmark_torch_function_in_microsecond": 197, "blocked_autorang": [197, 216], "1e6": [197, 249], "eager_runtim": 197, "compiled_runtim": 197, "747": 197, "2437149845064u": 197, "392": 197, "07384741178u": 197, "linearlr": 198, "peek": 198, "compiling_optimizer_lr_schedul": [198, 238, 251], "luca": [199, 200], "pasqualin": [199, 200], "iri": [199, 200, 202], "zhang": [199, 200, 202], "rodrigo": [199, 200], "kumpera": [199, 200], "chien": [199, 200, 252], "chin": [199, 200, 252], "async_sav": 199, "checkpoint_size_per_rank": 199, "number_of_rank": 199, "pageabl": 199, "get_state_dict": [199, 200], "set_state_dict": [199, 200], "appstat": [199, 200], "protocol": [199, 200], "load_stat_dict": [199, 200], "fqn": [199, 200], "sharded_state_dict": [199, 200], "optim_state_dict": [199, 200], "run_fsdp_checkpoint_save_exampl": [199, 200], "checkpoint_futur": 199, "checkpoint_id": [199, 200], "_step": 199, "attack": 199, "filesystemwrit": 199, "storagewrit": 199, "cached_state_dict": 199, "cache_staged_state_dict": 199, "storage_writ": 199, "adddition": 200, "run_fsdp_checkpoint_load_exampl": 200, "run_checkpoint_load_exampl": 200, "format_util": 200, "torch_to_dcp": 200, "dcp_to_torch": 200, "dcp_to_torch_sav": 200, "torch_save_to_dcp": 200, "torch_save_checkpoint_dir": 200, "torch_save_checkpoint": 200, "_new": 200, "anshul": 201, "sinha": 201, "distributedtensor": 201, "interoper": 201, "bridg": 201, "mlpmodul": 201, "comm_mod": 201, "generate_comm_debug_tracing_t": 201, "noise_level": 201, "log_comm_debug_tracing_table_to_fil": 201, "file_nam": [201, 245], "transformer_operation_log": 201, "generate_json_dump": 201, "c10d_function": 201, "comm_mode_features_exampl": 201, "effortlessli": 202, "homogen": 202, "num_node_devic": 202, "shard_rank_list": 202, "shard_group": 202, "current_shard_group": 202, "current_replicate_group": 202, "shard_factor": 202, "replicate_group_rank": 202, "replicate_group": 202, "2d_setup": 202, "mesh_dim_nam": [202, 252], "thru": 202, "get_group": 202, "mesh_dim": 202, "2d_setup_with_device_mesh": 202, "meshshap": 202, "dp_replic": 202, "dp_shard": 202, "mesh_3d": 202, "hsdp_mesh": 202, "tp_group": 202, "_foreach": 205, "horizton": 205, "mitig": [206, 231], "autotun": [206, 231, 239, 240, 242, 256, 275], "mx": 206, "hpu": [206, 271], "inc_target_devic": 206, "gaudi": [206, 271], "neural_compressor": 206, "fp8config": 206, "qconfig": 206, "fp8_config": 206, "e4m3": 206, "calibration_data": 206, "input_data": 206, "theblok": 206, "7b": 206, "gptq": 206, "model_name_or_path": 206, "torch_dtyp": 206, "hpu_model": 206, "safetensor": 206, "qd": 206, "w8a8": 206, "staticquantconfig": 206, "userfloatmodel": 206, "exported_model": [206, 270], "quant_config": 206, "prepared_model": [206, 270], "run_fn": 206, "q_model": 206, "opt_model": 206, "rtnconfig": 206, "tuningconfig": 206, "eval_fn": 206, "tune_config": 206, "config_set": 206, "use_sym": 206, "group_siz": 206, "tolerable_loss": 206, "max_trial": 206, "gui": [212, 250], "abnorm": 212, "emit_itt": 212, "ex": [212, 258], "8080": 212, "path_of_launch": 212, "openmp": 212, "iteration_n": 212, "range_push": 212, "range_pop": 212, "reorder": [212, 231], "oneapi": 212, "onednn": [212, 267], "brown": 212, "percerntag": 212, "jitter": [212, 216], "enrich": 212, "ittsampl": 212, "292820": 212, "unmark": 212, "244": 212, "iteration_": 212, "basefold": 212, "bash_sourc": 212, "gradcam": 214, "bytesio": 214, "resnet18_weight": 214, "imagenet1k_v1": 214, "freepik": 214, "puppi": 214, "dog_58409": 214, "6024": 214, "center_crop": 214, "centercrop": 214, "283": 214, "occlus": 214, "labrador": 214, "sliding_window_shap": 214, "occlud": 214, "attribution_dog": 214, "persian": 214, "attribution_cat": 214, "deconvolut": 214, "guidedbackprop": 214, "deeplift": 214, "gradientshap": 214, "forward_func": 214, "pictori": 214, "textual": 214, "vis_typ": 214, "heat_map": 214, "original_imag": 214, "vis_sign": 214, "distractor": 214, "show_colorbar": 214, "visualize_text": 214, "imdb_torchtext_interpret": 214, "gilbert": 214, "tanner": 214, "gilberttann": 214, "captum_recip": [214, 219, 227, 251], "carilli": 215, "ordinarili": 215, "ture": 215, "kepler": 215, "maxwel": 215, "pascal": 215, "modest": 215, "in_siz": 215, "out_siz": 215, "greatest": 215, "underflow": 215, "scaler": 215, "unscal": 215, "unscale_": 215, "rough": 215, "coalesc": [215, 263], "binary_cross_entropy_with_logit": 215, "suspect": 215, "docstr": 215, "subregion": 215, "backtrac": 215, "torch_show_cpp_stacktrac": 215, "amp_recip": [215, 219, 227, 251], "invalid": [216, 231, 264, 265, 266], "tediou": 216, "mistak": 216, "mul_sum": 216, "0x7fb10400d0f0": 216, "batched_dot_mul_sum": 216, "379": 216, "0x7fb103d67048": 216, "batched_dot_bmm": 216, "num_thread": [216, 230, 267], "sub_label": 216, "0x7fb103d54080": 216, "118": 216, "0x7fb16935d2e8": 216, "2775": 216, "0x7fb10400d080": 216, "232": 216, "181": 216, "cubla": 216, "min_run_tim": [216, 230, 256], "median": [216, 230, 256], "162": 216, "274": 216, "748": 216, "432": [216, 221], "22657": 216, "11899": 216, "609": 216, "23098": 216, "27246": 216, "267073": 216, "118823": 216, "189": 216, "849": 216, "2782": 216, "7471": 216, "11874": 216, "173": 216, "7264": 216, "27824": 216, "100060": 216, "121499": 216, "188": 216, "2773": 216, "6111": 216, "12833": 216, "6295": 216, "27062": 216, "71804": 216, "120365": 216, "103": 216, "2804": 216, "6764": 216, "11871": 216, "6640": 216, "27592": 216, "73003": 216, "120083": 216, "callgrindstat": [216, 230], "trip": [216, 230], "batched_dot": 216, "36000": 216, "40000": 216, "stark": 216, "fuzzer": 216, "10000000": 216, "k0": 216, "k1": 216, "discontigu": 216, "725": 216, "383": 216, "1468": 216, "187": 216, "5039": 216, "2140": 216, "1296": 216, "41000": 216, "1598": 216, "310": 216, "519": 216, "763": 216, "141": 216, "1082": 216, "473": 216, "16384": 216, "12642115": 216, "8192": [216, 252], "4800": 216, "20400": 216, "110000": 216, "400000": 216, "493": 216, "1100": [216, 230], "2440": [216, 256], "870": 216, "2030": 216, "495": 216, "23600": 216, "24000": [216, 230], "62374": 216, "90000": 216, "100000": 216, "240372": 216, "69": [216, 256], "16000": 216, "40156": 216, "2670": 216, "opac": 216, "complementari": 216, "insensit": 216, "environment": 216, "cpp_lib": 216, "cpp_sourc": 216, "batched_dot_src": 216, "extra_cflag": 216, "extra_include_path": 216, "getenv": 216, "batched_dot_mul_sum_v0": 216, "batched_dot_mul_sum_v1": 216, "module_import_str": 216, "67631": 216, "importlib": 216, "spec_from_file_loc": 216, "repr": 216, "module_from_spec": 216, "exec_modul": 216, "textwrap": 216, "pretty_print": 216, "t_baselin": 216, "stats_v0": 216, "collect_callgrind": 216, "stats_v1": 216, "as_standard": [216, 230], "symbol": [216, 230, 245], "denois": 216, "ing": 216, "wrap_pybind_function_impl_": 216, "set_printopt": 216, "linewidth": 216, "valgrind_wrapp": [216, 230], "timer_interfac": [216, 230], "0x7fb0f06e7630": 216, "2392671": 216, "4367": 216, "rel_with_deb_info": [216, 230], "0x7fb10400d208": 216, "2378978": 216, "functioncount": [216, 230], "0x7fb1000ab358": 216, "0x000000000020d9e0": 216, "0x000000000020db10": 216, "integer_sequ": 216, "0ul": 216, "1ul": 216, "5200": 216, "undefinedtensorimpl": 216, "reset_": 216, "5935": 216, "0x000000000022c0e0": 216, "13693": 216, "impos": [217, 228], "changing_default_devic": [217, 227, 251], "subsidiari": [218, 232, 233], "neighbor": 218, "sharp": 218, "blurri": 218, "defining_a_neural_network": [218, 219, 227, 251], "what_is_state_dict": [219, 227, 233, 251], "saving_and_loading_models_for_infer": 219, "custom_dataset_transforms_load": 219, "dynamic_quant": 219, "warmstarting_model_using_parameters_from_a_different_model": [219, 227, 232, 251], "zeroing_out_gradi": [219, 227, 234, 251], "mobile_perf": 219, "regional_compil": [219, 236, 238, 251], "syntaxerror": [219, 227, 251], "undesir": 220, "unload": 220, "upfront": [220, 267], "somemodul": 220, "overwritten": [220, 234, 248], "param_in_model": 220, "param_in_state_dict": 220, "__future__": [220, 228], "set_swap_module_params_on_convers": [220, 228], "swap_tensor": [220, 227, 251], "module_load_state_dict_tip": [220, 227, 251], "shivam": 221, "raikundalia": 221, "profileract": 221, "model_infer": 221, "_fork": 221, "avg": 221, "509m": 221, "503m": 221, "931m": 221, "597m": 221, "700m": 221, "585m": 221, "_convolut": 221, "450m": 221, "mkldnn_convolut": 221, "838m": 221, "114m": 221, "556m": 221, "211": 221, "693m": 221, "734": 221, "_batch_norm_impl_index": 221, "482m": 221, "724": 221, "100u": 221, "native_batch_norm": 221, "229m": 221, "109m": 221, "705": 221, "450u": 221, "332": 221, "631m": 221, "286u": 221, "668m": 221, "292m": 221, "988u": 221, "549m": 221, "dnn": 221, "self_cpu_time_tot": 221, "group_by_input_shap": 221, "008m": 221, "956m": 221, "909m": 221, "834m": 221, "332m": 221, "303m": 221, "273m": 221, "233m": 221, "751m": 221, "occurr": 221, "666m": 221, "484m": 221, "_convolution_nogroup": 221, "thnn_conv2d": 221, "thnn_conv2d_forward": 221, "im2col_kernel": 221, "844m": 221, "sgemm_32x32x32_nn": 221, "206m": 221, "sgemm_32x32x32_nn_vec": 221, "093m": 221, "015m": 221, "567m": 221, "871m": 221, "560u": 221, "convolution_overrid": 221, "gen_conv": 221, "216u": 221, "640u": 221, "632u": 221, "conv_reord": 221, "880u": 221, "448u": 221, "712": 221, "486m": 221, "max_pool2d_with_indic": 221, "kb": 221, "empty_strid": [221, 257], "572": 221, "resize_": 221, "480": 221, "masked_select": 221, "112": [221, 245, 248], "064m": 221, "viewer": 221, "439": 221, "_conv_forward": 221, "1051": 221, "_call_impl": 221, "016m": 221, "659m": 221, "skip_first": 221, "step_num": 221, "profiler_recip": [221, 227, 251], "reasoning_about_shap": [222, 227, 251], "008": 227, "tensorboard_with_pytorch": [227, 229, 251], "timer_quick_start": [227, 230, 251], "tuning_guid": [227, 231, 251], "hereaft": 228, "__class__": 228, "__dict__": [228, 270], "__slots__": 228, "pertin": 228, "glanc": [228, 263], "nasti": 228, "__torch_dispatch__": [228, 245], "new_param": 228, "myquantizedlinearweight": 228, "payload": 228, "__setattr__": 228, "module_load": 228, "__torch_function__": 228, "param_kei": 228, "histogram": 229, "scalar_valu": 229, "walltim": 229, "pend": 229, "anymor": [229, 267], "tfevent": 229, "OR": 229, "0x7f1929a38ed0": 230, "iqr": 230, "424": 230, "cpp_timer": 230, "0x7f192b019ed0": 230, "unsurprisingli": 230, "0x7f1929a35850": 230, "563600": 230, "tensormethod": 230, "ab_ref": 230, "libtorch_cpu": 230, "inclusive_stat": 230, "inclus": 230, "0x7f192a6dfd90": 230, "47264": 230, "_int_fre": 230, "25963": 230, "_int_malloc": 230, "19900": 230, "tensorit": 230, "tensoriteratorconfig": 230, "18000": 230, "__tls_get_addr": 230, "13500": 230, "malloc": [230, 231, 248], "11300": 230, "smallvector": 230, "10345": 230, "_int_memalign": 230, "9200": 230, "iteratorbas": 230, "get_strid": 230, "173472": 230, "group_by_fil": 230, "fn_name": 230, "fn_dir": 230, "fn_file": 230, "0x7f192995d750": 230, "118200": 230, "tensoriter": 230, "65000": 230, "20900": 230, "15900": 230, "15100": 230, "cpualloc": 230, "12500": 230, "352327": 230, "a0": 230, "b0": 230, "a1": 230, "a127": 230, "broadcasting_stat": 230, "pickleabl": 230, "extract_fn_nam": 230, "17600": 230, "tensoriteratorbas": 230, "compute_strid": 230, "12700": 230, "allocate_or_resize_output": 230, "10200": 230, "smallvectorimpl": 230, "7400": 230, "6200": 230, "invert_perm": 230, "6064": 230, "5100": 230, "reorder_dimens": 230, "4300": 230, "compatible_strid": 230, "check_tensor_options_and_extract_memory_format": 230, "__memcmp_avx2_movb": 230, "empty_cpu": 230, "1300": 230, "2400": 230, "6100": 230, "compute_fast_setup_typ": 230, "22600": 230, "fast_set_up": 230, "58091": 230, "580": 230, "0x7f19299544d0": 230, "compute_shap": 230, "2300": 230, "coalesce_dimens": 230, "promin": 230, "__add__": 230, "__sub__": 230, "dice": 230, "szymon": 231, "migacz": 231, "conv3d": 231, "set_to_non": 231, "elementwis": [231, 246], "upstream": 231, "anomali": 231, "detect_anomali": 231, "set_detect_anomali": 231, "emit_nvtx": 231, "nth": 231, "cpunodebind": 231, "membind": 231, "pytorch_script": 231, "omp_num_thread": [231, 248], "thrash": 231, "gomp_cpu_affin": 231, "omp_proc_bind": 231, "processor": [231, 248], "omp_schedul": 231, "libgomp": [231, 248], "sleep": 231, "jemalloc": [231, 248], "tcmalloc": [231, 248], "emphas": 231, "fragment": [231, 235, 256], "ccl": 231, "alltoal": [231, 252], "set_float32_matmul_precis": 231, "slide": 231, "judgment": 234, "sayak": 235, "paul": 235, "charl": 235, "bensimon": 235, "aot_inductor": 235, "package_constants_in_so": 235, "fullest": 235, "regional_aot": [235, 238, 251], "animesh": 236, "jain": 236, "startup": 236, "inline_inbuilt_nn_modul": 236, "graph_cod": 236, "strateg": 236, "020": 238, "horizont": [238, 250, 251], "foreach_map": [238, 250, 251], "torch_compiler_set_stance_tutori": [238, 243, 251], "torch_compile_torch_function_mod": [238, 241, 251], "torch_compile_user_defined_triton_kernel_tutori": [238, 242, 251], "torch_export_aoti_python": [238, 244, 251], "oguz": [239, 240, 242], "ulgen": [239, 240, 242], "sam": [239, 245, 256], "larsen": 239, "fxgraphcach": [239, 240], "aotautogradcach": [239, 240], "redi": [239, 240], "usernam": 239, "aotautograd": [239, 240], "fxgraph": 239, "torchinductor_": 239, "torchinductor_myusernam": [239, 240], "triton_cache_dir": 239, "torchinductor_redis_host": 239, "torchinductor_redis_port": 239, "6379": 239, "cachebench": 240, "onward": 240, "save_cache_artifact": 240, "load_cache_artifact": 240, "artifact_byt": 240, "cache_info": 240, "pgo": 240, "tritoncach": 240, "cubin": [240, 244, 257], "inductorcach": 240, "autotuningcach": 240, "torchinductor_cache_dir": 240, "basetorchfunctionmod": 241, "flopcountermod": 242, "wrap_triton": 242, "footgun": 242, "register_kernel": 242, "register_flop_formula": 242, "flop_count": 242, "mysin": 242, "reappli": 243, "force_eag": 243, "eager_on_recompil": 243, "fail_on_recompil": 243, "torch.export": 244, "torch._inductor.aoti_compile_and_packag": 244, "aot_compil": 244, "torch._export.aoti_load_packag": 244, "ankith": [244, 245], "gunap": [244, 245], "bao": [244, 257], "_export": 244, "aot_load": 244, "max_autotun": 244, "runner": 244, "archive_format": 244, "10088": 244, "cagzt6akdaczvxwtbvqe34otfe5jlorktbqlojbzqjqvbfsjlge4": 244, "17160": 244, "c6oytfjmt5w4c7onvtm6fray7clirxt7q5xjbwx3hdydclmwoujz": 244, "16616": 244, "c7ydp7nocyz323hij4tmlf2kcedmwlyg6r57gaqzcsy3huneamu6": 244, "17776": 244, "cyqdf46ordevqhiddvpdpp3uzwatfbzdpl3auj2nx23uxvplnne2": 244, "10856": 244, "cpzfebfgrusqslui7fxsuoo4tvwulmrxirc5tmrpa4mvrbdno7kn": 244, "14608": 244, "c5ukeoz5wmaszd7vczdz2qhtt6n7tdbl3b6wuy4rb2se24fjwfoi": 244, "11376": 244, "csu3nstcp56tsjfycygaqsewpu64l5s6zavvz7537cm4s4cv2k3r": 244, "10984": 244, "cp76lez4glmgq7gedf2u25zvvv6rksv5lav4q22dibd2zicbgwj3": 244, "14736": 244, "c2bb5p6tnwz4elgujqelsrp3unvkgsyiv7xqxmpvuxcm4jfl7pc2": 244, "c6eopmb2b4ngodwsayae4r5q6ni3jlfogfbdk3ypg56tgpzhubfi": 244, "11624": 244, "chmwe6lvoekzfowdbiizitm3haiiuad5kdm6sd2m6mv6dkn2zk32": 244, "15632": 244, "c3jop5g344hj3ztsu4qm6ibxyaaerlhkzh2e6emak23rxfje6jam": 244, "25472": 244, "chaiixybeiuuitm2nmqnxzijzwgnn2n7uuss4qmsupgblfh3h5hk": 244, "139389": 244, "cvk6qzuybruhwxtfblzxiov3rlrziv5fkqc4mdhbmantfu3lmd6t": 244, "cvk6qzuybruhwxtfblzxiov3rlrziv5fkqc4mdhbmantfu3lmd6t_metadata": 244, "47195424": 244, "47523148": 244, "jordi": 245, "ramon": 245, "marco": 245, "carranza": 245, "mvit": 245, "whisper": 245, "blip": 245, "sam2": 245, "timm": 245, "multiscal": 245, "kinet": 245, "mvit_v1_b_weight": 245, "mvit_v1_b": 245, "224x224x3": 245, "input_fram": 245, "num_clip": 245, "print_exc": 245, "batch_dim": 245, "asr": 245, "transcrib": 245, "spoken": 245, "680k": 245, "whisperprocessor": 245, "whisperforconditionalgener": 245, "input_featur": 245, "decoder_input_id": 245, "decoder_start_token_id": 245, "internaltorchdynamoerror": 245, "attributeerror": 245, "dynamiccach": 245, "key_cach": 245, "non_strict": 245, "proxytensor": 245, "gameplai": 245, "gamer": 245, "salesforc": 245, "blip_decod": 245, "384": 245, "caption_input": 245, "model_url": 245, "googleapi": 245, "sfr": 245, "model_base_capfilt_larg": 245, "exportdb": 245, "bos_token_id": 245, "anaconda3": 245, "functional_tensor": 245, "545": 245, "outs_unwrap": 245, "_op_dk": 245, "sam2imagepredictor": 245, "_predict": 245, "unnorm_coord": 245, "unnorm_box": 245, "mask_input": 245, "multimask_output": 245, "return_logit": 245, "image_predict": 245, "predictor": 245, "sam2_image_predictor": 245, "359": 245, "valueerror": 245, "exporthelp": 245, "model_to_export": 245, "aoti": 245, "preload": 248, "omp": [248, 267], "tunabl": 248, "taskset": 248, "uniform": 248, "uma": 248, "lscpu": 248, "9480": 248, "223": 248, "vendor": 248, "genuineintel": 248, "143": 248, "node0": 248, "167": 248, "node1": 248, "cento": 248, "yum": 248, "libiomp": 248, "perftool": 248, "gperftool": 248, "libjemalloc2": 248, "ninstanc": 248, "ncore": 248, "program_arg": 248, "iomp": 248, "core_id": 248, "dafault": 248, "ncores_per_inst": 248, "libtcmalloc": 248, "preliminarili": 248, "deepspe": 249, "marian": 249, "oftentim": 249, "exp_avg": 249, "exp_avg_sq": 249, "claus": 249, "print_peak_memori": 249, "max_memory_alloc": [249, 256], "use_zero": 249, "optimizer_class": 249, "992": 249, "1361": 249, "3453": 249, "6123046875": 249, "1697": 249, "itt": 250, "vtune": 250, "torchcompil": 250, "run_cpu": 250, "compressor": 250, "tensorpip": 250, "dcp": 250, "commdebugmod": 250, "807": 251, "galleri": 251, "torchao": [251, 272], "unstable_sourc": 251, "gpu_quantization_torchao_tutori": [251, 256, 272], "advanced_sourc": 251, "maskedtensor": [251, 272, 275], "maskedtensor_adagrad": [251, 263, 272], "maskedtensor_overview": [251, 264, 265, 266, 272], "recipes_sourc": 251, "vmap_recip": [251, 272, 274], "maskedtensor_advanced_semant": [251, 264, 272], "maskedtensor_spars": [251, 266, 272], "gpu_direct_storag": [251, 255, 272], "llama3": 252, "freq_ci": 252, "context_parallel": 252, "buffer_seq_dim": 252, "miscalcul": 252, "set_rotate_method": 252, "sdpbackend": 252, "sdpa_exampl": 252, "nhead": 252, "qkv_len": 252, "flash_attent": 252, "cudnn_attent": 252, "qkv": 252, "cp_sdpa_exampl": 252, "_attent": 252, "context_parallel_unshard": 252, "context_parallel_sdpa_exampl": 252, "mesh_shap": 252, "cp_qkv": 252, "cp_out": 252, "junji": 254, "impedi": 254, "starvat": 254, "deadlock": 254, "indefinit": 254, "diagnost": 254, "flight_record": 254, "torch_nccl_trace_buffer_s": 254, "torch_nccl_dump_on_timeout": 254, "torch_fr_dump_temp_fil": 254, "nccl_trace_rank_": 254, "torch_nccl_trace_cpp_stack": 254, "torch_symbolize_mod": 254, "torch_nccl_enable_tim": 254, "dladdr": 254, "addr2lin": 254, "debuginfowrit": 254, "registerwrit": 254, "_distributed_c10d": 254, "_dump_nccl_trac": 254, "includecollect": 254, "includestacktrac": 254, "onlyact": 254, "pg_config": 254, "default_pg": 254, "pg_statu": 254, "last_enqueued_collect": 254, "last_started_collect": 254, "last_completed_collect": 254, "test_short_pickl": 254, "test_c10d_nccl": 254, "3647": 254, "spawn_main": 254, "116": 254, "record_id": 254, "pg_id": 254, "collective_seq_id": 254, "p2p_seq_id": 254, "op_id": 254, "profiling_nam": 254, "time_created_n": 254, "1724779239936775119": 254, "input_s": 254, "input_dtyp": 254, "time_discovered_started_n": 254, "time_discovered_completed_n": 254, "1724779239975811724": 254, "retir": 254, "timeout_m": 254, "600000": 254, "is_p2p": 254, "fr_trace": 254, "use_distribut": 254, "torchfrtrac": 254, "culprit": 254, "recod": 254, "torch_nccl_debug_info_temp_fil": 254, "trace_": 254, "trace_0": 254, "trace_1": 254, "bounc": 255, "gd": 255, "cufil": 255, "4kb": 255, "storage_align": 255, "gdsfile": 255, "skip_data": 255, "faketensormod": 255, "gds_register_buff": 255, "cufilebufregist": 255, "save_storag": 255, "cufilewrit": 255, "load_storag": 255, "cufileread": 255, "hdcharl": 256, "pg509": 256, "330": 256, "myenv": 256, "facebookresearch": 256, "vit_h": 256, "dl": 256, "fbaipublicfil": 256, "segment_anyth": 256, "sam_vit_h_4b8939": 256, "sam_checkpoint_base_path": 256, "quant_api": 256, "quantize_": 256, "int8dynamicactivationint8weightconfig": 256, "unwrap_tensor_subclass": 256, "torch_version_at_least_2_5": 256, "sam_model_registri": 256, "model_typ": [256, 270], "batchsiz": 256, "only_one_block": 256, "reset_peak_memory_stat": 256, "adaptive_autorang": 256, "max_run_tim": 256, "1e3": 256, "1e9": 256, "get_sam_model": 256, "image_encod": 256, "fp32_re": 256, "186": 256, "16m": 256, "33gb": 256, "85m": 256, "instant": 256, "protect": 256, "bf16_re": 256, "bf16": [256, 267], "43m": 256, "17gb": 256, "51m": 256, "7x": 256, "model_c": 256, "comp_r": 256, "95m": 256, "24gb": 256, "65536x1280": 256, "1280x5120": 256, "triton_mm_124": 256, "6668": 256, "acc_typ": 256, "tl": 256, "allow_tf32": 256, "block_k": 256, "block_m": 256, "block_n": 256, "even_k": 256, "group_m": 256, "use_fast_accum": 256, "num_warp": 256, "triton_mm_122": 256, "6935": 256, "triton_mm_118": 256, "7212": 256, "triton_mm_117": 256, "7508": 256, "triton_mm_121": 256, "8932": 256, "0202": 256, "triton_mm_119": 256, "0437": 256, "triton_mm_114": 256, "0765": 256, "triton_mm_113": 256, "1369": [256, 263], "triton_mm_115": 256, "singleprocess": 256, "9862": 256, "8160": 256, "65536x5120": 256, "5120x1280": 256, "5120": 256, "triton_mm_143": 256, "5245": 256, "5541": 256, "triton_mm_136": 256, "8092": 256, "triton_mm_142": 256, "triton_mm_140": 256, "8553": 256, "triton_mm_138": 256, "9024": 256, "triton_mm_137": 256, "9208": 256, "triton_mm_141": 256, "triton_mm_144": 256, "0550": 256, "triton_mm_133": 256, "1860": 256, "0828": 256, "0003": 256, "78400x1280": 256, "1280x1280": 256, "triton_mm_98": 256, "7980": 256, "triton_mm_105": 256, "8154": 256, "triton_mm_103": 256, "8216": 256, "triton_mm_99": 256, "8277": 256, "triton_mm_102": 256, "8820": 256, "triton_mm_95": 256, "8922": 256, "triton_mm_94": 256, "triton_mm_100": 256, "9209": 256, "triton_mm_96": 256, "9219": 256, "9598": 256, "9704": 256, "1280x3840": 256, "triton_mm_9": 256, "3357": 256, "triton_mm_16": 256, "3787": 256, "triton_mm_14": 256, "4022": 256, "triton_mm_10": 256, "4176": 256, "triton_mm_13": 256, "5845": 256, "6920": 256, "triton_mm_11": 256, "6941": 256, "triton_mm_6": 256, "8149": 256, "triton_mm_5": 256, "8303": 256, "triton_mm_7": 256, "8712": 256, "9285": 256, "6400x196x80": 256, "6400x80x196": 256, "512000": 256, "15680": 256, "triton_bmm_29": 256, "8278": 256, "triton_bmm_34": 256, "9395": 256, "triton_bmm_35": 256, "9558": 256, "triton_bmm_28": 256, "9610": 256, "triton_bmm_33": 256, "9651": 256, "triton_bmm_25": 256, "0029": 256, "triton_bmm_23": 256, "0111": 256, "triton_bmm_31": 256, "0244": 256, "triton_bmm_27": 256, "0419": 256, "triton_bmm_32": 256, "0593": 256, "8273": 256, "14x89600x80": 256, "14x80x16": 256, "7168000": 256, "triton_bmm_53": 256, "4690": 256, "triton_bmm_39": 256, "4710": 256, "4803": 256, "triton_bmm_42": 256, "triton_bmm_48": 256, "triton_bmm_52": 256, "4905": 256, "triton_bmm_45": 256, "4915": 256, "triton_bmm_41": 256, "5038": 256, "triton_bmm_40": 256, "5151": 256, "triton_bmm_47": 256, "5253": 256, "5756": 256, "14x80x14": 256, "1120": 256, "1152": 256, "triton_bmm_55": 256, "5437": 256, "triton_bmm_58": 256, "triton_bmm_64": 256, "triton_bmm_69": 256, "5448": 256, "triton_bmm_61": 256, "5571": 256, "triton_bmm_68": 256, "triton_bmm_57": 256, "5724": 256, "triton_bmm_56": 256, "6052": 256, "triton_bmm_63": 256, "6420": 256, "triton_bmm_62": 256, "6840": 256, "5893": 256, "6400x196x196": 256, "38464": 256, "196": 256, "triton_bmm_81": 256, "8647": 256, "triton_bmm_71": 256, "8668": 256, "triton_bmm_77": 256, "9661": 256, "triton_bmm_80": 256, "9671": 256, "triton_bmm_72": 256, "0193": 256, "triton_bmm_79": 256, "0224": 256, "triton_bmm_76": 256, "0490": 256, "triton_bmm_85": 256, "0992": 256, "triton_bmm_84": 256, "1064": 256, "triton_bmm_86": 256, "1381": 256, "7479": 256, "21m": 256, "int4": 256, "int8weightonlyconfig": 256, "int4weightonlyconfig": 256, "apply_dynamic_qu": 256, "apply_weight_only_int8_qu": 256, "quant_r": 256, "04m": 256, "58gb": 256, "int_mm": 256, "triton_mm_257": 256, "2853": 256, "int32": 256, "_int_mm": 256, "4553": 256, "triton_mm_250": 256, "5290": 256, "triton_mm_253": 256, "5587": 256, "triton_mm_252": 256, "6253": 256, "triton_mm_258": 256, "6427": 256, "triton_mm_251": 256, "6806": 256, "triton_mm_259": 256, "7174": 256, "triton_mm_249": 256, "1086": 256, "triton_mm_256": 256, "9094": 256, "9002": 256, "1985": 256, "triton_mm_154": 256, "9259": 256, "triton_mm_148": 256, "2833": 256, "triton_mm_155": 256, "3037": 256, "triton_mm_156": 256, "3355": 256, "3560": 256, "triton_mm_147": 256, "6172": 256, "triton_mm_146": 256, "7144": 256, "triton_mm_150": 256, "5090": 256, "triton_mm_149": 256, "6288": 256, "triton_mm_153": 256, "5494": 256, "9120": 256, "triton_bmm_167": 256, "8166": 256, "triton_bmm_172": 256, "triton_bmm_171": 256, "9446": 256, "triton_bmm_173": 256, "9466": 256, "triton_bmm_166": 256, "9517": 256, "triton_bmm_161": 256, "9937": 256, "triton_bmm_163": 256, "triton_bmm_169": 256, "0173": 256, "triton_bmm_165": 256, "0204": 256, "triton_bmm_170": 256, "8209": 256, "triton_bmm_191": 256, "triton_bmm_177": 256, "triton_bmm_180": 256, "triton_bmm_186": 256, "4813": 256, "triton_bmm_190": 256, "triton_bmm_183": 256, "triton_bmm_178": 256, "triton_bmm_179": 256, "triton_bmm_185": 256, "5263": 256, "5766": 256, "triton_bmm_193": 256, "triton_bmm_196": 256, "triton_bmm_202": 256, "triton_bmm_207": 256, "5458": 256, "triton_bmm_206": 256, "5560": 256, "triton_bmm_199": 256, "triton_bmm_195": 256, "5755": 256, "triton_bmm_194": 256, "6072": 256, "triton_bmm_201": 256, "6400": 256, "triton_bmm_204": 256, "6820": 256, "5890": 256, "triton_bmm_209": 256, "8637": 256, "triton_bmm_219": 256, "8657": 256, "triton_bmm_218": 256, "9681": 256, "triton_bmm_215": 256, "9773": 256, "triton_bmm_210": 256, "triton_bmm_217": 256, "0234": 256, "triton_bmm_214": 256, "0500": 256, "triton_bmm_223": 256, "triton_bmm_222": 256, "triton_bmm_224": 256, "1391": 256, "triton_mm_235": 256, "9835": 256, "triton_mm_236": 256, "1658": 256, "triton_mm_237": 256, "1699": 256, "triton_mm_228": 256, "1791": 256, "1811": 256, "triton_mm_227": 256, "1955": 256, "triton_mm_229": 256, "2630": 256, "triton_mm_230": 256, "4432": 256, "triton_mm_231": 256, "4781": 256, "triton_mm_234": 256, "7372": 256, "5521": 256, "triton_mm_246": 256, "5853": 256, "triton_mm_240": 256, "9489": 256, "triton_mm_247": 256, "triton_mm_248": 256, "0277": 256, "triton_mm_239": 256, "0461": 256, "0666": 256, "triton_mm_238": 256, "4691": 256, "triton_mm_242": 256, "2811": 256, "triton_mm_241": 256, "4429": 256, "triton_mm_245": 256, "0327": 256, "9823": 256, "55gb": 256, "dequant": 256, "force_fuse_int_mm_with_mul": 256, "78m": 256, "37gb": 256, "69m": 256, "54gb": 256, "unquant": 256, "epilogu": [256, 267], "enlarg": 256, "epilogue_fus": 256, "coordinate_descent_tun": 256, "coordinate_descent_check_all_direct": 256, "39gb": 256, "79m": 256, "10x": 256, "729": 256, "65m": 256, "96gb": 256, "677": 256, "28m": 256, "93gb": 256, "triton_mm_276": 256, "3449": 256, "triton_mm_283": 256, "3859": 256, "triton_mm_281": 256, "4258": 256, "triton_mm_277": 256, "4268": 256, "triton_mm_280": 256, "5825": 256, "6859": 256, "triton_mm_278": 256, "7094": 256, "triton_mm_272": 256, "7402": 256, "triton_mm_274": 256, "8815": 256, "triton_mm_273": 256, "9183": 256, "9267": 256, "0004": 256, "triton_mm_365": 256, "7970": 256, "triton_mm_372": 256, "triton_mm_370": 256, "triton_mm_366": 256, "8287": 256, "triton_mm_362": 256, "8574": 256, "triton_mm_369": 256, "triton_mm_361": 256, "8892": 256, "triton_mm_367": 256, "9547": 256, "triton_mm_363": 256, "9723": 256, "triton_mm_1353": 256, "1734": 256, "triton_mm_1360": 256, "1744": 256, "triton_mm_1358": 256, "1836": 256, "triton_mm_1354": 256, "1898": 256, "triton_mm_1357": 256, "2328": 256, "triton_mm_1349": 256, "triton_mm_1350": 256, "2481": 256, "triton_mm_1355": 256, "2737": 256, "triton_mm_1351": 256, "2799": 256, "2860": 256, "8857": 256, "16x3x1024x1024": 256, "1280x3x16x16": 256, "3145728": 256, "1048576": 256, "triton_convolution2d_261": 256, "7748": 256, "padding_h": 256, "padding_w": 256, "stride_h": 256, "stride_w": 256, "unrol": 256, "triton_convolution2d_263": 256, "5060": 256, "triton_convolution2d_266": 256, "4694": 256, "triton_convolution2d_265": 256, "1555": 256, "triton_convolution2d_260": 256, "2487": 256, "6150": 256, "triton_convolution2d_264": 256, "1571": 256, "triton_convolution2d_262": 256, "5823": 256, "5674": 256, "triton_bmm_322": 256, "triton_bmm_325": 256, "triton_bmm_331": 256, "triton_bmm_336": 256, "triton_bmm_328": 256, "5550": 256, "triton_bmm_335": 256, "triton_bmm_324": 256, "5765": 256, "triton_bmm_323": 256, "6369": 256, "triton_bmm_330": 256, "triton_bmm_329": 256, "6830": 256, "5913": 256, "triton_mm_391": 256, "6843": 256, "triton_mm_389": 256, "7078": 256, "triton_mm_385": 256, "8215": 256, "triton_mm_384": 256, "8594": 256, "triton_mm_388": 256, "8952": 256, "triton_mm_386": 256, "1420": 256, "triton_mm_380": 256, "2536": 256, "triton_mm_381": 256, "3110": 256, "triton_mm_382": 256, "3222": 256, "9974": 256, "triton_mm_410": 256, "5133": 256, "5553": 256, "triton_mm_409": 256, "8143": 256, "triton_mm_407": 256, "8676": 256, "triton_mm_403": 256, "8860": 256, "triton_mm_408": 256, "9403": 256, "triton_mm_405": 256, "9894": 256, "triton_mm_404": 256, "0212": 256, "triton_mm_411": 256, "0806": 256, "triton_mm_400": 256, "2854": 256, "0799": 256, "triton_mm_1305": 256, "5160": 256, "triton_mm_1303": 256, "5252": 256, "triton_mm_1299": 256, "6297": 256, "triton_mm_1298": 256, "6307": 256, "triton_mm_1302": 256, "6891": 256, "7751": 256, "triton_mm_1300": 256, "7915": 256, "triton_mm_1295": 256, "9625": 256, "triton_mm_1294": 256, "9953": 256, "triton_mm_1296": 256, "0116": 256, "6469": 256, "64x16384x80": 256, "64x80x64": 256, "1310720": 256, "triton_bmm_1309": 256, "5960": 256, "triton_bmm_1312": 256, "6124": 256, "triton_bmm_1325": 256, "6175": 256, "triton_bmm_1316": 256, "6205": 256, "triton_bmm_1320": 256, "6216": 256, "triton_bmm_1311": 256, "6287": 256, "triton_bmm_1315": 256, "6318": 256, "triton_bmm_1319": 256, "6339": 256, "triton_bmm_1324": 256, "triton_bmm_1310": 256, "6410": 256, "6602": 256, "triton_bmm_1330": 256, "6902": 256, "triton_bmm_1334": 256, "6932": 256, "triton_bmm_1338": 256, "triton_bmm_1327": 256, "6994": 256, "triton_bmm_1343": 256, "7137": 256, "triton_bmm_1329": 256, "7404": 256, "triton_bmm_1333": 256, "7424": 256, "triton_bmm_1337": 256, "7455": 256, "triton_bmm_1328": 256, "7629": 256, "triton_bmm_1342": 256, "7649": 256, "6767": 256, "16x1280x64x64": 256, "256x1280x1x1": 256, "5242880": 256, "triton_convolution2d_4808": 256, "6758": 256, "triton_convolution2d_4803": 256, "triton_convolution2d_4806": 256, "7741": 256, "7793": 256, "triton_convolution2d_4804": 256, "3978": 256, "triton_convolution2d_4809": 256, "4224": 256, "triton_convolution2d_4807": 256, "4459": 256, "conv1x1_via_mm": 256, "2579": 256, "triton_convolution2d_4805": 256, "9613": 256, "3621": 256, "16x256x64x64": 256, "256x256x3x3": 256, "2304": 256, "4531": 256, "triton_convolution2d_4811": 256, "6368": 256, "triton_convolution2d_4816": 256, "7269": 256, "triton_convolution2d_4813": 256, "6690": 256, "triton_convolution2d_4814": 256, "4790": 256, "triton_convolution2d_4810": 256, "0586": 256, "triton_convolution2d_4815": 256, "3437": 256, "triton_convolution2d_4812": 256, "2641": 256, "4392": 256, "81m": 256, "29gb": 256, "triton_mm_5630": 256, "9500": 256, "triton_mm_5624": 256, "2521": 256, "triton_mm_5631": 256, "2777": 256, "triton_mm_5632": 256, "2900": 256, "3391": 256, "triton_mm_5623": 256, "5142": 256, "triton_mm_5622": 256, "6115": 256, "triton_mm_5626": 256, "3089": 256, "triton_mm_5625": 256, "3734": 256, "triton_mm_5629": 256, "2151": 256, "8295": 256, "triton_mm_5677": 256, "6650": 256, "triton_mm_5669": 256, "triton_mm_5670": 256, "8176": 256, "triton_mm_5678": 256, "triton_mm_5679": 256, "8196": 256, "8289": 256, "triton_mm_5671": 256, "8934": 256, "triton_mm_5672": 256, "0316": 256, "triton_mm_5673": 256, "0675": 256, "triton_mm_5676": 256, "2733": 256, "5208": 256, "gib": 256, "unalloc": 256, "pytorch_cuda_alloc_conf": 256, "expandable_seg": 256, "chunyuan": [257, 267], "cpp_wrapper": 257, "opt_fn": 257, "assert_size_strid": 257, "cpp_fused_add_lift_fresh_0": 257, "c_void_p": 257, "constant0": 257, "inductor_entry_cpp": 257, "19l": 257, "cppwrappercodecach": 257, "cpp_wrapper_src": 257, "c2buojsvlqbywxe3itb43hldieh4jqulk72iswa2awalwev7hjn2": 257, "_wrap_func": 257, "args_tensor": 257, "constants_tensor": 257, "_deviceguard": 257, "lift_fresh": 257, "stream0": 257, "get_cuda_stream": 257, "triton_poi_fused_add_lift_fresh_0": 257, "run_intermediate_hook": 257, "cudaguard": 257, "device_guard": 257, "tensoropt": 257, "loadkernel": 257, "torchinductor_us": 257, "cmm6xjgijjffxjku4akv55eyzibirvw6bti6uqmfnruujm5cvvmw": 257, "triton_poi_fused_add_lift_fresh_0_0d1d2d3": 257, "cudeviceptr": 257, "var_0": 257, "reinterpret_cast": 257, "var_1": 257, "var_2": 257, "var_3": 257, "kernel_args_var_0": 257, "cudastream_t": 257, "getcurrentcudastream": 257, "launchkernel": 257, "czbpeilh4qqmbyejdgsbpdfuk2ss5jigl2qjb7xs4gearrjvuwem": 257, "zhaoqiong": 258, "zheng": 258, "xu": 258, "han": 258, "msvc": 258, "desktop": 258, "checkmark": 258, "cmd": 258, "vc": 258, "auxiliari": 258, "vcvars64": 258, "opt_foo1": 258, "9074e": 258, "3994e": 258, "3894e": 258, "2630e": 258, "3060e": 258, "1833e": 258, "4016e": 258, "1905e": 258, "0637e": 258, "3648e": 258, "3728e": 258, "2863e": 258, "6888e": 258, "5442e": 258, "6790e": 258, "2025e": 258, "2647e": 258, "2684e": 258, "2483e": 258, "2845e": 258, "7747e": 258, "2028e": 258, "1431e": 258, "7196e": 258, "5304e": 258, "1945e": 258, "6654e": 258, "7376e": 258, "3644e": 258, "3600e": 258, "0157e": 258, "7200e": 258, "0146e": 258, "8175e": 258, "4057e": 258, "8119e": 258, "2853e": 258, "2773e": 258, "5082e": 258, "4615e": 258, "4140e": 258, "2130e": 258, "0762e": 258, "3914e": 258, "1122e": 258, "6895e": 258, "8852e": 258, "3310e": 258, "4101e": 258, "8318e": 258, "2355e": 258, "9290e": 258, "3707e": 258, "3754e": 258, "3768e": 258, "8970e": 258, "1171e": 258, "9944e": 258, "2553e": 258, "3394e": 258, "3428e": 258, "8400e": 258, "1756e": 258, "0654e": 258, "7973e": 258, "4019e": 258, "1886e": 258, "9194e": 258, "3632e": 258, "1811e": 258, "1615e": 258, "6622e": 258, "2089e": 258, "2011e": 258, "0659e": 258, "0892e": 258, "1932e": 258, "3888e": 258, "3898e": 258, "3218e": 258, "4139e": 258, "4000e": 258, "1192e": 258, "0175e": 258, "6432e": 258, "0498e": 258, "4115e": 258, "3212e": 258, "0964e": 258, "0127e": 258, "7244e": 258, "2799e": 258, "3595e": 258, "0907e": 258, "7191e": 258, "4062e": 258, "3672e": 258, "8502e": 258, "5216e": 258, "6046e": 258, "icx": 258, "win64": 258, "clang": 258, "inductor_window": 259, "mobile_interpret": 262, "weed": 263, "faithfulli": 263, "state_sum": 263, "addcmul_": 263, "addcdiv_": 263, "clr": 263, "_make_spars": 263, "grad_indic": 263, "sparse_coo_tensor": [263, 266], "_indic": 263, "grad_valu": 263, "_valu": 263, "sparse_mask": [263, 266], "std_valu": 263, "sqrt_": 263, "state_sum2": 263, "masked_grad": 263, "get_data": [263, 265], "std2": 263, "masked_tensor": [263, 265, 266], "to_spars": [263, 266], "param2": 263, "dodg": 263, "make_spars": 263, "brittl": 263, "argu": 263, "densif": 263, "csc": [263, 266], "bsr": [263, 266], "bsc": 263, "inconveni": 263, "conflat": 263, "disentangl": 263, "purposefulli": 263, "citizen": [263, 265], "relianc": 263, "unreli": [263, 265], "maskedarrai": [263, 275], "Their": [264, 266], "unspecifi": [264, 265, 266, 275], "intersect": 264, "logical_or": 264, "to_tensor": [264, 265], "mt0": 264, "get_mask": [264, 265], "mt1": 264, "rfc": [264, 267, 271], "revisit": 264, "ma": 264, "masked_arrai": 264, "mask0": 264, "mask1": 264, "necessit": 264, "as_masked_tensor": 265, "as_tensor": 265, "treatment": [265, 266], "afterthought": 265, "born": 265, "recur": 265, "inabl": 265, "manifest": 265, "10729": 265, "troubl": 265, "52248": 265, "frustrat": 265, "4132": 265, "67180": 265, "longstand": 265, "unsaf": 265, "61474": 265, "nanmax": 265, "nanmin": 265, "lend": 265, "growth": 266, "proven": 266, "substructur": 266, "sparse_coo": 266, "sparse_csr": 266, "ndim": 266, "nse": 266, "int64": 266, "sparse_tensor_data": 266, "sparse_tensor_mask": 266, "dense_masked_tensor": 266, "to_sparse_coo": 266, "to_sparse_csr": 266, "nuanc": 266, "crow_indic": 266, "col_indic": 266, "nnz": 266, "to_dens": 266, "is_spars": 266, "is_sparse_coo": 266, "is_sparse_csr": 266, "mt": 266, "mt2": 266, "surfac": 266, "synergi": 266, "invest": 266, "lesli": 267, "fang": 267, "x86": 267, "torchinductor_max_autotune_gemm_backend": 267, "torchinductor_freez": 267, "log_autotuning_result": 267, "amp_en": 267, "outperform": 267, "linear_unari": 267, "64x16": 267, "32x16": 267, "cpp_packed_gemm_0": 267, "2142": 267, "_linear_pointwis": 267, "2441": 267, "mkldnn": 267, "cpp_fused__to_copy_relu_1": 267, "async_compil": 267, "cpp_pybind": 267, "kernel_micro_gemm_amx_kernel_32_2": 267, "amxstat": 267, "amx_stat": 267, "__restrict__": 267, "lda": 267, "ldb": 267, "ldc": 267, "uint8_t": 267, "tilecfg_row": 267, "kernel_micro_gemm": 267, "64l": 267, "tid": 267, "omp_get_thread_num": 267, "mc_block_id": 267, "num_mc_blocks_per_thread": 267, "n_block_start": 267, "n_block_end": 267, "nc_block": 267, "kc": 267, "k_block_start": 267, "k_block_end": 267, "kc_block": 267, "nci": 267, "nc_block_end": 267, "m_end": 267, "m_start": 267, "16l": 267, "div_floor_integ": 267, "n_end": 267, "n_start": 267, "loadu": 267, "local_acc_buf": 267, "nr": 267, "tmp4": 267, "tmp5": 267, "tmp6": 267, "tmp7": 267, "tmp8": 267, "32l": 267, "invalu": 268, "nt": 268, "poss": 268, "irregularli": 268, "legal": 268, "semnat": 268, "law": 268, "daniil": 270, "lyakhov": 270, "aamir": 270, "nazir": 270, "suslov": 270, "yamini": 270, "nimmagadda": 270, "kozlov": 270, "openvinoquant": 270, "quantize_pt2": 270, "float_model": 270, "prepare_pt2": 270, "convert_pt2": 270, "traced_b": 270, "disable_patch": 270, "asymmetr": 270, "elu": 270, "prelu": 270, "quantizationpreset": 270, "modeltyp": 270, "ignored_scop": 270, "layer_1": 270, "layer_2": 270, "layer_3": 270, "ignoredscop": 270, "regex": 270, "layer_": 270, "subgraph": 270, "target_devic": 270, "cpu_spr": 270, "targetdevic": 270, "fold": 270, "quantized_model": 270, "fold_quant": 270, "optimized_model": 270, "smoothquant": 270, "biascorrect": 270, "discrep": 270, "calibration_load": 270, "transform_fn": 270, "data_item": 270, "calibration_dataset": 270, "smooth_quant": 270, "fast_bias_correct": 270, "yuanhao": 271, "ji": 271, "effortless": 271, "huawei": 271, "torch_device_backend_autoload": 271, "torch_foo": 271, "_autoload": 271, "entry_point": 271, "habana_framework": 271, "__autoload": 271, "device_backend": 271, "is_load": 271, "entrypoint": 271, "914": 272, "autovector": [274, 275], "42368": 274, "unsuccessfulli": 274, "rummag": 274, "shenanigin": 274, "8304": 274, "23475": 274, "performantli": 274, "7786": 274, "batch_of_sampl": 274, "grad_sampl": 274, "pypi": 275, "coo": 275, "csr": 275, "flight": 275, "flightrecord": 275, "autoload": 275}, "objects": {}, "objtypes": {}, "objnames": {}, "titleterms": {"onnx": [0, 107, 108, 109, 110, 111], "live": 0, "tutori": [0, 36, 39, 51, 52, 54, 56, 59, 92, 98, 118, 121, 131, 133, 165, 171, 173, 174, 181, 188, 189, 192, 193, 206, 244, 257], "torchrl": [1, 16, 173], "object": [1, 100, 138, 192], "code": [1, 2, 9, 16, 36, 37, 56, 92, 212, 257, 263], "ddpg": 1, "loss": [1, 14, 37, 45, 48, 51, 54, 93, 97, 98, 99, 136, 140, 149, 173, 215, 234], "overview": [1, 20, 62, 107, 111, 118, 141, 149, 154, 178, 190, 199, 206, 231, 254, 265], "prerequisit": [1, 37, 98, 107, 111, 160, 172, 201, 205, 221, 235, 236, 239, 240, 242, 243, 244, 245, 254, 257, 267, 270], "import": [1, 14, 46, 57, 86, 218, 221, 232, 233, 234], "setup": [1, 20, 22, 86, 106, 124, 141, 148, 149, 161, 169, 172, 183, 184, 194, 197, 198, 205, 218, 221, 232, 233, 234, 235, 236, 246, 252], "lossmodul": 1, "The": [1, 6, 9, 86, 88, 97, 137, 169, 170, 179, 193, 212], "__init__": [1, 34], "method": [1, 8, 17, 148, 161, 192, 228, 266], "valu": [1, 149, 165, 173, 189], "estim": [1, 156], "actor": [1, 160], "put": [1, 156, 172, 192], "thing": [1, 16], "togeth": [1, 16, 136, 156, 164, 172, 192, 215], "forward": [1, 6, 113, 134, 141, 152, 155, 192, 193], "call": [1, 187], "environ": [1, 16, 55, 135, 149, 156, 173, 256, 258], "transform": [1, 10, 16, 42, 43, 53, 93, 122, 123, 133, 136, 155, 166, 168, 169, 173, 178, 181, 193], "parallel": [1, 10, 46, 56, 58, 62, 127, 132, 133, 134, 136, 146, 147, 159, 168, 169, 202, 231, 252], "execut": [1, 16, 22, 108, 160, 169, 175, 183, 221, 231], "normal": [1, 45, 173, 234], "observ": 1, "stat": 1, "build": [1, 3, 4, 8, 12, 33, 93, 100, 153, 170, 186, 193, 234, 273], "model": [1, 6, 10, 14, 20, 22, 33, 37, 38, 39, 46, 51, 57, 62, 77, 78, 89, 91, 93, 95, 97, 98, 103, 105, 107, 108, 115, 117, 121, 122, 133, 134, 136, 137, 144, 146, 149, 150, 153, 156, 157, 159, 161, 168, 169, 171, 172, 179, 181, 183, 184, 192, 197, 198, 205, 210, 211, 212, 214, 218, 221, 225, 226, 231, 232, 233, 235, 244, 245, 270], "explor": [1, 22], "data": [1, 6, 10, 26, 34, 38, 45, 46, 51, 52, 54, 56, 57, 58, 86, 93, 96, 106, 121, 132, 133, 134, 136, 139, 140, 146, 173, 179, 181, 183, 184, 189, 190, 207, 218, 231, 232, 233, 234, 254, 265], "collector": [1, 149, 173], "evalu": [1, 51, 121, 137, 138, 139, 179, 215], "your": [1, 12, 16, 34, 62, 91, 95, 106, 113, 163, 192, 202, 218, 256], "record": [1, 183, 254], "replai": [1, 149, 173, 174], "buffer": [1, 149, 173, 231], "storag": [1, 245, 255], "batch": [1, 11, 16, 142, 155, 175, 186, 231, 245], "size": [1, 245], "modul": [1, 6, 17, 69, 93, 106, 113, 114, 149, 152, 165, 171, 190, 220, 228, 245], "construct": [1, 22, 57, 265, 266], "target": [1, 156, 231], "network": [1, 6, 33, 45, 48, 54, 86, 100, 103, 139, 140, 149, 156, 173, 174, 179, 181, 193, 215, 218, 232, 233, 234, 235], "updat": [1, 48, 156, 175], "optim": [1, 37, 38, 45, 54, 71, 97, 100, 106, 114, 134, 138, 164, 177, 190, 197, 198, 231, 233, 234, 237, 248, 249], "time": [1, 21, 40, 49, 66, 72, 76, 84, 94, 104, 112, 113, 116, 172, 180, 221, 227, 230, 235, 236, 238, 239, 240, 251, 272], "train": [1, 3, 6, 10, 13, 16, 18, 25, 33, 34, 45, 51, 54, 55, 57, 86, 88, 91, 95, 97, 100, 115, 121, 133, 136, 137, 139, 140, 144, 145, 148, 149, 156, 160, 164, 168, 173, 174, 179, 181, 184, 190, 194, 231, 234, 242, 270], "polici": [1, 16, 133, 149, 173], "experi": [1, 16, 17, 138], "result": [1, 46, 54, 77, 108, 113, 138, 139, 143, 173, 179, 181, 183, 190, 212, 214, 216], "conclus": [1, 2, 3, 4, 6, 8, 16, 17, 18, 20, 51, 84, 98, 107, 108, 111, 118, 124, 135, 136, 141, 149, 153, 154, 156, 157, 160, 164, 167, 169, 173, 178, 187, 189, 190, 193, 194, 198, 199, 200, 201, 202, 205, 220, 228, 231, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 248, 252, 254, 255, 256, 257, 258, 263, 264, 265, 266, 267, 268, 270, 271], "next": [1, 45, 54, 77, 172, 173], "step": [1, 118, 160, 164, 169, 170, 172, 173, 183, 193, 216, 218, 221, 232, 233, 234, 235, 236], "autograd": [2, 3, 11, 12, 32, 44, 64, 65, 79, 88, 114, 137, 141, 152, 177], "c": [2, 3, 6, 7, 8, 9, 11, 12, 230, 257], "frontend": [2, 6], "basic": [2, 6, 35, 36, 141, 146, 152, 167, 170, 175, 187, 189, 242], "oper": [2, 3, 4, 8, 9, 11, 12, 18, 41, 50, 88, 102, 111, 167, 231, 265, 266, 268], "comput": [2, 16, 21, 32, 40, 44, 49, 66, 72, 76, 84, 94, 102, 104, 105, 112, 116, 121, 155, 161, 180, 214, 227, 231, 238, 251, 272], "higher": 2, "order": [2, 231], "gradient": [2, 14, 32, 77, 89, 134, 166, 194, 215, 231, 234, 265], "us": [2, 6, 8, 10, 13, 14, 15, 25, 36, 44, 52, 55, 85, 106, 108, 111, 113, 115, 120, 132, 134, 141, 142, 144, 146, 147, 149, 150, 152, 160, 166, 168, 170, 175, 176, 177, 178, 183, 184, 196, 200, 201, 202, 206, 212, 214, 220, 221, 229, 231, 232, 242, 244, 246, 248, 249, 255, 258, 261, 265, 267], "custom": [2, 3, 4, 7, 8, 9, 12, 16, 17, 18, 34, 53, 69, 111, 114, 120, 121, 127, 142, 143, 152, 170, 171, 189, 192, 202], "function": [2, 14, 17, 32, 37, 45, 48, 54, 65, 77, 86, 93, 97, 98, 99, 100, 106, 114, 142, 143, 152, 155, 161, 166, 171, 173, 205, 216, 221, 231, 234, 241], "translat": [2, 117, 123, 179], "from": [2, 8, 9, 44, 52, 106, 108, 115, 139, 140, 144, 162, 179, 190, 192, 220, 232], "python": [2, 3, 4, 8, 9, 18, 170, 244, 246], "cuda": [3, 9, 52, 84, 167, 231], "set": [3, 4, 86, 135, 138, 197, 198, 205, 231, 239, 254, 256, 258], "up": [3, 4, 74, 114, 138, 160, 192, 197, 198, 205, 230, 256, 258], "system": [3, 4], "defin": [3, 4, 6, 8, 11, 33, 45, 48, 51, 65, 98, 107, 114, 138, 160, 169, 173, 192, 216, 218, 230, 232, 233, 234, 235, 242], "op": [3, 4, 11, 189, 241], "ad": [3, 4, 11, 18, 86, 184, 190, 215, 242], "backend": [3, 4, 11, 12, 17, 135, 148, 154, 170, 206, 231, 248, 270], "implement": [3, 4, 8, 11, 37, 54, 77, 99, 111, 142, 165, 170, 175, 176, 178, 205, 263, 265], "an": [3, 12, 16, 45, 103, 105, 111, 115, 137, 149, 173, 190, 198, 220, 248, 254], "regist": [3, 6, 11, 12, 17, 194], "torch": [3, 7, 32, 44, 83, 93, 102, 106, 107, 115, 139, 141, 146, 171, 178, 186, 187, 188, 189, 193, 197, 205, 215, 216, 220, 228, 236, 240, 241, 242, 243, 244, 245, 246, 248, 255, 258, 265, 270, 274], "compil": [3, 7, 125, 141, 154, 178, 186, 187, 193, 197, 198, 205, 235, 236, 239, 240, 241, 242, 243, 244, 246, 258, 267, 270], "support": [3, 7, 11, 12, 18, 86, 95, 111, 178, 242, 266], "hybrid": 3, "registr": 3, "test": [3, 4, 12, 16, 18, 45, 77, 86, 142, 186, 192, 218, 230], "creat": [3, 4, 9, 15, 34, 38, 46, 51, 96, 100, 102, 106, 138, 139, 140, 153, 161, 171, 231], "mutabl": [3, 18], "sycl": 4, "interfac": 4, "initi": [4, 41, 50, 54, 55, 134, 135, 146, 148, 156, 165, 218, 232, 233, 268], "packag": [4, 14, 80], "extens": [4, 12, 15, 127, 130, 170, 198, 228, 271], "pytorch": [6, 8, 9, 12, 14, 17, 25, 44, 47, 52, 56, 59, 62, 64, 65, 67, 69, 70, 71, 75, 83, 87, 90, 91, 92, 93, 95, 96, 97, 100, 101, 102, 103, 105, 108, 111, 113, 114, 131, 148, 157, 167, 172, 183, 190, 193, 196, 204, 206, 207, 209, 212, 213, 218, 219, 221, 222, 229, 231, 232, 233, 234, 253, 261, 270], "motiv": [6, 263], "write": [6, 16, 53, 148, 184, 192, 263], "applic": [6, 148, 160, 170, 196, 228], "neural": [6, 14, 33, 45, 48, 86, 106, 156, 161, 206, 218, 232, 233, 234, 235], "api": [6, 62, 88, 134, 152, 157, 164, 170, 212, 231, 246, 254, 257], "paramet": [6, 15, 33, 37, 38, 46, 93, 115, 160, 171, 173, 175, 176, 216, 231, 232], "submodul": 6, "travers": 6, "hierarchi": [6, 212], "run": [6, 36, 46, 51, 52, 55, 56, 57, 77, 92, 98, 138, 146, 160, 183, 189, 197, 198, 205, 221, 229], "mode": [6, 22, 152, 155, 241, 267], "ownership": 6, "dcgan": [6, 54], "what": [6, 12, 13, 17, 20, 45, 54, 58, 59, 88, 106, 115, 143, 150, 160, 166, 167, 198, 201, 202, 212, 233, 244, 248, 249, 254, 274], "wa": 6, "gan": [6, 54], "agan": 6, "gener": [6, 17, 54, 77, 115, 138, 140, 216, 224, 231], "discrimin": [6, 54, 99], "load": [6, 14, 34, 38, 39, 45, 51, 55, 98, 115, 121, 144, 146, 179, 181, 200, 207, 216, 218, 220, 223, 224, 225, 231, 232, 233, 234, 255], "loop": [6, 16, 37, 97, 149, 173, 174], "move": [6, 96], "gpu": [6, 45, 46, 57, 81, 86, 115, 167, 183, 190, 231, 256, 261], "checkpoint": [6, 57, 115, 133, 146, 156, 199, 200, 220, 224, 231], "recov": 6, "state": [6, 134, 249], "inspect": [6, 141, 165, 171, 184, 215], "imag": [6, 14, 45, 60, 61, 95, 108, 121, 172, 245], "class": [7, 8, 13, 16, 33, 53, 98, 165, 190], "export": [7, 107, 108, 111, 115, 188, 189, 244, 245, 270], "why": [7, 9, 55, 58, 136, 137, 160, 201, 202, 265, 268], "do": [7, 11, 45, 88, 143, 157], "we": [7, 88], "need": [7, 11, 88, 193], "make": [7, 13, 99, 196], "fake": 7, "extend": [8, 12, 111, 171, 193], "bind": 8, "exampl": [8, 15, 18, 77, 81, 88, 89, 100, 103, 105, 114, 115, 137, 193, 206, 243, 248, 254, 257, 267, 271], "project": [8, 193], "With": [8, 183], "cmake": 8, "serial": [8, 17, 171], "deseri": [8, 17], "take": 8, "return": [8, 137], "bound": 8, "author": [9, 108], "integr": [9, 17, 89], "manual": 9, "when": [9, 136, 143, 144, 244, 265], "should": [9, 58, 136], "i": [9, 13, 17, 30, 45, 54, 58, 59, 106, 115, 143, 144, 150, 160, 164, 166, 193, 201, 202, 212, 215, 233, 245, 249, 265, 274], "distribut": [10, 13, 19, 22, 55, 56, 57, 58, 62, 84, 127, 146, 147, 148, 160, 169, 176, 177, 190, 199, 200, 231], "pipelin": [10, 147, 160, 168, 169], "dispatch": [11, 12, 178], "schema": 11, "For": [11, 88, 225], "In": [11, 88, 96, 226], "place": [11, 88, 96], "view": [11, 183], "go": [11, 45, 54, 77, 193], "beyond": 11, "autocast": [11, 215], "tracer": 11, "new": [12, 17, 65, 99, 114, 142], "": [12, 18, 102, 156, 264], "get": [12, 33, 84, 105, 132, 134, 146, 154, 163, 177, 200, 201, 202, 206, 268], "kei": [12, 245], "full": [12, 37, 86], "list": 12, "kernel": [12, 17, 84, 161, 205, 242], "jit": [12, 172], "against": 12, "nativ": [12, 196], "backward": [12, 133, 134, 141, 142, 143, 164], "compat": 12, "known": 12, "issu": 12, "addit": [12, 118, 131, 167, 169, 183, 194, 254], "note": [12, 99, 214], "futur": [12, 17], "work": [12, 13, 17, 38, 132, 133, 134, 136, 157, 200, 271], "stai": 12, "touch": 12, "uneven": 13, "input": [13, 54, 57, 77, 143, 190, 193, 216, 231], "join": 13, "context": [13, 252], "manag": [13, 167], "requir": [13, 20, 108, 137, 171, 212, 245, 249], "distributeddataparallel": [13, 146, 231], "zeroredundancyoptim": [13, 249], "pass": [13, 113, 135, 141, 164, 186, 218], "keyword": 13, "argument": 13, "how": [13, 17, 36, 132, 133, 134, 136, 164, 200, 202, 212, 218, 229, 249, 258, 271], "doe": [13, 20, 137], "joinabl": 13, "joinhook": 13, "toi": 13, "transfer": [14, 121], "introduct": [14, 25, 44, 54, 62, 84, 87, 89, 90, 91, 92, 95, 96, 97, 102, 110, 135, 160, 165, 167, 169, 183, 187, 190, 191, 218, 221, 232, 233, 234, 239, 240, 248, 252, 257, 258, 263, 266, 267, 270], "underli": 14, "principl": [14, 266], "select": [14, 149, 252, 273], "devic": [14, 17, 33, 115, 133, 217, 220, 223, 231], "content": [14, 114], "style": [14, 193], "descent": 14, "numpi": [15, 41, 50, 74, 96, 114, 264], "scipi": 15, "less": 15, "parametr": [15, 165, 171], "pendulum": 16, "effect": 16, "action": [16, 149], "_step": 16, "reset": 16, "simul": 16, "_reset": 16, "metadata": [16, 17], "env": 16, "_spec": 16, "spec": 16, "shape": [16, 39, 96, 189, 222], "reproduc": 16, "seed": [16, 96], "wrap": [16, 18, 106, 133, 192, 230, 242], "envbas": 16, "our": [16, 22, 142, 148, 164, 186, 218, 232, 233, 234], "rollout": 16, "simpl": [16, 46, 88, 108, 153, 179, 215, 221], "facilit": 17, "privateuse1": 17, "via": [17, 254], "guard": [17, 189], "other": [17, 22, 93, 95, 97, 167, 183], "improv": [17, 113, 183, 270], "user": [17, 83, 242], "renam": 17, "name": [17, 139, 140, 189], "properti": 17, "relat": [17, 39, 228], "pil": 18, "crop": 18, "combin": [19, 136, 146], "dataparallel": [19, 46, 58, 86, 115, 146], "rpc": [19, 127, 147, 175, 176, 177, 204, 253], "framework": [19, 176, 177], "beta": [20, 152, 153, 178, 197, 198, 208, 241, 244, 246, 269], "acceler": [20, 96, 106, 163, 193, 255], "bert": 20, "semi": [20, 25], "structur": 20, "2": [20, 45, 46, 108, 135, 160, 161, 169, 170, 183, 184, 192, 216, 218, 221, 230, 232, 233, 234, 270], "4": [20, 45, 108, 160, 170, 172, 183, 184, 216, 218, 221, 230, 232, 233, 234, 270], "sparsiti": [20, 266], "problem": 20, "solv": 20, "intro": [20, 195], "establish": 20, "baselin": 20, "prune": [20, 171], "spars": [20, 263, 266], "infer": [20, 43, 115, 121, 172, 215, 225, 231, 244], "torchrec": [22, 190, 191], "shard": [22, 62, 132, 133, 134, 136, 190, 249], "instal": [22, 84, 89, 108, 172, 190, 206, 229, 258, 270], "embed": [22, 95, 105, 190], "distributedmodelparallel": [22, 190], "multiprocess": 22, "tabl": [22, 114, 124], "wise": 22, "supervis": 25, "learn": [25, 35, 36, 47, 59, 99, 100, 101, 114, 121, 127, 156, 167, 173, 174, 175, 177, 183, 216, 218, 221, 229, 232, 233, 234, 244, 248, 254], "usb": 25, "built": 25, "upon": 25, "freematch": 25, "softmatch": 25, "cifar": [25, 98], "10": [25, 98, 164], "onli": [25, 206], "40": [25, 172], "label": 25, "specif": [25, 231], "imbalanc": 25, "algorithm": [25, 174], "audio": [26, 27, 28, 29, 30, 31], "augment": [26, 28, 84, 103, 231], "dataset": [27, 34, 46, 53, 91, 95, 97, 106, 120, 192, 234], "featur": [28, 29, 89, 103, 121, 133, 183, 190, 206], "extract": 29, "o": 30, "resampl": 31, "automat": [32, 102, 152, 215, 245], "differenti": [32, 44, 102, 152], "tensor": [32, 41, 50, 64, 75, 82, 91, 96, 102, 114, 124, 127, 136, 137, 139, 164, 178, 193, 198, 228, 231, 245, 266, 268], "graph": [32, 44, 95, 102, 108, 141, 187, 189, 231, 245, 270], "disabl": [32, 231], "track": [32, 143, 184], "more": [32, 88, 96, 137, 154, 155, 175, 183, 199, 216, 218, 221, 229, 232, 233, 234], "option": [32, 44, 46, 118, 192, 194, 218, 248, 270], "read": [32, 33, 34, 37, 42, 44, 55, 57, 58, 107, 108, 110, 111, 113, 118, 144, 145, 149, 212, 231, 263, 265, 266], "jacobian": [32, 155, 161], "product": [32, 155, 161, 178], "further": [32, 33, 34, 37, 42, 44, 55, 57, 58, 107, 108, 110, 111, 113, 118, 121, 144, 145, 149, 193, 231, 263, 265, 266], "layer": [33, 89, 93, 136, 142, 193, 231], "nn": [33, 69, 70, 80, 93, 106, 114, 115, 122, 123, 171, 193, 220, 228, 245], "flatten": 33, "linear": [33, 93, 100, 106], "relu": 33, "sequenti": [33, 106], "softmax": [33, 100, 265], "dataload": [34, 53, 91, 97, 106], "iter": [34, 51, 53, 171], "visual": [34, 89, 95, 108, 121, 164, 179, 181, 184, 194, 212, 214], "file": [34, 51, 108, 115, 144, 179, 226, 254], "__len__": 34, "__getitem__": 34, "prepar": [34, 51, 139, 140, 179, 183, 210, 211, 263, 264, 265], "through": [34, 53, 218], "thi": [36, 59, 133, 164, 193, 271], "guid": [36, 134, 167, 231], "hyperparamet": [37, 86, 173, 174], "quickstart": 38, "save": [38, 39, 55, 57, 108, 115, 133, 137, 143, 144, 146, 156, 164, 199, 200, 215, 216, 223, 224, 225, 226, 232, 255], "weight": [39, 48, 54, 67, 114, 206], "attribut": [41, 50, 89, 214], "bridg": [41, 50, 96], "arrai": [41, 50], "totensor": 42, "lambda": 42, "fast": [43, 77], "better": [43, 258, 267], "A": [44, 47, 59, 88, 89, 99, 142, 167, 212, 215, 224, 230, 232], "gentl": 44, "background": [44, 167], "usag": [44, 141, 142, 152, 164, 167, 187, 189, 242], "vector": [44, 150, 155, 161], "calculu": 44, "exclus": 44, "dag": 44, "classifi": [45, 100, 108, 139], "about": [45, 222], "1": [45, 108, 135, 160, 161, 169, 170, 183, 184, 189, 192, 216, 218, 221, 230, 232, 233, 234, 270], "cifar10": 45, "convolut": [45, 93, 142, 149, 186, 231], "3": [45, 46, 108, 135, 160, 169, 170, 183, 184, 216, 218, 221, 230, 232, 233, 234, 270], "5": [45, 108, 160, 172, 183, 184, 216, 221, 230, 234], "multipl": [45, 115, 171, 226], "where": [45, 54, 77, 265], "dummi": 46, "8": [46, 216, 230], "summari": [46, 124, 133, 178, 213], "deep": [47, 59, 99, 100, 101, 126], "60": [47, 59], "minut": [47, 59], "blitz": [47, 59], "backprop": 48, "chatbot": 51, "preprocess": [51, 120, 156, 172], "format": [51, 108, 157, 200, 231, 254], "trim": 51, "seq2seq": [51, 179], "encod": [51, 105, 179], "decod": [51, 179], "procedur": 51, "mask": [51, 193, 265], "singl": [51, 159], "greedi": 51, "my": 51, "text": [51, 119, 120, 185], "googl": 52, "colab": 52, "version": [52, 161], "drive": 52, "enabl": [52, 134, 231, 252, 254, 257], "compos": [53, 155, 242], "afterword": 53, "torchvis": [53, 78, 192], "adversari": [54, 77], "fault": 55, "toler": 55, "torchrun": [55, 146], "grace": 55, "restart": 55, "process": [55, 57, 146, 169, 170, 175], "group": [55, 57, 170], "provid": 55, "variabl": [55, 135, 231], "snapshot": [55, 164], "trainer": [55, 160], "constructor": [55, 231], "resum": [55, 115, 215], "script": [55, 163, 237, 248], "video": [56, 172, 245], "section": 56, "multi": [57, 81, 86, 138], "ddp": [57, 58, 127, 144, 146, 231], "job": [57, 221, 254], "you": [58, 95, 136, 167, 193, 214, 244, 248, 254], "prefer": 58, "over": 58, "dp": 58, "goal": 59, "segment": [60, 61, 192, 245], "deeplabv3": [60, 61], "android": [60, 196, 208, 210, 262, 273], "io": [61, 208, 211, 261, 262, 273], "primit": 62, "commun": [62, 84, 86, 148], "launcher": 62, "appli": [62, 136, 248, 270, 271], "To": 62, "scale": [62, 136, 145, 178], "develop": 62, "control": [67, 107, 114, 178, 189, 231, 243, 248], "flow": [67, 107, 114, 189, 245], "share": [67, 114], "warm": [74, 114], "threat": 77, "sign": 77, "attack": 77, "under": 77, "fgsm": 77, "accuraci": [77, 86, 154, 206], "v": [77, 124, 155, 167, 264], "epsilon": 77, "sampl": [77, 140, 166, 212], "finetun": [78, 121, 192], "former": 83, "holist": [84, 85], "trace": [84, 85, 153, 187, 212, 221, 245, 273], "analysi": [84, 85], "hta": 84, "start": [84, 95, 132, 134, 146, 163, 177, 200, 201, 202, 206, 230, 235, 236, 248, 268], "tempor": 84, "breakdown": 84, "idl": 84, "durat": 84, "overlap": 84, "counter": 84, "memori": [84, 103, 113, 137, 142, 157, 164, 167, 174, 199, 221, 231, 248], "bandwidth": 84, "queue": 84, "length": [84, 231], "launch": [84, 169, 212], "statist": 84, "diff": 85, "tune": [86, 133, 206, 231], "rai": 86, "loader": 86, "configur": [86, 138, 212, 239], "search": 86, "space": 86, "youtub": [87, 90, 92], "seri": [87, 92], "fundament": 88, "turn": [88, 139], "off": 88, "On": 88, "profil": [88, 113, 153, 154, 183, 204, 212, 221, 253], "advanc": [88, 99, 133, 148, 183, 215, 242, 264], "topic": [88, 148, 215], "detail": 88, "high": [88, 178], "level": [88, 103, 139, 140], "understand": [89, 124], "captum": [89, 214], "first": [89, 107, 165], "occlus": 89, "gradcam": 89, "insight": 89, "common": [93, 141, 245], "type": [93, 96, 190, 215, 245], "recurr": [93, 149], "manipul": [93, 96], "activ": [93, 97, 267], "tensorboard": [95, 183, 184, 229], "befor": [95, 214], "show": 95, "scalar": [95, 229], "resourc": [95, 97, 131, 160, 167, 169], "random": [96, 99], "math": 96, "logic": 96, "brief": 96, "broadcast": 96, "alter": 96, "copi": [96, 167], "chang": [96, 217], "number": 96, "dimens": 96, "per": [97, 166], "epoch": 97, "knowledg": 98, "distil": 98, "util": [98, 171, 174, 193, 216, 228, 231, 241], "cross": [98, 193], "entropi": 98, "cosin": 98, "minim": 98, "intermedi": [98, 143, 231], "regressor": 98, "dynam": [99, 189, 243], "decis": 99, "bi": 99, "lstm": [99, 103, 149], "crf": 99, "versu": 99, "static": [99, 206, 245], "toolkit": 99, "condit": 99, "field": 99, "discuss": 99, "exercis": [99, 103, 105, 118, 139, 140, 179, 194], "tag": [99, 103], "block": [100, 193, 216], "affin": 100, "map": 100, "non": [100, 124, 167, 189, 198, 231], "probabl": 100, "compon": [100, 154], "logist": 100, "regress": 100, "bag": [100, 105], "word": [100, 105], "nlp": [101, 139, 140, 162, 179], "librari": [102, 119, 196, 218, 221, 231, 232, 233, 234, 248], "reshap": 102, "sequenc": [103, 136, 179], "long": [103, 221], "short": [103, 212], "term": 103, "part": 103, "speech": [103, 182, 185, 245], "tagger": 103, "charact": [103, 139, 140], "lexic": 105, "semant": [105, 263, 264], "dens": [105, 178], "n": 105, "gram": 105, "languag": [105, 122, 123], "continu": 105, "realli": 106, "mnist": 106, "net": 106, "scratch": [106, 139, 140, 162, 179], "without": 106, "refactor": [106, 107], "add": [106, 135, 192, 241], "valid": [106, 231], "fit": [106, 164], "get_data": 106, "switch": [106, 231], "cnn": 106, "close": 106, "thought": 106, "attempt": 107, "suggest": [107, 189], "patch": 107, "cond": 107, "depend": [108, 110, 178, 189, 190], "netron": 108, "6": [108, 160, 183, 184, 216, 221, 230], "runtim": [108, 231, 244, 248], "7": [108, 183, 216, 221, 230], "compar": [108, 216], "ones": 108, "overrid": 111, "exist": [111, 157], "perform": [113, 135, 150, 153, 154, 157, 166, 172, 178, 183, 199, 209, 231, 243, 248, 258, 267], "debug": [113, 154, 231, 254], "print": 113, "state_dict": [115, 233], "recommend": [115, 139, 167, 187], "entir": 115, "program": [115, 189], "One": [115, 226], "warmstart": [115, 232], "differ": [115, 141, 192, 232], "across": [115, 223], "cpu": [115, 133, 137, 153, 154, 167, 212, 231, 242, 248, 258, 267], "t5": [117, 133], "base": [117, 204, 253, 273], "summar": 117, "sentiment": 117, "classif": [117, 119, 245], "templat": 118, "torchtext": [119, 120, 122, 123], "vision": [121, 231], "few": 121, "predict": 121, "convnet": 121, "fix": [121, 189], "extractor": 121, "requires_grad": 124, "retain_grad": 124, "leaf": 124, "refer": [124, 194], "dive": 126, "fsdp2": [127, 134], "tp": [127, 136], "devicemesh": [127, 202], "domain": 128, "ecosystem": 129, "welcom": 131, "fulli": [132, 133, 134, 136, 193], "fsdp": [132, 133], "recap": 133, "fine": 133, "hf": 133, "mix": [133, 134, 144, 215, 231], "precis": [133, 134, 144, 215, 231], "intial": 133, "strategi": [133, 138], "prefetch": [133, 134], "stream": 133, "rank0": 133, "clip": [134, 215], "dtensor": 134, "dict": 134, "dcp": [134, 199, 200], "fsdp1": 134, "migrat": 134, "libuv": 135, "tcpstore": 135, "benchmark": [135, 186, 197, 216], "impact": 135, "exit": 135, "rout": 135, "use_libuv": 135, "fals": 135, "0": [135, 189, 265], "init_method": 135, "processgroup": 135, "larg": 136, "layernorm": 136, "rmsnorm": 136, "hook": [137, 164, 194], "typic": 137, "than": 137, "concept": [137, 189], "pack": [137, 193], "unpack": 137, "some": 137, "unconvent": 137, "int": 137, "tupl": 137, "str": 137, "disk": 137, "na": 138, "ax": 138, "torchx": 138, "app": 138, "runner": 138, "searchspac": 138, "metric": [138, 270], "optimizationconfig": 138, "choos": [138, 248], "schedul": [138, 198], "acknowledg": 138, "rnn": [139, 140, 177], "plot": [139, 140, 179], "captur": [141, 153, 164, 172, 270], "larger": 141, "log": [141, 154, 156, 229], "flag": 141, "address": [141, 245], "certain": 141, "limit": [141, 242], "aotautograd": 141, "recompil": [141, 243], "reason": [141, 222], "fuse": [142, 164, 178, 186, 190, 231], "norm": [142, 186, 231], "formula": [142, 242], "batchnorm": 142, "out": [142, 186, 234, 271], "comparison": [142, 146, 166, 187], "doubl": 143, "output": [143, 190], "real": [144, 172], "world": 144, "cloud": 144, "enough": 144, "multinod": 145, "local": 145, "global": [145, 171], "rank": 145, "heteregen": 145, "troubleshoot": [145, 172, 215], "between": [146, 265], "case": [146, 231], "skew": 146, "speed": 146, "point": [148, 228], "collect": [148, 173, 216], "own": 148, "ring": 148, "allreduc": 148, "dqn": [149, 174], "mlp": 149, "q": [149, 174], "ensembl": 150, "vmap": [150, 274], "forc": 151, "align": 151, "wav2vec2": [151, 182], "fx": [153, 187, 270], "symbol": [153, 189], "interpret": [153, 208, 214, 262, 273], "investig": 153, "resnet18": [153, 186], "inductor": [154, 239, 257], "inform": 154, "determin": 154, "error": [154, 189, 215, 245], "hessian": 155, "hvp": 155, "vhp": 155, "revers": 155, "jacrev": 155, "jacfwd": 155, "functorch": 155, "mario": 156, "plai": 156, "rl": 156, "agent": 156, "definit": 156, "act": 156, "cach": [156, 165, 239, 240], "recal": 156, "td": 156, "all": [156, 164, 193, 215, 221, 231], "let": 156, "channel": 157, "last": 157, "gain": [157, 243], "convert": [157, 260, 269], "machin": [159, 160], "best": [159, 187, 190], "practic": [159, 167, 183, 187, 190], "interact": 160, "monarch": 160, "reserv": 160, "workflow": [160, 262], "clean": 160, "complet": 160, "tangent": 161, "ntk": 161, "contract": 161, "nvfuser": 163, "dure": [164, 231], "disclaim": 164, "techniqu": 164, "register_post_accumulate_grad_hook": 164, "everyth": [164, 192], "line": 164, "hand": 165, "ar": [165, 193], "citizen": 165, "concaten": 165, "remov": [165, 171], "grad": [166, 231, 265], "effici": [166, 208, 231, 263], "wai": 166, "good": 167, "non_block": 167, "pin_memori": 167, "preambl": 167, "pageabl": 167, "asynchron": [167, 175, 199, 231], "synchron": [167, 231], "true": [167, 220, 231], "cudamemcpyasync": 167, "perspect": 167, "synergi": 167, "direct": 167, "mp": 167, "consider": 167, "partit": 169, "main": 169, "cpp": 170, "subclass": [170, 178, 228], "expos": 170, "re": 171, "raspberri": 172, "pi": 172, "fp": 172, "config": 172, "picamera2": 172, "choic": 172, "mobilenetv2": [172, 260, 269], "quantiz": [172, 206, 256, 270], "It": 172, "reinforc": [173, 174, 177], "ppo": 173, "server": [175, 176], "cartpol": 175, "solver": 175, "rref": 177, "dot": 178, "attent": [178, 179, 193], "sdpa": 178, "explicit": [178, 205], "hardwar": 178, "causal": 178, "self": 178, "nestedtensor": 178, "attn_bia": 178, "spatial": 181, "depict": 181, "stn": 181, "recognit": [182, 245], "event": 183, "analyz": [183, 221, 254], "help": 183, "amd": 183, "projector": 184, "assess": 184, "tacotron2": 185, "fuser": 186, "pattern": 186, "match": [186, 231], "fusion": [186, 205], "nest": [187, 193, 268], "demonstr": [187, 245], "speedup": [187, 215], "torchscript": 187, "torchdynamo": [187, 240, 245], "nightli": 188, "break": [189, 245], "strict": [189, 245], "constraint": 189, "special": 189, "dim": 189, "violat": 189, "_check": 189, "ir": 189, "decomposit": 189, "exportdb": 189, "recsi": 190, "embeddingbag": 190, "embeddingbagcollect": 190, "planner": 190, "lazyawait": 190, "anatomi": 190, "lookup": 190, "detect": 192, "pennfudan": 192, "pretrain": 192, "modifi": [192, 215], "backbon": 192, "instanc": 192, "replac": 193, "me": 193, "introduc": [193, 262], "abov": 193, "octob": 193, "2024": 193, "multiheadattent": 193, "gpt": 193, "one": 193, "row": 193, "longer": 193, "caus": 193, "nan": [193, 215, 265], "swiglu": 193, "feed": 193, "prebuilt": 196, "see": [197, 242, 268], "also": [197, 242, 268], "lr": 198, "happen": 198, "even": 199, "pin": 199, "commdebugmod": 201, "hsdp": 202, "solut": [202, 245], "workload": [204, 212, 231, 253], "horizont": 205, "foreach_map": 205, "helper": [205, 266], "eas": 206, "intel": [206, 212, 231, 248, 258], "compressor": 206, "fp8": 206, "pt2e": 206, "driven": 206, "mobil": [208, 209, 213, 237, 273], "recip": [209, 210, 211, 213, 219, 237, 250], "instrument": 212, "technologi": 212, "itt": 212, "vtune": 212, "xpu": [212, 258], "showcas": 212, "begin": 214, "final": 214, "default": [215, 217], "gradscal": 215, "e": 215, "g": 215, "amp": [215, 231], "minor": 215, "inf": 215, "mismatch": 215, "mai": 215, "manifest": 215, "cudnn_status_bad_param": 215, "syntaxerror": 216, "timeit": 216, "timer": [216, 230], "autorang": 216, "fuzz": 216, "instruct": [216, 230], "count": [216, 230], "callgrind": [216, 230], "necessari": [218, 221, 232, 233, 234], "specifi": 218, "tip": 220, "mmap": 220, "meta": 220, "load_state_dict": [220, 228], "assign": 220, "instanti": 221, "resnet": 221, "consumpt": 221, "examin": 221, "stack": 221, "And": [224, 225], "swap_tensor": 228, "quick": [230, 248], "wall": 230, "blocked_autorang": 230, "snippet": 230, "collect_callgrind": 230, "delv": 230, "deeper": 230, "b": [230, 232], "footnot": 230, "calcul": 231, "bia": 231, "directli": 231, "follow": 231, "none": 231, "instead": 231, "zero_grad": 231, "channels_last": 231, "uniform": 231, "access": [231, 233, 248, 265], "numa": [231, 248], "openmp": [231, 248], "libiomp": 231, "alloc": [231, 248], "core": [231, 260], "cudnn": 231, "auto": 231, "tuner": 231, "avoid": 231, "unnecessari": 231, "prealloc": 231, "skip": 231, "reduc": [231, 235, 236], "accumul": 231, "find_unused_paramet": 231, "balanc": 231, "zero": 234, "while": 234, "aot": 235, "cold": [235, 236], "region": [235, 236], "ahead": 235, "_regions_": 235, "measur": [235, 243], "torchinductor_fx_graph_cach": 239, "torchinductor_autograd_cach": 239, "torchinductor_cache_dir": 239, "torchinductor_fx_graph_remote_cach": 239, "torchinductor_autograd_remote_cach": 239, "torchinductor_autotune_remote_cach": 239, "torchinductor_force_disable_cach": 239, "offer": 240, "end": [240, 254], "mega": 240, "modular": 240, "torchinductor": 240, "triton": [240, 242], "remot": 240, "rewrit": 241, "mul": 241, "triton_op": 242, "fallback": 242, "flopcount": 242, "set_stanc": 243, "descript": 243, "prevent": 243, "crash": 243, "sooner": 243, "aotinductor": 244, "challeng": 245, "them": 245, "No": 245, "caption": 245, "cannot": 245, "mutat": 245, "frozen": 245, "promptabl": 245, "torch_log": 246, "xeon": 248, "run_cpu": 248, "Will": 248, "command": 248, "explan": 248, "rotat": 252, "approach": 252, "flight": 254, "stuck": 254, "retriev": 254, "dump": 254, "prototyp": [255, 256, 260, 261, 262, 273], "gpudirect": 255, "torchao": 256, "wrapper": 257, "window": 258, "softwar": 258, "altern": 258, "llvm": 258, "ml": 260, "lite": 262, "adagrad": 263, "maskedtensor": [263, 264, 265, 266], "simpler": 263, "origin": 263, "maskedarrai": 264, "reduct": [264, 266], "index": 265, "slice": 265, "distinguish": 265, "anoth": 265, "x": 265, "yield": 265, "nansum": 265, "nanmean": 265, "safe": 265, "miss": 265, "coo": 266, "csr": 266, "unari": 266, "binari": 266, "appendix": 266, "max": 267, "autotun": 267, "nnapi": 269, "openvino": 270, "post": 270, "nncf": 270, "lower": 270, "represent": 270, "autoload": 271, "tree": 271, "mechan": 271, "so": 274, "unstabl": 275}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 60}, "alltitles": {"ONNX Live Tutorial": [[0, "onnx-live-tutorial"]], "TorchRL objectives: Coding a DDPG loss": [[1, "torchrl-objectives-coding-a-ddpg-loss"]], "Overview": [[1, "overview"], [20, "overview"], [107, "overview"], [111, "overview"], [118, "overview"], [141, "overview"], [149, "overview"], [154, "overview"], [178, "overview"], [206, "overview"], [231, "overview"], [254, "overview"]], "Prerequisites": [[1, "prerequisites"], [98, "prerequisites"], [107, "prerequisites"], [111, "prerequisites"], [160, "prerequisites"], [172, "prerequisites"], [201, "prerequisites"], [205, "prerequisites"], [221, "prerequisites"], [235, "prerequisites"], [236, "prerequisites"], [239, "prerequisites"], [240, "prerequisites"], [242, "prerequisites"], [243, "prerequisites"], [244, "prerequisites"], [245, "prerequisites"], [254, "prerequisites"], [270, "prerequisites"]], "Imports and setup": [[1, "imports-and-setup"]], "TorchRL LossModule": [[1, "torchrl-lossmodule"]], "The __init__ method": [[1, "the-init-method"]], "The value estimator loss method": [[1, "the-value-estimator-loss-method"]], "The actor loss method": [[1, "the-actor-loss-method"]], "The value loss method": [[1, "the-value-loss-method"]], "Putting things together in a forward call": [[1, "putting-things-together-in-a-forward-call"]], "Environment": [[1, "environment"], [149, "environment"], [156, "environment"]], "Transforms": [[1, "transforms"], [42, "transforms"], [53, "transforms"], [173, "transforms"]], "Parallel execution": [[1, "parallel-execution"]], "Normalization of the observations": [[1, "normalization-of-the-observations"]], "Normalization stats": [[1, "normalization-stats"]], "Building the model": [[1, "building-the-model"]], "Exploration": [[1, "exploration"]], "Data collector": [[1, "data-collector"], [173, "data-collector"]], "Evaluator: building your recorder object": [[1, "evaluator-building-your-recorder-object"]], "Replay buffer": [[1, "replay-buffer"], [173, "replay-buffer"]], "Replay buffer storage and batch size": [[1, "replay-buffer-storage-and-batch-size"]], "Loss module construction": [[1, "loss-module-construction"]], "Target network updater": [[1, "target-network-updater"]], "Optimizer": [[1, "optimizer"], [37, "optimizer"], [97, "optimizer"]], "Time to train the policy": [[1, "time-to-train-the-policy"]], "Experiment results": [[1, "experiment-results"]], "Conclusion": [[1, "conclusion"], [2, "conclusion"], [3, "conclusion"], [4, "conclusion"], [6, "conclusion"], [8, "conclusion"], [16, "conclusion"], [17, "conclusion"], [18, "conclusion"], [20, "conclusion"], [51, "conclusion"], [84, "conclusion"], [98, "conclusion"], [107, "conclusion"], [108, "conclusion"], [111, "conclusion"], [118, "conclusion"], [124, "conclusion"], [135, "conclusion"], [136, "conclusion"], [141, "conclusion"], [149, "conclusion"], [153, "conclusion"], [154, "conclusion"], [156, "conclusion"], [157, "conclusion"], [160, "conclusion"], [164, "conclusion"], [167, "conclusion"], [169, "conclusion"], [178, "conclusion"], [187, "conclusion"], [189, "conclusion"], [190, "conclusion"], [193, "conclusion"], [194, "conclusion"], [198, "conclusion"], [199, "conclusion"], [200, "conclusion"], [201, "conclusion"], [202, "conclusion"], [205, "conclusion"], [220, "conclusion"], [228, "conclusion"], [231, "conclusion"], [235, "conclusion"], [236, "conclusion"], [239, "conclusion"], [240, "conclusion"], [241, "conclusion"], [242, "conclusion"], [243, "conclusion"], [244, "conclusion"], [245, "conclusion"], [246, "conclusion"], [248, "conclusion"], [252, "conclusion"], [254, "conclusion"], [255, "conclusion"], [256, "conclusion"], [257, "conclusion"], [258, "conclusion"], [263, "conclusion"], [264, "conclusion"], [265, "conclusion"], [266, "conclusion"], [267, "conclusion"], [268, "conclusion"], [270, "conclusion"], [271, "conclusion"]], "Next Steps": [[1, "next-steps"], [172, "next-steps"]], "Autograd in C++ Frontend": [[2, "autograd-in-c-frontend"]], "Basic autograd operations": [[2, "basic-autograd-operations"]], "Computing higher-order gradients in C++": [[2, "computing-higher-order-gradients-in-c"]], "Using custom autograd function in C++": [[2, "using-custom-autograd-function-in-c"]], "Translating autograd code from Python to C++": [[2, "translating-autograd-code-from-python-to-c"]], "Custom C++ and CUDA Operators": [[3, "custom-c-and-cuda-operators"]], "Setting up the Build System": [[3, "setting-up-the-build-system"], [4, "setting-up-the-build-system"]], "Defining the custom op and adding backend implementations": [[3, "defining-the-custom-op-and-adding-backend-implementations"], [4, "defining-the-custom-op-and-adding-backend-implementations"]], "Defining an operator": [[3, "defining-an-operator"]], "Registering backend implementations for an operator": [[3, "registering-backend-implementations-for-an-operator"]], "Adding torch.compile support for an operator": [[3, "adding-torch-compile-support-for-an-operator"]], "Setting up hybrid Python/C++ registration": [[3, "setting-up-hybrid-python-c-registration"]], "Adding training (autograd) support for an operator": [[3, "adding-training-autograd-support-for-an-operator"]], "Testing an operator": [[3, "testing-an-operator"]], "Creating mutable operators": [[3, "creating-mutable-operators"]], "Custom SYCL Operators": [[4, "custom-sycl-operators"]], "Create a Python Interface": [[4, "create-a-python-interface"]], "Initialize Package": [[4, "initialize-package"]], "Testing SYCL extension operator": [[4, "testing-sycl-extension-operator"]], "Using the PyTorch C++ Frontend": [[6, "using-the-pytorch-c-frontend"]], "Motivation": [[6, "motivation"]], "Writing a Basic Application": [[6, "writing-a-basic-application"]], "Defining the Neural Network Models": [[6, "defining-the-neural-network-models"]], "Module API Basics": [[6, "module-api-basics"]], "Defining a Module and Registering Parameters": [[6, "defining-a-module-and-registering-parameters"]], "Registering Submodules and Traversing the Module Hierarchy": [[6, "registering-submodules-and-traversing-the-module-hierarchy"]], "Running the Network in Forward Mode": [[6, "running-the-network-in-forward-mode"]], "Module Ownership": [[6, "module-ownership"]], "Defining the DCGAN Modules": [[6, "defining-the-dcgan-modules"]], "What was a GAN aGAN?": [[6, "what-was-a-gan-agan"]], "The Generator Module": [[6, "the-generator-module"]], "The Discriminator Module": [[6, "the-discriminator-module"]], "Loading Data": [[6, "loading-data"]], "Writing the Training Loop": [[6, "writing-the-training-loop"]], "Moving to the GPU": [[6, "moving-to-the-gpu"]], "Checkpointing and Recovering the Training State": [[6, "checkpointing-and-recovering-the-training-state"]], "Inspecting Generated Images": [[6, "inspecting-generated-images"]], "Supporting Custom C++ Classes in torch.compile/torch.export": [[7, "supporting-custom-c-classes-in-torch-compile-torch-export"]], "Why do we need to make a Fake Class?": [[7, "why-do-we-need-to-make-a-fake-class"]], "Extending PyTorch with Custom C++ Classes": [[8, "extending-pytorch-with-custom-c-classes"]], "Implementing and Binding the Class in C++": [[8, "implementing-and-binding-the-class-in-c"]], "Building the Example as a C++ Project With CMake": [[8, "building-the-example-as-a-c-project-with-cmake"]], "Using the C++ Class from Python": [[8, "using-the-c-class-from-python"]], "Defining Serialization/Deserialization Methods for Custom C++ Classes": [[8, "defining-serialization-deserialization-methods-for-custom-c-classes"]], "Defining Custom Operators that Take or Return Bound C++ Classes": [[8, "defining-custom-operators-that-take-or-return-bound-c-classes"]], "PyTorch Custom Operators": [[9, "pytorch-custom-operators"]], "Authoring a custom operator from Python": [[9, "authoring-a-custom-operator-from-python"]], "Integrating custom C++ and/or CUDA code with PyTorch": [[9, "integrating-custom-c-and-or-cuda-code-with-pytorch"]], "The Custom Operators Manual": [[9, "the-custom-operators-manual"]], "When should I create a Custom Operator?": [[9, "when-should-i-create-a-custom-operator"]], "Why should I create a Custom Operator?": [[9, "why-should-i-create-a-custom-operator"]], "Training Transformer models using Distributed Data Parallel and Pipeline Parallelism": [[10, "training-transformer-models-using-distributed-data-parallel-and-pipeline-parallelism"]], "Registering a Dispatched Operator in C++": [[11, "registering-a-dispatched-operator-in-c"]], "Defining schema and backend implementations": [[11, "defining-schema-and-backend-implementations"]], "For operators that do not need autograd": [[11, "for-operators-that-do-not-need-autograd"]], "In-place or view ops": [[11, "in-place-or-view-ops"]], "Adding autograd support": [[11, "adding-autograd-support"]], "Going beyond autograd": [[11, "going-beyond-autograd"]], "Autocast": [[11, "autocast"]], "Batched": [[11, "batched"]], "Tracer": [[11, "tracer"]], "Extending dispatcher for a new backend in C++": [[12, "extending-dispatcher-for-a-new-backend-in-c"]], "What\u2019s a new backend?": [[12, "what-s-a-new-backend"]], "Get a dispatch key for your backend": [[12, "get-a-dispatch-key-for-your-backend"]], "Get the full list of PyTorch operators": [[12, "get-the-full-list-of-pytorch-operators"]], "Register kernels for the new backend": [[12, "register-kernels-for-the-new-backend"], [17, "register-kernels-for-the-new-backend"]], "Autograd support for the new backend": [[12, "autograd-support-for-the-new-backend"]], "Build an extension": [[12, "build-an-extension"]], "Custom operator support": [[12, "custom-operator-support"]], "JIT support": [[12, "jit-support"]], "Testing your backend against native PyTorch backends": [[12, "testing-your-backend-against-native-pytorch-backends"]], "Backward Compatibility": [[12, "backward-compatibility"]], "Known issues & additional notes": [[12, "known-issues-additional-notes"]], "Future Work": [[12, "future-work"], [17, "future-work"]], "Stay in touch": [[12, "stay-in-touch"]], "Distributed Training with Uneven Inputs Using the Join Context Manager": [[13, "distributed-training-with-uneven-inputs-using-the-join-context-manager"]], "Requirements": [[13, "requirements"], [20, "requirements"], [171, "requirements"], [212, "requirements"], [249, "requirements"]], "What is Join?": [[13, "what-is-join"]], "Using Join with DistributedDataParallel": [[13, "using-join-with-distributeddataparallel"]], "Using Join with DistributedDataParallel and ZeroRedundancyOptimizer": [[13, "using-join-with-distributeddataparallel-and-zeroredundancyoptimizer"]], "Passing Keyword Arguments": [[13, "passing-keyword-arguments"]], "How Does Join Work?": [[13, "how-does-join-work"]], "Joinable": [[13, "joinable"]], "JoinHook": [[13, "joinhook"]], "Join": [[13, "join"]], "Making a Toy Class Work with Join": [[13, "making-a-toy-class-work-with-join"]], "Neural Transfer Using PyTorch": [[14, "neural-transfer-using-pytorch"]], "Introduction": [[14, "introduction"], [54, "introduction"], [62, "introduction"], [89, "id1"], [95, "id1"], [97, "id1"], [135, "introduction"], [160, "introduction"], [167, "introduction"], [183, "introduction"], [218, "introduction"], [221, "introduction"], [232, "introduction"], [233, "introduction"], [234, "introduction"], [239, "introduction"], [240, "introduction"], [252, "introduction"], [257, "introduction"], [258, "introduction"], [266, "introduction"], [267, "introduction"], [270, "introduction"]], "Underlying Principle": [[14, "underlying-principle"]], "Importing Packages and Selecting a Device": [[14, "importing-packages-and-selecting-a-device"]], "Loading the Images": [[14, "loading-the-images"]], "Loss Functions": [[14, "loss-functions"], [93, "loss-functions"]], "Content Loss": [[14, "content-loss"]], "Style Loss": [[14, "style-loss"]], "Importing the Model": [[14, "importing-the-model"]], "Gradient Descent": [[14, "gradient-descent"]], "Creating Extensions Using NumPy and SciPy": [[15, "creating-extensions-using-numpy-and-scipy"]], "Parameter-less example": [[15, "parameter-less-example"]], "Parametrized example": [[15, "parametrized-example"]], "Pendulum: Writing your environment and transforms with TorchRL": [[16, "pendulum-writing-your-environment-and-transforms-with-torchrl"]], "Coding the effect of an action: _step()": [[16, "coding-the-effect-of-an-action-step"]], "Resetting the simulator: _reset()": [[16, "resetting-the-simulator-reset"]], "Environment metadata: env.*_spec": [[16, "environment-metadata-env-spec"]], "Specs shape": [[16, "specs-shape"]], "Reproducible experiments: seeding": [[16, "reproducible-experiments-seeding"]], "Wrapping things together: the EnvBase class": [[16, "wrapping-things-together-the-envbase-class"]], "Testing our environment": [[16, "testing-our-environment"]], "Transforming an environment": [[16, "transforming-an-environment"]], "Writing custom transforms": [[16, "writing-custom-transforms"]], "Executing a rollout": [[16, "executing-a-rollout"]], "Batching computations": [[16, "batching-computations"]], "Training a simple policy": [[16, "training-a-simple-policy"]], "Training loop": [[16, "training-loop"], [149, "training-loop"], [173, "training-loop"], [174, "training-loop"]], "Facilitating New Backend Integration by PrivateUse1": [[17, "facilitating-new-backend-integration-by-privateuse1"]], "What is PrivateUse1?": [[17, "what-is-privateuse1"]], "How to integrate new backend via PrivateUse1": [[17, "how-to-integrate-new-backend-via-privateuse1"]], "Register generator for the new backend": [[17, "register-generator-for-the-new-backend"]], "Register device guard for the new backend": [[17, "register-device-guard-for-the-new-backend"]], "Register serialization and deserialization functions for new backend metadata": [[17, "register-serialization-and-deserialization-functions-for-new-backend-metadata"]], "Other Modules": [[17, "other-modules"]], "How to Improve User Experience with Privateuse1": [[17, "how-to-improve-user-experience-with-privateuse1"]], "Register new backend module to Pytorch": [[17, "register-new-backend-module-to-pytorch"]], "Rename PrivateUse1 to a custom name for the new backend": [[17, "rename-privateuse1-to-a-custom-name-for-the-new-backend"]], "Generate methods and properties related to the new backend": [[17, "generate-methods-and-properties-related-to-the-new-backend"]], "Custom Python Operators": [[18, "custom-python-operators"]], "Example: Wrapping PIL\u2019s crop into a custom operator": [[18, "example-wrapping-pil-s-crop-into-a-custom-operator"]], "Adding training support for crop": [[18, "adding-training-support-for-crop"]], "Testing Python Custom operators": [[18, "testing-python-custom-operators"]], "Mutable Python Custom operators": [[18, "mutable-python-custom-operators"]], "Combining Distributed DataParallel with Distributed RPC Framework": [[19, "combining-distributed-dataparallel-with-distributed-rpc-framework"]], "(beta) Accelerating BERT with semi-structured (2:4) sparsity": [[20, "beta-accelerating-bert-with-semi-structured-2-4-sparsity"]], "What problem does semi-structured sparsity solve?": [[20, "what-problem-does-semi-structured-sparsity-solve"]], "Intro & Setup": [[20, "intro-setup"]], "Establishing a baseline": [[20, "establishing-a-baseline"]], "Pruning BERT to be 2:4 sparse": [[20, "pruning-bert-to-be-2-4-sparse"]], "Accelerating 2:4 sparse models for inference": [[20, "accelerating-2-4-sparse-models-for-inference"]], "Computation times": [[21, "computation-times"], [40, "computation-times"], [49, "computation-times"], [66, "computation-times"], [72, "computation-times"], [76, "computation-times"], [94, "computation-times"], [104, "computation-times"], [112, "computation-times"], [116, "computation-times"], [180, "computation-times"], [227, "computation-times"], [238, "computation-times"], [251, "computation-times"], [272, "computation-times"]], "Exploring TorchRec sharding": [[22, "exploring-torchrec-sharding"]], "Installation": [[22, "installation"], [89, "installation"], [206, "installation"], [229, "installation"]], "Distributed Setup": [[22, "distributed-setup"]], "Constructing our embedding model": [[22, "constructing-our-embedding-model"]], "DistributedModelParallel in multiprocessing": [[22, "distributedmodelparallel-in-multiprocessing"]], "Multiprocessing Execution": [[22, "multiprocessing-execution"]], "Table Wise Sharding": [[22, "table-wise-sharding"]], "Explore other sharding modes": [[22, "explore-other-sharding-modes"]], "Semi-Supervised Learning using USB built upon PyTorch": [[25, "semi-supervised-learning-using-usb-built-upon-pytorch"]], "Introduction to FreeMatch and SoftMatch in Semi-Supervised Learning": [[25, "introduction-to-freematch-and-softmatch-in-semi-supervised-learning"]], "Use USB to Train FreeMatch/SoftMatch on CIFAR-10 with only 40 labels": [[25, "use-usb-to-train-freematch-softmatch-on-cifar-10-with-only-40-labels"]], "Use USB to Train SoftMatch with specific imbalanced algorithm on imbalanced CIFAR-10": [[25, "use-usb-to-train-softmatch-with-specific-imbalanced-algorithm-on-imbalanced-cifar-10"]], "Audio Data Augmentation": [[26, "audio-data-augmentation"]], "Audio Datasets": [[27, "audio-datasets"]], "Audio Feature Augmentation": [[28, "audio-feature-augmentation"]], "Audio Feature Extractions": [[29, "audio-feature-extractions"]], "Audio I/O": [[30, "audio-i-o"]], "Audio Resampling": [[31, "audio-resampling"]], "Automatic Differentiation with torch.autograd": [[32, "automatic-differentiation-with-torch-autograd"]], "Tensors, Functions and Computational graph": [[32, "tensors-functions-and-computational-graph"]], "Computing Gradients": [[32, "computing-gradients"]], "Disabling Gradient Tracking": [[32, "disabling-gradient-tracking"]], "More on Computational Graphs": [[32, "more-on-computational-graphs"]], "Optional Reading: Tensor Gradients and Jacobian Products": [[32, "optional-reading-tensor-gradients-and-jacobian-products"]], "Further Reading": [[32, "further-reading"], [33, "further-reading"], [34, "further-reading"], [37, "further-reading"], [42, "further-reading"], [55, "further-reading"], [57, "further-reading"], [58, "further-reading"], [113, "further-reading"], [118, "further-reading"], [144, "further-reading"], [145, "further-reading"], [149, "further-reading"], [231, "further-reading"], [263, "further-reading"], [265, "further-reading"], [266, "further-reading"]], "Build the Neural Network": [[33, "build-the-neural-network"]], "Get Device for Training": [[33, "get-device-for-training"]], "Define the Class": [[33, "define-the-class"]], "Model Layers": [[33, "model-layers"]], "nn.Flatten": [[33, "nn-flatten"]], "nn.Linear": [[33, "nn-linear"]], "nn.ReLU": [[33, "nn-relu"]], "nn.Sequential": [[33, "nn-sequential"]], "nn.Softmax": [[33, "nn-softmax"]], "Model Parameters": [[33, "model-parameters"]], "Datasets & DataLoaders": [[34, "datasets-dataloaders"]], "Loading a Dataset": [[34, "loading-a-dataset"]], "Iterating and Visualizing the Dataset": [[34, "iterating-and-visualizing-the-dataset"]], "Creating a Custom Dataset for your files": [[34, "creating-a-custom-dataset-for-your-files"]], "__init__": [[34, "init"]], "__len__": [[34, "len"]], "__getitem__": [[34, "getitem"]], "Preparing your data for training with DataLoaders": [[34, "preparing-your-data-for-training-with-dataloaders"]], "Iterate through the DataLoader": [[34, "iterate-through-the-dataloader"]], "Learn the Basics": [[35, "learn-the-basics"], [36, "learn-the-basics"]], "Running the Tutorial Code": [[36, "running-the-tutorial-code"], [92, "running-the-tutorial-code"]], "How to Use this Guide": [[36, "how-to-use-this-guide"]], "Optimizing Model Parameters": [[37, "optimizing-model-parameters"]], "Prerequisite Code": [[37, "prerequisite-code"]], "Hyperparameters": [[37, "hyperparameters"]], "Optimization Loop": [[37, "optimization-loop"]], "Loss Function": [[37, "loss-function"], [48, "loss-function"], [97, "loss-function"]], "Full Implementation": [[37, "full-implementation"]], "Quickstart": [[38, "quickstart"]], "Working with data": [[38, "working-with-data"]], "Creating Models": [[38, "creating-models"]], "Optimizing the Model Parameters": [[38, "optimizing-the-model-parameters"]], "Saving Models": [[38, "saving-models"]], "Loading Models": [[38, "loading-models"]], "Save and Load the Model": [[39, "save-and-load-the-model"]], "Saving and Loading Model Weights": [[39, "saving-and-loading-model-weights"]], "Saving and Loading Models with Shapes": [[39, "saving-and-loading-models-with-shapes"]], "Related Tutorials": [[39, "related-tutorials"]], "Tensors": [[41, "tensors"], [50, "tensors"], [82, "tensors"], [114, "tensors"], [114, "id1"]], "Initializing a Tensor": [[41, "initializing-a-tensor"]], "Attributes of a Tensor": [[41, "attributes-of-a-tensor"]], "Operations on Tensors": [[41, "operations-on-tensors"]], "Bridge with NumPy": [[41, "bridge-with-numpy"], [50, "bridge-with-numpy"]], "Tensor to NumPy array": [[41, "tensor-to-numpy-array"], [50, "tensor-to-numpy-array"]], "NumPy array to Tensor": [[41, "numpy-array-to-tensor"], [50, "numpy-array-to-tensor"]], "ToTensor()": [[42, "totensor"]], "Lambda Transforms": [[42, "lambda-transforms"]], "Fast Transformer Inference with Better Transformer": [[43, "fast-transformer-inference-with-better-transformer"]], "A Gentle Introduction to torch.autograd": [[44, "a-gentle-introduction-to-torch-autograd"]], "Background": [[44, "background"], [167, "background"]], "Usage in PyTorch": [[44, "usage-in-pytorch"]], "Differentiation in Autograd": [[44, "differentiation-in-autograd"]], "Optional Reading - Vector Calculus using autograd": [[44, "optional-reading-vector-calculus-using-autograd"]], "Computational Graph": [[44, "computational-graph"]], "Exclusion from the DAG": [[44, "exclusion-from-the-dag"]], "Further readings:": [[44, "further-readings"]], "Training a Classifier": [[45, "training-a-classifier"]], "What about data?": [[45, "what-about-data"]], "Training an image classifier": [[45, "training-an-image-classifier"]], "1. Load and normalize CIFAR10": [[45, "load-and-normalize-cifar10"]], "2. Define a Convolutional Neural Network": [[45, "define-a-convolutional-neural-network"]], "3. Define a Loss function and optimizer": [[45, "define-a-loss-function-and-optimizer"]], "4. Train the network": [[45, "train-the-network"]], "5. Test the network on the test data": [[45, "test-the-network-on-the-test-data"]], "Training on GPU": [[45, "training-on-gpu"]], "Training on multiple GPUs": [[45, "training-on-multiple-gpus"]], "Where do I go next?": [[45, "where-do-i-go-next"]], "Optional: Data Parallelism": [[46, "optional-data-parallelism"]], "Imports and parameters": [[46, "imports-and-parameters"]], "Dummy DataSet": [[46, "dummy-dataset"]], "Simple Model": [[46, "simple-model"]], "Create Model and DataParallel": [[46, "create-model-and-dataparallel"]], "Run the Model": [[46, "run-the-model"]], "Results": [[46, "results"], [54, "results"], [77, "results"], [173, "results"]], "2 GPUs": [[46, "gpus"]], "3 GPUs": [[46, "id1"]], "8 GPUs": [[46, "id2"]], "Summary": [[46, "summary"], [133, "summary"], [178, "summary"]], "Deep Learning with PyTorch: A 60 Minute Blitz": [[47, "deep-learning-with-pytorch-a-60-minute-blitz"], [59, "deep-learning-with-pytorch-a-60-minute-blitz"]], "Neural Networks": [[48, "neural-networks"]], "Define the network": [[48, "define-the-network"]], "Backprop": [[48, "backprop"]], "Update the weights": [[48, "update-the-weights"]], "Tensor Initialization": [[50, "tensor-initialization"]], "Tensor Attributes": [[50, "tensor-attributes"]], "Tensor Operations": [[50, "tensor-operations"]], "Chatbot Tutorial": [[51, "chatbot-tutorial"]], "Preparations": [[51, "preparations"]], "Load & Preprocess Data": [[51, "load-preprocess-data"]], "Create formatted data file": [[51, "create-formatted-data-file"]], "Load and trim data": [[51, "load-and-trim-data"]], "Prepare Data for Models": [[51, "prepare-data-for-models"]], "Define Models": [[51, "define-models"]], "Seq2Seq Model": [[51, "seq2seq-model"]], "Encoder": [[51, "encoder"]], "Decoder": [[51, "decoder"]], "Define Training Procedure": [[51, "define-training-procedure"]], "Masked loss": [[51, "masked-loss"]], "Single training iteration": [[51, "single-training-iteration"]], "Training iterations": [[51, "training-iterations"]], "Define Evaluation": [[51, "define-evaluation"]], "Greedy decoding": [[51, "greedy-decoding"]], "Evaluate my text": [[51, "evaluate-my-text"]], "Run Model": [[51, "run-model"]], "Run Training": [[51, "run-training"]], "Run Evaluation": [[51, "run-evaluation"]], "Running Tutorials in Google Colab": [[52, "running-tutorials-in-google-colab"]], "PyTorch Version in Google Colab": [[52, "pytorch-version-in-google-colab"]], "Using Tutorial Data from Google Drive in Colab": [[52, "using-tutorial-data-from-google-drive-in-colab"]], "Enabling CUDA": [[52, "enabling-cuda"]], "Writing Custom Datasets, DataLoaders and Transforms": [[53, "writing-custom-datasets-dataloaders-and-transforms"]], "Dataset class": [[53, "dataset-class"]], "Compose transforms": [[53, "compose-transforms"]], "Iterating through the dataset": [[53, "iterating-through-the-dataset"]], "Afterword: torchvision": [[53, "afterword-torchvision"]], "DCGAN Tutorial": [[54, "dcgan-tutorial"]], "Generative Adversarial Networks": [[54, "generative-adversarial-networks"]], "What is a GAN?": [[54, "what-is-a-gan"]], "What is a DCGAN?": [[54, "what-is-a-dcgan"]], "Inputs": [[54, "inputs"], [77, "inputs"]], "Data": [[54, "data"]], "Implementation": [[54, "implementation"], [77, "implementation"]], "Weight Initialization": [[54, "weight-initialization"]], "Generator": [[54, "generator"]], "Discriminator": [[54, "discriminator"]], "Loss Functions and Optimizers": [[54, "loss-functions-and-optimizers"]], "Training": [[54, "training"], [139, "training"], [140, "training"], [174, "training"], [179, "training"]], "Where to Go Next": [[54, "where-to-go-next"]], "Fault-tolerant Distributed Training with torchrun": [[55, "fault-tolerant-distributed-training-with-torchrun"]], "Why use torchrun": [[55, "why-use-torchrun"]], "Graceful restarts": [[55, "graceful-restarts"]], "Process group initialization": [[55, "process-group-initialization"]], "Use torchrun-provided environment variables": [[55, "use-torchrun-provided-environment-variables"]], "Saving and loading snapshots": [[55, "saving-and-loading-snapshots"]], "Loading a snapshot in the Trainer constructor": [[55, "loading-a-snapshot-in-the-trainer-constructor"]], "Resuming training": [[55, "resuming-training"]], "Running the script": [[55, "running-the-script"]], "Distributed Data Parallel in PyTorch - Video Tutorials": [[56, "distributed-data-parallel-in-pytorch-video-tutorials"]], "Running the code": [[56, "running-the-code"]], "Tutorial sections": [[56, "tutorial-sections"]], "Multi GPU training with DDP": [[57, "multi-gpu-training-with-ddp"]], "Imports": [[57, "imports"]], "Constructing the process group": [[57, "constructing-the-process-group"]], "Constructing the DDP model": [[57, "constructing-the-ddp-model"]], "Distributing input data": [[57, "distributing-input-data"]], "Saving model checkpoints": [[57, "saving-model-checkpoints"]], "Running the distributed training job": [[57, "running-the-distributed-training-job"]], "What is Distributed Data Parallel (DDP)": [[58, "what-is-distributed-data-parallel-ddp"]], "Why you should prefer DDP over DataParallel (DP)": [[58, "why-you-should-prefer-ddp-over-dataparallel-dp"]], "What is PyTorch?": [[59, "what-is-pytorch"]], "Goal of this tutorial:": [[59, "goal-of-this-tutorial"]], "Image Segmentation DeepLabV3 on Android": [[60, "image-segmentation-deeplabv3-on-android"]], "Image Segmentation DeepLabV3 on iOS": [[61, "image-segmentation-deeplabv3-on-ios"]], "PyTorch Distributed Overview": [[62, "pytorch-distributed-overview"]], "Parallelism APIs": [[62, "parallelism-apis"]], "Sharding primitives": [[62, "sharding-primitives"]], "Communications APIs": [[62, "communications-apis"]], "Launcher": [[62, "launcher"]], "Applying Parallelism To Scale Your Model": [[62, "applying-parallelism-to-scale-your-model"]], "PyTorch Distributed Developers": [[62, "pytorch-distributed-developers"]], "PyTorch: Tensors and autograd": [[64, "pytorch-tensors-and-autograd"], [114, "pytorch-tensors-and-autograd"]], "PyTorch: Defining New autograd Functions": [[65, "pytorch-defining-new-autograd-functions"]], "PyTorch: Control Flow + Weight Sharing": [[67, "pytorch-control-flow-weight-sharing"], [114, "pytorch-control-flow-weight-sharing"]], "PyTorch: Custom nn Modules": [[69, "pytorch-custom-nn-modules"], [114, "pytorch-custom-nn-modules"]], "PyTorch: nn": [[70, "pytorch-nn"], [114, "pytorch-nn"]], "PyTorch: optim": [[71, "pytorch-optim"], [114, "pytorch-optim"]], "Warm-up: numpy": [[74, "warm-up-numpy"], [114, "warm-up-numpy"]], "PyTorch: Tensors": [[75, "pytorch-tensors"], [114, "pytorch-tensors"]], "Adversarial Example Generation": [[77, "adversarial-example-generation"]], "Threat Model": [[77, "threat-model"]], "Fast Gradient Sign Attack": [[77, "fast-gradient-sign-attack"]], "Model Under Attack": [[77, "model-under-attack"]], "FGSM Attack": [[77, "fgsm-attack"]], "Testing Function": [[77, "testing-function"]], "Run Attack": [[77, "run-attack"]], "Accuracy vs Epsilon": [[77, "accuracy-vs-epsilon"]], "Sample Adversarial Examples": [[77, "sample-adversarial-examples"]], "Where to go next?": [[77, "where-to-go-next"]], "Finetuning Torchvision Models": [[78, "finetuning-torchvision-models"]], "Autograd": [[79, "autograd"], [114, "autograd"], [114, "id2"]], "nn Package": [[80, "nn-package"]], "Multi-GPU Examples": [[81, "multi-gpu-examples"]], "PyTorch for Former Torch Users": [[83, "pytorch-for-former-torch-users"]], "Introduction to Holistic Trace Analysis": [[84, "introduction-to-holistic-trace-analysis"]], "Installing HTA": [[84, "installing-hta"]], "Getting Started": [[84, "getting-started"], [206, "getting-started"]], "Temporal Breakdown": [[84, "temporal-breakdown"]], "Idle Time Breakdown": [[84, "idle-time-breakdown"]], "Kernel Breakdown": [[84, "kernel-breakdown"]], "Kernel Duration Distribution": [[84, "kernel-duration-distribution"]], "Communication Computation Overlap": [[84, "communication-computation-overlap"]], "Augmented Counters": [[84, "augmented-counters"]], "Memory Bandwidth & Queue Length Counters": [[84, "memory-bandwidth-queue-length-counters"]], "CUDA Kernel Launch Statistics": [[84, "cuda-kernel-launch-statistics"]], "Trace Diff using Holistic Trace Analysis": [[85, "trace-diff-using-holistic-trace-analysis"]], "Hyperparameter tuning with Ray Tune": [[86, "hyperparameter-tuning-with-ray-tune"]], "Setup / Imports": [[86, "setup-imports"]], "Data loaders": [[86, "data-loaders"]], "Configurable neural network": [[86, "configurable-neural-network"]], "The train function": [[86, "the-train-function"]], "Adding (multi) GPU support with DataParallel": [[86, "adding-multi-gpu-support-with-dataparallel"]], "Communicating with Ray Tune": [[86, "communicating-with-ray-tune"]], "Full training function": [[86, "full-training-function"]], "Test set accuracy": [[86, "test-set-accuracy"]], "Configuring the search space": [[86, "configuring-the-search-space"]], "Introduction to PyTorch - YouTube Series": [[87, "introduction-to-pytorch-youtube-series"], [92, "introduction-to-pytorch-youtube-series"]], "The Fundamentals of Autograd": [[88, "the-fundamentals-of-autograd"]], "What Do We Need Autograd For?": [[88, "what-do-we-need-autograd-for"]], "A Simple Example": [[88, "a-simple-example"]], "Autograd in Training": [[88, "autograd-in-training"]], "Turning Autograd Off and On": [[88, "turning-autograd-off-and-on"]], "Autograd and In-place Operations": [[88, "autograd-and-in-place-operations"]], "Autograd Profiler": [[88, "autograd-profiler"]], "Advanced Topic: More Autograd Detail and the High-Level API": [[88, "advanced-topic-more-autograd-detail-and-the-high-level-api"]], "The High-Level API": [[88, "the-high-level-api"]], "Model Understanding with Captum": [[89, "model-understanding-with-captum"]], "A First Example": [[89, "a-first-example"]], "Feature Attribution with Integrated Gradients": [[89, "feature-attribution-with-integrated-gradients"]], "Feature Attribution with Occlusion": [[89, "feature-attribution-with-occlusion"]], "Layer Attribution with Layer GradCAM": [[89, "layer-attribution-with-layer-gradcam"]], "Visualization with Captum Insights": [[89, "visualization-with-captum-insights"]], "Introduction to PyTorch on YouTube": [[90, "introduction-to-pytorch-on-youtube"]], "Introduction to PyTorch": [[91, "introduction-to-pytorch"], [102, "introduction-to-pytorch"]], "PyTorch Tensors": [[91, "pytorch-tensors"]], "PyTorch Models": [[91, "pytorch-models"]], "Datasets and Dataloaders": [[91, "datasets-and-dataloaders"]], "Training Your PyTorch Model": [[91, "training-your-pytorch-model"]], "Building Models with PyTorch": [[93, "building-models-with-pytorch"]], "torch.nn.Module and torch.nn.Parameter": [[93, "torch-nn-module-and-torch-nn-parameter"]], "Common Layer Types": [[93, "common-layer-types"]], "Linear Layers": [[93, "linear-layers"]], "Convolutional Layers": [[93, "convolutional-layers"]], "Recurrent Layers": [[93, "recurrent-layers"]], "Transformers": [[93, "transformers"]], "Other Layers and Functions": [[93, "other-layers-and-functions"]], "Data Manipulation Layers": [[93, "data-manipulation-layers"]], "Activation Functions": [[93, "activation-functions"]], "PyTorch TensorBoard Support": [[95, "pytorch-tensorboard-support"]], "Before You Start": [[95, "before-you-start"]], "Showing Images in TensorBoard": [[95, "showing-images-in-tensorboard"]], "Graphing Scalars to Visualize Training": [[95, "graphing-scalars-to-visualize-training"]], "Visualizing Your Model": [[95, "visualizing-your-model"]], "Visualizing Your Dataset with Embeddings": [[95, "visualizing-your-dataset-with-embeddings"]], "Other Resources": [[95, "other-resources"], [97, "other-resources"]], "Introduction to PyTorch Tensors": [[96, "introduction-to-pytorch-tensors"]], "Creating Tensors": [[96, "creating-tensors"], [102, "creating-tensors"]], "Random Tensors and Seeding": [[96, "random-tensors-and-seeding"]], "Tensor Shapes": [[96, "tensor-shapes"]], "Tensor Data Types": [[96, "tensor-data-types"]], "Math & Logic with PyTorch Tensors": [[96, "math-logic-with-pytorch-tensors"]], "In Brief: Tensor Broadcasting": [[96, "in-brief-tensor-broadcasting"]], "More Math with Tensors": [[96, "more-math-with-tensors"]], "Altering Tensors in Place": [[96, "altering-tensors-in-place"]], "Copying Tensors": [[96, "copying-tensors"]], "Moving to Accelerator": [[96, "moving-to-accelerator"]], "Manipulating Tensor Shapes": [[96, "manipulating-tensor-shapes"]], "Changing the Number of Dimensions": [[96, "changing-the-number-of-dimensions"]], "NumPy Bridge": [[96, "numpy-bridge"]], "Training with PyTorch": [[97, "training-with-pytorch"]], "Dataset and DataLoader": [[97, "dataset-and-dataloader"]], "The Model": [[97, "the-model"]], "The Training Loop": [[97, "the-training-loop"]], "Per-Epoch Activity": [[97, "per-epoch-activity"]], "Knowledge Distillation Tutorial": [[98, "knowledge-distillation-tutorial"]], "Loading CIFAR-10": [[98, "loading-cifar-10"]], "Defining model classes and utility functions": [[98, "defining-model-classes-and-utility-functions"]], "Cross-entropy runs": [[98, "cross-entropy-runs"]], "Knowledge distillation run": [[98, "knowledge-distillation-run"]], "Cosine loss minimization run": [[98, "cosine-loss-minimization-run"]], "Intermediate regressor run": [[98, "intermediate-regressor-run"]], "Advanced: Making Dynamic Decisions and the Bi-LSTM CRF": [[99, "advanced-making-dynamic-decisions-and-the-bi-lstm-crf"]], "Dynamic versus Static Deep Learning Toolkits": [[99, "dynamic-versus-static-deep-learning-toolkits"]], "Bi-LSTM Conditional Random Field Discussion": [[99, "bi-lstm-conditional-random-field-discussion"]], "Implementation Notes": [[99, "implementation-notes"]], "Exercise: A new loss function for discriminative tagging": [[99, "exercise-a-new-loss-function-for-discriminative-tagging"]], "Deep Learning with PyTorch": [[100, "deep-learning-with-pytorch"]], "Deep Learning Building Blocks: Affine maps, non-linearities and objectives": [[100, "deep-learning-building-blocks-affine-maps-non-linearities-and-objectives"]], "Affine Maps": [[100, "affine-maps"]], "Non-Linearities": [[100, "non-linearities"]], "Softmax and Probabilities": [[100, "softmax-and-probabilities"]], "Objective Functions": [[100, "objective-functions"]], "Optimization and Training": [[100, "optimization-and-training"]], "Creating Network Components in PyTorch": [[100, "creating-network-components-in-pytorch"]], "Example: Logistic Regression Bag-of-Words classifier": [[100, "example-logistic-regression-bag-of-words-classifier"]], "Deep Learning for NLP with Pytorch": [[101, "deep-learning-for-nlp-with-pytorch"]], "Introduction to Torch\u2019s tensor library": [[102, "introduction-to-torch-s-tensor-library"]], "Operations with Tensors": [[102, "operations-with-tensors"]], "Reshaping Tensors": [[102, "reshaping-tensors"]], "Computation Graphs and Automatic Differentiation": [[102, "computation-graphs-and-automatic-differentiation"]], "Sequence Models and Long Short-Term Memory Networks": [[103, "sequence-models-and-long-short-term-memory-networks"]], "LSTMs in Pytorch": [[103, "lstms-in-pytorch"]], "Example: An LSTM for Part-of-Speech Tagging": [[103, "example-an-lstm-for-part-of-speech-tagging"]], "Exercise: Augmenting the LSTM part-of-speech tagger with character-level features": [[103, "exercise-augmenting-the-lstm-part-of-speech-tagger-with-character-level-features"]], "Word Embeddings: Encoding Lexical Semantics": [[105, "word-embeddings-encoding-lexical-semantics"]], "Getting Dense Word Embeddings": [[105, "getting-dense-word-embeddings"]], "Word Embeddings in Pytorch": [[105, "word-embeddings-in-pytorch"]], "An Example: N-Gram Language Modeling": [[105, "an-example-n-gram-language-modeling"]], "Exercise: Computing Word Embeddings: Continuous Bag-of-Words": [[105, "exercise-computing-word-embeddings-continuous-bag-of-words"]], "What is torch.nn really?": [[106, "what-is-torch-nn-really"]], "MNIST data setup": [[106, "mnist-data-setup"]], "Neural net from scratch (without torch.nn)": [[106, "neural-net-from-scratch-without-torch-nn"]], "Using torch.nn.functional": [[106, "using-torch-nn-functional"]], "Refactor using nn.Module": [[106, "refactor-using-nn-module"]], "Refactor using nn.Linear": [[106, "refactor-using-nn-linear"]], "Refactor using torch.optim": [[106, "refactor-using-torch-optim"]], "Refactor using Dataset": [[106, "refactor-using-dataset"]], "Refactor using DataLoader": [[106, "refactor-using-dataloader"]], "Add validation": [[106, "add-validation"]], "Create fit() and get_data()": [[106, "create-fit-and-get-data"]], "Switch to CNN": [[106, "switch-to-cnn"]], "Using nn.Sequential": [[106, "using-nn-sequential"]], "Wrapping DataLoader": [[106, "wrapping-dataloader"]], "Using your Accelerator": [[106, "using-your-accelerator"]], "Closing thoughts": [[106, "closing-thoughts"]], "Export a model with control flow to ONNX": [[107, "export-a-model-with-control-flow-to-onnx"]], "Define the Models": [[107, "define-the-models"]], "Exporting the Model: First Attempt": [[107, "exporting-the-model-first-attempt"]], "Suggested Patch: Refactoring with torch.cond()": [[107, "suggested-patch-refactoring-with-torch-cond"]], "Further reading": [[107, "further-reading"], [108, "further-reading"], [110, "further-reading"], [111, "further-reading"]], "Export a PyTorch model to ONNX": [[108, "export-a-pytorch-model-to-onnx"]], "1. Install the required dependencies": [[108, "install-the-required-dependencies"]], "2. Author a simple image classifier model": [[108, "author-a-simple-image-classifier-model"]], "3. Export the model to ONNX format": [[108, "export-the-model-to-onnx-format"]], "4. Save the ONNX model in a file": [[108, "save-the-onnx-model-in-a-file"]], "5. Visualize the ONNX model graph using Netron": [[108, "visualize-the-onnx-model-graph-using-netron"]], "6. Execute the ONNX model with ONNX Runtime": [[108, "execute-the-onnx-model-with-onnx-runtime"]], "7. Compare the PyTorch results with the ones from the ONNX Runtime": [[108, "compare-the-pytorch-results-with-the-ones-from-the-onnx-runtime"]], "ONNX": [[109, "onnx"]], "Introduction to ONNX": [[110, "introduction-to-onnx"]], "Dependencies": [[110, "dependencies"]], "Extending the ONNX Exporter Operator Support": [[111, "extending-the-onnx-exporter-operator-support"]], "Overriding the implementation of an existing PyTorch operator": [[111, "overriding-the-implementation-of-an-existing-pytorch-operator"]], "Using custom ONNX operators": [[111, "using-custom-onnx-operators"]], "Supporting a custom PyTorch operator": [[111, "supporting-a-custom-pytorch-operator"]], "Profiling your PyTorch Module": [[113, "profiling-your-pytorch-module"]], "Performance debugging using Profiler": [[113, "performance-debugging-using-profiler"]], "Profile the forward pass": [[113, "profile-the-forward-pass"]], "Print profiler results": [[113, "print-profiler-results"]], "Improve memory performance": [[113, "improve-memory-performance"]], "Improve time performance": [[113, "improve-time-performance"]], "Learning PyTorch with Examples": [[114, "learning-pytorch-with-examples"]], "Table of Contents": [[114, "table-of-contents"]], "PyTorch: Defining new autograd functions": [[114, "pytorch-defining-new-autograd-functions"]], "nn module": [[114, "nn-module"], [114, "id3"]], "Examples": [[114, "examples"], [206, "examples"], [243, "examples"], [271, "examples"]], "Saving and Loading Models": [[115, "saving-and-loading-models"]], "What is a state_dict?": [[115, "what-is-a-state-dict"]], "Example:": [[115, "example"]], "Saving & Loading Model for Inference": [[115, "saving-loading-model-for-inference"]], "Save/Load state_dict (Recommended)": [[115, "save-load-state-dict-recommended"]], "Save/Load Entire Model": [[115, "save-load-entire-model"]], "Saving an Exported Program": [[115, "saving-an-exported-program"]], "Saving & Loading a General Checkpoint for Inference and/or Resuming Training": [[115, "saving-loading-a-general-checkpoint-for-inference-and-or-resuming-training"]], "Save:": [[115, "save"], [115, "id1"], [115, "id3"]], "Load:": [[115, "load"], [115, "id2"], [115, "id4"]], "Saving Multiple Models in One File": [[115, "saving-multiple-models-in-one-file"]], "Warmstarting Model Using Parameters from a Different Model": [[115, "warmstarting-model-using-parameters-from-a-different-model"]], "Saving & Loading Model Across Devices": [[115, "saving-loading-model-across-devices"]], "Save on GPU, Load on CPU": [[115, "save-on-gpu-load-on-cpu"]], "Save on GPU, Load on GPU": [[115, "save-on-gpu-load-on-gpu"]], "Save on CPU, Load on GPU": [[115, "save-on-cpu-load-on-gpu"]], "Saving torch.nn.DataParallel Models": [[115, "saving-torch-nn-dataparallel-models"]], "T5-Base Model for Summarization, Sentiment Classification, and Translation": [[117, "t5-base-model-for-summarization-sentiment-classification-and-translation"]], "Template Tutorial": [[118, "template-tutorial"]], "Steps": [[118, "steps"], [183, "steps"], [216, "steps"], [218, "steps"], [221, "steps"], [232, "steps"], [233, "steps"], [234, "steps"], [235, "steps"], [236, "steps"]], "(Optional) Additional Exercises": [[118, "optional-additional-exercises"]], "Text classification with the torchtext library": [[119, "text-classification-with-the-torchtext-library"]], "Preprocess custom text dataset using torchtext": [[120, "preprocess-custom-text-dataset-using-torchtext"]], "Transfer Learning for Computer Vision Tutorial": [[121, "transfer-learning-for-computer-vision-tutorial"]], "Load Data": [[121, "load-data"]], "Visualize a few images": [[121, "visualize-a-few-images"]], "Training the model": [[121, "training-the-model"], [181, "training-the-model"]], "Visualizing the model predictions": [[121, "visualizing-the-model-predictions"]], "Finetuning the ConvNet": [[121, "finetuning-the-convnet"]], "Train and evaluate": [[121, "train-and-evaluate"], [121, "id1"]], "ConvNet as fixed feature extractor": [[121, "convnet-as-fixed-feature-extractor"]], "Inference on custom images": [[121, "inference-on-custom-images"]], "Further Learning": [[121, "further-learning"]], "Language Modeling with nn.Transformer and torchtext": [[122, "language-modeling-with-nn-transformer-and-torchtext"]], "Language Translation with nn.Transformer and torchtext": [[123, "language-translation-with-nn-transformer-and-torchtext"]], "Understanding requires_grad, retain_grad, Leaf, and Non-leaf Tensors": [[124, "understanding-requires-grad-retain-grad-leaf-and-non-leaf-tensors"]], "Setup": [[124, "setup"], [141, "setup"], [148, "setup"], [149, "setup"], [161, "setup"], [169, "setup"], [183, "setup"], [194, "setup"], [218, "setup"], [221, "setup"], [232, "setup"], [233, "setup"], [234, "setup"], [235, "setup"], [236, "setup"], [246, "setup"], [252, "setup"]], "Leaf vs.\u00a0non-leaf tensors": [[124, "leaf-vs-non-leaf-tensors"]], "requires_grad": [[124, "requires-grad"]], "retain_grad": [[124, "retain-grad"]], "Summary table": [[124, "summary-table"]], "References": [[124, "references"], [194, "references"]], "Compilers": [[125, "compilers"]], "Deep Dive": [[126, "deep-dive"]], "Distributed": [[127, "distributed"]], "Learn DDP": [[127, "learn-ddp"]], "Learn FSDP2": [[127, "learn-fsdp2"]], "Learn Tensor Parallel (TP)": [[127, "learn-tensor-parallel-tp"]], "Learn DeviceMesh": [[127, "learn-devicemesh"]], "Learn RPC": [[127, "learn-rpc"]], "Custom Extensions": [[127, "custom-extensions"]], "Domains": [[128, "domains"]], "Ecosystem": [[129, "ecosystem"]], "Extension": [[130, "extension"]], "Welcome to PyTorch Tutorials": [[131, "welcome-to-pytorch-tutorials"]], "Additional Resources": [[131, "additional-resources"], [169, "additional-resources"]], "Getting Started with Fully Sharded Data Parallel(FSDP)": [[132, "getting-started-with-fully-sharded-data-parallel-fsdp"]], "How FSDP works": [[132, "how-fsdp-works"]], "How to use FSDP": [[132, "how-to-use-fsdp"]], "Advanced Model Training with Fully Sharded Data Parallel (FSDP)": [[133, "advanced-model-training-with-fully-sharded-data-parallel-fsdp"]], "FSDP Features in This Tutorial": [[133, "fsdp-features-in-this-tutorial"]], "Recap on How FSDP Works": [[133, "recap-on-how-fsdp-works"]], "Fine-tuning HF T5": [[133, "fine-tuning-hf-t5"]], "Transformer Wrapping Policy": [[133, "transformer-wrapping-policy"]], "Mixed Precision": [[133, "mixed-precision"]], "Intializing FSDP Model on Device": [[133, "intializing-fsdp-model-on-device"]], "Sharding Strategy": [[133, "sharding-strategy"]], "Backward Prefetch": [[133, "backward-prefetch"]], "Model Checkpoint Saving, by streaming to the Rank0 CPU": [[133, "model-checkpoint-saving-by-streaming-to-the-rank0-cpu"]], "Getting Started with Fully Sharded Data Parallel (FSDP2)": [[134, "getting-started-with-fully-sharded-data-parallel-fsdp2"]], "How FSDP2 works": [[134, "how-fsdp2-works"]], "How to use FSDP2": [[134, "how-to-use-fsdp2"]], "Model Initialization": [[134, "model-initialization"]], "Forward/Backward with Prefetching": [[134, "forward-backward-with-prefetching"]], "Enabling Mixed Precision": [[134, "enabling-mixed-precision"]], "Gradient Clipping and Optimizer with DTensor": [[134, "gradient-clipping-and-optimizer-with-dtensor"]], "State Dicts with DTensor APIs": [[134, "state-dicts-with-dtensor-apis"]], "State Dict with DCP APIs": [[134, "state-dict-with-dcp-apis"]], "FSDP1-to-FSDP2 migration guide": [[134, "fsdp1-to-fsdp2-migration-guide"]], "Introduction to Libuv TCPStore Backend": [[135, "introduction-to-libuv-tcpstore-backend"]], "Performance Benchmark": [[135, "performance-benchmark"]], "Impact": [[135, "impact"]], "Exit Route 1: Pass use_libuv=False to TCPStore Initialization": [[135, "exit-route-1-pass-use-libuv-false-to-tcpstore-initialization"]], "Exit Route 2: Add use_libuv=0 to init_method at ProcessGroup Initialization": [[135, "exit-route-2-add-use-libuv-0-to-init-method-at-processgroup-initialization"]], "Exit Route 3: Set Environment Variable USE_LIBUV to 0": [[135, "exit-route-3-set-environment-variable-use-libuv-to-0"]], "Large Scale Transformer model training with Tensor Parallel (TP)": [[136, "large-scale-transformer-model-training-with-tensor-parallel-tp"]], "How Tensor Parallel works?": [[136, "how-tensor-parallel-works"]], "When and Why you should apply Tensor Parallel": [[136, "when-and-why-you-should-apply-tensor-parallel"]], "How to apply Tensor Parallel": [[136, "how-to-apply-tensor-parallel"]], "Apply Sequence Parallel to LayerNorm/RMSNorm layers": [[136, "apply-sequence-parallel-to-layernorm-rmsnorm-layers"]], "Apply Loss Parallel": [[136, "apply-loss-parallel"]], "Combine Tensor Parallel with Fully Sharded Data Parallel together": [[136, "combine-tensor-parallel-with-fully-sharded-data-parallel-together"]], "Hooks for autograd saved tensors": [[137, "hooks-for-autograd-saved-tensors"]], "Saved tensors": [[137, "saved-tensors"]], "Why does training a model (typically) requires more memory than evaluating it?": [[137, "why-does-training-a-model-typically-requires-more-memory-than-evaluating-it"]], "The concept of packing / unpacking": [[137, "the-concept-of-packing-unpacking"]], "Saved tensors hooks": [[137, "saved-tensors-hooks"]], "Some unconventional examples": [[137, "some-unconventional-examples"]], "Returning an int": [[137, "returning-an-int"]], "Returning a tuple": [[137, "returning-a-tuple"]], "Returning a str": [[137, "returning-a-str"]], "Saving tensors to CPU": [[137, "saving-tensors-to-cpu"]], "Saving tensors to disk": [[137, "saving-tensors-to-disk"]], "Multi-Objective NAS with Ax": [[138, "multi-objective-nas-with-ax"]], "Defining the TorchX App": [[138, "defining-the-torchx-app"]], "Setting up the Runner": [[138, "setting-up-the-runner"]], "Setting up the SearchSpace": [[138, "setting-up-the-searchspace"]], "Setting up Metrics": [[138, "setting-up-metrics"]], "Setting up the OptimizationConfig": [[138, "setting-up-the-optimizationconfig"]], "Creating the Ax Experiment": [[138, "creating-the-ax-experiment"]], "Choosing the Generation Strategy": [[138, "choosing-the-generation-strategy"]], "Configuring the Scheduler": [[138, "configuring-the-scheduler"]], "Running the optimization": [[138, "running-the-optimization"]], "Evaluating the results": [[138, "evaluating-the-results"]], "Acknowledgments": [[138, "acknowledgments"]], "NLP From Scratch: Classifying Names with a Character-Level RNN": [[139, "nlp-from-scratch-classifying-names-with-a-character-level-rnn"]], "Recommended Preparation": [[139, "recommended-preparation"]], "Preparing Torch": [[139, "preparing-torch"]], "Preparing the Data": [[139, "preparing-the-data"], [140, "preparing-the-data"]], "Turning Names into Tensors": [[139, "turning-names-into-tensors"]], "Creating the Network": [[139, "creating-the-network"], [140, "creating-the-network"]], "Training the Network": [[139, "training-the-network"], [140, "training-the-network"]], "Plotting the Results": [[139, "plotting-the-results"]], "Evaluating the Results": [[139, "evaluating-the-results"]], "Exercises": [[139, "exercises"], [140, "exercises"], [179, "exercises"]], "NLP From Scratch: Generating Names with a Character-Level RNN": [[140, "nlp-from-scratch-generating-names-with-a-character-level-rnn"]], "Preparing for Training": [[140, "preparing-for-training"]], "Plotting the Losses": [[140, "plotting-the-losses"]], "Sampling the Network": [[140, "sampling-the-network"]], "Compiled Autograd: Capturing a larger backward graph for torch.compile": [[141, "compiled-autograd-capturing-a-larger-backward-graph-for-torch-compile"]], "Basic usage": [[141, "basic-usage"]], "Inspecting the compiled autograd logs": [[141, "inspecting-the-compiled-autograd-logs"]], "Compiling the forward and backward pass using different flags": [[141, "compiling-the-forward-and-backward-pass-using-different-flags"]], "Compiled Autograd addresses certain limitations of AOTAutograd": [[141, "compiled-autograd-addresses-certain-limitations-of-aotautograd"]], "Common recompilation reasons for Compiled Autograd": [[141, "common-recompilation-reasons-for-compiled-autograd"]], "Fusing Convolution and Batch Norm using Custom Function": [[142, "fusing-convolution-and-batch-norm-using-custom-function"]], "Backward Formula Implementation for Convolution": [[142, "backward-formula-implementation-for-convolution"]], "Backward Formula Implementation for Batch Norm": [[142, "backward-formula-implementation-for-batch-norm"]], "Fusing Convolution and BatchNorm": [[142, "fusing-convolution-and-batchnorm"]], "Testing out our new Layer": [[142, "testing-out-our-new-layer"]], "A Comparison of Memory Usage": [[142, "a-comparison-of-memory-usage"]], "Double Backward with Custom Functions": [[143, "double-backward-with-custom-functions"]], "Saving the Inputs": [[143, "saving-the-inputs"]], "Saving the Outputs": [[143, "saving-the-outputs"]], "Saving Intermediate Results": [[143, "saving-intermediate-results"]], "Saving Intermediate Results: What not to do": [[143, "saving-intermediate-results-what-not-to-do"]], "When Backward is not Tracked": [[143, "when-backward-is-not-tracked"]], "Training \u201creal-world\u201d models with DDP": [[144, "training-real-world-models-with-ddp"]], "Files used for training": [[144, "files-used-for-training"]], "Saving and Loading from the cloud": [[144, "saving-and-loading-from-the-cloud"]], "Using Mixed Precision": [[144, "using-mixed-precision"]], "When is DDP not enough?": [[144, "when-is-ddp-not-enough"]], "Multinode Training": [[145, "multinode-training"]], "Local and Global ranks": [[145, "local-and-global-ranks"]], "Heteregeneous Scaling": [[145, "heteregeneous-scaling"]], "Troubleshooting": [[145, "troubleshooting"], [215, "troubleshooting"]], "Getting Started with Distributed Data Parallel": [[146, "getting-started-with-distributed-data-parallel"]], "Comparison between DataParallel and DistributedDataParallel": [[146, "comparison-between-dataparallel-and-distributeddataparallel"]], "Basic Use Case": [[146, "basic-use-case"]], "Skewed Processing Speeds": [[146, "skewed-processing-speeds"]], "Save and Load Checkpoints": [[146, "save-and-load-checkpoints"]], "Combining DDP with Model Parallelism": [[146, "combining-ddp-with-model-parallelism"]], "Initialize DDP with torch.distributed.run/torchrun": [[146, "initialize-ddp-with-torch-distributed-run-torchrun"]], "Distributed Pipeline Parallelism Using RPC": [[147, "distributed-pipeline-parallelism-using-rpc"]], "Writing Distributed Applications with PyTorch": [[148, "writing-distributed-applications-with-pytorch"]], "Point-to-Point Communication": [[148, "point-to-point-communication"]], "Collective Communication": [[148, "collective-communication"]], "Distributed Training": [[148, "distributed-training"]], "Our Own Ring-Allreduce": [[148, "our-own-ring-allreduce"]], "Advanced Topics": [[148, "advanced-topics"]], "Communication Backends": [[148, "communication-backends"]], "Initialization Methods": [[148, "initialization-methods"]], "Recurrent DQN: Training recurrent policies": [[149, "recurrent-dqn-training-recurrent-policies"]], "Policy": [[149, "policy"], [173, "policy"]], "Convolutional network": [[149, "convolutional-network"]], "LSTM Module": [[149, "lstm-module"]], "MLP": [[149, "mlp"]], "Using the Q-Values to select an action": [[149, "using-the-q-values-to-select-an-action"]], "Using the model for the loss": [[149, "using-the-model-for-the-loss"]], "DQN Loss": [[149, "dqn-loss"]], "Collector and replay buffer": [[149, "collector-and-replay-buffer"]], "Model ensembling": [[150, "model-ensembling"]], "What is model ensembling?": [[150, "what-is-model-ensembling"]], "Using vmap to vectorize the ensemble": [[150, "using-vmap-to-vectorize-the-ensemble"]], "Performance": [[150, "performance"]], "Forced Alignment with Wav2Vec2": [[151, "forced-alignment-with-wav2vec2"]], "Forward-mode Automatic Differentiation (Beta)": [[152, "forward-mode-automatic-differentiation-beta"]], "Basic Usage": [[152, "basic-usage"], [187, "basic-usage"], [189, "basic-usage"], [242, "basic-usage"]], "Usage with Modules": [[152, "usage-with-modules"]], "Using the functional Module API (beta)": [[152, "using-the-functional-module-api-beta"]], "Custom autograd Function": [[152, "custom-autograd-function"]], "Functional API (beta)": [[152, "functional-api-beta"]], "Using the functional API with Modules": [[152, "using-the-functional-api-with-modules"]], "(beta) Building a Simple CPU Performance Profiler with FX": [[153, "beta-building-a-simple-cpu-performance-profiler-with-fx"]], "Capturing the Model with Symbolic Tracing": [[153, "capturing-the-model-with-symbolic-tracing"]], "Creating a Profiling Interpreter": [[153, "creating-a-profiling-interpreter"]], "Investigating the Performance of ResNet18": [[153, "investigating-the-performance-of-resnet18"]], "Inductor CPU backend debugging and profiling": [[154, "inductor-cpu-backend-debugging-and-profiling"]], "Debugging": [[154, "debugging"]], "Get more logging information": [[154, "get-more-logging-information"]], "Determine component of error": [[154, "determine-component-of-error"]], "Compilation error": [[154, "compilation-error"]], "Accuracy debugging": [[154, "accuracy-debugging"]], "Performance profiling": [[154, "performance-profiling"]], "Jacobians, Hessians, hvp, vhp, and more: composing function transforms": [[155, "jacobians-hessians-hvp-vhp-and-more-composing-function-transforms"]], "Computing the Jacobian": [[155, "computing-the-jacobian"]], "Reverse-mode Jacobian (jacrev) vs forward-mode Jacobian (jacfwd)": [[155, "reverse-mode-jacobian-jacrev-vs-forward-mode-jacobian-jacfwd"]], "Hessian computation with functorch.hessian": [[155, "hessian-computation-with-functorch-hessian"]], "Batch Jacobian and Batch Hessian": [[155, "batch-jacobian-and-batch-hessian"]], "Computing Hessian-vector products": [[155, "computing-hessian-vector-products"]], "Train a Mario-playing RL Agent": [[156, "train-a-mario-playing-rl-agent"]], "RL Definitions": [[156, "rl-definitions"]], "Initialize Environment": [[156, "initialize-environment"]], "Preprocess Environment": [[156, "preprocess-environment"]], "Agent": [[156, "agent"]], "Act": [[156, "act"]], "Cache and Recall": [[156, "cache-and-recall"]], "Learn": [[156, "learn"]], "Neural Network": [[156, "neural-network"]], "TD Estimate & TD Target": [[156, "td-estimate-td-target"]], "Updating the model": [[156, "updating-the-model"]], "Save checkpoint": [[156, "save-checkpoint"]], "Putting it all together": [[156, "putting-it-all-together"]], "Logging": [[156, "logging"]], "Let\u2019s play!": [[156, "lets-play"]], "Channels Last Memory Format in PyTorch": [[157, "channels-last-memory-format-in-pytorch"]], "Memory Format API": [[157, "memory-format-api"]], "Performance Gains": [[157, "performance-gains"]], "Converting existing models": [[157, "converting-existing-models"]], "Work to do": [[157, "work-to-do"]], "Single-Machine Model Parallel Best Practices": [[159, "single-machine-model-parallel-best-practices"]], "Interactive Distributed Applications with Monarch": [[160, "interactive-distributed-applications-with-monarch"]], "What is Monarch?": [[160, "what-is-monarch"]], "Why Use Monarch?": [[160, "why-use-monarch"]], "Step 1: Reserve Machine Resources": [[160, "step-1-reserve-machine-resources"]], "Step 2: Define the Trainer Actor": [[160, "step-2-define-the-trainer-actor"]], "Step 3: Define Training Parameters": [[160, "step-3-define-training-parameters"]], "Step 4: Execute the Training Workflow": [[160, "step-4-execute-the-training-workflow"]], "Step 5: Clean Up Resources": [[160, "step-5-clean-up-resources"]], "Step 6: Run the Complete Pipeline": [[160, "step-6-run-the-complete-pipeline"]], "Neural Tangent Kernels": [[161, "neural-tangent-kernels"]], "Create a function version of the model": [[161, "create-a-function-version-of-the-model"]], "Compute the NTK: method 1 (Jacobian contraction)": [[161, "compute-the-ntk-method-1-jacobian-contraction"]], "Compute the NTK: method 2 (NTK-vector products)": [[161, "compute-the-ntk-method-2-ntk-vector-products"]], "NLP from Scratch": [[162, "nlp-from-scratch"]], "Getting Started - Accelerate Your Scripts with nvFuser": [[163, "getting-started-accelerate-your-scripts-with-nvfuser"]], "How to save memory by fusing the optimizer step into the backward pass": [[164, "how-to-save-memory-by-fusing-the-optimizer-step-into-the-backward-pass"]], "Memory usage during training": [[164, "memory-usage-during-training"]], "Capturing and visualizing memory snapshots": [[164, "capturing-and-visualizing-memory-snapshots"]], "DISCLAIMER: This technique is not for all": [[164, "disclaimer-this-technique-is-not-for-all"]], "Tensor.register_post_accumulate_grad_hook(hook) API and our technique": [[164, "tensor-register-post-accumulate-grad-hook-hook-api-and-our-technique"]], "How everything fits together in 10 lines": [[164, "how-everything-fits-together-in-10-lines"]], "Parametrizations Tutorial": [[165, "parametrizations-tutorial"]], "Implementing parametrizations by hand": [[165, "implementing-parametrizations-by-hand"]], "Introduction to parametrizations": [[165, "introduction-to-parametrizations"]], "Inspecting a parametrized module": [[165, "inspecting-a-parametrized-module"]], "Parametrizations are first-class citizens": [[165, "parametrizations-are-first-class-citizens"]], "Caching the value of a parametrization": [[165, "caching-the-value-of-a-parametrization"]], "Concatenating parametrizations": [[165, "concatenating-parametrizations"]], "Initializing parametrizations": [[165, "initializing-parametrizations"]], "Removing parametrizations": [[165, "removing-parametrizations"]], "Per-sample-gradients": [[166, "per-sample-gradients"]], "What is it?": [[166, "what-is-it"]], "Per-sample-grads, the efficient way, using function transforms": [[166, "per-sample-grads-the-efficient-way-using-function-transforms"]], "Performance comparison": [[166, "performance-comparison"]], "A guide on good usage of non_blocking and pin_memory() in PyTorch": [[167, "a-guide-on-good-usage-of-non-blocking-and-pin-memory-in-pytorch"]], "What you will learn": [[167, "what-you-will-learn"], [244, "what-you-will-learn"], [254, "what-you-will-learn"]], "Preamble": [[167, "preamble"]], "Memory management basics": [[167, "memory-management-basics"]], "CUDA and (non-)pageable memory": [[167, "cuda-and-non-pageable-memory"]], "Asynchronous vs. Synchronous Operations with non_blocking=True (CUDA cudaMemcpyAsync)": [[167, "asynchronous-vs-synchronous-operations-with-non-blocking-true-cuda-cudamemcpyasync"]], "A PyTorch perspective": [[167, "a-pytorch-perspective"]], "pin_memory()": [[167, "pin-memory"]], "non_blocking=True": [[167, "non-blocking-true"]], "Synergies": [[167, "synergies"]], "Other copy directions (GPU -> CPU, CPU -> MPS)": [[167, "other-copy-directions-gpu-cpu-cpu-mps"]], "Practical recommendations": [[167, "practical-recommendations"]], "Additional considerations": [[167, "additional-considerations"]], "Additional resources": [[167, "additional-resources"]], "Training Transformer models using Pipeline Parallelism": [[168, "training-transformer-models-using-pipeline-parallelism"]], "Introduction to Distributed Pipeline Parallelism": [[169, "introduction-to-distributed-pipeline-parallelism"]], "Step 1: Partition the Transformer Model": [[169, "step-1-partition-the-transformer-model"]], "Step 2: Define The Main Execution": [[169, "step-2-define-the-main-execution"]], "Step 3: Launch the Distributed Processes": [[169, "step-3-launch-the-distributed-processes"]], "Customize Process Group Backends Using Cpp Extensions": [[170, "customize-process-group-backends-using-cpp-extensions"]], "Basics": [[170, "basics"], [175, "basics"]], "Step 1: Implement a Subclass of Backend": [[170, "step-1-implement-a-subclass-of-backend"]], "Step 2: Expose The Extension Python APIs": [[170, "step-2-expose-the-extension-python-apis"]], "Step 3: Build The Custom Extension": [[170, "step-3-build-the-custom-extension"]], "Step 4: Use The Extension in Application": [[170, "step-4-use-the-extension-in-application"]], "Pruning Tutorial": [[171, "pruning-tutorial"]], "Create a model": [[171, "create-a-model"]], "Inspect a Module": [[171, "inspect-a-module"]], "Pruning a Module": [[171, "pruning-a-module"]], "Iterative Pruning": [[171, "iterative-pruning"]], "Serializing a pruned model": [[171, "serializing-a-pruned-model"]], "Remove pruning re-parametrization": [[171, "remove-pruning-re-parametrization"]], "Pruning multiple parameters in a model": [[171, "pruning-multiple-parameters-in-a-model"]], "Global pruning": [[171, "global-pruning"]], "Extending torch.nn.utils.prune with custom pruning functions": [[171, "extending-torch-nn-utils-prune-with-custom-pruning-functions"]], "Real Time Inference on Raspberry Pi 4 and 5 (40 fps!)": [[172, "real-time-inference-on-raspberry-pi-4-and-5-40-fps"]], "Raspberry Pi Setup": [[172, "raspberry-pi-setup"]], "Raspberry Pi 4 Config": [[172, "raspberry-pi-4-config"]], "Installing PyTorch and picamera2": [[172, "installing-pytorch-and-picamera2"]], "Video Capture": [[172, "video-capture"]], "Image Preprocessing": [[172, "image-preprocessing"]], "Model Choices": [[172, "model-choices"]], "MobileNetV2: Quantization and JIT": [[172, "mobilenetv2-quantization-and-jit"]], "Putting It Together": [[172, "putting-it-together"]], "Troubleshooting: Performance": [[172, "troubleshooting-performance"]], "Reinforcement Learning (PPO) with TorchRL Tutorial": [[173, "reinforcement-learning-ppo-with-torchrl-tutorial"]], "Define Hyperparameters": [[173, "define-hyperparameters"]], "Data collection parameters": [[173, "data-collection-parameters"]], "PPO parameters": [[173, "ppo-parameters"]], "Define an environment": [[173, "define-an-environment"]], "Normalization": [[173, "normalization"]], "Value network": [[173, "value-network"]], "Loss function": [[173, "loss-function"]], "Conclusion and next steps": [[173, "conclusion-and-next-steps"]], "Reinforcement Learning (DQN) Tutorial": [[174, "reinforcement-learning-dqn-tutorial"]], "Replay Memory": [[174, "replay-memory"]], "DQN algorithm": [[174, "dqn-algorithm"]], "Q-network": [[174, "q-network"]], "Hyperparameters and utilities": [[174, "hyperparameters-and-utilities"]], "Implementing Batch RPC Processing Using Asynchronous Executions": [[175, "implementing-batch-rpc-processing-using-asynchronous-executions"]], "Batch-Updating Parameter Server": [[175, "batch-updating-parameter-server"]], "Batch-Processing CartPole Solver": [[175, "batch-processing-cartpole-solver"]], "Learn More": [[175, "learn-more"], [183, "learn-more"], [216, "learn-more"], [218, "learn-more"], [221, "learn-more"], [229, "learn-more"], [232, "learn-more"], [233, "learn-more"], [234, "learn-more"]], "Implementing a Parameter Server Using Distributed RPC Framework": [[176, "implementing-a-parameter-server-using-distributed-rpc-framework"]], "Getting Started with Distributed RPC Framework": [[177, "getting-started-with-distributed-rpc-framework"]], "Distributed Reinforcement Learning using RPC and RRef": [[177, "distributed-reinforcement-learning-using-rpc-and-rref"]], "Distributed RNN using Distributed Autograd and Distributed Optimizer": [[177, "distributed-rnn-using-distributed-autograd-and-distributed-optimizer"]], "(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)": [[178, "beta-implementing-high-performance-transformers-with-scaled-dot-product-attention-sdpa"]], "Fused implementations": [[178, "fused-implementations"]], "Explicit Dispatcher Control": [[178, "explicit-dispatcher-control"]], "Hardware dependence": [[178, "hardware-dependence"]], "Causal Self Attention": [[178, "causal-self-attention"]], "NestedTensor and Dense tensor support": [[178, "nestedtensor-and-dense-tensor-support"]], "Using SDPA with torch.compile": [[178, "using-sdpa-with-torch-compile"]], "Using SDPA with attn_bias subclasses": [[178, "using-sdpa-with-attn-bias-subclasses"]], "NLP From Scratch: Translation with a Sequence to Sequence Network and Attention": [[179, "nlp-from-scratch-translation-with-a-sequence-to-sequence-network-and-attention"]], "Loading data files": [[179, "loading-data-files"]], "The Seq2Seq Model": [[179, "the-seq2seq-model"]], "The Encoder": [[179, "the-encoder"]], "The Decoder": [[179, "the-decoder"]], "Simple Decoder": [[179, "simple-decoder"]], "Attention Decoder": [[179, "attention-decoder"]], "Preparing Training Data": [[179, "preparing-training-data"]], "Training the Model": [[179, "training-the-model"]], "Plotting results": [[179, "plotting-results"]], "Evaluation": [[179, "evaluation"]], "Training and Evaluating": [[179, "training-and-evaluating"]], "Visualizing Attention": [[179, "visualizing-attention"]], "Spatial Transformer Networks Tutorial": [[181, "spatial-transformer-networks-tutorial"]], "Loading the data": [[181, "loading-the-data"]], "Depicting spatial transformer networks": [[181, "depicting-spatial-transformer-networks"]], "Visualizing the STN results": [[181, "visualizing-the-stn-results"]], "Speech Recognition with Wav2Vec2": [[182, "speech-recognition-with-wav2vec2"]], "PyTorch Profiler With TensorBoard": [[183, "pytorch-profiler-with-tensorboard"]], "1. Prepare the data and model": [[183, "prepare-the-data-and-model"]], "2. Use profiler to record execution events": [[183, "use-profiler-to-record-execution-events"]], "3. Run the profiler": [[183, "run-the-profiler"]], "4. Use TensorBoard to view results and analyze model performance": [[183, "use-tensorboard-to-view-results-and-analyze-model-performance"]], "5. Improve performance with the help of profiler": [[183, "improve-performance-with-the-help-of-profiler"]], "6. Analyze performance with other advanced features": [[183, "analyze-performance-with-other-advanced-features"]], "7. Additional Practices: Profiling PyTorch on AMD GPUs": [[183, "additional-practices-profiling-pytorch-on-amd-gpus"]], "Visualizing Models, Data, and Training with TensorBoard": [[184, "visualizing-models-data-and-training-with-tensorboard"]], "1. TensorBoard setup": [[184, "tensorboard-setup"]], "2. Writing to TensorBoard": [[184, "writing-to-tensorboard"]], "3. Inspect the model using TensorBoard": [[184, "inspect-the-model-using-tensorboard"]], "4. Adding a \u201cProjector\u201d to TensorBoard": [[184, "adding-a-projector-to-tensorboard"]], "5. Tracking model training with TensorBoard": [[184, "tracking-model-training-with-tensorboard"]], "6. Assessing trained models with TensorBoard": [[184, "assessing-trained-models-with-tensorboard"]], "Text-to-speech with Tacotron2": [[185, "text-to-speech-with-tacotron2"]], "Building a Convolution/Batch Norm fuser with torch.compile": [[186, "building-a-convolution-batch-norm-fuser-with-torch-compile"]], "Fusing Convolution with Batch Norm": [[186, "fusing-convolution-with-batch-norm"], [186, "id1"]], "Pattern Matching with torch.compile": [[186, "pattern-matching-with-torch-compile"]], "Testing out our Fusion Pass": [[186, "testing-out-our-fusion-pass"]], "Benchmarking our Fusion on ResNet18": [[186, "benchmarking-our-fusion-on-resnet18"]], "Introduction to torch.compile": [[187, "introduction-to-torch-compile"]], "torch.compile and Nested Calls": [[187, "torch-compile-and-nested-calls"]], "Best Practices and Recommendations": [[187, "best-practices-and-recommendations"]], "Demonstrating Speedups": [[187, "demonstrating-speedups"]], "Comparison to TorchScript and FX Tracing": [[187, "comparison-to-torchscript-and-fx-tracing"]], "TorchDynamo and FX Graphs": [[187, "torchdynamo-and-fx-graphs"]], "torch.export Nightly Tutorial": [[188, "torch-export-nightly-tutorial"]], "torch.export Tutorial": [[189, "torch-export-tutorial"]], "Graph Breaks": [[189, "graph-breaks"]], "Non-Strict Export": [[189, "non-strict-export"]], "Control Flow Ops": [[189, "control-flow-ops"]], "Constraints/Dynamic Shapes": [[189, "constraints-dynamic-shapes"]], "Basic concepts: symbols and guards": [[189, "basic-concepts-symbols-and-guards"]], "0/1 specialization": [[189, "specialization"]], "Named Dims": [[189, "named-dims"]], "Constraint violations, suggested fixes": [[189, "constraint-violations-suggested-fixes"]], "Data-dependent errors": [[189, "data-dependent-errors"]], "Guards, torch._check()": [[189, "guards-torch-check"]], "Specialized values": [[189, "specialized-values"]], "Custom Ops": [[189, "custom-ops"]], "IR/Decompositions": [[189, "ir-decompositions"]], "ExportDB": [[189, "exportdb"]], "Running the Exported Program": [[189, "running-the-exported-program"]], "Introduction to TorchRec": [[190, "introduction-to-torchrec"], [191, "introduction-to-torchrec"]], "Install Dependencies": [[190, "install-dependencies"]], "Embeddings": [[190, "embeddings"]], "Embeddings in RecSys": [[190, "embeddings-in-recsys"]], "Embeddings in PyTorch": [[190, "embeddings-in-pytorch"]], "TorchRec Features Overview": [[190, "torchrec-features-overview"]], "From EmbeddingBag to EmbeddingBagCollection": [[190, "from-embeddingbag-to-embeddingbagcollection"]], "TorchRec Input/Output Data Types": [[190, "torchrec-input-output-data-types"]], "Distributed Training and Sharding": [[190, "distributed-training-and-sharding"]], "Distributed Embeddings": [[190, "distributed-embeddings"]], "Sharding": [[190, "sharding"]], "Sharded Modules": [[190, "sharded-modules"]], "Planner": [[190, "planner"]], "Planner Result": [[190, "planner-result"]], "GPU Training with LazyAwaitable": [[190, "gpu-training-with-lazyawaitable"]], "Anatomy of Sharded TorchRec modules": [[190, "anatomy-of-sharded-torchrec-modules"]], "Optimizing Embedding Lookups": [[190, "optimizing-embedding-lookups"]], "DistributedModelParallel": [[190, "distributedmodelparallel"]], "Sharding Best Practices": [[190, "sharding-best-practices"]], "Adding in the Optimizer": [[190, "adding-in-the-optimizer"]], "Optimizer Classes": [[190, "optimizer-classes"]], "Fused optimizer in TorchRec": [[190, "fused-optimizer-in-torchrec"]], "Adding an Optimizer to EmbeddingBagCollection": [[190, "adding-an-optimizer-to-embeddingbagcollection"]], "TorchVision Object Detection Finetuning Tutorial": [[192, "torchvision-object-detection-finetuning-tutorial"]], "Defining the Dataset": [[192, "defining-the-dataset"]], "Writing a custom dataset for PennFudan": [[192, "writing-a-custom-dataset-for-pennfudan"]], "Defining your model": [[192, "defining-your-model"]], "1 - Finetuning from a pretrained model": [[192, "finetuning-from-a-pretrained-model"]], "2 - Modifying the model to add a different backbone": [[192, "modifying-the-model-to-add-a-different-backbone"]], "Object detection and instance segmentation model for PennFudan Dataset": [[192, "object-detection-and-instance-segmentation-model-for-pennfudan-dataset"]], "Putting everything together": [[192, "putting-everything-together"]], "Testing forward() method (Optional)": [[192, "testing-forward-method-optional"]], "Wrapping up": [[192, "wrapping-up"]], "Accelerating PyTorch Transformers by replacing nn.Transformer with Nested Tensors and torch.compile()": [[193, "accelerating-pytorch-transformers-by-replacing-nn-transformer-with-nested-tensors-and-torch-compile"]], "Is this tutorial for me?": [[193, "is-this-tutorial-for-me"]], "Introducing the Building Blocks": [[193, "introducing-the-building-blocks"]], "The above building blocks are \u201cAll You Need\u201d (as of October 2024)": [[193, "the-above-building-blocks-are-all-you-need-as-of-october-2024"]], "MultiheadAttention": [[193, "multiheadattention"]], "Utilities": [[193, "utilities"]], "GPT-style layer": [[193, "gpt-style-layer"]], "Going one step further": [[193, "going-one-step-further"]], "Cross Attention": [[193, "cross-attention"]], "Fully masked rows no longer cause NaNs": [[193, "fully-masked-rows-no-longer-cause-nans"]], "Packed Projection": [[193, "packed-projection"]], "Input projection for MultiheadAttention": [[193, "input-projection-for-multiheadattention"]], "SwiGLU feed forward network of Transformer Layer": [[193, "swiglu-feed-forward-network-of-transformer-layer"]], "Extended examples": [[193, "extended-examples"]], "Visualizing Gradients": [[194, "visualizing-gradients"]], "Registering hooks": [[194, "registering-hooks"]], "Training and visualization": [[194, "training-and-visualization"]], "(Optional) Additional exercises": [[194, "optional-additional-exercises"]], "Intro": [[195, "intro"]], "Making Native Android Application that uses PyTorch prebuilt libraries": [[196, "making-native-android-application-that-uses-pytorch-prebuilt-libraries"]], "(beta) Compiling the optimizer with torch.compile": [[197, "beta-compiling-the-optimizer-with-torch-compile"]], "Model Setup": [[197, "model-setup"], [198, "model-setup"], [205, "model-setup"]], "Setting up and running the optimizer benchmark": [[197, "setting-up-and-running-the-optimizer-benchmark"]], "See Also": [[197, "see-also"], [242, "see-also"], [268, "see-also"]], "(beta) Running the compiled optimizer with an LR Scheduler": [[198, "beta-running-the-compiled-optimizer-with-an-lr-scheduler"]], "Setting up and running the compiled optimizer with LR Scheduler": [[198, "setting-up-and-running-the-compiled-optimizer-with-lr-scheduler"]], "Extension: What happens with a non-tensor LR?": [[198, "extension-what-happens-with-a-non-tensor-lr"]], "Asynchronous Saving with Distributed Checkpoint (DCP)": [[199, "asynchronous-saving-with-distributed-checkpoint-dcp"]], "Asynchronous Checkpointing Overview": [[199, "asynchronous-checkpointing-overview"]], "Even more performance with Pinned Memory": [[199, "even-more-performance-with-pinned-memory"]], "Getting Started with Distributed Checkpoint (DCP)": [[200, "getting-started-with-distributed-checkpoint-dcp"]], "How DCP works": [[200, "how-dcp-works"]], "How to use DCP": [[200, "how-to-use-dcp"]], "Saving": [[200, "saving"]], "Loading": [[200, "loading"]], "Formats": [[200, "formats"]], "Getting Started with CommDebugMode": [[201, "getting-started-with-commdebugmode"]], "What is CommDebugMode and why is it useful": [[201, "what-is-commdebugmode-and-why-is-it-useful"]], "Using CommDebugMode": [[201, "using-commdebugmode"]], "Getting Started with DeviceMesh": [[202, "getting-started-with-devicemesh"]], "What is DeviceMesh": [[202, "what-is-devicemesh"]], "Why DeviceMesh is Useful": [[202, "why-devicemesh-is-useful"]], "How to use DeviceMesh with HSDP": [[202, "how-to-use-devicemesh-with-hsdp"]], "How to use DeviceMesh for your custom parallel solutions": [[202, "how-to-use-devicemesh-for-your-custom-parallel-solutions"]], "Profiling PyTorch RPC-Based Workloads": [[204, "profiling-pytorch-rpc-based-workloads"], [253, "profiling-pytorch-rpc-based-workloads"]], "Explicit horizontal fusion with foreach_map and torch.compile": [[205, "explicit-horizontal-fusion-with-foreach-map-and-torch-compile"]], "Helper functions for foreach_map implementation": [[205, "helper-functions-for-foreach-map-implementation"]], "Setting up and running the compiled kernel": [[205, "setting-up-and-running-the-compiled-kernel"]], "Ease-of-use quantization for PyTorch with Intel\u00ae Neural Compressor": [[206, "ease-of-use-quantization-for-pytorch-with-intel-neural-compressor"]], "Features": [[206, "features"]], "FP8 Quantization": [[206, "fp8-quantization"]], "Weight-only Quantization": [[206, "weight-only-quantization"]], "Static Quantization with PT2E Backend": [[206, "static-quantization-with-pt2e-backend"]], "Accuracy-driven Tuning": [[206, "accuracy-driven-tuning"]], "Tutorials": [[206, "tutorials"]], "Loading data in PyTorch": [[207, "loading-data-in-pytorch"]], "(beta) Efficient mobile interpreter in Android and iOS": [[208, "beta-efficient-mobile-interpreter-in-android-and-ios"]], "Pytorch Mobile Performance Recipes": [[209, "pytorch-mobile-performance-recipes"]], "Model Preparation for Android Recipe": [[210, "model-preparation-for-android-recipe"]], "Model Preparation for iOS Recipe": [[211, "model-preparation-for-ios-recipe"]], "Profiling PyTorch workloads with The Instrumentation and Tracing Technology (ITT) API": [[212, "profiling-pytorch-workloads-with-the-instrumentation-and-tracing-technology-itt-api"]], "What is Intel\u00ae VTune\u2122 Profiler": [[212, "what-is-intel-vtune-profiler"]], "What is Instrumentation and Tracing Technology (ITT) API": [[212, "what-is-instrumentation-and-tracing-technology-itt-api"]], "How to visualize PyTorch model hierarchy in Intel\u00ae VTune\u2122 Profiler": [[212, "how-to-visualize-pytorch-model-hierarchy-in-intel-vtune-profiler"]], "Launch Intel\u00ae VTune\u2122 Profiler": [[212, "launch-intel-vtune-profiler"]], "Configure Profiling for CPU": [[212, "configure-profiling-for-cpu"]], "Configure Profiling for XPU": [[212, "configure-profiling-for-xpu"]], "Read Profiling Result": [[212, "read-profiling-result"]], "Read XPU Profiling Result": [[212, "read-xpu-profiling-result"]], "A short sample code showcasing how to use PyTorch ITT APIs": [[212, "a-short-sample-code-showcasing-how-to-use-pytorch-itt-apis"]], "Summary of PyTorch Mobile Recipes": [[213, "summary-of-pytorch-mobile-recipes"]], "Model Interpretability using Captum": [[214, "model-interpretability-using-captum"]], "Before you begin": [[214, "before-you-begin"]], "Computing Attribution": [[214, "computing-attribution"]], "Visualizing the Results": [[214, "visualizing-the-results"]], "Final Notes": [[214, "final-notes"]], "Automatic Mixed Precision": [[215, "automatic-mixed-precision"]], "A simple network": [[215, "a-simple-network"]], "Default Precision": [[215, "default-precision"]], "Adding torch.autocast": [[215, "adding-torch-autocast"]], "Adding GradScaler": [[215, "adding-gradscaler"]], "All together: \u201cAutomatic Mixed Precision\u201d": [[215, "all-together-automatic-mixed-precision"]], "Inspecting/modifying gradients (e.g., clipping)": [[215, "inspecting-modifying-gradients-e-g-clipping"]], "Saving/Resuming": [[215, "saving-resuming"]], "Inference/Evaluation": [[215, "inference-evaluation"]], "Advanced topics": [[215, "advanced-topics"]], "Speedup with Amp is minor": [[215, "speedup-with-amp-is-minor"]], "Loss is inf/NaN": [[215, "loss-is-inf-nan"]], "Type mismatch error (may manifest as CUDNN_STATUS_BAD_PARAM)": [[215, "type-mismatch-error-may-manifest-as-cudnn-status-bad-param"]], "SyntaxError": [[216, "syntaxerror"]], "1. Defining functions to benchmark": [[216, "defining-functions-to-benchmark"]], "2. Benchmarking with timeit.Timer": [[216, "benchmarking-with-timeit-timer"]], "3. Benchmarking with torch.utils.benchmark.Timer": [[216, "benchmarking-with-torch-utils-benchmark-timer"]], "4. Benchmarking with Blocked Autorange": [[216, "benchmarking-with-blocked-autorange"]], "5. Comparing benchmark results": [[216, "comparing-benchmark-results"]], "6. Saving/Loading benchmark results": [[216, "saving-loading-benchmark-results"]], "7. Generating inputs with Fuzzed Parameters": [[216, "generating-inputs-with-fuzzed-parameters"]], "8. Collecting instruction counts with Callgrind": [[216, "collecting-instruction-counts-with-callgrind"]], "Changing default device": [[217, "changing-default-device"]], "Defining a Neural Network in PyTorch": [[218, "defining-a-neural-network-in-pytorch"]], "1. Import necessary libraries for loading our data": [[218, "import-necessary-libraries-for-loading-our-data"], [232, "import-necessary-libraries-for-loading-our-data"], [233, "import-necessary-libraries-for-loading-our-data"], [234, "import-necessary-libraries-for-loading-our-data"]], "2. Define and initialize the neural network": [[218, "define-and-initialize-the-neural-network"], [233, "define-and-initialize-the-neural-network"]], "3. Specify how data will pass through your model": [[218, "specify-how-data-will-pass-through-your-model"]], "4. [Optional] Pass data through your model to test": [[218, "optional-pass-data-through-your-model-to-test"]], "PyTorch Recipes": [[219, "pytorch-recipes"]], "Tips for Loading an nn.Module from a Checkpoint": [[220, "tips-for-loading-an-nn-module-from-a-checkpoint"]], "Using torch.load(mmap=True)": [[220, "using-torch-load-mmap-true"]], "Using torch.device('meta')": [[220, "using-torch-device-meta"]], "Using load_state_dict(assign=True)": [[220, "using-load-state-dict-assign-true"]], "PyTorch Profiler": [[221, "pytorch-profiler"]], "1. Import all necessary libraries": [[221, "import-all-necessary-libraries"]], "2. Instantiate a simple Resnet model": [[221, "instantiate-a-simple-resnet-model"]], "3. Using profiler to analyze execution time": [[221, "using-profiler-to-analyze-execution-time"]], "4. Using profiler to analyze memory consumption": [[221, "using-profiler-to-analyze-memory-consumption"]], "5. Using tracing functionality": [[221, "using-tracing-functionality"]], "6. Examining stack traces": [[221, "examining-stack-traces"]], "7. Using profiler to analyze long-running jobs": [[221, "using-profiler-to-analyze-long-running-jobs"]], "Reasoning about Shapes in PyTorch": [[222, "reasoning-about-shapes-in-pytorch"]], "Save Load Across Devices": [[223, "save-load-across-devices"]], "Saving And Loading A General Checkpoint": [[224, "saving-and-loading-a-general-checkpoint"]], "Saving And Loading Models For Inference": [[225, "saving-and-loading-models-for-inference"]], "Saving Multiple Models In One File": [[226, "saving-multiple-models-in-one-file"]], "Extension points in nn.Module for load_state_dict and tensor subclasses": [[228, "extension-points-in-nn-module-for-load-state-dict-and-tensor-subclasses"]], "torch.utils.swap_tensors": [[228, "torch-utils-swap-tensors"]], "Application to nn.Module": [[228, "application-to-nn-module"]], "nn.Module.to() and related methods": [[228, "nn-module-to-and-related-methods"]], "nn.Module.load_state_dict()": [[228, "nn-module-load-state-dict"]], "How to use TensorBoard with PyTorch": [[229, "how-to-use-tensorboard-with-pytorch"]], "Using TensorBoard in PyTorch": [[229, "using-tensorboard-in-pytorch"]], "Log scalars": [[229, "log-scalars"]], "Run TensorBoard": [[229, "run-tensorboard"]], "Timer quick start": [[230, "timer-quick-start"]], "1. Defining a Timer": [[230, "defining-a-timer"]], "2. Wall time: Timer.blocked_autorange(...)": [[230, "wall-time-timer-blocked-autorange"]], "3. C++ snippets": [[230, "c-snippets"]], "4. Instruction counts: Timer.collect_callgrind(...)": [[230, "instruction-counts-timer-collect-callgrind"]], "5. Instruction counts: Delving deeper": [[230, "instruction-counts-delving-deeper"]], "6. A/B testing with Callgrind": [[230, "a-b-testing-with-callgrind"]], "7. Wrapping up": [[230, "wrapping-up"]], "8. Footnotes": [[230, "footnotes"]], "Performance Tuning Guide": [[231, "performance-tuning-guide"]], "General optimizations": [[231, "general-optimizations"]], "Enable asynchronous data loading and augmentation": [[231, "enable-asynchronous-data-loading-and-augmentation"]], "Disable gradient calculation for validation or inference": [[231, "disable-gradient-calculation-for-validation-or-inference"]], "Disable bias for convolutions directly followed by a batch norm": [[231, "disable-bias-for-convolutions-directly-followed-by-a-batch-norm"]], "Use parameter.grad = None instead of model.zero_grad() or optimizer.zero_grad()": [[231, "use-parameter-grad-none-instead-of-model-zero-grad-or-optimizer-zero-grad"]], "Fuse operations": [[231, "fuse-operations"]], "Enable channels_last memory format for computer vision models": [[231, "enable-channels-last-memory-format-for-computer-vision-models"]], "Checkpoint intermediate buffers": [[231, "checkpoint-intermediate-buffers"]], "Disable debugging APIs": [[231, "disable-debugging-apis"]], "CPU specific optimizations": [[231, "cpu-specific-optimizations"]], "Utilize Non-Uniform Memory Access (NUMA) Controls": [[231, "utilize-non-uniform-memory-access-numa-controls"]], "Utilize OpenMP": [[231, "utilize-openmp"]], "Intel OpenMP Runtime Library (libiomp)": [[231, "intel-openmp-runtime-library-libiomp"]], "Switch Memory allocator": [[231, "switch-memory-allocator"]], "Train a model on CPU with PyTorch ``DistributedDataParallel``(DDP) functionality": [[231, "train-a-model-on-cpu-with-pytorch-distributeddataparallel-ddp-functionality"]], "GPU specific optimizations": [[231, "gpu-specific-optimizations"]], "Enable Tensor cores": [[231, "enable-tensor-cores"]], "Use CUDA Graphs": [[231, "use-cuda-graphs"]], "Enable cuDNN auto-tuner": [[231, "enable-cudnn-auto-tuner"]], "Avoid unnecessary CPU-GPU synchronization": [[231, "avoid-unnecessary-cpu-gpu-synchronization"]], "Create tensors directly on the target device": [[231, "create-tensors-directly-on-the-target-device"]], "Use mixed precision and AMP": [[231, "use-mixed-precision-and-amp"]], "Preallocate memory in case of variable input length": [[231, "preallocate-memory-in-case-of-variable-input-length"]], "Distributed optimizations": [[231, "distributed-optimizations"]], "Use efficient data-parallel backend": [[231, "use-efficient-data-parallel-backend"]], "Skip unnecessary all-reduce if training with DistributedDataParallel and gradient accumulation": [[231, "skip-unnecessary-all-reduce-if-training-with-distributeddataparallel-and-gradient-accumulation"]], "Match the order of layers in constructors and during the execution if using DistributedDataParallel(find_unused_parameters=True)": [[231, "match-the-order-of-layers-in-constructors-and-during-the-execution-if-using-distributeddataparallel-find-unused-parameters-true"]], "Load-balance workload in a distributed setting": [[231, "load-balance-workload-in-a-distributed-setting"]], "Warmstarting model using parameters from a different model in PyTorch": [[232, "warmstarting-model-using-parameters-from-a-different-model-in-pytorch"]], "2. Define and initialize the neural network A and B": [[232, "define-and-initialize-the-neural-network-a-and-b"]], "3. Save model A": [[232, "save-model-a"]], "4. Load into model B": [[232, "load-into-model-b"]], "What is a state_dict in PyTorch": [[233, "what-is-a-state-dict-in-pytorch"]], "3. Initialize the optimizer": [[233, "initialize-the-optimizer"]], "4. Access the model and optimizer state_dict": [[233, "access-the-model-and-optimizer-state-dict"]], "Zeroing out gradients in PyTorch": [[234, "zeroing-out-gradients-in-pytorch"]], "2. Load and normalize the dataset": [[234, "load-and-normalize-the-dataset"]], "3. Build the neural network": [[234, "build-the-neural-network"]], "4. Define a Loss function and optimizer": [[234, "define-a-loss-function-and-optimizer"]], "5. Zero the gradients while training the network": [[234, "zero-the-gradients-while-training-the-network"]], "Reducing AoT cold start compilation time with regional compilation": [[235, "reducing-aot-cold-start-compilation-time-with-regional-compilation"]], "Defining the Neural Network": [[235, "defining-the-neural-network"]], "Compiling the model ahead-of-time": [[235, "compiling-the-model-ahead-of-time"]], "Compiling _regions_ of the model ahead-of-time": [[235, "compiling-regions-of-the-model-ahead-of-time"]], "Measuring compilation time": [[235, "measuring-compilation-time"]], "Reducing torch.compile cold start compilation time with regional compilation": [[236, "reducing-torch-compile-cold-start-compilation-time-with-regional-compilation"]], "Script and Optimize for Mobile Recipe": [[237, "script-and-optimize-for-mobile-recipe"]], "Compile Time Caching Configuration": [[239, "compile-time-caching-configuration"]], "Inductor Cache Settings": [[239, "inductor-cache-settings"]], "TORCHINDUCTOR_FX_GRAPH_CACHE": [[239, "torchinductor-fx-graph-cache"]], "TORCHINDUCTOR_AUTOGRAD_CACHE": [[239, "torchinductor-autograd-cache"]], "TORCHINDUCTOR_CACHE_DIR": [[239, "torchinductor-cache-dir"]], "TORCHINDUCTOR_FX_GRAPH_REMOTE_CACHE": [[239, "torchinductor-fx-graph-remote-cache"]], "TORCHINDUCTOR_AUTOGRAD_REMOTE_CACHE": [[239, "torchinductor-autograd-remote-cache"]], "TORCHINDUCTOR_AUTOTUNE_REMOTE_CACHE": [[239, "torchinductor-autotune-remote-cache"]], "TORCHINDUCTOR_FORCE_DISABLE_CACHES": [[239, "torchinductor-force-disable-caches"]], "Compile Time Caching in torch.compile": [[240, "compile-time-caching-in-torch-compile"]], "Caching Offerings": [[240, "caching-offerings"]], "torch.compile end-to-end caching (Mega-Cache)": [[240, "torch-compile-end-to-end-caching-mega-cache"]], "Modular caching of TorchDynamo, TorchInductor, and Triton": [[240, "modular-caching-of-torchdynamo-torchinductor-and-triton"]], "Remote Caching": [[240, "remote-caching"]], "(beta) Utilizing Torch Function modes with torch.compile": [[241, "beta-utilizing-torch-function-modes-with-torch-compile"]], "Rewriting a torch op (torch.add -> torch.mul)": [[241, "rewriting-a-torch-op-torch-add-torch-mul"]], "Using User-Defined Triton Kernels with torch.compile": [[242, "using-user-defined-triton-kernels-with-torch-compile"]], "Advanced Usage": [[242, "advanced-usage"]], "Composability": [[242, "composability"]], "Wrapping Triton kernels with triton_op": [[242, "wrapping-triton-kernels-with-triton-op"]], "Adding training support": [[242, "adding-training-support"]], "Adding a CPU Fallback": [[242, "adding-a-cpu-fallback"]], "Adding a FlopCounter Formula": [[242, "adding-a-flopcounter-formula"]], "Limitations": [[242, "limitations"]], "Dynamic Compilation Control with torch.compiler.set_stance": [[243, "dynamic-compilation-control-with-torch-compiler-set-stance"]], "Description": [[243, "description"]], "Preventing recompilation": [[243, "preventing-recompilation"]], "Measuring performance gains": [[243, "measuring-performance-gains"]], "Crashing sooner": [[243, "crashing-sooner"]], "torch.export AOTInductor Tutorial for Python runtime (Beta)": [[244, "torch-export-aotinductor-tutorial-for-python-runtime-beta"]], "Model Compilation": [[244, "model-compilation"]], "Model Inference in Python": [[244, "model-inference-in-python"]], "When to use AOTInductor with a Python Runtime": [[244, "when-to-use-aotinductor-with-a-python-runtime"]], "Demonstration of torch.export flow, common challenges and the solutions to address them": [[245, "demonstration-of-torch-export-flow-common-challenges-and-the-solutions-to-address-them"]], "Key requirement for torch.export: No graph break": [[245, "key-requirement-for-torch-export-no-graph-break"]], "Video Classification": [[245, "video-classification"]], "Error: Static batch size": [[245, "error-static-batch-size"]], "Solution": [[245, "solution"], [245, "id1"], [245, "id2"], [245, "id3"]], "Automatic Speech Recognition": [[245, "automatic-speech-recognition"]], "Error: strict tracing with TorchDynamo": [[245, "error-strict-tracing-with-torchdynamo"]], "Image Captioning": [[245, "image-captioning"]], "Error: Cannot mutate tensors with frozen storage": [[245, "error-cannot-mutate-tensors-with-frozen-storage"]], "Promptable Image Segmentation": [[245, "promptable-image-segmentation"]], "Error: Model is not of type torch.nn.Module": [[245, "error-model-is-not-of-type-torch-nn-module"]], "(beta) Using TORCH_LOGS python API with torch.compile": [[246, "beta-using-torch-logs-python-api-with-torch-compile"]], "Optimizing CPU Performance on Intel\u00ae Xeon\u00ae with run_cpu Script": [[248, "optimizing-cpu-performance-on-intel-xeon-with-run-cpu-script"]], "What You Will Learn": [[248, "what-you-will-learn"]], "Introduction of the Optimizations": [[248, "introduction-of-the-optimizations"]], "Applying NUMA Access Control": [[248, "applying-numa-access-control"]], "Using Intel\u00ae OpenMP Runtime Library": [[248, "using-intel-openmp-runtime-library"]], "Choosing an Optimized Memory Allocator": [[248, "choosing-an-optimized-memory-allocator"]], "Quick Start Example Commands": [[248, "quick-start-example-commands"]], "Using torch.backends.xeon.run_cpu": [[248, "using-torch-backends-xeon-run-cpu"]], "Explanation of the options": [[248, "explanation-of-the-options"]], "Shard Optimizer States with ZeroRedundancyOptimizer": [[249, "shard-optimizer-states-with-zeroredundancyoptimizer"]], "What is ZeroRedundancyOptimizer?": [[249, "what-is-zeroredundancyoptimizer"]], "How to use ZeroRedundancyOptimizer?": [[249, "how-to-use-zeroredundancyoptimizer"]], "Recipes": [[250, "recipes"]], "Introduction to Context Parallel": [[252, "introduction-to-context-parallel"]], "Enable Context Parallel": [[252, "enable-context-parallel"]], "Select Rotation Approach": [[252, "select-rotation-approach"]], "Flight Recorder for Debugging Stuck Jobs": [[254, "flight-recorder-for-debugging-stuck-jobs"]], "Enabling Flight Recorder": [[254, "enabling-flight-recorder"]], "Additional Settings": [[254, "additional-settings"]], "Retrieving Flight Recorder Data via an API": [[254, "retrieving-flight-recorder-data-via-an-api"]], "Flight Recorder File Formats": [[254, "flight-recorder-file-formats"]], "Analyzing Flight Recorder Dumps": [[254, "analyzing-flight-recorder-dumps"]], "An End-to-End Example": [[254, "an-end-to-end-example"]], "(prototype) Accelerating torch.save and torch.load with GPUDirect Storage": [[255, "prototype-accelerating-torch-save-and-torch-load-with-gpudirect-storage"]], "Using GPUDirect Storage with torch.save and torch.load": [[255, "using-gpudirect-storage-with-torch-save-and-torch-load"]], "(prototype) GPU Quantization with TorchAO": [[256, "prototype-gpu-quantization-with-torchao"]], "Set up Your Environment": [[256, "set-up-your-environment"]], "Inductor C++ Wrapper Tutorial": [[257, "inductor-c-wrapper-tutorial"]], "Prerequisites:": [[257, "prerequisites"], [267, "prerequisites"]], "Enabling the API": [[257, "enabling-the-api"]], "Example code": [[257, "example-code"]], "How to use torch.compile on Windows CPU/XPU": [[258, "how-to-use-torch-compile-on-windows-cpu-xpu"]], "Software Installation": [[258, "software-installation"]], "Install a Compiler": [[258, "install-a-compiler"]], "Set Up Environment": [[258, "set-up-environment"]], "Alternative Compiler for better performance on CPU": [[258, "id1"]], "Intel Compiler": [[258, "id2"]], "LLVM Compiler": [[258, "id4"]], "(Prototype) Convert Mobilenetv2 to Core ML": [[260, "prototype-convert-mobilenetv2-to-core-ml"]], "(Prototype) Use iOS GPU in PyTorch": [[261, "prototype-use-ios-gpu-in-pytorch"]], "(Prototype) Introduce lite interpreter workflow in Android and iOS": [[262, "prototype-introduce-lite-interpreter-workflow-in-android-and-ios"]], "Efficiently writing \u201csparse\u201d semantics for Adagrad with MaskedTensor": [[263, "efficiently-writing-sparse-semantics-for-adagrad-with-maskedtensor"]], "Introduction and Motivation": [[263, "introduction-and-motivation"]], "Preparation": [[263, "preparation"], [264, "preparation"], [265, "preparation"]], "Simpler Code with MaskedTensor": [[263, "simpler-code-with-maskedtensor"]], "Original Sparse Implementation": [[263, "original-sparse-implementation"]], "MaskedTensor Sparse Implementation": [[263, "maskedtensor-sparse-implementation"]], "MaskedTensor Advanced Semantics": [[264, "maskedtensor-advanced-semantics"]], "MaskedTensor vs NumPy\u2019s MaskedArray": [[264, "maskedtensor-vs-numpy-s-maskedarray"]], "Reduction Semantics": [[264, "reduction-semantics"]], "MaskedTensor Overview": [[265, "maskedtensor-overview"]], "Using MaskedTensor": [[265, "using-maskedtensor"]], "Construction": [[265, "construction"]], "Accessing the data and mask": [[265, "accessing-the-data-and-mask"]], "Indexing and slicing": [[265, "indexing-and-slicing"]], "Why is MaskedTensor useful?": [[265, "why-is-maskedtensor-useful"]], "Distinguishing between 0 and NaN gradient": [[265, "distinguishing-between-0-and-nan-gradient"]], "torch.where": [[265, "torch-where"]], "Another torch.where": [[265, "another-torch-where"]], "When using mask, x/0 yields NaN grad": [[265, "when-using-mask-x-0-yields-nan-grad"]], "torch.nansum() and torch.nanmean()": [[265, "torch-nansum-and-torch-nanmean"]], "Safe Softmax": [[265, "safe-softmax"]], "Implementing missing torch.nan* operators": [[265, "implementing-missing-torch-nan-operators"]], "MaskedTensor Sparsity": [[266, "maskedtensor-sparsity"]], "Principles": [[266, "principles"]], "Sparse COO tensors": [[266, "sparse-coo-tensors"]], "Sparse CSR tensors": [[266, "sparse-csr-tensors"]], "Supported Operations": [[266, "supported-operations"]], "Unary": [[266, "unary"]], "Binary": [[266, "binary"]], "Reductions": [[266, "reductions"]], "MaskedTensor Helper Methods": [[266, "maskedtensor-helper-methods"]], "Appendix": [[266, "appendix"]], "Sparse COO Construction": [[266, "sparse-coo-construction"]], "Sparse CSR Construction": [[266, "sparse-csr-construction"]], "Using Max-Autotune Compilation on CPU for Better Performance": [[267, "using-max-autotune-compilation-on-cpu-for-better-performance"]], "Activating the max-autotune mode": [[267, "activating-the-max-autotune-mode"]], "Example": [[267, "example"]], "Getting Started with Nested Tensors": [[268, "getting-started-with-nested-tensors"]], "Nested tensor initialization": [[268, "nested-tensor-initialization"]], "Nested Tensor Operations": [[268, "nested-tensor-operations"]], "Why Nested Tensor": [[268, "why-nested-tensor"]], "(Beta) Convert MobileNetV2 to NNAPI": [[269, "beta-convert-mobilenetv2-to-nnapi"]], "PyTorch 2 Export Quantization for OpenVINO torch.compile Backend": [[270, "pytorch-2-export-quantization-for-openvino-torch-compile-backend"]], "Post Training Quantization": [[270, "post-training-quantization"]], "Prerequisite: OpenVINO and NNCF installation": [[270, "prerequisite-openvino-and-nncf-installation"]], "1. Capture FX Graph": [[270, "capture-fx-graph"]], "2. Apply Quantization": [[270, "apply-quantization"]], "3. Lower into OpenVINO representation": [[270, "lower-into-openvino-representation"]], "4. Optional: Improve quantized model metrics": [[270, "optional-improve-quantized-model-metrics"]], "Autoloading Out-of-Tree Extension": [[271, "autoloading-out-of-tree-extension"]], "How to apply this mechanism to out-of-tree extensions?": [[271, "how-to-apply-this-mechanism-to-out-of-tree-extensions"]], "How it works": [[271, "how-it-works"]], "(prototype) Tracing-based Selective Build Mobile Interpreter in Android and iOS": [[273, "prototype-tracing-based-selective-build-mobile-interpreter-in-android-and-ios"]], "torch.vmap": [[274, "torch-vmap"]], "So, what is vmap?": [[274, "so-what-is-vmap"]], "Unstable": [[275, "unstable"]]}, "indexentries": {}})