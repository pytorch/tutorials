Search.setIndex({"docnames": ["advanced/ONNXLive", "advanced/coding_ddpg", "advanced/cpp_autograd", "advanced/cpp_custom_ops", "advanced/cpp_custom_ops_sycl", "advanced/cpp_export", "advanced/cpp_frontend", "advanced/custom_class_pt2", "advanced/custom_classes", "advanced/custom_ops_landing_page", "advanced/ddp_pipeline", "advanced/dispatcher", "advanced/extend_dispatcher", "advanced/generic_join", "advanced/neural_style_tutorial", "advanced/numpy_extensions_tutorial", "advanced/pendulum", "advanced/privateuseone", "advanced/python_custom_ops", "advanced/rpc_ddp_tutorial", "advanced/semi_structured_sparse", "advanced/sg_execution_times", "advanced/sharding", "advanced/torch-script-parallelism", "advanced/torch_script_custom_ops", "advanced/usb_semisup_learn", "beginner/audio_data_augmentation_tutorial", "beginner/audio_datasets_tutorial", "beginner/audio_feature_augmentation_tutorial", "beginner/audio_feature_extractions_tutorial", "beginner/audio_io_tutorial", "beginner/audio_resampling_tutorial", "beginner/basics/autogradqs_tutorial", "beginner/basics/buildmodel_tutorial", "beginner/basics/data_tutorial", "beginner/basics/index", "beginner/basics/intro", "beginner/basics/optimization_tutorial", "beginner/basics/quickstart_tutorial", "beginner/basics/saveloadrun_tutorial", "beginner/basics/sg_execution_times", "beginner/basics/tensorqs_tutorial", "beginner/basics/transforms_tutorial", "beginner/bettertransformer_tutorial", "beginner/blitz/autograd_tutorial", "beginner/blitz/cifar10_tutorial", "beginner/blitz/data_parallel_tutorial", "beginner/blitz/index", "beginner/blitz/neural_networks_tutorial", "beginner/blitz/sg_execution_times", "beginner/blitz/tensor_tutorial", "beginner/chatbot_tutorial", "beginner/colab", "beginner/data_loading_tutorial", "beginner/dcgan_faces_tutorial", "beginner/ddp_series_fault_tolerance", "beginner/ddp_series_intro", "beginner/ddp_series_multigpu", "beginner/ddp_series_theory", "beginner/deep_learning_60min_blitz", "beginner/deeplabv3_on_android", "beginner/deeplabv3_on_ios", "beginner/dist_overview", "beginner/examples_autograd/index", "beginner/examples_autograd/polynomial_autograd", "beginner/examples_autograd/polynomial_custom_function", "beginner/examples_autograd/sg_execution_times", "beginner/examples_nn/dynamic_net", "beginner/examples_nn/index", "beginner/examples_nn/polynomial_module", "beginner/examples_nn/polynomial_nn", "beginner/examples_nn/polynomial_optim", "beginner/examples_nn/sg_execution_times", "beginner/examples_tensor/index", "beginner/examples_tensor/polynomial_numpy", "beginner/examples_tensor/polynomial_tensor", "beginner/examples_tensor/sg_execution_times", "beginner/fgsm_tutorial", "beginner/finetuning_torchvision_models_tutorial", "beginner/former_torchies/autograd_tutorial_old", "beginner/former_torchies/nnft_tutorial", "beginner/former_torchies/parallelism_tutorial", "beginner/former_torchies/tensor_tutorial_old", "beginner/former_torchies_tutorial", "beginner/hta_intro_tutorial", "beginner/hta_trace_diff_tutorial", "beginner/hybrid_frontend/index", "beginner/hybrid_frontend/learning_hybrid_frontend_through_example_tutorial", "beginner/hybrid_frontend/sg_execution_times", "beginner/hybrid_frontend_tutorial", "beginner/hyperparameter_tuning_tutorial", "beginner/introyt", "beginner/introyt/autogradyt_tutorial", "beginner/introyt/captumyt", "beginner/introyt/index", "beginner/introyt/introyt1_tutorial", "beginner/introyt/introyt_index", "beginner/introyt/modelsyt_tutorial", "beginner/introyt/sg_execution_times", "beginner/introyt/tensorboardyt_tutorial", "beginner/introyt/tensors_deeper_tutorial", "beginner/introyt/trainingyt", "beginner/knowledge_distillation_tutorial", "beginner/nlp/advanced_tutorial", "beginner/nlp/deep_learning_tutorial", "beginner/nlp/index", "beginner/nlp/pytorch_tutorial", "beginner/nlp/sequence_models_tutorial", "beginner/nlp/sg_execution_times", "beginner/nlp/word_embeddings_tutorial", "beginner/nn_tutorial", "beginner/onnx/export_control_flow_model_to_onnx_tutorial", "beginner/onnx/export_simple_model_to_onnx_tutorial", "beginner/onnx/index", "beginner/onnx/intro_onnx", "beginner/onnx/onnx_registry_tutorial", "beginner/onnx/sg_execution_times", "beginner/profiler", "beginner/pytorch_with_examples", "beginner/saving_loading_models", "beginner/sg_execution_times", "beginner/t5_tutoria", "beginner/template_tutorial", "beginner/text_sentiment_ngrams_tutorial", "beginner/torchtext_custom_dataset_tutorial", "beginner/transfer_learning_tutorial", "beginner/transformer_tutorial", "beginner/translation_transformer", "beginner/understanding_leaf_vs_nonleaf_tutorial", "compilers_index", "deep-dive", "distributed", "domains", "ecosystem", "extension", "index", "intermediate/FSDP1_tutorial", "intermediate/FSDP_advanced_tutorial", "intermediate/FSDP_tutorial", "intermediate/TCPStore_libuv_backend", "intermediate/TP_tutorial", "intermediate/autograd_saved_tensors_hooks_tutorial", "intermediate/ax_multiobjective_nas_tutorial", "intermediate/char_rnn_classification_tutorial", "intermediate/char_rnn_generation_tutorial", "intermediate/compiled_autograd_tutorial", "intermediate/custom_function_conv_bn_tutorial", "intermediate/custom_function_double_backward_tutorial", "intermediate/ddp_series_minGPT", "intermediate/ddp_series_multinode", "intermediate/ddp_tutorial", "intermediate/dist_pipeline_parallel_tutorial", "intermediate/dist_tuto", "intermediate/dqn_with_rnn_tutorial", "intermediate/ensembling", "intermediate/forced_alignment_with_torchaudio_tutorial", "intermediate/forward_ad_usage", "intermediate/fx_profiling_tutorial", "intermediate/inductor_debug_cpu", "intermediate/jacobians_hessians", "intermediate/mario_rl_tutorial", "intermediate/memory_format_tutorial", "intermediate/mnist_train_nas", "intermediate/model_parallel_tutorial", "intermediate/neural_tangent_kernels", "intermediate/nlp_from_scratch_index", "intermediate/nvfuser_intro_tutorial", "intermediate/optimizer_step_in_backward_tutorial", "intermediate/parametrizations", "intermediate/per_sample_grads", "intermediate/pinmem_nonblock", "intermediate/pipeline_tutorial", "intermediate/pipelining_tutorial", "intermediate/process_group_cpp_extension_tutorial", "intermediate/pruning_tutorial", "intermediate/realtime_rpi", "intermediate/reinforcement_ppo", "intermediate/reinforcement_q_learning", "intermediate/rpc_async_execution", "intermediate/rpc_param_server_tutorial", "intermediate/rpc_tutorial", "intermediate/scaled_dot_product_attention_tutorial", "intermediate/seq2seq_translation_tutorial", "intermediate/sg_execution_times", "intermediate/spatial_transformer_tutorial", "intermediate/speech_recognition_pipeline_tutorial", "intermediate/tensorboard_profiler_tutorial", "intermediate/tensorboard_tutorial", "intermediate/text_to_speech_with_torchaudio", "intermediate/tiatoolbox_tutorial", "intermediate/torch_compile_conv_bn_fuser", "intermediate/torch_compile_tutorial", "intermediate/torch_export_nightly_tutorial", "intermediate/torch_export_tutorial", "intermediate/torchrec_intro_tutorial", "intermediate/torchrec_tutorial", "intermediate/torchvision_tutorial", "intermediate/transformer_building_blocks", "intermediate/visualizing_gradients_tutorial", "intro", "recipes/amx", "recipes/android_native_app_with_custom_op", "recipes/compiling_optimizer", "recipes/compiling_optimizer_lr_scheduler", "recipes/distributed_async_checkpoint_recipe", "recipes/distributed_checkpoint_recipe", "recipes/distributed_comm_debug_mode", "recipes/distributed_device_mesh", "recipes/distributed_optim_torchscript", "recipes/distributed_rpc_profiling", "recipes/foreach_map", "recipes/inference_tuning_on_aws_graviton", "recipes/intel_extension_for_pytorch", "recipes/intel_neural_compressor_for_pytorch", "recipes/loading_data_recipe", "recipes/mobile_interpreter", "recipes/mobile_perf", "recipes/model_preparation_android", "recipes/model_preparation_ios", "recipes/profile_with_itt", "recipes/ptmobile_recipes_summary", "recipes/recipes/Captum_Recipe", "recipes/recipes/amp_recipe", "recipes/recipes/benchmark", "recipes/recipes/changing_default_device", "recipes/recipes/defining_a_neural_network", "recipes/recipes/index", "recipes/recipes/module_load_state_dict_tips", "recipes/recipes/profiler_recipe", "recipes/recipes/reasoning_about_shapes", "recipes/recipes/save_load_across_devices", "recipes/recipes/saving_and_loading_a_general_checkpoint", "recipes/recipes/saving_and_loading_models_for_inference", "recipes/recipes/saving_multiple_models_in_one_file", "recipes/recipes/sg_execution_times", "recipes/recipes/swap_tensors", "recipes/recipes/tensorboard_with_pytorch", "recipes/recipes/timer_quick_start", "recipes/recipes/tuning_guide", "recipes/recipes/warmstarting_model_using_parameters_from_a_different_model", "recipes/recipes/what_is_state_dict", "recipes/recipes/zeroing_out_gradients", "recipes/regional_aot", "recipes/regional_compilation", "recipes/script_optimized", "recipes/sg_execution_times", "recipes/torch_compile_backend_ipex", "recipes/torch_compile_caching_configuration_tutorial", "recipes/torch_compile_caching_tutorial", "recipes/torch_compile_torch_function_modes", "recipes/torch_compile_user_defined_triton_kernel_tutorial", "recipes/torch_compiler_set_stance_tutorial", "recipes/torch_export_aoti_python", "recipes/torch_export_challenges_solutions", "recipes/torch_logs", "recipes/torchscript_inference", "recipes/xeon_run_cpu", "recipes/zero_redundancy_optimizer", "recipes_index", "sg_execution_times", "unstable/context_parallel", "unstable/distributed_rpc_profiling", "unstable/flight_recorder_tutorial", "unstable/gpu_direct_storage", "unstable/gpu_quantization_torchao_tutorial", "unstable/inductor_cpp_wrapper_tutorial", "unstable/inductor_windows", "unstable/inductor_windows_cpu", "unstable/ios_coreml_workflow", "unstable/ios_gpu_workflow", "unstable/lite_interpreter", "unstable/maskedtensor_adagrad", "unstable/maskedtensor_advanced_semantics", "unstable/maskedtensor_overview", "unstable/maskedtensor_sparsity", "unstable/max_autotune_on_CPU_tutorial", "unstable/nestedtensor", "unstable/nnapi_mobilenetv2", "unstable/openvino_quantizer", "unstable/python_extension_autoload", "unstable/semi_structured_sparse", "unstable/sg_execution_times", "unstable/tracing_based_selective_build", "unstable/vmap_recipe", "unstable_index"], "filenames": ["advanced/ONNXLive.rst", "advanced/coding_ddpg.rst", "advanced/cpp_autograd.rst", "advanced/cpp_custom_ops.rst", "advanced/cpp_custom_ops_sycl.rst", "advanced/cpp_export.rst", "advanced/cpp_frontend.rst", "advanced/custom_class_pt2.rst", "advanced/custom_classes.rst", "advanced/custom_ops_landing_page.rst", "advanced/ddp_pipeline.rst", "advanced/dispatcher.rst", "advanced/extend_dispatcher.rst", "advanced/generic_join.rst", "advanced/neural_style_tutorial.rst", "advanced/numpy_extensions_tutorial.rst", "advanced/pendulum.rst", "advanced/privateuseone.rst", "advanced/python_custom_ops.rst", "advanced/rpc_ddp_tutorial.rst", "advanced/semi_structured_sparse.rst", "advanced/sg_execution_times.rst", "advanced/sharding.rst", "advanced/torch-script-parallelism.rst", "advanced/torch_script_custom_ops.rst", "advanced/usb_semisup_learn.rst", "beginner/audio_data_augmentation_tutorial.rst", "beginner/audio_datasets_tutorial.rst", "beginner/audio_feature_augmentation_tutorial.rst", "beginner/audio_feature_extractions_tutorial.rst", "beginner/audio_io_tutorial.rst", "beginner/audio_resampling_tutorial.rst", "beginner/basics/autogradqs_tutorial.rst", "beginner/basics/buildmodel_tutorial.rst", "beginner/basics/data_tutorial.rst", "beginner/basics/index.rst", "beginner/basics/intro.rst", "beginner/basics/optimization_tutorial.rst", "beginner/basics/quickstart_tutorial.rst", "beginner/basics/saveloadrun_tutorial.rst", "beginner/basics/sg_execution_times.rst", "beginner/basics/tensorqs_tutorial.rst", "beginner/basics/transforms_tutorial.rst", "beginner/bettertransformer_tutorial.rst", "beginner/blitz/autograd_tutorial.rst", "beginner/blitz/cifar10_tutorial.rst", "beginner/blitz/data_parallel_tutorial.rst", "beginner/blitz/index.rst", "beginner/blitz/neural_networks_tutorial.rst", "beginner/blitz/sg_execution_times.rst", "beginner/blitz/tensor_tutorial.rst", "beginner/chatbot_tutorial.rst", "beginner/colab.rst", "beginner/data_loading_tutorial.rst", "beginner/dcgan_faces_tutorial.rst", "beginner/ddp_series_fault_tolerance.rst", "beginner/ddp_series_intro.rst", "beginner/ddp_series_multigpu.rst", "beginner/ddp_series_theory.rst", "beginner/deep_learning_60min_blitz.rst", "beginner/deeplabv3_on_android.rst", "beginner/deeplabv3_on_ios.rst", "beginner/dist_overview.rst", "beginner/examples_autograd/index.rst", "beginner/examples_autograd/polynomial_autograd.rst", "beginner/examples_autograd/polynomial_custom_function.rst", "beginner/examples_autograd/sg_execution_times.rst", "beginner/examples_nn/dynamic_net.rst", "beginner/examples_nn/index.rst", "beginner/examples_nn/polynomial_module.rst", "beginner/examples_nn/polynomial_nn.rst", "beginner/examples_nn/polynomial_optim.rst", "beginner/examples_nn/sg_execution_times.rst", "beginner/examples_tensor/index.rst", "beginner/examples_tensor/polynomial_numpy.rst", "beginner/examples_tensor/polynomial_tensor.rst", "beginner/examples_tensor/sg_execution_times.rst", "beginner/fgsm_tutorial.rst", "beginner/finetuning_torchvision_models_tutorial.rst", "beginner/former_torchies/autograd_tutorial_old.rst", "beginner/former_torchies/nnft_tutorial.rst", "beginner/former_torchies/parallelism_tutorial.rst", "beginner/former_torchies/tensor_tutorial_old.rst", "beginner/former_torchies_tutorial.rst", "beginner/hta_intro_tutorial.rst", "beginner/hta_trace_diff_tutorial.rst", "beginner/hybrid_frontend/index.rst", "beginner/hybrid_frontend/learning_hybrid_frontend_through_example_tutorial.rst", "beginner/hybrid_frontend/sg_execution_times.rst", "beginner/hybrid_frontend_tutorial.rst", "beginner/hyperparameter_tuning_tutorial.rst", "beginner/introyt.rst", "beginner/introyt/autogradyt_tutorial.rst", "beginner/introyt/captumyt.rst", "beginner/introyt/index.rst", "beginner/introyt/introyt1_tutorial.rst", "beginner/introyt/introyt_index.rst", "beginner/introyt/modelsyt_tutorial.rst", "beginner/introyt/sg_execution_times.rst", "beginner/introyt/tensorboardyt_tutorial.rst", "beginner/introyt/tensors_deeper_tutorial.rst", "beginner/introyt/trainingyt.rst", "beginner/knowledge_distillation_tutorial.rst", "beginner/nlp/advanced_tutorial.rst", "beginner/nlp/deep_learning_tutorial.rst", "beginner/nlp/index.rst", "beginner/nlp/pytorch_tutorial.rst", "beginner/nlp/sequence_models_tutorial.rst", "beginner/nlp/sg_execution_times.rst", "beginner/nlp/word_embeddings_tutorial.rst", "beginner/nn_tutorial.rst", "beginner/onnx/export_control_flow_model_to_onnx_tutorial.rst", "beginner/onnx/export_simple_model_to_onnx_tutorial.rst", "beginner/onnx/index.rst", "beginner/onnx/intro_onnx.rst", "beginner/onnx/onnx_registry_tutorial.rst", "beginner/onnx/sg_execution_times.rst", "beginner/profiler.rst", "beginner/pytorch_with_examples.rst", "beginner/saving_loading_models.rst", "beginner/sg_execution_times.rst", "beginner/t5_tutoria.rst", "beginner/template_tutorial.rst", "beginner/text_sentiment_ngrams_tutorial.rst", "beginner/torchtext_custom_dataset_tutorial.rst", "beginner/transfer_learning_tutorial.rst", "beginner/transformer_tutorial.rst", "beginner/translation_transformer.rst", "beginner/understanding_leaf_vs_nonleaf_tutorial.rst", "compilers_index.rst", "deep-dive.rst", "distributed.rst", "domains.rst", "ecosystem.rst", "extension.rst", "index.rst", "intermediate/FSDP1_tutorial.rst", "intermediate/FSDP_advanced_tutorial.rst", "intermediate/FSDP_tutorial.rst", "intermediate/TCPStore_libuv_backend.rst", "intermediate/TP_tutorial.rst", "intermediate/autograd_saved_tensors_hooks_tutorial.rst", "intermediate/ax_multiobjective_nas_tutorial.rst", "intermediate/char_rnn_classification_tutorial.rst", "intermediate/char_rnn_generation_tutorial.rst", "intermediate/compiled_autograd_tutorial.rst", "intermediate/custom_function_conv_bn_tutorial.rst", "intermediate/custom_function_double_backward_tutorial.rst", "intermediate/ddp_series_minGPT.rst", "intermediate/ddp_series_multinode.rst", "intermediate/ddp_tutorial.rst", "intermediate/dist_pipeline_parallel_tutorial.rst", "intermediate/dist_tuto.rst", "intermediate/dqn_with_rnn_tutorial.rst", "intermediate/ensembling.rst", "intermediate/forced_alignment_with_torchaudio_tutorial.rst", "intermediate/forward_ad_usage.rst", "intermediate/fx_profiling_tutorial.rst", "intermediate/inductor_debug_cpu.rst", "intermediate/jacobians_hessians.rst", "intermediate/mario_rl_tutorial.rst", "intermediate/memory_format_tutorial.rst", "intermediate/mnist_train_nas.rst", "intermediate/model_parallel_tutorial.rst", "intermediate/neural_tangent_kernels.rst", "intermediate/nlp_from_scratch_index.rst", "intermediate/nvfuser_intro_tutorial.rst", "intermediate/optimizer_step_in_backward_tutorial.rst", "intermediate/parametrizations.rst", "intermediate/per_sample_grads.rst", "intermediate/pinmem_nonblock.rst", "intermediate/pipeline_tutorial.rst", "intermediate/pipelining_tutorial.rst", "intermediate/process_group_cpp_extension_tutorial.rst", "intermediate/pruning_tutorial.rst", "intermediate/realtime_rpi.rst", "intermediate/reinforcement_ppo.rst", "intermediate/reinforcement_q_learning.rst", "intermediate/rpc_async_execution.rst", "intermediate/rpc_param_server_tutorial.rst", "intermediate/rpc_tutorial.rst", "intermediate/scaled_dot_product_attention_tutorial.rst", "intermediate/seq2seq_translation_tutorial.rst", "intermediate/sg_execution_times.rst", "intermediate/spatial_transformer_tutorial.rst", "intermediate/speech_recognition_pipeline_tutorial.rst", "intermediate/tensorboard_profiler_tutorial.rst", "intermediate/tensorboard_tutorial.rst", "intermediate/text_to_speech_with_torchaudio.rst", "intermediate/tiatoolbox_tutorial.rst", "intermediate/torch_compile_conv_bn_fuser.rst", "intermediate/torch_compile_tutorial.rst", "intermediate/torch_export_nightly_tutorial.rst", "intermediate/torch_export_tutorial.rst", "intermediate/torchrec_intro_tutorial.rst", "intermediate/torchrec_tutorial.rst", "intermediate/torchvision_tutorial.rst", "intermediate/transformer_building_blocks.rst", "intermediate/visualizing_gradients_tutorial.rst", "intro.rst", "recipes/amx.rst", "recipes/android_native_app_with_custom_op.rst", "recipes/compiling_optimizer.rst", "recipes/compiling_optimizer_lr_scheduler.rst", "recipes/distributed_async_checkpoint_recipe.rst", "recipes/distributed_checkpoint_recipe.rst", "recipes/distributed_comm_debug_mode.rst", "recipes/distributed_device_mesh.rst", "recipes/distributed_optim_torchscript.rst", "recipes/distributed_rpc_profiling.rst", "recipes/foreach_map.rst", "recipes/inference_tuning_on_aws_graviton.rst", "recipes/intel_extension_for_pytorch.rst", "recipes/intel_neural_compressor_for_pytorch.rst", "recipes/loading_data_recipe.rst", "recipes/mobile_interpreter.rst", "recipes/mobile_perf.rst", "recipes/model_preparation_android.rst", "recipes/model_preparation_ios.rst", "recipes/profile_with_itt.rst", "recipes/ptmobile_recipes_summary.rst", "recipes/recipes/Captum_Recipe.rst", "recipes/recipes/amp_recipe.rst", "recipes/recipes/benchmark.rst", "recipes/recipes/changing_default_device.rst", "recipes/recipes/defining_a_neural_network.rst", "recipes/recipes/index.rst", "recipes/recipes/module_load_state_dict_tips.rst", "recipes/recipes/profiler_recipe.rst", "recipes/recipes/reasoning_about_shapes.rst", "recipes/recipes/save_load_across_devices.rst", "recipes/recipes/saving_and_loading_a_general_checkpoint.rst", "recipes/recipes/saving_and_loading_models_for_inference.rst", "recipes/recipes/saving_multiple_models_in_one_file.rst", "recipes/recipes/sg_execution_times.rst", "recipes/recipes/swap_tensors.rst", "recipes/recipes/tensorboard_with_pytorch.rst", "recipes/recipes/timer_quick_start.rst", "recipes/recipes/tuning_guide.rst", "recipes/recipes/warmstarting_model_using_parameters_from_a_different_model.rst", "recipes/recipes/what_is_state_dict.rst", "recipes/recipes/zeroing_out_gradients.rst", "recipes/regional_aot.rst", "recipes/regional_compilation.rst", "recipes/script_optimized.rst", "recipes/sg_execution_times.rst", "recipes/torch_compile_backend_ipex.rst", "recipes/torch_compile_caching_configuration_tutorial.rst", "recipes/torch_compile_caching_tutorial.rst", "recipes/torch_compile_torch_function_modes.rst", "recipes/torch_compile_user_defined_triton_kernel_tutorial.rst", "recipes/torch_compiler_set_stance_tutorial.rst", "recipes/torch_export_aoti_python.rst", "recipes/torch_export_challenges_solutions.rst", "recipes/torch_logs.rst", "recipes/torchscript_inference.rst", "recipes/xeon_run_cpu.rst", "recipes/zero_redundancy_optimizer.rst", "recipes_index.rst", "sg_execution_times.rst", "unstable/context_parallel.rst", "unstable/distributed_rpc_profiling.rst", "unstable/flight_recorder_tutorial.rst", "unstable/gpu_direct_storage.rst", "unstable/gpu_quantization_torchao_tutorial.rst", "unstable/inductor_cpp_wrapper_tutorial.rst", "unstable/inductor_windows.rst", "unstable/inductor_windows_cpu.rst", "unstable/ios_coreml_workflow.rst", "unstable/ios_gpu_workflow.rst", "unstable/lite_interpreter.rst", "unstable/maskedtensor_adagrad.rst", "unstable/maskedtensor_advanced_semantics.rst", "unstable/maskedtensor_overview.rst", "unstable/maskedtensor_sparsity.rst", "unstable/max_autotune_on_CPU_tutorial.rst", "unstable/nestedtensor.rst", "unstable/nnapi_mobilenetv2.rst", "unstable/openvino_quantizer.rst", "unstable/python_extension_autoload.rst", "unstable/semi_structured_sparse.rst", "unstable/sg_execution_times.rst", "unstable/tracing_based_selective_build.rst", "unstable/vmap_recipe.rst", "unstable_index.rst"], "titles": ["ONNX Live Tutorial", "TorchRL objectives: Coding a DDPG loss", "Autograd in C++ Frontend", "Custom C++ and CUDA Operators", "Custom SYCL Operators", "&lt;no title&gt;", "Using the PyTorch C++ Frontend", "Supporting Custom C++ Classes in torch.compile/torch.export", "Extending PyTorch with Custom C++ Classes", "PyTorch Custom Operators", "Training Transformer models using Distributed Data Parallel and Pipeline Parallelism", "Registering a Dispatched Operator in C++", "Extending dispatcher for a new backend in C++", "Distributed Training with Uneven Inputs Using the Join Context Manager", "Neural Transfer Using PyTorch", "Creating Extensions Using NumPy and SciPy", "Pendulum: Writing your environment and transforms with TorchRL", "Facilitating New Backend Integration by PrivateUse1", "Custom Python Operators", "Combining Distributed DataParallel with Distributed RPC Framework", "(beta) Accelerating BERT with semi-structured (2:4) sparsity", "Computation times", "Exploring TorchRec sharding", "&lt;no title&gt;", "&lt;no title&gt;", "Semi-Supervised Learning using USB built upon PyTorch", "Audio Data Augmentation", "Audio Datasets", "Audio Feature Augmentation", "Audio Feature Extractions", "Audio I/O", "Audio Resampling", "Automatic Differentiation with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.autograd</span></code>", "Build the Neural Network", "Datasets &amp; DataLoaders", "Learn the Basics", "Learn the Basics", "Optimizing Model Parameters", "Quickstart", "Save and Load the Model", "Computation times", "Tensors", "Transforms", "Fast Transformer Inference with Better Transformer", "A Gentle Introduction to <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.autograd</span></code>", "Training a Classifier", "Optional: Data Parallelism", "Deep Learning with PyTorch: A 60 Minute Blitz", "Neural Networks", "Computation times", "Tensors", "Chatbot Tutorial", "Running Tutorials in Google Colab", "Writing Custom Datasets, DataLoaders and Transforms", "DCGAN Tutorial", "Fault-tolerant Distributed Training with <code class=\"docutils literal notranslate\"><span class=\"pre\">torchrun</span></code>", "Distributed Data Parallel in PyTorch - Video Tutorials", "Multi GPU training with DDP", "What is Distributed Data Parallel (DDP)", "Deep Learning with PyTorch: A 60 Minute Blitz", "Image Segmentation DeepLabV3 on Android", "Image Segmentation DeepLabV3 on iOS", "PyTorch Distributed Overview", "&lt;no title&gt;", "PyTorch: Tensors and autograd", "PyTorch: Defining New autograd Functions", "Computation times", "PyTorch: Control Flow + Weight Sharing", "&lt;no title&gt;", "PyTorch: Custom nn Modules", "PyTorch: nn", "PyTorch: optim", "Computation times", "&lt;no title&gt;", "Warm-up: numpy", "PyTorch: Tensors", "Computation times", "Adversarial Example Generation", "Finetuning Torchvision Models", "Autograd", "nn Package", "Multi-GPU Examples", "Tensors", "PyTorch for Former Torch Users", "Introduction to Holistic Trace Analysis", "Trace Diff using Holistic Trace Analysis", "&lt;no title&gt;", "Learning Hybrid Frontend Syntax Through Example", "Computation times", "Hybrid Frontend Tutorials", "Hyperparameter tuning with Ray Tune", "Introduction to PyTorch - YouTube Series", "The Fundamentals of Autograd", "Model Understanding with Captum", "Introduction to PyTorch on YouTube", "Introduction to PyTorch", "Introduction to PyTorch - YouTube Series", "Building Models with PyTorch", "Computation times", "PyTorch TensorBoard Support", "Introduction to PyTorch Tensors", "Training with PyTorch", "Knowledge Distillation Tutorial", "Advanced: Making Dynamic Decisions and the Bi-LSTM CRF", "Deep Learning with PyTorch", "Deep Learning for NLP with Pytorch", "Introduction to PyTorch", "Sequence Models and Long Short-Term Memory Networks", "Computation times", "Word Embeddings: Encoding Lexical Semantics", "What is <cite>torch.nn</cite> <em>really</em>?", "Export a model with control flow to ONNX", "Export a PyTorch model to ONNX", "ONNX", "Introduction to ONNX", "Extending the ONNX Exporter Operator Support", "Computation times", "Profiling your PyTorch Module", "Learning PyTorch with Examples", "Saving and Loading Models", "Computation times", "T5-Base Model for Summarization, Sentiment Classification, and Translation", "Template Tutorial", "Text classification with the torchtext library", "Preprocess custom text dataset using torchtext", "Transfer Learning for Computer Vision Tutorial", "Language Modeling with <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> and torchtext", "Language Translation with <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> and torchtext", "Understanding requires_grad, retain_grad, Leaf, and Non-leaf Tensors", "Compilers", "Deep Dive", "Distributed", "Domains", "Ecosystem", "Extension", "Welcome to PyTorch Tutorials", "Getting Started with Fully Sharded Data Parallel(FSDP)", "Advanced Model Training with Fully Sharded Data Parallel (FSDP)", "Getting Started with Fully Sharded Data Parallel (FSDP2)", "Introduction to Libuv TCPStore Backend", "Large Scale Transformer model training with Tensor Parallel (TP)", "Hooks for autograd saved tensors", "Multi-Objective NAS with Ax", "NLP From Scratch: Classifying Names with a Character-Level RNN", "NLP From Scratch: Generating Names with a Character-Level RNN", "Compiled Autograd: Capturing a larger backward graph for <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "Fusing Convolution and Batch Norm using Custom Function", "Double Backward with Custom Functions", "Training \u201creal-world\u201d models with DDP", "Multinode Training", "Getting Started with Distributed Data Parallel", "Distributed Pipeline Parallelism Using RPC", "Writing Distributed Applications with PyTorch", "Recurrent DQN: Training recurrent policies", "Model ensembling", "Forced Alignment with Wav2Vec2", "Forward-mode Automatic Differentiation (Beta)", "(beta) Building a Simple CPU Performance Profiler with FX", "Inductor CPU backend debugging and profiling", "Jacobians, Hessians, hvp, vhp, and more: composing function transforms", "Train a Mario-playing RL Agent", "Channels Last Memory Format in PyTorch", "&lt;no title&gt;", "Single-Machine Model Parallel Best Practices", "Neural Tangent Kernels", "NLP from Scratch", "Getting Started - Accelerate Your Scripts with nvFuser", "How to save memory by fusing the optimizer step into the backward pass", "Parametrizations Tutorial", "Per-sample-gradients", "A guide on good usage of <code class=\"docutils literal notranslate\"><span class=\"pre\">non_blocking</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">pin_memory()</span></code> in PyTorch", "Training Transformer models using Pipeline Parallelism", "Introduction to Distributed Pipeline Parallelism", "Customize Process Group Backends Using Cpp Extensions", "Pruning Tutorial", "Real Time Inference on Raspberry Pi 4 (30 fps!)", "Reinforcement Learning (PPO) with TorchRL Tutorial", "Reinforcement Learning (DQN) Tutorial", "Implementing Batch RPC Processing Using Asynchronous Executions", "Implementing a Parameter Server Using Distributed RPC Framework", "Getting Started with Distributed RPC Framework", "(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)", "NLP From Scratch: Translation with a Sequence to Sequence Network and Attention", "Computation times", "Spatial Transformer Networks Tutorial", "Speech Recognition with Wav2Vec2", "PyTorch Profiler With TensorBoard", "Visualizing Models, Data, and Training with TensorBoard", "Text-to-speech with Tacotron2", "Whole Slide Image Classification Using PyTorch and TIAToolbox", "Building a Convolution/Batch Norm fuser with torch.compile", "Introduction to <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "torch.export Nightly Tutorial", "torch.export Tutorial", "Introduction to TorchRec", "Introduction to TorchRec", "TorchVision Object Detection Finetuning Tutorial", "Accelerating PyTorch Transformers by replacing <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> with Nested Tensors and <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile()</span></code>", "Visualizing Gradients", "Intro", "Leverage Intel\u00ae Advanced Matrix Extensions", "Making Native Android Application that uses PyTorch prebuilt libraries", "(beta) Compiling the optimizer with torch.compile", "(beta) Running the compiled optimizer with an LR Scheduler", "Asynchronous Saving with Distributed Checkpoint (DCP)", "Getting Started with Distributed Checkpoint (DCP)", "Getting Started with <code class=\"docutils literal notranslate\"><span class=\"pre\">CommDebugMode</span></code>", "Getting Started with DeviceMesh", "&lt;no title&gt;", "Profiling PyTorch RPC-Based Workloads", "Explicit horizontal fusion with foreach_map and torch.compile", "(Beta) PyTorch Inference Performance Tuning on AWS Graviton Processors", "Intel\u00ae Extension for PyTorch*", "Ease-of-use quantization for PyTorch with Intel\u00ae Neural Compressor", "Loading data in PyTorch", "(beta) Efficient mobile interpreter in Android and iOS", "Pytorch Mobile Performance Recipes", "Model Preparation for Android Recipe", "Model Preparation for iOS Recipe", "Profiling PyTorch workloads with The Instrumentation and Tracing Technology (ITT) API", "Summary of PyTorch Mobile Recipes", "Model Interpretability using Captum", "Automatic Mixed Precision", "SyntaxError", "Changing default device", "Defining a Neural Network in PyTorch", "PyTorch Recipes", "Tips for Loading an <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Module</span></code> from a Checkpoint", "PyTorch Profiler", "Reasoning about Shapes in PyTorch", "Save Load Across Devices", "Saving And Loading A General Checkpoint", "Saving And Loading Models For Inference", "Saving Multiple Models In One File", "Computation times", "Extension points in <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Module</span></code> for <code class=\"docutils literal notranslate\"><span class=\"pre\">load_state_dict</span></code> and tensor subclasses", "How to use TensorBoard with PyTorch", "Timer quick start", "Performance Tuning Guide", "Warmstarting model using parameters from a different model in PyTorch", "What is a state_dict in PyTorch", "Zeroing out gradients in PyTorch", "Reducing AoT cold start compilation time with regional compilation", "Reducing torch.compile cold start compilation time with regional compilation", "Script and Optimize for Mobile Recipe", "Computation times", "Intel\u00ae Extension for PyTorch* Backend on Intel\u00ae CPUs", "Compile Time Caching Configuration", "Compile Time Caching in <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "(beta) Utilizing Torch Function modes with torch.compile", "Using User-Defined Triton Kernels with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "Dynamic Compilation Control with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compiler.set_stance</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">torch.export</span></code> AOTInductor Tutorial for Python runtime (Beta)", "Demonstration of torch.export flow, common challenges and the solutions to address them", "(beta) Using TORCH_LOGS python API with torch.compile", "&lt;no title&gt;", "Optimizing CPU Performance on Intel\u00ae Xeon\u00ae with run_cpu Script", "Shard Optimizer States with ZeroRedundancyOptimizer", "Recipes", "Computation times", "Introduction to Context Parallel", "Profiling PyTorch RPC-Based Workloads", "Flight Recorder for Debugging Stuck Jobs", "(prototype) Accelerating <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.save</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.load</span></code> with GPUDirect Storage", "(prototype) GPU Quantization with TorchAO", "Inductor C++ Wrapper Tutorial", "How to use <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code> on Windows CPU/XPU", "&lt;no title&gt;", "(Prototype) Convert Mobilenetv2 to Core ML", "(Prototype) Use iOS GPU in PyTorch", "(Prototype) Introduce lite interpreter workflow in Android and iOS", "Efficiently writing \u201csparse\u201d semantics for Adagrad with MaskedTensor", "MaskedTensor Advanced Semantics", "MaskedTensor Overview", "MaskedTensor Sparsity", "Using Max-Autotune Compilation on CPU for Better Performance", "Getting Started with Nested Tensors", "(Beta) Convert MobileNetV2 to NNAPI", "PyTorch 2 Export Quantization for OpenVINO torch.compile Backend", "Autoloading Out-of-Tree Extension", "(prototype) Accelerating BERT with semi-structured (2:4) sparsity", "Computation times", "(prototype) Tracing-based Selective Build Mobile Interpreter in Android and iOS", "torch.vmap", "Unstable"], "terms": {"thi": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 41, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 64, 65, 67, 69, 70, 71, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 127, 128, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 270, 271, 272, 273, 274, 275, 276, 278, 280, 282, 283, 284], "ha": [0, 1, 2, 3, 6, 7, 8, 10, 12, 13, 14, 15, 16, 18, 20, 25, 26, 27, 28, 29, 30, 31, 32, 36, 38, 43, 44, 45, 48, 51, 52, 64, 70, 77, 78, 85, 87, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 102, 104, 106, 107, 109, 110, 114, 117, 118, 121, 123, 124, 127, 128, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 161, 163, 164, 166, 167, 168, 170, 171, 172, 174, 175, 176, 177, 180, 181, 182, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 197, 198, 203, 206, 209, 212, 221, 223, 224, 228, 235, 237, 238, 242, 243, 244, 249, 250, 252, 253, 256, 257, 260, 261, 263, 264, 267, 270, 271, 272, 273, 274, 276, 278, 279, 280, 282], "been": [0, 1, 6, 8, 10, 16, 17, 20, 26, 27, 28, 29, 30, 31, 43, 52, 71, 77, 78, 85, 87, 90, 91, 92, 93, 95, 100, 106, 110, 121, 123, 124, 127, 128, 136, 139, 144, 146, 147, 148, 151, 152, 153, 155, 158, 159, 163, 164, 166, 167, 168, 171, 174, 175, 176, 177, 181, 185, 186, 187, 188, 189, 192, 193, 194, 197, 203, 209, 212, 219, 223, 235, 236, 244, 252, 253, 256, 260, 261, 267, 270, 271, 274, 276, 279, 280, 282], "deprec": [0, 5, 10, 11, 23, 24, 43, 112, 121, 123, 124, 126, 127, 136, 138, 139, 151, 163, 166, 171, 186, 187, 193, 208, 209, 214, 230, 231, 232, 233, 244, 255, 261], "redirect": [0, 10, 26, 27, 28, 29, 30, 31, 43, 60, 61, 78, 79, 80, 81, 82, 83, 91, 121, 123, 124, 127, 151, 155, 163, 166, 171, 185, 188, 192, 195, 201, 209, 215, 216, 217, 218, 220, 230, 231, 232, 233, 244, 261, 267, 268, 269, 277, 282], "3": [0, 2, 3, 4, 6, 7, 8, 10, 16, 19, 20, 22, 25, 26, 27, 28, 29, 30, 31, 33, 36, 42, 43, 44, 54, 60, 61, 64, 65, 69, 70, 71, 77, 78, 79, 80, 81, 82, 83, 92, 93, 95, 97, 100, 102, 103, 104, 106, 107, 109, 110, 111, 114, 115, 117, 118, 119, 121, 122, 123, 124, 127, 136, 137, 138, 140, 145, 146, 147, 151, 152, 153, 154, 155, 158, 160, 161, 163, 164, 165, 166, 167, 168, 169, 171, 174, 175, 176, 178, 179, 180, 181, 185, 188, 189, 191, 192, 193, 194, 196, 197, 200, 201, 203, 206, 207, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 227, 230, 231, 232, 233, 235, 238, 244, 246, 250, 252, 253, 260, 262, 264, 266, 267, 268, 269, 276, 277, 280, 282], "second": [0, 1, 3, 6, 8, 10, 11, 14, 15, 16, 18, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 50, 51, 53, 54, 60, 61, 70, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 90, 92, 95, 97, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 115, 121, 122, 123, 124, 125, 127, 128, 135, 136, 139, 141, 142, 143, 144, 145, 146, 147, 151, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 166, 167, 168, 169, 170, 171, 172, 174, 176, 177, 181, 182, 184, 185, 186, 187, 188, 191, 192, 193, 196, 197, 198, 201, 203, 206, 210, 215, 216, 217, 218, 220, 223, 224, 227, 229, 230, 231, 232, 233, 235, 237, 238, 242, 243, 244, 249, 250, 251, 252, 254, 256, 262, 264, 267, 268, 269, 271, 272, 273, 274, 276, 277, 282, 283], "go": [1, 8, 13, 14, 15, 16, 18, 19, 20, 22, 25, 32, 33, 34, 36, 37, 38, 39, 41, 42, 44, 46, 48, 50, 51, 53, 64, 65, 67, 69, 70, 71, 74, 75, 87, 90, 92, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 114, 115, 117, 119, 122, 125, 128, 135, 137, 141, 142, 143, 144, 146, 149, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 172, 174, 175, 176, 177, 179, 181, 182, 184, 186, 187, 190, 191, 193, 194, 196, 198, 203, 205, 210, 221, 222, 223, 224, 225, 227, 228, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 249, 250, 251, 252, 254, 263, 264, 271, 272, 273, 274, 276, 283], "end": [1, 3, 6, 7, 8, 11, 14, 15, 16, 18, 20, 25, 32, 33, 34, 36, 37, 38, 39, 41, 42, 44, 45, 46, 48, 50, 51, 53, 54, 56, 62, 64, 65, 67, 69, 70, 71, 74, 75, 77, 84, 87, 90, 92, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 114, 115, 117, 118, 119, 122, 125, 128, 129, 130, 135, 137, 139, 140, 141, 142, 143, 144, 146, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 172, 174, 175, 176, 177, 178, 180, 181, 182, 184, 186, 187, 190, 191, 193, 194, 196, 197, 198, 203, 210, 212, 221, 222, 223, 224, 225, 227, 228, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 249, 250, 251, 252, 254, 257, 258, 260, 263, 264, 271, 272, 273, 274, 276, 279, 280, 283], "download": [1, 6, 14, 15, 16, 18, 20, 25, 32, 33, 34, 36, 37, 38, 39, 41, 42, 44, 45, 46, 48, 50, 51, 52, 53, 54, 64, 65, 67, 69, 70, 71, 74, 75, 77, 84, 87, 90, 92, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 114, 115, 117, 119, 122, 125, 128, 136, 137, 141, 142, 143, 144, 146, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 174, 175, 176, 177, 179, 181, 182, 184, 186, 187, 190, 191, 193, 194, 196, 197, 198, 203, 210, 212, 221, 222, 223, 224, 225, 227, 228, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 248, 249, 250, 251, 252, 254, 263, 264, 266, 271, 272, 273, 274, 276, 283], "full": [1, 3, 6, 11, 13, 14, 15, 16, 18, 20, 25, 32, 33, 34, 36, 38, 39, 41, 42, 44, 45, 46, 48, 50, 51, 52, 53, 54, 64, 65, 67, 69, 70, 71, 74, 75, 77, 87, 92, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 114, 115, 117, 119, 122, 125, 128, 136, 137, 138, 141, 142, 143, 144, 145, 146, 148, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 173, 174, 176, 177, 178, 181, 182, 184, 186, 190, 191, 193, 194, 196, 197, 198, 203, 210, 221, 222, 223, 224, 225, 227, 228, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 249, 250, 251, 252, 254, 256, 258, 260, 262, 263, 264, 271, 272, 273, 274, 276, 278, 283], "exampl": [1, 2, 3, 4, 6, 7, 11, 12, 13, 14, 16, 17, 19, 20, 21, 22, 25, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 64, 65, 66, 67, 69, 70, 71, 72, 74, 75, 76, 84, 85, 86, 88, 90, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 110, 111, 112, 114, 115, 116, 117, 120, 122, 125, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 189, 190, 191, 193, 194, 196, 198, 200, 202, 203, 204, 205, 206, 207, 210, 211, 219, 221, 222, 223, 224, 225, 227, 228, 229, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 247, 248, 249, 250, 252, 253, 254, 257, 258, 259, 260, 263, 264, 266, 271, 272, 273, 274, 276, 278, 280, 281, 283], "author": [1, 3, 4, 6, 13, 14, 15, 16, 19, 20, 25, 36, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 77, 84, 85, 87, 89, 96, 102, 103, 104, 106, 107, 109, 110, 111, 114, 115, 117, 118, 119, 122, 125, 128, 136, 137, 138, 139, 140, 142, 143, 144, 145, 148, 149, 150, 152, 153, 157, 158, 160, 161, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 190, 191, 193, 197, 198, 202, 203, 204, 205, 206, 207, 210, 211, 222, 227, 228, 235, 238, 242, 243, 247, 248, 249, 250, 251, 252, 253, 254, 260, 262, 264, 265, 266, 275, 278, 279, 280, 283], "vincent": [1, 16, 153, 170, 176], "moen": [1, 16, 153, 170, 176], "separ": [1, 3, 4, 6, 8, 11, 18, 34, 51, 54, 87, 92, 99, 100, 101, 102, 110, 117, 140, 154, 158, 160, 168, 170, 179, 182, 189, 196, 223, 238, 248, 251, 254, 271], "rl": [1, 132, 135, 176, 177, 178, 183, 259], "algorithm": [1, 6, 12, 13, 14, 32, 37, 42, 51, 54, 58, 71, 84, 90, 93, 95, 101, 103, 104, 105, 106, 110, 118, 132, 135, 137, 140, 142, 146, 152, 153, 160, 170, 173, 176, 179, 184, 202, 203, 221, 225, 238, 260, 278], "variou": [1, 3, 11, 17, 41, 48, 50, 51, 52, 85, 87, 90, 95, 99, 107, 110, 117, 119, 142, 152, 157, 159, 174, 176, 179, 180, 189, 194, 197, 200, 206, 210, 237, 241, 242, 247, 250, 253, 262, 264, 273, 276], "piec": [1, 11, 16, 87, 95, 110, 175, 176, 180, 189, 196], "assembl": [1, 11, 51, 95], "script": [1, 6, 7, 8, 12, 14, 15, 16, 18, 32, 33, 34, 37, 38, 39, 41, 42, 44, 45, 46, 48, 50, 51, 53, 54, 57, 62, 70, 74, 75, 77, 90, 92, 95, 97, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 114, 115, 122, 125, 128, 136, 137, 138, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 154, 156, 157, 158, 159, 160, 161, 164, 167, 168, 169, 170, 172, 174, 175, 176, 177, 179, 181, 182, 184, 189, 191, 193, 196, 197, 198, 203, 210, 211, 212, 219, 222, 223, 224, 227, 228, 229, 235, 238, 242, 243, 249, 250, 251, 252, 254, 258, 262, 264, 271, 272, 273, 274, 276, 283], "collect": [1, 4, 6, 13, 16, 17, 22, 37, 44, 46, 51, 57, 62, 95, 100, 101, 104, 109, 135, 136, 137, 140, 150, 153, 157, 173, 177, 180, 193, 194, 199, 205, 206, 207, 219, 237, 238, 258, 260, 262, 280], "final": [1, 6, 8, 12, 13, 14, 16, 17, 19, 20, 25, 42, 44, 48, 51, 54, 77, 87, 90, 92, 95, 97, 100, 101, 102, 107, 110, 112, 115, 117, 119, 125, 135, 136, 137, 138, 140, 142, 143, 144, 146, 147, 152, 157, 158, 159, 160, 164, 167, 169, 172, 174, 176, 177, 178, 179, 180, 182, 186, 187, 193, 194, 213, 260, 262, 264, 271, 274, 278, 280], "function": [1, 3, 4, 6, 8, 9, 11, 12, 15, 16, 18, 19, 20, 22, 25, 34, 38, 39, 41, 42, 44, 50, 51, 53, 55, 57, 62, 63, 66, 67, 69, 70, 71, 84, 85, 92, 93, 95, 99, 100, 106, 109, 111, 114, 115, 117, 119, 125, 128, 129, 130, 131, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 152, 153, 154, 157, 158, 160, 167, 168, 170, 172, 173, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 189, 190, 191, 193, 194, 196, 197, 198, 199, 202, 203, 211, 212, 219, 222, 224, 225, 235, 237, 239, 245, 247, 250, 251, 252, 254, 257, 258, 259, 260, 265, 271, 272, 273, 274, 278, 280, 283], "ar": [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 25, 32, 33, 34, 37, 41, 42, 44, 45, 48, 50, 51, 52, 53, 54, 55, 57, 58, 62, 69, 70, 71, 77, 84, 85, 87, 90, 92, 93, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 117, 118, 119, 125, 128, 131, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 164, 167, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 189, 190, 191, 193, 194, 196, 198, 200, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 219, 221, 222, 223, 225, 227, 228, 235, 236, 237, 238, 239, 240, 241, 242, 243, 247, 248, 249, 250, 252, 253, 254, 256, 257, 258, 260, 262, 263, 264, 271, 272, 273, 274, 275, 276, 278, 279, 280, 283, 284], "state": [1, 3, 7, 8, 11, 12, 13, 16, 20, 38, 39, 45, 51, 54, 55, 57, 90, 93, 95, 97, 101, 102, 103, 107, 110, 118, 119, 128, 136, 137, 143, 144, 146, 148, 150, 153, 154, 156, 160, 167, 169, 174, 176, 177, 178, 179, 180, 182, 186, 193, 198, 204, 205, 210, 221, 222, 227, 240, 258, 262, 263, 274, 279, 280], "contain": [1, 2, 6, 11, 12, 14, 16, 17, 20, 33, 34, 38, 42, 48, 51, 52, 57, 69, 70, 71, 84, 87, 92, 93, 97, 100, 101, 106, 107, 110, 111, 118, 119, 125, 132, 135, 136, 137, 141, 142, 143, 148, 150, 153, 168, 172, 174, 176, 177, 178, 180, 181, 182, 184, 186, 187, 189, 190, 193, 194, 196, 197, 219, 222, 225, 227, 235, 237, 238, 240, 242, 252, 253, 256, 262, 263, 274, 280], "trainabl": [1, 6, 70, 102, 104], "paramet": [1, 8, 12, 13, 14, 16, 17, 19, 20, 25, 32, 34, 35, 36, 39, 41, 42, 44, 45, 48, 50, 51, 53, 54, 69, 70, 77, 87, 90, 92, 95, 101, 102, 104, 106, 109, 110, 115, 117, 118, 125, 128, 130, 131, 135, 136, 137, 138, 140, 142, 143, 148, 150, 152, 153, 154, 156, 158, 159, 160, 164, 167, 168, 169, 180, 181, 184, 186, 187, 189, 193, 194, 198, 202, 204, 205, 210, 211, 212, 219, 222, 226, 227, 228, 229, 234, 235, 236, 240, 241, 242, 246, 250, 256, 257, 258, 259, 264, 271, 278, 280], "tutori": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 25, 26, 27, 28, 29, 30, 31, 35, 38, 43, 44, 45, 46, 47, 53, 55, 57, 58, 62, 77, 78, 79, 80, 81, 82, 83, 84, 86, 90, 93, 94, 97, 99, 101, 103, 105, 106, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 123, 124, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 175, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 194, 195, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 221, 222, 226, 227, 228, 230, 231, 232, 233, 235, 236, 237, 238, 242, 244, 245, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 282, 283, 284], "guid": [1, 7, 11, 20, 62, 84, 87, 115, 132, 133, 135, 136, 152, 161, 175, 183, 186, 193, 194, 210, 219, 221, 223, 226, 234, 256, 258, 259, 264, 278, 280], "you": [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 25, 31, 32, 33, 34, 36, 37, 39, 41, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 62, 69, 70, 77, 79, 80, 81, 82, 83, 84, 87, 89, 90, 92, 93, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 115, 117, 118, 119, 122, 125, 128, 129, 131, 133, 134, 135, 136, 137, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 164, 165, 167, 168, 169, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 184, 186, 187, 189, 190, 191, 193, 194, 196, 198, 199, 200, 202, 204, 205, 206, 207, 211, 212, 219, 222, 223, 224, 225, 227, 228, 236, 238, 239, 240, 241, 242, 243, 247, 248, 250, 251, 253, 254, 257, 258, 260, 263, 264, 265, 266, 271, 272, 273, 274, 275, 276, 278, 279, 280, 283], "through": [1, 6, 8, 11, 12, 15, 16, 17, 19, 25, 32, 33, 37, 38, 44, 48, 51, 54, 56, 57, 86, 88, 90, 92, 95, 97, 99, 101, 102, 104, 105, 106, 107, 110, 111, 112, 114, 115, 118, 122, 130, 131, 135, 137, 138, 139, 140, 141, 143, 145, 146, 147, 152, 154, 157, 158, 159, 160, 161, 164, 167, 169, 170, 172, 173, 176, 177, 178, 179, 180, 181, 182, 186, 187, 189, 190, 191, 193, 194, 198, 199, 204, 205, 211, 212, 222, 223, 228, 236, 241, 253, 256, 259, 263, 264, 265, 266, 271, 273, 278, 280, 283], "from": [1, 3, 4, 6, 7, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 25, 32, 34, 37, 38, 39, 40, 41, 42, 45, 48, 49, 50, 51, 53, 54, 55, 57, 64, 65, 66, 69, 70, 71, 72, 74, 75, 76, 77, 84, 85, 87, 88, 90, 92, 93, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 114, 115, 116, 117, 118, 120, 122, 125, 128, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 149, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 186, 187, 190, 191, 193, 197, 198, 199, 204, 205, 207, 210, 211, 212, 213, 219, 222, 223, 225, 226, 228, 234, 235, 236, 237, 238, 240, 242, 245, 248, 249, 250, 252, 253, 256, 257, 258, 259, 260, 262, 263, 264, 266, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 284], "ground": [1, 16, 45, 77, 196], "up": [1, 6, 8, 11, 12, 16, 18, 20, 22, 32, 34, 37, 51, 54, 57, 62, 73, 76, 84, 87, 92, 93, 95, 96, 97, 100, 102, 103, 104, 106, 107, 109, 110, 112, 117, 128, 129, 135, 136, 137, 138, 139, 140, 143, 144, 148, 149, 150, 152, 153, 154, 157, 158, 164, 167, 169, 170, 172, 175, 176, 177, 178, 179, 182, 186, 187, 191, 193, 194, 198, 200, 204, 206, 207, 212, 223, 228, 238, 241, 242, 252, 253, 254, 256, 257, 258, 259, 265, 276, 278, 280, 284], "us": [1, 3, 4, 5, 7, 9, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 32, 33, 34, 37, 38, 39, 41, 42, 45, 46, 48, 50, 51, 53, 54, 56, 57, 58, 59, 62, 64, 65, 67, 69, 70, 71, 74, 75, 77, 84, 87, 90, 92, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 111, 114, 118, 122, 125, 128, 129, 130, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 143, 144, 147, 149, 152, 157, 158, 159, 160, 161, 164, 165, 167, 168, 170, 172, 174, 175, 176, 177, 182, 183, 184, 190, 191, 193, 194, 196, 197, 198, 200, 202, 203, 204, 208, 210, 211, 212, 222, 223, 224, 225, 226, 229, 234, 235, 237, 240, 241, 242, 243, 245, 247, 248, 249, 251, 253, 255, 258, 259, 260, 262, 264, 265, 271, 272, 274, 276, 278, 279, 280, 283, 284], "To": [1, 3, 6, 11, 12, 13, 14, 16, 18, 19, 20, 32, 33, 37, 38, 39, 42, 48, 51, 52, 53, 59, 67, 75, 84, 85, 87, 90, 93, 99, 101, 102, 103, 104, 106, 107, 109, 110, 111, 114, 118, 119, 122, 128, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 153, 156, 158, 167, 168, 170, 173, 174, 175, 176, 177, 178, 179, 181, 182, 186, 187, 189, 193, 194, 197, 198, 206, 207, 211, 212, 213, 219, 222, 223, 225, 227, 228, 235, 236, 237, 238, 239, 240, 241, 246, 250, 252, 253, 254, 256, 260, 262, 264, 265, 266, 271, 273, 274, 275, 280, 284], "aim": [1, 6, 102, 105, 139, 167, 177, 180, 213, 274], "we": [1, 2, 3, 4, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 25, 32, 33, 34, 36, 37, 38, 39, 41, 42, 44, 45, 46, 48, 50, 51, 52, 53, 54, 57, 64, 65, 67, 69, 70, 71, 77, 84, 85, 87, 90, 93, 95, 97, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 115, 117, 118, 125, 128, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 164, 165, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 189, 190, 191, 193, 194, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 210, 211, 219, 221, 223, 225, 227, 228, 229, 235, 236, 237, 239, 240, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 260, 262, 263, 264, 265, 266, 271, 272, 273, 274, 275, 276, 278, 279, 280, 283, 284], "focus": [1, 93, 102, 105, 130, 132, 173, 182, 194], "which": [1, 3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 32, 33, 36, 37, 38, 39, 41, 42, 44, 45, 48, 50, 51, 52, 53, 54, 57, 58, 62, 64, 65, 69, 70, 71, 77, 84, 85, 87, 90, 92, 93, 95, 96, 97, 100, 101, 102, 103, 104, 106, 107, 109, 110, 112, 115, 117, 118, 119, 125, 128, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 152, 153, 154, 156, 157, 158, 159, 161, 164, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 189, 191, 193, 194, 196, 197, 198, 200, 203, 204, 205, 206, 207, 210, 219, 221, 222, 223, 224, 225, 227, 228, 235, 237, 238, 239, 240, 241, 242, 243, 247, 248, 250, 251, 252, 253, 254, 256, 257, 260, 263, 264, 271, 272, 273, 274, 275, 276, 278, 279, 280], "i": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 32, 33, 34, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 60, 61, 62, 64, 65, 67, 70, 74, 75, 77, 79, 80, 81, 82, 83, 84, 87, 89, 90, 92, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 106, 107, 109, 111, 112, 114, 115, 117, 118, 120, 122, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 152, 153, 156, 157, 158, 159, 160, 161, 164, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 189, 190, 191, 193, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 254, 255, 256, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 271, 272, 274, 275, 276, 277, 278, 279, 280], "rel": [1, 6, 93, 101, 125, 141, 159, 164, 180, 182, 197, 265], "straightforward": [1, 4, 6, 19, 20, 51, 92, 95, 100, 102, 103, 158, 170, 193, 197], "deep": [1, 4, 6, 14, 15, 36, 48, 51, 54, 71, 74, 75, 95, 96, 97, 100, 102, 106, 108, 109, 118, 129, 131, 132, 135, 143, 144, 145, 146, 150, 158, 159, 160, 168, 174, 177, 182, 189, 194, 198, 199, 200, 202, 203, 213, 219, 225, 237, 238, 243, 256, 259], "determinist": [1, 13, 16, 138, 153, 177, 237, 238], "gradient": [1, 3, 6, 12, 13, 15, 16, 18, 19, 37, 44, 45, 48, 51, 54, 58, 62, 64, 65, 67, 69, 70, 74, 75, 92, 95, 97, 100, 101, 102, 103, 104, 106, 110, 118, 125, 128, 130, 135, 136, 137, 140, 141, 143, 145, 147, 148, 150, 152, 156, 159, 160, 167, 174, 176, 178, 179, 180, 183, 187, 189, 194, 205, 221, 226, 234, 257, 258, 259, 271, 283], "simpl": [1, 3, 4, 6, 8, 11, 14, 17, 19, 20, 25, 48, 51, 53, 56, 58, 69, 77, 87, 90, 93, 95, 97, 100, 101, 102, 110, 111, 114, 118, 119, 128, 129, 131, 135, 136, 141, 142, 145, 147, 152, 154, 158, 159, 164, 169, 170, 172, 174, 176, 178, 179, 180, 181, 183, 184, 186, 191, 193, 194, 200, 202, 203, 205, 207, 210, 212, 223, 227, 236, 237, 238, 240, 250, 253, 254, 257, 259, 260, 275, 278, 280], "continu": [1, 51, 55, 87, 90, 95, 100, 102, 107, 110, 138, 139, 140, 144, 148, 152, 176, 180, 182, 186, 191, 206, 223, 225, 228, 238, 239, 240, 241, 243, 262, 263, 271, 273, 274, 280], "control": [1, 11, 12, 16, 32, 34, 37, 44, 68, 72, 85, 87, 92, 102, 112, 113, 114, 115, 122, 129, 135, 137, 138, 139, 141, 142, 152, 156, 168, 176, 177, 178, 191, 206, 219, 223, 242, 243, 245, 258, 259, 279], "It": [1, 3, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 25, 26, 27, 28, 29, 30, 32, 42, 44, 45, 46, 48, 51, 53, 54, 77, 78, 84, 90, 92, 93, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 114, 119, 125, 128, 134, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 164, 167, 168, 169, 170, 174, 177, 178, 180, 182, 184, 185, 186, 188, 189, 192, 193, 194, 196, 197, 204, 205, 207, 223, 224, 236, 238, 241, 246, 248, 250, 252, 253, 256, 260, 262, 276, 280, 283], "consist": [1, 3, 6, 8, 16, 17, 25, 32, 33, 34, 37, 44, 102, 104, 110, 138, 140, 148, 157, 160, 164, 167, 176, 177, 181, 182, 186, 190, 194, 197, 203, 223, 228, 238, 260, 262, 273, 274], "learn": [1, 3, 4, 6, 15, 16, 18, 20, 21, 32, 33, 34, 37, 38, 39, 41, 42, 44, 46, 48, 51, 53, 54, 55, 56, 57, 58, 62, 71, 74, 75, 77, 84, 86, 88, 89, 90, 92, 93, 95, 96, 97, 100, 101, 102, 106, 108, 109, 110, 111, 112, 114, 115, 119, 120, 122, 128, 129, 130, 132, 133, 134, 135, 136, 137, 139, 142, 143, 144, 145, 148, 149, 150, 152, 153, 158, 159, 161, 165, 167, 168, 169, 172, 174, 175, 179, 182, 183, 184, 187, 189, 190, 193, 194, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 210, 211, 213, 219, 221, 227, 235, 238, 242, 243, 246, 247, 248, 251, 253, 257, 258, 259, 260, 263, 264, 271, 272, 273, 274, 275, 276, 279, 280, 284], "parametr": [1, 2, 20, 130, 135, 176, 183, 259, 280], "an": [1, 2, 4, 6, 7, 8, 9, 11, 13, 14, 15, 17, 18, 19, 20, 22, 25, 32, 33, 34, 36, 37, 38, 39, 41, 44, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 64, 67, 69, 71, 77, 84, 85, 87, 89, 90, 92, 93, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 110, 111, 112, 114, 117, 118, 125, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 149, 150, 152, 154, 156, 157, 158, 159, 160, 161, 164, 165, 167, 168, 169, 170, 173, 174, 175, 177, 178, 179, 180, 181, 182, 184, 186, 187, 189, 190, 191, 193, 196, 197, 198, 200, 202, 204, 205, 207, 210, 211, 212, 213, 219, 221, 222, 223, 224, 225, 226, 228, 229, 234, 235, 237, 238, 240, 242, 243, 245, 247, 250, 251, 252, 253, 254, 258, 259, 260, 263, 264, 265, 266, 271, 273, 274, 275, 276, 278, 279, 280, 283, 284], "action": [1, 97, 101, 106, 110, 136, 137, 160, 174, 176, 177, 178, 179, 180, 186, 228, 237, 253, 258, 260], "pair": [1, 6, 48, 51, 54, 93, 143, 144, 146, 169, 176, 177, 182, 186, 196, 203, 213, 219, 237], "output": [1, 2, 3, 4, 6, 7, 12, 13, 14, 16, 18, 19, 20, 32, 33, 37, 41, 44, 45, 46, 48, 50, 51, 54, 64, 65, 67, 69, 70, 71, 74, 75, 77, 84, 85, 87, 90, 92, 93, 95, 97, 100, 101, 102, 104, 106, 107, 109, 110, 112, 115, 117, 118, 119, 122, 125, 128, 136, 137, 138, 140, 141, 143, 144, 145, 150, 152, 153, 154, 156, 158, 159, 161, 164, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 184, 187, 189, 191, 193, 196, 197, 198, 200, 202, 206, 210, 211, 212, 213, 221, 223, 225, 228, 229, 236, 238, 246, 254, 257, 260, 262, 264, 266, 275, 276, 278, 280], "maxim": [1, 16, 54, 77, 84, 102, 104, 142, 160, 177, 191, 238, 256], "given": [1, 3, 6, 8, 11, 12, 14, 16, 18, 20, 32, 34, 37, 41, 42, 44, 50, 51, 54, 57, 77, 84, 87, 93, 97, 101, 102, 105, 106, 109, 110, 119, 137, 143, 144, 152, 154, 156, 159, 160, 161, 169, 174, 176, 177, 179, 180, 182, 191, 193, 194, 196, 211, 213, 223, 229, 238, 249, 253, 257, 263, 274, 280], "certain": [1, 6, 12, 13, 17, 51, 57, 93, 106, 131, 137, 140, 141, 146, 156, 159, 161, 176, 181, 191, 193, 194, 221, 225, 249, 250, 253, 256, 262, 271, 274, 276], "what": [1, 2, 3, 4, 8, 11, 16, 18, 22, 32, 33, 34, 44, 46, 47, 55, 56, 57, 62, 77, 89, 90, 93, 95, 97, 100, 101, 103, 104, 106, 107, 109, 111, 115, 120, 122, 134, 135, 137, 139, 140, 141, 142, 144, 145, 148, 149, 152, 153, 160, 161, 167, 172, 174, 176, 177, 178, 181, 187, 189, 190, 193, 194, 196, 197, 198, 202, 204, 222, 223, 224, 225, 226, 227, 234, 237, 238, 253, 258, 259, 260, 263, 273, 279], "how": [1, 2, 3, 4, 6, 7, 8, 11, 12, 14, 16, 18, 19, 20, 22, 32, 34, 37, 38, 39, 44, 45, 46, 48, 51, 52, 53, 54, 57, 58, 59, 77, 84, 87, 89, 90, 92, 93, 95, 97, 100, 101, 102, 104, 105, 106, 107, 109, 110, 111, 112, 115, 117, 125, 128, 129, 130, 131, 132, 133, 134, 135, 139, 141, 142, 143, 144, 145, 147, 148, 150, 152, 153, 154, 156, 157, 158, 160, 161, 164, 165, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 189, 190, 191, 193, 194, 196, 197, 198, 200, 203, 204, 206, 210, 211, 221, 222, 223, 226, 227, 228, 234, 235, 237, 238, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 260, 262, 263, 264, 271, 272, 273, 274, 275, 276, 278, 280, 284], "write": [1, 3, 4, 7, 8, 9, 11, 12, 18, 21, 45, 51, 62, 65, 99, 103, 104, 105, 106, 110, 118, 120, 125, 132, 134, 135, 139, 141, 142, 147, 148, 150, 153, 156, 158, 164, 168, 170, 173, 176, 179, 180, 182, 186, 189, 191, 193, 197, 205, 222, 223, 224, 225, 229, 238, 253, 259, 262, 263, 274, 278, 281, 283], "custom": [1, 6, 11, 13, 20, 21, 51, 54, 65, 68, 72, 93, 110, 117, 120, 130, 132, 134, 135, 138, 142, 153, 160, 170, 176, 179, 183, 189, 190, 191, 194, 197, 210, 212, 219, 222, 226, 235, 238, 246, 249, 250, 259, 278, 280], "its": [1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 32, 33, 37, 42, 44, 48, 51, 53, 54, 55, 57, 70, 84, 92, 93, 95, 97, 100, 102, 104, 106, 107, 109, 110, 112, 117, 118, 119, 128, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 150, 152, 153, 154, 156, 157, 158, 160, 161, 167, 168, 172, 174, 176, 177, 178, 179, 180, 182, 186, 187, 191, 193, 194, 198, 200, 205, 207, 212, 213, 219, 222, 223, 225, 227, 228, 235, 238, 239, 240, 241, 257, 264, 273, 274, 276, 279, 280], "includ": [1, 2, 3, 4, 6, 7, 8, 11, 16, 17, 18, 25, 37, 38, 41, 50, 51, 55, 57, 62, 71, 77, 84, 87, 90, 92, 93, 95, 97, 100, 101, 102, 103, 110, 112, 114, 115, 117, 130, 140, 142, 143, 144, 145, 147, 148, 150, 152, 153, 158, 160, 170, 172, 173, 174, 176, 179, 182, 186, 187, 190, 191, 193, 194, 196, 197, 205, 206, 210, 211, 212, 213, 219, 221, 222, 223, 225, 228, 235, 238, 248, 250, 251, 256, 262, 264, 271, 273, 275, 278, 279], "design": [1, 6, 16, 20, 25, 54, 58, 77, 87, 93, 109, 110, 144, 150, 153, 170, 176, 177, 178, 180, 181, 186, 187, 193, 200, 211, 223, 225, 238, 246, 250, 253, 256, 260, 271, 272, 273, 278, 280, 283], "effici": [1, 4, 12, 14, 17, 20, 32, 51, 53, 77, 84, 100, 102, 106, 109, 129, 130, 136, 137, 140, 142, 150, 152, 153, 159, 164, 174, 176, 180, 181, 186, 189, 194, 204, 223, 227, 246, 250, 256, 259, 262, 265, 274, 275, 276, 280, 281], "store": [1, 6, 8, 19, 20, 32, 33, 34, 38, 39, 41, 44, 50, 53, 55, 70, 90, 92, 99, 100, 103, 104, 106, 109, 110, 112, 118, 128, 139, 141, 142, 144, 152, 153, 158, 160, 161, 168, 170, 172, 173, 174, 176, 177, 178, 179, 180, 182, 193, 194, 210, 228, 237, 238, 247, 248, 260, 264, 274, 275, 280], "them": [1, 2, 3, 6, 11, 12, 13, 14, 16, 20, 22, 32, 34, 37, 44, 45, 48, 50, 51, 53, 55, 57, 62, 69, 70, 90, 92, 93, 95, 97, 99, 100, 101, 102, 105, 106, 107, 109, 110, 111, 112, 114, 115, 118, 119, 128, 129, 130, 135, 137, 138, 140, 142, 143, 144, 146, 147, 152, 153, 154, 157, 158, 159, 164, 167, 168, 169, 170, 174, 175, 177, 178, 179, 180, 189, 190, 191, 193, 196, 197, 198, 203, 211, 212, 222, 223, 227, 235, 237, 238, 247, 248, 256, 258, 260, 264, 273, 275, 276, 279, 280], "trajectori": [1, 16, 153, 176, 177], "transit": [1, 16, 87, 89, 103, 153, 170, 177], "assum": [1, 2, 6, 7, 11, 12, 16, 17, 36, 44, 45, 53, 56, 77, 92, 95, 96, 102, 103, 105, 107, 110, 115, 128, 140, 141, 143, 144, 152, 153, 168, 174, 176, 179, 181, 182, 196, 205, 227, 228, 235, 237, 253, 273, 274, 276], "have": [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 25, 32, 33, 34, 37, 41, 42, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 57, 59, 70, 71, 77, 84, 85, 87, 90, 92, 93, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 117, 118, 119, 122, 125, 128, 131, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 167, 168, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 189, 190, 191, 193, 194, 196, 197, 198, 200, 203, 204, 205, 206, 207, 210, 211, 212, 219, 222, 223, 224, 225, 235, 236, 237, 238, 239, 240, 241, 242, 243, 247, 248, 250, 251, 252, 253, 256, 257, 260, 262, 263, 264, 265, 271, 272, 273, 274, 275, 276, 278, 279, 280, 283], "complet": [1, 6, 17, 36, 87, 90, 92, 95, 103, 104, 106, 115, 135, 137, 139, 140, 142, 143, 145, 147, 152, 170, 172, 174, 175, 176, 179, 189, 191, 196, 221, 238, 252, 253, 262, 264, 273, 274, 278], "ppo": [1, 132, 135, 183, 259], "give": [1, 2, 6, 13, 16, 20, 37, 46, 48, 51, 52, 54, 77, 92, 93, 95, 97, 102, 104, 106, 107, 109, 110, 119, 144, 148, 154, 157, 158, 159, 160, 169, 175, 179, 182, 186, 189, 191, 193, 194, 197, 211, 223, 272, 276, 280], "compon": [1, 6, 11, 12, 16, 54, 87, 97, 102, 106, 119, 130, 134, 135, 142, 143, 145, 153, 160, 176, 180, 184, 186, 190, 191, 193, 197, 200, 248, 276], "depend": [1, 6, 8, 11, 13, 48, 52, 54, 77, 84, 87, 92, 93, 99, 100, 102, 103, 107, 110, 140, 142, 143, 146, 147, 152, 153, 156, 157, 159, 160, 170, 173, 175, 176, 179, 186, 191, 197, 200, 202, 211, 223, 224, 229, 235, 238, 242, 243, 256, 264, 273, 284], "tensordict": [1, 16, 153, 160, 170, 176], "nn": [1, 2, 6, 7, 8, 13, 14, 15, 16, 17, 19, 20, 22, 37, 38, 39, 44, 45, 46, 48, 51, 57, 68, 71, 72, 90, 92, 95, 101, 104, 109, 114, 117, 120, 125, 128, 130, 135, 136, 137, 138, 140, 141, 143, 144, 145, 146, 150, 153, 154, 156, 164, 168, 169, 172, 176, 177, 178, 179, 180, 181, 183, 187, 189, 191, 193, 194, 198, 202, 204, 205, 207, 210, 211, 212, 219, 222, 225, 226, 228, 229, 234, 236, 238, 239, 240, 242, 243, 246, 257, 258, 259, 260, 263, 272, 275, 276, 280], "tensordictmodul": [1, 153, 176], "although": [1, 14, 19, 44, 51, 103, 104, 109, 110, 112, 115, 128, 139, 141, 160, 168, 170, 179, 191, 193, 211], "should": [1, 2, 3, 6, 7, 8, 11, 12, 13, 16, 17, 18, 19, 22, 32, 44, 45, 51, 52, 53, 54, 55, 57, 71, 77, 84, 87, 90, 92, 93, 95, 97, 99, 100, 101, 102, 103, 104, 105, 107, 109, 110, 112, 118, 125, 134, 135, 137, 138, 139, 141, 142, 145, 147, 150, 152, 153, 154, 157, 160, 161, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 187, 189, 190, 191, 193, 194, 196, 198, 204, 205, 211, 219, 222, 223, 228, 236, 237, 238, 241, 249, 253, 256, 258, 262, 263, 264, 266, 271, 272, 273, 278, 279, 283], "suffici": [1, 6, 51, 54, 102, 103, 125, 148, 150, 167, 170, 193], "transpar": [1, 14, 93, 104, 153, 179, 206, 212, 247], "understood": [1, 3, 18, 250], "without": [1, 6, 11, 12, 16, 18, 20, 32, 51, 55, 57, 97, 100, 102, 103, 114, 135, 136, 138, 140, 141, 144, 145, 152, 154, 156, 157, 159, 160, 161, 167, 170, 173, 174, 175, 176, 177, 178, 181, 186, 189, 193, 198, 203, 204, 207, 222, 227, 229, 235, 238, 248, 249, 251, 257, 263, 271, 273, 274, 276, 279, 280], "understand": [1, 2, 3, 4, 6, 9, 17, 44, 45, 54, 59, 84, 87, 92, 94, 95, 96, 97, 99, 100, 101, 103, 106, 110, 111, 115, 120, 125, 130, 135, 138, 141, 142, 143, 144, 147, 152, 156, 158, 170, 182, 189, 193, 194, 198, 199, 204, 207, 219, 221, 236, 240, 243, 247, 248, 250, 252, 253, 256, 259, 263, 272, 275], "class": [1, 2, 4, 6, 11, 12, 15, 17, 25, 32, 34, 36, 38, 39, 45, 48, 51, 54, 55, 67, 69, 77, 85, 87, 93, 95, 97, 99, 100, 101, 104, 105, 109, 110, 115, 118, 119, 125, 135, 136, 137, 138, 142, 143, 145, 147, 148, 150, 152, 153, 154, 157, 158, 160, 161, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 187, 189, 193, 196, 198, 204, 205, 207, 211, 219, 221, 223, 225, 237, 241, 242, 243, 253, 262, 271, 272, 273, 275], "do": [1, 2, 3, 6, 8, 9, 12, 13, 14, 15, 16, 17, 18, 20, 22, 32, 33, 39, 48, 51, 52, 53, 54, 56, 64, 65, 71, 87, 90, 95, 97, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 112, 118, 119, 122, 128, 130, 135, 136, 140, 141, 142, 143, 149, 150, 152, 153, 154, 157, 158, 159, 160, 164, 167, 168, 170, 173, 174, 175, 176, 177, 180, 182, 187, 189, 193, 194, 196, 197, 198, 205, 219, 222, 223, 224, 227, 235, 236, 237, 238, 239, 241, 250, 251, 252, 258, 260, 262, 264, 272, 273, 274, 279, 280, 283], "sota": 1, "implement": [1, 2, 6, 7, 12, 13, 14, 15, 16, 17, 20, 25, 33, 34, 36, 44, 46, 48, 51, 53, 57, 59, 62, 64, 65, 67, 69, 70, 71, 74, 75, 87, 92, 95, 101, 109, 110, 111, 118, 130, 131, 132, 135, 138, 140, 141, 143, 145, 147, 152, 153, 154, 156, 158, 159, 160, 161, 164, 169, 170, 172, 174, 176, 177, 180, 183, 186, 190, 193, 194, 196, 197, 200, 204, 211, 212, 223, 227, 235, 238, 246, 247, 249, 250, 253, 256, 259, 260, 262, 265, 272, 274, 275, 276, 278, 279, 280], "rather": [1, 15, 51, 54, 71, 77, 87, 97, 100, 102, 109, 110, 119, 135, 144, 146, 158, 168, 169, 170, 176, 189, 193, 197, 200, 223, 238, 247, 251, 262, 264, 271], "provid": [1, 3, 6, 7, 11, 12, 13, 16, 17, 18, 19, 20, 22, 25, 33, 34, 45, 51, 53, 54, 57, 58, 77, 84, 85, 87, 90, 92, 93, 95, 100, 101, 102, 103, 104, 110, 111, 114, 115, 118, 119, 131, 134, 135, 137, 139, 140, 141, 142, 148, 149, 150, 152, 153, 157, 158, 159, 160, 170, 174, 175, 176, 178, 179, 181, 186, 189, 190, 191, 193, 194, 196, 197, 200, 205, 206, 210, 211, 212, 213, 219, 221, 222, 223, 225, 227, 228, 236, 237, 238, 242, 243, 248, 251, 252, 253, 256, 262, 273, 274, 280, 283, 284], "high": [1, 2, 6, 17, 45, 51, 54, 55, 57, 59, 62, 84, 87, 97, 104, 109, 112, 117, 130, 135, 136, 137, 140, 142, 145, 146, 152, 183, 186, 187, 189, 193, 194, 213, 237, 238, 250, 256, 257, 259, 265, 274, 278, 284], "level": [1, 2, 3, 6, 18, 20, 45, 51, 55, 57, 59, 62, 70, 97, 105, 112, 118, 135, 136, 137, 140, 145, 148, 150, 152, 156, 158, 161, 165, 181, 182, 183, 186, 189, 191, 193, 194, 197, 206, 207, 247, 257, 259, 278, 280, 284], "illustr": [1, 33, 45, 48, 58, 125, 140, 141, 142, 154, 170, 177, 187, 189, 196, 198, 207, 219, 221, 228, 235, 273, 274], "": [1, 2, 3, 4, 6, 7, 8, 9, 11, 13, 14, 16, 19, 20, 22, 25, 32, 33, 34, 36, 37, 38, 41, 42, 44, 45, 46, 48, 50, 51, 53, 54, 55, 57, 59, 70, 77, 87, 90, 92, 93, 95, 97, 99, 100, 101, 102, 103, 104, 107, 109, 110, 111, 112, 114, 115, 117, 118, 119, 125, 128, 131, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 146, 147, 148, 150, 152, 153, 154, 156, 157, 158, 159, 161, 164, 167, 168, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 189, 190, 191, 193, 194, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 210, 211, 221, 222, 223, 225, 227, 228, 235, 236, 237, 238, 240, 241, 242, 243, 247, 248, 250, 256, 257, 258, 260, 262, 264, 265, 266, 271, 273, 274, 276, 279, 280, 283, 284], "librari": [1, 3, 4, 6, 7, 8, 9, 11, 14, 16, 18, 22, 34, 38, 45, 52, 53, 59, 62, 90, 93, 110, 114, 115, 128, 132, 135, 139, 142, 146, 147, 157, 170, 172, 173, 175, 176, 180, 186, 194, 197, 198, 200, 207, 211, 212, 219, 242, 243, 250, 252, 262, 266, 275, 282], "featur": [1, 6, 7, 8, 12, 13, 14, 16, 34, 38, 42, 51, 52, 53, 54, 84, 85, 87, 92, 95, 97, 100, 102, 103, 109, 110, 114, 118, 135, 136, 141, 145, 153, 158, 159, 160, 167, 170, 173, 175, 176, 180, 181, 187, 191, 193, 196, 197, 200, 210, 211, 219, 221, 225, 227, 235, 237, 238, 241, 243, 247, 250, 253, 258, 265, 274, 275, 276, 278, 279, 280, 283, 284], "context": [1, 2, 11, 16, 19, 20, 44, 51, 77, 92, 97, 109, 110, 117, 128, 131, 140, 145, 156, 168, 170, 176, 179, 180, 181, 182, 186, 191, 197, 206, 222, 224, 227, 228, 229, 238, 251, 253, 256, 263, 265, 275, 280, 284], "bash": [1, 22, 160, 177, 219], "pip3": [1, 22, 52, 137, 153, 170, 176, 177, 186, 194, 264], "instal": [1, 3, 4, 6, 11, 20, 25, 36, 52, 53, 55, 57, 59, 90, 96, 99, 110, 114, 128, 136, 137, 140, 143, 144, 148, 149, 152, 153, 156, 157, 160, 165, 170, 173, 176, 177, 178, 182, 186, 189, 191, 196, 198, 211, 219, 221, 223, 225, 228, 237, 239, 240, 241, 242, 243, 250, 256, 262, 263, 264, 279], "mujoco": [1, 153, 176], "glfw": 1, "cuda": [1, 4, 6, 11, 12, 13, 14, 17, 20, 22, 25, 33, 38, 41, 44, 45, 46, 55, 56, 57, 64, 65, 75, 77, 85, 90, 100, 104, 110, 117, 118, 119, 125, 129, 134, 135, 136, 137, 138, 139, 140, 143, 146, 148, 149, 150, 152, 154, 161, 167, 168, 172, 173, 177, 178, 179, 180, 181, 186, 189, 191, 194, 196, 202, 203, 204, 205, 207, 210, 213, 222, 223, 224, 228, 248, 251, 252, 253, 257, 258, 260, 262, 263, 264, 265, 275, 280], "avail": [1, 2, 3, 4, 6, 8, 12, 14, 17, 20, 22, 32, 33, 34, 37, 38, 39, 41, 44, 45, 50, 51, 52, 53, 54, 55, 64, 77, 90, 93, 95, 97, 100, 101, 102, 106, 110, 112, 118, 125, 137, 141, 143, 152, 153, 156, 160, 161, 170, 174, 175, 176, 177, 180, 181, 182, 186, 189, 190, 193, 194, 196, 205, 212, 213, 219, 221, 223, 224, 225, 238, 239, 240, 241, 242, 243, 252, 254, 262, 278, 280, 283, 284], "seri": [1, 6, 17, 54, 55, 56, 57, 58, 84, 94, 97, 100, 101, 131, 135, 139, 143, 144, 148, 149, 157, 165, 174, 176, 182, 197, 199, 211, 256, 273], "easili": [1, 14, 25, 33, 46, 62, 77, 93, 100, 101, 102, 110, 117, 118, 119, 137, 140, 142, 143, 150, 152, 157, 158, 164, 174, 176, 177, 180, 189, 191, 193, 196, 204, 205, 207, 223, 240, 260, 264, 278, 284], "reusabl": [1, 6], "swappabl": 1, "signatur": [1, 11, 12, 16, 17, 115, 152, 168, 179, 190, 193, 210], "main": [1, 4, 6, 13, 19, 37, 54, 55, 57, 90, 102, 115, 118, 136, 137, 143, 148, 152, 158, 170, 177, 178, 179, 180, 184, 193, 194, 196, 197, 204, 212, 219, 238, 257, 264, 265, 283, 284], "characterist": [1, 16, 44, 145, 157, 159, 160, 175, 181, 193, 253], "thei": [1, 6, 11, 12, 14, 16, 18, 19, 33, 34, 41, 45, 50, 51, 54, 57, 77, 84, 87, 92, 95, 97, 100, 101, 102, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 117, 118, 119, 128, 137, 141, 142, 143, 144, 147, 150, 152, 153, 158, 159, 161, 167, 168, 176, 177, 178, 180, 182, 189, 193, 194, 197, 200, 205, 207, 212, 223, 227, 228, 236, 237, 240, 241, 266, 271, 272, 273, 274, 276], "copi": [1, 6, 14, 22, 36, 41, 45, 46, 52, 57, 77, 84, 92, 96, 101, 102, 117, 119, 122, 135, 136, 141, 146, 150, 152, 153, 154, 157, 160, 168, 179, 186, 189, 190, 193, 204, 210, 211, 227, 238, 260, 262, 278], "loss_modul": 1, "whatev": [1, 8, 11, 95, 100, 101, 104, 106, 110, 119, 219], "need": [1, 3, 4, 6, 8, 12, 13, 14, 16, 17, 18, 19, 20, 22, 25, 32, 33, 34, 37, 38, 39, 41, 42, 44, 45, 46, 48, 51, 52, 53, 55, 56, 57, 62, 64, 65, 69, 84, 85, 90, 93, 95, 99, 100, 101, 102, 104, 106, 107, 109, 110, 112, 118, 119, 125, 128, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 164, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 189, 190, 191, 193, 194, 196, 198, 204, 205, 207, 210, 211, 212, 219, 222, 223, 225, 228, 235, 236, 237, 238, 239, 240, 241, 242, 243, 247, 251, 252, 253, 262, 263, 264, 271, 275, 276, 279, 280], "follow": [1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 32, 33, 34, 36, 37, 41, 45, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 77, 84, 85, 87, 89, 90, 92, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 112, 114, 115, 119, 122, 125, 128, 135, 136, 137, 138, 140, 141, 142, 145, 148, 149, 150, 152, 153, 157, 158, 159, 160, 161, 165, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 181, 186, 187, 189, 190, 191, 193, 194, 196, 197, 198, 205, 207, 211, 212, 219, 222, 225, 227, 228, 229, 235, 236, 242, 243, 246, 247, 248, 250, 252, 253, 256, 260, 262, 263, 265, 272, 274, 275, 276, 278, 279, 280, 283], "convent": [1, 16, 54, 110, 119, 128, 153, 189, 197, 223], "torch": [1, 2, 4, 5, 6, 8, 9, 11, 12, 13, 14, 16, 17, 18, 20, 22, 23, 24, 33, 34, 35, 37, 38, 39, 41, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 59, 62, 64, 65, 69, 75, 77, 87, 90, 92, 93, 95, 99, 100, 101, 102, 104, 107, 109, 112, 114, 115, 117, 118, 120, 125, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 144, 147, 152, 153, 154, 156, 157, 158, 159, 160, 161, 164, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 189, 194, 196, 198, 200, 203, 204, 205, 207, 208, 211, 212, 213, 219, 224, 225, 226, 228, 229, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 255, 257, 258, 259, 260, 262, 264, 265, 271, 272, 274, 275, 276, 279, 280, 281, 284], "receiv": [1, 6, 16, 19, 57, 90, 100, 106, 118, 152, 170, 172, 176, 178, 179, 180, 191, 194, 222, 225, 238, 262], "input": [1, 2, 3, 6, 7, 11, 12, 14, 15, 16, 18, 19, 32, 33, 36, 37, 41, 44, 45, 46, 48, 50, 51, 58, 62, 64, 65, 67, 69, 70, 71, 74, 75, 85, 87, 90, 92, 93, 95, 97, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 115, 117, 118, 119, 128, 131, 136, 137, 140, 142, 143, 144, 145, 146, 148, 150, 152, 153, 154, 156, 158, 159, 160, 161, 164, 167, 169, 172, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 189, 190, 191, 193, 196, 200, 202, 205, 210, 211, 212, 213, 221, 222, 225, 228, 229, 241, 242, 247, 251, 253, 256, 260, 264, 274, 276, 278, 280, 283], "all": [1, 2, 4, 6, 8, 11, 12, 13, 14, 16, 17, 19, 20, 22, 32, 33, 34, 37, 38, 41, 42, 44, 45, 46, 48, 51, 52, 53, 54, 55, 57, 58, 62, 77, 84, 87, 92, 93, 95, 97, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 117, 119, 122, 125, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 156, 157, 158, 161, 164, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 187, 189, 190, 191, 193, 194, 196, 198, 206, 210, 212, 219, 221, 223, 225, 227, 235, 236, 237, 239, 240, 241, 242, 243, 247, 248, 250, 251, 253, 254, 256, 257, 258, 259, 260, 262, 263, 264, 271, 272, 274, 276, 278, 279, 280, 283, 284], "necessari": [1, 3, 6, 11, 12, 14, 17, 22, 25, 39, 45, 54, 55, 57, 87, 90, 100, 101, 103, 110, 119, 128, 136, 137, 140, 146, 150, 160, 172, 178, 179, 180, 186, 193, 198, 213, 222, 238, 242, 243, 251, 260, 273, 276, 278, 279], "inform": [1, 2, 3, 8, 9, 11, 12, 16, 18, 32, 46, 51, 55, 77, 84, 90, 92, 97, 99, 100, 102, 106, 107, 109, 119, 136, 141, 142, 143, 144, 150, 152, 153, 156, 157, 160, 175, 176, 177, 179, 181, 182, 186, 187, 189, 191, 193, 194, 196, 198, 200, 205, 206, 207, 219, 222, 223, 237, 238, 240, 241, 251, 254, 256, 262, 263, 264, 274, 276, 278, 283], "return": [1, 2, 3, 4, 6, 7, 11, 12, 13, 14, 16, 17, 18, 19, 22, 33, 34, 38, 41, 46, 48, 51, 53, 54, 69, 77, 84, 92, 93, 95, 100, 101, 102, 104, 106, 107, 110, 112, 115, 117, 118, 119, 128, 136, 137, 138, 140, 144, 145, 147, 150, 152, 153, 154, 156, 158, 160, 161, 164, 168, 172, 173, 175, 176, 177, 178, 179, 180, 181, 186, 187, 189, 191, 193, 194, 196, 202, 204, 205, 207, 210, 211, 212, 213, 219, 221, 223, 225, 228, 237, 248, 251, 253, 265, 266, 271, 273, 275, 278, 279, 280, 283], "replay_buff": 1, "sampl": [1, 3, 4, 6, 11, 33, 34, 37, 38, 41, 45, 48, 50, 51, 53, 54, 57, 62, 90, 95, 97, 99, 100, 102, 119, 125, 130, 135, 136, 143, 146, 152, 159, 160, 167, 168, 176, 177, 178, 180, 183, 189, 193, 196, 197, 202, 221, 228, 237, 238, 242, 251, 259, 276, 283], "loss_dict": 1, "instanc": [1, 6, 8, 13, 14, 16, 33, 39, 46, 55, 56, 57, 62, 84, 90, 95, 97, 100, 101, 102, 103, 104, 107, 109, 110, 111, 118, 136, 137, 141, 142, 145, 148, 149, 150, 153, 158, 160, 170, 172, 176, 178, 179, 180, 191, 198, 210, 211, 212, 219, 222, 228, 236, 237, 238, 242, 243, 253, 256, 257, 279], "written": [1, 3, 4, 6, 7, 8, 11, 12, 16, 18, 87, 99, 105, 110, 111, 147, 153, 157, 164, 168, 169, 172, 181, 186, 189, 210, 212, 236, 248, 250, 262, 263, 264, 271], "under": [1, 11, 22, 32, 48, 51, 52, 54, 56, 58, 62, 99, 102, 104, 117, 118, 138, 140, 141, 145, 152, 159, 160, 168, 170, 174, 180, 186, 187, 196, 205, 206, 219, 222, 247, 250, 263, 272, 274], "loss_": 1, "smth": 1, "where": [1, 3, 6, 11, 13, 14, 15, 16, 19, 20, 22, 25, 32, 34, 48, 51, 53, 62, 65, 70, 85, 87, 90, 92, 93, 95, 97, 99, 100, 102, 103, 104, 106, 107, 109, 118, 135, 137, 140, 142, 143, 144, 147, 149, 150, 152, 154, 158, 161, 164, 167, 168, 169, 170, 172, 175, 176, 177, 178, 179, 180, 181, 182, 187, 191, 193, 194, 196, 197, 204, 207, 210, 219, 222, 223, 225, 235, 236, 237, 241, 253, 256, 260, 262, 264, 271, 274, 275, 280], "string": [1, 3, 7, 8, 11, 17, 51, 69, 100, 112, 118, 142, 143, 144, 153, 174, 176, 182, 189, 194, 219, 223, 237, 262], "describ": [1, 6, 11, 12, 16, 17, 19, 39, 41, 50, 51, 54, 62, 77, 95, 102, 112, 115, 122, 131, 152, 164, 172, 176, 177, 180, 186, 189, 193, 194, 198, 207, 210, 223, 256], "addit": [1, 2, 3, 7, 11, 13, 17, 20, 52, 57, 77, 93, 95, 100, 102, 107, 110, 112, 117, 137, 140, 141, 143, 150, 152, 154, 158, 161, 174, 178, 179, 182, 187, 190, 191, 193, 197, 204, 211, 223, 228, 238, 249, 250, 252, 253, 256, 271, 272, 273, 274, 278, 279, 280, 284], "kei": [1, 3, 6, 7, 11, 13, 16, 17, 51, 84, 105, 109, 112, 117, 119, 122, 137, 138, 139, 142, 153, 160, 170, 175, 176, 178, 181, 182, 186, 187, 189, 193, 194, 197, 202, 203, 210, 212, 213, 227, 236, 238, 239, 242, 249, 250, 260, 263, 276, 279, 280], "mai": [1, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 20, 37, 51, 52, 54, 70, 77, 87, 92, 93, 95, 97, 100, 104, 111, 115, 118, 119, 136, 139, 140, 141, 142, 145, 146, 147, 152, 153, 154, 156, 158, 159, 164, 167, 168, 170, 175, 176, 179, 182, 186, 189, 191, 193, 197, 200, 202, 205, 207, 213, 223, 228, 238, 241, 242, 248, 250, 251, 253, 262, 273, 276, 280], "metric": [1, 20, 90, 99, 100, 102, 117, 137, 186, 189, 196, 219, 223, 236, 280], "log": [1, 22, 37, 51, 52, 54, 55, 99, 103, 104, 107, 109, 110, 136, 139, 142, 149, 175, 176, 178, 180, 186, 187, 189, 193, 194, 203, 206, 248, 254, 256, 258, 275], "dure": [1, 11, 14, 16, 22, 32, 33, 37, 38, 39, 51, 54, 64, 65, 87, 92, 95, 97, 100, 101, 102, 104, 109, 110, 111, 118, 119, 129, 135, 136, 137, 138, 140, 141, 144, 145, 146, 147, 148, 150, 153, 157, 158, 164, 168, 175, 176, 177, 178, 180, 186, 190, 191, 193, 196, 198, 205, 212, 219, 228, 235, 236, 242, 243, 262, 263, 266, 275, 278], "reason": [1, 6, 11, 16, 17, 18, 20, 32, 54, 84, 92, 95, 102, 104, 107, 110, 119, 125, 141, 146, 152, 158, 176, 181, 182, 193, 194, 205, 223, 226, 227, 234, 252, 258, 259, 262, 264, 273, 280], "independ": [1, 51, 109, 110, 159, 160, 164, 179, 210, 271, 279], "let": [1, 2, 3, 4, 6, 8, 11, 12, 13, 14, 16, 18, 19, 20, 22, 25, 33, 37, 44, 45, 46, 48, 51, 53, 54, 70, 77, 87, 90, 92, 93, 95, 97, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 115, 117, 118, 119, 125, 128, 129, 138, 140, 142, 147, 150, 152, 153, 154, 157, 158, 159, 161, 164, 167, 168, 169, 170, 172, 174, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 189, 190, 191, 193, 194, 196, 197, 198, 202, 205, 207, 210, 211, 221, 223, 225, 227, 228, 235, 236, 237, 238, 241, 242, 243, 252, 253, 260, 264, 266, 271, 272, 276, 280], "user": [1, 7, 8, 16, 20, 22, 25, 42, 45, 51, 52, 84, 85, 87, 93, 102, 106, 115, 122, 128, 129, 137, 138, 139, 140, 143, 144, 150, 158, 161, 170, 178, 180, 181, 182, 186, 189, 193, 194, 196, 197, 200, 204, 205, 206, 207, 210, 212, 213, 219, 228, 243, 245, 247, 248, 249, 256, 258, 259, 260, 271, 272, 273, 274, 279, 280], "differ": [1, 3, 6, 8, 11, 12, 13, 14, 15, 16, 19, 20, 22, 25, 32, 37, 41, 48, 50, 51, 53, 54, 62, 75, 77, 84, 85, 87, 90, 93, 95, 97, 100, 101, 102, 103, 104, 109, 110, 112, 128, 135, 136, 137, 138, 140, 142, 143, 144, 146, 149, 150, 152, 154, 157, 158, 159, 161, 164, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 189, 190, 191, 193, 194, 197, 204, 205, 206, 207, 210, 211, 219, 223, 226, 228, 234, 236, 237, 238, 243, 248, 251, 253, 256, 257, 258, 259, 262, 264, 265, 271, 272, 273, 274, 275, 276, 280], "set": [1, 2, 6, 8, 11, 12, 13, 14, 16, 17, 18, 20, 22, 25, 32, 37, 39, 44, 45, 48, 50, 51, 52, 54, 55, 57, 62, 64, 65, 70, 77, 84, 85, 89, 92, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 107, 109, 110, 112, 114, 118, 119, 125, 128, 133, 135, 136, 137, 138, 140, 143, 144, 145, 148, 149, 150, 152, 153, 158, 160, 167, 168, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 186, 187, 190, 191, 193, 194, 196, 197, 198, 200, 204, 205, 207, 211, 212, 219, 223, 224, 227, 235, 237, 239, 241, 248, 254, 256, 271, 273, 275, 276, 278, 279, 280], "sum": [1, 2, 3, 4, 9, 13, 16, 18, 22, 33, 44, 51, 54, 69, 84, 92, 93, 95, 103, 104, 106, 118, 136, 137, 138, 144, 145, 147, 152, 159, 168, 177, 178, 179, 180, 186, 191, 193, 194, 202, 204, 205, 210, 223, 241, 257, 272], "can": [1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 25, 32, 33, 34, 36, 37, 38, 39, 41, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 62, 69, 70, 75, 77, 84, 85, 87, 90, 92, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 117, 118, 119, 122, 125, 128, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 164, 165, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 189, 190, 191, 193, 194, 196, 197, 198, 202, 203, 204, 205, 206, 207, 210, 211, 212, 219, 221, 222, 223, 224, 225, 227, 228, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 260, 262, 263, 264, 266, 271, 272, 273, 274, 275, 276, 278, 279, 280, 283, 284], "simpli": [1, 6, 11, 15, 44, 45, 51, 55, 87, 95, 106, 109, 118, 119, 128, 139, 140, 142, 144, 147, 152, 158, 159, 167, 173, 174, 176, 177, 178, 179, 182, 184, 186, 187, 191, 193, 194, 197, 205, 223, 237, 239, 240, 241, 260, 262, 272, 279, 283], "done": [1, 3, 6, 8, 11, 12, 16, 19, 20, 51, 56, 84, 87, 97, 100, 102, 103, 104, 110, 136, 137, 140, 141, 144, 146, 153, 154, 157, 158, 160, 161, 170, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 187, 189, 193, 194, 198, 212, 227, 238, 252, 262, 264, 280], "via": [1, 3, 6, 8, 9, 19, 20, 22, 39, 56, 57, 77, 87, 102, 135, 136, 137, 140, 142, 152, 153, 159, 168, 175, 176, 181, 187, 189, 191, 193, 194, 196, 207, 211, 212, 219, 227, 235, 236, 238, 247, 250, 263, 266, 275, 278, 280], "loss_val": 1, "item": [1, 2, 4, 6, 12, 13, 17, 41, 51, 69, 70, 95, 106, 118, 119, 122, 136, 137, 138, 143, 144, 152, 153, 175, 176, 178, 179, 180, 187, 189, 193, 222, 238, 263], "startswith": [1, 85], "parent": [1, 3, 4, 16, 95, 207], "As": [1, 2, 6, 8, 11, 12, 13, 14, 16, 19, 39, 44, 51, 52, 54, 77, 87, 90, 93, 95, 97, 100, 101, 102, 110, 112, 118, 119, 136, 137, 138, 139, 140, 141, 142, 150, 152, 153, 156, 157, 158, 159, 160, 167, 168, 170, 172, 174, 176, 177, 178, 179, 180, 181, 186, 189, 190, 193, 194, 196, 197, 200, 206, 211, 219, 223, 227, 238, 243, 250, 256, 257, 264, 274, 276, 279], "mani": [1, 2, 6, 12, 16, 17, 18, 20, 22, 32, 33, 37, 38, 51, 53, 54, 67, 71, 77, 84, 92, 93, 95, 97, 100, 102, 104, 105, 106, 110, 112, 114, 118, 137, 140, 142, 146, 152, 154, 159, 161, 164, 169, 170, 176, 178, 179, 182, 190, 191, 193, 194, 197, 221, 222, 223, 225, 238, 242, 243, 250, 256, 273, 280, 283], "other": [1, 6, 7, 8, 11, 12, 13, 16, 20, 32, 33, 36, 41, 45, 48, 50, 51, 54, 55, 57, 58, 59, 70, 71, 77, 84, 85, 90, 92, 93, 95, 100, 102, 104, 106, 107, 109, 110, 118, 119, 122, 128, 130, 132, 136, 138, 139, 140, 143, 144, 146, 148, 149, 150, 152, 153, 156, 157, 158, 159, 160, 164, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 187, 190, 191, 193, 194, 196, 197, 198, 205, 207, 222, 223, 225, 227, 228, 235, 236, 237, 238, 239, 240, 241, 242, 243, 247, 248, 249, 250, 251, 257, 262, 264, 271, 272, 273, 274, 276, 280], "expect": [1, 3, 4, 6, 8, 12, 13, 16, 46, 48, 51, 53, 77, 87, 90, 92, 93, 95, 97, 100, 101, 102, 106, 107, 109, 110, 111, 119, 125, 139, 142, 146, 150, 153, 159, 160, 167, 168, 174, 175, 176, 177, 178, 179, 181, 189, 193, 194, 196, 206, 212, 219, 221, 222, 223, 228, 235, 238, 242, 251, 253, 257, 262, 278], "ani": [1, 2, 3, 6, 7, 8, 11, 12, 13, 14, 15, 16, 18, 19, 20, 32, 42, 44, 46, 48, 51, 53, 55, 57, 69, 92, 95, 97, 100, 102, 103, 105, 106, 109, 110, 112, 114, 118, 119, 128, 131, 136, 138, 140, 141, 143, 145, 147, 148, 152, 154, 156, 157, 160, 161, 167, 168, 169, 170, 172, 175, 176, 177, 179, 180, 184, 186, 189, 190, 193, 194, 198, 200, 202, 203, 204, 205, 207, 210, 219, 222, 225, 227, 229, 235, 237, 241, 247, 248, 250, 251, 252, 254, 256, 263, 265, 271, 272, 273, 274, 275, 278, 280], "similar": [1, 3, 4, 6, 8, 11, 12, 13, 16, 17, 41, 50, 51, 84, 85, 93, 95, 97, 100, 102, 103, 109, 110, 115, 118, 140, 143, 147, 152, 153, 168, 176, 178, 179, 180, 181, 182, 186, 187, 189, 193, 196, 198, 211, 222, 223, 237, 238, 242, 247, 253, 257, 263, 271, 272, 273, 274, 275, 276], "structur": [1, 4, 6, 8, 11, 16, 21, 22, 33, 38, 39, 41, 50, 51, 54, 55, 87, 92, 95, 97, 101, 102, 103, 107, 112, 119, 135, 145, 148, 154, 157, 160, 161, 168, 169, 174, 176, 180, 187, 189, 191, 196, 236, 242, 250, 252, 259, 274, 283, 284], "format": [1, 14, 20, 42, 110, 114, 119, 130, 135, 136, 137, 139, 157, 158, 175, 178, 180, 183, 186, 187, 189, 194, 196, 200, 212, 213, 221, 223, 259, 271, 273, 274, 280], "make": [1, 3, 4, 6, 8, 11, 12, 14, 16, 22, 33, 37, 38, 42, 44, 45, 46, 51, 52, 53, 55, 56, 57, 59, 70, 77, 90, 92, 95, 97, 99, 100, 102, 104, 105, 106, 108, 109, 110, 111, 114, 115, 119, 122, 125, 128, 130, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 150, 152, 153, 157, 158, 159, 160, 167, 168, 170, 173, 174, 176, 177, 178, 179, 180, 182, 187, 189, 190, 191, 193, 194, 196, 197, 198, 205, 206, 207, 211, 212, 221, 222, 223, 227, 229, 236, 237, 238, 247, 248, 250, 253, 259, 260, 262, 264, 271, 272, 273, 274, 276, 283], "possibl": [1, 2, 3, 6, 9, 11, 12, 16, 17, 20, 92, 93, 97, 100, 103, 106, 114, 138, 141, 145, 146, 147, 153, 154, 156, 157, 159, 160, 170, 175, 176, 178, 179, 182, 190, 191, 193, 194, 196, 197, 200, 210, 212, 222, 227, 238, 250, 256, 262, 276, 280], "re": [1, 3, 6, 7, 8, 9, 12, 16, 19, 25, 36, 38, 41, 45, 50, 51, 52, 93, 95, 97, 99, 100, 101, 102, 103, 110, 118, 125, 128, 141, 143, 144, 153, 154, 156, 159, 164, 167, 169, 170, 175, 176, 177, 178, 179, 182, 193, 194, 196, 205, 207, 213, 222, 223, 227, 237, 238, 242, 263, 264, 271, 283], "across": [1, 3, 11, 13, 16, 19, 22, 25, 41, 51, 54, 56, 57, 58, 84, 93, 100, 102, 112, 131, 136, 137, 138, 140, 148, 149, 150, 152, 154, 160, 170, 172, 174, 177, 179, 180, 190, 193, 194, 203, 205, 207, 210, 221, 236, 238, 239, 241, 247, 251, 253, 256, 257, 260], "modal": [1, 170, 221], "complex": [1, 6, 33, 34, 52, 69, 70, 92, 93, 97, 102, 112, 118, 119, 131, 136, 150, 164, 168, 170, 178, 180, 187, 190, 191, 193, 194, 206, 207, 229, 239, 250, 262, 276], "read": [1, 2, 6, 7, 8, 9, 16, 38, 48, 51, 53, 77, 95, 106, 107, 110, 119, 125, 131, 137, 138, 139, 141, 142, 143, 144, 145, 152, 158, 167, 170, 175, 176, 177, 179, 182, 184, 187, 190, 191, 197, 222, 223, 253, 256, 263], "multipl": [1, 3, 11, 12, 13, 16, 18, 19, 20, 22, 41, 46, 50, 51, 55, 56, 57, 58, 62, 67, 84, 90, 92, 93, 95, 97, 100, 101, 102, 106, 110, 118, 131, 136, 138, 140, 141, 142, 143, 144, 150, 152, 154, 158, 160, 170, 172, 175, 176, 178, 179, 180, 182, 186, 187, 189, 191, 193, 194, 197, 200, 205, 210, 211, 222, 223, 228, 237, 238, 239, 252, 256, 260, 262, 264, 275, 276, 280], "entri": [1, 13, 16, 55, 106, 109, 117, 119, 148, 153, 158, 174, 176, 178, 186, 193, 240, 247, 262, 273, 274, 276, 279], "In": [1, 2, 3, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 25, 32, 33, 34, 36, 38, 39, 41, 44, 46, 50, 51, 52, 53, 54, 55, 57, 58, 59, 65, 69, 70, 77, 84, 85, 87, 89, 90, 93, 95, 97, 99, 101, 102, 103, 104, 106, 107, 109, 110, 112, 115, 117, 118, 119, 125, 128, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 157, 158, 159, 160, 161, 164, 165, 167, 168, 169, 170, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 189, 190, 191, 193, 194, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 210, 211, 212, 219, 221, 222, 223, 225, 227, 228, 235, 236, 237, 238, 239, 240, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 260, 262, 263, 264, 265, 266, 271, 272, 273, 274, 275, 276, 278, 279, 280], "word": [1, 6, 12, 13, 16, 45, 51, 77, 84, 93, 97, 102, 103, 105, 107, 108, 119, 135, 143, 144, 152, 165, 167, 168, 174, 180, 182, 194, 253, 259, 272, 274, 276], "allow": [1, 2, 6, 7, 8, 11, 12, 13, 14, 16, 25, 32, 33, 34, 44, 51, 52, 53, 54, 55, 84, 85, 87, 90, 92, 93, 95, 97, 100, 102, 104, 106, 107, 109, 110, 112, 118, 136, 137, 138, 139, 140, 142, 143, 144, 145, 147, 150, 152, 153, 160, 161, 164, 167, 168, 170, 173, 174, 176, 177, 178, 180, 181, 182, 184, 189, 190, 191, 193, 194, 196, 197, 207, 210, 219, 222, 223, 228, 235, 236, 237, 247, 256, 260, 262, 265, 271, 272, 276, 278], "u": [1, 3, 6, 7, 11, 12, 13, 16, 18, 20, 32, 34, 45, 48, 51, 53, 54, 71, 84, 87, 90, 92, 93, 95, 97, 100, 102, 103, 104, 106, 109, 110, 115, 118, 128, 137, 140, 143, 146, 148, 152, 153, 154, 157, 158, 159, 160, 161, 164, 167, 168, 169, 170, 172, 175, 176, 177, 179, 182, 187, 189, 190, 191, 193, 194, 197, 202, 210, 221, 223, 225, 227, 235, 237, 242, 251, 264, 271, 272, 274, 276, 278, 280, 283], "oblivi": [1, 176], "type": [1, 3, 6, 8, 11, 12, 16, 22, 41, 50, 51, 52, 77, 84, 87, 93, 95, 96, 99, 101, 106, 110, 112, 115, 131, 136, 137, 140, 142, 152, 154, 158, 169, 170, 173, 174, 176, 178, 179, 180, 181, 186, 189, 191, 193, 197, 200, 204, 205, 210, 212, 213, 219, 221, 235, 236, 238, 239, 242, 246, 249, 256, 271, 275, 278], "being": [1, 3, 6, 12, 14, 16, 20, 48, 51, 54, 84, 93, 101, 102, 103, 104, 106, 110, 112, 125, 128, 137, 140, 142, 146, 152, 153, 168, 170, 172, 174, 176, 177, 179, 191, 193, 194, 198, 204, 212, 223, 227, 238, 252, 256, 272, 273, 276, 280], "run": [1, 2, 3, 7, 8, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 25, 32, 33, 34, 37, 38, 39, 41, 42, 44, 45, 48, 50, 53, 54, 58, 59, 62, 65, 70, 74, 75, 84, 90, 92, 93, 95, 97, 99, 100, 101, 103, 104, 106, 107, 109, 110, 111, 112, 114, 115, 117, 118, 119, 122, 125, 128, 129, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 156, 157, 158, 159, 160, 161, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 190, 191, 194, 196, 197, 198, 200, 204, 205, 206, 207, 211, 213, 219, 222, 223, 224, 227, 229, 235, 237, 238, 242, 243, 245, 247, 249, 250, 251, 252, 253, 254, 256, 258, 259, 262, 264, 265, 271, 272, 273, 274, 275, 276, 278, 279, 280, 283, 284], "elementari": [1, 2], "onli": [1, 3, 6, 8, 9, 11, 12, 13, 15, 16, 17, 22, 32, 39, 44, 45, 46, 48, 51, 55, 57, 58, 77, 84, 90, 92, 95, 97, 100, 102, 103, 104, 109, 110, 117, 119, 122, 125, 128, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 156, 157, 161, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 182, 186, 187, 189, 190, 191, 193, 194, 196, 197, 198, 202, 203, 207, 210, 219, 222, 223, 228, 235, 238, 239, 240, 243, 247, 250, 251, 253, 256, 257, 263, 264, 271, 272, 273, 274, 275, 276, 278, 279, 283, 284], "those": [1, 3, 6, 9, 12, 13, 16, 20, 32, 39, 44, 90, 92, 100, 103, 109, 110, 115, 128, 139, 140, 141, 143, 154, 157, 167, 168, 172, 173, 174, 180, 182, 187, 189, 193, 194, 199, 200, 205, 219, 222, 223, 237, 247, 250, 252, 256, 264, 272, 280, 283], "keep": [1, 3, 6, 12, 13, 16, 32, 41, 44, 51, 54, 77, 84, 87, 95, 97, 100, 102, 104, 106, 107, 110, 118, 119, 128, 134, 135, 136, 137, 138, 139, 140, 141, 144, 149, 150, 153, 158, 164, 170, 180, 182, 193, 194, 197, 223, 238, 257], "didact": [1, 152], "ll": [1, 3, 6, 8, 11, 12, 18, 20, 33, 34, 36, 41, 50, 51, 52, 79, 80, 81, 82, 90, 92, 93, 95, 97, 99, 100, 101, 103, 110, 112, 128, 138, 143, 144, 150, 152, 153, 154, 156, 159, 164, 167, 169, 175, 176, 177, 179, 182, 187, 193, 194, 197, 198, 202, 203, 210, 223, 249, 254, 264, 271, 273, 275, 280], "displai": [1, 2, 6, 14, 34, 45, 93, 99, 101, 117, 125, 146, 182, 186, 206, 222, 223, 236], "each": [1, 2, 3, 6, 7, 11, 12, 13, 14, 16, 18, 19, 20, 22, 25, 32, 33, 34, 36, 37, 38, 41, 44, 45, 46, 50, 51, 53, 54, 55, 57, 58, 62, 67, 77, 84, 85, 87, 90, 92, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 107, 109, 110, 114, 117, 118, 119, 125, 128, 131, 135, 136, 137, 138, 140, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 156, 157, 159, 160, 161, 164, 167, 168, 169, 170, 172, 174, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 189, 193, 194, 196, 197, 198, 203, 206, 207, 210, 212, 219, 221, 222, 223, 225, 227, 228, 229, 235, 236, 237, 238, 240, 241, 242, 253, 254, 256, 257, 260, 262, 263, 265, 271, 274, 276, 280], "popul": [1, 32, 44, 51, 90, 100, 128, 137, 153, 160, 176, 178, 203, 210, 237, 248, 262], "later": [1, 3, 4, 6, 13, 18, 32, 41, 48, 51, 77, 90, 93, 97, 102, 106, 107, 110, 119, 136, 137, 139, 140, 144, 145, 147, 152, 154, 156, 157, 158, 159, 160, 164, 169, 172, 176, 177, 180, 181, 182, 187, 189, 190, 193, 194, 197, 202, 203, 204, 206, 210, 219, 222, 223, 224, 227, 235, 238, 242, 243, 247, 248, 249, 250, 252, 253, 254, 260, 262, 263, 266, 271, 279], "stage": [1, 16, 19, 97, 110, 172, 204, 210, 265, 275], "start": [1, 4, 6, 13, 19, 20, 22, 25, 32, 36, 44, 45, 51, 52, 54, 55, 56, 57, 62, 77, 90, 92, 93, 96, 97, 100, 101, 102, 105, 106, 110, 111, 112, 115, 128, 129, 131, 135, 137, 139, 140, 141, 142, 143, 144, 145, 146, 152, 158, 159, 160, 167, 168, 170, 175, 177, 178, 179, 182, 186, 187, 189, 191, 193, 194, 196, 198, 199, 204, 211, 219, 223, 226, 228, 234, 236, 241, 245, 247, 248, 250, 257, 258, 259, 260, 262, 264, 266, 273, 278, 280, 281], "solv": [1, 6, 16, 51, 53, 102, 109, 125, 168, 176, 178, 180, 223, 227, 238, 273], "task": [1, 6, 15, 16, 20, 25, 37, 38, 51, 101, 102, 103, 109, 117, 125, 131, 132, 135, 136, 143, 153, 168, 170, 176, 177, 182, 184, 189, 196, 223, 228, 237, 238, 247, 253, 256, 280], "strategi": [1, 20, 22, 25, 54, 84, 135, 144, 152, 158, 159, 169, 170, 178, 179, 200, 204, 206, 207, 213, 238, 280], "predict": [1, 33, 36, 37, 38, 39, 44, 45, 51, 54, 64, 65, 69, 70, 71, 74, 75, 92, 93, 95, 97, 101, 102, 103, 107, 109, 110, 118, 128, 140, 142, 143, 144, 154, 159, 160, 170, 177, 182, 187, 194, 196, 211, 221, 225, 253, 258, 280], "henc": [1, 16, 20, 41, 44, 50, 84, 136, 141, 150, 161, 164, 170, 173, 176, 178, 180, 194, 211, 223, 253, 280], "our": [1, 2, 3, 4, 6, 8, 9, 11, 12, 14, 19, 20, 32, 33, 34, 36, 37, 38, 41, 42, 44, 45, 46, 50, 51, 52, 53, 54, 55, 57, 62, 64, 65, 67, 69, 70, 71, 77, 90, 92, 93, 95, 97, 99, 100, 101, 102, 103, 104, 107, 109, 110, 112, 115, 117, 118, 125, 128, 135, 136, 137, 139, 142, 143, 144, 145, 147, 148, 149, 150, 153, 156, 157, 158, 159, 160, 161, 164, 168, 169, 170, 172, 174, 176, 177, 178, 179, 181, 182, 184, 187, 189, 191, 193, 194, 196, 197, 198, 199, 203, 204, 205, 210, 211, 221, 223, 237, 242, 243, 248, 249, 257, 258, 260, 264, 266, 271, 272, 273, 274, 279, 280, 283], "two": [1, 3, 6, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 25, 32, 34, 37, 38, 41, 42, 44, 50, 51, 52, 54, 59, 77, 85, 87, 90, 92, 93, 95, 97, 100, 102, 103, 104, 106, 107, 109, 110, 111, 112, 117, 118, 125, 128, 136, 137, 142, 143, 145, 146, 147, 149, 150, 152, 153, 156, 157, 158, 159, 160, 161, 164, 168, 169, 170, 172, 173, 174, 176, 177, 178, 180, 181, 182, 189, 194, 196, 197, 198, 200, 207, 210, 211, 219, 223, 225, 227, 228, 235, 237, 238, 239, 248, 250, 252, 256, 257, 260, 262, 264, 265, 272, 274, 276, 278, 280], "constructor": [1, 6, 8, 12, 13, 14, 69, 71, 87, 97, 101, 118, 128, 136, 137, 150, 170, 173, 174, 176, 178, 180, 222, 223, 274], "both": [1, 2, 6, 8, 11, 12, 13, 14, 16, 19, 25, 34, 51, 53, 54, 62, 77, 84, 87, 93, 100, 101, 102, 109, 110, 117, 118, 137, 138, 140, 142, 146, 149, 150, 152, 156, 158, 159, 161, 164, 170, 174, 176, 178, 179, 180, 181, 182, 190, 193, 194, 196, 197, 204, 205, 207, 211, 212, 219, 221, 222, 223, 235, 237, 242, 247, 248, 253, 256, 264, 265, 271, 274, 275], "compat": [1, 4, 6, 7, 11, 13, 20, 52, 99, 100, 106, 111, 139, 145, 153, 181, 191, 193, 252, 253, 279], "comput": [1, 3, 4, 6, 11, 13, 14, 15, 18, 19, 20, 25, 37, 41, 45, 48, 50, 51, 53, 54, 55, 59, 62, 64, 65, 67, 69, 70, 74, 75, 77, 85, 87, 92, 93, 95, 97, 100, 101, 102, 103, 104, 105, 110, 112, 114, 118, 128, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 153, 156, 158, 160, 167, 168, 169, 170, 172, 174, 175, 176, 177, 179, 181, 182, 186, 189, 190, 191, 193, 194, 196, 197, 198, 200, 202, 203, 210, 211, 219, 222, 223, 225, 227, 229, 237, 242, 250, 253, 256, 260, 262, 264, 275, 276, 280, 283, 284], "fit": [1, 6, 12, 13, 25, 62, 90, 109, 118, 136, 137, 138, 140, 150, 170, 180, 194, 222, 256], "gener": [1, 8, 11, 12, 13, 16, 19, 20, 22, 25, 39, 44, 45, 51, 53, 55, 74, 75, 84, 87, 92, 93, 95, 99, 100, 101, 102, 104, 106, 109, 110, 111, 118, 120, 122, 125, 130, 132, 135, 140, 141, 143, 145, 150, 152, 154, 158, 159, 160, 161, 164, 165, 167, 168, 169, 170, 174, 176, 178, 180, 181, 182, 183, 184, 186, 187, 189, 191, 193, 194, 196, 197, 200, 204, 205, 210, 211, 212, 219, 228, 237, 240, 242, 248, 252, 253, 254, 256, 259, 262, 263, 264, 265, 266, 271, 272, 273, 275, 276, 278, 280], "crucial": [1, 2, 14, 16, 84, 106, 153, 170, 176, 194, 238], "convert_to_funct": 1, "extract": [1, 51, 54, 77, 99, 102, 125, 128, 135, 143, 144, 156, 158, 169, 176, 182, 191, 193, 196, 198, 210, 225], "convert": [1, 12, 14, 33, 34, 41, 42, 45, 51, 53, 54, 57, 95, 97, 100, 102, 110, 112, 114, 119, 129, 135, 138, 143, 144, 175, 176, 178, 179, 187, 194, 205, 212, 213, 221, 235, 238, 264, 271, 272, 274, 275, 276, 278], "strictli": [1, 100, 176], "speak": [1, 11, 44, 100, 141, 152, 238], "one": [1, 3, 4, 6, 7, 8, 9, 11, 13, 14, 16, 17, 20, 22, 32, 34, 36, 41, 42, 46, 48, 50, 51, 53, 54, 57, 58, 62, 77, 87, 90, 92, 93, 95, 97, 100, 101, 102, 103, 105, 106, 107, 109, 110, 115, 118, 119, 122, 125, 128, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 152, 153, 154, 156, 157, 158, 159, 167, 168, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 187, 189, 190, 193, 194, 196, 198, 204, 205, 206, 207, 223, 225, 227, 228, 238, 239, 241, 250, 251, 252, 253, 256, 257, 262, 263, 264, 271, 272, 273, 275, 276, 280, 283], "perfectli": [1, 16], "howev": [1, 3, 4, 6, 7, 8, 9, 11, 12, 14, 16, 17, 18, 20, 32, 39, 46, 48, 51, 53, 54, 77, 87, 90, 102, 103, 118, 125, 140, 141, 145, 146, 147, 152, 153, 154, 157, 161, 167, 170, 173, 174, 177, 178, 179, 180, 181, 182, 187, 189, 190, 191, 193, 194, 198, 200, 205, 206, 210, 211, 223, 227, 235, 237, 238, 243, 250, 253, 256, 265, 266, 272, 273, 276, 280, 283], "encourag": [1, 6, 97, 177, 182, 189], "usag": [1, 3, 13, 15, 17, 84, 92, 117, 129, 130, 134, 135, 136, 138, 141, 152, 153, 158, 159, 172, 176, 178, 180, 181, 183, 186, 197, 200, 204, 212, 213, 219, 222, 236, 238, 251, 256, 258, 259, 260, 264, 266, 275, 276], "doe": [1, 2, 3, 6, 11, 15, 16, 17, 18, 32, 42, 44, 48, 74, 75, 77, 87, 92, 93, 95, 97, 99, 100, 101, 102, 104, 106, 109, 110, 112, 115, 118, 119, 125, 128, 136, 137, 138, 139, 145, 147, 150, 152, 153, 159, 160, 161, 167, 168, 170, 172, 175, 176, 177, 179, 180, 181, 182, 186, 187, 190, 191, 193, 194, 196, 197, 198, 204, 219, 222, 223, 227, 235, 237, 238, 250, 252, 256, 262, 263, 264, 272, 273, 274, 283], "often": [1, 6, 12, 16, 20, 41, 51, 77, 90, 92, 93, 95, 100, 102, 104, 106, 109, 110, 118, 119, 140, 141, 142, 144, 160, 168, 193, 194, 202, 204, 222, 237, 238, 262, 276, 280], "same": [1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 14, 17, 20, 32, 33, 39, 41, 44, 45, 51, 53, 54, 55, 57, 67, 75, 77, 87, 90, 92, 95, 100, 101, 102, 104, 106, 107, 109, 110, 112, 115, 117, 118, 119, 128, 136, 137, 138, 139, 140, 141, 143, 145, 146, 149, 150, 152, 154, 156, 158, 159, 160, 161, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 189, 191, 193, 194, 197, 204, 205, 219, 222, 223, 228, 230, 231, 232, 233, 235, 238, 241, 242, 247, 248, 251, 252, 256, 257, 260, 263, 265, 271, 272, 273, 274, 276, 280], "usual": [1, 6, 11, 18, 44, 93, 95, 97, 99, 100, 104, 105, 107, 109, 110, 125, 140, 141, 144, 146, 147, 150, 152, 153, 158, 161, 167, 170, 174, 176, 193, 197, 222, 227, 228, 238, 256, 283], "former": [1, 143, 144, 182], "some": [1, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 20, 32, 33, 34, 37, 41, 42, 44, 45, 48, 50, 51, 52, 53, 54, 64, 70, 77, 84, 90, 92, 93, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 115, 117, 118, 119, 128, 135, 136, 137, 139, 142, 143, 144, 145, 146, 147, 148, 150, 152, 153, 154, 156, 157, 158, 159, 164, 167, 169, 170, 172, 174, 176, 177, 179, 180, 182, 184, 186, 187, 189, 190, 191, 193, 194, 196, 197, 198, 205, 212, 222, 223, 225, 227, 228, 229, 237, 238, 239, 242, 243, 250, 251, 253, 256, 260, 262, 264, 271, 272, 273, 274, 276, 278, 279, 280, 283], "lag": [1, 176], "absolut": [1, 6, 12, 84, 95, 104, 174, 177, 198, 237], "dilut": 1, "move": [1, 8, 9, 14, 26, 27, 28, 29, 30, 31, 33, 38, 41, 44, 48, 50, 78, 91, 92, 104, 110, 136, 137, 138, 140, 149, 150, 153, 155, 167, 168, 170, 173, 177, 179, 180, 185, 186, 188, 192, 196, 204, 205, 211, 223, 237, 238, 267, 270, 272], "averag": [1, 51, 54, 62, 84, 90, 93, 95, 101, 102, 110, 136, 139, 144, 152, 169, 177, 180, 182, 186, 198, 223, 238], "These": [1, 11, 13, 14, 16, 20, 39, 44, 51, 54, 57, 62, 84, 90, 97, 105, 107, 109, 110, 117, 125, 132, 133, 152, 160, 176, 179, 181, 182, 189, 190, 193, 194, 197, 199, 211, 223, 237, 238, 247, 248, 250, 264, 278, 280], "associ": [1, 3, 6, 11, 12, 33, 34, 52, 84, 93, 147, 156, 170, 174, 181, 189, 194, 225, 235, 238, 252, 263, 272, 280], "One": [1, 2, 3, 6, 12, 13, 17, 51, 53, 77, 84, 92, 97, 100, 102, 103, 104, 106, 136, 137, 138, 139, 140, 141, 144, 150, 152, 154, 167, 168, 170, 184, 187, 190, 191, 193, 194, 196, 197, 204, 205, 223, 229, 235, 237, 238, 253, 262, 273, 283], "advantag": [1, 6, 16, 20, 51, 87, 100, 103, 110, 131, 137, 138, 141, 152, 153, 168, 170, 176, 191, 204, 205, 212, 219, 238, 242, 248, 252, 274, 280], "match": [1, 12, 16, 20, 70, 95, 100, 102, 110, 112, 115, 118, 119, 154, 158, 161, 167, 169, 176, 179, 191, 193, 211, 212, 213, 222, 225, 229, 239, 256, 272, 274, 280], "exactli": [1, 11, 12, 14, 20, 32, 44, 53, 54, 95, 106, 109, 110, 112, 118, 153, 158, 168, 193, 194, 280], "current": [1, 3, 6, 8, 11, 12, 13, 14, 16, 17, 33, 38, 41, 51, 54, 64, 77, 84, 93, 102, 110, 118, 125, 136, 137, 139, 141, 142, 143, 144, 152, 153, 156, 160, 161, 169, 170, 172, 174, 176, 177, 178, 179, 180, 181, 182, 186, 193, 194, 197, 205, 211, 228, 238, 247, 250, 262, 271, 273, 274, 276], "configur": [1, 4, 6, 8, 16, 22, 25, 51, 52, 84, 93, 101, 129, 137, 140, 148, 150, 158, 167, 176, 179, 186, 189, 194, 198, 211, 212, 213, 238, 243, 248, 250, 253, 256, 258, 264, 266, 275], "pessimist": [1, 176], "bound": [1, 51, 119, 138, 142, 158, 176, 177, 186, 193, 194, 196, 197, 222, 223, 228, 238, 256, 264], "pai": [1, 12, 46, 51, 139, 238, 251], "attent": [1, 12, 46, 51, 97, 130, 132, 135, 139, 140, 143, 144, 165, 183, 184, 250, 259, 260, 264, 276, 284], "create_target_param": 1, "keyword": [1, 174, 176, 189, 227, 235], "argument": [1, 2, 3, 4, 6, 8, 11, 16, 18, 32, 38, 41, 44, 45, 50, 53, 57, 71, 84, 92, 93, 97, 99, 100, 102, 104, 107, 109, 111, 117, 118, 119, 136, 137, 144, 149, 150, 152, 153, 154, 158, 159, 169, 170, 172, 173, 174, 176, 178, 179, 180, 181, 186, 189, 191, 193, 194, 198, 206, 210, 222, 223, 227, 228, 235, 236, 238, 239, 250, 256, 260, 262, 273, 275, 283], "below": [1, 2, 3, 6, 12, 13, 14, 16, 19, 22, 25, 34, 39, 41, 44, 46, 50, 53, 54, 55, 56, 57, 58, 59, 84, 87, 92, 93, 95, 97, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 114, 115, 122, 128, 138, 139, 140, 142, 145, 146, 148, 149, 150, 152, 153, 156, 158, 161, 167, 173, 176, 177, 178, 179, 180, 181, 186, 187, 189, 191, 193, 194, 196, 198, 203, 204, 205, 206, 210, 211, 213, 219, 222, 223, 227, 228, 243, 246, 247, 250, 251, 252, 253, 256, 257, 262, 264, 265, 266, 272, 273, 274, 275, 276, 278, 279], "tell": [1, 7, 18, 22, 71, 90, 92, 95, 97, 101, 109, 110, 118, 128, 142, 143, 153, 154, 156, 167, 177, 178, 180, 182, 193, 223, 228], "creat": [1, 2, 6, 7, 8, 12, 14, 16, 18, 19, 21, 22, 25, 32, 33, 36, 39, 41, 42, 44, 45, 48, 50, 52, 53, 54, 64, 65, 67, 69, 70, 71, 74, 75, 77, 84, 87, 92, 93, 95, 97, 99, 101, 102, 103, 105, 107, 109, 111, 112, 115, 118, 119, 122, 128, 134, 135, 137, 138, 139, 140, 145, 147, 150, 152, 153, 156, 160, 161, 165, 168, 169, 170, 172, 173, 175, 176, 177, 179, 180, 182, 186, 187, 189, 190, 191, 193, 194, 196, 197, 198, 202, 203, 204, 205, 207, 210, 211, 219, 222, 223, 225, 228, 229, 235, 236, 239, 240, 241, 242, 243, 250, 252, 253, 257, 258, 259, 260, 263, 264, 266, 271, 274, 276, 278], "If": [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 18, 19, 20, 22, 25, 32, 33, 36, 38, 41, 44, 45, 46, 48, 50, 51, 52, 54, 55, 57, 62, 64, 77, 84, 90, 92, 95, 97, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 118, 119, 122, 125, 128, 136, 137, 138, 139, 140, 141, 144, 146, 150, 152, 153, 154, 156, 158, 159, 161, 167, 168, 169, 170, 173, 175, 176, 177, 178, 179, 180, 181, 182, 186, 189, 191, 193, 194, 196, 197, 198, 200, 204, 205, 212, 219, 221, 222, 224, 227, 228, 235, 236, 237, 238, 239, 241, 242, 243, 250, 251, 256, 262, 263, 264, 265, 271, 272, 274, 275, 276, 279, 280, 283], "fals": [1, 2, 3, 4, 6, 7, 12, 13, 16, 25, 39, 44, 57, 64, 65, 84, 85, 92, 95, 106, 118, 119, 125, 128, 136, 137, 138, 140, 146, 156, 158, 161, 167, 168, 170, 175, 178, 179, 187, 189, 191, 193, 202, 210, 211, 212, 213, 222, 235, 238, 239, 242, 246, 253, 256, 257, 262, 265, 272, 273, 275, 278, 279, 280], "see": [1, 2, 3, 4, 6, 9, 11, 12, 13, 16, 18, 20, 22, 25, 33, 37, 38, 41, 45, 46, 48, 50, 51, 52, 53, 54, 57, 62, 77, 84, 85, 87, 90, 92, 93, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 117, 119, 128, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 150, 152, 153, 154, 156, 157, 158, 160, 161, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 186, 187, 189, 190, 191, 193, 194, 196, 197, 198, 200, 203, 205, 206, 207, 210, 211, 214, 219, 221, 222, 223, 228, 235, 236, 237, 238, 239, 240, 241, 242, 247, 248, 249, 251, 252, 254, 256, 260, 262, 264, 271, 273, 274, 275, 278, 279, 280, 283, 284], "target_actor_network_param": 1, "attribut": [1, 6, 8, 13, 16, 32, 44, 48, 55, 84, 87, 97, 109, 110, 115, 128, 141, 153, 156, 161, 168, 172, 174, 193, 200, 222, 241, 253, 258, 276], "still": [1, 6, 11, 12, 13, 14, 16, 17, 20, 22, 48, 54, 77, 90, 92, 100, 102, 106, 110, 117, 119, 137, 143, 144, 145, 150, 152, 153, 156, 157, 161, 167, 170, 180, 191, 193, 194, 204, 205, 207, 211, 237, 238, 251, 257, 260, 264, 265, 271, 273, 275, 280], "access": [1, 6, 12, 16, 20, 33, 34, 52, 70, 77, 90, 92, 95, 97, 100, 101, 102, 107, 110, 118, 119, 128, 137, 141, 148, 152, 168, 170, 175, 177, 179, 189, 190, 193, 198, 204, 207, 219, 237, 241, 247, 263, 271, 272, 274, 275, 278, 280], "just": [1, 2, 3, 6, 8, 11, 12, 16, 18, 19, 20, 32, 45, 46, 48, 51, 52, 53, 54, 55, 58, 69, 74, 75, 87, 90, 92, 93, 95, 97, 100, 102, 103, 104, 106, 107, 109, 110, 118, 119, 125, 128, 136, 137, 140, 142, 143, 144, 150, 153, 158, 159, 164, 167, 168, 170, 173, 174, 175, 176, 177, 178, 179, 180, 187, 189, 190, 191, 193, 194, 196, 199, 205, 207, 212, 223, 224, 225, 237, 238, 241, 242, 243, 256, 264, 265, 273, 280], "detach": [1, 2, 6, 13, 32, 92, 100, 106, 139, 164, 169, 260], "version": [1, 3, 6, 8, 11, 12, 14, 16, 93, 95, 97, 100, 101, 110, 111, 112, 114, 115, 136, 137, 141, 152, 153, 154, 156, 159, 161, 168, 170, 172, 173, 174, 175, 176, 184, 186, 187, 189, 194, 196, 197, 198, 210, 211, 212, 213, 222, 223, 227, 237, 243, 248, 252, 262, 263, 264, 266, 271, 279], "q": [1, 44, 51, 132, 135, 140, 160, 181, 189, 213, 280], "base": [1, 6, 12, 13, 16, 19, 20, 22, 25, 34, 45, 51, 59, 77, 87, 90, 92, 93, 97, 101, 102, 104, 112, 117, 119, 131, 132, 135, 136, 137, 138, 139, 142, 143, 145, 153, 160, 170, 172, 173, 174, 177, 179, 182, 186, 187, 189, 190, 193, 194, 196, 211, 222, 235, 237, 238, 248, 252, 253, 260, 265, 273, 275, 278, 279, 280, 284], "empir": [1, 164, 176], "bootstrap": [1, 153], "td": 1, "0": [1, 2, 3, 4, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 49, 50, 51, 53, 54, 57, 65, 66, 70, 72, 74, 75, 76, 77, 84, 87, 88, 90, 92, 93, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 125, 128, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 189, 190, 191, 194, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 219, 223, 224, 225, 227, 228, 229, 234, 235, 236, 237, 238, 242, 243, 245, 246, 249, 250, 251, 252, 253, 254, 256, 257, 259, 260, 262, 263, 264, 265, 271, 272, 274, 275, 276, 279, 280, 281, 283], "low": [1, 3, 6, 16, 18, 25, 51, 54, 70, 84, 97, 104, 118, 130, 135, 143, 186, 193, 197, 212, 213, 237, 278], "varianc": [1, 6, 99, 176], "bia": [1, 2, 6, 44, 48, 70, 95, 104, 110, 118, 119, 136, 145, 146, 153, 159, 168, 174, 176, 180, 181, 197, 235, 275, 276, 280], "mean": [1, 2, 3, 6, 12, 14, 16, 37, 48, 51, 53, 54, 70, 77, 84, 87, 92, 95, 97, 100, 102, 103, 104, 106, 109, 117, 118, 119, 128, 137, 140, 142, 143, 146, 150, 152, 161, 168, 170, 175, 176, 177, 179, 180, 182, 186, 187, 189, 193, 194, 198, 200, 202, 205, 210, 223, 227, 228, 237, 238, 243, 253, 256, 263, 271, 273, 276, 279, 283], "obtain": [1, 25, 32, 37, 51, 70, 90, 110, 118, 142, 143, 146, 152, 159, 169, 176, 177, 179, 186, 189, 196, 228, 242, 252, 263], "reward": [1, 16, 153, 160, 176, 177, 178, 180], "noth": [1, 77, 95, 110, 147, 170, 180, 186], "els": [1, 4, 7, 11, 13, 22, 48, 51, 90, 92, 109, 111, 128, 137, 138, 152, 172, 173, 178, 179, 180, 187, 189, 191, 193, 207, 210, 222, 253, 257, 260, 265, 275, 280], "mont": 1, "carlo": 1, "1": [1, 2, 3, 4, 6, 7, 8, 11, 13, 14, 16, 17, 18, 19, 20, 22, 25, 32, 33, 36, 42, 44, 51, 54, 55, 57, 65, 70, 77, 88, 90, 92, 93, 95, 97, 100, 102, 103, 104, 106, 107, 109, 110, 111, 114, 115, 117, 118, 119, 122, 125, 128, 136, 137, 138, 140, 143, 144, 145, 146, 147, 148, 149, 150, 152, 154, 156, 157, 158, 159, 160, 161, 165, 167, 168, 169, 174, 175, 176, 177, 178, 179, 180, 181, 189, 191, 194, 197, 200, 204, 205, 206, 207, 210, 211, 212, 213, 219, 222, 227, 229, 236, 238, 246, 247, 252, 253, 256, 257, 260, 262, 264, 265, 266, 271, 272, 273, 274, 275, 276, 279, 280], "case": [1, 2, 3, 6, 7, 8, 11, 12, 13, 15, 16, 19, 20, 32, 39, 44, 51, 53, 62, 70, 77, 84, 87, 92, 93, 99, 100, 102, 103, 104, 106, 107, 109, 110, 115, 118, 119, 131, 136, 137, 138, 140, 141, 142, 145, 146, 147, 152, 153, 154, 156, 158, 159, 161, 164, 167, 168, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 189, 191, 193, 194, 196, 197, 205, 221, 222, 223, 228, 229, 235, 237, 241, 242, 243, 248, 250, 251, 253, 256, 260, 264, 271, 273, 274, 275, 276, 278, 279, 280, 283], "whole": [1, 45, 48, 97, 110, 119, 135, 139, 152, 174, 176, 182, 194, 243, 272, 283], "sequenc": [1, 6, 14, 41, 50, 51, 69, 70, 97, 103, 105, 108, 109, 118, 119, 135, 143, 144, 153, 165, 168, 176, 181, 183, 190, 197, 202, 203, 207, 210, 222, 228, 238, 259, 260, 264, 276, 283, 284], "upcom": 1, "intermedi": [1, 78, 92, 97, 100, 128, 131, 148, 156, 158, 159, 160, 165, 167, 170, 183, 192, 197, 198, 223, 229, 280], "lambda": [1, 8, 110, 145, 175, 178, 193, 210, 222, 223, 280], "also": [1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 25, 32, 38, 41, 44, 48, 50, 51, 53, 54, 55, 56, 62, 69, 70, 77, 84, 87, 90, 92, 93, 95, 97, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 117, 118, 119, 128, 136, 137, 139, 140, 141, 142, 143, 144, 146, 147, 150, 152, 153, 156, 158, 159, 167, 168, 169, 170, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 186, 189, 191, 193, 194, 196, 197, 198, 200, 203, 204, 205, 206, 207, 210, 211, 212, 213, 219, 222, 223, 224, 227, 228, 235, 236, 237, 238, 240, 241, 242, 243, 247, 248, 249, 251, 252, 254, 256, 257, 260, 262, 266, 271, 272, 273, 274, 279, 280, 283], "compromis": 1, "easi": [1, 2, 6, 25, 34, 45, 46, 53, 70, 92, 93, 100, 102, 104, 137, 138, 140, 142, 152, 159, 164, 168, 172, 176, 186, 190, 193, 194, 212, 223, 237, 253, 265, 280, 283], "valueestim": 1, "enum": 1, "pointer": [1, 6, 8, 9, 179], "defin": [1, 2, 7, 14, 16, 17, 18, 19, 20, 22, 32, 37, 38, 39, 42, 44, 46, 54, 63, 66, 67, 69, 70, 71, 77, 87, 90, 92, 97, 99, 101, 103, 104, 109, 110, 112, 115, 119, 129, 136, 137, 141, 143, 145, 148, 152, 153, 154, 157, 160, 164, 167, 169, 170, 177, 178, 179, 181, 184, 186, 187, 190, 191, 193, 197, 198, 202, 204, 205, 210, 211, 212, 226, 227, 228, 234, 235, 243, 245, 249, 251, 252, 253, 257, 258, 259, 262, 271, 278, 279, 280], "default": [1, 3, 4, 6, 11, 12, 13, 17, 20, 25, 32, 37, 41, 44, 46, 51, 53, 54, 57, 64, 65, 84, 95, 97, 99, 100, 104, 106, 111, 115, 118, 125, 128, 135, 136, 137, 138, 139, 140, 143, 152, 153, 154, 156, 158, 161, 167, 170, 173, 175, 178, 179, 180, 186, 187, 189, 191, 193, 194, 197, 200, 204, 205, 211, 212, 219, 223, 226, 227, 228, 234, 236, 238, 241, 243, 246, 247, 248, 251, 253, 256, 257, 259, 260, 262, 265, 274, 275, 278, 279], "here": [1, 2, 3, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 25, 34, 37, 38, 41, 42, 45, 48, 50, 52, 53, 54, 55, 57, 71, 77, 83, 84, 87, 90, 92, 93, 95, 97, 100, 101, 102, 104, 106, 107, 109, 110, 117, 118, 119, 122, 125, 128, 136, 137, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 164, 167, 168, 169, 170, 174, 176, 177, 179, 180, 181, 182, 186, 187, 190, 191, 193, 194, 196, 197, 203, 205, 206, 211, 212, 222, 223, 224, 227, 228, 238, 242, 243, 248, 250, 253, 256, 266, 271, 273, 274, 275, 276, 278, 280], "take": [1, 2, 3, 6, 7, 11, 13, 14, 16, 17, 18, 19, 20, 33, 34, 41, 44, 45, 48, 50, 51, 52, 53, 54, 70, 77, 84, 87, 92, 93, 95, 97, 99, 100, 101, 102, 104, 106, 107, 109, 110, 115, 118, 119, 125, 139, 140, 141, 142, 143, 144, 145, 147, 150, 152, 157, 159, 160, 167, 168, 170, 175, 176, 177, 178, 179, 180, 182, 186, 187, 189, 191, 193, 194, 196, 197, 204, 205, 211, 212, 213, 223, 224, 225, 228, 235, 237, 238, 239, 240, 241, 242, 243, 248, 253, 256, 260, 264, 266, 271, 274, 276, 278, 280, 283], "simplest": [1, 6, 32, 48, 92, 100, 104, 153, 176, 182, 238], "show": [1, 12, 13, 18, 20, 22, 25, 45, 53, 54, 62, 77, 84, 85, 87, 90, 92, 93, 95, 97, 100, 101, 110, 115, 117, 136, 139, 142, 143, 144, 146, 147, 150, 153, 154, 158, 161, 170, 173, 175, 177, 178, 180, 186, 187, 189, 191, 193, 194, 198, 203, 204, 205, 207, 212, 213, 219, 222, 223, 228, 236, 237, 238, 242, 243, 252, 253, 256, 257, 271, 280], "chang": [1, 2, 6, 7, 8, 12, 13, 14, 16, 25, 32, 41, 44, 50, 52, 53, 54, 55, 57, 84, 85, 87, 90, 92, 93, 95, 96, 101, 102, 103, 105, 106, 107, 112, 119, 128, 129, 135, 136, 139, 140, 142, 143, 145, 148, 149, 152, 153, 156, 158, 159, 160, 167, 168, 170, 173, 174, 178, 186, 189, 191, 193, 194, 197, 198, 200, 203, 204, 205, 210, 212, 222, 223, 226, 234, 235, 236, 238, 239, 242, 246, 251, 252, 253, 254, 256, 259, 264, 265, 273, 275, 276, 278, 279], "instruct": [1, 6, 25, 36, 93, 96, 99, 101, 143, 144, 153, 156, 172, 174, 176, 178, 180, 182, 200, 211, 212, 219, 221, 238, 256, 258], "queri": [1, 8, 16, 51, 95, 100, 119, 139, 179, 181, 196, 197, 260, 276], "correspond": [1, 2, 3, 6, 11, 12, 14, 16, 17, 33, 34, 38, 44, 51, 57, 84, 92, 93, 97, 99, 104, 107, 117, 119, 136, 141, 142, 145, 158, 167, 172, 174, 176, 179, 182, 184, 186, 187, 189, 191, 193, 194, 196, 197, 205, 221, 227, 228, 238, 256, 258, 263, 274, 279], "make_value_estim": 1, "central": [1, 11, 77, 92, 100, 101, 107, 109, 148, 241], "quit": [1, 6, 20, 51, 77, 141, 152, 167, 176, 180, 193, 194, 204, 207, 210, 223, 237, 271, 280], "weight": [1, 2, 6, 14, 15, 16, 20, 25, 32, 33, 44, 45, 51, 64, 65, 68, 69, 70, 71, 72, 74, 75, 77, 92, 95, 97, 100, 101, 102, 104, 105, 107, 110, 119, 125, 136, 143, 145, 146, 148, 153, 154, 158, 159, 161, 167, 168, 169, 174, 176, 177, 180, 182, 186, 189, 190, 194, 197, 204, 211, 225, 235, 240, 241, 246, 253, 259, 264, 275, 278, 280], "when": [1, 3, 6, 8, 11, 12, 13, 14, 16, 17, 18, 20, 22, 32, 34, 37, 39, 41, 44, 45, 46, 48, 50, 51, 52, 54, 55, 57, 62, 77, 84, 87, 90, 92, 93, 95, 97, 99, 100, 101, 102, 103, 106, 109, 110, 111, 114, 115, 117, 118, 119, 128, 134, 135, 136, 137, 138, 139, 141, 142, 144, 145, 146, 149, 150, 152, 153, 156, 157, 158, 160, 161, 164, 167, 168, 170, 173, 174, 176, 177, 178, 180, 181, 182, 186, 189, 191, 193, 194, 196, 197, 198, 200, 203, 205, 206, 207, 211, 213, 219, 222, 223, 225, 227, 228, 229, 235, 237, 238, 239, 241, 242, 247, 248, 250, 251, 253, 256, 257, 258, 262, 264, 271, 274, 275, 276, 278, 279, 280], "must": [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 18, 33, 34, 51, 54, 69, 77, 87, 92, 93, 100, 103, 109, 114, 115, 118, 119, 137, 150, 152, 153, 154, 156, 170, 176, 179, 186, 189, 191, 193, 194, 206, 227, 229, 235, 238, 250, 262, 263, 271, 272, 274, 276, 283], "sure": [1, 6, 8, 11, 12, 13, 16, 39, 53, 59, 90, 95, 99, 102, 103, 109, 115, 119, 128, 136, 140, 145, 150, 152, 153, 157, 170, 176, 178, 189, 194, 198, 212, 221, 222, 227, 236, 238, 247, 248, 250, 272, 274, 283], "out": [1, 2, 3, 6, 7, 8, 11, 12, 13, 16, 17, 18, 20, 25, 32, 36, 37, 41, 42, 44, 45, 46, 50, 51, 53, 54, 60, 61, 62, 77, 79, 80, 81, 82, 83, 85, 87, 90, 92, 93, 95, 97, 100, 102, 103, 105, 107, 110, 114, 117, 128, 134, 135, 136, 138, 139, 140, 141, 142, 143, 147, 148, 150, 152, 153, 154, 157, 158, 159, 167, 168, 170, 173, 174, 175, 176, 178, 179, 180, 182, 186, 187, 189, 193, 194, 197, 198, 199, 200, 201, 207, 213, 215, 216, 217, 218, 220, 221, 226, 228, 234, 235, 238, 242, 248, 251, 252, 253, 256, 258, 259, 260, 262, 268, 269, 271, 272, 273, 274, 276, 277, 278, 280, 283, 284], "graph": [1, 12, 16, 18, 48, 51, 64, 67, 70, 74, 75, 84, 87, 89, 92, 103, 105, 111, 114, 115, 118, 128, 129, 135, 141, 143, 147, 157, 158, 159, 161, 179, 180, 186, 187, 189, 190, 197, 198, 200, 210, 212, 213, 225, 236, 242, 243, 247, 248, 252, 254, 265, 266], "otherwis": [1, 3, 11, 12, 33, 38, 51, 57, 64, 77, 84, 87, 100, 110, 118, 119, 125, 128, 136, 141, 147, 150, 153, 158, 159, 161, 167, 176, 177, 179, 191, 194, 198, 237, 251, 256, 280, 283], "mix": [1, 11, 17, 62, 117, 161, 212, 226, 234, 258, 259, 278], "For": [1, 2, 3, 4, 6, 7, 8, 9, 12, 13, 14, 16, 17, 18, 19, 20, 22, 32, 37, 38, 41, 42, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 57, 64, 65, 70, 77, 84, 85, 90, 93, 97, 99, 100, 101, 102, 103, 104, 105, 107, 109, 110, 112, 118, 119, 122, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 152, 153, 154, 157, 158, 160, 161, 168, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 189, 190, 191, 193, 194, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 219, 221, 222, 223, 225, 227, 229, 235, 236, 237, 238, 239, 240, 241, 243, 249, 250, 251, 254, 256, 257, 260, 262, 263, 264, 265, 271, 272, 273, 274, 276, 278, 279, 280], "hold_out_param": 1, "now": [1, 2, 6, 7, 8, 11, 12, 13, 14, 17, 18, 19, 20, 22, 25, 37, 38, 44, 45, 46, 48, 51, 52, 53, 54, 57, 77, 87, 90, 91, 92, 93, 99, 100, 102, 104, 106, 109, 110, 112, 115, 118, 125, 128, 135, 137, 140, 141, 142, 143, 145, 146, 147, 150, 152, 153, 157, 158, 159, 160, 164, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 184, 186, 187, 189, 190, 191, 193, 194, 196, 197, 198, 203, 204, 205, 224, 225, 235, 236, 237, 240, 242, 248, 260, 264, 266, 271, 272, 276, 278, 279, 280, 283], "reli": [1, 3, 6, 11, 16, 39, 51, 92, 109, 112, 141, 160, 167, 170, 174, 176, 193, 200, 238, 266, 273, 275], "miss": [1, 53, 119, 145, 150, 153, 186, 191, 222, 237, 239, 256, 260, 272], "glue": [1, 180], "cost": [1, 16, 51, 102, 104, 117, 136, 137, 140, 141, 145, 164, 186, 193, 204, 224, 238, 251, 252], "deliv": [1, 200, 212, 250], "most": [1, 2, 8, 13, 16, 20, 32, 36, 44, 51, 53, 54, 77, 90, 92, 93, 95, 97, 100, 104, 106, 107, 110, 117, 118, 119, 125, 131, 136, 140, 141, 142, 144, 146, 147, 152, 157, 158, 160, 161, 167, 170, 175, 176, 178, 179, 180, 181, 182, 186, 189, 191, 193, 194, 197, 204, 212, 213, 221, 228, 235, 237, 238, 243, 247, 251, 253, 256, 273, 274, 275, 280], "first": [1, 2, 3, 4, 6, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 25, 36, 39, 42, 45, 46, 51, 52, 53, 54, 55, 57, 62, 70, 71, 77, 84, 85, 87, 90, 92, 95, 97, 100, 102, 104, 106, 107, 109, 110, 115, 117, 118, 119, 128, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 153, 154, 156, 157, 158, 159, 164, 167, 169, 170, 172, 173, 174, 176, 177, 178, 179, 180, 182, 186, 189, 190, 191, 193, 194, 196, 197, 198, 204, 205, 207, 211, 213, 222, 223, 225, 227, 228, 235, 238, 242, 243, 248, 250, 251, 252, 253, 256, 260, 262, 264, 266, 271, 273, 274, 276, 280, 283], "taken": [1, 6, 8, 11, 16, 84, 85, 97, 153, 167, 176, 189, 193, 229, 252, 264, 278], "care": [1, 3, 16, 77, 90, 92, 102, 147, 152, 170, 176, 180, 197, 204, 223, 224, 237, 271], "condit": [1, 16, 51, 57, 100, 107, 111, 136, 152, 168, 170, 191, 193, 279], "remaind": [1, 95, 156], "cheetah": 1, "goal": [1, 6, 16, 17, 45, 51, 54, 62, 77, 87, 102, 141, 142, 152, 153, 157, 176, 178, 180, 262, 271], "half": [1, 11, 20, 125, 172, 222, 257, 280], "fast": [1, 6, 20, 22, 51, 92, 110, 136, 140, 150, 164, 170, 176, 181, 189, 194, 197, 237, 262, 264, 280, 284], "dm_control": 1, "gym": [1, 16, 132, 135, 153, 160, 176, 177, 178, 180, 197], "env": [1, 22, 139, 149, 152, 153, 176, 177, 178, 180, 223, 237, 253, 260, 262], "gymenv": [1, 176], "halfcheetah": 1, "v4": 1, "dmcontrolenv": 1, "By": [1, 11, 20, 32, 41, 44, 64, 65, 84, 90, 92, 100, 106, 109, 110, 111, 118, 128, 137, 140, 142, 152, 154, 156, 157, 158, 167, 174, 177, 186, 190, 193, 198, 204, 205, 210, 219, 225, 228, 238, 243, 247, 248, 250, 253, 256, 262, 265, 272, 274, 276, 280], "disabl": [1, 7, 13, 17, 128, 136, 137, 145, 160, 164, 175, 179, 181, 186, 191, 205, 222, 247, 256, 264, 271, 272, 273, 274, 279], "render": [1, 6, 84, 93, 99, 160, 170, 176], "easier": [1, 20, 22, 25, 52, 53, 103, 110, 136, 142, 158, 167, 178, 182, 187, 205, 223, 237, 250, 264, 271, 274, 280, 283], "than": [1, 3, 6, 11, 12, 13, 14, 15, 16, 20, 45, 50, 51, 52, 54, 55, 62, 69, 71, 77, 84, 87, 92, 95, 97, 100, 102, 103, 104, 106, 109, 110, 112, 118, 119, 125, 135, 136, 137, 139, 142, 144, 146, 149, 150, 152, 154, 158, 159, 160, 164, 167, 168, 169, 170, 175, 176, 177, 178, 186, 187, 189, 190, 191, 194, 196, 197, 200, 223, 227, 238, 239, 247, 253, 256, 258, 262, 264, 271, 276, 280], "imag": [1, 33, 34, 36, 42, 44, 48, 51, 53, 54, 59, 77, 84, 90, 93, 95, 97, 100, 101, 102, 110, 129, 130, 132, 133, 135, 140, 145, 154, 160, 161, 167, 169, 177, 184, 186, 187, 194, 196, 200, 207, 221, 225, 236, 239, 240, 258, 276, 278], "focu": [1, 3, 6, 12, 22, 93, 102, 104, 128, 137, 140, 141, 176, 178, 180, 182, 193, 213, 264, 272], "pass": [1, 2, 3, 6, 8, 9, 11, 12, 14, 15, 16, 17, 18, 19, 32, 33, 34, 37, 38, 39, 44, 45, 51, 53, 54, 55, 58, 64, 65, 67, 69, 74, 75, 84, 87, 90, 92, 93, 95, 97, 100, 101, 102, 104, 106, 107, 110, 111, 118, 119, 128, 129, 135, 136, 137, 140, 141, 142, 143, 146, 147, 148, 150, 152, 153, 154, 156, 157, 160, 161, 164, 168, 169, 172, 174, 176, 177, 178, 179, 180, 182, 183, 186, 189, 191, 193, 194, 197, 198, 203, 205, 206, 210, 211, 222, 223, 227, 228, 229, 235, 238, 241, 242, 257, 259, 260, 264, 271, 274], "pixel": [1, 33, 42, 45, 77, 97, 100, 102, 153, 161, 184, 189, 253], "from_pixel": 1, "true": [1, 2, 3, 4, 6, 7, 8, 12, 13, 14, 17, 18, 25, 32, 34, 37, 39, 42, 44, 48, 51, 53, 64, 65, 84, 90, 92, 95, 100, 106, 112, 114, 117, 118, 119, 125, 128, 136, 137, 138, 139, 142, 145, 146, 147, 150, 152, 153, 156, 158, 161, 168, 175, 178, 179, 180, 181, 186, 187, 189, 191, 193, 196, 197, 204, 205, 210, 212, 213, 228, 235, 241, 243, 246, 250, 256, 257, 260, 262, 265, 272, 273, 274, 275, 278, 279, 280], "pixels_onli": 1, "make_env": 1, "helper": [1, 11, 19, 20, 48, 53, 57, 93, 99, 101, 102, 103, 111, 136, 137, 142, 143, 144, 152, 153, 177, 178, 179, 180, 182, 184, 187, 189, 196, 202, 203, 228, 253, 280], "either": [1, 2, 3, 6, 11, 18, 45, 51, 75, 90, 101, 102, 110, 112, 119, 125, 137, 140, 150, 153, 161, 174, 177, 178, 179, 186, 191, 193, 197, 212, 219, 222, 228, 235, 238, 250, 274, 276, 279, 280], "backend": [1, 6, 7, 9, 13, 16, 22, 25, 55, 57, 129, 130, 131, 134, 135, 142, 145, 149, 150, 153, 161, 175, 176, 183, 186, 191, 193, 194, 200, 211, 219, 222, 249, 253, 258, 259, 260, 266, 275, 279], "consid": [1, 3, 6, 12, 13, 16, 32, 39, 51, 70, 77, 84, 118, 128, 136, 138, 147, 150, 152, 161, 164, 167, 168, 170, 173, 178, 182, 186, 191, 193, 194, 196, 204, 227, 228, 229, 248, 262, 271, 272, 273, 275, 283], "abov": [1, 3, 6, 8, 9, 11, 12, 13, 16, 17, 19, 44, 45, 51, 53, 54, 67, 69, 70, 77, 84, 92, 93, 95, 97, 99, 100, 102, 103, 104, 106, 107, 109, 110, 118, 128, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 156, 158, 159, 160, 161, 164, 167, 168, 169, 170, 172, 174, 176, 178, 179, 180, 181, 186, 189, 191, 193, 194, 196, 204, 205, 206, 207, 211, 212, 219, 221, 223, 227, 228, 235, 236, 242, 247, 253, 256, 260, 262, 264, 266, 271, 272, 273, 274, 275, 279], "dm": 1, "want": [1, 2, 3, 6, 7, 8, 9, 11, 12, 14, 16, 17, 19, 25, 32, 33, 34, 37, 39, 44, 45, 48, 51, 53, 54, 62, 64, 65, 69, 77, 87, 90, 92, 93, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 118, 119, 125, 139, 140, 141, 142, 150, 152, 153, 154, 156, 157, 159, 161, 164, 168, 170, 172, 174, 175, 176, 179, 181, 182, 184, 189, 190, 191, 193, 194, 196, 197, 198, 205, 206, 219, 222, 223, 227, 235, 237, 239, 250, 252, 271, 273, 278, 283, 284], "modifi": [1, 6, 12, 13, 16, 38, 42, 44, 45, 54, 77, 102, 103, 140, 143, 152, 157, 158, 173, 176, 178, 182, 193, 197, 198, 235, 251, 253, 260], "represent": [1, 12, 16, 44, 54, 87, 93, 97, 99, 102, 104, 107, 109, 111, 112, 114, 129, 142, 157, 160, 182, 186, 187, 190, 193, 194, 197, 223, 235, 237, 252, 276], "more": [1, 2, 3, 6, 8, 9, 11, 12, 13, 16, 17, 18, 20, 34, 36, 37, 38, 41, 44, 45, 46, 50, 51, 52, 53, 54, 55, 57, 58, 62, 69, 77, 87, 93, 95, 97, 99, 101, 102, 103, 104, 106, 107, 109, 110, 112, 114, 117, 118, 119, 125, 128, 130, 131, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 156, 157, 160, 164, 167, 168, 170, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 187, 189, 190, 191, 193, 194, 196, 197, 198, 200, 205, 206, 207, 211, 212, 213, 219, 221, 227, 235, 237, 238, 242, 243, 248, 250, 251, 252, 253, 254, 256, 257, 259, 262, 264, 271, 272, 273, 274, 276, 278, 280, 283, 284], "friendli": [1, 17, 199, 222], "append": [1, 7, 11, 16, 19, 22, 51, 100, 117, 119, 137, 152, 174, 176, 178, 179, 180, 182, 187, 210, 256, 280], "special": [1, 8, 12, 22, 41, 50, 95, 97, 104, 106, 109, 110, 115, 132, 141, 153, 161, 173, 174, 186, 189, 205, 235, 238, 253, 276, 278], "torchr": 1, "transformedenv": [1, 16, 176], "common": [1, 6, 11, 12, 16, 18, 20, 37, 38, 45, 51, 53, 62, 84, 95, 100, 102, 104, 106, 109, 111, 119, 125, 129, 135, 140, 150, 154, 157, 160, 168, 170, 174, 175, 176, 181, 189, 193, 194, 196, 223, 224, 237, 238, 239, 243, 249, 258, 273, 276, 280], "rescal": [1, 53, 196, 264], "heurist": [1, 84, 211, 250, 262], "multipli": [1, 3, 14, 50, 51, 92, 93, 95, 100, 110, 182, 190, 237, 249], "5": [1, 2, 6, 13, 20, 25, 36, 42, 46, 49, 51, 54, 67, 84, 87, 90, 95, 97, 99, 101, 104, 106, 107, 108, 109, 114, 117, 118, 119, 136, 137, 146, 150, 152, 154, 158, 161, 168, 175, 178, 179, 180, 189, 193, 194, 196, 197, 200, 202, 207, 210, 211, 212, 219, 236, 243, 246, 262, 263, 266, 279, 280, 283], "interfac": [1, 3, 6, 8, 16, 17, 51, 100, 110, 142, 149, 152, 176, 189, 194, 212, 219, 253, 265], "between": [1, 6, 8, 11, 13, 14, 16, 19, 20, 33, 41, 48, 50, 51, 67, 75, 77, 84, 85, 87, 90, 92, 95, 97, 100, 102, 103, 104, 107, 109, 110, 118, 128, 133, 135, 136, 138, 140, 142, 152, 153, 157, 161, 164, 170, 172, 174, 177, 179, 180, 181, 182, 187, 189, 191, 193, 194, 196, 197, 198, 204, 206, 222, 223, 224, 228, 238, 243, 253, 254, 257, 260, 262, 263, 264, 265, 271, 272, 274, 278, 280, 284], "simul": [1, 20, 22, 97, 145, 176, 207, 213, 280], "work": [1, 2, 3, 4, 6, 8, 9, 14, 16, 18, 20, 22, 36, 37, 44, 51, 52, 53, 54, 57, 58, 62, 77, 87, 90, 92, 93, 95, 97, 100, 101, 102, 103, 105, 109, 110, 111, 114, 128, 135, 141, 143, 144, 146, 147, 148, 150, 152, 153, 154, 156, 157, 159, 167, 168, 169, 170, 173, 174, 175, 176, 178, 180, 181, 182, 186, 189, 190, 193, 194, 196, 197, 198, 200, 204, 207, 211, 212, 213, 222, 223, 228, 235, 237, 238, 243, 246, 247, 250, 253, 262, 264, 271, 272, 273, 274, 280, 283], "doubl": [1, 2, 3, 4, 6, 37, 92, 99, 110, 117, 132, 134, 135, 146, 153, 160, 169, 176, 187, 211, 222], "precis": [1, 11, 12, 17, 62, 141, 146, 147, 161, 170, 176, 187, 211, 212, 213, 226, 234, 243, 258, 259, 278], "number": [1, 3, 6, 13, 14, 17, 22, 34, 37, 42, 45, 53, 54, 55, 57, 67, 84, 87, 90, 92, 95, 97, 102, 104, 106, 109, 110, 117, 118, 119, 136, 137, 139, 140, 141, 142, 143, 149, 150, 152, 153, 154, 156, 158, 159, 164, 168, 170, 172, 174, 175, 176, 177, 178, 179, 180, 186, 189, 191, 194, 196, 198, 202, 205, 211, 223, 225, 228, 237, 238, 242, 248, 254, 256, 262, 264, 274, 275, 276, 283], "presum": 1, "singl": [1, 2, 3, 6, 8, 11, 12, 13, 17, 20, 22, 38, 41, 44, 48, 53, 55, 56, 57, 58, 62, 87, 90, 92, 93, 95, 97, 99, 100, 101, 102, 104, 110, 135, 136, 137, 138, 140, 143, 145, 146, 147, 148, 149, 150, 152, 153, 159, 160, 164, 169, 170, 172, 176, 177, 178, 179, 180, 182, 186, 189, 191, 193, 194, 197, 205, 211, 223, 237, 238, 242, 253, 256, 260, 262, 264, 276, 280, 283], "ones": [1, 2, 3, 6, 7, 13, 16, 18, 95, 97, 100, 102, 128, 152, 154, 157, 168, 169, 170, 172, 173, 176, 177, 186, 193, 197, 237, 253, 272], "goe": [1, 53, 100, 103, 104, 135, 139, 147, 159, 173, 176, 179, 194], "wai": [1, 2, 3, 6, 8, 11, 12, 13, 14, 16, 32, 36, 38, 41, 44, 45, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 69, 74, 77, 84, 90, 92, 93, 95, 96, 100, 103, 104, 106, 109, 110, 112, 114, 115, 119, 128, 131, 136, 140, 141, 142, 143, 147, 149, 150, 156, 157, 158, 159, 160, 161, 164, 167, 168, 172, 174, 176, 178, 179, 181, 184, 187, 190, 193, 194, 196, 197, 205, 221, 224, 228, 229, 235, 238, 250, 260, 264, 272, 273, 274, 276, 284], "repres": [1, 3, 12, 14, 15, 22, 33, 44, 51, 53, 54, 62, 64, 77, 84, 87, 92, 93, 95, 97, 101, 102, 109, 111, 112, 114, 117, 118, 136, 137, 138, 140, 142, 143, 145, 153, 156, 157, 160, 161, 176, 177, 180, 182, 189, 193, 194, 196, 197, 223, 225, 235, 237, 242, 262, 271, 276], "doubletofloat": [1, 176], "in_kei": [1, 16, 153, 176], "list": [1, 3, 4, 6, 7, 11, 13, 14, 16, 17, 19, 25, 34, 38, 41, 45, 48, 50, 51, 52, 54, 70, 77, 90, 93, 97, 100, 106, 107, 109, 111, 112, 114, 115, 118, 141, 144, 152, 161, 168, 170, 175, 178, 179, 180, 182, 186, 187, 189, 191, 193, 194, 207, 210, 221, 223, 227, 228, 247, 253, 256, 265, 273, 276, 278, 280], "refer": [1, 3, 4, 6, 8, 9, 11, 15, 17, 20, 25, 32, 38, 62, 77, 84, 87, 92, 93, 100, 102, 104, 106, 107, 109, 111, 112, 114, 115, 117, 119, 136, 137, 138, 140, 141, 144, 145, 149, 150, 152, 158, 167, 170, 174, 176, 178, 179, 180, 186, 189, 193, 194, 196, 197, 211, 213, 221, 222, 223, 225, 227, 228, 235, 238, 248, 250, 253, 256, 262, 266, 271, 274, 278, 279, 280], "float": [1, 3, 4, 6, 11, 13, 42, 95, 100, 106, 109, 117, 136, 137, 140, 142, 152, 161, 173, 174, 178, 180, 193, 194, 196, 210, 211, 213, 222, 228, 235, 262, 264, 265, 273, 274, 275], "while": [1, 2, 6, 7, 13, 14, 15, 16, 20, 34, 37, 51, 54, 57, 84, 93, 100, 111, 112, 117, 129, 131, 135, 137, 138, 139, 141, 142, 145, 148, 150, 152, 153, 158, 159, 161, 167, 170, 174, 175, 176, 179, 180, 181, 182, 184, 191, 193, 194, 204, 213, 222, 223, 227, 228, 235, 242, 243, 247, 250, 253, 262, 264, 271, 272, 273, 274, 275, 276, 278, 280], "in_keys_inv": [1, 16], "befor": [1, 3, 6, 11, 12, 13, 14, 16, 19, 32, 37, 39, 44, 45, 46, 48, 51, 53, 54, 57, 62, 77, 87, 92, 93, 97, 102, 103, 104, 106, 107, 109, 110, 112, 114, 115, 117, 118, 119, 125, 128, 129, 135, 137, 138, 140, 142, 143, 145, 150, 152, 153, 156, 158, 160, 165, 167, 168, 170, 172, 174, 175, 176, 178, 179, 180, 182, 186, 187, 190, 191, 193, 194, 196, 198, 204, 207, 222, 223, 225, 227, 236, 238, 239, 240, 241, 242, 243, 247, 248, 250, 251, 256, 257, 262, 271, 272, 274, 279], "concaten": [1, 16, 41, 50, 51, 106, 107, 140, 144, 177], "cattensor": 1, "leav": [1, 11, 18, 20, 32, 44, 51, 53, 55, 87, 92, 128, 142, 167, 168, 175, 211, 235, 280], "constant": [1, 2, 6, 41, 50, 84, 90, 92, 100, 104, 139, 153, 168, 177, 187, 191, 193, 210, 238, 275, 280], "significantli": [1, 107, 131, 140, 146, 170, 191, 229, 242, 248, 256, 264, 278], "speed": [1, 6, 12, 16, 32, 34, 37, 50, 51, 87, 92, 95, 96, 102, 110, 129, 130, 131, 135, 137, 138, 140, 143, 148, 153, 154, 158, 161, 170, 175, 176, 178, 181, 191, 200, 204, 223, 236, 238, 242, 252, 253, 256, 258, 264, 265, 278, 284], "throughput": [1, 137, 170, 238, 256], "choos": [1, 11, 12, 14, 17, 51, 54, 57, 62, 67, 90, 93, 104, 118, 119, 139, 140, 144, 150, 152, 160, 168, 175, 176, 177, 182, 186, 189, 194, 196, 219, 222, 228, 243, 260, 264, 266], "whether": [1, 6, 11, 12, 13, 16, 51, 54, 92, 93, 95, 99, 100, 102, 110, 112, 119, 128, 147, 152, 157, 160, 167, 170, 176, 178, 186, 187, 189, 193, 223, 228, 238, 239, 274], "individu": [1, 6, 14, 33, 51, 87, 92, 93, 97, 118, 138, 140, 142, 146, 169, 170, 174, 179, 182, 187, 191, 193, 194, 197, 219, 222, 223, 238, 248], "approach": [1, 3, 6, 8, 9, 39, 58, 93, 110, 112, 114, 119, 139, 143, 148, 168, 169, 170, 176, 177, 179, 182, 191, 193, 196, 223, 235, 243, 262, 271, 274, 275, 278, 283], "parallelenv": [1, 176], "num_work": [1, 25, 45, 53, 90, 95, 136, 137, 186, 238], "4": [1, 2, 3, 6, 11, 14, 18, 19, 21, 25, 36, 42, 46, 53, 55, 56, 57, 64, 65, 67, 72, 77, 90, 93, 95, 97, 99, 100, 101, 103, 104, 106, 109, 110, 116, 118, 133, 135, 136, 137, 139, 145, 146, 148, 149, 152, 153, 158, 160, 161, 167, 168, 172, 174, 177, 178, 179, 180, 189, 191, 193, 196, 197, 200, 204, 207, 211, 236, 243, 247, 248, 253, 256, 259, 260, 262, 264, 266, 274, 284], "leverag": [1, 6, 51, 77, 102, 112, 115, 119, 133, 135, 137, 140, 150, 152, 159, 196, 206, 207, 210, 213, 238, 239, 252, 256, 258, 265, 275, 279, 284], "vector": [1, 2, 6, 7, 8, 14, 16, 32, 51, 54, 84, 92, 93, 97, 99, 100, 102, 104, 106, 107, 109, 110, 143, 144, 145, 153, 156, 169, 173, 182, 194, 200, 211, 212, 238, 250, 265, 275, 283], "capabl": [1, 13, 17, 20, 51, 77, 134, 140, 161, 170, 181, 186, 190, 200, 202, 203, 210, 222, 238, 280], "pytorch": [1, 2, 3, 4, 7, 11, 13, 16, 18, 20, 21, 22, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 45, 46, 50, 51, 53, 54, 55, 57, 58, 60, 61, 63, 66, 68, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 90, 92, 93, 102, 103, 108, 110, 111, 113, 114, 119, 120, 122, 125, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 164, 165, 167, 169, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 190, 191, 192, 193, 198, 199, 202, 203, 204, 205, 206, 207, 210, 215, 217, 218, 221, 222, 223, 224, 227, 230, 231, 232, 233, 234, 235, 237, 242, 243, 247, 248, 249, 250, 252, 253, 254, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 282, 283, 284], "adopt": [1, 25, 62, 167, 173, 179, 213, 279], "frame_skip": [1, 176], "frame": [1, 6, 153, 160, 175, 176, 186, 253, 262], "count": [1, 6, 8, 13, 37, 45, 51, 84, 104, 152, 153, 176, 180, 182, 186, 189, 206], "frames_per_batch": [1, 176], "total_fram": [1, 176], "adjust": [1, 4, 16, 32, 37, 38, 44, 54, 77, 92, 95, 101, 140, 142, 143, 164, 178, 238], "total": [1, 13, 14, 15, 16, 18, 19, 20, 21, 32, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 57, 66, 70, 72, 74, 75, 76, 77, 85, 87, 88, 90, 92, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 120, 122, 125, 128, 137, 139, 141, 142, 143, 144, 146, 152, 153, 154, 156, 157, 158, 159, 160, 161, 164, 167, 168, 169, 170, 174, 175, 176, 177, 179, 181, 182, 183, 184, 186, 189, 191, 193, 194, 196, 197, 198, 203, 210, 211, 223, 224, 227, 228, 229, 234, 235, 237, 242, 243, 245, 249, 250, 251, 252, 254, 256, 259, 264, 271, 272, 273, 274, 276, 281, 283], "rais": [1, 11, 13, 18, 77, 111, 139, 140, 141, 158, 161, 175, 176, 191, 193, 204, 238, 251, 253], "skip": [1, 12, 16, 20, 44, 103, 119, 147, 156, 160, 178, 180, 186, 191, 193, 197, 212, 223, 228, 241, 256, 279, 280], "unchang": [1, 11, 85, 92], "seem": [1, 45, 54, 141, 143, 153, 170, 172, 194, 223], "like": [1, 3, 6, 8, 9, 11, 12, 13, 14, 16, 18, 19, 20, 22, 33, 34, 37, 38, 41, 44, 45, 46, 48, 50, 51, 53, 54, 55, 57, 62, 69, 70, 84, 87, 90, 92, 93, 95, 97, 100, 102, 103, 104, 106, 107, 109, 110, 111, 112, 115, 117, 118, 122, 125, 128, 129, 131, 132, 134, 135, 136, 140, 141, 142, 144, 147, 149, 150, 152, 153, 154, 156, 157, 158, 159, 161, 164, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 181, 182, 186, 187, 189, 190, 193, 194, 196, 197, 198, 200, 205, 206, 207, 211, 212, 219, 221, 222, 223, 224, 225, 228, 237, 238, 242, 247, 248, 249, 250, 251, 253, 256, 265, 272, 273, 274, 278, 279, 280, 283, 284], "cheat": [1, 100, 182], "compar": [1, 4, 12, 17, 20, 37, 45, 85, 93, 100, 102, 107, 110, 115, 125, 136, 138, 139, 140, 142, 152, 157, 158, 159, 161, 164, 167, 169, 170, 174, 176, 177, 178, 180, 182, 186, 189, 191, 193, 197, 198, 200, 204, 210, 211, 212, 213, 227, 236, 237, 238, 251, 252, 256, 258, 260, 263, 264, 265, 271, 280, 284], "dataset": [1, 6, 20, 25, 32, 33, 35, 36, 37, 38, 39, 41, 42, 44, 45, 48, 51, 54, 55, 57, 59, 77, 93, 97, 102, 104, 120, 125, 135, 136, 137, 142, 143, 144, 148, 152, 154, 169, 170, 175, 179, 181, 182, 184, 186, 187, 189, 194, 198, 212, 214, 225, 238, 246, 253, 258, 259, 278, 280], "10m": 1, "element": [1, 6, 7, 14, 20, 38, 41, 50, 51, 92, 93, 95, 97, 100, 104, 106, 107, 109, 128, 141, 152, 158, 164, 168, 176, 189, 193, 196, 223, 225, 238, 272, 273, 274, 276, 280], "2": [1, 2, 3, 4, 6, 7, 11, 13, 14, 16, 17, 18, 19, 21, 22, 25, 33, 36, 42, 44, 51, 53, 54, 55, 57, 64, 65, 66, 69, 70, 71, 76, 77, 90, 92, 93, 95, 100, 102, 103, 104, 106, 109, 111, 114, 115, 118, 119, 122, 125, 128, 135, 136, 137, 138, 140, 142, 145, 146, 147, 148, 149, 150, 152, 153, 154, 158, 159, 161, 165, 167, 168, 169, 174, 175, 176, 177, 178, 179, 180, 181, 189, 191, 193, 194, 197, 200, 202, 203, 206, 207, 210, 211, 212, 213, 222, 224, 227, 235, 238, 242, 243, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 259, 260, 262, 263, 264, 265, 266, 271, 276, 279, 284], "anoth": [1, 3, 11, 13, 16, 32, 41, 44, 50, 51, 54, 64, 77, 87, 95, 97, 100, 101, 103, 107, 110, 117, 118, 119, 128, 135, 144, 145, 146, 147, 149, 152, 153, 156, 168, 170, 174, 176, 178, 179, 180, 181, 182, 190, 191, 193, 194, 196, 198, 221, 223, 228, 238, 239, 256, 264], "actual": [1, 6, 8, 11, 13, 15, 16, 17, 32, 39, 51, 53, 54, 77, 87, 95, 102, 103, 106, 109, 115, 128, 134, 135, 138, 141, 142, 143, 146, 150, 152, 157, 167, 170, 176, 182, 186, 187, 191, 193, 194, 213, 223, 242, 249, 263, 264, 271, 273, 283], "ratio": [1, 84, 102, 158, 170, 176, 186, 196], "interact": [1, 6, 16, 51, 93, 99, 100, 142, 145, 147, 160, 176, 179, 187, 191, 193, 194, 199, 206, 250], "nutshel": [1, 273], "cautiou": 1, "about": [1, 3, 6, 8, 11, 12, 16, 17, 20, 36, 37, 38, 41, 44, 51, 54, 55, 56, 57, 59, 74, 75, 77, 90, 92, 95, 97, 99, 100, 102, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 117, 118, 119, 125, 128, 129, 131, 135, 137, 139, 142, 143, 144, 147, 149, 150, 152, 154, 157, 158, 159, 167, 169, 170, 175, 176, 177, 178, 180, 181, 182, 184, 186, 189, 191, 193, 194, 196, 197, 198, 204, 206, 207, 226, 227, 234, 235, 237, 240, 248, 252, 253, 258, 259, 262, 263, 264, 272, 273, 274, 279, 280, 284], "deal": [1, 45, 51, 53, 54, 95, 102, 110, 118, 119, 137, 159, 170, 176, 193, 194, 198, 206, 240], "lead": [1, 3, 6, 16, 18, 51, 54, 77, 84, 90, 102, 110, 143, 145, 147, 153, 154, 170, 193, 204, 235, 238, 242, 243, 256, 273, 283], "bias": [1, 33, 44, 97, 102, 119, 181, 197, 235, 240, 241], "comparison": [1, 20, 85, 93, 100, 101, 102, 103, 136, 158, 159, 237, 260, 264, 271, 273, 276, 278, 280], "scale": [1, 6, 33, 42, 53, 58, 77, 97, 99, 102, 112, 130, 131, 135, 136, 137, 139, 150, 152, 153, 160, 172, 176, 177, 183, 184, 194, 206, 207, 222, 238, 243, 250, 259, 260, 264], "help": [1, 3, 8, 11, 12, 17, 20, 22, 32, 33, 44, 51, 54, 70, 84, 90, 93, 102, 103, 106, 107, 109, 110, 119, 130, 131, 133, 135, 136, 137, 142, 149, 150, 153, 154, 158, 159, 164, 167, 173, 176, 177, 178, 179, 180, 181, 182, 189, 191, 193, 194, 198, 199, 202, 204, 205, 207, 210, 213, 219, 221, 222, 223, 225, 236, 238, 239, 248, 250, 251, 254, 256, 258, 262, 264, 272, 273, 274, 276, 278, 279, 280, 283], "signal": [1, 44, 93, 95, 176, 178, 228, 237], "magnitud": [1, 20, 92, 174, 194, 222, 280], "truncat": [1, 100, 117, 158, 176, 280], "A": [1, 6, 7, 8, 11, 13, 14, 16, 20, 32, 33, 34, 38, 41, 48, 49, 50, 51, 53, 54, 55, 57, 64, 65, 69, 70, 71, 74, 75, 77, 84, 85, 95, 97, 100, 101, 102, 104, 106, 107, 109, 110, 111, 118, 119, 128, 131, 135, 137, 141, 142, 143, 144, 147, 148, 152, 154, 157, 161, 167, 168, 169, 176, 177, 178, 179, 181, 182, 183, 184, 187, 189, 191, 193, 194, 197, 198, 199, 205, 211, 212, 213, 223, 227, 235, 238, 240, 248, 250, 253, 256, 259, 262, 263, 275, 276, 279, 280], "thousand": [1, 109, 131, 140, 143, 153, 182, 189], "500": [1, 6, 25, 161, 172, 177, 180, 223], "good": [1, 2, 6, 45, 52, 54, 95, 99, 100, 102, 109, 112, 135, 136, 142, 152, 153, 158, 164, 175, 177, 181, 183, 187, 189, 193, 194, 196, 197, 219, 223, 238, 243, 256, 259, 275], "statist": [1, 54, 95, 129, 135, 146, 157, 174, 176, 182, 186, 187, 189, 223], "arbitrari": [1, 11, 16, 18, 32, 69, 75, 93, 102, 107, 118, 137, 154, 160, 169, 187, 191, 197, 228, 229], "random": [1, 6, 16, 19, 41, 44, 45, 46, 48, 50, 53, 54, 64, 65, 67, 74, 75, 77, 93, 95, 99, 106, 107, 110, 111, 112, 117, 118, 125, 136, 137, 142, 144, 145, 150, 152, 154, 160, 164, 167, 168, 174, 176, 177, 178, 180, 182, 187, 191, 210, 223, 225, 229, 238], "standard": [1, 11, 41, 45, 50, 54, 84, 90, 93, 95, 102, 103, 104, 110, 112, 114, 115, 129, 152, 175, 184, 191, 193, 194, 196, 225, 238, 264, 276], "deviat": [1, 84, 95, 102], "observationnorm": [1, 176], "init_stat": 1, "purpos": [1, 8, 59, 77, 87, 92, 97, 101, 118, 136, 141, 142, 144, 152, 153, 157, 158, 167, 172, 175, 176, 179, 180, 186, 190, 191, 194, 205, 235, 238, 242, 243, 247, 262, 264, 272, 275], "get": [1, 2, 4, 6, 8, 9, 11, 13, 16, 17, 18, 19, 20, 25, 34, 36, 44, 45, 46, 51, 52, 53, 54, 57, 58, 62, 77, 85, 90, 92, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 117, 118, 119, 125, 128, 130, 131, 134, 135, 137, 139, 140, 142, 143, 144, 145, 152, 154, 157, 159, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 182, 186, 187, 189, 190, 193, 194, 196, 199, 200, 204, 211, 219, 223, 228, 238, 241, 243, 253, 256, 257, 258, 259, 262, 263, 264, 266, 271, 278, 279, 280, 281], "summari": [1, 84, 109, 142, 153, 170, 176, 186, 193, 236, 237], "dummi": [1, 3, 11, 18, 87, 95, 101, 150, 154, 159, 169, 172, 173, 194, 198, 205, 253, 278], "over": [1, 3, 6, 8, 12, 13, 16, 18, 20, 22, 33, 34, 37, 38, 41, 45, 48, 50, 51, 52, 53, 54, 55, 57, 92, 93, 95, 97, 99, 100, 101, 102, 103, 104, 106, 107, 110, 117, 118, 133, 135, 136, 137, 138, 139, 140, 143, 145, 149, 150, 152, 154, 157, 158, 159, 160, 161, 164, 169, 174, 176, 177, 178, 179, 180, 181, 182, 186, 187, 189, 191, 193, 194, 196, 197, 198, 211, 222, 238, 241, 251, 252, 260, 264, 275, 280, 283], "earlier": [1, 6, 8, 77, 95, 97, 100, 103, 104, 107, 110, 136, 138, 140, 153, 167, 170, 176, 182, 193, 222, 223], "turn": [1, 6, 11, 16, 17, 42, 51, 93, 97, 100, 117, 144, 153, 159, 167, 168, 170, 174, 178, 182, 194, 265, 272, 273, 275], "seen": [1, 12, 13, 22, 45, 48, 51, 53, 97, 100, 102, 107, 109, 110, 117, 153, 169, 179, 191, 193, 194, 223, 242, 250, 275], "requir": [1, 2, 3, 4, 6, 7, 8, 11, 12, 14, 16, 17, 18, 22, 25, 36, 42, 44, 51, 52, 53, 54, 57, 62, 85, 87, 90, 92, 96, 101, 109, 110, 114, 115, 128, 136, 140, 142, 144, 146, 147, 149, 150, 152, 153, 154, 156, 159, 164, 167, 168, 169, 170, 172, 175, 176, 178, 179, 180, 181, 182, 189, 190, 191, 193, 194, 196, 197, 200, 202, 203, 204, 205, 207, 211, 212, 213, 222, 224, 225, 227, 228, 235, 237, 238, 242, 243, 247, 248, 249, 250, 251, 254, 262, 263, 264, 265, 266, 272, 273, 274, 278, 283], "select": [1, 3, 12, 52, 84, 90, 99, 102, 110, 112, 152, 161, 174, 177, 178, 180, 186, 187, 191, 193, 211, 228, 238, 248, 250, 262, 266, 273, 275, 280], "recal": [1, 6, 54, 92, 100, 103, 109, 150, 176, 187, 235, 237, 272, 273, 274], "wrap": [1, 3, 6, 12, 19, 34, 38, 46, 90, 95, 104, 106, 107, 112, 117, 136, 138, 141, 146, 150, 153, 160, 170, 176, 179, 180, 189, 190, 193, 194, 198, 202, 203, 205, 206, 219, 222, 228, 257, 263], "flow": [1, 16, 32, 44, 54, 68, 72, 87, 99, 102, 112, 113, 114, 115, 129, 135, 138, 176, 177, 186, 191, 198, 238, 258, 259, 263, 278], "handl": [1, 4, 11, 12, 18, 51, 54, 55, 87, 97, 100, 110, 111, 115, 129, 135, 136, 140, 143, 154, 165, 169, 170, 172, 174, 175, 176, 179, 180, 181, 189, 190, 191, 193, 194, 200, 204, 205, 212, 221, 227, 228, 237, 253, 256, 271, 273, 276, 283], "specifi": [1, 3, 6, 8, 11, 13, 18, 20, 25, 34, 38, 53, 54, 84, 90, 92, 93, 95, 97, 100, 101, 106, 111, 118, 136, 137, 138, 139, 140, 142, 143, 147, 153, 154, 156, 173, 174, 176, 179, 180, 186, 189, 193, 213, 227, 228, 236, 238, 239, 242, 247, 250, 252, 253, 256, 260, 271, 272, 273, 274, 276, 278, 280, 283, 284], "scenario": [1, 6, 16, 111, 112, 114, 115, 119, 125, 128, 141, 170, 177, 180, 193, 211, 235, 239, 256, 262, 275], "tensordictsequenti": [1, 153], "valueoper": 1, "automat": [1, 2, 3, 4, 6, 8, 11, 12, 17, 33, 35, 36, 38, 41, 44, 46, 47, 48, 50, 55, 59, 62, 99, 101, 103, 110, 118, 122, 128, 130, 135, 136, 137, 138, 140, 141, 142, 147, 158, 161, 170, 172, 176, 177, 180, 183, 184, 186, 189, 190, 193, 194, 198, 200, 204, 205, 211, 212, 213, 219, 224, 226, 227, 228, 234, 237, 238, 250, 258, 259, 260, 262, 279], "out_kei": [1, 16, 153, 176], "state_action_valu": 1, "state_valu": 1, "built": [1, 3, 6, 8, 9, 11, 21, 32, 48, 92, 93, 95, 97, 104, 128, 135, 143, 152, 153, 176, 181, 187, 191, 193, 196, 221, 223, 225, 241, 248, 259], "present": [1, 6, 8, 11, 22, 37, 84, 85, 102, 111, 168, 173, 174, 177, 178, 180, 189, 191, 193, 196, 198, 238, 257, 276], "origin": [1, 6, 7, 11, 14, 16, 20, 32, 51, 54, 77, 90, 93, 100, 102, 107, 112, 138, 140, 141, 143, 144, 164, 165, 168, 169, 170, 174, 177, 189, 190, 191, 193, 210, 212, 219, 253, 264, 265, 274, 278, 280], "paper": [1, 14, 19, 20, 54, 77, 122, 137, 140, 176, 177, 179, 181, 182, 184, 194, 197, 198, 276, 280], "found": [1, 3, 4, 6, 8, 12, 19, 51, 52, 93, 102, 142, 150, 152, 153, 157, 161, 170, 179, 180, 181, 189, 193, 212, 219, 238, 253, 276], "ddpgmlpactor": 1, "ddpgmlpqnet": 1, "sinc": [1, 3, 7, 11, 12, 13, 15, 16, 19, 45, 51, 53, 54, 55, 77, 87, 92, 93, 95, 102, 103, 104, 106, 107, 109, 110, 125, 128, 138, 139, 140, 142, 143, 144, 145, 147, 148, 152, 153, 157, 167, 168, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 187, 189, 191, 193, 194, 196, 197, 200, 202, 204, 205, 219, 223, 227, 228, 229, 241, 242, 243, 251, 253, 257, 264, 271, 272, 273], "lazi": 1, "materi": [1, 136, 140, 159, 194, 197, 229, 235, 263, 271], "abl": [1, 3, 6, 16, 17, 20, 32, 33, 51, 64, 77, 87, 95, 102, 103, 105, 109, 110, 118, 125, 142, 146, 147, 148, 149, 150, 152, 153, 154, 158, 160, 161, 167, 169, 176, 179, 187, 191, 193, 194, 196, 197, 200, 210, 225, 235, 241, 250, 253, 262, 273, 280], "devic": [1, 3, 4, 6, 11, 12, 13, 16, 18, 19, 20, 22, 25, 41, 44, 45, 46, 50, 51, 52, 54, 55, 57, 58, 62, 65, 75, 90, 100, 102, 104, 112, 118, 131, 134, 135, 136, 138, 140, 142, 143, 149, 150, 152, 153, 154, 158, 161, 167, 170, 172, 174, 175, 176, 179, 180, 186, 194, 196, 202, 203, 204, 205, 207, 210, 211, 212, 213, 223, 226, 228, 229, 234, 235, 239, 241, 248, 249, 250, 252, 253, 254, 257, 258, 259, 260, 262, 263, 265, 266, 278, 279, 280], "achiev": [1, 3, 6, 16, 20, 25, 32, 45, 51, 58, 84, 90, 102, 135, 138, 141, 146, 152, 153, 158, 167, 168, 170, 174, 176, 177, 186, 194, 197, 211, 238, 250, 252, 256, 258, 263, 264, 280], "oper": [1, 6, 7, 15, 16, 17, 20, 21, 22, 32, 33, 38, 44, 46, 48, 51, 53, 62, 64, 65, 69, 75, 84, 85, 87, 95, 96, 100, 102, 103, 104, 109, 110, 111, 112, 113, 114, 117, 118, 128, 129, 134, 135, 136, 138, 139, 140, 141, 143, 145, 147, 152, 153, 154, 156, 158, 159, 161, 164, 169, 172, 173, 175, 176, 178, 182, 186, 187, 189, 190, 191, 193, 194, 197, 198, 199, 205, 206, 210, 211, 212, 213, 219, 221, 222, 223, 225, 228, 229, 237, 241, 248, 249, 250, 253, 256, 257, 258, 259, 264, 271, 272, 275, 278, 280, 283, 284], "practic": [1, 6, 13, 39, 48, 51, 53, 54, 92, 93, 95, 100, 102, 104, 110, 111, 118, 122, 125, 130, 133, 135, 140, 141, 148, 153, 158, 161, 168, 174, 176, 177, 193, 197, 223, 224, 227, 238, 242, 243, 252, 253, 256, 271, 272, 276], "small": [1, 6, 20, 22, 25, 44, 45, 48, 59, 77, 92, 95, 97, 99, 100, 102, 104, 105, 107, 112, 118, 125, 136, 137, 139, 142, 143, 144, 146, 157, 167, 168, 170, 175, 176, 177, 180, 182, 184, 189, 194, 196, 211, 222, 223, 225, 238, 253, 254, 262, 264, 271, 280], "fake": [1, 6, 20, 48, 54, 167, 193, 276, 280], "spec": [1, 115, 153, 176, 180, 193, 223], "ornsteinuhlenbeckprocessmodul": 1, "suggest": [1, 3, 14, 54, 89, 102, 138, 144, 158, 159, 160, 161, 164, 186, 189, 213, 262], "ou": 1, "nois": [1, 6, 14, 54, 77, 206, 237], "reach": [1, 7, 12, 20, 54, 62, 102, 128, 143, 150, 152, 160, 161, 176, 180, 193, 198, 223, 280], "minimum": [1, 3, 84, 138, 176, 180, 273], "iter": [1, 6, 13, 14, 16, 25, 32, 33, 37, 38, 44, 45, 48, 54, 55, 57, 87, 90, 92, 93, 95, 97, 103, 110, 112, 119, 142, 145, 148, 150, 153, 158, 176, 177, 178, 179, 180, 186, 187, 191, 194, 196, 203, 213, 219, 222, 236, 238, 241, 251, 253, 257], "reset": [1, 37, 95, 100, 110, 125, 153, 176, 177, 178, 180, 186, 191, 254, 265], "develop": [1, 3, 11, 12, 14, 17, 25, 84, 87, 93, 106, 110, 112, 114, 129, 132, 145, 152, 161, 173, 180, 186, 191, 197, 205, 206, 210, 212, 226, 238, 264, 265, 266, 271, 274, 275], "tight": [1, 111, 112, 114, 115], "per": [1, 3, 6, 11, 13, 102, 109, 130, 135, 137, 143, 144, 146, 150, 152, 153, 159, 161, 167, 172, 174, 180, 181, 182, 183, 186, 187, 189, 193, 194, 196, 200, 204, 205, 223, 227, 237, 247, 256, 257, 259, 260, 262, 263, 271, 283], "sync": [1, 12, 13, 19, 57, 134, 135, 136, 137, 138, 139, 160, 194], "natur": [1, 6, 20, 22, 25, 46, 77, 97, 102, 110, 142, 143, 153, 170, 179, 189, 200, 273, 276, 280], "resourc": [1, 55, 77, 90, 112, 114, 136, 150, 152, 167, 176, 186, 189, 199, 210, 223, 238, 243, 246, 256, 262], "alloc": [1, 6, 8, 22, 41, 50, 57, 100, 146, 152, 167, 170, 186, 193, 194, 205, 227, 228, 257, 276], "gpu": [1, 4, 9, 14, 20, 22, 25, 41, 44, 48, 50, 51, 52, 54, 55, 56, 58, 59, 62, 65, 75, 84, 85, 95, 96, 100, 101, 102, 104, 112, 118, 122, 125, 131, 135, 136, 137, 138, 140, 141, 143, 148, 149, 150, 152, 153, 154, 158, 161, 164, 167, 169, 172, 176, 177, 179, 180, 181, 189, 191, 196, 200, 202, 204, 205, 213, 219, 222, 223, 228, 241, 248, 250, 258, 259, 260, 262, 263, 265, 266, 278, 280, 281], "worker": [1, 6, 13, 19, 53, 54, 95, 131, 136, 137, 139, 152, 161, 176, 179, 180, 186, 238], "so": [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 20, 22, 25, 32, 45, 48, 51, 53, 54, 55, 67, 70, 77, 85, 87, 90, 92, 93, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 112, 117, 118, 125, 128, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 152, 153, 158, 159, 160, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 189, 191, 193, 194, 196, 197, 198, 210, 211, 212, 213, 219, 222, 223, 227, 237, 238, 241, 242, 251, 252, 253, 256, 257, 258, 262, 263, 264, 271, 273, 274, 275, 276, 280], "syncdatacollector": [1, 176], "process": [1, 3, 4, 6, 8, 13, 14, 16, 17, 19, 20, 22, 25, 34, 37, 38, 42, 48, 51, 52, 53, 54, 58, 62, 77, 84, 87, 92, 93, 95, 97, 101, 102, 110, 111, 112, 119, 122, 129, 131, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 148, 149, 152, 153, 157, 158, 160, 161, 169, 170, 175, 177, 179, 180, 181, 182, 186, 189, 193, 194, 200, 204, 205, 207, 213, 223, 225, 227, 228, 237, 238, 239, 241, 247, 252, 253, 254, 256, 257, 258, 262, 263, 264, 275, 278, 279, 280], "offer": [1, 3, 4, 9, 13, 16, 18, 22, 38, 42, 44, 55, 62, 92, 93, 104, 137, 138, 140, 152, 154, 156, 158, 159, 170, 194, 197, 205, 221, 223, 228, 237, 238, 242, 243, 256], "multiasyncdatacollector": [1, 176], "rollout": [1, 176], "asynchron": [1, 131, 135, 139, 142, 173, 176, 180, 228, 258], "manner": [1, 11, 16, 32, 92, 110, 176, 189, 194], "therebi": [1, 253, 265, 271, 276], "decoupl": [1, 34, 168], "factori": [1, 6, 100, 106, 224, 227, 272, 273], "empti": [1, 3, 6, 7, 11, 16, 100, 144, 158, 168, 175, 182, 186, 189, 193, 197, 228, 237, 263], "maximum": [1, 13, 51, 84, 95, 97, 107, 142, 144, 153, 158, 176, 181, 182, 238, 275], "non": [1, 2, 8, 11, 13, 16, 33, 51, 53, 55, 56, 58, 84, 87, 97, 100, 102, 103, 105, 109, 110, 119, 120, 135, 137, 138, 142, 146, 147, 152, 153, 156, 159, 161, 164, 174, 178, 181, 182, 186, 191, 194, 197, 198, 205, 223, 235, 239, 252, 256, 259, 264, 271, 278], "termin": [1, 16, 55, 90, 176, 177, 179, 180, 189], "max_frames_per_traj": [1, 176], "effect": [1, 6, 7, 11, 13, 18, 57, 77, 84, 93, 97, 100, 102, 110, 115, 140, 143, 144, 150, 154, 167, 169, 170, 174, 177, 181, 182, 189, 194, 198, 204, 206, 222, 238, 242, 243, 252, 273, 283], "regist": [1, 4, 7, 8, 9, 18, 37, 44, 48, 97, 115, 117, 119, 134, 135, 137, 138, 140, 150, 156, 167, 168, 176, 190, 193, 200, 212, 219, 222, 229, 240, 262, 263], "new": [1, 2, 3, 4, 6, 8, 9, 11, 14, 16, 18, 25, 31, 32, 36, 41, 44, 46, 50, 51, 52, 54, 57, 63, 66, 77, 79, 80, 81, 82, 84, 87, 95, 99, 100, 101, 102, 104, 107, 109, 114, 115, 117, 119, 125, 128, 130, 132, 134, 135, 136, 137, 138, 139, 141, 145, 153, 156, 158, 160, 167, 168, 169, 170, 173, 174, 176, 177, 178, 181, 182, 186, 189, 190, 193, 194, 196, 200, 219, 228, 235, 238, 239, 244, 258, 259, 262, 263, 265, 266, 271, 276, 283, 284], "stepcount": [1, 153, 176], "infer": [1, 4, 6, 9, 11, 12, 39, 41, 50, 51, 93, 95, 97, 101, 102, 106, 109, 110, 112, 129, 133, 135, 138, 141, 142, 145, 146, 158, 176, 178, 189, 190, 191, 193, 194, 196, 200, 205, 213, 219, 225, 226, 240, 242, 243, 250, 253, 256, 258, 275, 276, 278, 280, 284], "manual": [1, 3, 8, 11, 14, 18, 34, 48, 51, 55, 71, 74, 75, 100, 102, 110, 118, 119, 138, 147, 153, 154, 168, 169, 170, 172, 193, 194, 200, 207, 210, 219, 222, 238, 256, 276], "around": [1, 6, 13, 25, 34, 38, 51, 57, 93, 95, 97, 100, 102, 125, 135, 144, 154, 158, 159, 164, 169, 182, 186, 187, 193, 194, 211, 229, 263, 271, 272], "1m": [1, 95, 153, 176, 260], "outer": [1, 6, 137, 159], "loop": [1, 11, 13, 19, 36, 38, 45, 48, 51, 53, 54, 77, 87, 92, 95, 99, 102, 110, 118, 136, 138, 142, 143, 145, 154, 158, 159, 160, 167, 169, 170, 179, 180, 187, 194, 211, 223, 228, 238, 241, 280], "equal": [1, 12, 92, 100, 102, 141, 161, 174, 176, 177, 189, 193, 253, 256, 262, 263, 274], "length": [1, 14, 16, 51, 54, 92, 93, 97, 109, 110, 140, 144, 176, 181, 182, 194, 197, 252, 258, 260, 273, 276, 280, 283, 284], "sub": [1, 6, 92, 117, 140, 145, 172, 176, 180, 186, 191, 194, 207, 247, 256], "shape": [1, 3, 4, 7, 18, 20, 32, 41, 44, 50, 51, 54, 70, 87, 92, 95, 102, 103, 106, 109, 117, 118, 137, 140, 143, 144, 145, 154, 156, 159, 169, 176, 186, 189, 190, 194, 196, 197, 211, 219, 223, 226, 228, 234, 247, 248, 250, 251, 253, 258, 259, 264, 274, 276, 280], "env_per_collector": 1, "traj_len": 1, "perform": [1, 4, 6, 11, 12, 13, 14, 16, 17, 18, 19, 20, 32, 33, 37, 38, 42, 44, 45, 46, 51, 58, 65, 69, 74, 77, 84, 87, 90, 92, 95, 97, 100, 101, 102, 103, 104, 109, 110, 118, 119, 128, 129, 130, 131, 133, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 152, 153, 156, 159, 160, 164, 170, 172, 173, 176, 177, 178, 180, 183, 184, 187, 189, 190, 191, 193, 194, 196, 197, 198, 200, 202, 207, 210, 212, 213, 219, 222, 223, 224, 226, 227, 228, 234, 237, 241, 242, 243, 246, 250, 252, 253, 254, 258, 259, 260, 263, 264, 265, 271, 272, 276, 278, 280, 284], "assess": [1, 170, 194], "mode": [1, 14, 39, 44, 51, 54, 57, 77, 84, 87, 89, 93, 99, 119, 130, 135, 137, 145, 146, 147, 153, 158, 160, 161, 164, 172, 178, 181, 182, 183, 187, 189, 190, 191, 193, 194, 197, 205, 211, 212, 223, 238, 245, 252, 253, 256, 258, 259, 262, 263, 278, 284], "dedic": [1, 12, 57, 100, 179, 180, 221, 222, 257], "frequenc": [1, 85, 142], "everi": [1, 2, 6, 11, 12, 16, 17, 20, 22, 25, 32, 33, 34, 38, 44, 45, 48, 51, 53, 54, 57, 62, 92, 95, 97, 99, 100, 101, 125, 140, 141, 143, 144, 146, 152, 153, 156, 161, 167, 168, 169, 170, 174, 176, 177, 178, 180, 182, 186, 187, 191, 193, 194, 202, 224, 236, 238, 249, 257, 276, 280], "10": [1, 6, 7, 11, 13, 20, 33, 34, 42, 44, 45, 46, 51, 55, 77, 85, 90, 95, 101, 117, 119, 136, 137, 139, 145, 150, 152, 154, 161, 175, 178, 179, 180, 181, 182, 186, 187, 189, 193, 194, 197, 202, 204, 207, 210, 211, 213, 219, 223, 225, 228, 236, 237, 253, 262, 263, 264, 266, 280], "come": [1, 4, 6, 8, 12, 20, 42, 53, 54, 77, 87, 90, 92, 97, 100, 102, 103, 115, 119, 136, 140, 142, 152, 153, 158, 167, 168, 170, 173, 176, 181, 191, 193, 194, 197, 213, 223, 248, 257, 264, 280], "flavor": [1, 3], "priorit": [1, 238, 276], "error": [1, 3, 6, 8, 11, 12, 13, 14, 18, 37, 38, 44, 48, 51, 52, 55, 70, 92, 95, 97, 100, 102, 106, 110, 114, 115, 118, 128, 137, 139, 141, 147, 167, 173, 176, 177, 191, 194, 197, 207, 212, 223, 235, 238, 241, 251, 262, 264, 271, 279], "higher": [1, 45, 50, 55, 84, 92, 93, 97, 102, 104, 118, 136, 137, 143, 144, 147, 156, 159, 175, 176, 177, 186, 187, 189, 193, 194, 200, 203, 207, 210, 278, 283], "likelihood": [1, 37, 51, 97, 104, 110], "regular": [1, 6, 11, 12, 25, 102, 110, 122, 140, 143, 144, 159, 168, 169, 170, 184, 194, 197, 212, 238, 250, 271, 273, 276, 278], "circular": [1, 262, 279], "compos": [1, 3, 6, 9, 12, 18, 20, 62, 95, 97, 104, 135, 136, 152, 156, 164, 169, 175, 176, 179, 181, 183, 187, 189, 197, 207, 212, 225, 228, 242, 243, 246, 248, 259], "pick": [1, 6, 45, 103, 143, 177, 182, 219, 237, 248], "tensor": [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 20, 33, 34, 35, 36, 37, 38, 39, 42, 44, 45, 46, 47, 48, 49, 51, 59, 62, 63, 65, 66, 67, 69, 70, 71, 73, 76, 77, 87, 92, 93, 94, 96, 97, 99, 101, 102, 104, 107, 110, 111, 112, 115, 117, 119, 120, 130, 135, 136, 137, 138, 144, 145, 146, 147, 150, 152, 153, 154, 156, 158, 159, 161, 164, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 189, 190, 191, 193, 194, 196, 198, 206, 207, 210, 211, 212, 221, 222, 223, 225, 226, 227, 228, 229, 234, 237, 240, 241, 242, 247, 250, 258, 259, 260, 262, 263, 264, 265, 266, 271, 272, 273, 280, 281, 283, 284], "physic": [1, 16, 109, 170, 227, 238, 256], "memori": [1, 6, 11, 12, 19, 20, 22, 41, 50, 51, 53, 57, 90, 97, 100, 101, 102, 105, 108, 110, 112, 119, 130, 134, 135, 136, 137, 138, 140, 148, 152, 153, 158, 159, 160, 164, 174, 179, 181, 183, 186, 189, 193, 194, 196, 197, 200, 212, 222, 223, 227, 229, 247, 257, 258, 259, 260, 262, 263, 264, 271, 274, 276, 280], "map": [1, 6, 14, 33, 51, 54, 93, 95, 97, 102, 107, 109, 119, 138, 143, 153, 154, 159, 167, 168, 169, 176, 177, 180, 189, 193, 196, 205, 210, 227, 237, 238, 240, 280, 283], "arrai": [1, 6, 32, 33, 44, 45, 48, 53, 62, 74, 75, 87, 92, 93, 100, 109, 110, 117, 118, 143, 144, 160, 175, 182, 189, 221, 274], "desir": [1, 3, 11, 14, 16, 19, 51, 54, 77, 84, 102, 119, 138, 152, 174, 186, 189, 193, 219, 222, 225, 253, 256, 260, 262, 264, 272], "hyperparamet": [1, 6, 16, 20, 54, 110, 119, 120, 130, 133, 135, 142, 143, 240, 259, 271, 276], "temporari": [1, 142], "directori": [1, 6, 8, 14, 34, 51, 53, 54, 90, 99, 102, 119, 122, 125, 142, 143, 144, 158, 182, 186, 189, 205, 213, 219, 236, 247, 256, 262, 264], "disk": [1, 7, 34, 95, 99, 112, 119, 153, 170, 223, 227, 228, 236, 247, 248, 262, 263], "along": [1, 6, 11, 16, 20, 32, 33, 41, 44, 50, 51, 55, 56, 57, 58, 85, 92, 93, 95, 96, 97, 99, 100, 101, 102, 106, 107, 110, 111, 125, 136, 137, 143, 144, 148, 149, 153, 167, 174, 177, 179, 187, 189, 193, 194, 252, 260, 273, 278, 280, 284], "dimens": [1, 6, 14, 16, 22, 33, 41, 48, 50, 51, 93, 95, 97, 99, 106, 107, 109, 110, 130, 135, 140, 143, 153, 154, 161, 169, 175, 176, 178, 190, 193, 194, 222, 238, 253, 260, 272, 276, 283, 284], "feed": [1, 6, 14, 45, 48, 51, 95, 97, 101, 102, 105, 107, 112, 119, 140, 143, 144, 150, 160, 177, 182, 187, 205, 225, 241], "adapt": [1, 2, 16, 20, 25, 90, 95, 112, 142, 198, 223, 260, 280], "divid": [1, 11, 12, 13, 14, 16, 17, 87, 102, 104, 139, 152, 168, 170, 180, 253, 256], "yield": [1, 6, 13, 14, 20, 37, 39, 100, 119, 140, 141, 178, 180, 197, 211, 238, 242, 264, 274, 280], "regard": [1, 6, 7, 13, 16, 119, 158, 159, 176, 186, 194, 252], "200": [1, 6, 153, 161, 180, 211, 264], "random_crop_len": 1, "25": [1, 42, 77, 92, 95, 102, 117, 125, 136, 179, 189, 210, 211, 223, 228, 264], "balanc": [1, 6, 22, 150, 186, 194, 219], "choic": [1, 3, 6, 11, 18, 90, 142, 144, 152, 170, 194, 202, 238], "heterogen": [1, 284], "figur": [1, 8, 11, 14, 16, 51, 77, 84, 95, 102, 134, 135, 139, 140, 142, 153, 158, 170, 178, 186, 187, 189, 193], "dataflow": 1, "8": [1, 4, 6, 7, 20, 90, 95, 97, 98, 106, 107, 117, 118, 137, 140, 146, 150, 158, 161, 168, 172, 175, 186, 189, 193, 194, 200, 204, 205, 206, 207, 210, 211, 222, 228, 238, 256, 257, 260, 262, 264, 266, 280, 281], "1000": [1, 2, 44, 99, 101, 125, 136, 137, 141, 158, 176, 187, 219, 223, 237, 280], "known": [1, 3, 14, 20, 92, 140, 152, 156, 157, 174, 177, 182, 193, 194, 200, 223, 237, 248, 262, 280], "utd": 1, "64": [1, 6, 17, 20, 22, 34, 38, 44, 90, 95, 100, 107, 110, 136, 137, 140, 153, 154, 169, 175, 178, 179, 194, 200, 210, 211, 223, 228, 242, 243, 260, 275, 280, 283], "reproduc": [1, 14, 54, 77, 95, 100, 102, 158, 176, 177, 180, 191, 211, 223, 238], "realiz": [1, 20, 280], "sever": [1, 2, 3, 7, 8, 12, 13, 17, 19, 32, 38, 42, 46, 48, 54, 55, 56, 77, 102, 104, 135, 137, 140, 143, 149, 152, 160, 167, 168, 170, 173, 176, 178, 179, 186, 187, 191, 193, 197, 211, 212, 223, 237, 247, 248, 256, 273, 278], "qnet": 1, "ve": [1, 6, 8, 11, 20, 46, 48, 52, 92, 93, 95, 97, 100, 101, 110, 141, 153, 157, 159, 167, 169, 170, 179, 187, 193, 194, 204, 205, 223, 264, 271, 273, 274, 275, 280], "becaus": [1, 2, 3, 6, 8, 11, 14, 16, 17, 18, 19, 20, 32, 34, 39, 41, 44, 45, 48, 50, 51, 53, 54, 57, 58, 77, 87, 90, 92, 93, 95, 97, 100, 102, 103, 104, 106, 110, 111, 112, 115, 119, 125, 128, 137, 138, 141, 143, 146, 147, 150, 153, 156, 159, 160, 161, 164, 169, 170, 174, 178, 180, 182, 184, 186, 191, 193, 196, 197, 198, 202, 210, 211, 223, 235, 238, 240, 241, 253, 264, 271, 273, 280, 283], "_must_": 1, "off": [1, 11, 19, 25, 32, 44, 51, 97, 100, 119, 136, 142, 143, 158, 167, 176, 178, 179, 180, 189, 204, 271], "dictat": [1, 16], "introduc": [1, 7, 8, 13, 17, 19, 20, 25, 33, 36, 56, 90, 93, 102, 104, 117, 118, 135, 137, 139, 145, 150, 158, 161, 167, 178, 180, 181, 182, 189, 191, 193, 194, 200, 204, 212, 235, 238, 253, 254, 256, 263, 265, 266, 271, 273, 274, 275, 278, 280, 283], "outdat": 1, "trick": [1, 3, 6, 12, 51, 100, 147, 152, 159], "multi": [1, 6, 16, 22, 48, 51, 54, 55, 56, 58, 62, 92, 93, 97, 100, 104, 133, 135, 137, 138, 140, 148, 149, 150, 153, 176, 178, 181, 183, 186, 196, 205, 207, 238, 256, 259, 276], "altern": [1, 6, 12, 50, 51, 107, 125, 136, 154, 157, 161, 173, 176, 182, 186, 189, 191, 197, 198, 205, 235, 238, 254, 264, 274, 275], "hack": [1, 235, 271], "find": [1, 2, 3, 6, 8, 11, 12, 20, 32, 34, 41, 50, 77, 84, 85, 87, 90, 95, 97, 100, 103, 106, 110, 133, 135, 136, 139, 143, 152, 156, 158, 168, 177, 180, 182, 186, 193, 194, 213, 219, 221, 223, 236, 271, 272, 273, 274, 275, 280], "well": [1, 3, 6, 11, 12, 13, 34, 41, 45, 50, 51, 55, 69, 84, 87, 90, 93, 95, 102, 104, 106, 110, 112, 118, 119, 125, 128, 129, 136, 137, 138, 141, 142, 143, 146, 147, 152, 153, 156, 167, 168, 170, 172, 175, 178, 179, 180, 181, 182, 186, 187, 189, 191, 194, 196, 204, 205, 207, 212, 219, 223, 227, 235, 237, 240, 248, 249, 250, 253, 254, 256, 271, 272, 273, 276], "despit": [1, 77, 145, 150], "fact": [1, 3, 6, 11, 14, 16, 32, 41, 77, 92, 93, 95, 97, 100, 102, 104, 109, 141, 168, 176, 177, 187, 193, 194, 197], "part": [1, 6, 11, 12, 15, 16, 17, 19, 37, 44, 46, 51, 54, 77, 90, 92, 93, 97, 103, 105, 109, 110, 111, 135, 137, 140, 141, 143, 144, 147, 148, 152, 153, 157, 158, 165, 167, 168, 176, 182, 193, 194, 219, 221, 222, 235, 237, 243, 247, 250, 253, 260, 262, 264, 265, 271, 273, 275, 284], "made": [1, 6, 12, 17, 54, 90, 93, 100, 102, 137, 139, 141, 152, 153, 170, 182, 187, 189, 193, 221, 238, 274, 284], "thank": [1, 51, 110, 142, 143, 144, 152, 182, 197], "hardupd": 1, "softupd": [1, 153], "appropri": [1, 6, 11, 51, 93, 110, 142, 150, 168, 179, 187, 194, 197, 211, 212, 222, 263, 278], "locat": [1, 3, 6, 31, 34, 41, 50, 84, 93, 95, 109, 117, 152, 170, 176, 186, 196, 205, 219, 228, 238, 247, 262], "adam": [1, 6, 13, 15, 37, 48, 54, 71, 101, 104, 118, 128, 138, 152, 167, 177, 178, 180, 202, 203, 204, 205, 210, 257], "pretti": [1, 19, 45, 100, 117, 118, 159, 180, 283], "plot": [1, 6, 54, 77, 84, 92, 142, 153, 170, 177, 178, 187, 189, 198], "alreadi": [1, 2, 3, 6, 8, 12, 13, 17, 92, 95, 100, 102, 103, 110, 128, 140, 142, 150, 161, 167, 170, 172, 175, 176, 181, 187, 194, 207, 211, 223, 225, 238, 239, 240, 241, 242, 243, 257, 273, 275, 279], "mention": [1, 3, 6, 12, 13, 17, 19, 54, 77, 87, 100, 102, 103, 119, 136, 140, 152, 153, 170, 177, 179, 186, 189, 193, 197, 205, 219, 227, 235, 242, 247, 256], "greater": [1, 13, 51, 54, 93, 118, 141, 256], "concret": [1, 6, 7, 11, 13, 92, 170, 176, 193, 271], "takeawai": [1, 122, 197, 238], "further": [1, 6, 11, 48, 77, 90, 97, 102, 110, 140, 152, 158, 170, 174, 176, 189, 190, 191, 193, 204, 212, 227, 246, 264, 276, 278, 279, 284], "might": [1, 3, 7, 11, 12, 17, 18, 19, 32, 39, 45, 52, 53, 54, 55, 92, 95, 100, 102, 103, 107, 109, 112, 115, 117, 128, 138, 147, 148, 149, 150, 152, 157, 159, 168, 170, 177, 180, 181, 182, 186, 191, 193, 194, 196, 197, 207, 223, 224, 228, 235, 238, 243, 253, 256, 262, 264, 271, 279], "dispatch": [1, 3, 17, 134, 135, 138, 173, 197, 200, 211, 219, 222, 249], "distpatch": 1, "iql": 1, "flexibl": [1, 2, 6, 25, 51, 87, 92, 110, 112, 119, 130, 135, 137, 138, 148, 197, 205, 223, 278], "runnable_code_remov": [1, 8, 14, 15, 16, 18, 20, 32, 33, 34, 36, 37, 38, 39, 41, 44, 45, 46, 48, 50, 51, 53, 54, 64, 65, 67, 70, 71, 74, 75, 77, 87, 90, 92, 93, 96, 97, 99, 100, 101, 102, 103, 104, 107, 109, 110, 111, 112, 114, 115, 117, 118, 122, 125, 128, 141, 142, 143, 144, 146, 153, 156, 157, 158, 159, 160, 161, 162, 164, 167, 169, 170, 174, 176, 177, 181, 182, 184, 186, 190, 191, 193, 194, 196, 197, 198, 203, 221, 222, 223, 224, 225, 227, 228, 229, 235, 237, 238, 239, 240, 241, 242, 243, 249, 250, 251, 252, 254, 264, 271, 272, 273, 274, 276, 283], "minut": [1, 14, 15, 16, 18, 32, 33, 34, 37, 38, 39, 41, 42, 44, 45, 46, 48, 50, 51, 53, 54, 70, 74, 75, 77, 87, 90, 92, 93, 95, 97, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 115, 122, 125, 128, 139, 141, 142, 143, 144, 146, 154, 156, 157, 158, 159, 160, 161, 164, 167, 168, 169, 170, 174, 175, 176, 177, 181, 182, 184, 187, 191, 193, 196, 197, 198, 203, 210, 224, 227, 229, 235, 242, 243, 249, 250, 251, 252, 254, 264, 271, 272, 273, 274, 276, 283], "002": [1, 14, 15, 16, 18, 21, 32, 33, 34, 37, 38, 39, 40, 41, 44, 46, 48, 49, 50, 53, 70, 72, 74, 75, 76, 90, 92, 97, 98, 100, 108, 109, 110, 111, 112, 116, 120, 122, 128, 137, 142, 143, 146, 157, 169, 174, 176, 182, 183, 198, 203, 224, 227, 229, 234, 235, 242, 243, 245, 249, 250, 251, 252, 254, 259, 271, 272, 273, 274, 276, 281, 283], "jupyt": [1, 14, 15, 16, 18, 20, 25, 32, 33, 34, 36, 37, 38, 39, 41, 42, 44, 45, 46, 48, 50, 51, 53, 54, 64, 65, 67, 69, 70, 71, 74, 75, 77, 84, 87, 90, 92, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 114, 115, 117, 119, 122, 125, 128, 141, 142, 143, 144, 146, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 174, 176, 177, 181, 182, 184, 186, 187, 189, 190, 191, 193, 194, 196, 197, 198, 203, 210, 221, 222, 223, 224, 225, 227, 228, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 249, 250, 251, 252, 254, 263, 264, 271, 272, 273, 274, 276, 283], "notebook": [1, 14, 15, 16, 18, 20, 22, 25, 32, 33, 34, 36, 37, 38, 39, 41, 42, 44, 45, 46, 48, 50, 51, 52, 53, 54, 64, 65, 67, 69, 70, 71, 74, 75, 77, 84, 85, 87, 90, 92, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 117, 119, 122, 125, 128, 141, 142, 143, 144, 146, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 174, 176, 177, 181, 182, 184, 186, 187, 189, 190, 191, 193, 194, 196, 197, 198, 203, 210, 221, 222, 223, 224, 225, 227, 228, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 249, 250, 251, 252, 254, 263, 264, 271, 272, 273, 274, 276, 283], "coding_ddpg": [1, 21, 259], "ipynb": [1, 14, 15, 16, 18, 20, 25, 32, 33, 34, 36, 37, 38, 39, 41, 42, 44, 45, 46, 48, 50, 51, 53, 54, 64, 65, 67, 69, 70, 71, 74, 75, 77, 87, 90, 92, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 114, 115, 117, 119, 122, 125, 128, 141, 142, 143, 144, 146, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 174, 176, 177, 181, 182, 184, 186, 190, 191, 193, 194, 196, 197, 198, 203, 210, 221, 222, 223, 224, 225, 227, 228, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 249, 250, 251, 252, 254, 263, 264, 271, 272, 273, 274, 276, 283], "python": [1, 6, 7, 12, 14, 15, 16, 17, 20, 21, 22, 25, 32, 33, 34, 36, 37, 38, 39, 41, 42, 44, 45, 46, 48, 50, 51, 53, 54, 55, 57, 58, 59, 64, 65, 67, 69, 70, 71, 74, 75, 77, 90, 92, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 114, 115, 117, 118, 119, 122, 125, 128, 129, 134, 135, 136, 137, 141, 142, 143, 144, 145, 146, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 174, 175, 176, 177, 179, 181, 182, 184, 186, 190, 191, 193, 194, 196, 197, 198, 203, 205, 206, 207, 210, 212, 219, 221, 222, 223, 224, 225, 227, 228, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 249, 250, 251, 253, 256, 258, 259, 260, 262, 263, 264, 265, 271, 272, 273, 274, 276, 278, 279, 283, 284], "sourc": [1, 4, 6, 12, 13, 14, 15, 16, 18, 19, 20, 25, 32, 33, 34, 36, 37, 38, 39, 41, 42, 44, 45, 46, 48, 50, 51, 53, 54, 57, 64, 65, 67, 69, 70, 71, 74, 75, 77, 87, 90, 92, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 114, 115, 117, 119, 122, 125, 128, 137, 140, 141, 142, 143, 144, 146, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 173, 174, 176, 177, 178, 180, 181, 182, 184, 186, 189, 190, 191, 193, 194, 196, 197, 198, 203, 210, 212, 213, 221, 222, 223, 224, 225, 227, 228, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 249, 250, 251, 252, 254, 262, 263, 264, 265, 271, 272, 273, 274, 276, 283, 284], "py": [1, 3, 4, 6, 8, 11, 12, 14, 15, 16, 18, 20, 21, 25, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 64, 65, 66, 67, 69, 70, 71, 72, 74, 75, 76, 77, 86, 87, 88, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 125, 128, 136, 137, 138, 141, 142, 143, 144, 145, 146, 148, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 172, 173, 174, 176, 177, 179, 181, 182, 183, 184, 186, 190, 191, 193, 194, 196, 197, 198, 203, 206, 207, 210, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 249, 250, 251, 252, 253, 254, 256, 259, 260, 262, 263, 264, 271, 272, 273, 274, 276, 279, 281, 283], "zip": [1, 6, 14, 15, 16, 18, 20, 22, 25, 32, 33, 34, 36, 37, 38, 39, 41, 42, 44, 45, 46, 48, 50, 51, 52, 53, 54, 64, 65, 67, 69, 70, 71, 74, 75, 77, 87, 90, 92, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 114, 115, 117, 119, 122, 125, 128, 141, 142, 143, 144, 146, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 174, 176, 177, 178, 180, 181, 182, 184, 186, 187, 189, 190, 191, 193, 194, 196, 197, 198, 203, 210, 221, 222, 223, 224, 225, 227, 228, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 249, 250, 251, 252, 254, 263, 264, 271, 272, 273, 274, 276, 280, 283], "The": [2, 3, 4, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 25, 32, 33, 34, 37, 38, 41, 42, 44, 45, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 69, 70, 71, 75, 77, 84, 85, 87, 93, 94, 95, 97, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 117, 118, 119, 122, 125, 126, 128, 130, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 164, 167, 168, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 184, 186, 189, 190, 191, 193, 194, 196, 198, 200, 202, 203, 204, 205, 206, 207, 211, 212, 213, 214, 222, 223, 225, 227, 228, 235, 236, 237, 238, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 260, 262, 263, 264, 265, 271, 272, 273, 274, 275, 276, 278, 279, 280, 283], "packag": [2, 3, 6, 20, 22, 25, 45, 48, 53, 59, 62, 70, 71, 90, 101, 102, 104, 110, 114, 118, 125, 130, 131, 135, 136, 137, 150, 152, 157, 173, 175, 177, 180, 186, 189, 191, 207, 212, 221, 225, 228, 237, 241, 253, 258, 279, 280], "build": [2, 6, 7, 16, 32, 34, 35, 36, 37, 38, 39, 41, 42, 48, 51, 62, 70, 71, 90, 92, 93, 94, 95, 96, 99, 100, 101, 103, 109, 110, 117, 118, 122, 128, 129, 130, 131, 135, 143, 144, 152, 153, 156, 165, 167, 169, 170, 176, 177, 178, 179, 180, 183, 193, 194, 199, 212, 223, 225, 237, 238, 250, 253, 259, 262, 266, 276, 283, 284], "highli": [2, 6, 12, 22, 51, 90, 182, 194, 238, 283], "dynam": [2, 6, 7, 8, 11, 14, 16, 17, 32, 44, 55, 67, 92, 102, 105, 108, 111, 118, 119, 128, 129, 130, 135, 145, 161, 174, 176, 212, 222, 226, 238, 245, 248, 250, 253, 258, 259, 264], "neural": [2, 15, 16, 20, 21, 32, 35, 36, 38, 44, 47, 49, 51, 53, 59, 70, 77, 92, 93, 95, 97, 101, 102, 103, 104, 105, 106, 107, 109, 112, 114, 118, 125, 130, 132, 133, 135, 142, 143, 144, 145, 146, 153, 165, 174, 176, 177, 179, 182, 183, 184, 187, 189, 198, 200, 211, 212, 219, 226, 234, 238, 243, 258, 259, 275, 278, 280], "network": [2, 7, 11, 14, 15, 16, 20, 32, 35, 36, 37, 38, 39, 44, 47, 49, 51, 53, 59, 70, 71, 77, 92, 93, 95, 97, 101, 102, 103, 105, 106, 108, 109, 110, 112, 114, 118, 125, 128, 130, 132, 135, 141, 142, 145, 146, 149, 150, 164, 165, 168, 170, 174, 179, 183, 186, 187, 189, 198, 200, 211, 212, 219, 226, 229, 234, 238, 243, 258, 259, 262, 275, 278, 280], "api": [2, 3, 4, 8, 9, 10, 11, 12, 13, 16, 17, 18, 22, 25, 33, 34, 36, 38, 41, 42, 50, 58, 84, 93, 114, 117, 119, 129, 130, 134, 135, 136, 137, 139, 140, 141, 142, 145, 150, 152, 157, 158, 159, 163, 169, 171, 172, 178, 179, 180, 186, 187, 191, 193, 194, 196, 204, 205, 206, 207, 212, 213, 221, 223, 224, 228, 237, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256, 258, 259, 260, 263, 264, 275, 278, 283, 284], "explor": [2, 6, 11, 16, 46, 51, 77, 115, 129, 130, 133, 135, 142, 147, 153, 158, 160, 167, 170, 172, 176, 177, 181, 182, 194, 197, 206, 221, 247, 250, 253, 256, 262, 275], "note": [2, 3, 6, 8, 11, 14, 17, 18, 19, 20, 22, 25, 32, 44, 45, 46, 48, 51, 52, 54, 77, 87, 92, 93, 95, 97, 100, 101, 104, 105, 106, 107, 109, 110, 115, 117, 119, 125, 128, 136, 137, 138, 140, 141, 146, 147, 149, 150, 152, 154, 156, 158, 159, 161, 167, 169, 170, 173, 174, 178, 179, 180, 181, 186, 187, 189, 190, 191, 193, 194, 196, 197, 198, 200, 204, 205, 207, 213, 228, 237, 240, 243, 247, 248, 249, 250, 256, 257, 262, 263, 271, 272, 273, 274, 276, 280, 283], "pleas": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 18, 23, 24, 45, 46, 48, 53, 60, 61, 83, 90, 128, 136, 137, 140, 150, 152, 154, 156, 157, 158, 161, 167, 169, 173, 178, 179, 180, 186, 189, 191, 193, 194, 196, 197, 198, 201, 205, 207, 208, 211, 212, 213, 215, 216, 217, 218, 219, 220, 222, 224, 253, 255, 256, 262, 263, 265, 266, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 283], "differenti": [2, 6, 16, 22, 35, 36, 41, 47, 48, 59, 92, 118, 128, 130, 135, 153, 169, 177, 183, 184, 198, 259, 273], "requires_grad": [2, 3, 4, 6, 11, 32, 44, 48, 64, 65, 92, 100, 106, 110, 118, 120, 125, 135, 145, 147, 168, 227, 241, 259, 260, 280], "track": [2, 11, 16, 33, 37, 44, 54, 84, 92, 97, 99, 100, 104, 106, 110, 118, 128, 137, 139, 144, 145, 149, 153, 180, 182, 186, 206, 228, 236, 241, 252, 253, 279], "auto": [2, 6, 7, 8, 11, 12, 14, 57, 136, 137, 158, 173, 193, 194, 210, 212, 213, 223, 237, 256, 265, 275], "x": [2, 3, 6, 7, 8, 14, 22, 32, 41, 44, 48, 50, 51, 54, 64, 65, 69, 70, 71, 74, 75, 77, 87, 92, 95, 97, 100, 102, 103, 104, 106, 110, 118, 119, 128, 136, 138, 140, 141, 143, 144, 145, 147, 150, 152, 154, 159, 168, 170, 172, 173, 175, 178, 179, 180, 187, 189, 190, 191, 193, 196, 204, 205, 207, 210, 211, 212, 219, 223, 236, 237, 248, 250, 253, 264, 265, 266, 275, 276, 278, 280], "std": [2, 6, 7, 8, 14, 17, 53, 95, 102, 173, 175, 180, 189, 212, 223, 265, 271], "cout": [2, 6, 212], "endl": [2, 6, 212], "cpufloattyp": [2, 6], "y": [2, 8, 22, 32, 41, 42, 44, 50, 54, 64, 65, 69, 70, 71, 74, 75, 77, 84, 87, 92, 95, 97, 100, 102, 103, 106, 107, 110, 118, 128, 137, 141, 172, 173, 186, 189, 191, 193, 236, 237, 248, 250, 265, 266, 273, 275], "wa": [2, 3, 8, 13, 18, 20, 45, 53, 54, 77, 92, 93, 95, 97, 100, 101, 102, 103, 104, 106, 110, 115, 119, 128, 136, 140, 142, 145, 150, 152, 160, 164, 167, 168, 169, 170, 172, 174, 175, 176, 177, 180, 181, 182, 187, 193, 194, 197, 205, 219, 222, 223, 228, 230, 231, 232, 233, 242, 253, 256, 264, 273, 274, 280], "result": [2, 3, 4, 6, 7, 11, 12, 14, 16, 20, 25, 32, 37, 39, 41, 44, 45, 53, 65, 69, 84, 85, 90, 92, 93, 95, 100, 101, 102, 106, 110, 115, 118, 119, 122, 128, 137, 138, 139, 140, 141, 144, 150, 152, 153, 156, 158, 159, 160, 164, 169, 170, 173, 174, 175, 177, 178, 179, 180, 181, 187, 189, 190, 191, 193, 196, 197, 202, 204, 210, 211, 213, 225, 227, 228, 235, 237, 238, 242, 243, 247, 248, 250, 251, 252, 256, 257, 258, 260, 262, 264, 272, 273, 274, 275, 276], "grad_fn": [2, 32, 44, 48, 92, 95, 106, 128, 141, 147, 168], "name": [2, 3, 4, 6, 8, 11, 12, 14, 15, 16, 18, 20, 22, 32, 52, 53, 54, 84, 103, 109, 110, 112, 115, 117, 119, 135, 137, 140, 142, 145, 150, 153, 158, 165, 168, 172, 173, 174, 176, 177, 178, 179, 181, 182, 183, 186, 189, 191, 194, 196, 198, 205, 207, 211, 213, 223, 227, 228, 237, 239, 252, 256, 259, 262, 278, 279, 280], "addbackward1": 2, "z": [2, 54, 87, 95, 100, 106, 128, 193, 273], "27": [2, 53, 158, 180, 210, 211, 223, 252, 264], "mulbackward1": 2, "meanbackward0": 2, "requires_grad_": [2, 32, 106, 128], "exist": [2, 6, 8, 11, 12, 13, 18, 20, 48, 54, 55, 62, 69, 85, 87, 100, 106, 118, 135, 145, 152, 174, 175, 180, 181, 182, 184, 186, 189, 191, 193, 197, 204, 206, 222, 223, 235, 238, 242, 271, 272, 274, 279, 280], "flag": [2, 3, 16, 44, 92, 106, 168, 182, 193, 227, 237, 243, 256, 284], "place": [2, 6, 8, 13, 16, 22, 41, 44, 46, 50, 54, 87, 93, 97, 99, 104, 106, 110, 137, 142, 150, 152, 154, 167, 169, 170, 176, 182, 189, 191, 193, 194, 197, 198, 205, 210, 227, 235, 237, 238, 260, 271, 278, 283], "randn": [2, 3, 4, 6, 7, 14, 69, 106, 118, 119, 145, 150, 154, 178, 180, 213, 223, 236, 253, 257, 265, 266, 275, 278, 283], "b": [2, 3, 4, 6, 20, 22, 32, 42, 44, 64, 65, 69, 85, 92, 95, 100, 104, 107, 109, 110, 117, 118, 128, 141, 143, 144, 158, 159, 161, 175, 177, 191, 193, 194, 197, 223, 228, 248, 262, 266, 275, 280], "sumbackward0": [2, 106], "backprop": [2, 44, 106, 110, 143, 160], "scalar": [2, 16, 17, 32, 44, 51, 54, 64, 92, 95, 100, 106, 118, 128, 187, 193, 210], "backward": [2, 3, 4, 6, 7, 11, 13, 14, 15, 17, 18, 19, 32, 37, 44, 46, 48, 54, 64, 65, 69, 74, 75, 92, 93, 95, 101, 106, 107, 110, 118, 125, 128, 129, 134, 135, 136, 140, 141, 144, 148, 150, 152, 156, 159, 164, 169, 172, 178, 179, 180, 183, 186, 187, 193, 194, 197, 198, 202, 203, 204, 205, 210, 212, 222, 228, 236, 238, 241, 246, 250, 252, 257, 259], "equival": [2, 8, 13, 32, 44, 92, 104, 118, 138, 156, 169, 172, 177, 179, 189, 193, 194, 197, 238, 254, 265, 271, 273, 276, 280], "print": [2, 6, 8, 13, 16, 22, 33, 38, 45, 46, 51, 53, 54, 55, 69, 77, 87, 90, 92, 95, 97, 100, 102, 104, 106, 109, 110, 111, 114, 118, 119, 128, 136, 137, 138, 139, 144, 145, 146, 149, 150, 152, 153, 154, 158, 168, 172, 173, 175, 178, 179, 180, 182, 187, 190, 191, 193, 194, 197, 202, 204, 205, 206, 207, 210, 211, 212, 213, 222, 223, 228, 229, 238, 240, 254, 257, 262, 263, 266, 271, 273, 279, 280], "d": [2, 3, 6, 8, 11, 38, 42, 54, 62, 64, 65, 69, 92, 93, 95, 97, 100, 104, 109, 110, 118, 137, 140, 142, 144, 146, 152, 159, 160, 167, 172, 186, 189, 193, 197, 207, 251, 274], "dx": [2, 65, 104, 118, 147], "grad": [2, 3, 6, 14, 18, 32, 44, 48, 64, 92, 106, 110, 118, 128, 136, 141, 145, 147, 150, 152, 156, 159, 164, 167, 178, 179, 180, 197, 203, 210, 222, 241, 271, 283], "5000": [2, 223], "got": [2, 17, 57, 93, 95, 100, 103, 104, 106, 110, 150, 173, 179, 193, 253], "matrix": [2, 6, 14, 20, 32, 41, 44, 50, 84, 92, 95, 97, 100, 103, 104, 106, 109, 110, 117, 140, 143, 144, 159, 164, 168, 181, 182, 189, 193, 194, 197, 198, 211, 212, 213, 219, 225, 238, 252, 258, 274, 276, 280, 283], "explan": [2, 54, 187, 227], "arriv": [2, 6, 17, 137, 150, 178, 238], "valu": [2, 3, 6, 7, 8, 14, 16, 22, 32, 33, 37, 41, 42, 44, 48, 50, 51, 52, 57, 64, 77, 84, 87, 90, 92, 93, 95, 97, 100, 101, 102, 104, 106, 107, 109, 110, 112, 118, 128, 140, 141, 142, 145, 149, 150, 152, 154, 157, 160, 172, 173, 177, 178, 179, 180, 181, 182, 186, 189, 191, 194, 197, 198, 203, 210, 222, 223, 228, 235, 236, 242, 247, 256, 257, 260, 262, 271, 272, 273, 274, 276, 278, 284], "section": [2, 3, 6, 11, 13, 17, 22, 33, 34, 36, 37, 38, 39, 41, 44, 45, 48, 52, 53, 54, 77, 93, 96, 100, 101, 102, 103, 104, 107, 109, 110, 115, 128, 130, 132, 134, 138, 141, 145, 146, 152, 158, 160, 164, 170, 177, 178, 180, 186, 189, 193, 194, 196, 197, 200, 203, 210, 212, 213, 219, 222, 223, 227, 238, 248, 252, 272, 273], "look": [2, 3, 6, 8, 11, 12, 13, 14, 16, 19, 22, 34, 39, 41, 44, 45, 48, 50, 51, 52, 53, 54, 57, 77, 87, 90, 92, 93, 95, 97, 99, 100, 101, 103, 104, 106, 107, 109, 110, 111, 112, 119, 125, 128, 132, 136, 138, 140, 141, 142, 147, 152, 153, 154, 161, 164, 167, 170, 174, 175, 176, 179, 180, 181, 182, 186, 187, 189, 193, 194, 196, 197, 199, 206, 210, 211, 223, 225, 228, 236, 237, 239, 240, 241, 243, 248, 252, 265, 271, 274, 276, 278], "jacobian": [2, 44, 92, 130, 135, 156, 183, 259, 283], "product": [2, 6, 41, 44, 50, 87, 92, 104, 112, 129, 130, 133, 135, 137, 152, 156, 172, 182, 183, 194, 250, 259, 260, 283], "norm": [2, 16, 20, 54, 97, 102, 129, 134, 135, 140, 168, 172, 174, 183, 189, 197, 259, 280], "1021": 2, "4020": 2, "314": 2, "6695": 2, "613": [2, 211], "4944": 2, "v": [2, 20, 22, 25, 32, 44, 54, 55, 57, 92, 95, 99, 101, 106, 107, 109, 137, 140, 156, 177, 179, 186, 187, 197, 211, 251, 263, 264, 273, 280, 284], "0001": [2, 90, 158], "kfloat": [2, 3, 4, 265], "102": 2, "4000": [2, 95, 237], "1024": [2, 22, 84, 102, 139, 202, 210, 223], "0000": [2, 168, 280], "stop": [2, 32, 90, 92, 106, 144, 161, 167, 176, 178, 182, 186, 213, 228, 262], "histori": [2, 32, 41, 48, 50, 92, 100, 106, 145, 174], "put": [2, 6, 11, 14, 16, 19, 33, 46, 51, 53, 87, 95, 97, 100, 130, 135, 136, 137, 152, 153, 168, 176, 177, 179, 180, 189], "nogradguard": 2, "block": [2, 3, 4, 6, 8, 11, 12, 14, 20, 32, 33, 48, 51, 84, 92, 106, 111, 136, 139, 140, 152, 153, 158, 170, 172, 178, 179, 180, 181, 186, 189, 200, 238, 242, 243, 260, 264, 275, 280], "pow": [2, 210, 271], "no_grad": [2, 32, 44, 92, 95, 104, 106, 107, 110, 118, 136, 137, 160, 175, 179, 187, 193, 210, 212, 238, 246, 275, 278], "Or": [2, 145, 167, 180], "content": [2, 3, 16, 52, 58, 99, 100, 101, 119, 126, 141, 150, 152, 170, 175, 176, 180, 182, 191, 193, 214, 223, 237, 252, 253, 262], "eq": [2, 51, 136, 179, 193, 228], "bool": [2, 13, 16, 17, 173, 189, 256, 275, 280], "is_leaf": [2, 128], "detach_": [2, 180], "register_hook": [2, 145], "retain_grad": [2, 120, 135, 198, 259], "doc": [2, 3, 6, 9, 51, 64, 77, 92, 100, 101, 102, 117, 118, 125, 138, 149, 150, 152, 157, 170, 178, 180, 189, 193, 194, 213, 219, 222, 236, 251, 252, 276, 283], "applic": [2, 13, 14, 16, 17, 34, 51, 62, 93, 97, 102, 112, 125, 130, 131, 132, 135, 136, 141, 142, 146, 150, 157, 167, 170, 174, 178, 180, 189, 193, 204, 205, 210, 211, 213, 219, 238, 252, 256, 264, 273, 279], "calcul": [2, 14, 20, 32, 37, 44, 45, 51, 54, 58, 77, 84, 87, 90, 92, 93, 95, 101, 102, 110, 128, 143, 144, 160, 177, 178, 180, 181, 182, 189, 194, 197, 207, 241, 260, 273, 280], "penalti": [2, 168, 175, 222], "h": [2, 3, 4, 6, 7, 8, 11, 12, 51, 140, 158, 161, 172, 173, 196, 210, 212, 237, 256], "model": [2, 8, 11, 13, 16, 19, 25, 32, 34, 35, 36, 41, 42, 44, 45, 48, 50, 54, 55, 56, 58, 64, 67, 69, 70, 71, 89, 90, 92, 94, 96, 100, 103, 104, 105, 106, 108, 110, 113, 114, 115, 117, 118, 120, 129, 130, 131, 132, 133, 135, 136, 142, 143, 144, 145, 146, 149, 152, 156, 158, 159, 165, 167, 168, 169, 176, 177, 178, 179, 180, 181, 183, 190, 191, 193, 194, 197, 198, 200, 204, 205, 206, 207, 211, 212, 213, 222, 226, 227, 229, 234, 235, 236, 241, 243, 246, 248, 250, 251, 256, 257, 258, 259, 260, 262, 264, 265, 275, 276, 279, 280, 283, 284], "linear": [2, 6, 13, 19, 20, 41, 44, 46, 48, 50, 70, 77, 95, 100, 105, 117, 118, 119, 125, 136, 138, 140, 143, 144, 145, 150, 154, 158, 159, 168, 172, 178, 179, 180, 182, 187, 193, 197, 198, 200, 202, 203, 204, 205, 206, 207, 210, 211, 212, 219, 222, 227, 229, 235, 236, 240, 243, 257, 263, 264, 271, 275, 276, 278, 280], "loss": [2, 6, 13, 16, 19, 20, 21, 32, 38, 41, 44, 50, 67, 69, 70, 71, 74, 75, 77, 90, 92, 95, 99, 104, 109, 110, 118, 119, 128, 132, 135, 136, 137, 138, 143, 145, 152, 160, 161, 169, 172, 177, 179, 180, 182, 186, 187, 194, 212, 213, 236, 246, 257, 259, 280], "target": [2, 6, 8, 16, 19, 22, 37, 45, 48, 51, 57, 77, 93, 100, 102, 104, 107, 109, 110, 115, 136, 144, 152, 153, 154, 158, 167, 169, 170, 172, 173, 175, 177, 178, 179, 180, 182, 187, 189, 191, 193, 196, 212, 213, 219, 223, 225, 246, 278], "mseloss": [2, 14, 37, 48, 69, 118, 150, 178, 204, 205, 236, 257], "grad_output": [2, 11, 12], "ones_lik": [2, 100], "create_graph": [2, 147], "gradient_penalti": 2, "dim": [2, 13, 33, 42, 95, 100, 136, 138, 172, 174, 175, 178, 179, 180, 187, 189, 211, 212, 253, 260, 272, 273], "add": [2, 3, 4, 6, 7, 8, 9, 11, 12, 14, 16, 17, 18, 20, 37, 45, 48, 52, 77, 87, 90, 97, 100, 101, 104, 107, 115, 122, 134, 135, 136, 137, 140, 144, 145, 146, 152, 153, 157, 158, 159, 167, 169, 170, 173, 175, 176, 178, 179, 180, 182, 186, 190, 193, 197, 205, 210, 223, 225, 228, 250, 254, 260, 264, 265, 271, 273, 279, 280], "combined_loss": 2, "1042": 2, "0638": 2, "0103": 2, "0723": 2, "2543": 2, "1222": 2, "0071": 2, "0814": 2, "1683": 2, "1052": 2, "0355": 2, "document": [2, 3, 6, 18, 32, 48, 54, 62, 84, 87, 90, 92, 93, 97, 99, 100, 101, 106, 119, 125, 135, 150, 152, 153, 156, 157, 158, 179, 180, 181, 186, 189, 191, 193, 196, 205, 212, 213, 238, 247, 248, 250, 251, 254, 263, 273, 278, 283], "link": [2, 6, 8, 12, 14, 36, 38, 54, 84, 96, 110, 112, 122, 152, 156, 212, 253, 273, 275], "ad": [2, 6, 7, 12, 17, 22, 25, 32, 51, 52, 55, 77, 85, 87, 92, 95, 97, 99, 100, 101, 104, 106, 119, 136, 137, 143, 144, 145, 150, 153, 156, 159, 164, 167, 173, 177, 181, 182, 193, 196, 212, 235, 237, 240, 251, 279], "subclass": [2, 6, 16, 20, 33, 34, 69, 92, 95, 97, 110, 118, 138, 142, 153, 174, 179, 187, 196, 211, 221, 222, 226, 234, 250, 258, 259, 273, 276, 280], "encod": [2, 16, 41, 42, 48, 50, 97, 105, 108, 137, 142, 153, 168, 176, 180, 189, 197, 222, 253, 259, 264, 280], "method": [2, 3, 6, 7, 11, 12, 13, 14, 16, 19, 20, 32, 33, 39, 41, 45, 48, 51, 53, 57, 69, 77, 85, 87, 92, 93, 95, 97, 99, 100, 102, 104, 106, 110, 111, 118, 119, 131, 135, 139, 142, 143, 147, 150, 153, 156, 157, 158, 159, 160, 168, 169, 170, 172, 173, 174, 176, 177, 178, 179, 187, 189, 191, 193, 194, 197, 198, 204, 205, 213, 221, 222, 225, 236, 237, 238, 243, 253, 256, 271, 275, 278, 280], "forward": [2, 7, 8, 11, 12, 13, 14, 16, 17, 19, 32, 33, 38, 44, 46, 48, 51, 54, 58, 64, 65, 67, 69, 74, 75, 87, 92, 95, 97, 100, 102, 103, 104, 105, 107, 110, 111, 118, 119, 125, 128, 130, 135, 136, 137, 140, 141, 143, 146, 147, 148, 150, 152, 154, 164, 167, 168, 169, 172, 174, 177, 178, 179, 180, 182, 183, 186, 187, 189, 191, 193, 194, 198, 203, 204, 205, 206, 207, 210, 211, 212, 219, 222, 225, 228, 229, 238, 253, 257, 259, 275], "detail": [2, 3, 4, 6, 11, 12, 14, 17, 18, 19, 34, 37, 44, 45, 46, 54, 55, 77, 84, 85, 87, 97, 100, 101, 111, 115, 136, 138, 140, 142, 144, 146, 148, 150, 158, 164, 167, 180, 181, 186, 187, 190, 191, 193, 194, 200, 203, 206, 210, 211, 212, 213, 219, 221, 222, 223, 227, 237, 238, 248, 253, 260, 262, 271, 272, 273, 274, 278, 279, 283], "namespac": [2, 3, 4, 6, 7, 8, 11, 12, 33, 110, 115, 173, 191, 276], "inherit": [2, 8, 13, 17, 38, 53, 87, 95, 100, 101, 104, 157, 160, 176, 189, 196, 253, 262, 273, 276], "linearfunct": 2, "public": [2, 4, 11, 12, 17, 138, 173], "static": [2, 3, 4, 11, 12, 16, 92, 156, 173, 193, 194, 238, 264], "option": [2, 3, 4, 6, 11, 12, 13, 36, 45, 47, 49, 53, 55, 84, 90, 92, 93, 96, 97, 100, 102, 112, 115, 117, 129, 131, 138, 139, 142, 148, 153, 154, 158, 161, 170, 172, 174, 175, 189, 191, 193, 194, 210, 222, 223, 228, 238, 246, 247, 248, 251, 252, 254, 259, 262, 264], "autogradcontext": [2, 11, 12], "ctx": [2, 3, 11, 12, 22, 147], "save_for_backward": [2, 3, 147], "mm": [2, 200, 265], "t": [2, 6, 7, 8, 9, 11, 12, 13, 15, 16, 17, 18, 20, 25, 32, 36, 37, 41, 44, 45, 48, 52, 54, 55, 57, 62, 69, 77, 90, 92, 93, 95, 97, 100, 102, 103, 104, 106, 107, 109, 110, 112, 115, 118, 119, 125, 128, 136, 137, 141, 147, 153, 154, 156, 157, 158, 159, 160, 161, 164, 167, 168, 169, 170, 174, 175, 176, 177, 178, 180, 181, 182, 187, 189, 190, 191, 193, 194, 197, 198, 202, 203, 210, 211, 219, 222, 223, 225, 237, 238, 239, 240, 241, 249, 250, 251, 253, 254, 256, 260, 262, 264, 271, 272, 273, 275, 280, 283], "unsqueez": [2, 16, 48, 70, 100, 118, 169, 175, 178, 180, 187], "expand_a": 2, "tensor_list": [2, 11, 12, 152], "save": [2, 3, 6, 8, 13, 14, 32, 33, 34, 35, 36, 37, 41, 42, 45, 50, 51, 52, 54, 77, 90, 99, 101, 102, 120, 125, 135, 136, 138, 140, 142, 146, 158, 159, 172, 174, 178, 179, 180, 182, 183, 186, 189, 194, 212, 213, 225, 226, 227, 228, 236, 237, 238, 240, 241, 243, 248, 252, 258, 259, 262, 281], "get_saved_vari": 2, "grad_input": [2, 147], "grad_weight": 2, "grad_bia": 2, "Then": [2, 3, 8, 14, 17, 20, 25, 45, 46, 54, 77, 87, 103, 104, 107, 109, 110, 115, 122, 136, 150, 167, 172, 173, 174, 176, 177, 178, 180, 182, 186, 207, 235, 260, 279, 280], "appli": [2, 6, 11, 12, 16, 17, 20, 32, 33, 42, 53, 54, 70, 84, 87, 92, 95, 97, 100, 102, 104, 118, 132, 135, 136, 138, 143, 145, 146, 147, 150, 152, 154, 159, 160, 161, 164, 167, 168, 169, 172, 174, 176, 178, 179, 180, 182, 184, 189, 190, 193, 194, 196, 197, 198, 200, 202, 205, 206, 207, 212, 213, 221, 235, 238, 242, 243, 246, 247, 250, 252, 254, 260, 262, 264, 271, 272, 276, 280, 283], "5314": 2, "2807": 2, "4864": 2, "7608": 2, "9101": 2, "0073": 2, "mulconst": 2, "object": [2, 3, 6, 7, 8, 12, 13, 16, 21, 32, 33, 34, 37, 38, 44, 51, 54, 92, 93, 95, 97, 100, 102, 106, 110, 118, 119, 125, 132, 133, 135, 141, 143, 146, 152, 154, 156, 157, 170, 173, 178, 179, 180, 181, 183, 186, 187, 189, 193, 204, 205, 212, 223, 235, 237, 238, 240, 243, 253, 258, 259, 260, 276], "stash": 2, "saved_data": 2, "were": [2, 6, 14, 20, 22, 32, 54, 85, 87, 92, 97, 100, 102, 104, 106, 110, 122, 142, 145, 149, 150, 154, 161, 168, 176, 177, 179, 181, 182, 190, 193, 194, 197, 210, 219, 223, 227, 228, 235, 253, 256, 263, 271, 280, 283], "todoubl": 2, "On": [2, 6, 8, 11, 96, 100, 110, 125, 137, 150, 152, 161, 168, 174, 178, 179, 191, 194, 196, 197, 198, 211, 219, 222, 238, 256, 280, 284], "easiest": [2, 36, 96, 110, 159, 176, 193, 238], "your": [2, 3, 4, 6, 8, 9, 11, 13, 14, 17, 18, 20, 21, 22, 32, 33, 36, 38, 44, 45, 46, 48, 51, 52, 53, 55, 56, 57, 69, 77, 84, 90, 92, 93, 96, 97, 100, 101, 104, 106, 107, 109, 111, 112, 114, 115, 118, 119, 120, 122, 129, 130, 132, 133, 135, 136, 137, 138, 141, 143, 146, 147, 148, 149, 150, 152, 153, 156, 157, 159, 160, 161, 165, 167, 168, 170, 173, 174, 175, 176, 179, 180, 181, 184, 186, 187, 189, 191, 193, 194, 197, 199, 202, 206, 221, 222, 223, 228, 236, 237, 239, 240, 241, 242, 243, 250, 251, 252, 253, 258, 259, 262, 265, 266, 275, 279, 280, 283, 284], "tabl": [2, 19, 109, 117, 135, 137, 152, 158, 179, 180, 186, 193, 194, 211, 223, 228], "set_data": 2, "data": [2, 3, 7, 8, 9, 13, 14, 16, 19, 20, 22, 25, 32, 33, 36, 37, 41, 42, 44, 47, 48, 49, 50, 53, 62, 69, 74, 75, 77, 84, 87, 92, 93, 95, 99, 101, 102, 103, 104, 105, 106, 107, 109, 112, 118, 119, 131, 132, 135, 141, 142, 148, 152, 153, 154, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 172, 175, 177, 178, 179, 180, 191, 196, 197, 198, 200, 205, 206, 207, 211, 212, 213, 219, 221, 222, 223, 227, 228, 229, 235, 236, 242, 243, 246, 252, 253, 257, 258, 259, 263, 264, 272, 274, 275, 276, 278, 280, 283, 284], "output_nr": 2, "after": [2, 6, 7, 12, 14, 16, 17, 18, 20, 22, 25, 32, 33, 34, 41, 44, 46, 48, 51, 54, 55, 90, 92, 93, 97, 102, 103, 104, 107, 109, 110, 112, 119, 128, 135, 137, 138, 139, 140, 143, 144, 145, 146, 149, 150, 152, 153, 154, 158, 160, 161, 167, 168, 170, 172, 173, 174, 175, 176, 177, 179, 180, 182, 184, 186, 187, 193, 194, 196, 198, 205, 222, 223, 227, 228, 235, 236, 238, 248, 250, 252, 257, 278, 279, 280], "file": [2, 3, 4, 6, 8, 11, 12, 17, 21, 40, 49, 52, 53, 54, 57, 66, 72, 76, 84, 85, 88, 90, 92, 93, 98, 106, 108, 110, 116, 117, 120, 122, 137, 141, 143, 144, 150, 152, 158, 167, 170, 173, 175, 183, 186, 189, 193, 196, 200, 205, 206, 207, 212, 222, 223, 227, 228, 234, 236, 237, 239, 245, 247, 248, 252, 253, 256, 259, 260, 263, 265, 266, 274, 275, 276, 279, 281], "bug": [2, 12, 99, 158, 197, 253, 262, 265, 275], "report": [2, 12, 20, 54, 77, 90, 92, 95, 97, 101, 129, 135, 139, 158, 170, 178, 180, 181, 228, 250, 262, 265, 275, 280], "github": [2, 6, 7, 8, 12, 13, 19, 25, 51, 55, 56, 57, 62, 115, 136, 137, 139, 140, 148, 149, 150, 152, 154, 160, 169, 172, 173, 178, 179, 180, 186, 196, 200, 205, 207, 212, 213, 221, 253, 260, 263, 264, 265, 275], "issu": [2, 6, 7, 8, 11, 53, 128, 137, 138, 149, 154, 157, 158, 161, 169, 170, 175, 186, 191, 193, 194, 197, 198, 200, 205, 206, 219, 222, 224, 235, 253, 262, 263, 264, 265, 271, 273, 275, 276, 279], "fix": [2, 16, 20, 25, 32, 51, 52, 53, 54, 102, 128, 141, 177, 178, 198, 219, 237, 238, 251, 264, 280], "soon": [2, 54, 161, 167, 204, 212], "overview": [2, 6, 13, 55, 57, 95, 130, 131, 135, 143, 144, 150, 152, 173, 176, 178, 179, 180, 182, 186, 197, 200, 202, 259, 271, 272, 274, 281, 284], "alwai": [2, 3, 4, 6, 8, 16, 19, 22, 42, 54, 95, 97, 101, 107, 109, 110, 138, 139, 140, 141, 146, 152, 153, 170, 175, 176, 177, 178, 180, 193, 194, 196, 200, 251, 271, 275], "problem": [2, 6, 8, 13, 16, 17, 22, 51, 53, 54, 103, 105, 109, 110, 118, 125, 142, 153, 158, 159, 168, 176, 178, 180, 186, 190, 191, 194, 200, 223, 224, 227, 238, 253, 256, 271, 273], "question": [2, 6, 8, 11, 12, 20, 51, 93, 137, 152, 157, 182, 194, 200, 223, 272, 280], "forum": [2, 6, 8, 45, 128, 157, 198, 200], "touch": [2, 6, 8, 16, 200], "richard": 3, "zou": 3, "integr": [3, 4, 6, 12, 16, 18, 36, 90, 111, 115, 117, 134, 135, 142, 145, 172, 186, 187, 191, 197, 204, 211, 219, 221, 235, 240, 250, 256, 275, 279, 284], "opcheck": [3, 18], "prerequisit": [3, 4, 6, 18, 55, 57, 58, 105, 122, 137, 139, 140, 145, 148, 149, 150, 152, 153, 161, 172, 173, 178, 179, 180, 189, 190, 194, 197, 204, 205, 207, 238, 260, 263, 279], "basic": [3, 4, 11, 13, 17, 18, 19, 25, 32, 33, 34, 37, 38, 39, 40, 41, 42, 51, 56, 58, 59, 75, 79, 82, 89, 92, 95, 96, 97, 100, 102, 105, 109, 110, 111, 112, 114, 115, 118, 128, 129, 135, 140, 143, 146, 158, 165, 172, 176, 181, 194, 197, 198, 199, 204, 205, 223, 236, 247, 248, 252, 253, 258, 259, 272, 276], "program": [3, 4, 6, 9, 22, 62, 97, 103, 105, 106, 109, 135, 140, 143, 157, 170, 172, 179, 191, 205, 223, 238, 242, 252, 253, 256, 260, 262, 266, 279], "amd": 3, "rocm": [3, 186], "modif": [3, 16, 17, 90, 103, 110, 146, 152, 174, 176, 179, 184, 187, 193, 197, 237, 243, 253], "larg": [3, 4, 6, 9, 14, 18, 19, 20, 22, 37, 41, 51, 62, 90, 93, 97, 99, 102, 107, 109, 110, 112, 118, 125, 131, 135, 136, 137, 139, 142, 146, 150, 152, 154, 164, 170, 172, 176, 177, 179, 180, 181, 189, 191, 194, 196, 202, 207, 211, 222, 228, 229, 238, 242, 243, 260, 262, 273, 280], "e": [3, 4, 6, 7, 8, 9, 11, 12, 13, 18, 22, 32, 33, 38, 44, 45, 51, 53, 54, 62, 77, 87, 90, 92, 95, 97, 100, 102, 105, 109, 110, 119, 125, 128, 130, 135, 136, 138, 139, 140, 142, 143, 144, 147, 149, 150, 152, 154, 161, 168, 169, 173, 174, 178, 180, 182, 186, 190, 191, 193, 197, 198, 207, 210, 212, 213, 223, 225, 228, 237, 238, 240, 241, 273, 274, 276, 278, 283, 284], "g": [3, 4, 6, 7, 9, 11, 12, 13, 16, 18, 22, 44, 51, 53, 54, 62, 90, 92, 95, 97, 100, 102, 104, 105, 109, 125, 128, 130, 135, 136, 138, 142, 143, 144, 150, 152, 154, 158, 167, 169, 173, 176, 178, 180, 182, 186, 191, 193, 197, 198, 207, 210, 213, 223, 228, 237, 238, 265, 274, 278, 283, 284], "etc": [3, 4, 9, 12, 18, 45, 46, 48, 51, 53, 71, 95, 97, 100, 103, 104, 105, 106, 110, 119, 128, 140, 170, 174, 176, 177, 182, 193, 194, 197, 198, 211, 212, 223, 225, 238, 240, 273, 278], "wish": [3, 4, 6, 9, 18, 54, 77, 93, 100, 119, 139, 164, 169, 179, 189, 194, 205, 222, 251, 272], "bring": [3, 4, 9, 93, 139, 170, 176, 186, 189, 194, 228, 238, 256, 264, 274, 283], "demonstr": [3, 4, 8, 16, 18, 19, 20, 39, 44, 52, 59, 84, 87, 93, 95, 101, 111, 115, 129, 131, 132, 135, 136, 137, 139, 140, 141, 146, 147, 150, 154, 156, 157, 158, 161, 164, 170, 172, 173, 176, 178, 179, 180, 181, 186, 189, 190, 193, 194, 197, 198, 203, 204, 205, 207, 210, 211, 222, 223, 227, 228, 241, 242, 247, 249, 250, 251, 252, 254, 256, 257, 258, 260, 262, 263, 264, 265, 273, 275, 276, 278, 279, 280], "bless": 3, "path": [3, 4, 6, 8, 22, 34, 51, 52, 54, 55, 77, 84, 90, 92, 95, 100, 101, 102, 103, 110, 119, 136, 137, 158, 173, 189, 191, 197, 200, 204, 205, 210, 213, 219, 223, 235, 237, 238, 239, 242, 256, 262, 263, 264, 271, 278], "fuse": [3, 4, 20, 129, 133, 134, 135, 158, 175, 183, 197, 210, 258, 259, 264, 275, 280], "subsystem": [3, 9, 18, 193, 250], "semant": [3, 6, 8, 51, 70, 100, 105, 107, 108, 118, 138, 152, 193, 194, 259, 273, 274, 276, 281, 283, 284], "def": [3, 4, 6, 7, 8, 11, 13, 16, 22, 55, 57, 69, 87, 95, 118, 119, 136, 137, 138, 139, 140, 145, 147, 150, 152, 154, 158, 168, 172, 173, 178, 179, 180, 187, 189, 202, 204, 205, 207, 210, 211, 213, 219, 223, 236, 248, 253, 257, 260, 265, 266, 271, 275, 278, 279, 280], "mymuladd": [3, 4], "code": [3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 25, 32, 33, 34, 38, 39, 41, 42, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 64, 65, 67, 69, 70, 71, 74, 75, 77, 84, 85, 87, 90, 92, 93, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 117, 118, 119, 122, 125, 128, 129, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 165, 167, 168, 169, 170, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 189, 190, 191, 193, 194, 196, 197, 198, 199, 200, 203, 205, 206, 207, 210, 212, 221, 222, 223, 224, 225, 227, 228, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 262, 263, 264, 272, 273, 274, 275, 276, 279, 280, 283], "bind": [3, 4, 6, 7, 9, 12, 139, 238, 256, 263], "precompil": 3, "instead": [3, 5, 6, 9, 11, 12, 18, 20, 23, 24, 32, 45, 46, 51, 53, 54, 55, 65, 92, 95, 100, 103, 104, 109, 110, 117, 118, 125, 136, 137, 138, 141, 142, 144, 147, 148, 152, 157, 159, 160, 161, 164, 167, 173, 174, 175, 178, 179, 180, 182, 184, 186, 187, 189, 190, 191, 193, 194, 196, 197, 198, 205, 208, 211, 214, 219, 229, 243, 249, 251, 255, 257, 264, 271, 273, 274, 275, 276, 280, 283], "util": [3, 4, 6, 8, 12, 17, 25, 34, 38, 45, 51, 53, 55, 57, 84, 95, 99, 101, 110, 117, 118, 119, 125, 130, 135, 136, 137, 138, 140, 143, 145, 152, 154, 156, 158, 159, 161, 168, 170, 172, 173, 175, 176, 179, 181, 182, 186, 187, 189, 191, 196, 202, 204, 205, 210, 212, 219, 221, 222, 236, 237, 245, 246, 248, 250, 252, 256, 258, 259, 263, 276, 278, 280], "cpp_extens": [3, 4, 12, 173, 223], "extens": [3, 6, 9, 17, 21, 54, 93, 119, 133, 135, 138, 145, 147, 152, 189, 211, 223, 226, 234, 249, 258, 259, 265, 271, 273, 284], "ahead": [3, 8, 37, 95, 145, 167, 187, 193, 205, 238, 252], "time": [3, 6, 7, 11, 13, 14, 15, 16, 17, 18, 20, 32, 33, 34, 37, 38, 39, 41, 42, 44, 45, 46, 48, 50, 51, 52, 53, 54, 62, 67, 70, 74, 75, 77, 85, 87, 90, 92, 93, 95, 97, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 115, 118, 119, 122, 125, 128, 129, 133, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 164, 167, 168, 169, 170, 174, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 189, 191, 193, 194, 196, 197, 198, 203, 204, 205, 210, 211, 213, 219, 222, 223, 224, 226, 227, 229, 235, 238, 249, 250, 251, 252, 254, 258, 262, 264, 271, 272, 273, 274, 275, 276, 278, 280, 283, 284], "setuptool": [3, 4, 12, 173, 186], "load_inlin": [3, 223], "setup": [3, 4, 6, 12, 19, 36, 54, 55, 57, 136, 137, 142, 150, 167, 173, 180, 204, 205, 207, 223, 237, 262, 264, 273, 274, 279, 283], "import": [3, 4, 6, 7, 8, 11, 12, 13, 16, 20, 22, 25, 32, 42, 44, 48, 51, 52, 53, 54, 55, 69, 77, 84, 87, 92, 93, 95, 97, 99, 100, 102, 104, 106, 107, 110, 114, 118, 119, 122, 128, 136, 137, 138, 139, 140, 145, 146, 147, 150, 152, 153, 154, 156, 157, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 186, 187, 190, 191, 193, 194, 198, 200, 202, 203, 204, 205, 207, 210, 211, 212, 213, 219, 223, 235, 236, 237, 238, 242, 243, 246, 248, 253, 254, 256, 257, 260, 262, 263, 265, 266, 271, 273, 274, 275, 276, 278, 279, 280], "extension_cpp": 3, "ext_modul": [3, 4, 12, 173], "cppextens": [3, 12, 173], "muladd": [3, 4], "cpp": [3, 6, 8, 11, 131, 135, 158, 212, 237, 252, 275, 284], "py_limited_api": [3, 4], "min": [3, 54, 84, 97, 102, 125, 152, 173, 176, 178, 180, 189, 193, 253], "9": [3, 6, 20, 22, 34, 40, 42, 44, 51, 90, 95, 106, 109, 110, 117, 119, 158, 168, 175, 178, 187, 189, 194, 210, 211, 212, 223, 225, 228, 245, 246, 266, 280], "expos": [3, 6, 8, 11, 101, 138, 180, 194, 238, 279], "stabl": [3, 26, 27, 28, 29, 30, 51, 64, 77, 102, 103, 118, 125, 139, 150, 155, 175, 185, 186, 188, 213, 222, 282], "limit": [3, 6, 12, 13, 17, 20, 39, 51, 62, 77, 136, 140, 143, 153, 154, 160, 161, 169, 170, 182, 190, 191, 193, 194, 204, 223, 235, 264, 280], "subset": [3, 16, 87, 90, 95, 99, 102, 114, 125, 152, 173, 189, 211, 223, 273, 274], "extra_compile_arg": [3, 4, 12], "cxx": [3, 4, 6, 8, 212, 266], "dpy_limited_api": [3, 4], "0x03090000": [3, 4], "wheel": [3, 51, 102, 176, 186, 284], "cmdclass": [3, 4, 12, 173], "build_ext": [3, 4, 12, 173], "buildextens": [3, 4, 12, 173], "bdist_wheel": [3, 4], "cp39": [3, 4], "cu": 3, "cudaextens": [3, 173], "cpython": [3, 237], "agnost": [3, 190, 224], "pure": [3, 6, 12, 143, 147, 154, 169, 193, 196, 265, 275], "agnostic": 3, "minim": [3, 6, 12, 14, 20, 37, 54, 64, 65, 69, 70, 71, 74, 75, 77, 84, 92, 104, 109, 110, 118, 129, 135, 137, 142, 149, 158, 172, 177, 191, 238, 241, 243, 271, 278, 280], "releas": [3, 6, 12, 20, 25, 52, 117, 119, 136, 137, 141, 167, 179, 181, 186, 204, 211, 212, 228, 238, 243, 253, 280], "oldest": 3, "hexcod": 3, "throughout": [3, 14, 54, 107, 152, 167, 170, 176, 187, 235, 273], "environ": [3, 4, 6, 7, 9, 13, 18, 21, 22, 36, 57, 84, 87, 93, 96, 99, 112, 122, 132, 135, 136, 137, 140, 145, 149, 150, 152, 158, 170, 172, 173, 177, 178, 179, 180, 191, 193, 194, 197, 200, 204, 205, 206, 207, 211, 213, 219, 221, 223, 237, 238, 247, 252, 254, 256, 257, 259, 260, 262, 275, 279], "unknown": 3, "behavior": [3, 7, 8, 11, 12, 13, 14, 16, 37, 51, 53, 97, 107, 110, 111, 128, 153, 157, 158, 161, 167, 170, 191, 193, 227, 238, 249, 251, 256, 272, 273], "runnabl": [3, 142, 158, 241], "three": [3, 6, 12, 14, 16, 17, 34, 37, 53, 54, 65, 77, 84, 87, 92, 93, 95, 99, 100, 103, 110, 115, 118, 119, 135, 139, 140, 143, 144, 161, 165, 168, 170, 173, 176, 180, 181, 182, 184, 186, 187, 194, 219, 228, 262, 264, 274, 275], "line": [3, 6, 8, 11, 14, 18, 51, 52, 53, 57, 58, 84, 95, 99, 100, 101, 102, 104, 110, 117, 142, 143, 144, 150, 152, 158, 175, 177, 179, 180, 182, 186, 187, 191, 193, 204, 205, 207, 212, 227, 236, 238, 253, 254, 256, 262, 265, 266, 271, 273], "specif": [3, 4, 6, 8, 11, 12, 13, 20, 22, 34, 38, 45, 57, 77, 84, 90, 92, 93, 95, 97, 99, 101, 104, 105, 106, 110, 111, 112, 114, 115, 119, 122, 128, 132, 136, 137, 140, 143, 144, 146, 152, 153, 158, 170, 172, 174, 176, 178, 179, 180, 181, 182, 186, 187, 190, 193, 194, 196, 197, 200, 204, 205, 211, 212, 219, 221, 228, 235, 237, 247, 250, 252, 256, 257, 258, 272, 275, 276, 278, 279, 280], "would": [3, 6, 8, 11, 16, 18, 19, 22, 32, 44, 51, 55, 57, 77, 90, 92, 95, 97, 100, 102, 106, 109, 110, 115, 119, 125, 128, 136, 139, 140, 141, 142, 143, 144, 146, 147, 150, 153, 157, 158, 159, 161, 167, 168, 169, 173, 175, 176, 177, 178, 179, 180, 182, 189, 191, 193, 194, 196, 197, 198, 200, 205, 207, 219, 247, 248, 252, 256, 262, 263, 273, 274, 283, 284], "verifi": [3, 4, 6, 87, 92, 100, 115, 122, 128, 147, 154, 156, 159, 161, 174, 175, 190, 194, 196, 198, 211, 212, 219, 263], "met": [3, 16, 136, 170], "crash": [3, 6, 262], "wors": 3, "silent": [3, 18, 158, 191, 235], "incorrect": [3, 18, 54, 92, 95, 141, 147, 170, 191], "avoid": [3, 19, 45, 90, 99, 102, 136, 137, 138, 140, 146, 150, 152, 161, 164, 167, 176, 178, 191, 193, 198, 204, 222, 223, 227, 228, 235, 247, 256, 263, 264, 271, 272, 276, 279, 280], "unstabl": [3, 281], "libtorch_python": 3, "particular": [3, 6, 11, 13, 34, 45, 53, 84, 85, 90, 92, 93, 95, 97, 109, 132, 142, 143, 145, 152, 154, 164, 169, 172, 179, 189, 193, 196, 197, 227, 238, 247, 271, 272, 274, 276], "libtorch": [3, 6, 8, 212], "aten": [3, 4, 11, 12, 17, 115, 117, 158, 186, 193, 210, 211, 212, 219, 228, 237, 265, 275, 278], "strongli": [3, 17, 153, 168, 197], "recommend": [3, 6, 9, 11, 12, 17, 22, 62, 84, 93, 99, 110, 112, 114, 135, 138, 144, 150, 165, 175, 182, 186, 193, 194, 196, 197, 200, 204, 211, 212, 219, 227, 236, 237, 238, 242, 260, 262, 273, 278, 284], "ascertain": [3, 263], "compliant": [3, 196, 204, 205], "safe": [3, 7, 102, 170], "guarante": [3, 12, 102, 149, 152, 161, 170, 174, 179, 180, 193, 253, 272], "better": [3, 6, 16, 20, 34, 37, 38, 45, 54, 58, 92, 95, 97, 99, 102, 109, 110, 114, 117, 130, 135, 138, 139, 142, 143, 144, 145, 158, 159, 160, 167, 169, 170, 176, 177, 182, 186, 187, 189, 193, 200, 223, 238, 246, 256, 260, 264, 271, 272, 280], "wild": 3, "west": 3, "There": [3, 6, 8, 11, 12, 16, 17, 20, 32, 48, 77, 87, 92, 93, 95, 97, 100, 101, 102, 103, 104, 107, 109, 110, 125, 128, 131, 144, 145, 149, 153, 154, 157, 159, 161, 164, 167, 169, 172, 175, 176, 179, 180, 182, 193, 194, 195, 196, 197, 213, 223, 225, 230, 231, 232, 233, 237, 238, 241, 242, 244, 247, 252, 254, 256, 262, 273, 280], "caveat": [3, 7, 150, 178, 223, 227, 262], "yourself": [3, 6, 11, 36, 95, 106, 135, 160, 194], "truli": [3, 6, 51, 160], "relev": [3, 6, 16, 55, 103, 105, 109, 122, 137, 140, 174, 189, 193, 238, 240, 247, 253, 263], "third": [3, 6, 7, 8, 11, 14, 18, 54, 64, 65, 67, 69, 70, 71, 74, 75, 97, 100, 107, 118, 129, 135, 139, 147, 173, 182, 271, 283], "intend": [3, 6, 11, 14, 92, 102, 136, 140, 158, 161, 181, 191, 193, 197, 198, 225, 238, 248, 271], "influenc": [3, 6, 54, 97, 170, 256], "accordingli": [3, 8, 12, 22, 153, 167, 178, 189, 200], "command": [3, 6, 16, 52, 93, 99, 101, 114, 122, 135, 138, 149, 150, 170, 173, 176, 178, 179, 180, 182, 186, 187, 189, 196, 205, 207, 211, 212, 228, 236, 238, 252, 253, 254, 260, 262, 266], "consequ": [3, 140, 170, 177, 193], "properli": [3, 11, 12, 16, 52, 57, 102, 147, 150, 152, 161, 167, 168, 176, 178, 179, 180, 182, 197, 235, 271, 273], "could": [3, 6, 7, 11, 12, 13, 54, 90, 92, 97, 102, 103, 104, 106, 107, 109, 112, 117, 136, 137, 140, 141, 144, 152, 161, 167, 170, 176, 177, 178, 179, 180, 182, 186, 187, 189, 193, 196, 205, 206, 207, 212, 213, 219, 227, 228, 256, 271, 273, 275, 278, 283], "outsid": [3, 7, 12, 16, 17, 46, 134, 135, 138, 140, 146, 186, 189, 193, 235, 243, 251, 271], "cannot": [3, 6, 7, 8, 13, 16, 22, 51, 62, 84, 100, 111, 115, 118, 119, 138, 139, 147, 150, 152, 153, 161, 170, 176, 191, 193, 210, 250, 264, 283], "mymuladd_cpu": 3, "const": [3, 4, 6, 7, 8, 11, 12, 17, 158, 173, 210, 212, 223, 237, 265, 275], "torch_check": [3, 4, 11], "size": [3, 4, 6, 7, 11, 13, 14, 16, 20, 22, 32, 33, 37, 38, 42, 44, 45, 46, 48, 51, 53, 54, 57, 84, 90, 93, 95, 97, 100, 101, 102, 106, 107, 109, 110, 119, 125, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 152, 153, 154, 158, 159, 160, 161, 164, 167, 169, 170, 173, 175, 176, 177, 178, 179, 182, 186, 189, 190, 191, 193, 194, 196, 197, 199, 204, 205, 206, 212, 222, 223, 227, 229, 236, 237, 238, 257, 258, 260, 262, 263, 264, 271, 274, 276, 280], "dtype": [3, 4, 11, 12, 16, 17, 18, 42, 95, 100, 106, 138, 147, 172, 193, 210, 212, 222, 235, 246, 248, 260, 263, 265, 274], "torch_internal_assert": [3, 11], "devicetyp": [3, 11, 17], "cpu": [3, 6, 7, 11, 12, 13, 16, 17, 22, 33, 38, 41, 44, 45, 50, 51, 54, 64, 75, 77, 84, 85, 90, 100, 102, 104, 110, 112, 117, 118, 125, 129, 130, 135, 136, 138, 139, 140, 143, 150, 152, 161, 168, 172, 173, 175, 176, 178, 179, 180, 181, 182, 183, 186, 189, 194, 196, 204, 210, 211, 213, 222, 223, 224, 227, 228, 235, 253, 258, 259, 262, 263, 265, 278, 284], "a_contig": [3, 4], "contigu": [3, 4, 11, 33, 161, 238, 275], "b_contig": [3, 4], "a_ptr": [3, 4], "data_ptr": [3, 4, 11, 265], "b_ptr": [3, 4], "result_ptr": [3, 11], "int64_t": [3, 6, 7, 11, 210, 275], "numel": [3, 4, 11, 178, 237, 271], "order": [3, 4, 6, 8, 9, 13, 14, 17, 18, 20, 32, 33, 34, 45, 46, 51, 52, 57, 64, 65, 67, 69, 70, 71, 74, 75, 77, 84, 90, 92, 93, 95, 100, 110, 111, 112, 114, 115, 117, 118, 130, 135, 136, 138, 141, 142, 144, 147, 150, 152, 157, 158, 159, 161, 173, 174, 179, 182, 184, 189, 191, 193, 194, 196, 197, 210, 227, 237, 247, 248, 256, 260, 273, 276, 280, 283], "frontend": [3, 4, 12, 86, 88, 130, 134, 135, 212, 246, 259, 265, 276, 284], "torch_librari": [3, 4, 6, 7, 8, 9, 11, 18, 212], "step": [3, 6, 7, 11, 12, 13, 14, 16, 17, 19, 20, 22, 32, 36, 37, 44, 45, 48, 51, 54, 62, 69, 77, 84, 87, 92, 95, 101, 102, 103, 104, 110, 112, 115, 118, 131, 135, 136, 137, 138, 143, 144, 145, 146, 148, 150, 152, 153, 158, 160, 164, 168, 170, 177, 178, 179, 180, 181, 182, 183, 187, 189, 191, 193, 194, 199, 202, 203, 204, 205, 210, 212, 213, 219, 222, 235, 236, 238, 246, 252, 257, 259, 262, 263, 264, 266, 275, 276, 278, 280], "ensur": [3, 4, 8, 11, 12, 13, 14, 16, 17, 38, 51, 55, 58, 65, 102, 110, 111, 117, 118, 119, 136, 140, 149, 150, 152, 156, 170, 172, 176, 177, 179, 181, 189, 190, 191, 194, 204, 223, 225, 235, 241, 250, 256, 263, 265, 275, 279], "awar": [3, 77, 92, 100, 140, 142, 152, 153, 181, 193, 250, 271], "top": [3, 6, 8, 11, 20, 36, 52, 54, 84, 85, 93, 96, 99, 102, 110, 140, 152, 175, 180, 181, 186, 187, 191, 196, 211, 219, 221, 278, 280], "project": [3, 6, 54, 92, 99, 119, 140, 173, 177, 182, 187, 212, 213, 219, 257, 276], "schema": [3, 7, 12], "mutat": [3, 7, 11, 12, 18, 118, 154, 169, 170, 193, 203, 210, 283], "m": [3, 4, 6, 7, 8, 11, 12, 16, 17, 32, 44, 51, 92, 97, 106, 110, 136, 137, 154, 158, 159, 173, 175, 178, 180, 205, 211, 219, 238, 256, 263, 275, 280], "torch_library_impl": [3, 4, 7, 11, 12, 17], "impl": [3, 4, 7, 11, 12, 17, 237], "myaddmul": [3, 4], "__global__": 3, "void": [3, 4, 6, 7, 8, 17, 158, 173, 210, 223, 228, 237, 265, 275], "muladd_kernel": [3, 4], "int": [3, 4, 6, 13, 22, 25, 53, 55, 57, 136, 137, 139, 150, 152, 158, 172, 173, 178, 179, 180, 186, 191, 193, 196, 207, 212, 256, 260, 262, 275], "idx": [3, 4, 34, 175, 187, 280], "blockidx": 3, "blockdim": 3, "threadidx": 3, "mymuladd_cuda": 3, "255": [3, 6, 14, 95, 102, 189, 228], "256": [3, 4, 6, 20, 53, 90, 140, 141, 160, 182, 193, 200, 210, 211, 228, 280], "faketensor": [3, 18, 193, 263], "kernel": [3, 4, 6, 9, 11, 15, 18, 20, 22, 85, 95, 97, 100, 110, 115, 129, 130, 135, 138, 143, 154, 158, 161, 168, 169, 170, 181, 182, 183, 186, 190, 191, 193, 194, 197, 200, 219, 223, 225, 227, 228, 238, 245, 248, 253, 258, 259, 264, 265, 266, 275, 278, 280, 282], "meta": [3, 18, 22, 138, 140, 142, 154, 169, 176, 193, 229, 235, 258], "abstract": [3, 6, 13, 16, 34, 53, 62, 90, 100, 101, 105, 110, 118, 140, 142, 152, 170, 173, 176, 194, 206, 207], "metadata": [3, 8, 12, 18, 20, 145, 176, 187, 193, 227, 242, 263, 280], "correct": [3, 4, 6, 11, 12, 13, 14, 15, 18, 37, 44, 45, 48, 51, 65, 77, 87, 90, 92, 93, 95, 97, 100, 101, 103, 104, 110, 118, 136, 137, 141, 146, 153, 158, 161, 168, 176, 178, 179, 182, 184, 186, 187, 194, 207, 222, 235, 253, 260, 263, 276], "stride": [3, 6, 18, 54, 93, 95, 97, 136, 146, 158, 161, 189, 193, 227, 263, 274], "register_fak": [3, 7, 18], "though": [3, 6, 12, 48, 77, 92, 100, 102, 103, 125, 146, 147, 154, 157, 169, 176, 187, 193, 194, 212, 223, 237, 242, 264, 271], "definit": [3, 6, 8, 11, 12, 39, 48, 70, 77, 87, 104, 118, 128, 130, 135, 157, 168, 177, 181, 237, 238, 272], "load": [3, 7, 8, 20, 22, 25, 32, 33, 35, 36, 37, 41, 42, 44, 48, 53, 54, 57, 77, 90, 95, 100, 101, 103, 110, 112, 120, 135, 136, 138, 143, 158, 161, 167, 170, 172, 176, 186, 187, 189, 193, 196, 204, 210, 212, 213, 222, 226, 234, 235, 237, 242, 243, 252, 253, 258, 259, 262, 264, 265, 279, 280, 281], "call": [3, 6, 8, 9, 11, 12, 13, 15, 16, 17, 19, 20, 25, 32, 33, 34, 37, 39, 41, 42, 44, 45, 46, 48, 51, 53, 54, 55, 57, 69, 77, 87, 92, 93, 95, 97, 99, 100, 102, 104, 106, 109, 110, 115, 117, 118, 119, 128, 129, 131, 134, 135, 136, 138, 139, 140, 141, 142, 144, 145, 150, 152, 153, 156, 157, 158, 160, 161, 164, 167, 168, 169, 170, 172, 173, 174, 176, 178, 179, 180, 181, 182, 184, 186, 189, 193, 194, 200, 203, 204, 205, 206, 210, 211, 222, 223, 224, 225, 227, 228, 236, 237, 238, 241, 248, 249, 250, 251, 253, 256, 262, 265, 279, 280, 283], "strive": 3, "load_librari": [3, 7, 8], "next": [3, 6, 8, 11, 13, 14, 16, 17, 19, 20, 34, 44, 51, 53, 55, 57, 58, 84, 87, 92, 95, 97, 100, 102, 103, 107, 110, 112, 119, 128, 136, 137, 138, 140, 141, 143, 144, 145, 146, 147, 149, 153, 154, 157, 158, 160, 164, 167, 169, 170, 177, 178, 179, 180, 182, 186, 187, 193, 194, 198, 211, 212, 213, 219, 227, 228, 242, 243, 248, 260, 264, 266, 273, 274, 280], "_c": [3, 4, 106, 139, 210, 262], "_": [3, 13, 14, 16, 17, 41, 50, 51, 54, 95, 100, 103, 110, 128, 138, 139, 143, 152, 154, 164, 176, 178, 180, 187, 202, 210, 211, 222, 227, 253, 257, 260, 278], "_check": 3, "empty_lik": [3, 4, 100, 161, 271], "formula": [3, 12, 18, 102, 156, 176], "matter": [3, 189, 202, 222, 271, 273], "wrong": [3, 54, 77, 104, 143, 158, 191], "hold": [3, 16, 19, 22, 48, 64, 65, 67, 69, 70, 71, 90, 110, 118, 136, 137, 138, 143, 149, 167, 177, 178, 180, 227, 235, 238], "happen": [3, 11, 32, 33, 34, 37, 44, 54, 92, 95, 97, 100, 102, 104, 110, 112, 137, 138, 140, 147, 150, 152, 170, 174, 178, 186, 187, 193, 194, 206, 223, 227, 238, 241, 251, 253, 264], "modul": [3, 7, 8, 14, 15, 16, 19, 22, 25, 33, 38, 39, 42, 45, 46, 48, 51, 55, 57, 62, 68, 70, 72, 92, 93, 95, 100, 101, 104, 109, 114, 119, 120, 125, 128, 129, 135, 136, 137, 138, 140, 141, 145, 146, 150, 152, 154, 157, 158, 161, 164, 167, 169, 172, 173, 175, 176, 178, 179, 180, 181, 184, 187, 189, 190, 191, 193, 197, 198, 204, 205, 206, 207, 211, 212, 219, 223, 225, 226, 228, 234, 238, 240, 242, 243, 256, 258, 259, 262, 264, 265, 275, 278, 279, 280], "initi": [3, 6, 8, 11, 13, 16, 19, 22, 33, 34, 37, 44, 51, 57, 65, 74, 75, 77, 93, 95, 100, 101, 102, 104, 107, 109, 110, 117, 118, 119, 125, 136, 137, 140, 143, 144, 153, 154, 158, 161, 167, 170, 172, 174, 175, 177, 178, 179, 180, 182, 186, 190, 191, 194, 197, 198, 204, 205, 207, 211, 219, 221, 223, 227, 235, 238, 242, 243, 260, 262, 274], "pybind11_modul": [3, 173], "notic": [3, 8, 11, 16, 32, 44, 45, 54, 77, 87, 92, 95, 100, 102, 104, 119, 128, 147, 152, 158, 160, 168, 169, 176, 186, 191, 193, 197, 198, 241, 253, 271, 273], "pybind11": [3, 8, 11, 173, 223], "promis": [3, 110, 275], "With": [3, 11, 12, 17, 19, 20, 22, 41, 50, 54, 77, 87, 92, 93, 99, 106, 138, 140, 147, 150, 152, 158, 164, 167, 172, 178, 179, 180, 181, 182, 183, 198, 200, 203, 204, 207, 219, 221, 227, 235, 238, 252, 256, 257, 259, 260, 264, 265, 280], "sadli": 3, "foreshadow": 3, "wonder": [3, 104, 128, 167, 170, 194, 197], "sai": [3, 6, 18, 25, 44, 53, 100, 104, 106, 109, 138, 141, 154, 159, 167, 174, 186, 264], "not_agnost": 3, "csrc": [3, 8, 173, 210], "extension_bad": 3, "__init__": [3, 4, 6, 7, 8, 13, 16, 33, 38, 53, 55, 69, 95, 97, 104, 118, 119, 136, 143, 145, 150, 152, 154, 168, 172, 174, 178, 179, 180, 187, 189, 204, 205, 207, 211, 219, 225, 227, 253, 275, 279], "replac": [3, 6, 25, 44, 57, 59, 93, 104, 110, 111, 115, 117, 125, 135, 136, 138, 152, 156, 174, 180, 182, 183, 186, 190, 193, 196, 212, 213, 223, 253, 259, 260, 264, 273, 276, 282], "successfulli": [3, 6, 8, 52, 112, 139, 142, 152, 158, 172, 179, 193, 194, 210, 211, 225, 239, 240, 241, 273], "extern": [3, 53, 102, 119, 142, 157, 158, 210, 238, 265, 275], "pyobject": 3, "pyinit__c": 3, "struct": [3, 6, 7, 8, 17], "pymoduledef": 3, "module_def": 3, "pymoduledef_head_init": 3, "null": [3, 6, 219, 262], "interpret": [3, 6, 58, 84, 87, 93, 109, 129, 135, 144, 145, 182, 191, 193, 223, 226, 234, 237, 253, 256, 258, 259, 265], "global": [3, 6, 51, 58, 90, 140, 154, 167, 172, 179, 184, 193, 202, 206, 210, 224, 235, 237, 238, 279, 280], "variabl": [3, 6, 8, 11, 32, 51, 84, 90, 92, 100, 103, 104, 106, 110, 122, 145, 149, 152, 158, 172, 178, 181, 193, 194, 197, 200, 211, 219, 247, 254, 256, 262, 264, 266, 273, 275, 276, 279, 283], "pymodule_cr": 3, "entir": [3, 6, 16, 19, 22, 48, 51, 55, 102, 104, 107, 110, 125, 135, 136, 137, 143, 145, 146, 167, 169, 172, 174, 176, 180, 182, 190, 193, 194, 205, 222, 227, 229, 238, 243, 253, 271, 272, 273], "statement": [3, 11, 32, 44, 46, 111, 182, 193, 222, 224, 279], "trigger": [3, 138, 150, 158, 170, 178, 180, 190, 238], "challeng": [3, 16, 106, 107, 111, 129, 136, 139, 140, 152, 168, 177, 189, 190, 205, 206, 207, 223, 258], "shift": [3, 176, 198], "toward": [3, 51, 102, 144, 177], "trivial": [3, 16, 53, 58, 100, 141, 194, 206], "pathlib": [3, 4, 110, 137, 189], "so_fil": [3, 4], "__file__": [3, 4, 173, 223], "glob": [3, 4], "assert": [3, 4, 7, 13, 22, 138, 145, 150, 154, 158, 168, 179, 181, 187, 193, 202, 210, 248, 260, 262, 263, 280], "len": [3, 4, 7, 53, 57, 110, 125, 136, 137, 138, 152, 178, 179, 187, 189, 207, 280], "f": [3, 4, 8, 11, 13, 14, 18, 22, 32, 44, 48, 55, 57, 69, 92, 95, 104, 110, 118, 119, 128, 136, 137, 139, 140, 141, 150, 152, 154, 158, 159, 168, 172, 173, 175, 178, 179, 180, 187, 189, 202, 204, 205, 207, 210, 211, 219, 223, 257, 260, 262, 263, 265, 280, 283], "register_autograd": [3, 18, 250], "prefer": [3, 6, 11, 18, 55, 159, 164, 173, 176, 191, 194, 198, 199, 222, 250, 262, 275], "directli": [3, 6, 8, 11, 13, 14, 16, 18, 33, 41, 50, 54, 87, 90, 92, 93, 95, 100, 111, 112, 114, 115, 138, 139, 140, 145, 147, 148, 159, 170, 175, 176, 180, 182, 194, 198, 205, 256, 262, 264, 273, 274], "veri": [3, 4, 6, 8, 11, 16, 17, 22, 25, 41, 46, 48, 50, 51, 67, 77, 87, 93, 97, 104, 106, 110, 118, 125, 136, 140, 141, 143, 167, 168, 177, 178, 180, 181, 182, 184, 186, 187, 194, 196, 198, 219, 228, 237, 251, 271, 273], "_backward": 3, "saved_tensor": [3, 147], "grad_a": 3, "grad_b": 3, "none": [3, 7, 13, 16, 17, 22, 25, 51, 90, 92, 102, 106, 110, 128, 136, 137, 138, 152, 154, 158, 161, 169, 172, 179, 189, 193, 200, 204, 205, 207, 210, 236, 248, 278, 280], "needs_input_grad": 3, "_setup_context": 3, "saved_a": 3, "saved_b": 3, "setup_context": 3, "composit": [3, 6, 9, 13, 18, 104, 105, 159, 172, 176, 207, 250], "had": [3, 6, 48, 53, 92, 95, 100, 107, 110, 112, 118, 128, 167, 168, 177, 187, 212, 219, 235], "own": [3, 6, 11, 12, 13, 16, 19, 20, 22, 33, 34, 51, 54, 65, 77, 90, 92, 93, 95, 110, 115, 117, 118, 130, 135, 136, 137, 138, 144, 145, 146, 150, 158, 167, 168, 174, 175, 176, 179, 180, 182, 189, 191, 193, 194, 196, 197, 204, 206, 223, 235, 262, 264, 280], "mymul": 3, "mymul_cpu": 3, "correctli": [3, 4, 14, 18, 51, 54, 77, 92, 93, 95, 122, 135, 138, 156, 161, 167, 170, 172, 174, 175, 189, 191, 194, 197, 207, 241, 273], "mathemat": [3, 12, 15, 18, 44, 50, 65, 92, 95, 97, 106, 152, 176, 193], "plan": [3, 6, 9, 12, 22, 119, 137, 140, 189, 194, 274], "gradcheck": [3, 18, 146, 147, 156, 238], "sample_input": [3, 4, 119], "make_tensor": [3, 4], "make_nondiff_tensor": [3, 4], "20": [3, 4, 6, 84, 87, 90, 95, 100, 117, 136, 142, 143, 150, 152, 153, 161, 167, 174, 178, 180, 186, 210, 223, 228, 237, 253, 257, 280], "14": [3, 4, 8, 25, 95, 136, 158, 189, 197, 211, 223, 228, 256], "123": [3, 4, 53, 180, 211], "reference_muladd": [3, 4], "extend": [3, 6, 7, 11, 25, 54, 90, 111, 112, 113, 114, 129, 130, 134, 135, 136, 144, 153, 175, 179, 180, 189, 190, 194, 212, 213, 238, 243, 247, 249, 262, 265, 284], "arg": [3, 4, 22, 55, 57, 106, 119, 136, 137, 150, 152, 157, 177, 178, 179, 180, 189, 191, 193, 202, 204, 205, 210, 212, 253, 257, 265], "assert_clos": [3, 4], "check": [3, 4, 6, 8, 11, 15, 16, 17, 36, 37, 38, 41, 44, 45, 46, 51, 52, 54, 57, 60, 61, 77, 83, 87, 92, 95, 97, 100, 101, 102, 103, 106, 110, 112, 117, 128, 135, 136, 137, 138, 139, 142, 143, 150, 152, 153, 156, 158, 161, 168, 169, 170, 174, 175, 176, 179, 189, 190, 191, 193, 194, 196, 197, 201, 205, 211, 212, 215, 216, 217, 218, 219, 220, 222, 228, 242, 246, 248, 252, 253, 266, 268, 269, 274, 275, 276, 277, 278, 279], "undefin": [3, 7, 152, 197, 271, 272, 273], "myadd_out": 3, "myadd_out_cpu": 3, "is_contigu": [3, 161, 237], "caus": [3, 8, 14, 17, 77, 84, 92, 100, 110, 141, 158, 170, 175, 178, 182, 186, 189, 193, 194, 219, 224, 238, 251, 256, 262, 271, 279], "incompat": [3, 139, 193, 242, 253], "went": [3, 54, 97, 100, 145, 158], "fairli": [3, 102, 110, 152, 167, 177, 197], "serv": [4, 6, 9, 59, 62, 87, 95, 102, 107, 118, 135, 150, 157, 160, 173, 179, 180, 194, 206, 210, 222, 223, 237, 247, 263, 273], "languag": [4, 6, 9, 25, 45, 51, 97, 103, 105, 107, 135, 140, 142, 143, 144, 165, 180, 182, 200, 210, 211, 238, 242, 243, 248, 250, 253, 260, 265], "intel": [4, 9, 135, 152, 158, 161, 258, 278, 279], "label": [4, 6, 34, 37, 38, 42, 44, 45, 53, 54, 77, 90, 92, 93, 95, 99, 100, 101, 104, 109, 117, 125, 128, 137, 140, 143, 150, 170, 175, 178, 182, 187, 194, 196, 219, 223, 225, 228, 253, 257, 258, 280], "xpu": [4, 33, 38, 41, 64, 77, 100, 118, 125, 150, 152, 196, 212, 228], "compil": [4, 6, 8, 9, 11, 12, 18, 20, 87, 103, 130, 134, 135, 152, 157, 183, 193, 200, 212, 213, 223, 226, 228, 237, 238, 245, 246, 253, 258, 259, 264, 265, 276, 284], "bundl": [4, 248], "essenti": [4, 6, 12, 16, 18, 32, 51, 103, 104, 106, 145, 152, 165, 170, 177, 193, 199, 256, 278], "activ": [4, 6, 12, 14, 16, 17, 20, 33, 54, 60, 61, 84, 92, 93, 95, 102, 104, 110, 128, 129, 137, 140, 145, 148, 152, 159, 167, 174, 175, 186, 197, 198, 200, 201, 211, 212, 215, 216, 217, 218, 219, 220, 221, 228, 238, 260, 265, 266, 268, 269, 277, 278, 280], "prior": [4, 13, 17, 52, 54, 92, 97, 102, 150, 160, 174, 187, 197, 205], "execut": [4, 6, 11, 13, 17, 19, 21, 32, 33, 39, 40, 44, 46, 49, 52, 66, 72, 76, 84, 88, 92, 95, 98, 100, 103, 108, 111, 115, 116, 120, 131, 135, 138, 139, 141, 142, 145, 152, 153, 157, 158, 161, 170, 173, 176, 177, 179, 180, 181, 183, 191, 193, 197, 200, 211, 212, 219, 222, 234, 237, 245, 248, 252, 253, 256, 259, 260, 262, 265, 275, 281], "best": [4, 6, 11, 39, 44, 54, 62, 77, 90, 112, 115, 117, 119, 125, 130, 133, 135, 148, 152, 154, 158, 169, 170, 175, 178, 180, 184, 193, 197, 211, 212, 213, 228, 237, 238, 241, 248, 250, 256, 258, 264, 275, 280], "c": [4, 14, 17, 18, 22, 44, 64, 65, 69, 87, 92, 93, 99, 100, 102, 109, 118, 130, 134, 135, 137, 144, 145, 147, 152, 158, 161, 170, 175, 180, 181, 189, 191, 193, 194, 210, 219, 222, 223, 235, 236, 252, 262, 266, 275], "sycl_exampl": 4, "sycl_extens": 4, "test_sycl_extens": 4, "syclextens": 4, "except": [4, 11, 13, 20, 41, 44, 50, 51, 54, 93, 95, 97, 100, 104, 107, 111, 125, 128, 138, 139, 143, 154, 156, 159, 161, 169, 173, 182, 193, 212, 247, 253, 263, 276, 280, 283, 284], "o": [4, 6, 8, 13, 22, 51, 52, 55, 57, 102, 136, 137, 139, 150, 152, 164, 167, 170, 172, 173, 175, 178, 179, 180, 189, 204, 205, 207, 210, 223, 227, 257, 260, 262, 263, 279, 280], "find_packag": [4, 6, 8, 212], "library_nam": 4, "o3": [4, 223], "fdiagnost": 4, "color": [4, 45, 54, 93, 95, 97, 99, 100, 142, 160, 161, 175, 187, 189, 196], "is_avail": [4, 6, 14, 90, 100, 172, 173, 177, 179, 253, 260, 279], "this_dir": 4, "dirnam": [4, 158, 173, 219], "curdir": 4, "extensions_dir": 4, "join": [4, 12, 22, 41, 50, 51, 52, 55, 95, 131, 136, 143, 150, 152, 178, 179, 180, 204, 205, 223, 257, 262], "construct": [4, 6, 16, 32, 48, 54, 67, 69, 87, 102, 118, 125, 130, 135, 138, 144, 147, 153, 154, 159, 165, 169, 176, 177, 179, 182, 194, 196, 197, 211, 222, 225, 240, 257, 276, 283], "install_requir": 4, "descript": [4, 6, 52, 136, 137, 158, 176, 178, 179, 180, 181, 189, 193, 198, 223, 238, 253, 254, 278], "c10": [4, 7, 8, 11, 12, 17, 173, 211, 212, 223, 237, 265, 275], "xpustream": 4, "hpp": [4, 173], "nd_item": 4, "get_global_id": 4, "muladdkernelfunctor": 4, "_numel": 4, "_a": 4, "_b": 4, "_result": 4, "privat": [4, 7, 16, 17, 139, 173, 174, 271], "mymuladd_xpu": 4, "is_xpu": 4, "res_ptr": 4, "queue": [4, 7, 219, 238], "getcurrentxpustream": 4, "constexpr": [4, 210, 275], "thread": [4, 6, 7, 8, 11, 54, 117, 138, 139, 150, 154, 170, 175, 178, 179, 180, 219, 223, 228, 237, 238, 256], "submit": [4, 12, 212], "handler": [4, 11, 189, 235], "cgh": 4, "parallel_for": 4, "nd_rang": 4, "static_cast": [4, 158, 210, 275], "__all__": 4, "ctype": [4, 210], "current_dir": 4, "build_dir": 4, "_op": [4, 115], "dl_open_guard": 4, "loaded_lib": 4, "cdll": 4, "_intern": 4, "common_util": 4, "testcas": 4, "unittest": 4, "testmymuladd": 4, "self": [4, 6, 7, 8, 11, 12, 13, 16, 17, 25, 34, 51, 55, 57, 69, 95, 104, 110, 117, 118, 119, 135, 136, 140, 145, 150, 152, 154, 158, 160, 168, 172, 178, 179, 180, 186, 187, 189, 193, 197, 204, 205, 207, 211, 219, 228, 235, 243, 253, 275], "_test_correct": 4, "skipif": 4, "test_correctness_xpu": 4, "__name__": [4, 13, 53, 55, 57, 136, 137, 139, 150, 152, 172, 178, 179, 180, 204, 205, 210, 219, 257, 260], "__main__": [4, 13, 53, 55, 57, 136, 137, 150, 152, 172, 178, 179, 180, 204, 205, 210, 219, 223, 257, 260], "against": [4, 8, 18, 37, 38, 45, 97, 99, 112, 139, 152, 161, 176, 197, 212, 223], "showcas": [4, 16, 67, 137, 138, 164, 167, 194, 265, 284], "support": [4, 6, 8, 13, 16, 17, 19, 20, 22, 25, 32, 38, 48, 53, 58, 60, 61, 77, 85, 87, 92, 93, 94, 95, 96, 97, 100, 101, 102, 111, 112, 113, 114, 117, 129, 134, 135, 136, 137, 138, 139, 142, 147, 149, 150, 152, 153, 156, 158, 161, 168, 170, 172, 173, 174, 175, 176, 178, 179, 180, 186, 189, 191, 193, 196, 200, 201, 202, 203, 205, 210, 211, 212, 213, 215, 216, 217, 218, 220, 221, 223, 228, 238, 247, 249, 252, 253, 254, 256, 258, 262, 263, 266, 268, 269, 271, 272, 273, 275, 276, 277, 278, 279, 280], "enabl": [4, 6, 11, 13, 16, 17, 19, 22, 25, 34, 48, 57, 58, 84, 92, 100, 102, 114, 119, 136, 137, 139, 140, 142, 145, 146, 147, 150, 152, 158, 161, 170, 172, 174, 175, 176, 186, 187, 189, 190, 193, 194, 198, 200, 204, 205, 206, 211, 212, 219, 222, 228, 235, 243, 247, 248, 249, 251, 252, 256, 257, 263, 264, 271, 273, 275, 276, 279, 284], "torchscript": [5, 7, 8, 23, 24, 112, 129, 208, 212, 228, 255], "export": [5, 9, 11, 23, 24, 48, 87, 92, 113, 114, 129, 135, 149, 150, 158, 181, 183, 191, 200, 208, 211, 213, 222, 238, 242, 245, 255, 258, 259, 275, 279], "peter": 6, "goldsborough": 6, "ubuntu": [6, 186, 256], "linux": [6, 8, 22, 112, 140, 150, 152, 175, 186, 196, 212, 238, 256], "cmake": [6, 212], "maco": [6, 112, 152, 189, 238], "window": [6, 45, 53, 95, 97, 109, 112, 150, 179, 186, 196, 219, 238, 284], "machin": [6, 22, 36, 38, 42, 45, 51, 52, 53, 55, 56, 57, 58, 62, 77, 90, 92, 93, 96, 112, 114, 135, 136, 137, 142, 148, 149, 150, 152, 157, 169, 170, 175, 179, 180, 181, 182, 194, 196, 202, 210, 211, 219, 236, 238, 247, 248, 253, 256, 262], "framework": [6, 12, 25, 36, 54, 92, 104, 105, 118, 131, 133, 135, 170, 172, 178, 181, 189, 197, 200, 253, 262, 278], "primari": [6, 17, 170, 190, 206, 237, 238, 256, 265, 275, 276], "sit": [6, 111, 112, 114, 115, 168], "atop": 6, "substanti": [6, 142, 170], "codebas": [6, 12, 16], "foundat": [6, 143, 176, 189, 194, 199], "17": [6, 95, 117, 158, 193, 210, 211, 212, 223], "underli": [6, 11, 16, 41, 50, 62, 77, 100, 102, 119, 142, 154, 158, 169, 179, 193, 207, 238, 262, 273, 274, 276], "tool": [6, 11, 16, 53, 84, 90, 92, 93, 97, 101, 103, 118, 133, 136, 150, 152, 153, 158, 170, 178, 181, 186, 187, 189, 197, 206, 219, 227, 250, 256, 262], "popular": [6, 70, 77, 102, 118, 129, 142, 152, 153, 194, 197, 212, 213, 253, 258, 264, 275], "optim": [6, 11, 12, 13, 14, 16, 17, 19, 20, 22, 25, 32, 33, 34, 35, 36, 39, 41, 42, 44, 48, 51, 55, 57, 62, 67, 68, 69, 72, 84, 87, 90, 92, 95, 99, 102, 103, 111, 115, 119, 125, 128, 129, 130, 132, 133, 135, 136, 137, 140, 145, 146, 148, 150, 152, 153, 154, 158, 160, 161, 168, 169, 170, 174, 175, 176, 177, 178, 179, 182, 183, 186, 187, 189, 190, 191, 193, 196, 197, 198, 200, 204, 205, 210, 212, 213, 222, 223, 227, 235, 236, 239, 242, 243, 245, 246, 247, 250, 252, 253, 258, 259, 264, 266, 271, 276, 278, 280, 284], "stochast": [6, 37, 48, 54, 67, 92, 95, 101, 110, 118, 152, 176, 177], "descent": [6, 37, 44, 48, 67, 92, 95, 101, 110, 118, 128, 152, 194, 241, 264], "parallel": [6, 13, 19, 22, 45, 47, 49, 51, 53, 57, 77, 90, 95, 119, 135, 142, 148, 152, 164, 176, 179, 180, 194, 204, 205, 206, 210, 222, 228, 256, 257, 259, 262, 275, 284], "loader": [6, 25, 38, 45, 101, 110, 176, 179, 196, 223], "serial": [6, 12, 38, 39, 110, 119, 193, 219, 223, 242, 252, 263], "routin": [6, 194], "walk": [6, 8, 12, 17, 19, 25, 44, 56, 92, 105, 110, 122, 130, 131, 135, 141, 158, 160, 179, 222, 236, 264, 265, 266, 278], "kind": [6, 37, 45, 48, 51, 77, 93, 101, 103, 107, 119, 130, 135, 213, 256], "mnist": [6, 34, 45, 48, 77, 95, 99, 101, 130, 135, 136, 142, 152, 154, 169, 179, 184, 187, 198, 225, 258], "digit": [6, 48, 95, 110, 130, 135, 136, 137, 189, 253], "conceptu": [6, 32, 44, 51, 118, 237], "enough": [6, 20, 51, 84, 95, 106, 110, 118, 141, 146, 175, 193, 204, 211, 222, 262, 280], "whirlwind": 6, "wet": 6, "appetit": 6, "begin": [6, 7, 8, 13, 14, 20, 32, 44, 51, 52, 54, 57, 77, 87, 92, 95, 107, 109, 137, 140, 165, 167, 177, 179, 186, 187, 194, 210, 222, 223, 225, 228, 239, 240, 241, 242, 243, 273, 280], "why": [6, 11, 13, 16, 18, 45, 54, 87, 93, 102, 104, 109, 119, 122, 147, 150, 158, 167, 182, 191, 193, 194, 223, 252, 253, 272, 274], "dive": [6, 13, 38, 129, 145, 150, 158, 237, 275], "straight": [6, 182], "watch": [6, 101, 148, 152], "lightn": [6, 142], "talk": [6, 11, 51, 54, 57, 95, 106, 170, 176, 179, 193, 194], "cppcon": 6, "2018": 6, "quick": [6, 20, 33, 50, 92, 102, 104, 107, 109, 137, 150, 154, 159, 168, 169, 194, 223, 226, 234, 258, 259, 264, 280], "humor": 6, "sweep": [6, 181], "philosophi": 6, "ecosystem": [6, 115, 145], "http": [6, 22, 25, 26, 27, 28, 29, 30, 35, 46, 47, 51, 64, 77, 78, 79, 80, 81, 82, 83, 86, 94, 99, 102, 105, 112, 113, 115, 118, 125, 131, 136, 143, 144, 146, 150, 155, 156, 157, 165, 167, 168, 175, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 199, 221, 222, 223, 226, 227, 230, 231, 232, 233, 236, 253, 264, 267, 270, 272, 274, 282], "org": [6, 26, 27, 28, 29, 30, 35, 46, 47, 51, 64, 77, 78, 79, 80, 81, 82, 83, 86, 94, 97, 99, 101, 102, 105, 113, 118, 125, 131, 143, 144, 150, 155, 156, 157, 165, 167, 168, 175, 182, 185, 186, 188, 191, 192, 193, 194, 199, 219, 222, 226, 227, 230, 231, 232, 233, 264, 267, 270, 272, 274, 282, 283, 284], "cppdoc": 6, "embark": 6, "excit": [6, 157, 167], "journei": [6, 54, 199], "back": [6, 8, 11, 12, 16, 17, 32, 45, 48, 53, 77, 90, 92, 100, 102, 106, 110, 112, 117, 138, 141, 161, 167, 170, 176, 178, 179, 180, 182, 189, 191, 193, 194, 197, 205, 235, 238, 250, 251, 271, 276], "discuss": [6, 11, 12, 17, 19, 45, 77, 92, 95, 97, 101, 106, 107, 128, 136, 137, 145, 152, 157, 158, 164, 170, 172, 191, 197, 227, 248, 250, 262, 271, 272, 273, 274], "team": [6, 115, 142, 177, 189, 197], "research": [6, 20, 51, 54, 77, 87, 93, 100, 104, 122, 152, 164, 169, 174, 189, 213, 253, 280], "right": [6, 11, 12, 14, 16, 32, 36, 41, 44, 50, 51, 54, 65, 84, 92, 97, 99, 102, 104, 106, 109, 118, 143, 152, 160, 164, 167, 176, 177, 178, 181, 182, 186, 189, 196, 197, 211, 219, 283], "job": [6, 46, 54, 55, 56, 62, 84, 102, 139, 142, 148, 149, 150, 152, 172, 284], "latenc": [6, 20, 133, 135, 140, 142, 149, 158, 170, 175, 191, 211, 242, 247, 248, 256, 280], "system": [6, 8, 11, 12, 14, 16, 17, 57, 102, 128, 135, 138, 142, 152, 168, 170, 175, 176, 178, 190, 191, 193, 194, 198, 200, 204, 225, 238, 247, 256, 262], "reinforc": [6, 16, 101, 132, 135, 160, 178, 179, 183, 259], "game": [6, 45, 54, 160, 253], "engin": [6, 16, 32, 44, 90, 92, 128, 136, 145, 170, 175, 180, 189, 193, 194, 196, 200, 212, 253, 262, 283], "much": [6, 11, 12, 14, 16, 20, 37, 54, 58, 92, 93, 102, 103, 104, 109, 110, 119, 137, 141, 142, 159, 160, 167, 170, 175, 176, 179, 180, 182, 186, 187, 190, 191, 193, 194, 219, 222, 223, 227, 236, 238, 239, 243, 256, 258, 262, 264, 271, 274, 280], "tractabl": [6, 103], "slow": [6, 11, 37, 136, 138, 170, 194, 197, 228, 238], "multithread": [6, 44, 58, 117, 170, 219, 223, 256], "due": [6, 8, 20, 22, 54, 84, 87, 100, 115, 136, 140, 145, 150, 167, 168, 179, 191, 197, 203, 206, 213, 253, 256, 262, 264, 273, 278, 280], "lock": [6, 7, 16, 58, 152, 170, 178, 179, 204], "gil": [6, 58, 150], "multiprocess": [6, 13, 16, 34, 38, 53, 55, 57, 58, 136, 137, 150, 152, 176, 179, 180, 204, 205, 256, 257, 262], "scalabl": [6, 135, 139, 142, 194, 200, 211, 212, 238, 256, 271], "signific": [6, 54, 84, 93, 137, 139, 143, 146, 158, 159, 161, 167, 170, 176, 181, 186, 191, 194, 205, 206, 207, 211, 213, 222, 223, 238, 250, 262], "shortcom": [6, 273], "constraint": [6, 14, 20, 22, 87, 104, 130, 135, 140, 142, 168, 176, 189, 194, 204, 222, 223, 235, 253, 260, 262, 280], "heavi": [6, 51, 102, 106], "neuroevolut": 6, "benefit": [6, 20, 22, 44, 87, 90, 137, 139, 156, 161, 167, 170, 181, 197, 211, 212, 222, 238, 242, 249, 256, 264, 280], "owner": [6, 178, 179, 180], "anyth": [6, 15, 18, 45, 74, 75, 95, 97, 100, 103, 106, 107, 109, 110, 118, 175, 197, 219, 235, 236, 253, 264], "web": [6, 112, 219], "page": [6, 8, 9, 12, 18, 52, 56, 62, 91, 110, 117, 118, 134, 135, 143, 145, 170, 180, 186, 193, 194, 200, 204, 209, 238, 251], "server": [6, 19, 131, 135, 139, 150, 173, 180, 205, 212, 219, 247, 253, 256], "3d": [6, 62, 97, 99, 106, 107, 172, 189, 238], "graphic": [6, 181], "photo": [6, 93], "edit": [6, 13, 14, 19, 50, 52, 62, 139, 140, 150, 152, 157, 158, 172, 173, 175, 178, 179, 180, 205, 207, 260, 264], "softwar": [6, 173, 186, 262], "remain": [6, 90, 92, 102, 128, 138, 139, 152, 167, 170, 174, 182, 238, 260, 262, 264, 273, 276], "spare": 6, "hassl": 6, "forth": [6, 110], "retain": [6, 41, 50, 100, 119, 128, 242], "intuit": [6, 54, 77, 95, 100, 104, 119, 158, 182, 189, 193, 219, 235, 272], "tradit": [6, 54, 102, 104, 159, 179, 193, 194, 197, 262, 275], "experi": [6, 12, 102, 103, 137, 139, 152, 160, 170, 173, 176, 177, 181, 182, 184, 189, 191, 193, 194, 197, 206, 222, 237, 239, 247, 253, 254, 256, 264, 271, 279, 283, 284], "compet": [6, 142, 170], "meant": [6, 9, 13, 87, 92, 97, 137, 194, 238, 262, 273], "complement": 6, "know": [6, 8, 11, 13, 22, 32, 44, 51, 74, 75, 77, 95, 97, 100, 104, 106, 109, 110, 118, 141, 143, 144, 147, 152, 153, 154, 158, 160, 161, 164, 169, 170, 172, 176, 177, 178, 182, 187, 193, 194, 196, 223, 249, 272], "alik": 6, "love": 6, "simplic": [6, 77, 137, 146, 170, 176, 177, 207, 223, 275], "core": [6, 11, 12, 13, 46, 103, 104, 105, 118, 119, 135, 140, 152, 153, 158, 161, 170, 175, 186, 193, 199, 219, 222, 237, 256, 262], "principl": [6, 11, 107, 109, 142, 242], "interest": [6, 12, 16, 20, 45, 51, 53, 90, 92, 93, 102, 104, 111, 112, 114, 115, 125, 137, 142, 159, 167, 168, 176, 184, 193, 194, 196, 197, 223, 237, 240, 241, 280, 283], "curiou": [6, 154, 167, 169, 203], "paragraph": 6, "tri": [6, 22, 54, 92, 103, 109, 177, 193, 222, 253], "close": [6, 16, 20, 54, 92, 97, 100, 102, 103, 137, 142, 167, 187, 236, 238, 280], "experienc": [6, 87], "ever": [6, 141, 150, 193, 227], "ask": [6, 8, 20, 93, 95, 97, 144, 153, 170, 176, 193, 194, 223, 279, 280], "rememb": [6, 45, 54, 77, 107, 110, 117, 119, 128, 159, 160, 167, 170, 182, 194, 197, 223], "dot": [6, 16, 32, 54, 107, 109, 128, 130, 135, 159, 182, 183, 223, 250, 259, 260, 283], "colon": [6, 189], "grab": [6, 9, 54, 99, 175, 180], "distribut": [6, 16, 17, 25, 54, 77, 90, 95, 100, 101, 102, 104, 109, 135, 136, 137, 138, 139, 140, 142, 148, 149, 161, 167, 173, 176, 178, 186, 197, 206, 207, 223, 256, 257, 258, 260, 262, 278, 284], "readi": [6, 8, 12, 19, 51, 93, 95, 101, 103, 104, 109, 110, 135, 137, 152, 164, 172, 173, 176, 178, 179, 180, 194, 196, 228, 253], "archiv": [6, 138, 161, 193, 252], "header": [6, 8, 11, 173, 223], "websit": [6, 93, 177, 219, 221], "rest": [6, 16, 45, 125, 138, 153, 157, 176, 178, 179, 194, 197, 235, 273], "free": [6, 8, 12, 37, 44, 51, 77, 87, 102, 111, 112, 114, 115, 119, 137, 138, 142, 152, 157, 160, 161, 167, 170, 176, 178, 182, 186, 193, 237], "too": [6, 12, 16, 45, 65, 70, 84, 90, 95, 97, 102, 103, 109, 110, 117, 118, 138, 140, 150, 167, 170, 174, 177, 178, 180, 182, 193, 237, 251, 271], "debug": [6, 11, 62, 103, 129, 130, 135, 141, 177, 183, 193, 198, 206, 223, 237, 247, 259, 265, 284], "abi": [6, 8, 212], "try": [6, 8, 14, 16, 17, 20, 37, 41, 45, 48, 50, 51, 54, 55, 62, 77, 92, 100, 101, 102, 103, 104, 105, 106, 110, 111, 112, 117, 128, 139, 142, 143, 144, 145, 153, 158, 160, 164, 167, 170, 172, 173, 174, 176, 177, 182, 186, 190, 191, 193, 197, 198, 211, 212, 222, 223, 235, 236, 253, 256, 260, 264, 272, 280], "local": [6, 8, 11, 19, 22, 36, 51, 52, 62, 92, 96, 103, 111, 119, 122, 128, 137, 138, 140, 142, 150, 152, 167, 174, 178, 179, 180, 182, 184, 194, 213, 222, 225, 238, 247, 248, 256, 257, 260, 262, 263], "retriev": [6, 16, 19, 32, 34, 51, 141, 142, 172, 176, 178, 179, 194, 219, 256], "vanilla": [6, 51, 67, 104, 118, 189, 197, 257, 271], "cu90": 6, "url": [6, 186, 191, 194, 236, 264], "wget": [6, 22, 196, 264], "nightli": [6, 22, 156, 191, 196, 253, 262, 264, 283, 284], "share": [6, 8, 12, 13, 22, 41, 50, 57, 68, 72, 90, 102, 106, 137, 141, 150, 152, 153, 160, 170, 176, 179, 180, 193, 205, 212, 223, 227, 237, 242, 247, 252, 256, 259, 262], "dep": 6, "latest": [6, 10, 12, 16, 90, 93, 118, 119, 129, 135, 137, 145, 152, 163, 171, 175, 176, 179, 182, 184, 189, 191, 213], "unzip": [6, 52, 189, 196, 252], "tini": [6, 136, 167, 253], "ident": [6, 20, 57, 87, 92, 100, 101, 110, 118, 140, 149, 164, 187, 190, 193, 198, 223, 274, 280], "iostream": [6, 7, 212], "ey": [6, 168, 170], "fledg": 6, "cmakelist": [6, 8, 212], "txt": [6, 8, 51, 143, 144, 158, 175, 182, 206, 212], "cmake_minimum_requir": [6, 8, 212], "fatal_error": [6, 8, 212], "add_execut": [6, 212], "target_link_librari": [6, 8, 212], "set_properti": [6, 212], "properti": [6, 13, 16, 32, 41, 50, 92, 95, 100, 106, 109, 128, 142, 168, 182, 193, 212, 222, 223, 235, 240, 272], "cxx_standard": [6, 212], "hard": [6, 11, 17, 34, 104, 142, 170, 174, 193, 223, 247], "visual": [6, 16, 44, 54, 77, 84, 85, 95, 101, 132, 135, 137, 141, 142, 147, 157, 168, 176, 183, 186, 189, 206, 228, 236, 258, 259, 265, 266, 273], "studio": [6, 266], "qmake": 6, "plain": [6, 51, 110, 138, 143, 144, 182, 196, 235, 237], "makefil": 6, "feel": [6, 12, 37, 44, 51, 102, 111, 112, 114, 115, 119, 137, 157, 158, 160, 161, 167, 186, 193], "comfort": 6, "box": [6, 11, 12, 13, 18, 20, 42, 77, 134, 135, 138, 142, 145, 147, 152, 175, 178, 186, 193, 196, 197, 200, 219, 221, 253, 280, 283], "cmake_prefix_path": [6, 8], "invok": [6, 8, 11, 102, 150, 152, 156, 157, 158, 170, 173, 179, 180, 200, 219, 235, 246, 250, 256, 265, 273], "agre": [6, 257], "someth": [6, 13, 16, 45, 90, 95, 100, 104, 106, 152, 158, 175, 182, 193, 197, 223, 237, 283], "break": [6, 7, 11, 12, 13, 18, 33, 34, 84, 92, 97, 111, 119, 138, 139, 145, 167, 178, 180, 191, 252, 260, 271], "unexpect": [6, 53, 238, 273], "pwd": [6, 219], "root": [6, 8, 16, 32, 34, 42, 44, 53, 54, 95, 103, 128, 138, 146, 153, 158, 179, 180, 212, 219, 236, 246, 262], "fa350df05ecf": 6, "home": [6, 41, 50, 209, 271], "mkdir": [6, 186, 189], "cd": [6, 8, 186, 196, 219], "dcmake_prefix_path": [6, 8, 212], "identif": [6, 8, 212], "gnu": [6, 8, 212, 238, 256], "usr": [6, 8, 22, 152, 212], "bin": [6, 8, 95, 152, 212, 219, 252, 265], "cc": [6, 8, 44, 210, 212], "detect": [6, 8, 13, 14, 22, 54, 97, 132, 135, 175, 183, 186, 191, 193, 212, 213, 225, 238, 251, 256, 259], "info": [6, 8, 84, 139, 149, 152, 160, 189, 193, 200, 212], "pthread": [6, 8], "pthread_creat": [6, 8], "lib": [6, 8, 12, 22, 158, 212, 237, 253, 256, 262], "config": [6, 12, 20, 25, 90, 136, 138, 142, 145, 175, 190, 210, 212, 213, 235, 243, 247, 250, 253, 263, 264, 265, 275, 280], "scan": [6, 8, 95, 97, 189, 193], "50": [6, 8, 20, 25, 54, 55, 95, 110, 153, 161, 174, 177, 180, 196, 210, 211, 238, 278, 280], "cmakefil": [6, 8], "dir": [6, 8, 84, 99, 142, 237, 247, 262], "100": [6, 8, 42, 50, 69, 95, 104, 118, 136, 139, 145, 150, 154, 158, 161, 175, 176, 177, 180, 187, 189, 207, 211, 223, 237, 248, 275, 280], "folder": [6, 52, 54, 84, 85, 93, 95, 137, 187, 196, 262], "insid": [6, 8, 12, 19, 22, 33, 37, 46, 138, 140, 186, 191, 196, 200, 275, 280, 283], "enter": [6, 51, 137, 150, 152], "ran": [6, 109, 139, 176, 179, 181, 223], "binari": [6, 51, 54, 100, 112, 152, 161, 191, 212, 242, 252, 272, 284], "me": [6, 20, 51, 167, 182, 280], "deriv": [6, 12, 18, 20, 32, 37, 41, 44, 50, 92, 100, 104, 106, 107, 109, 118, 141, 143, 147, 156, 159, 238, 280], "besid": [6, 95, 109, 168, 178, 221, 238], "encapsul": [6, 37, 48, 97, 101, 145, 167, 178], "buffer": [6, 16, 45, 48, 119, 137, 138, 146, 150, 154, 156, 160, 164, 167, 168, 169, 170, 174, 177, 193, 204, 227, 240, 241, 242, 260, 262, 263], "form": [6, 14, 17, 20, 42, 48, 51, 54, 62, 103, 110, 112, 141, 144, 158, 182, 189, 197, 204, 205, 219, 238, 248, 256, 264, 276, 280], "record": [6, 11, 32, 44, 51, 110, 119, 128, 129, 135, 136, 137, 145, 146, 147, 167, 176, 177, 179, 180, 193, 213, 228, 253, 284], "batch": [6, 19, 20, 34, 37, 38, 39, 46, 48, 51, 53, 54, 55, 57, 58, 77, 84, 90, 92, 93, 95, 99, 100, 101, 102, 107, 110, 119, 125, 129, 131, 134, 135, 136, 137, 138, 140, 141, 142, 143, 148, 152, 153, 154, 160, 161, 164, 167, 169, 170, 172, 175, 176, 177, 179, 180, 181, 183, 184, 186, 187, 189, 191, 194, 196, 197, 198, 222, 223, 259, 260, 264, 273, 276, 280, 283, 284], "normal": [6, 11, 13, 14, 37, 39, 42, 51, 53, 54, 87, 93, 95, 97, 101, 102, 104, 109, 118, 119, 125, 136, 146, 152, 153, 168, 170, 175, 178, 179, 181, 182, 187, 189, 191, 194, 197, 198, 212, 238, 246, 251, 264, 272], "logic": [6, 13, 20, 37, 42, 87, 103, 111, 129, 135, 136, 142, 149, 172, 174, 179, 180, 189, 190, 198, 205, 256, 280], "nest": [6, 16, 33, 44, 95, 100, 135, 138, 176, 178, 180, 181, 183, 190, 259, 281, 284], "term": [6, 17, 41, 54, 62, 77, 92, 93, 97, 101, 104, 105, 106, 108, 117, 137, 139, 140, 164, 174, 176, 193, 194, 197, 229, 256, 259, 264, 274], "explicitli": [6, 22, 37, 41, 44, 50, 54, 55, 90, 92, 106, 128, 138, 139, 140, 149, 153, 161, 180, 181, 184, 193, 219, 238, 274, 276, 279], "onc": [6, 8, 11, 12, 13, 16, 19, 20, 32, 34, 37, 53, 54, 58, 84, 93, 95, 99, 100, 101, 102, 103, 107, 112, 148, 153, 161, 167, 168, 174, 175, 176, 177, 179, 182, 186, 187, 193, 194, 206, 210, 212, 219, 222, 223, 238, 252, 253, 263, 264, 276, 280], "similarli": [6, 14, 53, 85, 93, 100, 138, 141, 142, 143, 158, 159, 167, 170, 172, 205, 263, 274], "kcuda": [6, 265], "net": [6, 25, 45, 46, 48, 51, 54, 77, 87, 90, 95, 99, 100, 102, 136, 152, 164, 175, 179, 186, 187, 225], "n": [6, 7, 14, 20, 32, 44, 62, 74, 75, 84, 87, 92, 97, 100, 102, 110, 118, 136, 137, 138, 150, 152, 159, 160, 164, 168, 172, 174, 178, 179, 180, 182, 187, 193, 194, 196, 212, 238, 262, 264, 275, 280, 283], "super": [6, 8, 13, 22, 69, 95, 118, 119, 136, 139, 145, 150, 154, 160, 168, 172, 178, 179, 180, 187, 189, 204, 205, 207, 211, 219, 253, 275], "w": [6, 32, 37, 44, 48, 77, 107, 109, 128, 137, 161, 180, 186, 193, 196, 264, 275], "addmm": [6, 117, 158, 200, 211, 228], "register_paramet": 6, "reflect": [6, 11, 41, 50, 95, 100, 176, 193], "less": [6, 9, 11, 18, 58, 84, 97, 102, 103, 110, 114, 125, 137, 142, 153, 156, 167, 170, 176, 177, 178, 186, 187, 191, 193, 194, 197, 207, 223, 227, 262, 264], "magic": [6, 104, 144, 152, 159], "assign": [6, 8, 42, 46, 48, 55, 69, 93, 97, 100, 102, 103, 104, 107, 109, 111, 118, 138, 152, 168, 176, 194, 207, 219, 235, 238, 256], "behind": [6, 11, 20, 46, 84, 102, 104, 110, 118, 146, 177, 272, 274, 280, 284], "scene": [6, 110, 118, 253], "another_bia": 6, "rand": [6, 17, 87, 95, 100, 147, 168, 202, 204, 205, 210, 211, 212, 219, 238, 246, 248, 260, 280], "recurs": [6, 19, 45, 138, 145, 191, 236], "0808": 6, "8613": 6, "2017": [6, 77], "5206": 6, "5353": 6, "3740": 6, "0976": 6, "4786": 6, "4928": 6, "1434": 6, "4713": 6, "1735": 6, "3293": 6, "3467": 6, "3858": [6, 95], "1980": 6, "1986": 6, "1975": 6, "4278": 6, "1831": 6, "2709": 6, "3730": 6, "4307": 6, "3236": 6, "0629": 6, "2038": 6, "4638": 6, "2023": [6, 189], "1230": 6, "0516": 6, "aptli": [6, 15], "register_modul": 6, "dropout": [6, 39, 51, 77, 97, 110, 119, 136, 140, 142, 144, 153, 178, 180, 182, 276, 280], "conv2d": [6, 14, 45, 48, 54, 95, 110, 119, 136, 146, 168, 175, 179, 187, 190, 193, 200, 212, 219, 228, 238, 278], "subtleti": [6, 128, 135, 274], "bodi": [6, 158], "upon": [6, 21, 51, 58, 125, 152, 156, 182, 187, 191, 197, 221, 238, 259, 262], "tree": [6, 8, 12, 17, 103, 109, 206, 284], "p": [6, 22, 51, 70, 97, 103, 109, 110, 118, 136, 137, 146, 152, 154, 161, 164, 167, 178, 179, 180, 190, 196, 200, 210, 280], "0345": 6, "4456": 6, "6313": 6, "3585": 6, "4008": 6, "1647": 6, "2891": 6, "0527": 6, "0354": 6, "3084": 6, "2025": [6, 252], "0343": 6, "1824": 6, "4630": 6, "2862": 6, "2500": 6, "0420": 6, "3679": 6, "1482": 6, "0460": 6, "1967": 6, "2132": 6, "1992": 6, "4257": 6, "0739": 6, "01": [6, 13, 42, 44, 48, 95, 98, 117, 152, 180, 183, 197, 202, 210, 211, 252, 257, 259, 266], "6861": 6, "1166": 6, "45": [6, 42, 95, 142, 158, 180, 210, 211], "0333": 6, "7": [6, 8, 20, 21, 22, 36, 42, 53, 87, 95, 106, 117, 125, 136, 137, 152, 160, 161, 175, 189, 190, 191, 194, 200, 202, 203, 207, 210, 211, 222, 249, 253, 260, 263, 264, 266, 275], "9983": 6, "0705": 6, "named_paramet": [6, 33, 168, 194], "ordereddict": [6, 196], "again": [6, 45, 52, 92, 93, 97, 99, 100, 102, 103, 110, 111, 141, 146, 152, 153, 167, 178, 180, 182, 186, 189, 191, 194, 223, 263, 264, 279], "11": [6, 13, 20, 22, 117, 136, 137, 156, 175, 180, 189, 191, 194, 206, 207, 210, 211, 223, 228], "13": [6, 42, 95, 117, 180, 189, 197, 210, 211, 219], "48": [6, 20, 158, 161, 187, 210, 211, 228, 259, 280], "1863": 6, "8611": 6, "1228": 6, "3269": 6, "9858": 6, "0339": 6, "2484": 6, "2035": 6, "2103": 6, "0715": 6, "2975": 6, "4350": 6, "1878": 6, "3616": 6, "1050": 6, "4982": 6, "0335": 6, "1605": 6, "4963": 6, "4099": 6, "2883": [6, 106], "1818": 6, "3447": 6, "1501": 6, "0215": 6, "0250": 6, "0408": 6, "3756": 6, "2149": 6, "3636": 6, "ourselv": [6, 37, 51, 146, 176], "8559": 6, "1572": 6, "1069": 6, "1247": [6, 95], "8060": 6, "At": [6, 11, 16, 17, 20, 44, 48, 51, 52, 87, 90, 107, 110, 118, 136, 137, 140, 153, 156, 160, 176, 177, 178, 181, 182, 186, 228, 235, 238, 252, 271, 274, 280], "point": [6, 11, 12, 13, 16, 20, 22, 44, 48, 51, 52, 53, 54, 55, 84, 87, 92, 95, 97, 100, 102, 103, 105, 106, 107, 109, 110, 118, 136, 138, 140, 141, 142, 147, 148, 150, 157, 160, 164, 170, 176, 178, 182, 187, 189, 193, 194, 213, 226, 234, 236, 238, 249, 253, 258, 259, 262, 264, 271, 273, 274, 279, 280], "topic": [6, 51, 62, 77, 93, 100, 111, 112, 114, 115, 122, 128, 129, 131, 134, 195, 230, 231, 232, 233, 244, 282], "devour": 6, "menu": [6, 52], "concept": [6, 8, 13, 36, 37, 57, 96, 105, 106, 110, 118, 122, 135, 142, 160, 170, 178, 181, 182, 194, 199, 228, 237, 256, 262, 265, 275], "pipelin": [6, 19, 62, 110, 135, 176, 189, 196, 262], "briefli": [6, 37, 62, 135, 140, 176, 191, 197, 200], "determin": [6, 7, 11, 13, 20, 41, 50, 93, 95, 100, 101, 102, 103, 106, 109, 112, 128, 139, 140, 142, 154, 167, 168, 169, 174, 191, 193, 194, 223, 228, 229, 238, 262, 276, 279, 280], "who": [6, 51, 77, 102, 105, 139, 152, 167, 193, 199, 205, 219, 223, 248, 252], "heap": 6, "forget": [6, 110, 119, 191], "live": [6, 12, 17, 100, 134, 135, 141, 170, 179, 180, 274], "referenc": [6, 180], "thing": [6, 8, 11, 17, 18, 32, 44, 45, 48, 51, 87, 90, 92, 95, 100, 101, 102, 103, 104, 106, 107, 109, 110, 134, 135, 138, 140, 141, 142, 147, 148, 149, 152, 153, 157, 158, 161, 168, 175, 176, 184, 193, 204, 223, 241, 264, 279], "lower": [6, 16, 20, 52, 77, 84, 97, 99, 135, 137, 138, 139, 142, 150, 156, 158, 167, 168, 176, 177, 181, 187, 189, 193, 194, 197, 237, 238, 253, 274, 280], "realm": 6, "increas": [6, 22, 25, 37, 38, 45, 77, 84, 85, 90, 93, 102, 110, 136, 137, 138, 140, 142, 143, 144, 148, 167, 170, 175, 186, 194, 198, 206, 211, 221, 222, 223, 237, 238, 241, 243, 256, 258, 264, 276], "heavili": [6, 170, 182, 264], "ergonom": 6, "shown": [6, 11, 20, 54, 92, 100, 110, 128, 138, 140, 142, 158, 160, 177, 178, 180, 181, 186, 189, 191, 194, 205, 211, 212, 219, 252, 253, 254, 256, 257, 262, 272, 273, 274, 279, 280], "thu": [6, 11, 12, 32, 39, 51, 87, 90, 102, 110, 128, 137, 154, 167, 170, 182, 219, 223, 228, 238, 256, 275], "far": [6, 8, 16, 48, 51, 65, 92, 95, 97, 100, 102, 103, 104, 118, 141, 152, 167, 174, 177, 182, 193, 194, 197, 223, 271], "stack": [6, 11, 16, 17, 41, 50, 95, 117, 135, 140, 154, 160, 164, 170, 173, 178, 182, 186, 187, 189, 194, 262], "shared_ptr": [6, 8], "reduc": [6, 13, 20, 34, 37, 44, 58, 95, 97, 102, 117, 129, 136, 137, 138, 140, 142, 143, 146, 148, 150, 152, 159, 160, 161, 167, 170, 174, 175, 178, 180, 186, 189, 191, 194, 198, 206, 222, 223, 226, 227, 245, 247, 248, 256, 257, 258, 259, 260, 265, 280], "cognit": 6, "overhead": [6, 12, 20, 58, 84, 117, 136, 137, 140, 145, 150, 159, 161, 170, 175, 178, 180, 181, 186, 191, 197, 204, 223, 228, 238, 249, 256, 262, 264, 265, 276, 280], "think": [6, 8, 45, 54, 70, 93, 95, 103, 104, 106, 107, 109, 118, 159, 176, 179, 181, 194, 197, 274, 283], "declar": [6, 15, 77], "everywher": [6, 100, 109], "make_shar": 6, "greatli": [6, 51, 92, 110, 177], "even": [6, 11, 12, 16, 19, 44, 45, 53, 77, 92, 95, 97, 100, 109, 110, 119, 128, 136, 137, 140, 145, 147, 150, 157, 159, 168, 170, 176, 178, 181, 189, 193, 194, 197, 211, 223, 238, 239, 242, 264, 271, 273, 274], "latter": [6, 142, 178], "nativ": [6, 11, 17, 18, 57, 90, 114, 115, 134, 135, 137, 140, 153, 172, 180, 197, 211, 212, 228, 237, 238, 260, 264, 271, 274], "stai": [6, 84, 139, 140, 145, 176, 177, 178], "shorten": 6, "therefor": [6, 7, 17, 51, 53, 102, 119, 131, 143, 150, 161, 164, 170, 173, 174, 179, 180, 193, 222, 256, 266, 273, 274], "But": [6, 11, 12, 45, 46, 54, 77, 93, 100, 106, 109, 141, 150, 161, 167, 168, 169, 177, 193, 196, 213, 223, 271, 274, 283], "wait": [6, 19, 84, 139, 144, 150, 152, 153, 170, 173, 178, 179, 180, 186, 189, 194, 204, 210, 227, 228, 238, 262], "don": [6, 7, 11, 12, 18, 44, 45, 54, 55, 57, 90, 95, 97, 100, 103, 104, 107, 110, 115, 119, 125, 128, 141, 147, 157, 159, 160, 167, 170, 176, 177, 180, 181, 190, 193, 194, 198, 203, 210, 219, 222, 250, 251, 271, 272, 273], "mymodul": 6, "hell": 6, "lot": [6, 11, 12, 17, 53, 92, 103, 110, 136, 138, 152, 164, 179, 182, 186, 191, 194, 222, 223, 237, 264, 271], "came": [6, 54, 272], "elabor": [6, 140, 158, 178], "scheme": [6, 22, 101, 102, 135, 194, 227, 235, 271, 278], "hide": [6, 146, 176, 283], "reserv": [6, 12, 17, 186, 263], "simplifi": [6, 12, 16, 25, 110, 143, 150, 172, 182, 189, 196, 207, 262, 271, 274, 278, 284], "linearimpl": 6, "torch_modul": 6, "brief": [6, 25, 84, 92, 103, 176, 194, 197], "macro": [6, 11, 17], "wrapper": [6, 11, 57, 110, 119, 136, 137, 147, 153, 160, 176, 189, 194, 198, 204, 205, 250, 263, 284], "typedef": 6, "among": [6, 8, 11, 55, 84, 90, 101, 140, 174, 186, 221, 256], "holder": 6, "arrow": [6, 44, 140], "resembl": [6, 14, 103, 148, 177], "becom": [6, 13, 25, 54, 77, 87, 93, 102, 140, 147, 159, 161, 170, 186, 187, 194, 202, 211, 222, 242, 256, 262, 265, 276], "extra": [6, 11, 58, 95, 100, 102, 106, 107, 110, 114, 138, 143, 144, 146, 153, 156, 168, 176, 182, 189, 191, 196, 212, 228, 237, 238], "netimpl": 6, "subtl": [6, 100, 222], "deserv": 6, "tricki": [6, 20, 147, 190, 193, 194, 280], "decid": [6, 11, 12, 20, 22, 54, 62, 90, 92, 177, 193, 194, 241, 274, 280, 284], "nullptr": [6, 265], "familiar": [6, 8, 11, 12, 36, 37, 41, 45, 50, 55, 56, 58, 87, 95, 96, 100, 101, 103, 105, 110, 119, 135, 137, 141, 148, 149, 152, 160, 172, 179, 193, 219, 223, 237, 242, 279], "pythonista": 6, "disadvantag": [6, 119], "mechan": [6, 13, 16, 17, 25, 32, 51, 58, 101, 128, 132, 135, 147, 157, 168, 182, 184, 186, 193, 198, 212, 219, 247, 248, 278, 284], "boilerpl": [6, 45, 104, 187, 271], "That": [6, 7, 20, 44, 45, 46, 51, 92, 93, 95, 100, 104, 106, 107, 109, 110, 112, 140, 143, 150, 156, 157, 159, 161, 164, 167, 176, 177, 181, 186, 193, 194, 196, 237, 271, 272, 274, 280], "said": [6, 160, 167, 176, 177, 271, 272], "introduct": [6, 13, 18, 20, 47, 49, 55, 56, 57, 58, 59, 86, 87, 92, 97, 104, 105, 108, 111, 112, 113, 115, 128, 135, 145, 148, 149, 158, 183, 197, 198, 199, 212, 223, 238, 250, 253, 258, 259, 273, 280], "awai": [6, 48, 97, 99, 103, 104, 106, 176, 177, 178, 194, 206, 274], "sooner": [6, 137], "technic": [6, 152, 153, 167, 194, 202, 203, 210, 271], "henceforth": 6, "background": [6, 33, 77, 99, 175, 187, 189, 196, 248, 249], "post": [6, 13, 51, 102, 136, 137, 138, 142, 161, 184, 194, 221, 260], "recap": [6, 48, 177, 227, 274], "adversari": [6, 45, 101, 120, 132, 135, 259], "architectur": [6, 20, 33, 54, 58, 77, 87, 97, 102, 103, 133, 135, 137, 140, 142, 148, 154, 164, 170, 172, 174, 181, 187, 189, 191, 197, 198, 219, 222, 238, 275, 278, 280], "repositori": [6, 12, 56, 85, 122, 137, 140, 152, 172, 173, 180, 181, 182, 196, 262], "distinct": [6, 20, 54, 84, 100, 109, 128, 137, 180, 187, 193, 194, 253, 280], "transform": [6, 14, 20, 21, 25, 32, 33, 34, 35, 36, 37, 38, 39, 41, 45, 51, 54, 90, 92, 93, 95, 100, 101, 117, 120, 130, 131, 132, 135, 136, 138, 152, 153, 154, 156, 158, 160, 164, 167, 168, 175, 179, 182, 183, 186, 187, 189, 190, 196, 198, 211, 212, 223, 225, 235, 237, 238, 242, 243, 246, 250, 253, 259, 260, 264, 276, 278, 280], "real": [6, 7, 16, 32, 38, 54, 56, 92, 102, 103, 104, 105, 109, 133, 136, 143, 144, 152, 153, 167, 173, 177, 182, 191, 193, 194, 211, 223, 242, 262, 273, 276], "emit": [6, 103, 193], "probabl": [6, 8, 11, 33, 51, 54, 93, 97, 100, 102, 103, 106, 109, 136, 141, 142, 144, 168, 175, 177, 187, 189, 211, 276], "judg": 6, "closer": [6, 92, 102, 177], "feedback": [6, 128, 137, 157, 160, 161, 198, 210, 263, 284], "produc": [6, 8, 13, 70, 102, 111, 118, 142, 145, 153, 154, 156, 157, 159, 161, 170, 176, 177, 182, 189, 193, 194, 205, 222, 238, 243, 278], "authent": 6, "theori": [6, 51, 54, 92, 102, 141, 170], "delic": 6, "improv": [6, 11, 12, 20, 25, 37, 51, 58, 95, 100, 102, 110, 115, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 143, 146, 161, 168, 177, 181, 182, 189, 190, 191, 197, 198, 200, 202, 210, 212, 222, 223, 236, 238, 246, 250, 262, 263, 264, 275, 280, 284], "tandem": [6, 249], "indistinguish": 6, "fool": [6, 51, 77], "excel": [6, 53, 187, 204], "realist": [6, 197, 276], "transpos": [6, 14, 41, 50, 51, 54, 95, 158, 168, 187, 253, 276], "2d": [6, 33, 54, 97, 110, 138, 143, 178, 189, 190, 194, 207], "convolut": [6, 11, 14, 15, 54, 93, 95, 100, 102, 110, 119, 125, 129, 130, 132, 134, 135, 161, 164, 174, 183, 184, 193, 200, 211, 212, 219, 222, 225, 228, 229, 240, 241, 252, 259], "relu": [6, 14, 48, 54, 95, 97, 104, 110, 119, 128, 136, 150, 154, 158, 175, 178, 179, 180, 187, 204, 205, 206, 207, 211, 212, 222, 238, 275, 278], "unit": [6, 51, 97, 100, 136, 137, 159, 170, 174, 176, 177, 182, 189, 193, 197, 225, 238], "dcgangeneratorimpl": 6, "knoises": 6, "conv1": [6, 48, 95, 97, 119, 136, 169, 174, 179, 187], "convtranspose2dopt": 6, "batch_norm1": 6, "conv2": [6, 95, 97, 119, 136, 179, 187], "128": [6, 8, 53, 54, 57, 90, 102, 136, 140, 143, 152, 154, 175, 178, 179, 180, 194, 197, 200, 212, 213, 223, 237, 246], "pad": [6, 51, 97, 146, 181, 197, 238, 273, 276, 280], "batch_norm2": 6, "conv3": 6, "batch_norm3": 6, "conv4": 6, "tanh": [6, 54, 97, 104, 176, 238], "convtranspose2d": 6, "batchnorm2d": [6, 54, 110, 146, 238], "dcgangener": 6, "chosen": [6, 8, 93, 97, 139, 177, 191, 222, 223, 253], "outlin": [6, 170, 194], "cours": [6, 16, 20, 55, 92, 93, 100, 102, 105, 106, 109, 110, 141, 152, 187, 219, 280], "student": [6, 102], "No": [6, 55, 115, 138, 158, 203, 250], "harm": [6, 102], "discoveri": [6, 193], "fed": [6, 14, 38, 51, 54, 189, 194], "soylent": 6, "regularli": [6, 55], "channel": [6, 12, 14, 44, 45, 54, 93, 95, 97, 100, 102, 110, 130, 135, 140, 174, 183, 187, 190, 196, 212, 225, 238, 259], "moduleopt": 6, "linearopt": 6, "leaki": [6, 54], "alpha": [6, 17, 160, 189, 210, 271], "sigmoid": [6, 54, 97, 198, 238], "squash": [6, 153, 160], "rang": [6, 7, 13, 14, 16, 22, 42, 45, 53, 54, 55, 69, 77, 84, 90, 93, 95, 102, 110, 111, 112, 114, 115, 118, 136, 137, 138, 139, 142, 152, 154, 172, 175, 178, 180, 182, 186, 187, 193, 196, 202, 204, 207, 210, 211, 219, 221, 222, 228, 236, 238, 250, 253, 256, 257, 260, 262, 264, 265, 280], "sequenti": [6, 14, 51, 70, 97, 109, 118, 153, 168, 190, 202, 210, 211, 238, 256, 257, 276, 283], "success": [6, 16, 77, 106, 142, 158, 182, 219], "orient": [6, 184], "layer": [6, 11, 12, 13, 14, 15, 17, 19, 20, 32, 38, 39, 44, 48, 51, 54, 57, 62, 70, 77, 90, 92, 95, 99, 100, 101, 102, 104, 110, 118, 119, 125, 128, 136, 137, 138, 142, 143, 144, 145, 153, 161, 168, 172, 174, 175, 176, 179, 180, 182, 184, 193, 194, 196, 198, 202, 203, 206, 210, 211, 221, 222, 225, 227, 229, 235, 239, 240, 242, 243, 260, 264, 275, 278, 280], "conv2dopt": 6, "leakyrelu": [6, 54], "leakyreluopt": 6, "negative_slop": 6, "fourth": [6, 67, 118, 147], "power": [6, 44, 51, 59, 67, 77, 90, 92, 95, 102, 104, 110, 118, 130, 135, 136, 142, 150, 152, 158, 160, 164, 173, 174, 175, 182, 189, 190, 210, 223, 250, 256, 264, 274], "knob": [6, 256], "launch": [6, 55, 62, 139, 142, 149, 150, 178, 179, 180, 181, 186, 211, 223, 228, 238, 256, 260], "few": [6, 7, 8, 11, 12, 17, 48, 53, 58, 87, 92, 93, 95, 100, 102, 104, 105, 106, 107, 109, 119, 131, 137, 138, 141, 143, 144, 145, 150, 152, 153, 168, 170, 175, 176, 179, 182, 191, 197, 198, 203, 205, 212, 222, 237, 238, 239, 242, 247, 264, 272, 273, 274], "sampler": [6, 34, 57, 101, 136, 137, 176, 184], "indic": [6, 12, 13, 16, 33, 51, 64, 65, 84, 92, 93, 95, 97, 99, 103, 104, 109, 115, 117, 118, 142, 143, 153, 158, 174, 176, 177, 179, 186, 187, 189, 194, 200, 221, 223, 253, 262, 271, 273, 274], "index": [6, 7, 17, 34, 41, 42, 45, 50, 51, 53, 85, 100, 103, 104, 106, 107, 109, 110, 117, 136, 141, 142, 143, 152, 168, 172, 178, 182, 186, 189, 191, 193, 194, 210, 256, 264, 276, 283], "instanti": [6, 8, 12, 16, 34, 39, 53, 54, 67, 69, 87, 95, 102, 110, 112, 118, 128, 142, 173, 174, 177, 189, 198, 210, 227], "collat": [6, 53], "wherev": 6, "make_data_load": 6, "unique_ptr": 6, "data_load": 6, "zero": [6, 7, 13, 20, 32, 37, 42, 48, 51, 69, 92, 93, 95, 97, 100, 101, 109, 110, 118, 128, 136, 137, 144, 152, 153, 164, 168, 170, 173, 174, 178, 180, 182, 187, 198, 222, 226, 228, 234, 237, 238, 253, 257, 258, 259, 271, 273, 274, 279, 280], "spawn": [6, 13, 22, 51, 54, 55, 57, 62, 136, 150, 152, 178, 179, 180, 204, 205, 257, 262], "concurr": [6, 117, 140, 142, 170, 204, 238, 256, 260], "kbatchsiz": 6, "dataloaderopt": 6, "batch_siz": [6, 16, 25, 34, 51, 53, 54, 57, 90, 95, 136, 137, 138, 140, 152, 177, 178, 179, 186, 187, 189, 190, 194, 212, 222, 246, 253, 275, 280], "consol": [6, 187, 189], "field": [6, 12, 13, 16, 17, 33, 51, 97, 107, 109, 128, 132, 152, 167, 178, 186, 193, 196, 262, 273], "rebuild": [6, 223], "6": [6, 13, 36, 42, 51, 69, 87, 93, 95, 97, 100, 106, 109, 111, 115, 117, 118, 119, 146, 147, 152, 158, 161, 164, 173, 174, 175, 178, 180, 189, 191, 193, 197, 207, 210, 211, 222, 242, 250, 251, 252, 256, 264, 266, 280], "finish": [6, 19, 46, 95, 150, 178, 180, 187, 204, 212, 219, 225, 238, 278], "danc": [6, 14], "generator_optim": 6, "adamopt": 6, "2e": [6, 92], "beta": [6, 21, 129, 130, 135, 183, 245, 258, 259, 274], "make_tupl": 6, "discriminator_optim": 6, "5e": [6, 25], "adagrad": [6, 101, 118, 259, 274, 281, 284], "lbfg": [6, 14], "rmsprop": [6, 37, 48, 71, 104, 118], "sgd": [6, 37, 44, 45, 48, 69, 71, 90, 95, 101, 104, 110, 118, 119, 128, 150, 152, 178, 179, 180, 184, 187, 212, 236, 240, 241, 246], "date": [6, 11, 12, 77, 79, 80, 81, 82, 83, 137, 179, 212, 235, 252], "updat": [6, 12, 13, 14, 15, 16, 19, 20, 37, 44, 45, 51, 54, 69, 71, 84, 92, 102, 104, 109, 110, 111, 118, 119, 136, 137, 138, 142, 146, 150, 153, 161, 167, 176, 177, 179, 180, 186, 194, 197, 200, 202, 205, 210, 222, 235, 240, 257, 271, 279, 280], "exhaust": [6, 13, 193], "epoch": [6, 19, 25, 34, 37, 38, 54, 55, 57, 90, 95, 99, 102, 104, 110, 119, 125, 136, 137, 138, 142, 143, 152, 161, 167, 176, 180, 187, 196, 198, 236], "knumberofepoch": 6, "batch_index": 6, "zero_grad": [6, 37, 48, 69, 92, 95, 110, 118, 136, 137, 138, 150, 152, 167, 178, 180, 187, 194, 204, 205, 212, 236, 241, 246], "real_imag": 6, "real_label": 6, "uniform_": [6, 180], "real_output": 6, "reshap": [6, 14, 97, 100, 109, 110, 172, 276], "d_loss_real": 6, "binary_cross_entropi": [6, 222], "fake_imag": 6, "fake_label": 6, "fake_output": 6, "d_loss_fak": 6, "d_loss": 6, "fill_": [6, 7, 186], "g_loss": 6, "printf": 6, "r": [6, 13, 16, 37, 44, 48, 77, 87, 95, 103, 132, 135, 158, 159, 160, 161, 164, 177, 178, 180, 189, 196, 212, 223, 238, 256, 283], "2ld": 6, "3ld": 6, "4f": [6, 136, 137], "batches_per_epoch": 6, "evalu": [6, 14, 20, 25, 37, 39, 77, 92, 93, 99, 102, 112, 119, 145, 159, 164, 172, 177, 179, 187, 191, 193, 196, 213, 253, 280], "uniformli": [6, 90, 177, 238], "robust": [6, 51, 55, 56, 77, 100, 139, 177, 211], "smooth": [6, 102, 111, 189], "propag": [6, 12, 19, 32, 37, 44, 46, 48, 54, 102, 106, 107, 110, 147, 156, 161, 176, 238], "repeat": [6, 16, 22, 92, 95, 143, 144, 176, 186, 193, 198, 210, 228, 237, 242, 243, 260, 271], "spiel": 6, "ideal": [6, 16, 34, 92, 95, 100, 102, 170, 182, 193, 200, 248], "progress": [6, 11, 17, 25, 54, 55, 99, 101, 153, 182, 187, 205, 262, 275], "fill": [6, 16, 95, 109, 110, 143, 153, 272, 273], "yet": [6, 12, 13, 22, 52, 77, 92, 95, 100, 114, 115, 145, 152, 170, 179, 182, 194, 205, 212, 253, 276], "captur": [6, 8, 54, 92, 111, 112, 114, 129, 135, 136, 156, 189, 190, 191, 193, 194, 197, 213, 223, 253, 262, 265], "moment": [6, 13, 210, 274], "observ": [6, 16, 48, 53, 84, 101, 125, 136, 137, 142, 145, 153, 160, 161, 167, 170, 176, 177, 178, 180, 181, 182, 191, 197, 202, 211, 213, 222, 223, 229, 235, 243, 254, 257, 258, 274, 278], "meaning": [6, 51, 102, 161, 262], "3c0711f20896": 6, "dcga": 6, "938": [6, 161], "6876": 6, "1304": 6, "3776": 6, "3101": 6, "300": [6, 137, 180, 211, 223, 237], "3652": 6, "6626": 6, "400": [6, 95, 119, 223, 237, 253, 259], "8057": 6, "2795": [6, 223], "3531": 6, "4452": 6, "600": [6, 161, 177], "3501": [6, 106], "0811": 6, "700": 6, "3581": 6, "5623": 6, "800": 6, "6423": 6, "7385": 6, "900": 6, "3592": 6, "7333": 6, "4660": 6, "5242": 6, "6364": 6, "0886": 6, "3717": 6, "8103": 6, "0201": 6, "3544": 6, "4522": 6, "6545": 6, "fine": [6, 20, 51, 53, 92, 103, 141, 152, 158, 175, 186, 191, 194, 222, 223, 237, 238, 256, 271, 280], "faster": [6, 11, 14, 51, 58, 77, 97, 100, 102, 110, 119, 135, 137, 139, 149, 150, 153, 154, 159, 161, 169, 170, 178, 182, 191, 196, 222, 223, 237, 238, 239, 256, 258, 262, 275], "quickli": [6, 36, 45, 84, 102, 103, 104, 109, 110, 118, 140, 167, 177, 182, 198, 199, 213, 262], "onto": [6, 11, 16, 19, 22, 45, 97, 99, 100, 135, 153, 167, 179, 180, 194, 238, 262], "somewher": [6, 97, 103, 104, 119], "kcpu": [6, 265], "last": [6, 13, 16, 33, 44, 51, 54, 55, 77, 85, 87, 90, 95, 97, 100, 101, 104, 107, 112, 125, 130, 135, 140, 141, 144, 152, 153, 158, 167, 176, 177, 178, 180, 181, 182, 183, 187, 193, 196, 212, 222, 238, 253, 259, 271, 274, 278], "whose": [6, 84, 87, 92, 93, 102, 109, 137, 141, 161, 170, 189, 221, 223], "creation": [6, 12, 100, 227, 274], "hand": [6, 11, 16, 20, 22, 77, 100, 103, 109, 110, 144, 152, 169, 170, 191, 193, 194, 204, 205, 242, 243, 272, 280], "insert": [6, 14, 20, 97, 180, 193, 213, 278, 280], "explicit": [6, 7, 138, 161, 170, 180, 193, 197, 219, 222, 245, 250, 258, 259, 272, 279], "suppli": [6, 106, 161, 175], "op": [6, 7, 8, 12, 13, 17, 50, 84, 115, 128, 129, 135, 136, 137, 138, 140, 145, 146, 150, 152, 158, 161, 175, 186, 197, 200, 210, 222, 227, 258, 264, 265, 272, 273, 275, 276], "previou": [6, 13, 16, 17, 19, 20, 37, 51, 55, 57, 100, 101, 102, 110, 115, 125, 137, 138, 139, 143, 144, 147, 148, 149, 153, 160, 167, 170, 172, 174, 176, 177, 178, 180, 181, 182, 186, 187, 189, 191, 193, 194, 200, 223, 229, 238, 253, 280], "resid": [6, 102, 170], "And": [6, 12, 18, 25, 54, 93, 106, 112, 143, 147, 158, 159, 161, 164, 175, 186, 187, 191, 193, 223, 237], "downstream": [6, 189], "portabl": [6, 248], "augment": [6, 25, 53, 110, 125, 132, 135, 184, 193, 196], "period": [6, 51, 54, 139, 142, 160, 186, 262], "middl": 6, "procedur": [6, 48, 131, 177, 184], "restor": [6, 77, 119, 150, 161, 240], "long": [6, 12, 51, 52, 84, 90, 97, 100, 104, 105, 106, 108, 110, 137, 139, 141, 144, 153, 157, 158, 168, 172, 177, 180, 186, 194, 197, 198, 223, 237, 238, 241, 251, 259, 260, 262, 265], "session": [6, 102, 112], "fortun": [6, 12, 17, 90, 152, 153, 223], "deseri": [6, 119], "filenam": [6, 117, 189, 222, 262], "interv": [6, 16, 92, 142, 180], "kcheckpointeveri": 6, "pt": [6, 55, 119, 136, 137, 138, 212, 213, 248, 263], "str": [6, 7, 22, 85, 137, 172, 176, 179, 189, 193, 256], "checkpoint_count": 6, "integ": [6, 11, 42, 95, 100, 104, 106, 109, 142, 174, 193, 196, 200, 228, 264, 274], "counter": [6, 13, 51, 54, 145, 152, 190, 250], "bump": 6, "beta1": [6, 54, 210], "krestorefromcheckpoint": 6, "intermediari": [6, 141], "xxx": [6, 17, 53], "matplotlib": [6, 14, 34, 54, 59, 92, 93, 95, 99, 177, 182, 187, 189], "argpars": [6, 136, 137, 178, 179, 180], "pyplot": [6, 14, 95, 110, 187, 189], "plt": [6, 14, 95, 182, 187, 189], "parser": [6, 103, 136, 137, 178, 179, 180], "argumentpars": [6, 136, 137, 178, 179, 180], "add_argu": [6, 136, 137, 178, 179, 180], "png": [6, 53, 135, 196], "parse_arg": [6, 136, 137, 178, 179, 180], "jit": [6, 7, 8, 11, 17, 87, 191, 200, 210, 212, 223, 228, 242, 243, 250, 252, 253], "sample_fil": 6, "28": [6, 20, 34, 95, 97, 99, 110, 154, 169, 187, 210, 211, 223, 237, 280], "mul": [6, 145, 158, 193, 210, 223, 237], "uint8": [6, 196], "numpi": [6, 14, 18, 21, 42, 45, 53, 59, 73, 75, 76, 92, 95, 110, 112, 117, 147, 175, 180, 187, 189, 191, 221, 237, 253, 259, 271, 280, 284], "axi": [6, 84, 106, 107, 143, 170, 174, 189], "subplot": 6, "imshow": [6, 14, 95, 187, 189], "cmap": [6, 187], "grai": [6, 160], "get_xaxi": 6, "set_vis": 6, "get_yaxi": 6, "savefig": 6, "out_fil": 6, "30": [6, 46, 84, 95, 104, 133, 137, 139, 161, 174, 178, 180, 210, 223, 228, 280], "57": [6, 20, 95, 117, 158, 210, 228], "4953": 6, "0195": 6, "3610": 6, "8148": 6, "4072": 6, "36760": 6, "4444": 6, "3761": 6, "8790": 6, "3977": 6, "3315": 6, "120": [6, 95, 119, 125, 180, 187, 228], "8084": 6, "hoorai": 6, "ball": 6, "court": 6, "hopefulli": [6, 52, 53, 77, 87, 104, 119, 239], "digest": [6, 237], "necess": [6, 51, 99], "broad": [6, 59, 93, 101], "did": [6, 11, 18, 45, 54, 92, 95, 97, 100, 112, 128, 139, 152, 156, 168, 176, 179, 182, 194, 223, 262], "space": [6, 8, 16, 51, 54, 77, 92, 93, 97, 102, 103, 107, 109, 142, 153, 160, 167, 170, 176, 177, 180, 182, 186, 187, 189, 194, 197, 213, 263], "consult": [6, 167, 221], "stuck": [6, 284], "whenev": [6, 8, 55, 69, 100, 103, 104, 200, 241], "rate": [6, 37, 44, 54, 90, 95, 97, 101, 102, 104, 125, 136, 137, 142, 143, 160, 177, 179, 194, 196, 236, 238, 262], "prototyp": [7, 12, 13, 17, 34, 193, 194, 210, 259, 265, 267, 271, 272, 273, 274, 275, 276, 281, 283, 284], "statu": [7, 25, 139, 142, 145, 180, 193, 252], "subject": [7, 13, 16, 136, 156, 182, 193, 200, 210, 223, 252, 275, 276, 278, 283], "snapshot": [7, 135, 148, 193], "__obj_flatten__": 7, "inspect": [7, 92, 102, 115, 137, 138, 142, 157, 181, 184, 191, 193, 194, 198, 223, 252], "guard": [7, 11, 150, 203, 210], "tupl": [7, 34, 41, 50, 84, 95, 97, 100, 102, 107, 109, 112, 177, 193, 196, 237, 260, 274], "attribute_nam": 7, "_librari": 7, "register_fake_class": 7, "addition": [7, 13, 14, 37, 84, 141, 142, 150, 170, 193, 196, 204, 205, 247, 256, 262, 279], "__obj_unflatten__": 7, "classmethod": 7, "flatten": [7, 48, 70, 102, 110, 118, 136, 140, 154, 179, 193, 211], "breakdown": [7, 186], "diff": [7, 55, 57, 84, 135, 223, 237], "custom_class": [7, 8], "tensorqueu": 7, "customclasshold": [7, 8], "init_tensor_": 7, "dict": [7, 22, 51, 53, 167, 168, 176, 193, 196, 204, 205, 210, 222, 227], "init_tensor": 7, "size_tensor": 7, "size_tensor_acc": 7, "const_data_ptr": 7, "queue_siz": 7, "irang": 7, "val": [7, 8, 20, 137, 175, 280], "queue_": 7, "to_str": 7, "push_back": [7, 8, 212], "push": [7, 8, 54, 77, 97, 102, 159, 264, 283], "rear": 7, "lock_guard": 7, "mutex": 7, "mutex_": 7, "pop": [7, 8, 97, 280], "front": [7, 154, 174, 193], "pop_front": 7, "get_raw_queu": 7, "raw_queu": 7, "dequ": 7, "mycustomclass": 7, "class_": [7, 8], "init": [7, 8, 139, 168, 198, 279], "clone": [7, 8, 13, 56, 100, 143, 147, 148, 152, 158, 161, 172, 253, 260], "2a": 7, "class_nam": [7, 125, 189], "faketensorqueu": 7, "2b": [7, 44], "cl": [7, 14, 266], "flattened_tq": 7, "libcustom_class": [7, 8], "tq": 7, "mod": [7, 191, 193, 253], "sin": [7, 16, 18, 64, 65, 69, 70, 71, 74, 75, 92, 100, 118, 238, 248, 266], "co": [7, 92, 109, 228, 238, 266], "poped_t": 7, "allclos": [7, 154, 158, 168, 210, 260, 280], "eager": [7, 12, 87, 89, 145, 158, 161, 181, 191, 193, 197, 202, 210, 213, 238, 251, 253, 278], "fullgraph": [7, 18, 145, 191, 202, 250], "exported_program": [7, 119, 253], "strict": [7, 119, 189, 239, 272], "for_each_add_": 7, "inc": 7, "add_": [7, 100, 193, 271], "torch_library_frag": 7, "__torch__": [7, 8], "foo": [7, 8, 168, 179, 237, 266, 279], "intrusive_ptr": [7, 8, 173, 223, 237], "fake_for_each_add_": 7, "foreachadd": 7, "scriptobject": 7, "empty_tensor_queu": 7, "qlen": 7, "ep": [7, 146, 180, 193, 210, 253, 271, 280], "trace": [7, 11, 12, 18, 32, 44, 92, 99, 117, 135, 145, 158, 164, 170, 181, 186, 190, 193, 206, 249, 250, 254, 258, 262, 275], "major": [7, 12, 13, 97, 100, 109, 125, 139, 158, 167, 181, 191, 194, 210, 211, 243, 250, 257, 274], "downsid": [7, 156, 170], "consum": [7, 114, 117, 141, 158, 170, 176, 178, 180, 181, 228, 238], "side": [7, 53, 54, 84, 109, 154, 161, 167, 169, 170, 173, 177, 178, 186, 219], "difficult": [7, 103, 159, 168, 182, 194, 210, 273, 283], "parti": [7, 8, 11, 18, 129, 138, 139, 173], "complic": [7, 16, 103, 104, 109, 110, 118, 142, 193, 207, 222, 223, 283], "fakif": 7, "tracing_mod": 7, "alias": [7, 11, 12, 193], "within": [7, 16, 22, 62, 87, 92, 93, 99, 110, 111, 112, 117, 128, 140, 145, 147, 158, 168, 174, 177, 179, 189, 190, 191, 194, 197, 207, 211, 223, 229, 238, 242, 247, 249, 252, 256, 263, 265, 274, 275, 276, 279], "torchbind": 7, "transfer": [8, 11, 21, 45, 53, 102, 110, 119, 120, 132, 135, 152, 170, 175, 179, 186, 196, 224, 239, 259, 263], "maintain": [8, 12, 16, 32, 33, 34, 44, 51, 77, 97, 102, 107, 134, 135, 139, 148, 152, 160, 177, 180, 193, 198, 204, 222, 257, 279], "persist": [8, 13, 39, 204, 222], "member": [8, 69, 118, 279, 284], "portion": [8, 84, 167, 170, 172, 174, 211, 219, 237, 262], "registr": [8, 9, 11, 12, 17, 18, 212, 219], "templat": [8, 11, 120, 152, 158, 190, 259, 275], "mystackclass": 8, "stack_": 8, "pop_back": 8, "make_intrus": [8, 173], "merg": [8, 16, 46, 93, 97, 175, 189, 212], "elem": [8, 235], "smart": [8, 193], "oppos": [8, 9, 51, 54, 125, 152, 159, 164, 179, 223], "intern": [8, 11, 12, 13, 17, 38, 39, 51, 58, 70, 97, 102, 118, 134, 135, 136, 138, 142, 152, 186, 198, 200, 204, 237, 262, 271], "manag": [8, 33, 44, 51, 62, 92, 110, 117, 128, 131, 138, 140, 145, 148, 149, 150, 168, 181, 186, 191, 194, 204, 205, 206, 207, 222, 223, 224, 227, 228, 229, 238, 251, 256, 263], "visibl": [8, 45, 90, 99, 189], "qualifi": [8, 11, 205], "appear": [8, 13, 16, 109, 193, 219], "my_class": 8, "contructor": 8, "overload": [8, 11], "stateless": [8, 16, 154, 156], "yourclass": 8, "ref": 8, "four": [8, 16, 22, 69, 87, 95, 97, 100, 118, 137, 152, 172, 187, 197, 213, 253, 278], "examin": [8, 13, 84, 92, 93, 99, 101, 102, 152, 157, 170, 194], "address": [8, 14, 22, 25, 84, 97, 129, 135, 139, 152, 170, 178, 179, 193, 194, 197, 206, 213, 235, 256, 258, 279], "fulli": [8, 13, 14, 16, 17, 36, 62, 84, 90, 95, 96, 97, 110, 125, 131, 135, 142, 145, 148, 161, 164, 177, 179, 181, 186, 198, 200, 205, 210, 212, 225, 273, 280], "unari": 8, "rule": [8, 11, 32, 44, 48, 92, 100, 107, 128, 141, 154, 159, 168, 169, 176, 177, 193, 222], "cover": [8, 9, 16, 17, 19, 22, 34, 48, 100, 105, 115, 122, 128, 133, 134, 135, 137, 142, 152, 172, 173, 176, 179, 180, 187, 191, 193, 199, 211, 212, 222, 230, 231, 232, 233, 236, 237, 238, 249, 256, 273, 275, 276], "add_librari": 8, "cmake_cxx_standard": 8, "custom_class_project": 8, "opt": [8, 11, 110, 142, 161, 173, 179, 180, 186, 202, 264], "rh": 8, "devtoolset": 8, "torchbind_tutori": 8, "j": [8, 32, 44, 77, 92, 95, 102, 103, 107, 138, 182, 262], "test": [8, 11, 25, 34, 37, 38, 51, 85, 87, 93, 95, 101, 102, 104, 105, 111, 122, 135, 136, 137, 143, 152, 154, 156, 158, 161, 170, 175, 179, 182, 184, 187, 191, 193, 210, 211, 223, 262, 264, 283, 284], "annot": [8, 11, 12, 22, 34, 53, 104, 115, 189, 191, 193, 223], "futur": [8, 22, 51, 110, 115, 117, 128, 136, 156, 160, 167, 173, 177, 178, 179, 180, 204, 211, 240, 251, 274], "scriptmodul": [8, 87], "export_attr": 8, "runtimeerror": [8, 128, 139, 173, 175, 253], "def_pickl": 8, "pushivalueimpl": 8, "pickler": 8, "__getstate__": 8, "__setstate__": 8, "pickl": [8, 39, 90, 110, 119, 167, 223, 262], "salient": 8, "preserv": [8, 11, 20, 100, 130, 135, 138, 161, 174, 235, 240, 272, 278, 280], "conveni": [8, 11, 16, 45, 48, 51, 93, 106, 110, 141, 144, 154, 159, 173, 176, 205, 212, 222, 223, 237, 262, 272, 274], "wherea": [8, 110, 145, 187, 189, 264, 272, 273], "didn": [8, 11, 93, 112, 157, 178, 283], "confus": [8, 110, 143, 156, 189, 194, 264, 272, 273, 274], "de": [8, 20, 22, 182, 280], "suppos": [8, 12, 102, 103, 104, 109, 136, 191, 196, 212, 279], "manipulate_inst": 8, "trycustomop": 8, "bar": [8, 51, 84, 168, 179, 189, 191, 219], "enforc": [8, 12, 16, 142, 168, 271, 272], "relax": [8, 168, 253], "standalon": [8, 55, 222, 250, 260], "blend": 8, "smoothli": 8, "frequent": [8, 32, 84, 109, 118, 136, 212, 251, 273], "faq": 8, "autograd": [9, 14, 17, 18, 19, 33, 34, 36, 37, 38, 39, 41, 42, 47, 48, 49, 59, 63, 66, 70, 93, 94, 95, 96, 97, 99, 100, 101, 105, 106, 110, 128, 129, 130, 134, 135, 143, 144, 147, 150, 158, 159, 164, 169, 177, 178, 179, 182, 183, 193, 198, 219, 222, 238, 250, 259, 283], "vmap": [9, 11, 130, 135, 156, 159, 164, 169, 259, 281, 284], "treat": [9, 18, 92, 109, 169, 178, 191, 193, 194], "opaqu": [9, 18, 237, 250], "callabl": [9, 18, 42, 53, 110, 186, 191, 193, 221, 250], "especi": [9, 20, 51, 54, 77, 93, 100, 137, 139, 150, 157, 164, 167, 170, 193, 197, 264, 272, 280], "respect": [9, 18, 19, 32, 34, 36, 37, 38, 44, 51, 54, 64, 65, 92, 93, 104, 106, 118, 122, 128, 140, 141, 153, 156, 158, 159, 169, 170, 176, 180, 182, 186, 194, 235, 240, 250, 256, 260], "aotinductor": [9, 129, 193, 242, 245, 250, 253, 258, 259], "sycl": [9, 135], "site": [9, 22, 52, 54, 157, 182, 228, 237, 253], "head": [9, 20, 36, 85, 97, 117, 150, 181, 196, 276, 280], "toe": 9, "express": [9, 18, 92, 95, 97, 100, 103, 114, 122, 140, 193, 197, 210, 273, 278], "doesn": [9, 11, 12, 15, 18, 20, 62, 104, 106, 109, 110, 141, 159, 161, 170, 174, 189, 191, 193, 202, 203, 210, 237, 238, 249, 253, 254, 256, 264, 271, 280, 283], "pybind": 9, "ed": [9, 252], "newest": 11, "respons": [11, 13, 19, 22, 51, 92, 93, 101, 110, 134, 135, 140, 146, 150, 152, 178, 179, 182, 191, 193, 202, 221], "nontrivi": 11, "cross": [11, 15, 45, 54, 95, 97, 101, 140, 142, 238, 241, 256], "cut": [11, 172, 193], "concern": [11, 104, 194, 213, 271], "switch": [11, 17, 99, 100, 119, 167, 194, 211, 222, 224, 228, 241], "organ": [11, 16, 53, 95, 119, 143, 223, 256, 260], "convers": [11, 51, 92, 100, 161, 182, 210, 235, 271], "highest": [11, 45, 51, 99, 139, 144, 177, 189, 191, 238], "prioriti": [11, 139], "redispatch": 11, "involv": [11, 17, 20, 36, 39, 52, 87, 92, 93, 100, 103, 106, 112, 119, 128, 131, 141, 143, 149, 160, 167, 180, 182, 193, 229, 238, 243, 250, 253, 262, 263, 264, 276, 280], "unlik": [11, 14, 20, 93, 100, 102, 118, 140, 141, 156, 161, 182, 190, 193, 250, 256, 279, 280], "style": [11, 140, 172, 193, 196, 205], "abid": [11, 54], "myop": 11, "myadd": [11, 12], "realli": [11, 45, 92, 97, 100, 103, 104, 109, 118, 120, 135, 141, 187, 223, 259, 271, 273, 283], "myadd_cpu": 11, "self_": 11, "other_": 11, "self_ptr": 11, "other_ptr": 11, "catch": [11, 13, 191, 193, 212, 251], "previous": [11, 32, 87, 106, 110, 145, 156, 172, 174, 176, 177, 178, 186, 193, 235, 252, 271, 283], "myadd_cuda": 11, "split": [11, 22, 46, 51, 54, 87, 90, 95, 99, 101, 135, 143, 144, 150, 172, 176, 179, 180, 182, 194, 196, 219], "boundari": [11, 138, 176, 247], "myops_cpu": 11, "myops_cuda": 11, "subdivid": 11, "xla": [11, 12, 17, 235], "torch_xla": [11, 12], "useabl": 11, "behav": [11, 18, 100, 110, 161, 168, 178, 219], "autogradnotimplementedfallback": 11, "notimpl": 11, "node": [11, 22, 32, 44, 48, 55, 56, 57, 58, 62, 64, 92, 99, 103, 115, 118, 128, 131, 137, 138, 139, 143, 145, 148, 149, 150, 157, 158, 179, 182, 193, 207, 210, 238, 256, 260, 265, 278], "require_grad": [11, 128], "ness": 11, "larger": [11, 14, 77, 84, 92, 102, 110, 114, 119, 129, 135, 136, 137, 140, 142, 148, 170, 177, 180, 182, 186, 189, 190, 191, 204, 205, 211, 223, 243, 264, 276], "pin": [11, 101, 141, 170, 238], "lost": [11, 20, 280], "adinplaceorview": 11, "bookkeep": [11, 223], "autogradnotimplementedinplaceorviewfallback": 11, "logi": 11, "guess": [11, 37, 44, 51, 54, 143, 182], "twist": 11, "constitut": [11, 16], "hood": [11, 51, 54, 56, 58, 62, 118, 140, 141, 159, 160, 170, 180, 206, 274], "singleton": [11, 179], "findschemaorthrow": 11, "decltyp": 11, "down": [11, 12, 13, 33, 34, 52, 84, 90, 92, 97, 99, 104, 110, 136, 153, 158, 159, 160, 179, 184, 187, 193, 237, 238, 262, 271], "typic": [11, 13, 16, 34, 44, 48, 50, 56, 57, 84, 95, 103, 104, 109, 138, 140, 142, 146, 148, 158, 167, 170, 176, 179, 189, 191, 193, 194, 210, 211, 212, 222, 224, 238, 242, 243, 253, 256], "cast": [11, 20, 22, 75, 117, 137, 138, 170, 193, 222, 280], "runtim": [11, 16, 22, 41, 52, 84, 87, 92, 95, 96, 100, 114, 115, 117, 129, 135, 139, 140, 145, 146, 157, 167, 170, 172, 186, 191, 193, 194, 200, 202, 210, 211, 222, 223, 228, 241, 245, 249, 258, 259, 264, 266, 275], "lookup": [11, 19, 109, 145, 180], "typo": [11, 128, 198], "myaddfunct": [11, 12], "autononvariabletypemod": [11, 12], "myadd_autograd": [11, 12], "raii": 11, "infinit": 11, "overflow": [11, 51, 222, 264], "send": [11, 12, 13, 14, 45, 46, 62, 90, 152, 160, 170, 172, 173, 178, 179, 180, 194, 228], "exclud": [11, 44, 138, 191, 228, 278], "consider": [11, 12, 136, 193, 194, 253], "autogradcpu": 11, "autogradcuda": 11, "pythondispatch": 11, "_python_dispatch": 11, "sens": [11, 14, 16, 102, 109, 110, 128, 154, 170, 187], "isn": [11, 92, 103, 156, 170, 175, 187, 193, 194, 223, 225, 239, 240, 273], "glorifi": 11, "add_cpu": 11, "add_cuda": 11, "unsupport": [11, 111, 115, 129, 135, 191, 193, 253], "decentr": 11, "importantli": [11, 147, 167, 170, 223, 271], "aspect": [11, 17, 77, 152, 196, 223], "patch": [11, 12, 177], "dispatchkei": [11, 12], "varieti": [11, 25, 33, 51, 92, 93, 97, 101, 110, 119, 144, 170, 197, 213, 256, 274], "fallback": [11, 12, 17, 197], "amp": [11, 17, 62, 138, 161, 200, 212, 246, 258, 275], "incom": [11, 95, 186], "float16": [11, 17, 137, 161, 200, 222], "float32": [11, 16, 95, 137, 138, 175, 180, 210, 222, 235, 260, 265, 275], "matmul": [11, 140, 158, 193, 200, 211, 222, 264, 280, 283], "impair": 11, "converg": [11, 37, 51, 54, 65, 101, 102, 118, 119, 140, 152, 168, 177, 182, 203, 222, 239, 258], "hypothet": 11, "autocast_mod": 11, "mymatmul_autocast": 11, "excludedispatchkeyguard": 11, "no_autocast": 11, "mymatmul": 11, "cached_cast": 11, "khalf": 11, "elig": [11, 238], "polici": [11, 17, 132, 135, 136, 138, 160, 177, 178, 180, 183, 213, 256, 259], "mixtur": [11, 210], "meanwhil": [11, 141, 158, 212, 272], "float64": 11, "unaffect": [11, 102], "forc": [11, 16, 20, 51, 97, 135, 182, 191, 197, 222, 238, 247, 271, 273, 280], "fallthrough": 11, "occur": [11, 13, 18, 55, 84, 102, 158, 161, 170, 178, 179, 186, 189, 193, 194, 198, 206, 228, 249, 262, 264], "pointwis": [11, 161, 190, 210, 238, 258], "fall": [11, 17, 93, 168, 177, 198, 251], "unfortun": [11, 118, 152, 193], "aren": [11, 147, 153, 193, 194, 238, 241, 273], "dri": [11, 186], "guidanc": [11, 139, 199, 222, 256], "reduct": [11, 69, 100, 118, 136, 137, 138, 141, 146, 167, 173, 186, 189, 197, 222, 238, 271, 273, 284], "gemm": [11, 158, 211, 275], "unless": [11, 41, 50, 100, 104, 111, 176, 193, 227, 264, 283], "categori": [11, 12, 77, 84, 93, 100, 125, 143, 144, 186, 193], "promote_typ": 11, "widest": 11, "safest": 11, "my_multiple_input_op_autocast": 11, "t0": [11, 137, 202, 210, 223], "t1": [11, 223], "optimist": 11, "exec_typ": 11, "my_multiple_input_op": 11, "myadd_autocast": 11, "gymnast": 11, "suitabl": [11, 42, 148, 152, 189, 237], "invoc": [11, 157, 178, 219, 243, 249], "stabil": [11, 102, 177], "41478": 11, "repo": [12, 17, 22, 56, 84, 134, 135, 148, 152, 170, 178, 179, 194, 263, 264], "mainten": [12, 189], "solut": [12, 20, 54, 111, 119, 129, 135, 158, 169, 170, 189, 191, 194, 206, 223, 238, 248, 258, 273, 276, 280], "pr": [12, 187, 197, 212, 237], "propos": [12, 25, 140, 153, 168, 206, 271, 273], "request": [12, 32, 44, 90, 100, 110, 137, 168, 175, 178, 179, 204, 265, 273, 274, 275, 279], "hardwar": [12, 17, 20, 41, 50, 52, 100, 102, 112, 143, 152, 154, 159, 161, 169, 170, 173, 174, 194, 197, 200, 211, 212, 213, 224, 238, 246, 250, 253, 264, 280], "googl": [12, 20, 25, 36, 51, 54, 99, 135, 152, 153, 176, 177, 186, 194, 256], "tpu": [12, 173, 241], "chip": 12, "layout": [12, 20, 140, 197, 207, 238, 271, 274, 280, 284], "spars": [12, 19, 97, 104, 109, 135, 153, 174, 194, 235, 259, 273, 281, 284], "quantiz": [12, 102, 125, 130, 133, 167, 200, 226, 235, 258, 259, 281], "mainli": [12, 16, 17, 22, 158, 186, 191, 252, 278], "haven": [12, 90, 92, 95, 100, 103, 107, 109, 128, 154, 157, 169], "identifi": [12, 20, 34, 55, 57, 77, 84, 85, 93, 110, 117, 149, 160, 161, 165, 174, 179, 193, 196, 206, 253, 262, 274, 280], "carri": [12, 16, 51, 54, 92, 100, 102, 106, 148, 153, 161, 182, 227], "privateuse1": [12, 134, 135, 279], "autogradprivateuse1": [12, 17], "privateuse2": [12, 17], "autogradprivateuse2": [12, 17], "privateuse3": [12, 17], "autogradprivateuse3": [12, 17], "tensorimpl": [12, 17, 223, 237], "storag": [12, 17, 18, 101, 106, 119, 135, 141, 153, 154, 161, 170, 176, 186, 204, 205, 222, 227, 235, 259, 262, 271, 273, 274, 281, 284], "dispatchkeyset": [12, 17], "k": [12, 14, 84, 93, 103, 128, 140, 178, 179, 181, 262, 263, 275, 280], "caffe2": [12, 87], "typemeta": 12, "data_typ": [12, 106], "opaquetensorimpl": 12, "tweak": [12, 51, 241], "overrid": [12, 17, 53, 95, 104, 139, 157, 161, 173, 189, 249, 258], "vulkan": 12, "src": [12, 13, 115, 152, 173, 237], "registrationdeclar": 12, "snippet": [12, 136, 137, 139, 145, 152, 158, 173, 181, 207, 222, 227, 238, 258, 260, 263, 271, 275, 279], "ab": [12, 95, 191, 200, 228], "abs_": 12, "abs_out": 12, "absolute_": 12, "absolute_out": 12, "angl": [12, 16, 109], "angle_out": 12, "sgn": 12, "uniqu": [12, 20, 51, 55, 57, 103, 104, 105, 107, 109, 137, 149, 179, 182, 194, 196, 253, 271, 280], "boolean": [12, 153, 193], "impli": [12, 102, 107, 193, 204, 227, 237, 250], "schema_my_op1": 12, "my_op1": 12, "schema_my_op2": 12, "my_op2": 12, "schema_my_op2_backward": 12, "my_op2_backward": 12, "zoom": [12, 84, 99, 142, 186, 189], "1600": [12, 223, 237], "grow": [12, 51, 104, 139, 141, 148, 204], "unrealist": 12, "decompos": [12, 20, 136, 193, 280], "combin": [12, 37, 57, 62, 90, 92, 95, 97, 102, 103, 106, 109, 110, 131, 135, 136, 141, 143, 144, 146, 154, 164, 170, 174, 177, 180, 182, 193, 194, 206, 207, 223, 238, 265, 276], "classifi": [12, 14, 25, 33, 44, 47, 48, 49, 54, 59, 77, 84, 90, 95, 97, 102, 119, 125, 129, 135, 138, 144, 160, 165, 182, 183, 196, 197, 221, 253, 258, 259], "accompani": 12, "comment": [12, 152, 167, 182, 212, 224, 271, 283], "sacrif": [12, 174], "max_pool2d": [12, 95, 136, 179, 228], "mostli": [12, 87, 92, 102, 143, 180, 182], "alia": [12, 100], "worri": [12, 54, 104, 147, 150, 167, 180, 207], "my_op": 12, "squeez": [12, 16, 100, 187, 264], "max": [12, 13, 51, 54, 84, 95, 97, 136, 142, 152, 176, 187, 189, 193, 197, 238, 253, 256, 257, 264, 276, 280, 284], "op_backward": 12, "proper": [12, 32, 137, 140, 150, 161, 176, 180, 189, 194, 238, 271], "rare": [12, 17, 51, 125, 170, 182, 238], "assumpt": [12, 16, 77, 102, 109, 110, 164, 170], "myadd_schema": 12, "train": [12, 14, 19, 20, 22, 32, 36, 37, 38, 42, 44, 47, 48, 49, 53, 56, 58, 59, 62, 64, 65, 67, 69, 70, 71, 74, 75, 77, 84, 87, 93, 94, 96, 97, 100, 102, 103, 105, 107, 109, 110, 112, 118, 129, 130, 131, 132, 135, 136, 138, 139, 142, 145, 146, 150, 161, 162, 164, 165, 168, 169, 172, 173, 175, 178, 179, 180, 181, 183, 186, 189, 190, 191, 193, 196, 200, 202, 203, 204, 205, 206, 207, 213, 222, 225, 228, 236, 239, 240, 243, 253, 257, 258, 259, 260, 262, 263, 273, 280], "my_add": 12, "_xlac": 12, "torch_xla_sourc": 12, "include_dir": [12, 173], "library_dir": 12, "extra_link_arg": 12, "make_relative_rpath": 12, "seamlessli": [12, 16, 55, 140, 194, 197, 223, 248], "nm": [12, 212], "torchvsion": 12, "torchvis": [12, 14, 34, 36, 38, 42, 44, 45, 52, 59, 90, 93, 95, 96, 99, 101, 102, 125, 132, 135, 136, 137, 157, 167, 175, 178, 179, 183, 186, 187, 189, 191, 212, 213, 228, 236, 238, 241, 246, 252, 253, 259, 264, 278], "adhoc": 12, "unbox": 12, "potenti": [12, 16, 77, 92, 103, 137, 139, 145, 170, 179, 191, 193, 196, 242, 248, 250, 262, 278, 284], "wiki": [12, 156, 168], "suit": [12, 93, 117, 176, 211, 275], "ship": [12, 45, 95], "delet": [12, 85, 141, 150, 167, 172, 180, 189, 264], "old": [12, 119, 139, 174, 186, 276], "won": [12, 44, 110, 118, 136, 147, 156, 164, 169, 176, 193, 194, 222, 275], "until": [12, 51, 84, 92, 137, 139, 143, 144, 152, 153, 158, 167, 170, 176, 178, 179, 180, 186, 223, 260, 271], "interrupt": [12, 55, 90, 182], "quarterli": 12, "cadenc": 12, "announc": 12, "slack": [12, 45], "com": [12, 22, 25, 51, 115, 136, 143, 144, 146, 182, 190, 196, 221, 223, 253, 264], "Not": [12, 150, 175, 257], "search": [12, 22, 51, 133, 135, 142, 158, 174, 193, 256, 264], "instantiate_device_type_test": 12, "testtorchdevicetyp": 12, "testviewop": 12, "testtensordeviceop": 12, "testtypepromot": 12, "__reduce_ex__": 12, "monkei": 12, "direct": [12, 32, 44, 48, 54, 77, 92, 93, 95, 101, 109, 128, 142, 152, 156, 160, 164, 168, 182, 204, 251, 258, 263, 264, 274], "view": [12, 13, 16, 17, 19, 52, 55, 57, 58, 62, 84, 93, 95, 99, 100, 106, 109, 110, 112, 118, 119, 136, 139, 140, 142, 148, 149, 150, 152, 158, 172, 173, 178, 179, 180, 181, 182, 187, 203, 205, 206, 207, 210, 219, 221, 229, 236, 254, 260, 262, 276], "vice": [12, 41, 50], "versa": [12, 41, 50], "Such": [12, 13, 92], "seamless": [12, 194, 206, 284], "coverag": [12, 156, 159, 161, 222, 276, 278], "math": [12, 69, 87, 92, 106, 118, 164, 175, 210, 238], "comprehens": [12, 25, 41, 50, 93, 115, 158, 193, 210, 237, 238], "refactor": [12, 119, 148], "reus": [12, 67, 110, 118, 147, 156, 168, 177, 194, 238, 242, 243, 256], "codegen": [12, 158, 210], "dev": [12, 104, 145, 175, 186, 189, 191, 219, 222, 284], "andrew": 13, "gu": 13, "shard": [13, 131, 135, 148, 205, 206, 207, 258, 260], "saw": [13, 16, 37, 51, 95, 97, 100, 104, 106, 156, 159, 160], "skeleton": [13, 16, 235], "implicitli": [13, 44, 51, 92, 136, 147, 181, 193, 219], "schedul": [13, 84, 90, 101, 125, 129, 136, 137, 138, 150, 172, 177, 186, 196, 228, 238, 245, 256, 258, 259], "synchron": [13, 19, 57, 58, 84, 136, 138, 150, 152, 176, 178, 179, 186, 191, 204, 219, 222, 223, 251, 257, 262, 263], "rank": [13, 19, 22, 46, 55, 57, 84, 130, 135, 136, 137, 138, 139, 150, 152, 172, 173, 178, 179, 180, 194, 204, 205, 207, 256, 257, 260, 262], "commun": [13, 17, 22, 57, 135, 136, 137, 138, 140, 142, 148, 149, 150, 172, 173, 176, 178, 179, 180, 186, 189, 193, 194, 206, 207, 238, 258, 260, 262, 266, 284], "particip": [13, 97, 149, 179, 222, 238], "group": [13, 22, 25, 51, 62, 85, 97, 100, 117, 131, 135, 136, 137, 138, 139, 144, 146, 148, 150, 152, 158, 172, 186, 194, 196, 197, 204, 205, 207, 210, 223, 253, 256, 257, 262], "fewer": [13, 146, 159], "hang": [13, 57, 144], "facilit": [13, 16, 51, 93, 100, 102, 119, 134, 135, 138, 140, 153, 238, 276, 279], "earli": [13, 54, 90, 150, 152, 170, 210, 273], "shadow": 13, "hook": [13, 138, 140, 145, 150, 174, 183, 210, 229, 259], "dist": [13, 22, 136, 137, 139, 150, 152, 168, 172, 173, 179, 204, 205, 207, 257, 260, 262], "mp": [13, 17, 33, 38, 41, 55, 57, 64, 77, 100, 118, 125, 135, 136, 137, 150, 152, 178, 179, 180, 196, 204, 205, 257], "ddp": [13, 19, 55, 56, 62, 135, 136, 137, 138, 140, 149, 186, 207, 257], "nccl": [13, 22, 55, 57, 84, 136, 137, 139, 140, 152, 186, 194, 205, 207, 260, 262], "world_siz": [13, 19, 22, 25, 55, 57, 136, 137, 139, 150, 152, 172, 173, 178, 179, 180, 204, 205, 207, 257, 260, 262], "num_input": 13, "master_addr": [13, 22, 55, 57, 136, 139, 150, 152, 173, 178, 179, 180, 204, 205, 257, 262], "localhost": [13, 22, 55, 57, 99, 136, 139, 150, 173, 178, 179, 180, 186, 187, 194, 204, 205, 207, 236, 247, 257], "master_port": [13, 22, 55, 57, 136, 139, 150, 152, 173, 178, 179, 180, 204, 205, 257, 262], "29500": [13, 22, 152, 173, 178, 179, 180, 257], "init_process_group": [13, 19, 22, 55, 57, 136, 137, 139, 150, 152, 172, 173, 204, 205, 207, 257, 260, 262], "device_id": [13, 57, 119, 137, 138, 150, 257], "nproc": [13, 55, 57, 136, 150, 178, 180, 204, 205, 257, 260], "arbitrarili": [13, 51, 102, 229], "togeth": [13, 20, 33, 39, 51, 53, 62, 87, 95, 97, 100, 101, 102, 106, 110, 136, 138, 146, 150, 153, 154, 170, 178, 180, 182, 189, 197, 237, 250, 280], "lr": [13, 25, 48, 54, 69, 90, 95, 110, 118, 119, 125, 129, 136, 137, 138, 150, 152, 158, 160, 177, 178, 179, 180, 187, 202, 204, 205, 210, 212, 236, 245, 246, 257, 258, 259], "notabl": [13, 90, 235], "divide_by_initial_world_s": 13, "world": [13, 16, 22, 38, 56, 92, 100, 104, 140, 152, 157, 160, 173, 177, 178, 179, 193, 194, 204, 205, 207, 211, 262, 276], "nonetheless": [13, 102], "mind": [13, 41, 51, 54, 87, 102, 149, 164], "preliminari": [13, 152], "delv": [13, 158, 250], "deeper": [13, 14, 38, 93, 100, 102, 104, 157, 158, 181, 193, 203, 210], "insight": [13, 77, 84, 134, 152, 181, 223, 237], "prepar": [13, 20, 45, 53, 54, 70, 71, 99, 107, 118, 119, 154, 167, 172, 173, 176, 178, 213, 228, 242, 278, 280], "join_hook": 13, "kwarg": [13, 119, 138, 157, 161, 176, 179, 193, 194, 202, 210, 253, 275], "join_devic": 13, "join_process_group": 13, "processgroup": [13, 19, 22, 62, 131, 135, 140, 180, 194, 207, 238, 262], "throw_on_early_termin": 13, "explain": [13, 14, 20, 44, 48, 54, 77, 93, 104, 110, 128, 139, 140, 158, 191, 193, 198, 228, 248, 253, 265, 275, 278, 280], "joinconfig": 13, "_join_config": 13, "main_hook": 13, "repeatedli": [13, 97, 176, 180, 263], "post_hook": 13, "is_last_join": 13, "broadcast": [13, 70, 110, 118, 138, 150, 152, 173, 193, 237, 257], "itself": [13, 32, 33, 44, 84, 87, 95, 97, 100, 102, 106, 107, 110, 115, 119, 128, 140, 141, 143, 147, 152, 160, 176, 179, 180, 182, 194, 222, 228, 252], "vacuou": 13, "contextlib": [13, 189], "nullcontext": 13, "relat": [13, 16, 54, 92, 93, 100, 101, 106, 109, 134, 135, 140, 158, 168, 193, 197, 223, 238, 275], "conform": [13, 189], "interleav": [13, 260], "syncbatchnorm": [13, 57], "proce": [13, 102, 104, 158, 193, 238, 262], "__exit__": 13, "heartbeat": 13, "notify_join_context": 13, "serializ": 13, "proceed": [13, 48, 102, 115, 170], "overlap": [13, 58, 136, 137, 138, 143, 148, 150, 170, 186, 189, 238, 260], "moreov": [13, 170, 212, 223, 271], "permit": [13, 222], "customiz": [13, 153], "idea": [13, 25, 77, 87, 102, 104, 105, 106, 109, 118, 140, 146, 153, 158, 168, 177, 180, 182, 219, 223, 238, 256, 257, 271, 283], "counterjoinhook": 13, "sync_max_count": 13, "all_reduc": [13, 62, 136, 137, 152, 173, 206, 262], "get_rank": [13, 138, 150, 152], "process_group": [13, 207, 262], "common_rank": 13, "find_common_rank": 13, "max_count": 13, "__call__": [13, 53, 174], "increment": [13, 87, 106, 110, 152, 177], "meth": [13, 16], "to_consid": 13, "reduceop": [13, 136, 137, 152], "device_count": [13, 55, 57, 90, 100, 136, 150, 204, 205, 207], "highlight": [13, 51, 87, 111, 122, 131, 137, 138, 181, 186, 191, 193, 194, 212, 250], "alexi": 14, "jacq": 14, "winston": 14, "her": [14, 173], "leon": 14, "gati": 14, "alexand": [14, 278], "ecker": 14, "matthia": 14, "bethg": 14, "artist": 14, "distanc": [14, 64, 65, 69, 70, 71, 74, 75, 92, 102, 118], "d_c": 14, "d_": 14, "measur": [14, 37, 84, 92, 93, 95, 97, 102, 109, 136, 139, 154, 157, 159, 170, 176, 177, 181, 184, 191, 211, 222, 223, 228, 237, 243, 252, 258, 264, 275], "indispens": [14, 176], "pil": [14, 42, 53, 175, 189, 196], "pretrain": [14, 25, 44, 77, 93, 109, 125, 135, 175, 182, 189, 212, 252, 253, 278], "longer": [14, 54, 60, 61, 92, 104, 110, 112, 118, 129, 138, 141, 145, 158, 167, 174, 177, 178, 191, 193, 201, 203, 215, 216, 217, 218, 220, 223, 238, 268, 269, 275, 276, 277], "resiz": [14, 48, 54, 153, 212, 246], "unabl": [14, 18, 154, 169, 193, 273], "caff": 14, "picasso": 14, "jpg": [14, 34, 53, 54, 93], "reconvert": 14, "f_": [14, 176], "xl": [14, 211], "l": [14, 16, 44, 53, 54, 92, 104, 128, 176, 177, 193, 223, 252, 262], "w_": [14, 109], "squar": [14, 37, 48, 53, 64, 65, 69, 70, 71, 74, 75, 92, 95, 97, 100, 102, 118, 146, 147, 160, 168, 177, 181], "contentloss": 14, "recomput": [14, 102, 146, 148, 168, 238], "act": [14, 44, 51, 92, 97, 100, 142, 153, 174, 177, 179, 193, 194], "gram": 14, "g_": 14, "hat": [14, 107], "counteract": 14, "matric": [14, 20, 41, 50, 92, 106, 159, 168, 200, 280], "pool": [14, 22, 54, 95, 97, 102, 110, 119, 187, 194], "impact": [14, 20, 37, 90, 102, 153, 170, 178, 181, 221, 256, 257, 264, 280], "tend": [14, 20, 92, 97, 102, 264, 280], "almost": [14, 107, 109, 136, 140, 153, 175, 193, 242, 264], "sl": 14, "19": [14, 20, 42, 95, 158, 177, 193, 211, 228, 264, 265, 280], "vgg": 14, "child": [14, 117, 186, 207], "connect": [14, 48, 90, 95, 97, 109, 125, 135, 139, 140, 152, 156, 157, 164, 174, 175, 177, 197, 198, 207, 225, 262], "eval": [14, 20, 25, 39, 51, 110, 119, 136, 137, 146, 179, 182, 189, 190, 212, 246, 253, 278, 280], "485": [14, 53, 102, 175], "456": [14, 53, 102, 175], "406": [14, 53, 102, 175], "229": [14, 53, 102, 175], "224": [14, 53, 102, 175, 189, 212, 213, 246, 253, 256, 278], "225": [14, 53, 102, 117, 175], "vgg19": [14, 161], "maxpool2d": [14, 48, 95, 119, 157, 187], "align": [14, 135, 181, 182, 210, 219, 263, 272], "depth": [14, 44, 54, 58, 92, 95, 100, 106, 141, 158, 193, 198, 202, 238], "immedi": [14, 22, 41, 50, 54, 97, 100, 107, 152, 167, 178, 179, 186, 264], "white": [14, 18, 20, 77, 95, 97, 110, 187, 189, 280], "input_img": 14, "content_img": 14, "bfg": 14, "closur": [14, 193, 198], "reevalu": 14, "exce": [14, 77, 146, 194], "sphinx_gallery_thumbnail_numb": 14, "neural_style_tutori": [14, 21, 259], "paszk": [15, 152, 177], "dziedzic": 15, "shall": [15, 48, 54], "learnabl": [15, 48, 69, 118, 119, 240], "particularli": [15, 20, 55, 110, 168, 182, 238, 275, 280], "badfftfunct": 15, "literatur": [15, 177], "confusingli": 15, "correl": [15, 84, 97, 110, 158], "filter": [15, 25, 51, 85, 93, 102, 141, 182, 194, 237, 262], "flip": [15, 159], "wrt": [15, 147], "numpy_extensions_tutori": [15, 21, 259], "freeli": 16, "inspir": [16, 152, 159, 164, 181, 283], "v1": [16, 20, 161, 177, 178, 180, 223, 280], "openai": [16, 132, 135, 160, 176, 177, 178, 180, 253], "farama": [16, 176], "gymnasium": [16, 176, 177], "encount": [16, 51, 137, 145, 158, 191, 193, 194, 197, 238, 247, 253, 279], "undertaken": 16, "broader": 16, "wider": [16, 159], "algebra": [16, 41, 50, 95, 100, 104, 211], "acquaint": 16, "set_se": 16, "avenu": [16, 87], "backpropag": [16, 37, 38, 44, 48, 51, 77, 92, 103, 104, 105, 107, 109, 110, 118, 128, 141, 160, 194], "_set_se": 16, "torqu": 16, "upward": 16, "posit": [16, 93, 97, 104, 130, 135, 168, 176, 177, 181, 182, 189, 193, 197, 221, 256, 262, 280], "angular": 16, "stand": [16, 87, 92, 95, 110, 160, 197, 274], "equat": [16, 54, 177, 225, 229], "motion": 16, "veloc": [16, 177], "theta": [16, 77, 104, 176], "_t": [16, 160], "theta_t": 16, "dt": 16, "rad": 16, "sec": [16, 136], "gravit": 16, "mass": 16, "accord": [16, 17, 25, 32, 100, 101, 119, 158, 160, 172, 174, 177, 181, 189, 200, 247, 274], "theta_": [16, 160], "001": [16, 25, 95, 119, 150, 178, 187, 210, 212, 246], "deleg": [16, 135], "is_shar": 16, "new_th": 16, "th": [16, 53, 104, 109, 152, 160], "plu": [16, 104], "new_thdot": 16, "neg": [16, 37, 51, 93, 97, 103, 104, 110, 111, 158, 170, 174, 176, 210, 221], "inde": [16, 18, 102, 146, 159, 170, 176, 181, 191, 194, 223, 273, 274], "discourag": [16, 41, 50, 176], "possibli": [16, 54, 138, 176, 193, 248, 262], "omit": [16, 92, 117, 138, 158, 176, 197, 228, 235, 237], "agent": [16, 132, 135, 177, 178, 180, 183, 259], "albeit": 16, "param": [16, 53, 119, 136, 137, 138, 147, 150, 152, 154, 156, 169, 179, 180, 210, 235, 257, 271], "mandatori": [16, 156, 176], "domain": [16, 25, 34, 38, 51, 52, 77, 101, 115, 135, 176, 190, 238, 276], "accur": [16, 77, 90, 95, 117, 142, 157, 170, 180, 191, 251, 273, 278], "lazili": [16, 167], "costli": [16, 141, 238], "observation_spec": [16, 176], "compositespec": 16, "dictionari": [16, 38, 39, 51, 84, 109, 112, 119, 144, 167, 169, 176, 178, 179, 182, 189, 194, 227, 240, 258, 263], "action_spec": [16, 176], "reward_spec": [16, 176], "done_spec": 16, "input_spec": [16, 176], "state_spec": 16, "output_spec": 16, "neither": [16, 100, 256], "shortcut": 16, "tensorspec": 16, "irrelev": [16, 173], "incorpor": [16, 102, 111, 135, 153, 181], "pseudo": [16, 25], "_make_spec": 16, "pendulumenv": 16, "gen_param": 16, "batch_lock": 16, "homonym": [16, 170], "check_env_spec": [16, 176], "coupl": [16, 36, 51, 96, 100, 101, 109, 137, 147, 153, 154, 167, 170, 187, 193, 238], "rand_step": 16, "randomli": [16, 45, 53, 54, 74, 75, 90, 95, 97, 118, 144, 160, 177, 182, 194], "slightli": [16, 137, 152, 153, 170, 175, 182, 223, 238, 274], "invers": [16, 95, 100, 263, 272], "thdot": 16, "effort": [16, 51, 53, 54, 115, 237], "summar": [16, 51, 53, 110, 122, 128, 137, 142, 186, 193], "_apply_transform": 16, "_call": 16, "inv": 16, "_inv_apply_transform": 16, "eventu": [16, 139, 146, 153], "out_keys_inv": 16, "replai": [16, 160], "unitari": 16, "sine": [16, 95, 118], "cosin": [16, 211], "raw": [16, 33, 45, 51, 70, 84, 95, 118, 198, 251, 262], "del_kei": 16, "mdp": 16, "gather": [16, 57, 93, 99, 136, 138, 140, 150, 152, 153, 157, 176, 198, 222, 260, 283, 284], "unexplor": 16, "abil": [16, 100, 110, 119, 140, 141, 152, 184, 187, 191, 197, 273], "fly": [16, 53, 103, 176, 197], "recreat": [16, 32, 44], "Of": [16, 102, 106, 110, 141, 152, 187, 219, 252, 272, 274], "clip": [16, 51, 77, 95, 176], "scratch": [16, 32, 44, 51, 55, 102, 103, 119, 122, 125, 135, 183, 239, 258, 259, 262], "advanc": [17, 20, 21, 44, 90, 105, 108, 111, 112, 114, 115, 129, 130, 131, 134, 135, 138, 150, 170, 189, 194, 197, 206, 212, 238, 256, 258, 259, 271, 274, 275, 278, 280, 281, 283, 284], "verif": [17, 179], "rapid": [17, 92, 274], "manufactur": 17, "bit": [17, 70, 95, 100, 117, 118, 153, 175, 176, 182, 194, 200, 213, 223, 264, 271], "imposs": [17, 95, 103, 167, 283], "simultan": [17, 32, 44, 58, 142, 152, 170, 175, 238], "began": 17, "lack": [17, 84, 93, 206, 271], "enhanc": [17, 93, 129, 130, 139, 143, 170, 184, 200, 238, 253, 256, 266, 275, 279], "rapidli": 17, "situat": [17, 92, 100, 138, 146, 147, 150, 152, 196, 264], "wrapper_custom_tensor_add": 17, "torch_fn": 17, "custom_cpu_fallback": 17, "operatorhandl": 17, "hint": [17, 22, 92, 102, 103, 107, 115, 141, 152, 178, 186, 193, 198, 210], "cpu_fallback": 17, "cppfunction": 17, "makefromboxedfunct": 17, "cumtomselufunct": 17, "selu": 17, "wrapper_autogradcumstom__selu": 17, "wrapper_autogradcustom__selu": 17, "autocastprivateuse1": 17, "autocast": [17, 200, 212, 246, 275, 280], "kernel_privateuseon": 17, "makefallthrough": 17, "backendmodul": 17, "_register_device_modul": 17, "backend_nam": 17, "get_amp_supported_dtyp": 17, "is_autocast_en": 17, "get_autocast_dtyp": 17, "set_autocast_dtyp": 17, "set_autocast_en": 17, "generatorimpl": 17, "builder": [17, 193], "register_generator_privateuse1": 17, "customgeneratorimpl": 17, "make_custom_gener": 17, "deviceindex": 17, "device_index": 17, "make_gener": 17, "make_cumstom_gener": 17, "stream": [17, 84, 100, 103, 138, 170, 175, 210, 212, 265], "event": [17, 84, 117, 136, 137, 178, 191, 228, 236, 251, 262], "deviceguard": 17, "deviceguardimplinterfac": 17, "c10_register_guard_impl": 17, "customguardimpl": 17, "backend_meta_": 17, "extrameta": 17, "backendmeta": 17, "custombackendmetadata": 17, "unordered_map": 17, "tensorbackendmetaregistri": 17, "for_seri": 17, "for_deseri": 17, "expand": [17, 92, 106, 112, 158, 165, 187, 204, 253, 276], "benchmark": [17, 20, 25, 34, 117, 135, 142, 154, 158, 159, 170, 175, 181, 191, 197, 210, 228, 234, 237, 238, 248, 253, 256, 258, 259, 264, 275, 276, 278, 280], "timer": [17, 54, 154, 182, 202, 210, 226, 234, 259, 280], "ascend": [17, 54, 85, 279], "npu": [17, 278, 279], "meet": [17, 52, 54, 213, 223], "usabl": [17, 119, 128, 153, 239, 262], "compli": 17, "habit": 17, "torch_npu": [17, 279], "exclus": [17, 174], "rename_privateuse1_backend": 17, "register_privateuse1_backend": 17, "unsupported_dtyp": 17, "quint8": 17, "generate_methods_for_privateuse1_backend": 17, "for_tensor": 17, "for_modul": 17, "for_storag": 17, "is_npu": 17, "perhap": [18, 77, 143, 174, 205], "prevent": [18, 37, 51, 57, 110, 117, 141, 144, 150, 158, 160, 170, 193, 194, 222, 223, 238, 243, 256, 279], "custom_op": [18, 115, 250], "land": [18, 134, 135, 145, 160, 197, 212, 257, 273], "everyth": [18, 44, 90, 100, 102, 104, 128, 133, 142, 143, 147, 153, 175, 176, 177, 178, 182, 187, 194, 263], "induc": [18, 174, 262], "bad": [18, 90, 141, 238, 264], "uncom": [18, 51, 53, 65, 75, 95, 99, 106, 110, 118, 172, 177], "cropped_img": 18, "img": [18, 93, 95, 135, 187, 189], "black": [18, 77, 84, 95, 97, 110, 134, 135, 140, 142, 178, 182], "aka": [18, 159, 161, 170, 197, 212, 252], "mutates_arg": 18, "led": 18, "messag": [18, 51, 92, 115, 145, 152, 189, 193, 200, 256], "past": [18, 51, 52, 101, 106, 193, 197], "exercis": [18, 45, 152, 222], "reader": [18, 107, 152, 197, 237], "region": [18, 93, 100, 129, 142, 157, 184, 189, 196, 219, 222, 226, 238, 245, 249, 251, 258, 259], "unus": [18, 158, 173], "forgot": [18, 262], "python_custom_op": [18, 21, 259], "pritam": 19, "damania": 19, "yi": [19, 193, 242, 252], "wang": [19, 25, 112, 114, 115, 158, 160, 262], "distributeddataparallel": [19, 57, 58, 62, 131, 136, 137, 138, 152, 173, 180, 222, 257], "paradigm": [19, 20, 62, 102, 118, 131, 179, 180, 280], "techniqu": [19, 20, 51, 62, 102, 103, 109, 111, 130, 135, 140, 146, 147, 148, 157, 165, 168, 170, 172, 174, 180, 189, 194, 197, 198, 238, 253, 256, 264, 271, 276, 280], "embed": [19, 51, 97, 103, 105, 107, 108, 119, 135, 137, 138, 140, 172, 179, 180, 182, 187, 197, 206, 259, 260], "dens": [19, 20, 194, 197, 271, 276, 280], "fc": [19, 44, 160], "replic": [19, 22, 58, 62, 135, 136, 140, 148, 150, 152, 179, 180, 194, 207], "trainer": [19, 25, 57, 142, 148, 178, 179, 180, 205, 280], "hybrid": [19, 86, 88, 207, 259], "pipedream": 19, "master": [19, 136, 152, 157, 161, 179, 180, 196, 212, 262], "embeddingbag": [19, 22], "drive": [19, 54, 92, 95, 97, 135, 160, 170, 271], "respond": [19, 93, 160, 179], "amongst": [19, 194, 272], "themselv": [19, 97, 194, 198, 273], "remotemodul": 19, "kick": [19, 32, 44, 167, 178, 179, 180], "remot": [19, 62, 131, 142, 178, 179, 180, 186, 219, 247, 256], "hybridmodel": 19, "allreduc": [19, 84, 136, 140, 150, 173, 238, 262], "firstli": [19, 115, 158, 177], "tcp": [19, 57, 139, 148, 149, 152], "init_method": [19, 150, 152, 260], "_run_train": [19, 180], "rpc_async": [19, 178, 180], "exit": [19, 156, 178, 179, 180, 202, 203, 210, 213, 249, 254, 256, 262], "port": [19, 139, 152, 179, 194, 219, 247, 262], "conflict": [19, 158, 193], "remote_emb_modul": 19, "rref": [19, 178, 179], "distributedoptim": [19, 179, 180], "remote_paramet": 19, "cannnot": 19, "crossentropyloss": [19, 37, 95, 104, 140, 172, 180, 187, 212, 246], "get_next_batch": [19, 178, 180], "jess": [20, 280], "cai": [20, 280], "seek": [20, 87, 93, 206, 280], "expens": [20, 41, 102, 117, 180, 193, 228, 237, 251, 264, 280], "accuraci": [20, 25, 38, 45, 95, 101, 102, 110, 130, 131, 133, 135, 136, 137, 138, 142, 164, 174, 175, 179, 184, 187, 189, 211, 222, 236, 241, 258, 278, 280], "grain": [20, 34, 92, 137, 152, 186, 191, 222, 223, 237, 280], "pattern": [20, 97, 99, 135, 140, 152, 158, 168, 179, 207, 212, 213, 242, 271, 273, 278, 280], "2n": [20, 280], "degrad": [20, 77, 242, 280], "sparsifi": [20, 130, 135, 174, 280], "answer": [20, 37, 93, 97, 104, 152, 157, 167, 182, 193, 194, 280], "tune": [20, 37, 84, 102, 110, 120, 130, 133, 135, 136, 142, 145, 175, 226, 234, 237, 256, 258, 259, 264, 275, 278, 280], "recov": [20, 136, 137, 150, 161, 280], "nearli": [20, 110, 187, 223, 280], "f1": [20, 191, 280], "86": [20, 158, 175, 180, 197, 210, 211, 223, 280], "92": [20, 211, 223, 280], "3x": [20, 65, 118, 200, 222, 238, 280], "speedup": [20, 45, 118, 135, 154, 158, 169, 197, 211, 238, 243, 252, 264, 275, 276, 280], "nvidia": [20, 52, 146, 152, 161, 191, 207, 222, 238, 258, 280], "beginn": [20, 35, 40, 46, 47, 49, 66, 72, 76, 79, 80, 81, 82, 86, 88, 94, 96, 98, 105, 108, 113, 116, 118, 120, 131, 135, 199, 230, 231, 232, 233, 280], "to_sparse_semi_structur": [20, 280], "mask": [20, 93, 97, 117, 132, 135, 153, 168, 174, 181, 189, 196, 212, 253, 264, 271, 272, 274, 276, 280, 284], "motiv": [20, 77, 139, 158, 179, 265, 272, 273, 276, 280], "affect": [20, 93, 97, 101, 102, 147, 170, 172, 238, 280], "gain": [20, 84, 186, 260, 280, 284], "swap": [20, 53, 104, 140, 170, 176, 197, 235, 264, 276, 280], "compress": [20, 93, 174, 271, 274, 278, 280], "arrang": [20, 118, 280], "drawback": [20, 109, 193, 204, 205, 280], "2020": [20, 280], "amper": [20, 137, 164, 169, 222, 280], "cutlass": [20, 275, 280], "cusparselt": [20, 280], "milder": [20, 280], "account": [20, 52, 110, 153, 167, 170, 182, 187, 197, 252, 278, 280], "retrain": [20, 280], "sweet": [20, 280], "spot": [20, 95, 99, 100, 143, 280], "2x": [20, 87, 135, 147, 167, 211, 280], "theoret": [20, 54, 170, 243, 271, 280], "granular": [20, 137, 158, 194, 228, 238, 256, 280], "fp16": [20, 137, 161, 264, 275, 280], "resnet": [20, 44, 45, 93, 141, 186, 238, 280], "imagenet": [20, 45, 53, 93, 125, 175, 280], "76": [20, 161, 180, 197, 210, 223, 280], "resnext": [20, 280], "101_32x8d": [20, 280], "79": [20, 95, 158, 210, 223, 228, 280], "xception": [20, 280], "ssd": [20, 238, 280], "rn50": [20, 280], "coco2017": [20, 280], "bbap": [20, 280], "24": [20, 95, 158, 175, 197, 211, 223, 280], "maskrcnn": [20, 280], "37": [20, 95, 117, 175, 180, 210, 211, 228, 280], "fairseq": [20, 280], "en": [20, 156, 168, 182, 189, 280], "wmt14": [20, 280], "bleu": [20, 280], "squad": [20, 280], "91": [20, 95, 180, 211, 223, 280], "workflow": [20, 36, 84, 89, 90, 111, 135, 136, 194, 199, 274, 280], "perspect": [20, 106, 176, 256, 280], "subproblem": [20, 280], "bmatrix": [20, 107, 280], "handoff": [20, 280], "anticip": [20, 280], "area": [20, 93, 97, 132, 187, 196, 221, 264, 274, 280], "littl": [20, 54, 95, 102, 104, 110, 153, 176, 178, 180, 181, 184, 186, 280], "colab": [20, 22, 25, 36, 41, 50, 96, 99, 110, 135, 152, 153, 159, 176, 177, 189, 194], "pip": [20, 25, 52, 84, 93, 99, 112, 114, 160, 175, 177, 186, 189, 191, 196, 211, 213, 221, 223, 225, 228, 236, 239, 240, 241, 242, 243, 250, 256, 262, 264, 278], "panda": [20, 53, 77, 189], "hug": [20, 158], "face": [20, 45, 53, 54, 77, 158, 253], "token": [20, 51, 109, 137, 140, 144, 172, 181, 182, 197, 238, 253, 280], "span": [20, 103, 150, 186, 219, 280], "segment": [20, 135, 197, 264, 280], "text": [20, 34, 45, 54, 77, 87, 93, 103, 104, 106, 107, 109, 128, 135, 137, 143, 144, 152, 165, 170, 176, 177, 182, 186, 189, 197, 219, 221, 253, 280], "wikipedia": [20, 156, 168, 280], "articl": [20, 34, 280], "score": [20, 51, 93, 103, 107, 109, 117, 181, 182, 196, 197, 221, 253, 260, 280], "fair": [20, 102, 276, 280], "remov": [20, 51, 54, 55, 85, 110, 115, 117, 122, 138, 141, 150, 158, 167, 175, 181, 182, 189, 190, 191, 193, 194, 197, 223, 237, 264, 271, 272, 276, 280], "lowest": [20, 136, 174, 280], "l1": [20, 90, 174, 280], "ao": [20, 264, 278, 280], "satisfi": [20, 142, 238, 280], "anytim": [20, 280], "pruner": [20, 280], "update_mask": [20, 280], "shot": [20, 178, 253, 280], "wouldn": [20, 109, 136, 153, 280], "squash_mask": [20, 280], "left": [20, 32, 44, 48, 51, 54, 65, 87, 92, 99, 100, 104, 109, 118, 119, 152, 160, 164, 176, 177, 179, 181, 186, 187, 219, 280], "quickstart": [20, 32, 33, 34, 35, 36, 37, 39, 41, 42, 135, 280], "28x": [20, 280], "16": [20, 25, 42, 90, 95, 97, 102, 119, 150, 153, 161, 175, 180, 187, 189, 193, 196, 204, 205, 210, 211, 223, 228, 252, 253, 264, 275, 280], "amen": [20, 280], "spent": [20, 84, 181, 186, 223, 228, 243, 280], "slower": [20, 58, 150, 170, 175, 177, 191, 196, 264, 265, 276, 280], "counterpart": [20, 158, 193, 207, 212, 280], "delta": [20, 158, 177, 223, 237, 280], "exact": [20, 102, 119, 146, 181, 193, 197, 202, 262, 280], "78": [20, 210, 223, 280], "53": [20, 95, 161, 210, 211, 228, 280], "44": [20, 95, 158, 180, 280], "09": [20, 51, 158, 180, 211, 280], "93": [20, 117, 180, 211, 223, 228, 280], "49": [20, 95, 161, 180, 210, 223, 280], "15": [20, 25, 42, 46, 77, 95, 97, 125, 187, 189, 196, 210, 211, 223, 228, 234, 245, 259, 280], "54": [20, 95, 161, 210, 223], "71x": 20, "35": [20, 42, 140, 161, 210, 211], "74": [20, 95, 180, 210, 211, 223, 228], "23x": 20, "72": [20, 175, 210, 223, 228], "71": [20, 53, 95, 158, 180, 210], "59": [20, 154, 175, 189, 210, 223, 228], "41": [20, 136, 175, 210, 223, 228], "22x": 20, "286": [20, 161, 189, 280], "65": [20, 42, 53, 180, 196, 197, 210, 223], "247": [20, 180], "63": [20, 210, 228], "14x": 20, "46": [20, 158, 161, 175, 210], "02x": 20, "ye": [20, 52, 167, 250], "47": [20, 90, 95, 161, 210, 211, 223, 228], "68": [20, 53, 95, 158, 210, 223], "18x": [20, 280], "36": [20, 95, 175, 210, 211], "13x": 20, "159": 20, "22": [20, 95, 158, 161, 180, 210, 211, 223], "142": [20, 211], "23": [20, 95, 158, 180, 210, 211, 223, 228, 237], "12x": [20, 197], "sparsesemistructuredtensor": [20, 280], "semi_structured_spars": [20, 21, 259], "00": [21, 40, 42, 49, 66, 72, 76, 88, 95, 98, 108, 116, 117, 120, 158, 180, 183, 189, 211, 228, 234, 245, 259, 264, 266, 281], "011": 21, "mem": [21, 40, 49, 66, 72, 76, 84, 88, 98, 108, 116, 117, 120, 183, 228, 234, 245, 259, 281], "mb": [21, 40, 49, 66, 72, 76, 88, 98, 108, 116, 117, 120, 136, 183, 228, 234, 245, 257, 259, 281], "torchrl": [21, 132, 135, 153, 160, 183, 259], "ddpg": [21, 132, 135, 259], "pendulum": [21, 132, 135, 176, 259], "scipi": [21, 45, 147, 191, 259], "acceler": [21, 33, 38, 41, 50, 51, 52, 59, 62, 64, 77, 102, 114, 118, 125, 135, 143, 150, 152, 161, 170, 183, 196, 198, 200, 203, 211, 212, 213, 238, 259, 276, 281, 284], "bert": [21, 97, 135, 136, 259, 278, 284], "semi": [21, 132, 135, 197, 259, 284], "sparsiti": [21, 109, 135, 174, 259, 271, 273, 281, 284], "000": [21, 34, 40, 66, 72, 98, 116, 120, 142, 160, 161, 183, 187, 189, 234, 259, 281], "supervis": [21, 104, 132, 135, 184, 189, 259], "usb": [21, 132, 135, 175, 259], "usb_semisup_learn": [21, 25, 259], "embeddingplann": [22, 135], "conda": [22, 84, 93, 99, 152, 158, 221, 236, 237, 256, 262, 264, 284], "cudatoolkit": 22, "sudo": [22, 186], "rm": 22, "miniconda3": [22, 237], "py37_4": 22, "x86_64": 22, "sh": [22, 150, 219], "anaconda": [22, 84, 93, 152, 236], "miniconda": 22, "chmod": 22, "fbgemm": [22, 194], "ipython": [22, 117], "cp": [22, 260], "restart": [22, 93, 99, 149, 177], "newli": [22, 125, 152], "sy": [22, 55, 57, 150, 152, 173, 202, 210], "python37": 22, "python3": [22, 186, 211, 237, 253, 262], "dynload": 22, "enviro": 22, "spmd": [22, 140, 205], "mimic": [22, 102, 242, 264, 271], "launcher": 22, "embeddingbagcollect": 22, "bag": [22, 36, 187, 194], "ebc": [22, 194], "row": [22, 53, 77, 92, 97, 100, 104, 106, 107, 109, 110, 138, 140, 142, 143, 159, 178, 194, 219, 272, 274, 283], "4096": [22, 194, 211, 263], "parameterconstraint": 22, "placement": [22, 138, 256, 278], "evenli": [22, 92], "column": [22, 92, 100, 104, 106, 117, 140, 143, 158, 159, 164, 186, 189, 194, 228, 272, 273, 274], "intra": [22, 137, 140, 207], "host": [22, 36, 56, 84, 96, 103, 136, 137, 140, 150, 152, 170, 172, 179, 180, 186, 207, 228, 238, 247], "interconnect": [22, 225], "nvlink": [22, 140], "data_parallel": 22, "planner": 22, "embedding_typ": 22, "embeddingcomputekernel": 22, "shardingtyp": 22, "large_table_cnt": 22, "small_table_cnt": 22, "large_t": 22, "embeddingbagconfig": 22, "large_table_": 22, "embedding_dim": [22, 97], "num_embed": 22, "feature_nam": 22, "large_table_feature_": 22, "poolingtyp": 22, "small_tabl": 22, "small_table_": 22, "small_table_feature_": 22, "gen_constraint": 22, "sharding_typ": 22, "table_wis": 22, "large_table_constraint": 22, "small_table_constraint": 22, "mimick": 22, "single_rank_execut": 22, "embeddingbagcollectionshard": [22, 194], "model_parallel": 22, "embeddingshardingplann": 22, "topologi": [22, 194, 205, 207, 212, 219], "moduleshard": 22, "shardingenv": 22, "init_distributed_single_host": 22, "pyre": 22, "fixm": 22, "set_devic": [22, 55, 57, 136, 137, 204, 205, 207, 210, 260, 265], "compute_devic": 22, "pg": [22, 262], "sharder": [22, 194], "shardingplan": 22, "collective_plan": 22, "sharded_model": 22, "from_process_group": 22, "spmd_sharing_simul": 22, "get_context": [22, 152], "exitcod": 22, "factor": [22, 97, 125, 170, 177, 178, 191, 194, 204, 264], "medium": [22, 139, 196, 238], "large_table_0": 22, "parametershard": 22, "compute_kernel": 22, "batched_fus": 22, "sharding_spec": 22, "enumerableshardingspec": 22, "shardmetadata": 22, "shard_offset": 22, "shard_siz": 22, "large_table_1": 22, "small_table_0": 22, "small_table_1": 22, "finer": [22, 34, 228], "halv": [22, 117], "row_wis": 22, "2048": [22, 102], "512": [22, 137, 172, 193, 200, 212, 223, 228, 280], "imbal": [22, 238], "vertic": 22, "column_wis": 22, "32": [22, 25, 57, 90, 95, 97, 100, 102, 107, 117, 136, 164, 169, 172, 175, 179, 180, 186, 189, 193, 210, 211, 213, 223, 260, 275], "unfortu": 22, "batched_dens": 22, "hao": 25, "chen": [25, 193], "unifi": [25, 135, 146, 206, 221, 253], "ssl": 25, "modular": [25, 34, 119, 191, 240], "fixmatch": 25, "defixmatch": 25, "vision": [25, 38, 45, 53, 93, 97, 120, 132, 135, 161, 167, 221, 253, 259], "speech": [25, 77, 97, 103, 105, 109, 135, 144, 238], "light": [25, 54, 95, 99, 100, 146, 221], "vit": [25, 253], "famou": [25, 77], "baselin": [25, 93, 102, 189, 213, 223, 237, 264, 280], "strong": [25, 103, 193, 253, 274], "unlabel": [25, 100], "confid": [25, 54, 93, 95, 101, 104, 142, 176, 177, 187, 222], "threshold": [25, 51, 84, 142, 176, 180, 189, 211, 238], "absorb": 25, "gaussian": [25, 54, 142, 176], "overcom": [25, 111], "quantiti": [25, 102, 130, 135, 140, 159, 164, 169], "qualiti": [25, 160, 182], "trade": [25, 142, 167, 275], "afford": 25, "cv": [25, 276], "nlp": [25, 95, 97, 104, 107, 108, 109, 122, 135, 183, 222, 238, 259, 276], "audio": [25, 34, 45, 135, 155, 185, 188], "semilearn": 25, "get_dataset": 25, "get_data_load": 25, "weak": 25, "get_net_build": 25, "get_algorithm": 25, "get_config": 25, "hyper": [25, 181, 256], "vit_tiny_patch2_32": 25, "use_pretrain": 25, "pretrain_path": 25, "microsoft": [25, 36, 114, 115, 186, 266], "vit_tiny_patch2_32_mlp_im_1k_32": 25, "pth": [25, 119, 189, 205, 212, 253, 264], "num_train_it": 25, "num_eval_it": 25, "num_log_it": 25, "adamw": [25, 137, 177], "layer_decai": 25, "eval_batch_s": 25, "cifar10": [25, 59, 90, 95, 186, 212, 241, 246], "num_label": 25, "num_class": [25, 178, 187, 189, 196], "img_siz": 25, "crop_ratio": 25, "875": 25, "data_dir": [25, 90, 137], "ulb_samples_per_class": 25, "hard_label": 25, "ema_p": 25, "999": [25, 187, 210], "ent_loss_ratio": 25, "uratio": 25, "ulb_loss_ratio": 25, "dataset_dict": 25, "include_lb_to_ulb": 25, "train_lb_load": 25, "train_lb": 25, "train_ulb_load": 25, "train_ulb": 25, "eval_load": 25, "from_nam": 25, "tb_log": 25, "logger": [25, 139, 189], "valid": [25, 37, 51, 90, 95, 97, 99, 101, 102, 114, 117, 119, 125, 128, 136, 137, 142, 143, 146, 147, 170, 173, 189, 190, 193, 196, 223, 248, 251, 272, 273, 280], "87": [25, 117, 180, 211, 223, 275], "lb_imb_ratio": 25, "ulb_imb_ratio": 25, "1500": [25, 137, 223], "ulb_num_label": 25, "3000": [25, 187, 193, 253], "kihyuk": 25, "sohn": 25, "et": [25, 51, 54, 77, 152, 174, 182], "al": [25, 51, 54, 77, 174, 182, 210], "yidong": 25, "audio_data_augmentation_tutori": [26, 28], "html": [26, 27, 28, 29, 30, 35, 46, 47, 51, 59, 64, 77, 78, 79, 80, 81, 82, 86, 94, 102, 105, 113, 118, 122, 125, 131, 150, 155, 157, 165, 185, 188, 189, 192, 193, 194, 199, 222, 226, 227, 230, 231, 232, 233, 267, 270, 272, 274, 282], "audio_datasets_tutori": 27, "audio_feature_extractions_tutori": 29, "audio_io_tutori": 30, "dataload": [32, 33, 35, 36, 37, 38, 39, 41, 42, 45, 46, 54, 57, 77, 90, 102, 120, 136, 137, 143, 152, 170, 172, 179, 186, 187, 189, 212, 214, 226, 238, 246, 259, 278], "frac": [32, 44, 65, 87, 92, 103, 104, 106, 109, 118, 128, 141, 147, 152, 176, 177, 197], "partial": [32, 44, 90, 92, 106, 119, 128, 136, 137, 138, 140, 141, 145, 153, 159, 212, 239, 258, 260], "leaf": [32, 44, 92, 120, 135, 191, 259], "retain_graph": [32, 145], "surround": [32, 170], "mark": [32, 51, 140, 145, 161, 177, 178, 193, 219, 273], "frozen": [32, 44, 138, 160, 275], "acycl": [32, 44, 128], "dag": [32, 128], "chain": [32, 44, 92, 100, 104, 105, 128, 138, 146, 158, 178, 273], "accumul": [32, 44, 48, 51, 54, 92, 95, 106, 128, 147, 160, 167, 177, 178, 179, 180, 222, 241], "vec": [32, 44, 92, 275], "langl": 32, "x_1": [32, 106, 164], "x_n": [32, 54], "rangl": 32, "y_1": [32, 106], "y_m": 32, "ccc": [32, 44, 92], "y_": [32, 44, 92, 103], "x_": [32, 44, 92], "cdot": [32, 44, 54, 92, 109, 128, 141], "vdot": [32, 44, 92], "ddot": [32, 44, 92], "v_1": 32, "v_m": 32, "life": [32, 102, 143, 144, 204], "autogradqs_tutori": [32, 35, 40, 79, 259], "compris": [33, 34, 54, 119], "fashionmnist": [33, 34, 36, 38, 42, 187], "mtia": [33, 38, 41, 64, 77, 100, 118, 125, 150, 196], "neuralnetwork": 33, "dimension": [33, 41, 48, 50, 51, 54, 62, 74, 75, 92, 97, 99, 100, 102, 105, 106, 107, 109, 118, 140, 145, 161, 174, 181, 182, 187, 189, 194, 200, 207, 274], "minibatch": [33, 34, 99, 110, 143, 154, 169, 172], "28x28": [33, 110, 187, 225], "784": [33, 99, 110, 154, 187], "nonlinear": 33, "wide": [33, 62, 92, 97, 110, 139, 140, 143, 144, 152, 173, 182, 221, 238, 264], "phenomena": 33, "seq_modul": 33, "logit": [33, 37, 102, 211], "infti": [33, 177], "parameter": [33, 280], "preview": 33, "buildmodel_tutori": [33, 35, 40, 259], "messi": 34, "readabl": [34, 53, 93, 100, 103, 144, 186, 223, 237, 262], "primit": [34, 38, 118, 135, 140, 159, 170, 194, 197, 200, 262], "pre": [34, 103, 132, 135, 137, 140, 152, 175, 189, 194, 196, 197, 205, 213, 248, 256, 264, 275], "fashion": [34, 51, 99, 101, 114, 137, 140, 142, 179, 184, 187, 189, 191, 194, 212], "zalando": 34, "60": [34, 95, 112, 137, 143, 144, 161, 175, 180, 182, 187, 193, 210, 211, 228], "grayscal": [34, 153, 160], "internet": [34, 175], "target_transform": [34, 38, 42], "training_data": [34, 107], "img_dir": 34, "csv": [34, 51, 53, 137], "annotations_fil": 34, "tshirt1": 34, "tshirt2": 34, "ankleboot999": 34, "decode_imag": 34, "img_label": 34, "reshuffl": 34, "overfit": [34, 95, 110, 119, 144], "train_featur": 34, "train_label": 34, "shuffl": [34, 38, 53, 57, 95, 101, 110, 136, 137, 152, 175, 179, 186, 187, 260], "data_tutori": [34, 35, 40, 259], "intro": [35, 36, 40, 57, 104, 105, 131, 153, 187, 203, 210, 259], "quickstart_tutori": [35, 38, 40, 259], "tensorqs_tutori": [35, 40, 41, 82, 259], "tensor_tutori": [35, 47, 49, 50, 59, 259], "transforms_tutori": [35, 40, 42, 259], "autograd_tutori": [35, 44, 47, 49, 59, 259], "optimization_tutori": [35, 37, 40, 259], "saveloadrun_tutori": [35, 39, 40, 259], "sphx_glr_beginner_basics_autogradqs_tutori": [35, 40, 259], "sphx_glr_beginner_basics_buildmodel_tutori": [35, 40, 259], "sphx_glr_beginner_basics_intro": [35, 40, 259], "sphx_glr_beginner_basics_saveloadrun_tutori": [35, 40, 259], "sphx_glr_beginner_basics_optimization_tutori": [35, 40, 259], "sphx_glr_beginner_basics_data_tutori": [35, 40, 259], "sphx_glr_beginner_basics_quickstart_tutori": [35, 40, 259], "sphx_glr_beginner_basics_tensorqs_tutori": [35, 40, 259], "sphx_glr_beginner_basics_transforms_tutori": [35, 40, 259], "suraj": [36, 55, 56, 57, 58, 117, 148, 149, 160], "subramanian": [36, 55, 56, 57, 58, 117, 148, 149, 160], "seth": 36, "juarez": 36, "cassi": 36, "breviu": 36, "dmitri": 36, "soshnikov": 36, "ari": 36, "bornstein": 36, "ml": [36, 77, 100, 102, 131, 135, 142, 194, 210, 211], "belong": [36, 143, 194], "shirt": [36, 187], "trouser": [36, 187], "pullov": [36, 187], "dress": [36, 187], "coat": [36, 187], "sandal": [36, 187], "sneaker": [36, 187], "ankl": [36, 187], "boot": [36, 175, 187], "cloud": [36, 56, 96, 110, 112, 256], "open": [36, 38, 52, 90, 93, 95, 96, 99, 101, 109, 112, 114, 135, 137, 152, 154, 157, 167, 169, 182, 186, 189, 197, 212, 213, 219, 266], "favorit": [36, 96, 152, 157], "id": [36, 84, 96, 145, 150, 168, 178, 179, 180, 189, 193, 194, 204, 205, 210, 256, 280], "walkthrough": [37, 44, 50, 84, 117], "video": [37, 44, 45, 55, 57, 58, 92, 93, 95, 97, 99, 100, 101, 122, 130, 131, 132, 133, 135, 148, 149, 186, 199], "3blue1brown": [37, 44], "smaller": [37, 97, 102, 109, 110, 136, 140, 176, 178, 189, 223, 227, 243], "unpredict": [37, 92, 150], "jump": [37, 77, 107, 111, 112, 114, 115, 160, 248], "untrain": 37, "degre": [37, 65, 97, 118, 142, 182, 186, 260, 274], "dissimilar": [37, 100, 109], "regress": [37, 110, 184, 223, 236], "nllloss": [37, 104], "classif": [37, 45, 54, 77, 90, 93, 95, 100, 101, 102, 104, 125, 132, 135, 136, 144, 175, 184, 196, 197, 241], "logsoftmax": 37, "deposit": [37, 44], "train_loop": 37, "test_loop": 37, "warmstart": [37, 226, 234, 258, 259], "torchtext": [38, 52, 95, 101, 135], "torchaudio": [38, 52, 95, 101, 132, 135, 137, 175, 186, 264], "cifar": [38, 45, 95, 187], "coco": [38, 196], "conduct": [38, 93, 158, 173, 264], "decreas": [38, 51, 77, 85, 102, 110, 140, 143, 194, 274], "state_dict": [39, 51, 55, 57, 90, 136, 137, 138, 150, 174, 191, 204, 205, 212, 222, 225, 226, 234, 235, 239, 242, 258, 259, 263], "load_state_dict": [39, 55, 90, 101, 119, 138, 150, 189, 204, 205, 222, 226, 234, 239, 259], "weights_onli": [39, 119, 138, 150, 189], "unpickl": [39, 119, 262], "inferenc": 39, "fail": [39, 92, 100, 111, 119, 128, 158, 170, 175, 177, 181, 191, 193, 222, 253, 262, 279, 284], "inconsist": [39, 119, 158], "legaci": [39, 112, 139], "checkpoint": [39, 51, 90, 138, 148, 167, 172, 212, 222, 226, 234, 240, 258, 259, 263, 264], "tip": [39, 54, 96, 109, 187, 226, 234, 258, 259], "04": [40, 95, 186, 211, 223, 259, 266], "398": 40, "382": [40, 42, 259], "ndarrai": [41, 42, 50, 100, 189], "elimin": [41, 117, 146, 154, 158, 159, 175, 193, 197, 276, 279], "datatyp": [41, 50, 75, 95, 100, 117, 212, 222], "overridden": [41, 50, 153, 227], "1200": [41, 223], "arithmet": [41, 95, 100, 170], "manipul": [41, 42, 95, 99, 118, 128, 138, 157, 167, 198], "slice": [41, 50, 107, 110, 174, 197, 207, 212, 237, 276], "breez": [41, 50], "cat": [41, 45, 50, 93, 95, 103, 106, 158, 180, 182, 187, 196, 221], "subtli": [41, 50], "y1": [41, 196, 236], "y2": 41, "y3": 41, "wise": [41, 50, 77, 95, 100, 104, 140, 152, 158, 161, 164, 193, 194, 238, 252], "z1": [41, 158], "z2": 41, "z3": 41, "aggreg": [41, 44, 95, 117, 160, 189, 228, 272], "numer": [41, 51, 74, 75, 100, 102, 103, 112, 118, 138, 142, 222, 238, 260, 280], "operand": [41, 92, 193], "denot": [41, 104, 107, 194, 271, 272, 276], "suffix": [41, 50, 84, 128, 158], "copy_": [41, 50, 117, 138, 158, 178, 227, 235], "t_": [41, 50], "problemat": [41, 50, 158, 168, 238], "accept": [42, 69, 90, 92, 102, 107, 118, 140, 142, 156, 159, 164, 169, 170, 176, 179, 186, 189, 211, 228, 238, 283], "commonli": [42, 51, 71, 90, 97, 102, 118, 172, 175, 182, 186, 229, 238, 243], "hot": [42, 51, 77, 97, 109, 143, 144, 153, 182], "scatter_": [42, 178], "26": [42, 95, 98, 158, 160, 161, 175, 180, 210, 211, 259], "4m": [42, 95], "5k": 42, "12": [42, 95, 106, 117, 120, 136, 137, 158, 178, 187, 210, 211, 223, 264, 280], "363kb": 42, "197k": 42, "574kb": 42, "852k": 42, "96mb": 42, "38m": 42, "03": [42, 95, 179, 180, 189, 211, 237, 260], "68mb": 42, "31m": 42, "0mb": [42, 95, 257], "58": [42, 95, 143, 161, 210, 280], "21": [42, 106, 117, 175, 210, 211, 223, 228, 237], "9mb": [42, 95], "81": [42, 95, 158, 211], "5m": [42, 95], "8mb": [42, 95], "3mb": [42, 95], "29": [42, 95, 175, 180, 223], "326kb": 42, "42m": 42, "361kb": 42, "229k": 42, "06": [42, 95, 211], "680kb": 42, "918k": 42, "10mb": [42, 95], "83": [42, 53, 95, 211, 237], "67m": 42, "26mb": 42, "07mb": 42, "15k": 42, "56": [42, 95, 161, 175, 210, 223, 228, 256, 280], "4mb": [42, 95], "floattensor": [42, 100], "intens": [42, 87, 158, 170, 200, 256], "prop": 44, "proportion": [44, 167], "travers": [44, 180], "resnet18": [44, 161, 175, 186, 189, 213, 252, 278], "height": [44, 48, 97, 100, 189, 190, 196, 219, 253], "width": [44, 45, 48, 97, 100, 142, 164, 189, 190, 196, 253], "momentum": [44, 45, 67, 71, 90, 95, 101, 110, 118, 119, 146, 152, 178, 187, 194, 212, 240, 241, 246], "3a": [44, 175], "9a": 44, "dq": [44, 213], "bf": 44, "external_grad": 44, "blue": [44, 137, 140, 219], "freez": [44, 125, 213], "finetun": [44, 132, 135, 141, 167, 183, 259], "unfrozen": 44, "exclusionari": 44, "revers": [44, 51, 92, 138, 156, 164, 168, 175, 182, 194], "autodiff": [44, 130, 135, 159], "pillow": [45, 95], "opencv": 45, "librosa": 45, "cython": 45, "nltk": 45, "spaci": 45, "viz": [45, 93], "huge": [45, 104, 109, 118, 140, 150, 153], "airplan": [45, 95, 102], "automobil": [45, 95, 102], "bird": [45, 95], "deer": [45, 95], "dog": [45, 95, 102, 196, 221], "frog": [45, 95], "hors": [45, 95], "truck": [45, 95, 102], "3x32x32": 45, "32x32": [45, 48, 95, 102, 112, 187], "extrem": [45, 109, 161, 194, 198], "pilimag": 45, "brokenpipeerror": 45, "fun": [45, 51, 111, 112, 114, 115, 176], "entropi": [45, 54, 95, 97, 101, 140, 241], "learnt": 45, "truth": [45, 77, 112, 196, 284], "okai": 45, "wasn": [45, 103, 106, 193], "energi": [45, 51], "chanc": [45, 51, 102, 160], "hmmm": 45, "massiv": [45, 106, 109, 194, 212], "plai": [45, 51, 54, 102, 104, 132, 135, 176, 183, 256, 259], "art": [45, 54, 93, 95, 97, 174, 221], "recurr": [45, 51, 103, 107, 132, 135, 143, 144, 165, 168, 182, 183, 198, 259], "lstm": [45, 51, 97, 105, 108, 143, 144, 180, 259], "chat": [45, 51, 182], "003": [45, 49, 51, 54, 77, 87, 88, 98, 99, 101, 102, 103, 104, 107, 108, 115, 116, 120, 125, 141, 144, 156, 158, 159, 160, 161, 164, 167, 170, 177, 181, 183, 184, 191, 193, 196, 197, 259, 264, 281], "cifar10_tutori": [45, 47, 49, 59, 259], "sung": 46, "kim": 46, "jenni": 46, "kang": 46, "mytensor": 46, "my_tensor": [46, 119], "rewrit": [46, 145, 168, 193, 283], "parallelli": 46, "getitem": 46, "demo": [46, 135, 173, 186, 211], "cnn": [46, 102, 132, 135, 164, 168, 169, 184, 189, 196, 212], "rnn": [46, 51, 97, 135, 153, 165, 168, 179, 182, 183, 238, 259], "capsul": 46, "monitor": [46, 110, 152], "output_s": [46, 262], "former_torchi": 46, "parallelism_tutori": 46, "data_parallel_tutori": [46, 47, 49, 81, 259], "neural_networks_tutori": [47, 48, 49, 59, 259], "gentl": [47, 49, 58, 59, 128, 131, 198, 259], "glimps": 48, "convnet": [48, 93, 153, 160, 179], "learning_r": [48, 102], "lenet": [48, 77, 95, 99, 101, 174], "mini": [48, 51, 54, 95, 99, 107, 110, 169, 175, 187], "4d": [48, 161], "nsampl": 48, "nchannel": 48, "least": [48, 77, 100, 119, 128, 142, 144, 150, 160, 170, 175, 182, 193, 205, 223, 257], "estim": [48, 53, 54, 97, 142, 176, 177, 182, 194, 223, 243, 264], "clear": [48, 53, 77, 92, 103, 104, 109, 141, 145, 158, 170, 180, 189, 190, 210, 223, 265, 273], "sub_": 48, "nesterov": [48, 119], "criterion": [48, 69, 95, 118, 180, 182, 187, 212, 236, 246], "012": 49, "blitz": [49, 81, 112, 143, 144, 182, 187, 259], "syntax": [50, 86, 88, 89, 119, 223, 259], "matthew": [51, 89, 119], "inkawhich": [51, 54, 77, 87, 89, 119], "movi": [51, 52, 93], "cornel": [51, 52], "dialog": [51, 52], "corpu": [51, 52], "artifici": [51, 102, 225], "intellig": 51, "servic": [51, 175, 212, 243, 256], "onlin": [51, 153, 160, 176, 179], "helpdesk": 51, "bot": 51, "predefin": [51, 102, 110, 153, 213, 238], "restrict": [51, 87, 152, 186, 191, 193, 283], "compani": 51, "IT": 51, "teach": [51, 54, 102, 182], "human": [51, 77, 93, 144, 160, 182, 189, 262], "recent": [51, 107, 117, 139, 140, 152, 158, 164, 168, 177, 186, 253, 256], "boom": 51, "hello": [51, 104, 167], "am": [51, 106, 144, 182], "hospit": 51, "lawyer": 51, "friend": [51, 167], "arrest": 51, "kid": 51, "sorri": 51, "san": 51, "francisco": [51, 110], "goodby": 51, "luong": [51, 182], "jointli": [51, 182], "acknowledg": [51, 152], "borrow": [51, 180], "yuan": 51, "kuei": 51, "wu": [51, 139, 260, 265, 275], "ywk991112": 51, "sean": [51, 143, 144, 182], "robertson": [51, 143, 144, 182], "translat": [51, 112, 114, 115, 135, 143, 144, 164, 165, 183, 238, 253, 259, 273], "spro": 51, "floydhub": 51, "textutil": 51, "__": [51, 64, 77, 102, 118, 125, 150, 189, 194], "reformat": 51, "rich": [51, 219], "charact": [51, 109, 135, 148, 165, 176, 182, 183, 259], "220": [51, 180], "579": [51, 161], "exchang": [51, 112, 114, 137, 152, 182, 186], "292": [51, 90], "035": 51, "617": 51, "304": 51, "713": [51, 95], "utter": [51, 52], "divers": 51, "great": [51, 112, 118, 119, 223, 240, 273], "variat": [51, 101, 110, 147, 197, 223, 237, 271], "formal": [51, 205, 271], "sentiment": 51, "hope": [51, 160, 167, 191, 197, 211], "datafil": 51, "nice": [51, 110, 167, 169, 193, 194, 197], "tab": [51, 99, 101, 182, 187, 219], "sentenc": [51, 97, 103, 104, 107, 109, 144, 152, 182, 197, 276], "pars": [51, 53, 109, 136, 137, 142, 223, 262], "jsonl": [51, 52], "loadlinesandconvers": 51, "lineid": 51, "characterid": 51, "conversationid": 51, "movieid": 51, "extractsentencepair": 51, "formatted_movie_lin": 51, "unescap": 51, "delimit": 51, "busi": [51, 144, 256], "vocabulari": [51, 95, 97, 109, 140, 143, 238, 276], "implicit": [51, 92, 138, 193, 219, 238], "discret": [51, 212], "voc": 51, "addword": 51, "addsent": 51, "infrequ": 51, "unicod": [51, 143, 144, 182], "ascii": [51, 109, 143, 144, 182], "unicodetoascii": 51, "letter": [51, 143, 144, 182], "lowercas": [51, 110, 182], "punctuat": [51, 182], "normalizestr": 51, "aid": [51, 119, 194, 227], "max_length": [51, 280], "filterpair": 51, "stackoverflow": [51, 143, 144, 182, 223], "518232": [51, 143, 144, 182], "2809427": [51, 143, 144, 182], "tactic": 51, "benefici": [51, 97, 131, 177, 238, 241, 242, 256, 275, 279], "soften": 51, "difficulti": [51, 176, 198], "approxim": [51, 93, 137, 146, 157, 160, 164, 174, 177, 211, 225, 238], "min_count": 51, "massag": 51, "ultim": [51, 54, 87, 200, 271], "accommod": 51, "shorter": [51, 53, 110, 182, 186, 271], "eos_token": 51, "english": [51, 104, 107, 143, 165, 182], "indexesfromsent": 51, "zeropad": 51, "inputvar": 51, "outputvar": 51, "pad_token": 51, "batch2traindata": 51, "bunch": [51, 143, 144, 219, 252], "aforement": [51, 84, 102, 197, 213, 248], "brain": 51, "sutskev": 51, "discov": [51, 115, 152, 179, 197, 279], "accomplish": [51, 54, 143, 152, 164, 207, 223, 237], "hidden": [51, 93, 97, 102, 103, 107, 110, 140, 142, 143, 144, 153, 180, 181, 182, 190, 221], "jeddy92": 51, "io": [51, 53, 99, 135, 178, 181, 189], "ts_seq2seq_intro": 51, "heart": [51, 211], "gate": [51, 97, 197, 235], "invent": [51, 54, 176], "cho": 51, "2014": [51, 54], "bidirect": [51, 153], "variant": [51, 95, 97, 99, 101, 140, 146, 175, 181, 194, 197, 210, 260], "gru": [51, 97, 143, 144, 182], "colah": 51, "2015": [51, 102], "fp": [51, 90, 133, 164], "hidden_s": 51, "pack": [51, 158, 176, 178, 180, 275], "unpack": 51, "pack_padded_sequ": 51, "pad_packed_sequ": 51, "input_seq": 51, "input_length": [51, 137], "n_layer": [51, 172], "num_direct": 51, "sole": [51, 186], "combat": [51, 109], "bahdanau": [51, 182], "groundwork": 51, "knowledg": [51, 54, 77, 104, 105, 120, 122, 128, 130, 135, 158, 160, 198, 259], "h_t": [51, 107], "overal": [51, 97, 136, 137, 152, 170, 177, 189, 193, 194, 211, 223, 238], "attn": [51, 182], "softmax": [51, 97, 102, 107, 109, 110, 143, 175, 178, 180, 187, 197, 211, 276], "submodul": [51, 87, 97, 111, 138, 168, 181, 279], "unidirect": 51, "input_step": 51, "last_hidden": 51, "encoder_output": 51, "num_word": 51, "masknllloss": 51, "clever": [51, 104], "teacher": [51, 102, 130, 135, 182], "teacher_forcing_ratio": [51, 182], "instabl": [51, 182], "craft": [51, 77, 109, 144], "explod": [51, 97, 198], "essenc": [51, 106], "exponenti": [51, 92, 100, 104, 106, 168, 177, 264], "nan": [51, 210, 272], "overshoot": 51, "steep": 51, "cliff": 51, "goodfellow": [51, 54, 77], "2016": 51, "www": [51, 182, 196], "deeplearningbook": 51, "sos_token": 51, "realiti": [51, 54, 77, 106, 110, 181, 237], "tie": 51, "trainit": [51, 182], "n_iter": 51, "explanatori": 51, "lift": [51, 242, 283], "tarbal": 51, "NOT": [51, 87, 119, 145, 147, 148, 150, 167], "decoder_output": 51, "greedysearchdecod": 51, "searcher": 51, "evaluateinput": 51, "press": [51, 54], "gracefulli": [51, 55, 179, 205], "prompt": [51, 52, 253, 264], "regardless": [51, 100, 101, 159, 170, 179, 190], "attn_model": 51, "concat": [51, 106], "loadfilenam": 51, "save_dir": [51, 189], "model_nam": [51, 137, 212, 213, 278, 280], "corpus_nam": [51, 52], "encoder_n_lay": 51, "decoder_n_lay": 51, "_checkpoint": [51, 137], "tar": [51, 119], "checkpoint_it": 51, "folk": 51, "congratul": [51, 115, 141, 143, 194, 225, 239, 240, 241], "fundament": [51, 94, 97, 106, 109, 118, 135, 160, 170, 193, 194, 199, 205, 237, 272], "tailor": [51, 152, 170, 194, 256], "cool": [51, 54, 167, 169, 283], "chatbot_tutori": [51, 120, 259], "wen": [52, 191, 193, 251], "uninstal": 52, "reinstal": 52, "torchdata": 52, "chatbot": [52, 120, 259], "browser": [52, 99, 101, 112, 186, 206], "click": [52, 99, 110, 112, 186, 187, 194, 219], "subfold": 52, "visit": [52, 128, 198, 264], "in_": 52, "_colab": 52, "_name": 52, "mount": [52, 262], "gdrive": 52, "my": [52, 103, 109, 197], "upload": [52, 206], "cell": [52, 92, 93, 95, 97, 100, 101, 117, 170, 177, 181, 189, 194, 238, 264], "button": [52, 54, 112, 186, 219], "rerun": [52, 128, 145, 167], "evolv": [52, 158, 164], "drop": [52, 97, 99, 112, 148, 167, 180, 211, 264], "t4": 52, "sasank": [53, 125], "chilamkurthi": [53, 125], "preprocess": [53, 102, 110, 135, 143, 182, 189], "scikit": 53, "ignor": [53, 102, 107, 109, 119, 173, 187, 189, 193, 196, 222, 228, 239, 251, 272, 273, 276], "warn": [53, 128, 158, 189, 223, 228, 237, 271, 272, 273, 274], "facial": 53, "pose": [53, 206, 207], "landmark": 53, "dlib": 53, "tag": [53, 97, 105, 109, 193, 227, 236, 263], "image_nam": 53, "part_0_x": 53, "part_0_i": 53, "part_1_x": 53, "part_1_i": 53, "part_2_x": 53, "part_67_x": 53, "part_67_i": 53, "0805personali01": 53, "98": [53, 158, 180, 211], "84": [53, 95, 117, 119, 160, 187], "134": 53, "1084239450_e76e00b7e7": 53, "70": [53, 161, 180, 210, 223, 280], "236": 53, "257": [53, 223], "312": [53, 161, 253], "person": [53, 194, 196], "img_nam": 53, "__len__": [53, 110, 143, 152, 196], "__getitem__": [53, 110, 143, 152, 196], "randomcrop": 53, "crop": [53, 95, 142, 184, 196], "totensor": [53, 95, 136, 152, 175, 179, 187, 189, 212, 246], "ax": [53, 104, 107, 133, 135, 182, 183, 187, 259], "tsfm": 53, "transformed_sampl": 53, "np": [53, 95, 103, 175, 180, 187, 189, 237, 253, 272, 280], "safer": [53, 223], "stick": [53, 152, 161], "randint": [53, 54, 138, 154, 172, 212], "lose": [53, 55, 100, 102, 160], "collate_fn": 53, "indent": [53, 223], "imagefold": [53, 54, 95], "ant": [53, 125], "xxy": 53, "jpeg": 53, "xxz": 53, "bee": [53, 125], "nsdf3": 53, "asd932_": 53, "randomhorizontalflip": 53, "data_transform": 53, "randomresizedcrop": 53, "hymenoptera_dataset": 53, "hymenoptera_data": 53, "dataset_load": 53, "data_loading_tutori": [53, 120, 259], "nathan": [54, 77, 87, 89], "celebr": [54, 132, 135], "pictur": [54, 77, 138, 140, 182], "thorough": 54, "shed": [54, 221], "spend": [54, 84, 167, 223, 228], "sake": [54, 153, 174, 177, 239, 240], "ian": 54, "constantli": [54, 77, 177], "outsmart": 54, "equilibrium": 54, "perfect": [54, 92, 150, 199, 273], "notat": [54, 77], "chw": [54, 175], "3x64x64": 54, "thought": [54, 85, 237, 272], "latent": [54, 109], "p_": 54, "p_g": 54, "minimax": 54, "logd": 54, "underset": 54, "mathbb": [54, 87, 164, 177], "sim": 54, "big": [54, 97, 103, 109, 118, 138, 144, 154, 167, 176, 182, 189], "radford": 54, "unsupervis": 54, "drawn": [54, 110, 176], "rgb": [54, 95, 102, 160, 175, 189], "conv": [54, 97, 146, 161, 179, 190, 219, 228], "volum": [54, 136], "inlin": [54, 92, 95, 99, 101, 145, 158, 190, 243, 271, 275], "seed": [54, 77, 95, 102, 136, 137, 152, 177, 178, 180], "manualse": 54, "10000": [54, 95, 172, 180, 223, 237], "dataroot": 54, "image_s": [54, 253], "spatial": [54, 93, 95, 97, 132, 135, 183, 190, 196, 259], "64x64": 54, "nc": [54, 275], "nz": 54, "ngf": 54, "ndf": 54, "num_epoch": 54, "0002": 54, "ngpu": 54, "celeb": 54, "img_align_celeba": 54, "celeba": 54, "188242": 54, "173822": 54, "284702": 54, "537394": 54, "subdirectori": [54, 196], "stdev": 54, "02": [54, 95, 158, 180, 211, 266], "weights_init": 54, "reiniti": 54, "criteria": 54, "netg": 54, "netd": 54, "worth": [54, 167, 170, 179], "critic": [54, 87, 138, 149, 170, 204, 237, 260], "contribut": [54, 62, 84, 93, 100, 161, 186], "batchnorm": [54, 57, 119, 161, 190, 198, 238, 240, 278], "downsampl": [54, 95, 160], "promot": 54, "healthi": 54, "bceloss": 54, "ell": [54, 182], "l_1": 54, "l_n": 54, "quad": [54, 177], "y_n": 54, "bce": 54, "gt": [54, 117], "fixed_nois": 54, "establish": 54, "Be": [54, 92], "somewhat": [54, 170], "collaps": 54, "ganhack": 54, "secondli": 54, "loss_d": 54, "loss_g": 54, "versu": [54, 77, 135, 143, 200], "anim": [54, 95], "music": 54, "dcgan_faces_tutori": [54, 120, 259], "mingpt": [55, 56, 57, 58, 148, 149], "aw": [55, 57, 136, 148, 149, 258], "p3": [55, 56, 57, 65, 118, 148, 149], "8xlarg": [55, 57], "youtub": [55, 56, 57, 58, 92, 93, 95, 97, 99, 100, 101, 135, 148, 149, 199], "failur": [55, 111, 149, 150, 158, 193, 203, 253, 262], "disrupt": [55, 251, 262], "suscept": [55, 207], "elast": [55, 137, 150, 207], "attempt": [55, 92, 100, 104, 137, 170, 193, 200, 227, 251, 262], "minutia": 55, "multinod": [55, 148, 194], "load_snapshot": 55, "snapshot_path": 55, "train_step": 55, "should_checkpoint": 55, "save_snapshot": 55, "membership": [55, 149], "intervent": [55, 102, 248], "multigpu": [55, 57, 149], "multigpu_torchrun": 55, "envvari": 55, "ddp_setup": [55, 57], "12355": [55, 57, 136, 150, 204, 205], "local_rank": [55, 137, 149, 150, 172, 262], "gpu_id": [55, 57, 149], "_save_snapshot": 55, "model_st": 55, "epochs_run": 55, "_load_snapshot": 55, "max_epoch": 55, "_run_epoch": [55, 57], "total_epoch": [55, 57], "argv": [55, 57, 212], "save_everi": [55, 57], "nproc_per_nod": [55, 137, 138, 150, 172, 207, 262], "migrat": [55, 57, 238], "fault": [56, 57, 58, 90, 148, 149, 170], "toler": [56, 57, 58, 90, 92, 148, 149], "deploi": [56, 112, 129, 135, 142, 149, 174, 175], "cluster": [56, 99, 137, 142, 148, 149, 150, 152, 205, 207, 247], "torchrun": [56, 62, 137, 138, 148, 149, 172, 207, 260, 262], "amazon": 56, "ec2": [56, 136], "gentli": 56, "gpt": [56, 136, 148, 149, 172], "stat": [57, 137, 145, 176, 186, 194, 228, 237], "replica": [57, 58, 62, 136, 138, 150, 152, 257], "convert_sync_batchnorm": 57, "single_gpu": 57, "mytraindataset": 57, "distributedsampl": [57, 58, 136, 137], "destroy_process_group": [57, 136, 137, 139, 150, 172, 204, 205, 260], "excess": [57, 84, 140, 191, 212, 222], "chunk": [57, 152, 167, 170, 172, 260], "train_data": 57, "train_dataset": [57, 102, 137, 212, 246, 280], "set_epoch": [57, 136, 137], "b_sz": 57, "_run_batch": 57, "ckp": 57, "_save_checkpoint": 57, "load_train_obj": 57, "prepare_dataload": 57, "shorthand": 57, "ring": [58, 140, 260], "older": [58, 117, 118, 154, 169, 170, 177, 264], "destroi": [58, 92, 156], "soumith": [59, 152], "chintala": [59, 152], "scientif": [59, 97, 100, 118], "mobil": [60, 61, 102, 201, 217, 218, 226, 266, 268, 269, 277], "executorch": [60, 61, 135, 201, 215, 216, 217, 218, 220, 253, 268, 269, 277, 282], "Will": [62, 138, 190], "constabl": [62, 138], "wei": [62, 138], "feng": [62, 138, 160, 173, 190], "categor": [62, 84, 99, 153, 178, 180, 194], "navig": [62, 186, 187, 219], "technologi": [62, 102, 135, 152, 197, 258], "infrastructur": 62, "fsdp2": [62, 135, 136], "tp": [62, 207, 262], "pp": 62, "dtensor": [62, 140, 206, 258], "devicemesh": [62, 140, 258], "reshard": [62, 138, 205], "mesh": [62, 131, 138, 140, 207], "recip": [62, 117, 131, 135, 199, 202, 206, 210, 219, 221, 222, 223, 224, 225, 227, 228, 234, 235, 239, 240, 241, 242, 243, 245, 247, 248, 249, 250, 251, 252, 253, 257, 259, 270], "c10d": [62, 150, 173, 238, 262], "all_gath": [62, 136, 137, 152, 173], "p2p": 62, "isend": [62, 152], "guidelin": [62, 238], "fullyshardeddataparallel": [62, 136, 137, 138, 204, 205], "torchtitan": [62, 172, 260], "polynomi": [64, 65, 67, 69, 70, 71, 74, 75, 118], "pi": [64, 65, 69, 70, 71, 74, 75, 92, 118, 133, 177], "euclidean": [64, 65, 69, 70, 71, 74, 75, 92, 102, 118], "polynomial_autograd": [64, 66, 259], "bx": [65, 118], "cx": [65, 104, 118], "p_3": [65, 118], "5x": [65, 118], "legendr": [65, 118], "polynomial_custom_funct": [65, 66, 259], "examples_autograd": [66, 259], "strang": [67, 87, 118], "fifth": [67, 118], "tough": [67, 118], "dynamic_net": [67, 72, 259], "polynomial3": [69, 118], "linspac": [69, 92, 118], "2000": [69, 70, 95, 102, 118, 187, 189, 193, 223, 257, 262], "1e": [69, 90, 97, 118, 138, 146, 154, 178, 180, 210, 260, 280], "y_pred": [69, 118, 128, 211], "99": [69, 118, 180], "polynomial_modul": [69, 72, 259], "flaten": [70, 118], "1d": [70, 97, 118, 238, 283], "mse": [70, 97, 102, 118, 128], "polynomial_nn": [70, 72, 259], "polynomial_optim": [71, 72, 259], "examples_nn": [72, 259], "warm": [73, 76, 117, 186, 191, 210, 211, 223, 228, 259, 276], "polynomial_numpi": [74, 76, 259], "biggest": [75, 262], "polynomial_tensor": [75, 76, 259], "004": 76, "examples_tensor": [76, 259], "appreci": [77, 103], "overlook": [77, 223], "secur": [77, 186], "vulner": 77, "surpris": [77, 168], "impercept": 77, "perturb": [77, 93], "drastic": [77, 193, 242, 252], "overarch": 77, "amount": [77, 84, 119, 140, 150, 170, 174, 191, 194, 228, 238, 264], "misclassif": 77, "alter": [77, 119, 229, 240, 264], "har": 77, "remark": [77, 191], "mathbf": [77, 128], "nabla_": [77, 104], "007": [77, 116], "misclassifi": 77, "gibbon": 77, "clearli": [77, 142, 262, 271, 272], "pretrained_model": [77, 189], "fgsm_attack": 77, "clean": [77, 136, 137, 143, 150, 167, 172, 194, 260, 271], "data_grad": 77, "_imag": 77, "_grad": 77, "strength": [77, 187], "_data": 77, "allud": 77, "trend": [77, 85, 186], "curv": [77, 186, 187], "linearli": 77, "05": [77, 95, 137, 180, 211], "hit": [77, 140, 186], "lunch": 77, "BUT": [77, 106], "percept": 77, "tradeoff": [77, 133, 135, 141, 142, 152, 176, 243], "titl": [77, 143, 170, 182, 189], "evid": [77, 139], "subsequ": [77, 93, 102, 119, 128, 136, 143, 153, 178, 180, 182, 191, 238, 241, 247, 256, 262, 264], "defend": 77, "nip": 77, "defens": 77, "competit": [77, 154, 169, 256], "defenc": 77, "dirti": 77, "fgsm_tutori": [77, 120, 259], "torchvision_tutori": [78, 183, 196, 259], "nn_tutori": [80, 110, 120, 259], "anupam": [84, 85], "bhatnagar": [84, 85], "analyz": [84, 133, 135, 167, 176, 191, 193, 237, 253], "offici": [84, 115, 139, 152, 177, 191, 193, 212, 213], "holistictraceanalysi": 84, "env_nam": [84, 176], "deactiv": 84, "trace_dir": 84, "trace_analysi": 84, "traceanalysi": 84, "primarili": [84, 179, 191, 206, 222, 238], "engag": [84, 284], "datafram": [84, 142, 189], "time_spent_df": 84, "get_temporal_breakdown": 84, "enqueu": 84, "ineffici": [84, 276], "slowdown": [84, 137, 141], "fusion": [84, 158, 194, 212, 238, 245, 254, 258, 259, 264, 275], "consecut": [84, 144, 153, 160, 170, 175, 189, 256], "insuffici": [84, 177], "delai": [84, 150, 178, 194], "stall": [84, 256, 262], "gap": [84, 87], "nanosecond": 84, "consecutive_kernel_delai": 84, "get_idle_time_breakdown": 84, "idle_time_df": 84, "show_idle_interval_stat": 84, "percentag": [84, 174, 276], "visualize_pctg": 84, "comm": 84, "comp": 84, "proport": [84, 167], "pie": [84, 167], "chart": [84, 99, 250], "kernel_type_metrics_df": 84, "kernel_metrics_df": 84, "get_gpu_kernel_breakdown": 84, "bottleneck": [84, 117, 137, 140, 149, 167, 170, 178, 186, 191, 202, 219], "plotli": [84, 93, 142], "hover": [84, 142, 175], "pan": 84, "num_kernel": [84, 210], "duration_ratio": 84, "preced": [84, 92, 100, 146, 153, 190, 278], "lab": [84, 187], "image_render": 84, "jupyterlab": 84, "gpu_kernel_breakdown": 84, "tflop": 84, "oversubscrib": 84, "unresolv": [84, 273], "extent": [84, 100], "overlap_df": 84, "get_comm_comp_overlap": 84, "h2d": 84, "d2h": 84, "d2d": 84, "memcpi": 84, "memset": 84, "outstand": 84, "generate_trace_with_count": 84, "_with_count": 84, "screenshot": [84, 219], "profil": [84, 120, 129, 130, 133, 135, 136, 170, 181, 183, 211, 223, 226, 234, 238, 258, 259, 275], "get_memory_bw_summari": 84, "get_queue_length_summari": 84, "get_memory_bw_time_seri": 84, "get_queue_length_time_seri": 84, "mem_bw_summari": 84, "queue_len_summari": 84, "mem_bw_seri": 84, "queue_len_seri": 84, "get_queue_length_seri": 84, "25th": 84, "50th": 84, "75th": 84, "percentil": 84, "cudalaunchkernel": 84, "cudamemcpyasync": 84, "cudamemsetasync": 84, "kernel_info_df": 84, "get_cuda_kernel_launch_stat": 84, "short": [84, 97, 100, 103, 105, 108, 131, 144, 152, 168, 170, 176, 182, 184, 193, 238, 241, 259], "outlier": [84, 177], "microsecond": [84, 159, 181, 223], "cutoff": 84, "runtime_cutoff": 84, "launch_delay_cutoff": 84, "occasion": [85, 179, 182], "hta": [85, 186], "tracediff": 85, "cumul": [85, 177], "compare_trac": 85, "durat": [85, 173, 177, 186, 262], "ops_diff": 85, "absent": 85, "visualize_counts_diff": 85, "visualize_duration_diff": 85, "ten": [85, 95, 99, 102], "df": 85, "compare_traces_output": 85, "sort_valu": 85, "diff_count": 85, "largest": [85, 110, 189], "diff_dur": 85, "differer": 85, "overshadow": 85, "profilerstep": [85, 158], "loc": [85, 176, 222], "trace_diff_demo": 85, "learning_hybrid_frontend_through_example_tutori": [86, 87, 88, 259], "hybrid_frontend": [86, 88, 259], "introduction_to_hybrid_frontend_tutori": 86, "shini": 87, "eas": [87, 100, 101, 137, 197, 212, 227, 258], "enjoi": [87, 160], "aquaint": 87, "opportun": [87, 112, 153, 194], "bridg": [87, 206], "refin": [87, 193], "gradual": [87, 167], "proven": [87, 274], "resouc": 87, "consumpt": [87, 95, 97, 99, 101, 117, 137, 140, 142, 158, 170, 174, 186, 238, 257, 258], "discrep": [87, 278], "interwork": 87, "intrus": [87, 167], "decor": [87, 92, 115, 131, 145, 160, 178, 191, 238, 251], "broken": [87, 106], "epsilon": [87, 146, 153, 176, 177], "biggl": 87, "lfloor": 87, "sqrt": [87, 110, 197, 210, 271], "prod_": 87, "biggr": 87, "rfloor": 87, "hline": 87, "190": [87, 180, 189, 223], "4377": 87, "59051": 87, "accomod": [87, 148], "script_method": 87, "tracedmodul": 87, "workaround": [87, 147, 156, 253], "onnx": [87, 116, 129, 135, 259], "dramat": [90, 110], "industri": [90, 93], "analysi": [90, 92, 101, 135, 136, 157, 158, 181, 186, 189, 193, 219, 237, 253, 260, 264], "slight": [90, 139, 147, 211, 224], "trial": [90, 142, 222], "train_cifar": 90, "l2": [90, 97, 174], "get_checkpoint": 90, "as_directori": 90, "checkpoint_dir": [90, 204, 205], "data_path": 90, "pkl": 90, "rb": 90, "checkpoint_st": 90, "start_epoch": 90, "net_state_dict": 90, "optimizer_state_dict": [90, 119, 204, 205, 212], "80": [90, 95, 142, 143, 161, 180, 210, 253], "luckili": [90, 158, 193, 194, 223, 273], "enumer": [90, 95, 101, 136, 138, 140, 175, 179, 186, 187, 212, 246, 280], "trainload": [90, 95, 187], "fraction": [90, 223], "checkpoint_data": 90, "tempfil": [90, 150, 210], "temporarydirectori": 90, "wb": 90, "dump": [90, 158, 200, 206], "from_directori": 90, "val_loss": [90, 137], "val_step": 90, "wast": [90, 186, 223, 227, 229, 243, 276], "lastli": [90, 167, 193], "loguniform": [90, 223], "ashaschedul": 90, "functool": [90, 136, 137], "gpus_per_tri": 90, "resources_per_tri": 90, "num_sampl": [90, 137], "checkpoint_at_end": 90, "000668163": 90, "31479": 90, "0977": 90, "0331514": 90, "31605": 90, "0983": 90, "000150295": 90, "30755": 90, "1023": 90, "0128248": 90, "66912": 90, "4391": 90, "00464561": 90, "7316": 90, "3463": 90, "00031556": 90, "19409": 90, "1736": 90, "00574329": 90, "85679": 90, "3368": 90, "00325652": 90, "30272": 90, "0984": 90, "000342987": 90, "76044": 90, "003734": 90, "53101": 90, "4761": [90, 106], "0037339984519545164": 90, "5310075663924216": 90, "4737": 90, "confirm": [90, 93, 110, 111, 137, 159, 178], "hyperparameter_tuning_tutori": [90, 120, 259], "tensorboard": [92, 93, 94, 95, 96, 97, 100, 101, 133, 135, 142, 183, 226, 228, 234, 258, 259], "decis": [92, 105, 108, 153, 170, 193, 200, 238, 248, 254, 259, 271, 272, 274], "branch": [92, 111, 193, 196, 212], "rigidli": 92, "sign": [92, 168], "contextu": 92, "nudg": [92, 95, 101], "calculu": [92, 128], "next_funct": 92, "drill": [92, 237], "machineri": [92, 223], "took": [92, 152, 157, 167, 181, 191, 251, 262], "ins": [92, 191], "never": [92, 103, 104, 105, 109, 128, 141, 174, 184], "ideal_output": 92, "layer2": 92, "blow": 92, "b1": 92, "b2": 92, "temporarili": 92, "enable_grad": 92, "throw": [92, 100, 128, 139, 178], "sin_": 92, "handi": [92, 95, 110, 152, 160, 187], "bake": [92, 190], "chrome": [92, 170, 181, 186, 228], "imagin": [92, 100, 103, 109, 147, 152, 167, 168, 182, 194, 223, 235], "hessian": [92, 130, 135, 183, 259, 283], "twice": [92, 110, 147, 170, 211, 223, 228, 257, 264], "jvp": [92, 156, 159], "vjp": [92, 159, 164, 283], "vhp": [92, 130, 135, 183, 259], "hvp": [92, 130, 135, 183, 259], "autogradyt_tutori": [92, 94, 98, 259], "latin": 93, "increasingli": [93, 197], "ai": [93, 104, 105, 110, 136, 142, 160, 182, 200, 205, 212, 213, 221, 238, 262, 275], "review": [93, 148, 165, 193, 212, 243, 271, 272, 274, 279], "neuron": [93, 102, 221], "analag": 93, "ablat": 93, "permut": [93, 102, 161, 175, 189, 210], "valuabl": [93, 102, 182, 210, 276], "certainli": [93, 157, 272, 274], "attr": [93, 173, 200], "widget": 93, "toolset": 93, "flask": 93, "renam": 93, "virtual": [93, 170, 173, 227, 266], "pull": [93, 100, 101, 157, 279], "recogn": [93, 97, 173, 190, 225], "224x224": [93, 175], "visualize_image_attr": 93, "integrated_gradi": 93, "strongest": [93, 95, 97, 101], "visualize_image_attr_multipl": 93, "heat": [93, 175], "upsampl": 93, "interpol": 93, "layerattribut": 93, "novel": [93, 260], "teapot": 93, "trilobit": 93, "fossil": 93, "dig": [93, 104, 181, 193], "attributionvisu": 93, "imagefeatur": 93, "heatmap": 93, "captumyt": [93, 98, 259], "introyt": [94, 98, 199, 259], "introyt1_tutori": [94, 95, 98, 259], "tensors_deeper_tutori": [94, 98, 100, 259], "modelsyt_tutori": [94, 97, 98, 259], "tensorboardyt_tutori": [94, 98, 99, 259], "trainingyt_tutori": 94, "captumyt_tutori": 94, "captum": [94, 226, 234, 258, 259], "sphx_glr_beginner_introyt_introyt_index": [94, 98, 259], "sphx_glr_beginner_introyt_modelsyt_tutori": [94, 98, 259], "sphx_glr_beginner_introyt_autogradyt_tutori": [94, 98, 259], "sphx_glr_beginner_introyt_tensors_deeper_tutori": [94, 98, 259], "sphx_glr_beginner_introyt_captumyt": [94, 98, 259], "sphx_glr_beginner_introyt_trainingyt": [94, 98, 259], "sphx_glr_beginner_introyt_tensorboardyt_tutori": [94, 98, 259], "sphx_glr_beginner_introyt_introyt1_tutori": [94, 98, 259], "5x3": 95, "int16": [95, 100], "helpfulli": 95, "prng": 95, "manual_se": [95, 100, 106, 136, 137, 152, 154, 177, 178, 257, 260, 280], "1729": 95, "r1": 95, "r2": 95, "na": [95, 183, 259], "r3": 95, "nshould": 95, "3126": [95, 106], "3791": 95, "3087": 95, "0736": 95, "4216": 95, "0691": 95, "2332": 95, "4047": 95, "nabsolut": 95, "trigonometr": [95, 100], "ninvers": 95, "asin": 95, "singular": [95, 168, 181, 252], "decomposit": [95, 115, 138, 158], "ndetermin": 95, "det": [95, 168], "nsingular": 95, "svd": 95, "naverag": 95, "std_mean": 95, "nmaximum": 95, "9956": 95, "2232": 95, "6593": 95, "4775": 95, "2251": 95, "3961": 95, "7199": 95, "5703": 95, "return_typ": 95, "8353": 95, "5497": 95, "1793": 95, "4836": 95, "8851": 95, "4654": 95, "7217": 95, "diagram": [95, 177], "earliest": 95, "driver": [95, 186], "explos": 95, "handwritten": [95, 136], "abridg": 95, "c1": [95, 158], "s2": [95, 193], "c3": 95, "s4": [95, 193], "f5": 95, "f6": 95, "5x5": [95, 97], "affin": [95, 107, 128, 146, 184, 238, 256], "wx": 95, "fc1": [95, 119, 136, 154, 179, 187], "fc2": [95, 119, 136, 154, 179, 187], "fc3": [95, 119, 154, 187], "num_flat_featur": 95, "num_featur": [95, 190], "artifact": [95, 148, 193, 242, 247, 248, 252], "nimag": 95, "nraw": 95, "kernel_s": [95, 136, 168], "in_featur": [95, 136, 168, 229, 275, 280], "out_featur": [95, 136, 168, 275, 280], "0898": 95, "0318": 95, "1485": 95, "0301": 95, "0085": 95, "1135": 95, "0296": 95, "0164": 95, "0039": 95, "0616": 95, "addmmbackward0": 95, "gist": 95, "tile": [95, 99, 101, 189, 200, 280], "hasn": 95, "shouldn": [95, 174], "4914": 95, "4822": 95, "4465": [95, 106], "2470": 95, "2435": 95, "2616": 95, "center": [95, 97, 101, 177, 186, 238], "concatdataset": 95, "trainset": [95, 187], "50000": 95, "rotat": [95, 99, 184, 187], "vehicl": [95, 180], "170m": [95, 211], "295k": 95, "90mb": 95, "786k": 95, "42": [95, 177, 180, 210, 223], "99mb": 95, "41m": 95, "34": [95, 117, 175, 211, 223, 228, 237], "20m": 95, "98mb": 95, "11m": 95, "29m": 95, "60mb": 95, "77m": 95, "6mb": 95, "50m": 95, "70m": 95, "08": [95, 137, 158, 180, 210, 211, 223, 252, 260], "18": [95, 115, 117, 143, 158, 175, 180, 210, 211, 223, 252, 264], "07": [95, 117, 137, 168, 211, 228, 237], "5mb": 95, "6m": 95, "2m": 95, "7mb": 95, "7m": 95, "8m": 95, "38": [95, 117, 180, 210, 211, 237], "2mb": 95, "3m": 95, "33": [95, 175, 180, 183, 210, 211, 223], "51": [95, 161, 180, 210, 211], "62": [95, 180, 210, 280], "0m": 95, "40": [95, 136, 160, 161, 180, 182, 197, 210, 211, 223, 252, 265, 275, 280], "43": [95, 154, 210, 211, 223], "9m": 95, "85": [95, 136, 211, 223, 228], "97": [95, 158, 180, 211], "55": [95, 161, 210, 223, 256], "103m": 95, "109m": [95, 228], "69": [95, 210, 223], "118m": 95, "66": [95, 136, 210, 211, 223], "127m": 95, "136m": 95, "77": [95, 158, 210], "145m": 95, "90": [95, 180, 211], "154m": [95, 158], "95": [95, 142, 180, 211], "162m": 95, "filesystem": [95, 152, 263], "told": [95, 176], "spin": 95, "plane": [95, 139], "car": 95, "unnorm": [95, 187], "npimg": [95, 187], "datait": [95, 187], "make_grid": [95, 187], "49473685": 95, "5632443": 95, "strip": [95, 237, 280], "testset": [95, 187], "testload": [95, 187], "ingredi": 95, "running_loss": [95, 187], "1999": 95, "5d": 95, "3f": [95, 280], "195": [95, 175, 180], "879": 95, "6000": 95, "656": [95, 158, 257], "8000": [95, 237], "576": [95, 97, 98, 259], "517": 95, "12000": 95, "461": [95, 161], "415": 95, "368": 95, "334": 95, "327": 95, "318": 95, "261": 95, "inner": [95, 170, 176], "235": [95, 117], "940": 95, "573": 95, "507": 95, "442": 95, "378": 95, "364": 95, "349": 95, "319": [95, 211, 228], "284": [95, 180], "267": 95, "monoton": 95, "descend": 95, "memor": 95, "roughli": [95, 103, 118, 137, 150, 158, 238], "brad": 96, "heintz": 96, "pro": 96, "introyt_index": [96, 98, 199, 259], "lin": 97, "nearbi": 97, "lenet5": 97, "1x32x32": 97, "liken": 97, "3x5": 97, "presenc": [97, 191, 193, 221], "6x28x28": 97, "2x2": 97, "resolut": [97, 189], "6x14x14": 97, "sought": 97, "3x3": 97, "16x12x12": 97, "16x6x6": 97, "edg": [97, 112, 118, 135, 157, 186, 225, 253], "instrument": [97, 157, 258], "dna": 97, "nucleotid": 97, "sort": [97, 103, 107, 117, 175, 197, 228, 238], "moder": 97, "beyond": [97, 100, 106, 173, 174, 238], "scope": [97, 100, 106, 117, 141, 145, 193, 219, 242, 243], "tagger": [97, 103], "noun": 97, "verb": 97, "vocab_s": [97, 138, 172, 212], "tagset_s": 97, "hidden_dim": 97, "log_softmax": [97, 110, 136, 179], "decod": [97, 103, 137, 172, 180, 181, 197, 222, 253, 264], "transformerencod": [97, 197], "transformerdecod": [97, 197], "subcompon": [97, 191], "transformerencoderlay": [97, 181, 197], "transformerdecoderlay": [97, 172, 197], "twin": 97, "maxpool": 97, "quadrant": 97, "6x6": 97, "vanish": [97, 104, 198], "offset": [97, 194, 204, 263, 280], "neighborhood": 97, "sometim": [97, 100, 118, 141, 147, 149, 150, 153, 159, 177, 180, 182, 193, 238, 264, 273, 274], "suffer": [97, 186], "steepest": 97, "feasibl": [97, 136, 138], "hardtanh": 97, "588": [98, 161], "trainingyt": [98, 101, 259], "depict": [99, 194], "garment": 99, "tensorflow": [99, 103, 105, 118], "tf": 99, "tb": [99, 253], "gfile": 99, "tensorflow_stub": 99, "grid": [99, 101, 110, 125, 184, 187, 265], "add_imag": [99, 187], "summarywrit": [99, 187, 236], "flush": [99, 222, 236], "log_dir": [99, 142, 187], "logdir": [99, 186, 187, 236], "6006": [99, 186, 187, 236], "efficaci": 99, "add_graph": [99, 187], "add_embed": [99, 187], "projector": 99, "toggl": [99, 257, 263], "night": [99, 187], "icon": 99, "dark": [99, 189], "upack": 100, "attach": [100, 177, 198, 256], "terminologi": [100, 106], "likewis": [100, 167], "assur": [100, 170], "random1": 100, "random3": 100, "random2": 100, "random4": 100, "rng": [100, 152], "_like": [100, 161], "zeros_lik": [100, 178], "rand_lik": [100, 168], "cue": 100, "intent": [100, 205, 272], "subtract": [100, 102, 238], "divis": [100, 193, 210], "2x4": 100, "1x4": 100, "honor": 100, "3rd": [100, 138, 145, 200, 212], "2nd": [100, 107, 138, 145, 179], "hundr": [100, 131, 140, 189, 194], "bitwis": [100, 222], "inventori": [100, 101], "occupi": [100, 219], "discard": [100, 136, 137, 186, 228, 237], "underscor": 100, "deepli": 100, "nor": [100, 152, 256, 271], "mid": 100, "someplac": 100, "ram": [100, 137, 170, 194, 227], "colloqui": 100, "fragil": 100, "robustli": [100, 114], "whichev": 100, "acquir": [100, 119, 174, 176, 180], "thrown": [100, 274], "226": 100, "zeroth": 100, "un": [100, 182], "bracket": 100, "rescu": 100, "squeeze_": 100, "unsqueeze_": 100, "radic": 100, "parenthes": 100, "comma": 100, "convinc": [100, 167], "kinship": 100, "autom": [101, 118, 142, 157, 161, 189], "outcom": [101, 142, 262], "saniti": [101, 128, 142, 176, 189], "nb": [101, 283], "chose": [101, 175], "saved_model": 101, "garmentclassifi": 101, "alexandro": 102, "chariton": 102, "computation": [102, 189], "deploy": [102, 129, 133, 142, 212, 242, 252, 265, 278], "lightweight": [102, 130, 135, 174, 222], "drone": 102, "phone": [102, 112], "4gb": [102, 167, 175], "v2": [102, 122, 153, 175, 190, 194, 200, 204, 210, 279], "3072": [102, 280], "satur": [102, 222], "furthermor": [102, 154, 159, 187, 206, 223, 265], "held": [102, 143, 179], "greedi": [102, 153, 177], "num_images_to_keep": 102, "50_000": 102, "test_dataset": 102, "10_000": 102, "extractor": [102, 189], "emploi": [102, 182, 186, 197, 204], "train_load": [102, 136, 137, 179, 186, 212, 246], "detriment": 102, "workload": [102, 117, 131, 138, 149, 150, 152, 186, 194, 204, 207, 211, 212, 256, 266, 275], "test_load": [102, 136, 179], "sensit": [102, 148, 156], "conclud": [102, 147, 152, 193], "interven": [102, 193], "soft": [102, 177], "mistaken": 102, "alon": [102, 119, 140, 182, 187], "exploit": [102, 160, 182], "meaningfulli": 102, "temperatur": 102, "smoother": 102, "boost": [102, 104, 158, 159, 200, 212, 213, 264, 275, 284], "soft_target_loss_weight": 102, "ce_loss_weight": 102, "train_knowledge_distil": 102, "75": [102, 125, 136, 210], "ce": [102, 182], "coeffici": 102, "convei": 102, "naiv": [102, 141, 159, 169, 181, 276], "rational": 102, "capac": [102, 148, 176, 189, 238], "cosineembeddingloss": 102, "obvious": [102, 106, 180], "resolv": [102, 161, 190, 193, 198, 206, 253, 273], "somehow": [102, 109, 194], "hidden_represent": 102, "hidden_representation_s": 102, "avg_pool1d": 102, "harder": [102, 264], "Its": [102, 104, 276], "modifiedlightnnregressor": 102, "cosineloss": 102, "wiggl": 102, "room": [102, 170, 211], "mismatch": [102, 193, 262], "hinton": 102, "vinyal": 102, "dean": 102, "workshop": 102, "romero": 102, "balla": 102, "kahou": 102, "chassang": 102, "gatta": 102, "bengio": 102, "fitnet": 102, "thin": [102, 263], "confer": 102, "knowledge_distillation_tutori": [102, 120, 259], "kit": 103, "dynet": [103, 105], "opposit": [103, 170, 272], "theano": [103, 105], "kera": [103, 105, 118], "constitu": 103, "bottom": [103, 186, 189, 193, 219], "green": [103, 137, 140, 187], "wall": [103, 157, 223], "fat": 103, "exception": 103, "entiti": [103, 109, 194, 240, 241], "recognit": [103, 135, 200, 238], "ner": 103, "sound": [103, 106, 118], "scari": 103, "viterbi": [103, 107], "exp": [103, 104, 147, 273], "sum_": [103, 109, 177], "psi_i": 103, "sum_i": 103, "partit": [103, 135, 140, 145, 152, 205, 238], "emiss": 103, "timestep": [103, 107, 143, 144, 177], "textbf": 103, "psi_": 103, "y_i": [103, 107], "rightarrow": [103, 152, 177], "x_i": [103, 104], "tran": [103, 189], "h_i": [103, 107], "michael": [103, 202, 203, 210, 222, 249, 254], "collin": 103, "robert": [103, 104, 106, 107, 109], "guthri": [103, 104, 106, 107, 109], "prepare_sequ": 103, "anywai": [103, 106, 170], "gold": [103, 182], "perceptron": 103, "score_sent": 103, "advanced_tutori": [103, 105, 108, 259], "workhors": 104, "2x5": 104, "acx": 104, "ac": [104, 189], "sigma": [104, 176], "plenti": 104, "peopl": [104, 105, 125], "shy": 104, "linearit": 104, "sum_j": 104, "x_j": 104, "unseen": [104, 109], "eta": 104, "vari": [104, 138, 146, 160, 170, 182, 191, 193, 197, 202, 222, 242, 273, 276], "spanish": [104, 143, 144], "bow": 104, "vocab": [104, 107, 140], "word_to_ix": [104, 107, 109], "bowclassifi": 104, "creo": 104, "bigger": [104, 143, 144, 175, 189], "deep_learning_tutori": [104, 105, 108, 259], "toolkit": [105, 160, 170, 193, 236], "russel": 105, "norvig": 105, "book": 105, "rip": 105, "pytorch_tutori": [105, 106, 108, 259], "word_embeddings_tutori": [105, 108, 109, 259], "lexic": [105, 108, 259], "sequence_models_tutori": [105, 107, 108, 259], "bi": [105, 108, 259], "crf": [105, 108, 259], "0x7f7b025486b0": 106, "v_data": 106, "m_data": 106, "2x2x2": 106, "t_data": 106, "5256": 106, "7502": 106, "6540": 106, "6095": 106, "1002": 106, "6092": 106, "9798": 106, "6091": 106, "7121": 106, "3037": 106, "7773": 106, "2515": 106, "2223": 106, "6871": 106, "2284": 106, "4676": 106, "6970": 106, "1608": [106, 168], "6995": 106, "1991": 106, "8657": 106, "2444": 106, "6629": 106, "8073": 106, "1017": 106, "1759": 106, "2456": 106, "0612": 106, "6177": 106, "7981": 106, "1316": 106, "8793": 106, "0721": 106, "1578": 106, "7735": 106, "0457": 106, "1530": 106, "4757": 106, "1110": 106, "2927": 106, "0288": 106, "4533": 106, "1422": 106, "2486": 106, "7754": 106, "0255": 106, "0233": 106, "5962": 106, "0055": 106, "4285": 106, "7869": 106, "6103": 106, "7040": 106, "1853": 106, "9962": 106, "8313": 106, "z_1": 106, "x_2": [106, 164], "y_2": 106, "z_2": 106, "complain": [106, 193], "8029": 106, "2366": 106, "2857": 106, "6898": 106, "6331": 106, "8795": 106, "6842": 106, "2912": 106, "8317": 106, "5525": 106, "6355": 106, "3968": 106, "6571": 106, "6428": 106, "9803": 106, "0421": 106, "8206": 106, "3133": 106, "1352": 106, "3773": 106, "2824": 106, "5667": 106, "4303": 106, "5009": 106, "5438": 106, "4057": 106, "1341": 106, "1473": 106, "6272": 106, "0935": 106, "0939": 106, "2381": 106, "1115": 106, "7703": 106, "3459": 106, "5119": 106, "6933": 106, "1668": 106, "9999": 106, "4175": 106, "2127": [106, 193], "8400": 106, "4200": 106, "6240": 106, "9773": 106, "8748": 106, "9873": 106, "0594": 106, "4919": 106, "2423": 106, "1095": 106, "5038": 106, "6223": 106, "4481": 106, "2856": 106, "3880": 106, "1435": 106, "6512": 106, "1032": 106, "6937": 106, "vagu": 106, "programm": [106, 109], "mayb": [106, 109, 154, 193, 284], "addbackward0": [106, 168], "0x7f7ab889ff70": 106, "0x7f7ab889cb50": 106, "x_0": 106, "overbrac": [106, 107, 109], "y_0": 106, "z_0": 106, "gloss": 106, "new_z": 106, "NO": 106, "forgotten": 106, "0x7f7ab889d1e0": 106, "136": [106, 108, 211, 259], "classic": [107, 110, 161, 168, 184, 213, 235], "markov": 107, "myriad": 107, "cow": 107, "q_": [107, 109, 160], "1st": [107, 136, 138, 145], "unfamiliar": 107, "w_1": 107, "w_m": 107, "w_i": [107, 109], "_i": 107, "_1": [107, 128], "_m": 107, "argmax": [107, 136, 179, 211], "_j": 107, "ah_i": 107, "affix": [107, 109], "bear": 107, "ly": 107, "adverb": 107, "c_w": 107, "x_w": 107, "po": [107, 189], "emb": [107, 109, 180], "147": 108, "capit": 109, "enorm": [109, 189], "notion": 109, "mathematician": 109, "physicist": 109, "ok": [109, 139, 178], "role": [109, 174, 180, 194, 256], "orthograph": 109, "linguist": 109, "hypothesi": 109, "coffe": 109, "phi": 109, "gave": 109, "pain": 109, "earth": 109, "herself": 109, "longtensor": [109, 144, 178, 180], "ith": [109, 276], "shakespear": [109, 181], "sonnet": 109, "word_i": 109, "context_s": 109, "beauti": 109, "cbow": 109, "probabilist": [109, 176], "percent": 109, "q_w": 109, "raw_text": 109, "dedupl": 109, "jeremi": 110, "howard": [110, 160, 172, 173], "rachel": 110, "thoma": 110, "ingham": 110, "elegantli": [110, 225], "concis": 110, "trail": 110, "signifi": 110, "xavier": [110, 111], "initialis": 110, "prewritten": 110, "pred": [110, 128, 136, 140, 179, 187], "talli": 110, "debugg": 110, "set_trac": 110, "logist": 110, "cross_entropi": [110, 140], "clearer": [110, 187], "uppercas": 110, "zero_": [110, 173, 180], "prone": [110, 145, 197, 207], "gone": [110, 141], "xb": 110, "faciallandmarkdataset": 110, "tensordataset": 110, "x_train": 110, "y_train": 110, "start_i": 110, "end_i": 110, "yb": 110, "train_d": 110, "cleaner": [110, 271, 273, 284], "train_dl": 110, "phase": [110, 152, 180, 228, 254], "loss_batch": 110, "simpler": [110, 138, 140, 146, 156, 168, 223, 283], "rid": [110, 111, 138, 159, 253], "avgpool2d": 110, "adaptiveavgpool2d": [110, 153], "lucki": [110, 174], "rent": 110, "hour": [110, 253], "mnist_sampl": 110, "fastai": 110, "practition": [110, 152, 274], "dupr\u00e9": 111, "circumv": 111, "forwardwithcontrolflowtest": 111, "modelwithcontrolflowtest": 111, "mlp": [111, 140, 154, 194], "unexpectedli": [111, 219], "succe": [111, 114, 193], "assertionerror": [111, 158], "identity2": 111, "fx": [111, 112, 129, 135, 158, 183, 193, 213, 247, 259, 266], "imperfect": 111, "faith": 111, "pitfal": [111, 193], "necessarili": [111, 112, 114, 115, 145, 147, 170, 193], "export_control_flow_model_to_onnx_tutori": [111, 113, 116, 259], "ti": [112, 114, 115], "tai": [112, 114, 115], "justin": [112, 115, 118, 128, 198], "chu": [112, 115], "thiago": [112, 114], "crepaldi": [112, 114], "dynamo": [112, 114, 145, 158, 213, 253, 254, 265], "gamut": 112, "platform": [112, 150, 152, 186, 200, 211, 219, 238, 246, 256], "supercomput": 112, "constrain": [112, 142, 168], "onnxscript": [112, 114, 115], "upgrad": [112, 114, 168, 175, 186, 284], "onnxprogram": [112, 115], "protobuf": 112, "app": [112, 135, 204, 205, 212], "drag": [112, 167, 186, 187, 206], "image_classifier_model": 112, "onnxruntim": [112, 114], "export_simple_model_to_onnx_tutori": [112, 113, 116, 259], "intro_onnx": [113, 114, 116, 259], "onnx_registry_tutori": [113, 115, 116, 259], "sphx_glr_beginner_onnx_intro_onnx": [113, 116, 259], "sphx_glr_beginner_onnx_export_control_flow_model_to_onnx_tutori": [113, 116, 259], "sphx_glr_beginner_onnx_export_simple_model_to_onnx_tutori": [113, 116, 259], "sphx_glr_beginner_onnx_onnx_registry_tutori": [113, 116, 259], "exportedprogram": [114, 115, 119, 193, 242, 252, 253], "newer": [114, 151, 161, 167, 169, 195, 230, 231, 232, 233, 238, 282], "__version__": [114, 175], "registri": 115, "opoverload": 115, "opset": 115, "blob": [115, 136, 186], "native_funct": 115, "yaml": [115, 148], "custom_translation_t": 115, "redund": [115, 153], "node_add_0": 115, "input_i": 115, "input_x": 115, "gelu": [115, 278], "op_typ": 115, "round": [115, 137, 178, 223, 237], "mylibrari": 115, "add_and_round_op": 115, "json": [117, 170, 181, 186, 206, 228, 252], "quicker": 117, "record_funct": [117, 158, 211, 228], "incur": [117, 140, 204, 238, 262], "investig": [117, 128, 161, 174, 189, 191, 193, 237], "with_stack": [117, 186], "key_averag": [117, 211], "group_by_stack_n": 117, "traceback": [117, 158, 253], "sort_bi": [117, 211, 228], "193a910735e8": 117, "stacktrac": 117, "88": [117, 180], "212": 117, "953": 117, "67": [117, 158, 210, 211], "mnt": [117, 152], "xarfus": 117, "au": 117, "715": 117, "848m": 117, "350": 117, "151u": 117, "293": [117, 161], "342u": 117, "095u": 117, "931": 117, "tackl": 117, "footprint": [117, 136, 137, 138, 148, 167, 211, 222, 257], "61": [117, 161, 210, 211, 280], "006": 117, "476": 117, "338": 117, "759m": 117, "as_strid": [117, 158], "281": [117, 161], "808u": 117, "275": 117, "721u": 117, "_local": 117, "268": 117, "650u": [117, 228], "_scalar_dens": 117, "347": 117, "argwher": 117, "nonzero": [117, 238], "129": 117, "089m": 117, "402m": 117, "491m": 117, "119": 117, "441": 117, "587u": 117, "_numpi": 117, "395": [117, 180], "602u": 117, "801m": 117, "rpc": [117, 135, 258], "johnson": 118, "brows": 118, "utf": 118, "modern": [118, 170, 191, 194], "50x": 118, "hairi": 118, "thankfulli": 118, "wave": 118, "slim": 118, "tflearn": 118, "burden": [118, 182, 238], "sophist": [118, 176], "facil": 119, "running_mean": [119, 240], "themodelclass": 119, "param_tensor": 119, "var_nam": 119, "param_group": [119, 203, 210], "dampen": 119, "weight_decai": [119, 210], "4675713712": 119, "4675713784": 119, "4675714000": 119, "4675714072": 119, "4675714216": 119, "4675714288": 119, "4675714432": 119, "4675714504": 119, "4675714648": 119, "4675714720": 119, "_use_new_zipfile_seri": 119, "best_model_st": 119, "deepcopi": [119, 154], "pt2": [119, 193, 202, 203, 207, 210, 252], "simplemodel": 119, "saved_exported_program": 119, "model_state_dict": [119, 138, 204, 205, 212], "theoptimizerclass": 119, "modela_state_dict": 119, "modela": 119, "modelb_state_dict": 119, "modelb": 119, "optimizera_state_dict": 119, "optimizera": 119, "optimizerb_state_dict": 119, "optimizerb": 119, "themodelaclass": 119, "themodelbclass": 119, "theoptimizeraclass": 119, "theoptimizerbclass": 119, "gan": [119, 132, 135, 168], "ensembl": [119, 130, 135, 183, 259], "map_loc": [119, 138, 150, 189, 222, 227], "remap": 119, "overwrit": 119, "saving_loading_model": [119, 120, 230, 231, 232, 233, 259], "026": 120, "distil": [120, 130, 135, 259], "dcgan": [120, 130, 132, 135, 259], "transfer_learning_tutori": [120, 125, 259], "understanding_leaf_vs_nonleaf_tutori": [120, 128, 259], "template_tutori": [120, 122, 259], "rai": [120, 133, 135, 259], "firstnam": 122, "lastnam": 122, "gallery_pattern": 122, "neural_style_transfer_tutori": 122, "sphinx": 122, "_build": 122, "beginner_sourc": [122, 259], "link1": [122, 137], "link2": [122, 137], "cs231n": 125, "quot": 125, "million": [125, 137, 153], "licens": [125, 184], "bsd": [125, 184], "todai": [125, 194, 210, 273], "lr_schedul": [125, 136, 137], "num_ftr": 125, "decai": [125, 153, 177], "checkout": 125, "silver": [128, 167, 198], "_k": 128, "bigl": 128, "bigr": 128, "programmat": 128, "probe": [128, 198], "phrase": [128, 182], "afterward": [128, 170, 193, 263], "retains_grad": 128, "tracker": [128, 157, 198], "streamlin": 129, "inductor": [129, 130, 135, 145, 183, 193, 210, 242, 248, 250, 254, 259, 264, 266, 275, 278, 284], "set_stanc": [129, 245, 258, 259], "usecas": [129, 258], "lrschedul": [129, 167, 258], "triton": [129, 158, 191, 210, 245, 247, 252, 258, 259, 266, 275], "cach": [129, 145, 158, 186, 197, 213, 238, 251, 256, 258, 264, 275], "cold": [129, 182, 226, 245, 247, 258, 259], "torchdynamo": [129, 135, 145, 193, 266, 278], "fuser": [129, 135, 183, 259], "orthogon": [130, 135, 168], "symmetr": [130, 135, 168, 278], "prune": [130, 135, 168, 183, 259, 284], "scaled_dot_product_attent": [130, 135, 181, 197, 260], "nchw": [130, 135, 161, 212], "func": [130, 135, 154, 156, 159, 164, 169, 249, 253, 283], "tangent": [130, 135, 156, 183, 259], "nerur": 130, "netork": [130, 135], "exploresever": 130, "spread": [131, 189], "demand": [131, 262], "ddp_series_intro": 131, "utm_sourc": 131, "distr_land": 131, "utm_medium": 131, "distributeddata": 131, "ddp_tutori": 131, "intermediate_ddp_tutori": 131, "uneven": 131, "generic_join": 131, "fsdp_tutori": 131, "fsdp_getting_start": 131, "tp_tutori": 131, "distributed_device_mesh": 131, "rpc_tutori": 131, "rpc_getting_start": 131, "rpc_param_server_tutori": 131, "async_execut": [131, 135, 178], "rpc_async_execut": 131, "dataparallel": [131, 135, 141, 222, 238], "rpc_ddp_tutori": 131, "rpc_plus_ddp": 131, "plug": [131, 173, 184], "process_group_cpp_extension_tutori": 131, "custom_extensions_cpp": 131, "dqn": [132, 135, 183, 259], "cartpol": [132, 135, 153, 177, 180], "v0": [132, 135, 160, 177, 196], "proxim": [132, 135, 176], "invert": [132, 135, 176, 272], "mario": [132, 135, 168, 183, 259], "experiment": [133, 136, 142, 180, 198, 236, 238, 260, 262, 265, 278], "torchx": [133, 135], "plugin": [133, 135, 186], "raspberri": 133, "gpudirect": [135, 259, 281, 284], "bite": [135, 199, 258], "non_block": [135, 183, 259], "pin_memori": [135, 136, 137, 183, 238, 259], "slide": [135, 238], "tiatoolbox": 135, "resampl": 135, "waveform": 135, "wav2vec2": 135, "holist": 135, "_static": 135, "thumbnail": [135, 189], "matcher": [135, 190], "paral": 135, "fully_shard": [135, 138, 140, 204, 205, 207], "libuv": 135, "tcpstore": [135, 150], "sdk": 135, "mobilenet": [135, 175], "v3": 135, "camera": [135, 175], "xnnpack": 135, "metal": 135, "shader": 135, "android": 135, "deeplab": 135, "fp32": [135, 137, 148, 161, 181, 200, 210, 264, 275], "torchrec": [135, 183, 259], "distributedmodelparallel": 135, "hamid": [136, 137], "shojanazeri": [136, 137], "yanli": [136, 137], "zhao": [136, 137], "shen": [136, 150, 173, 178, 180], "li": [136, 150, 152, 170, 173, 178, 180, 191], "fsdp1": 136, "huggingfac": [136, 137, 197, 213, 253, 280], "1t": [136, 148], "courtesi": 136, "patrick": 136, "hu": 136, "reduce_scatt": [136, 137, 140], "scatter": [136, 138, 150, 152, 189], "possess": [136, 227, 264], "toi": [136, 150, 180, 190, 193, 194, 205, 235], "fsdp_mnist": 136, "size_based_auto_wrap_polici": 136, "default_auto_wrap_polici": 136, "fsdp_auto_wrap_polici": 136, "auto_wrap_polici": [136, 137, 138], "steplr": [136, 137], "fully_sharded_data_parallel": 136, "cpuoffload": [136, 138], "backwardprefetch": [136, 137], "enable_wrap": [136, 137], "cleanup": [136, 137, 150, 204, 205], "dropout1": [136, 179], "dropout2": [136, 179], "9216": [136, 179], "ddp_loss": 136, "batch_idx": [136, 212, 246], "nll_loss": [136, 152, 179], "tloss": 136, "6f": 136, "keepdim": [136, 179], "view_a": [136, 179], "test_loss": 136, "2f": [136, 175, 178, 180], "fsdp_main": [136, 137], "1307": [136, 152, 179], "3081": [136, 152, 179], "dataset1": 136, "dataset2": 136, "sampler1": [136, 137], "num_replica": [136, 137], "sampler2": [136, 137], "train_kwarg": [136, 137], "test_kwarg": [136, 137], "test_batch_s": [136, 137], "cuda_kwarg": [136, 137], "my_auto_wrap_polici": 136, "min_num_param": 136, "init_start_ev": [136, 137], "enable_tim": [136, 137], "init_end_ev": [136, 137], "adadelta": 136, "step_siz": [136, 137, 210], "gamma": [136, 137, 160, 177, 178, 180], "elaps": [136, 182], "elapsed_tim": 136, "save_model": [136, 137], "barrier": [136, 137, 139, 150, 152, 260], "mnist_cnn": 136, "metavar": [136, 137, 178, 180], "store_tru": [136, 137], "110": [136, 180, 223], "67462890625sec": 136, "_fsdp_wrapped_modul": 136, "flattenparamswrapp": 136, "_fpw_modul": 136, "inplac": [136, 280], "peak": [136, 138, 146, 167, 175, 197, 204, 250, 256, 257, 260, 264], "g4dn": 136, "xlarg": 136, "allgath": [136, 137, 140, 173, 238], "seal": 136, "20000": 136, "89130859375sec": 136, "auto_wrap": 136, "offload": [136, 137, 138, 211, 219], "cpu_offload": [136, 138], "offload_param": [136, 138], "dpp": 136, "ddp_mnist": 136, "39": [136, 180, 197, 211, 223], "77766015625sec": 136, "blog": [136, 137, 143, 148, 197, 211, 221], "wright": 137, "rohan": [137, 179], "varma": [137, 179], "wikihow": 137, "p4dn": 137, "a100": [137, 141, 169, 191, 197, 264, 280], "pressur": [137, 204], "fdsp": 137, "xxl": 137, "billion": [137, 140], "3b": [137, 175], "wikihowal": 137, "wikihowsep": 137, "summarization_dataset": 137, "t5_train": 137, "autotoken": [137, 280], "gpt2tokenizerfast": 137, "t5token": 137, "t5forconditionalgener": 137, "modeling_t5": 137, "t5block": 137, "checkpoint_wrapp": 137, "checkpointimpl": 137, "apply_activation_checkpointing_wrapp": 137, "mixedprecis": 137, "shardingstrategi": 137, "fullstatedictconfig": 137, "statedicttyp": 137, "transformer_auto_wrap_polici": 137, "tqdm": [137, 153, 176, 280], "datetim": [137, 139, 262], "setup_model": 137, "from_pretrain": [137, 212, 253, 280], "get_date_of_run": 137, "2022": [137, 266], "31": [137, 158, 210, 211, 223, 228, 237], "12_pm": 137, "date_of_run": 137, "strftime": 137, "s_": [137, 177], "format_metrics_to_gb": 137, "gigabyt": 137, "metric_num": 137, "g_gigabyt": 137, "ndigit": 137, "fsdp_loss": 137, "inner_pbar": 137, "colour": 137, "desc": [137, 262], "r0": 137, "input_id": [137, 140, 253, 280], "source_id": 137, "attention_mask": [137, 253], "source_mask": 137, "target_id": 137, "train_accuraci": 137, "val_load": 137, "load_dataset": [137, 253, 280], "type_path": 137, "output_length": 137, "print_text": 137, "150": [137, 180], "val_dataset": 137, "t5_auto_wrap_polici": 137, "transformer_layer_cl": 137, "sharding_strategi": [137, 138], "shard_grad_op": [137, 138], "zero2": 137, "full_shard": [137, 138], "zero3": 137, "bf16_readi": 137, "is_bf16_support": 137, "loosevers": 137, "is_nccl_avail": [137, 260], "mp_polici": [137, 138], "bfsixteen": 137, "mixed_precis": [137, 138], "current_devic": [137, 222], "best_val_loss": 137, "inf": [137, 193, 210, 273, 276], "curr_val_loss": 137, "file_save_nam": 137, "time_of_run": 137, "dur": 137, "train_acc_track": 137, "val_acc_track": 137, "training_start_tim": 137, "track_memori": 137, "mem_alloc_track": 137, "mem_reserved_track": 137, "run_valid": 137, "zone": 137, "memory_alloc": 137, "memory_reserv": 137, "save_polici": 137, "offload_to_cpu": 137, "rank0_onli": 137, "state_dict_typ": 137, "full_state_dict": [137, 138], "cpu_stat": 137, "currepoch": 137, "prefix": [137, 141, 145, 153, 186, 191, 193, 223, 237, 256, 257, 262, 264], "save_nam": 137, "store_fals": 137, "nnode": [137, 150, 172, 260, 262], "transfom": 137, "mhsa": 137, "ffn": [137, 197], "bfloat16": [137, 138, 200, 213, 222, 235, 246, 260, 264, 275], "v100": [137, 191], "fpsixteen": 137, "param_dtyp": [137, 138], "reduce_dtyp": [137, 138], "buffer_dtyp": [137, 138], "fp32_polici": 137, "grad_bf16": 137, "4x": 137, "basi": 137, "oom": [137, 167, 222], "freed": [137, 167], "backward_pr": [137, 138], "backward_prefetch": [137, 138], "backward_post": [137, 138], "contact": [137, 283], "yifan": 138, "mao": 138, "fsdp": [138, 140, 148, 204, 205, 207], "unshard": [138, 194, 260], "recordstream": 138, "float8": 138, "nf4": 138, "qlora": 138, "eg": 138, "fsdpmodul": 138, "isinst": [138, 265, 280], "fsdptransform": 138, "tok_embed": [138, 140, 172], "fsdptransformerblock": 138, "joint": [138, 248], "to_loc": 138, "clip_grad_norm_": 138, "seq_len": 138, "queu": [138, 204], "set_modules_to_forward_prefetch": 138, "set_modules_to_backward_prefetch": 138, "perf": [138, 280], "layers_to_prefetch": 138, "num_to_forward_prefetch": 138, "num_to_backward_prefetch": 138, "upcast": 138, "model_arg": [138, 172], "fsdp_kwarg": 138, "mixedprecisionpolici": 138, "max_norm": 138, "resum": [138, 191, 205, 253], "distribute_tensor": 138, "mmap": 138, "full_sd": 138, "meta_sharded_sd": 138, "sharded_sd": 138, "param_nam": [138, 235], "full_tensor": 138, "sharded_meta_param": 138, "sharded_tensor": 138, "device_mesh": [138, 140, 207, 260], "full_param": 138, "cpu_state_dict": 138, "sharded_param": 138, "del": [138, 172, 210, 263, 265], "set_model_state_dict": 138, "broadcast_from_rank0": 138, "statedictopt": 138, "get_model_state_dict": 138, "set_optimizer_state_dict": 138, "get_optimizer_state_dict": 138, "modulewrappolici": 138, "transformerblock": [138, 140], "param_init_fn": 138, "itertool": [138, 180], "to_empti": [138, 235], "reset_paramet": 138, "sublay": 138, "reshard_after_forward": 138, "hybrid_shard": 138, "_hybrid_shard_zero2": 138, "offload_polici": 138, "cpuoffloadpolici": 138, "cast_forward_input": 138, "cast_root_forward_input": 138, "output_dtyp": [138, 262], "sync_module_st": 138, "rank0": [138, 178, 180, 262], "forward_prefetch": 138, "fsdp_modul": 138, "limit_all_gath": 138, "use_orig_param": 138, "flat": 138, "no_sync": [138, 238], "set_requires_gradient_sync": 138, "ignored_param": 138, "ignored_st": 138, "xilun": [139, 260], "roll": 139, "1k": [139, 140], "98304": 139, "96k": 139, "perf_count": 139, "getlogg": [139, 189], "var": 139, "preset": [139, 278], "env_rank": 139, "env_world_s": 139, "env_master_addr": 139, "env_master_port": 139, "23456": [139, 152], "tcp_store": 139, "is_mast": 139, "time_elaps": 139, "client": 139, "superior": [139, 275], "timeout": [139, 150, 173, 262], "store_based_barri": 139, "timedelta": [139, 262], "diststoreerror": 139, "_diststoreerror": 139, "_store_based_barri": 139, "group_nam": 139, "rendezvous_count": 139, "default_pg_timeout": 139, "logging_interv": 139, "store_kei": 139, "store_based_barrier_kei": 139, "worker_count": 139, "last_worker_kei": 139, "last_work": 139, "num_workers_join": 139, "tcpstore_test": 139, "number_run": 139, "spectrum": 139, "listen_fd": 139, "socket": [139, 152, 158, 238, 256], "listen_sock": 139, "af_inet": 139, "sock_stream": 139, "addr": [139, 262], "getsocknam": 139, "master_listen_fd": 139, "notimplementederror": 139, "gloo": [139, 150, 152, 173, 186, 194, 204, 257], "vairabl": 139, "notifi": [139, 178], "wanchao": [140, 207], "liang": [140, 207], "tianyu": 140, "liu": 140, "megatron": 140, "lm": 140, "sp": 140, "parallelstyl": 140, "parallelize_modul": 140, "foward": 140, "aris": [140, 193, 197, 253, 264, 273], "exceed": [140, 176], "domin": [140, 161, 189], "inter": [140, 149, 164, 207, 238], "ballpark": 140, "flop": [140, 194, 250], "llm": [140, 172, 275], "trillion": [140, 148], "month": 140, "llama": [140, 197, 213, 278], "70b": 140, "2k": 140, "dai": [140, 194, 235], "llama2": 140, "colwiseparallel": 140, "rowwiseparallel": 140, "sequenceparallel": 140, "rmsnormpython": 140, "preparemoduleinput": 140, "preparemoduleoutput": 140, "init_device_mesh": [140, 207, 260], "tp_mesh": [140, 207], "feedforward": 140, "swiglu": 140, "w2": 140, "silu": 140, "w1": 140, "w3": 140, "colwis": 140, "rowwis": 140, "parallelize_plan": 140, "layer_tp_plan": 140, "feed_foward": 140, "feed_forward": 140, "wq": 140, "wk": 140, "wv": 140, "wo": 140, "tp_plan": 140, "draft": [140, 152], "use_local_output": 140, "num_head": 140, "layer_id": [140, 172], "transformer_block": 140, "input_layout": 140, "output_layout": 140, "residu": 140, "attention_norm": 140, "ffn_norm": 140, "desired_input_layout": 140, "yellow": 140, "red": [140, 145, 187, 219], "loss_parallel": 140, "seq": 140, "dp": [140, 262], "mesh_2d": [140, 207], "submesh": 140, "dp_mesh": 140, "model_tp": 140, "model_2d": 140, "broadli": 141, "torchviz": [141, 147], "orang": [141, 175], "_save": 141, "kept": [141, 262], "_saved_self": 141, "_saved_oth": 141, "cycl": [141, 186, 200, 223, 228], "thumb": [141, 159, 176, 222], "pack_hook": 141, "unpack_hook": 141, "silli": 141, "harmless": 141, "debat": 141, "__repr__": [141, 223], "152": 141, "48gb": 141, "5gb": 141, "6x": 141, "leak": 141, "autograd_saved_tensors_hooks_tutori": [141, 183, 259], "david": 142, "eriksson": 142, "balandat": 142, "methodologi": [142, 212], "laptop": 142, "sustain": [142, 204], "studi": [142, 174, 189], "botorch": 142, "bayesian": 142, "mnist_train_na": [142, 162, 183, 259], "appdef": 142, "kubernet": 142, "local_cwd": 142, "fetch": [142, 144, 178, 179, 180, 194, 248], "proxi": [142, 223, 242, 243, 271, 274], "tensorboardcurvemetr": 142, "curve_nam": 142, "lower_is_bett": 142, "favor": [142, 164, 176, 193], "multiobjectiveoptimizationconfig": 142, "94": [142, 211, 228], "generationstrategi": 142, "scheduleropt": 142, "max_pending_tri": 142, "pareto": 142, "frontier": 142, "surrog": 142, "uncertainti": 142, "num_param": 142, "val_acc": 142, "contour": 142, "hidden_size_1": 142, "kiuk": 142, "chung": 142, "tristan": [142, 175], "rice": [142, 175], "ax_multiobjective_nas_tutori": [142, 162, 183, 259], "surnam": 143, "spell": 143, "lua": [143, 144, 182], "unreason": [143, 144], "roman": 143, "alphabet": 143, "n_letter": 143, "line_length": 143, "all_lett": 143, "linetotensor": 143, "namesdataset": 143, "20074": 143, "charrnn": 143, "cudnn": [143, 146, 153, 161, 222], "label_from_output": 143, "histor": [143, 144], "all_loss": [143, 144], "minu": [143, 186], "bright": 143, "incorrectli": 143, "chines": [143, 144], "korean": 143, "italian": 143, "greek": 143, "poorli": 143, "gender": 143, "writer": [143, 175, 176, 187, 204, 236, 262], "subreddit": 143, "char_rnn_classification_tutori": [143, 165, 183, 259], "russian": 144, "ru": 144, "rovakov": 144, "uantov": 144, "shavakov": 144, "german": 144, "ger": 144, "gerren": 144, "ereng": 144, "rosher": 144, "spa": 144, "salla": 144, "parer": 144, "allan": 144, "chi": 144, "chan": 144, "iun": 144, "category_lin": 144, "o2o": 144, "muscl": [144, 189], "fuzz": 144, "chao": 144, "abcd": 144, "eo": [144, 182], "n_categori": 144, "randomtrainingexampl": 144, "contrast": [144, 150, 169, 170, 193, 271], "timesinc": 144, "timestamp": [144, 157, 219], "print_everi": 144, "plot_everi": 144, "output_nam": 144, "fiction": 144, "countri": 144, "citi": 144, "char_rnn_generation_tutori": [144, 165, 183, 259], "simon": 145, "fan": [145, 175], "torch_log": [145, 193, 243, 245, 253, 258, 259, 275], "_dynamo": [145, 158, 191, 193, 210, 243, 253], "compiled_autograd": 145, "intercept": 145, "bytecod": [145, 191], "aotdispatch": 145, "rout": [145, 158, 193], "rewritten": 145, "compiled_autograd_verbos": 145, "stderr": 145, "aot0_": 145, "aot0_view_2": 145, "view_2": 145, "aot": [145, 158, 210, 245, 250, 258, 259], "unoptim": [145, 191], "aot_eag": [145, 158], "fn": [145, 152, 156, 158, 191, 202, 210, 248, 251, 265], "temp": [145, 247], "graph_break": [145, 253], "unique_graph": 145, "call_hook": 145, "div": [145, 158, 210, 271], "adjac": 146, "hardcod": [146, 193], "dilat": 146, "track_running_statist": 146, "denomin": 146, "nenadmarku": [146, 190], "bulk": 146, "fusedconvbn": 146, "geforc": 146, "rtx": 146, "3070": 146, "56gb": 146, "unfus": 146, "68gb": 146, "shallow": [146, 153], "bn": [146, 190], "custom_function_conv_bn_tutori": [146, 183, 259], "equip": [147, 153, 256, 271], "staticmethod": [147, 178, 189], "grad_out": 147, "finit": [147, 164], "differenc": 147, "magnifi": 147, "gradgradcheck": [147, 238], "grad_x": 147, "make_dot": 147, "dout": 147, "ouptut": 147, "sinh": 147, "cosh": 147, "expx": 147, "expnegx": 147, "_grad_out_exp": 147, "_grad_out_negexp": 147, "sinhbad": 147, "cube_backward": 147, "cubebackward": 147, "cube_forward": 147, "cube_backward_backward": 147, "sav_grad_out": 147, "cube_backward_backward_grad_out": 147, "cube": 147, "dgrad_out": 147, "reachabl": [148, 149, 152], "2xlarg": [148, 149], "hydra": 148, "slurm": [148, 149, 150, 152], "char_dataset": 148, "gpt2_train_cfg": 148, "bucket": [148, 238], "aggress": 148, "rendezv": [149, 173], "nccl_debug": 149, "verbos": [149, 189, 193, 200, 206], "diagnos": 149, "nccl_socket_ifnam": 149, "eth0": 149, "joe": 150, "zhu": [150, 158], "chirag": [150, 262], "pandya": [150, 262], "fire": 150, "clarifi": 150, "filestor": 150, "libtmp": 150, "some_fil": 150, "acc": [150, 189], "current_acceler": [150, 152], "get_default_backend_for_devic": 150, "toymodel": [150, 204, 205, 207], "net1": [150, 204, 205, 206, 207], "net2": [150, 204, 205, 206, 207], "demo_bas": 150, "ddp_model": [150, 257], "loss_fn": [150, 172, 178, 204, 205, 257], "run_demo": 150, "demo_fn": 150, "caution": 150, "straggler": [150, 186], "inevit": 150, "spike": [150, 175], "AND": 150, "recoveri": 150, "torchelast": 150, "demo_checkpoint": 150, "checkpoint_path": 150, "gettempdir": 150, "toympmodel": 150, "dev0": 150, "dev1": 150, "output_devic": 150, "demo_model_parallel": 150, "mp_model": 150, "ddp_mp_model": 150, "n_gpu": 150, "elastic_ddp": 150, "set_device_index": 150, "rdzv_id": [150, 207], "rdzv_backend": 150, "rdzv_endpoint": [150, 207], "29400": [150, 207], "scontrol": 150, "hostnam": 150, "slurm_nodelist": 150, "srun": 150, "torchrun_script": 150, "s\u00e9b": 152, "arnold": 152, "sysadmin": 152, "coordin": [152, 184, 196, 256, 264, 274], "pdsh": 152, "clustershel": 152, "init_process": 152, "127": 152, "set_start_method": 152, "ip": 152, "recv": [152, 172, 180], "irecv": 152, "dst": 152, "req": 152, "sent": [152, 170, 178, 193], "behaviour": 152, "fanci": 152, "baidu": 152, "deepspeech": 152, "facebook": 152, "communc": 152, "new_group": [152, 172, 207], "commut": 152, "band": 152, "bor": 152, "bxor": 152, "premul_sum": 152, "scatter_list": 152, "gather_list": 152, "all_to_al": 152, "output_tensor_list": 152, "input_tensor_list": 152, "random_split": 152, "data_idx": 152, "datapartition": 152, "1234": 152, "data_len": 152, "part_len": 152, "partition_dataset": 152, "get_world_s": 152, "bsz": 152, "partition_s": 152, "train_set": [152, 186], "60000": 152, "30000": 152, "num_batch": 152, "ceil": 152, "epoch_loss": 152, "average_gradi": 152, "voil\u00e0": 152, "send_buff": 152, "recv_buff": 152, "accum": [152, 275], "send_req": 152, "bandwidth": [152, 186, 194, 211, 284], "subsect": 152, "mpi": 152, "eleg": 152, "device_typ": [152, 246, 260], "smi": [152, 222], "mvapich2": 152, "ipc": [152, 186], "recompil": [152, 191, 203, 243, 247, 248], "requisit": 152, "forg": [152, 256], "openmpi": 152, "mpirun": 152, "myscript": 152, "handshak": 152, "superflu": 152, "xccl": 152, "everybodi": 152, "readili": 152, "race": 152, "fcntl": 152, "nf": [152, 262], "sharedfil": 152, "everyon": 152, "unclear": [152, 193], "natalia": 152, "gimelshein": 152, "actor": 153, "carrier": [153, 176], "step_mdp": 153, "brought": [153, 170, 176, 193], "84x84": 153, "accessori": [153, 175], "inittrack": 153, "stamp": 153, "is_init": 153, "tensordictprim": 153, "primer": [153, 274], "disappear": 153, "lstmmodul": 153, "backbon": [153, 189], "flank": 153, "assist": [153, 207], "tensordictmodulebas": 153, "batch_first": 153, "make_tensordict_prim": 153, "qvaluemodul": 153, "action_valu": 153, "qvalueactor": 153, "set_recurrent_mod": 153, "uniniti": 153, "dqnloss": 153, "delay_valu": 153, "lazymemmapstorag": 153, "dqn_with_rnn_tutori": [153, 183, 259], "tradition": 154, "simplemlp": 154, "pretend": [154, 169], "num_model": 154, "6400": 154, "predictions_diff_minibatch_loop": 154, "predictions2": 154, "stack_module_st": 154, "functional_cal": [154, 164, 169], "base_model": 154, "fmodel": 154, "predictions1_vmap": 154, "atol": [154, 260, 280], "rtol": 154, "in_dim": [154, 169, 283], "predictions2_vmap": 154, "without_vmap": 154, "stmt": [154, 202, 210, 223, 280], "with_vmap": 154, "timeit": [154, 237], "0x7f7a9c15e2f0": 154, "0x7f7a9c1d82e0": 154, "483": 154, "weren": [154, 169], "140": [154, 180, 183, 259], "forced_alignment_tutori": 155, "incomplet": [156, 170], "eagerli": [156, 167, 193, 251], "alongsid": [156, 187, 189, 194, 222, 242], "primal": 156, "dual": 156, "dual_level": 156, "fresh": [156, 222], "check_forward_ad": 156, "check_backward_ad": 156, "check_undefined_grad": 156, "check_batched_grad": 156, "functorch": 156, "reformul": [156, 164], "ft": 156, "make_functional_with_buff": 156, "analog": [156, 193, 194, 273, 274], "consolid": [156, 178, 194], "dual_numb": 156, "forward_ad_usag": [156, 183, 259], "jame": 157, "reed": 157, "longest": 157, "nicer": 157, "tabul": [157, 191, 250, 262], "ca": 157, "graphmodul": 157, "symbolic_trac": 157, "profilinginterpret": 157, "clock": [157, 223], "51393": 157, "happi": 157, "hear": 157, "fx_profiling_tutori": [157, 183, 259], "xuan": 158, "liao": 158, "haozh": 158, "jiong": [158, 265, 275], "gong": [158, 265, 275], "weihan": 158, "intricaci": 158, "troubleshoot": 158, "pinpoint": [158, 193, 206], "narrow": [158, 193, 262, 276], "torch_compile_debug": 158, "xx": [158, 212], "ir": [158, 248], "_inductor": [158, 193, 210, 213, 252, 265, 275], "model___20": 158, "tmp": [158, 189, 210, 247, 248, 262, 265], "torchinductor_root": 158, "rx": 158, "crxfi2ybd7yp5sbj2pnhw33wfhtdw7wumvrobyp5sjvdui5ktjc2": 158, "fx_graph_runn": 158, "fx_graph_transform": 158, "ir_pre_fus": 158, "ir_post_fus": 158, "output_cod": [158, 210, 254, 275], "gv": 158, "cgv6n5aotqjo5w4vknjibhengeycuattfto532hkxpozszcgxr3x": 158, "tmp2": [158, 210, 275], "tmp1": [158, 210, 275], "exc": [158, 253], "backendcompilerfail": 158, "cppcompileerror": 158, "xg": 158, "cxga5tk3b4lkwoxyigrtocjp5s7vc5cg2ikuscf6bk6pjqip2bhx": 158, "unsign": [158, 223], "char": [158, 212], "max_propagate_nan": 158, "tmp3": [158, 210, 275], "tmp0": [158, 210, 275], "candid": 158, "scalar_t": 158, "deduct": 158, "substitut": [158, 159, 167], "deduc": 158, "in_ptr0": [158, 210], "in_ptr1": [158, 210], "out_ptr0": 158, "pragma": [158, 275], "gcc": [158, 275], "ivdep": [158, 275], "i0": 158, "0l": [158, 210, 275], "8390l": 158, "1l": [158, 265, 275], "i1": 158, "8l": 158, "buf0": [158, 265], "schedulernod": 158, "computedbuff": 158, "memorydep": 158, "c0": 158, "67120": 158, "unmet_depend": 158, "met_depend": 158, "arg0_1": [158, 210, 265], "8390": 158, "arg1_1": [158, 210], "nodeus": 158, "can_inplac": 158, "buf0_loop_bodi": 158, "var_rang": 158, "z0": 158, "index0": 158, "index1": 158, "get_index": 158, "get_index_1": 158, "load_1": 158, "get_index_2": 158, "minifi": 158, "dead": 158, "minif": 158, "tol": 158, "test_script": 158, "expected_result": 158, "actual_result": 158, "torchdynamo_repro_aft": 158, "torchdynamo_repro_level": 158, "mobilebertforquestionansw": 158, "xeon": [158, 161, 200, 212, 258], "platinum": 158, "8358": 158, "60ghz": 158, "kmp_blocktim": [158, 238, 256], "kmp_set": 158, "kmp_affin": [158, 238, 256], "compact": [158, 238, 256], "ld_preload": [158, 238, 256], "conda_prefix": [158, 223], "libiomp5": [158, 238, 256], "libjemalloc": [158, 256], "malloc_conf": [158, 256], "oversize_threshold": [158, 256], "background_thread": [158, 256], "metadata_thp": [158, 256], "dirty_decay_m": 158, "muzzy_decay_m": 158, "numactl": [158, 238, 256], "bench": 158, "eager_t": 158, "num_it": 158, "inductor_t": 158, "802": 158, "1023553796113": 158, "339": 158, "95180135127157": 158, "359459053287382": 158, "355x": 158, "enable_kernel_profil": 158, "73": [158, 180, 210, 223, 280], "370": 158, "814m": 158, "362": 158, "89": [158, 180, 228], "161": 158, "276m": 158, "363": 158, "121": [158, 228], "416m": 158, "488": [158, 223], "194": 158, "clamp_min": [158, 211], "444m": 158, "96": [158, 180, 211], "bmm": [158, 200, 223, 276], "258m": [158, 211], "810": 158, "920m": 158, "447m": 158, "_softmax": 158, "087m": 158, "376": 158, "888m": 158, "430m": 158, "502m": 158, "161m": 158, "850": 158, "377m": 158, "386": [158, 180, 228], "index_select": 158, "952": 158, "000u": [158, 228], "986": 158, "458": 158, "420m": 158, "703": 158, "963": 158, "864m": 158, "mkl": [158, 228, 256, 275], "_mkl_linear": [158, 275], "231": [158, 223, 228], "573m": [158, 228], "992m": 158, "336": [158, 228], "642m": 158, "graph_0_cpp_fused_constant_pad_nd_embedding_0": 158, "915": 158, "911": 158, "graph_0_cpp_fused__mkl_linear_add_mul_relu_151": 158, "901": [158, 210, 245, 259], "graph_0_cpp_fused__mkl_linear_add_mul_relu_226": 158, "899": 158, "graph_0_cpp_fused__mkl_linear_add_mul_relu_361": 158, "898": 158, "graph_0_cpp_fused__mkl_linear_add_mul_relu_121": 158, "895": 158, "graph_0_cpp_fused__mkl_linear_add_mul_relu_31": 158, "893": 158, "graph_0_cpp_fused__mkl_linear_add_mul_relu_76": 158, "892": [158, 175, 223], "graph_0_cpp_fused__mkl_linear_add_mul_relu_256": 158, "graph_0_cpp_fused__mkl_linear_add_mul_relu_346": 158, "graph_0_cpp_fused__mkl_linear_add_mul_relu_241": 158, "891": 158, "graph_0_cpp_fused__mkl_linear_add_mul_relu_316": 158, "graph_0_cpp_fused__mkl_linear_add_mul_relu_91": 158, "890": 158, "graph_0_cpp_fused__mkl_linear_add_mul_relu_106": 158, "graph_0_cpp_fused__mkl_linear_add_mul_relu_211": 158, "graph_0_cpp_fused__mkl_linear_add_mul_relu_61": 158, "889": 158, "graph_0_cpp_fused__mkl_linear_add_mul_relu_286": 158, "graph_0_cpp_fused_": 158, "63x": 158, "cblas_sgemm_comput": 158, "339m": 158, "94x": 158, "impress": [158, 193], "cpp_fused__mkl_linear_add_mul_relu_151": 158, "clrlgu27q4ggd472umdzwsu6qcpqxcuusjxqvx2hwitjbujiiz7z": 158, "bottl": [158, 204], "neck": [158, 204], "780875144992024": 158, "9588955780491233": 158, "0286805751604735": 158, "smallest": [158, 174], "solid": [158, 199], "analyt": 158, "hotspot": [158, 219], "phenomenon": 158, "inductor_debug_cpu": [158, 183, 259], "annoi": 159, "jax": [159, 164, 283], "argnum": 159, "millisecond": [159, 173, 238], "get_perf": 159, "rigor": 159, "taller": 159, "hessiani": 159, "overwhelm": 159, "jacobians_hessian": [159, 183, 259], "yuansong": 160, "steven": 160, "guo": 160, "cheatsheet": 160, "companion": 160, "bro": 160, "ne": [160, 182, 228], "emul": [160, 213], "tube": 160, "mushroom": 160, "screen": [160, 177, 219], "next_stat": [160, 177], "240": [160, 180, 228], "pipe": 160, "sky": 160, "grayscaleobserv": 160, "resizeobserv": 160, "skipfram": 160, "framestack": 160, "hi": [160, 276], "movement": 160, "exploration_r": 160, "he": [160, 182, 190], "marionet": 160, "ddqn": 160, "_e": 160, "argmax_": 160, "td_target": 160, "td_t": 160, "td_e": 160, "leftarrow": 160, "nabla": 160, "episod": [160, 177, 178, 180], "mario_rl_tutori": [160, 183, 259], "vitali": 161, "fedyunin": 161, "densest": 161, "4x4": 161, "10x3x16x16": 161, "768": [161, 280], "minor": [161, 180, 187, 212], "ambigu": [161, 272, 273], "n1hw": 161, "contrari": [161, 170, 174], "restrid": 161, "unintend": 161, "nevertheless": [161, 176], "apex": 161, "main_amp": 161, "resnet50": [161, 175, 178, 212, 246], "o2": 161, "opt_level": 161, "keep_batchnorm_fp32": 161, "nonetyp": 161, "loss_scal": 161, "7603": 161, "cast_model_typ": 161, "patch_torch_funct": 161, "master_weight": 161, "125": [161, 228], "866": 161, "230": [161, 180, 189], "949": 161, "6735125184": 161, "6735": 161, "prec": 161, "259": [161, 183], "562": 161, "773": [161, 210], "481": 161, "355": 161, "693": 161, "6968704462": 161, "6852": 161, "258": 161, "775": 161, "089": 161, "433": 161, "965": 161, "7877287269": 161, "7194": 161, "833": 161, "410": 161, "771": 161, "710": 161, "487": 161, "8285319805": 161, "7467": 161, "260": [161, 180], "380": 161, "770": 161, "090": 161, "525": 161, "908": 161, "7370464802": 161, "7447": 161, "360": 161, "623": 161, "555": 161, "728": 161, "7592862844": 161, "7472": 161, "917": 161, "345": [161, 196], "774": 161, "746": [161, 223], "115": [161, 211], "9698858261": 161, "9218": 161, "335": [161, 180, 257], "324": 161, "597": 161, "659": 161, "2505953312": 161, "0879": 161, "52": [161, 210, 211], "767": 161, "785": 161, "7579724789": 161, "7580": 161, "198": 161, "482": 161, "1012": 161, "135": [161, 175, 223], "414": 161, "716": [161, 211, 223], "7007197738": 161, "7293": 161, "250": [161, 180, 228], "387": 161, "1010": 161, "977": [161, 211], "516": 161, "7113101482": 161, "7233": 161, "667": 161, "197": 161, "340": 161, "1013": 161, "023": 161, "333": 161, "8943189979": 161, "7661": 161, "541": 161, "641": 161, "7113249302": 161, "9551": 161, "1011": 161, "163": 161, "683": 161, "574": 161, "8537774086": 161, "7716": 161, "279": 161, "453": 161, "7595844269": 161, "3413": 161, "429": 161, "269": 161, "827": 161, "743": 161, "883": 161, "8196096420": 161, "4011": 161, "volta": [161, 222, 238], "alexnet": 161, "mnasnet0_5": 161, "mnasnet0_75": 161, "mnasnet1_0": 161, "mnasnet1_3": 161, "mobilenet_v2": [161, 175, 196], "resnet101": 161, "resnet152": 161, "resnet34": 161, "resnext50_32x4d": 161, "shufflenet_v2_x0_5": [161, 175], "shufflenet_v2_x1_0": [161, 175], "shufflenet_v2_x1_5": [161, 175], "shufflenet_v2_x2_0": [161, 175], "squeezenet1_0": 161, "squeezenet1_1": 161, "vgg11": 161, "vgg11_bn": 161, "vgg13": 161, "vgg13_bn": 161, "vgg16": 161, "vgg16_bn": 161, "vgg19_bn": 161, "wide_resnet101_2": 161, "wide_resnet50_2": 161, "ic": 161, "lake": [161, 212], "densenet121": 161, "densenet161": 161, "densenet169": 161, "googlenet": [161, 175], "inception_v3": [161, 175], "resnext101_32x8d": [161, 175], "spite": 161, "nc11": 161, "memory_format_tutori": [161, 183, 259], "year": [164, 168, 197], "j_": 164, "diagon": 164, "beforehand": 164, "asymptot": 164, "i_o": 164, "i_": 164, "e_o": 164, "textrm": 164, "_o": 164, "tensorfloat": 164, "sacrific": 164, "empirical_ntk_ntk_vp": 164, "luck": [164, 167, 194], "altogeth": [164, 273], "neural_tangent_kernel": [164, 183, 259], "french": [165, 182], "seq2seq_translation_tutori": [165, 182, 183, 259], "homepag": [166, 261], "ooz": 167, "_might_": 167, "2p": 167, "ephemer": 167, "timelin": [167, 186, 219], "memory_viz": 167, "devot": 167, "bat": [167, 266], "2gb": [167, 175], "6gb": 167, "foreach": [167, 210], "reveal": [167, 181, 191, 221, 223], "bullet": 167, "sizabl": [167, 170], "tantamount": 167, "eat": 167, "lora": 167, "win": 167, "unlock": [167, 278], "vit_l_16": 167, "neat": 167, "slate": 167, "woohoo": 167, "apart": 167, "shrunk": 167, "0gb": 167, "optimizer_step_in_backward_tutori": [167, 183, 259], "lezcano": 168, "surprisingli": 168, "ill": 168, "frobeniu": 168, "spectral": 168, "lipschitz": 168, "x\u1d40": 168, "upper": [168, 181, 193, 228], "triangular": 168, "triu": 168, "4792": 168, "7364": 168, "3970": 168, "3271": 168, "7399": 168, "8186": 168, "linearsymmetr": 168, "n_featur": 168, "reimplement": [168, 174, 193], "register_parametr": 168, "parametrizedlinear": [168, 280], "moduledict": [168, 172, 280], "parametrizationlist": [168, 280], "1968": 168, "5024": 168, "4565": 168, "0444": 168, "0022": 168, "4862": 168, "skew": [168, 186, 228], "in_channel": [168, 190], "out_channel": [168, 190], "1436": 168, "0396": 168, "1431": 168, "selectbackward0": 168, "1402": 168, "1083": 168, "1270": 168, "unparametr": 168, "nparametr": 168, "3241": 168, "4338": 168, "4594": 168, "4082": 168, "5547": 168, "3152": 168, "4975": 168, "0479": 168, "1567": 168, "0973": 168, "1921": 168, "weight_orig": [168, 174], "distbackward0": 168, "modulelist": 168, "inbuilt": 168, "noisyparametr": 168, "caylei": 168, "cayleymap": 168, "register_buff": 168, "linalg": 168, "3702e": 168, "spd": 168, "matrixexponenti": 168, "matrix_exp": 168, "layer_orthogon": 168, "layer_spd": 168, "eigvalsh": 168, "9797e": 168, "right_invers": 168, "cayley_transform": 168, "matrix_map": 168, "orthogonal_": 168, "neg_": 168, "8130": 168, "succinctli": 168, "pruningparametr": 168, "p_drop": 168, "full_lik": 168, "bernoulli": 168, "niniti": 168, "5494": 168, "4476": 168, "1438": 168, "1335": 168, "7073": 168, "9482": 168, "4403": 168, "5106": 168, "1643": 168, "2804": [168, 223], "1334": 168, "7682": 168, "mulbackward0": 168, "remove_parametr": 168, "nafter": 168, "unconstrain": 168, "5126": 168, "4924": 168, "2536": 168, "4092": 168, "2400": [168, 237], "2060": 168, "0809": 168, "1817": 168, "5019": 168, "subbackward0": 168, "parametri": 168, "leave_parametr": 168, "0821": 168, "1945": 168, "0384": 168, "1641": 168, "1151": 168, "4927": 168, "2585": 168, "3993": 168, "3876": 168, "052": [168, 183, 211, 259], "privaci": [169, 174], "sample_grad": 169, "compute_loss": 169, "ft_compute_grad": 169, "0th": [169, 174, 181, 276], "25x": [169, 189, 280], "opacu": 169, "per_sample_grad": [169, 183, 259], "cpu_tensor": 170, "cuda_tensor": [170, 238], "erron": 170, "carefulli": [170, 238], "distinguish": [170, 180, 187], "isol": [170, 191], "illus": 170, "circumst": [170, 222], "anywher": 170, "cudastreamsynchron": 170, "dma": 170, "volterra": 170, "tesla": 170, "h100": [170, 191], "t3_cuda": 170, "belief": [170, 193], "brand": 170, "cudahostalloc": 170, "cudamemcpi": 170, "doubt": 170, "interestingli": 170, "pronounc": 170, "tick": 170, "__whenev": 170, "memory__": 170, "corrupt": 170, "garbag": 170, "reliabl": [170, 223], "annihil": 170, "legitim": 170, "notori": 170, "inher": [170, 193, 194, 205], "blockag": 170, "non_blocking_pin": 170, "ration": 170, "outweigh": [170, 211], "perman": [170, 174], "shuttl": 170, "expedit": 170, "advers": 170, "bu": 170, "monopol": 170, "calibr": [170, 213, 278], "pinmem_nonblock": [170, 183, 259], "huang": [172, 173, 204, 205, 260], "microbatch": 172, "micro": 172, "educ": [172, 197], "dataclass": 172, "modelarg": 172, "n_head": 172, "witout": 172, "layernorm": [172, 197, 280], "splitpoint": 172, "pipelinestag": 172, "schedulegpip": 172, "pp_group": 172, "stage_index": 172, "num_stag": 172, "init_distribut": 172, "peer": [172, 257], "manual_model_split": 172, "elif": [172, 210], "tracer": 172, "split_spec": 172, "4th": [172, 200], "mirror": 172, "build_stag": 172, "gpipe": 172, "1f1b": 172, "interleaved1f1b": 172, "loopedbf": 172, "num_microbatch": 172, "example_input_microbatch": 172, "tracer_model_split": 172, "tokenwise_loss_fn": 172, "n_microbatch": 172, "pipelining_tutori": 172, "tian": 173, "si": 173, "zeroredundancyoptim": [173, 258], "processgroupnccl": 173, "processgroupgloo": 173, "processgroupmpi": 173, "ucc": 173, "oneccl": [173, 238], "trainum": 173, "emerg": 173, "backenddummi": 173, "chrono": 173, "outputtensor": 173, "inputtensor": 173, "allgatheropt": 173, "allreduceopt": 173, "workdummi": 173, "optyp": 173, "ivalu": [173, 212], "recvanysourc": 173, "future_": 173, "iscomplet": 173, "issuccess": 173, "kunsettimeout": 173, "getfutur": 173, "outputtensorvec": 173, "listtyp": 173, "tensortyp": 173, "markcomplet": 173, "createbackenddummi": 173, "backenddummyconstructor": 173, "__attribute__": 173, "register_backend": 173, "cpp_function": [173, 223], "torch_extension_nam": 173, "libraries_dir": 173, "abspath": 173, "dummy_collect": 173, "builtin": [173, 223, 237], "michela": 174, "paganini": 174, "biolog": 174, "batteri": 174, "subnetwork": 174, "lotteri": 174, "ticket": 174, "destruct": [174, 256], "0a0": 174, "8e8a5e0": 174, "lecun": 174, "1998": 174, "unprun": 174, "basepruningmethod": 174, "adequ": [174, 176], "_orig": 174, "intact": [174, 178, 235], "weight_mask": 174, "_mask": 174, "forward_pre_hook": 174, "l1_unstructur": 174, "bias_orig": 174, "bias_mask": 174, "pruningcontain": 174, "compute_mask": 174, "ln_structur": 174, "undo": 174, "reassign": 174, "global_unstructur": 174, "apply_mask": 174, "unstructur": 174, "preprun": 174, "pruning_typ": 174, "pruning_tutori": [174, 183, 259], "sink": 175, "5v": 175, "sd": [175, 263], "card": [175, 181], "8gb": 175, "arm": [175, 211], "64bit": 175, "aarch64": 175, "arm64": 175, "raspberrypi": 175, "raspios_arm64": 175, "rpi": 175, "sdcard": 175, "start_x": 175, "128m": 175, "gpu_mem": 175, "commment": 175, "camera_auto_detect": 175, "v4l2": 175, "reboot": 175, "video4linux2": 175, "video0": 175, "picamera": 175, "36fp": 175, "30fp": 175, "framer": 175, "cv2": 175, "cap": [175, 176, 186], "videocaptur": 175, "cap_prop_frame_width": 175, "cap_prop_frame_height": 175, "cap_prop_fp": 175, "bgr": 175, "ret": [175, 178], "input_tensor": 175, "input_batch": 175, "qnnpack": 175, "mobilenet_v3_larg": 175, "109": 175, "233": [175, 180], "885": [175, 211], "204": [175, 211, 223], "132": 175, "82": [175, 211, 228], "int8": [175, 200, 213, 264, 275], "prequant": 175, "20fp": 175, "cap_v4l2": 175, "last_log": 175, "frame_count": 175, "ui": [175, 186, 219, 236, 258], "htop": 175, "mug": 175, "allevi": [175, 198], "set_num_thread": 175, "repetit": [176, 223], "six": 176, "maximis": 176, "clipppoloss": 176, "theta_k": 176, "pi_": 176, "lingua": 176, "franca": 176, "sub_batch_s": 176, "deepmind": [176, 184], "interchang": 176, "panel": [176, 186], "transmit": 176, "gymwrapp": 176, "loos": 176, "supplementari": 176, "stringent": 176, "n_step": [176, 178, 180], "mu_": 176, "d_ob": 176, "d_action": 176, "mu": [176, 189], "normalparamextractor": 176, "probabilisticactor": 176, "tanhnorm": 176, "discount": [176, 177, 178], "amort": [176, 178], "datacollector": 176, "multisyncdatacollector": 176, "refil": 176, "replaybuff": 176, "gae": 176, "value_target": 176, "videorecord": 176, "reinforcement_ppo": [176, 183, 259], "tower": 177, "cart": 177, "pole": 177, "upright": 177, "fork": [177, 256], "classic_control": 177, "action_spac": 177, "observation_spac": 177, "decorrel": 177, "replaymemori": 177, "cyclic": 177, "formul": 177, "r_": 177, "t_0": 177, "r_t": 177, "uncertain": 177, "tempor": 177, "max_a": 177, "univers": [177, 189], "obei": 177, "bellman": 177, "huber": 177, "noisi": [177, 223, 237], "mathcal": 177, "le": [177, 182], "mathrm": 177, "select_act": [177, 178, 180], "eps_start": 177, "eps_end": 177, "eps_decai": 177, "plot_dur": 177, "underneath": [177, 193], "tau": 177, "optimize_model": 177, "s_t": 177, "a_t": 177, "num_episod": [177, 178], "target_net": 177, "reinforcement_q_learn": [177, 183, 259], "calle": [178, 179], "unblock": 178, "idl": [178, 186, 228], "callback": 178, "paus": 178, "update_and_fetch_model": 178, "future_model": 178, "batch_update_s": 178, "batchupdateparameterserv": 178, "curr_update_s": 178, "get_model": 178, "ps_rref": 178, "local_valu": [178, 179], "fut": [178, 180], "setti": 178, "set_result": 178, "rpc_sync": [178, 179, 180], "image_w": 178, "image_h": 178, "one_hot_indic": 178, "random_": 178, "get_worker_info": [178, 180], "543": 178, "num": 178, "affine1": [178, 180], "affine2": [178, 180], "action_scor": [178, 180], "govern": 178, "select_action_batch": 178, "shortli": 178, "run_episod": [178, 180], "agent_rref": [178, 180], "ep_reward": [178, 180], "num_step": 178, "start_step": 178, "from_numpi": [178, 180], "curr_reward": 178, "prob": [178, 180, 187], "saved_log_prob": [178, 180], "rob": 178, "ob_rref": [178, 180], "running_reward": [178, 180], "ob_rank": [178, 180], "ob_info": [178, 180], "observer_nam": [178, 180], "future_act": 178, "pending_st": 178, "select_acion": 178, "ob_id": [178, 180], "log_prob": [178, 180], "stitch": [178, 179], "async": [178, 180, 194, 204, 238], "oberv": [178, 180], "wait_al": 178, "policy_loss": [178, 180], "passiv": [178, 180], "run_work": [178, 179, 180], "n_episod": 178, "print_log": 178, "init_rpc": [178, 179, 180], "agent_nam": [178, 180], "i_episod": [178, 180], "last_reward": [178, 180], "tlast": [178, 180], "taverag": [178, 180], "shutdown": [178, 179, 180], "tik": 178, "tok": 178, "dist_autograd": [179, 180], "num_gpu": 179, "dropout2d": 179, "next_devic": 179, "caller": 179, "call_method": 179, "remote_method": 179, "arg1": 179, "arg2": 179, "foo_inst": 179, "parameterserv": 179, "input_devic": 179, "intention": [179, 180], "inp": [179, 193, 206, 275], "miscellan": 179, "get_dist_gradi": 179, "get_gradi": 179, "get_param_rref": 179, "cid": 179, "cpu_grad": 179, "k_cpu": 179, "v_cpu": 179, "paramt": 179, "param_rref": [179, 180], "run_parameter_serv": 179, "param_serv": 179, "global_lock": 179, "get_parameter_serv": 179, "parameter_serv": 179, "shut": 179, "offlin": 179, "trainernet": 179, "param_server_rref": 179, "get_global_param_rref": 179, "paramat": 179, "remote_param": [179, 180], "model_output": 179, "run_training_loop": 179, "nueral": 179, "context_id": [179, 180], "get_accuraci": 179, "correct_sum": 179, "trainer_": 179, "traffic": 179, "listen": 179, "subprocess": [179, 223, 238], "rpc_parameter_serv": 179, "solver": 180, "formatter_class": 180, "argumentdefaultshelpformatt": 180, "log_interv": 180, "report_reward": 180, "_max_episode_step": 180, "lifetim": 180, "finfo": 180, "reward_threshold": 180, "finish_episod": 180, "min_reward": 180, "surpass": 180, "ob": 180, "ctrl": 180, "475": 180, "111": [180, 223, 256], "131": 180, "130": [180, 211], "137": 180, "104": 180, "160": [180, 189, 223, 228], "170": [180, 196], "126": 180, "180": [180, 193, 211, 223], "213": 180, "322": [180, 211], "165": 180, "272": [180, 211], "210": 180, "168": [180, 256], "184": 180, "208": [180, 189, 221], "270": [180, 189], "405": 180, "280": 180, "443": [180, 228], "290": 180, "464": 180, "3163778435275": 180, "embeddingt": 180, "destin": 180, "rnnmodel": 180, "ntoken": 180, "ninp": 180, "nhid": 180, "nlayer": 180, "emb_table_rref": 180, "decoder_rref": 180, "_remote_method": 180, "rremot": 180, "_parameter_rref": 180, "parameter_rref": 180, "run_train": 180, "nindic": 180, "driss": 181, "guessou": 181, "multiheadattent": 181, "flashattent": 181, "fastest": [181, 248], "flash": [181, 264], "andrej": 181, "karpathi": 181, "nanogpt": 181, "causalselfattent": 181, "mine": 181, "166": 181, "616": 181, "726": 181, "amaz": 181, "prof": [181, 211, 228], "export_chrome_trac": 181, "compiled_causal_attention_trac": 181, "concentr": 181, "6090": 181, "49m": 181, "3273": 181, "17m": 181, "commit": [181, 200, 284], "ae3a8d5": 181, "causal_upper_left": 181, "causal_lower_right": 181, "is_caus": [181, 197, 260], "causalbia": 181, "corner": 181, "attn_scor": 181, "sdpa_kernel": [181, 260], "scaled_dot_product_attention_tutori": [181, 183, 259], "il": 182, "est": [182, 186], "peindr": 182, "tableau": 182, "paint": 182, "pourquoi": 182, "pa": 182, "essay": 182, "vin": 182, "delicieux": 182, "delici": 182, "wine": 182, "poet": 182, "romancier": 182, "she": 182, "novelist": 182, "vou": 182, "trop": 182, "maigr": 182, "skinni": 182, "condens": [182, 237], "unfold": 182, "tatoeba": 182, "eng": 182, "someon": 182, "manyth": 182, "anki": 182, "fra": 182, "froid": 182, "giant": 182, "dozen": 182, "trim": [182, 237], "lang": 182, "word2index": 182, "index2word": 182, "word2count": 182, "apostroph": 182, "je": 182, "sui": 182, "noir": 182, "attn_appli": 182, "exhibit": 182, "coher": 182, "grammar": 182, "wander": 182, "freedom": 182, "plot_loss": 182, "judgement": 182, "macbook": 182, "matshow": 182, "iot": 182, "word2vec": 182, "glove": 182, "autoencod": 182, "sdpa": [183, 197, 259, 260], "torch_compile_tutori": [183, 191, 259], "torch_export_tutori": [183, 192, 193, 259], "transformer_building_block": [183, 197, 259], "spatial_transformer_tutori": [183, 184, 259], "visualizing_gradients_tutori": [183, 198, 259], "sphx_glr_intermediate_mnist_train_na": [183, 259], "tensorboard_profiler_tutori": [183, 186, 259], "torch_compile_conv_bn_fus": [183, 190, 259], "torchrec_intro_tutori": [183, 194, 259], "ghassen": 184, "hamrouni": 184, "geometr": 184, "invari": [184, 272], "boil": 184, "affine_grid": 184, "grid_sampl": 184, "speech_recognition_pipeline_tutori": 185, "perfetto": 186, "warmup": [186, 197, 202, 203, 210, 211, 228, 251, 252], "on_trace_readi": [186, 228], "tensorboard_trace_handl": 186, "record_shap": [186, 228], "profile_memori": [186, 228], "dealloc": [186, 238], "torch_tb_profil": 186, "safari": 186, "pytorch_profil": 186, "dropdown": 186, "callstack": 186, "sm": 186, "multiprocessor": 186, "occup": 186, "tooltip": 186, "toolbar": 186, "keyboard": 186, "mous": 186, "resnet18_4work": 186, "76m": 186, "132m": 186, "azur": 186, "torchtbprofil": 186, "memory_demo_1_10": 186, "gpu0": 186, "children": [186, 228], "distributed_bert": 186, "docker": 186, "profiler_tutori": 186, "test_cifar10": 186, "vi": 186, "hub": [186, 213], "kfd": 186, "sys_ptrac": 186, "seccomp": 186, "unconfin": 186, "shm": 186, "8g": 186, "apt": [186, 189, 256], "libjpeg": 186, "whl": [186, 191, 194, 264], "rocm5": 186, "scp": 186, "plot_classes_pr": 187, "matplotlib_imshow": 187, "one_channel": 187, "grei": 187, "fashion_mnist_experiment_1": 187, "img_grid": 187, "four_fashion_mnist_imag": 187, "pythonwarn": 187, "pkg_resourc": 187, "userwarn": 187, "refresh": [187, 194], "select_n_random": 187, "datapoint": 187, "perm": 187, "randperm": 187, "class_label": [187, 189], "label_img": 187, "thoroughli": 187, "images_to_prob": 187, "preds_tensor": 187, "el": 187, "fig": 187, "figsiz": 187, "arang": [187, 210, 236], "add_subplot": 187, "xtick": 187, "ytick": 187, "set_titl": 187, "1f": 187, "add_scalar": [187, 236], "add_figur": 187, "global_step": [187, 236], "scroll": 187, "test_siz": 187, "class_prob": 187, "class_probs_batch": 187, "test_prob": 187, "test_label": 187, "add_pr_curve_tensorboard": 187, "class_index": 187, "tensorboard_truth": 187, "tensorboard_prob": 187, "add_pr_curv": 187, "poke": 187, "tacotron2_pipeline_tutori": 188, "wsi": 189, "tissu": 189, "surgeri": 189, "biopsi": 189, "scanner": 189, "pathologist": 189, "diseas": 189, "cancer": 189, "microscop": 189, "tumor": 189, "growth": [189, 274], "treatment": [189, 273, 274], "patient": 189, "000x100": 189, "25x0": 189, "micron": 189, "pyramid": 189, "magnif": 189, "sketch": 189, "histoencod": 189, "jopo666": 189, "openjpeg": 189, "openslid": 189, "pixman": 189, "qq": 189, "libopenjp2": 189, "libpixman": 189, "echo": 189, "brew": 189, "__future__": [189, 227, 235], "hashandl": 189, "filterwarn": 189, "nopython": 189, "shutil": 189, "zipfil": 189, "mpl": 189, "pd": 189, "cm": 189, "sklearn": 189, "accuracy_scor": 189, "confusion_matrix": 189, "patch_predictor": 189, "iopatchpredictorconfig": 189, "misc": 189, "download_data": 189, "grab_files_from_dir": 189, "overlay_prediction_mask": 189, "wsicor": 189, "wsiread": 189, "rcparam": 189, "dpi": 189, "facecolor": 189, "on_gpu": 189, "suppress": 189, "overli": 189, "suppress_console_output": 189, "redirect_stderr": 189, "stringio": 189, "abnorm": [189, 219], "global_save_dir": 189, "rmdir": 189, "dir_path": 189, "is_dir": 189, "rmtree": 189, "kather": 189, "100k": 189, "wsi_path": 189, "sample_wsi": 189, "sv": 189, "patches_path": 189, "kather100k": 189, "weights_path": 189, "dc": 189, "warwick": 189, "uk": 189, "tcga": 189, "3l": 189, "aa1b": 189, "01z": 189, "dx1": 189, "8923a151": 189, "a690": 189, "40b7": 189, "9e5a": 189, "fcbedfc2394f": 189, "extractal": 189, "pc": 189, "label_list": 189, "patch_list": 189, "dataset_path": 189, "image_ext": 189, "tif": 189, "label_dict": 189, "glass": 189, "mucosa": 189, "deb": 189, "debri": 189, "tum": 189, "colorect": 189, "adenocarcinoma": 189, "epithelium": 189, "adi": 189, "adipos": 189, "muc": 189, "mucu": 189, "stroma": 189, "lym": 189, "lymphocyt": 189, "dataset_class_path": 189, "patch_list_single_class": 189, "file_typ": 189, "xlabel": 189, "ylabel": 189, "299": 189, "211": [189, 211, 228], "176": 189, "178": 189, "209": 189, "232": [189, 223], "abc": 189, "modelabc": 189, "tia": 189, "toolbox": 189, "readthedoc": 189, "_autosummari": 189, "models_abc": 189, "preproc_func": 189, "predictor": [189, 253], "pretrained_weight": 189, "cnnmodel": 189, "fromarrai": 189, "conf": 189, "df_cm": 189, "215": 189, "993000": 189, "000000": 189, "00000": 189, "988636": 189, "011364": 189, "991304": 189, "008696": 189, "996503": 189, "003497": 189, "004808": 189, "990385": 189, "988764": 189, "011236": 189, "996296": 189, "003704": 189, "004785": 189, "985646": 189, "004310": 189, "99569": 189, "input_resolut": 189, "patch_input_shap": 189, "stride_shap": 189, "wsi_ioconfig": 189, "mpp": 189, "return_prob": 189, "ioconfig": 189, "greatest": [189, 222], "unnecessari": [189, 193, 197, 241, 256], "merge_predict": 189, "wsi_output": 189, "wsi_predict": 189, "overlai": 189, "overlay_patch_predict": 189, "overview_resolut": 189, "overview_unit": 189, "wsi_overview": 189, "slide_thumbnail": 189, "label_color_dict": 189, "get_cmap": 189, "set1": 189, "pred_map": 189, "label_info": 189, "return_ax": 189, "histologi": 189, "pohjonen": 189, "joona": 189, "helsinki": 189, "umap": 189, "semantic_segmentor": 189, "deepfeatureextractor": 189, "iosegmentorconfig": 189, "histoencwrapp": 189, "histoenc": 189, "feat_extract": 189, "extract_featur": 189, "num_block": 189, "avg_pool": 189, "infer_batch": 189, "batch_data": 189, "img_patches_devic": 189, "inference_mod": [189, 280], "create_encod": 189, "prostate_medium": 189, "662": 189, "446": 189, "605": 189, "169": [189, 211], "155": 189, "output_resolut": 189, "patch_output_shap": 189, "auto_generate_mask": 189, "otsu": 189, "num_loader_work": 189, "num_postproc_work": 189, "wsi_featur": 189, "umap_reduc": 189, "n_neighbor": 189, "n_compon": 189, "manhattan": 189, "random_st": 189, "fit_transform": 189, "npy": 189, "feat": 189, "5mpp": 189, "4mpp": 189, "histolog": 189, "horac": 190, "clariti": 190, "batch_norm": [190, 228], "conv_bn_pattern": 190, "conv_bn_replac": 190, "conv_weight": 190, "kernel_h": 190, "kernel_w": 190, "conv_bia": 190, "bn_mean": 190, "bn_var": 190, "bn_weight": 190, "bn_bia": 190, "simplif": 190, "example_input": [190, 213, 278], "conclus": 190, "william": [191, 193, 251], "devel": 191, "elsewher": 191, "torchinductor": [191, 238, 247, 265, 266, 275], "torchtriton": 191, "cu117": 191, "opt_mod": 191, "complex_funct": 191, "complex_conjug": 191, "outer_funct": 191, "_orig_": 191, "wrote": [191, 196], "dashboard": [191, 236], "struggl": 191, "fn1": 191, "fn2": 191, "f2": 191, "disallow": 191, "zhengxu": 193, "angela": [193, 242, 252], "pian": 193, "pawakapan": 193, "synonym": 193, "dynamic_shap": [193, 253], "graph_signatur": 193, "range_constraint": 193, "byte": [193, 253, 263], "stronger": [193, 253], "safeti": [193, 253], "cond": 193, "predic": 193, "true_fn": 193, "false_fn": 193, "while_loop": 193, "associative_scan": 193, "entail": 193, "adher": 193, "x0": [193, 196, 210, 275], "x1": [193, 196, 210, 275], "s0": 193, "s1": 193, "x2": [193, 210], "x3": [193, 210], "s3": 193, "s5": 193, "proof": 193, "obviou": [193, 223], "_log": [193, 210, 254], "set_log": [193, 210], "spit": 193, "create_symbol": 193, "int_oo": 193, "2841": 193, "runtime_assert": 193, "ncreate_symbol": 193, "nruntime_assert": 193, "dynamic_shapes_tutori": 193, "_subclass": [193, 253, 263], "fake_impl": 193, "845": 193, "infer_s": [193, 237], "torchdynamo_extended_debug_guard_ad": 193, "_meta_registr": 193, "meta_mm": 193, "marker": 193, "aliv": 193, "attract": 193, "friction": 193, "believ": [193, 272], "stanc": [193, 251], "constraintviol": 193, "unrel": [193, 251], "univari": 193, "diverg": [193, 223, 271, 273], "tolist": [193, 280], "unbind": 193, "unback": 193, "nomenclatur": 193, "absenc": [193, 206, 221], "u0": 193, "unhint": 193, "is_compil": 193, "invas": 193, "bypass": [193, 275], "offend": 193, "smarter": 193, "prevail": 193, "prohibit": 193, "_check_is_s": 193, "guard_size_oblivi": 193, "starter": 193, "guardondatadependentsymnod": 193, "_schema": 193, "is_mut": 193, "export_for_train": 193, "run_decomposit": 193, "mutabl": 193, "conv1d": [193, 200, 238], "cond_pred": 193, "tensorrt": 193, "pt2_path": 193, "aoti_compile_and_packag": [193, 252], "compiler_aot_inductor": 193, "aoti_compil": 193, "aoti_load_packag": [193, 252], "cu121": [194, 264], "fbgemm_gpu": 194, "torchmetr": 194, "cardin": 194, "relationship": 194, "hash": 194, "conjunct": [194, 238, 262, 263], "ctr": 194, "dlrm": [194, 238], "embedding_collect": 194, "embedding_bag_collect": 194, "vast": [194, 274], "collis": [194, 237], "80g": 194, "embeddingcollect": 194, "jaggedtensor": 194, "keyedjaggedtensor": 194, "keyedtensor": 194, "product_t": 194, "user_t": 194, "id_list_featur": 194, "id_score_list_featur": 194, "__str__": 194, "id_list_feature_offset": 194, "q1": 194, "product_jt": 194, "user_jt": 194, "q2": 194, "reread": 194, "to_dict": 194, "congrat": 194, "pat": 194, "grasp": [194, 199], "scarc": [194, 204], "hbm": 194, "gb": [194, 197], "shardedembeddingbagcollect": 194, "incredibli": 194, "ton": 194, "everytim": 194, "await": 194, "input_dist": 194, "tbe": 194, "output_dist": 194, "twpooledembeddingshard": 194, "kjt": 194, "canon": 194, "dmp": 194, "hyperoptim": 194, "combinedoptim": 194, "keyedoptim": 194, "in_backward_optimizer_filt": 194, "fused_optim": 194, "fused_param": 194, "apply_optimizer_in_backward": 194, "criteo": 194, "1tb": 194, "penn": 196, "fudan": 196, "databas": [196, 247, 248], "pedestrian": 196, "keypoint": 196, "tv_tensor": 196, "boundingbox": 196, "y0": 196, "image_id": 196, "iscrowd": 196, "pycocotool": 196, "gautamchitni": 196, "git": [196, 264], "cocoapi": 196, "cocodataset": 196, "pythonapi": 196, "get_height_and_width": 196, "ci": 196, "upenn": 196, "edu": 196, "jshi": 196, "ped_html": 196, "pennfudanp": 196, "pedmask": 196, "fudanped00001_mask": 196, "fudanped00002_mask": 196, "fudanped00003_mask": 196, "fudanped00004_mask": 196, "pngimag": 196, "fudanped00001": 196, "fudanped00002": 196, "fudanped00003": 196, "fudanped00004": 196, "tvtensor": 196, "zoo": 196, "fasterrcnn": 196, "1280": 196, "rpn": 196, "anchor": 196, "featmap_nam": 196, "rcnn": 196, "train2017": 196, "mikayla": [197, 227, 235], "gawarecki": [197, 227, 235], "flexattent": 197, "jag": [197, 276], "njt": 197, "famili": [197, 211, 256], "xformer": 197, "torchtun": 197, "rag": [197, 276], "ux": [197, 276, 278], "key_padding_mask": 197, "qk": 197, "premis": 197, "rmsnorm": 197, "sinusoid": 197, "rotari": [197, 260], "alibi": 197, "threefold": 197, "query_padding_mask": 197, "mha": [197, 272], "nestedtensor": [197, 259, 276, 281, 284], "cleanli": [197, 202, 203, 210, 249, 254], "zipf": [197, 276], "pariti": 197, "attn_mask": 197, "padded_tim": 197, "03454": 197, "padded_peak_memori": 197, "nested_tim": 197, "00612": 197, "nested_peak_memori": 197, "padded_bw_tim": 197, "09337": 197, "padded_bw_peak_mem": 197, "nested_bw_tim": 197, "01452": 197, "nested_bw_peak_mem": 197, "144": [197, 211], "out_proj": 197, "000244140625": 197, "packed_proj": 197, "001556396484375": 197, "001953125": 197, "causal": 197, "breviti": [197, 235, 271], "trust": 197, "ragged": 197, "e_q": 197, "e_tot": 197, "05x": 197, "swish": 197, "08x": [197, 211], "kv": [197, 260], "lucidrain": 197, "navit": 197, "visiontransform": 197, "norm_lay": 198, "batchnorm1d": 198, "register_full_backward_hook": 198, "grads_bn": 198, "grads_nobn": 198, "qualit": 198, "num_lay": [198, 222], "hook_forward": 198, "covari": 198, "newcom": 199, "deep_learning_60min_blitz": 199, "x86": [200, 275], "tmul": 200, "gen": 200, "processor": [200, 212, 238, 256, 258], "10x": [200, 264], "avx": [200, 212], "vnni": [200, 212], "048": 200, "024": 200, "bf16": [200, 211, 264, 275], "onednn": [200, 211, 212, 219, 275], "memory_format": [200, 212], "channels_last": [200, 212], "conv3d": [200, 238], "conv_transpose1d": 200, "conv_transpose2d": 200, "conv_transpose3d": 200, "baddbmm": 200, "addbmm": 200, "onednn_verbos": 200, "mkldnn": [200, 211, 275], "verbose_on": 200, "6dbeffbae1f23cbbeae17adb7b5b13f1f37c080": 200, "openmp": [200, 219], "nthr": 200, "isa": 200, "dl": [200, 264], "prim_templ": 200, "prop_kind": 200, "memory_descriptor": 200, "auxiliari": [200, 266], "problem_desc": 200, "exec_tim": 200, "exec": 200, "reorder": [200, 211, 219, 238], "undef": 200, "src_f32": 200, "f0": 200, "dst_f32": 200, "scratchpad": 200, "2561": 200, "avx512_core_amx_bf16": 200, "forward_train": 200, "src_bf16": 200, "acdb": 200, "wei_bf16": 200, "abcd16b16a2b": 200, "bia_f32": 200, "dst_bf16": 200, "alg": 200, "convolution_direct": 200, "mb7_ic2oc1_ih224oh111kh3sh2dh1ph1_iw224ow111kw3sw2dw1pw1": 200, "628906": 200, "brg": 200, "avx512_core_amx_int8": 200, "src_s8": 200, "wei_s8": 200, "ba16a64b4a": 200, "dst_s8": 200, "1x30522": 200, "30522x768": 200, "1x768": 200, "66382": 200, "lazo": [202, 203, 210, 249, 254], "get_device_cap": [202, 210], "benchmark_torch_function_in_microsecond": [202, 210], "blocked_autorang": [202, 210, 223, 280], "1e6": [202, 210, 257], "eager_runtim": [202, 210], "compiled_runtim": [202, 210], "747": 202, "2437149845064u": 202, "392": 202, "07384741178u": 202, "linearlr": 203, "peek": 203, "compiling_optimizer_lr_schedul": [203, 245, 259], "luca": [204, 205], "pasqualin": [204, 205], "iri": [204, 205, 207], "zhang": [204, 205, 207], "rodrigo": [204, 205], "kumpera": [204, 205], "chien": [204, 205, 260], "chin": [204, 205, 260], "async_sav": 204, "checkpoint_size_per_rank": 204, "number_of_rank": 204, "pageabl": 204, "get_state_dict": [204, 205], "set_state_dict": [204, 205], "appstat": [204, 205], "protocol": [204, 205], "load_stat_dict": [204, 205], "fqn": [204, 205, 280], "sharded_state_dict": [204, 205], "optim_state_dict": [204, 205], "run_fsdp_checkpoint_save_exampl": [204, 205], "checkpoint_futur": 204, "checkpoint_id": [204, 205], "_step": 204, "attack": 204, "filesystemwrit": 204, "storagewrit": 204, "cached_state_dict": 204, "cache_staged_state_dict": 204, "storage_writ": 204, "adddition": 205, "run_fsdp_checkpoint_load_exampl": 205, "run_checkpoint_load_exampl": 205, "format_util": 205, "torch_to_dcp": 205, "dcp_to_torch": 205, "dcp_to_torch_sav": 205, "torch_save_to_dcp": 205, "torch_save_checkpoint_dir": 205, "torch_save_checkpoint": 205, "_new": 205, "anshul": 206, "sinha": 206, "distributedtensor": 206, "interoper": 206, "mlpmodul": 206, "comm_mod": 206, "generate_comm_debug_tracing_t": 206, "noise_level": 206, "log_comm_debug_tracing_table_to_fil": 206, "file_nam": [206, 253], "transformer_operation_log": 206, "generate_json_dump": 206, "c10d_function": 206, "comm_mode_features_exampl": 206, "effortlessli": 207, "homogen": 207, "num_node_devic": 207, "shard_rank_list": 207, "shard_group": 207, "current_shard_group": 207, "current_replicate_group": 207, "shard_factor": 207, "replicate_group_rank": 207, "replicate_group": 207, "2d_setup": 207, "mesh_dim_nam": [207, 260], "thru": 207, "get_group": 207, "mesh_dim": 207, "2d_setup_with_device_mesh": 207, "meshshap": 207, "dp_replic": 207, "dp_shard": 207, "mesh_3d": 207, "hsdp_mesh": 207, "tp_group": 207, "_foreach": 210, "horizton": 210, "model_copi": 210, "output_copi": 210, "_higher_order_op": 210, "get_input": 210, "exp_avg": [210, 257], "exp_avg_sq": [210, 257], "update_exp_avg_sq": 210, "beta2": 210, "addcmul": 210, "update_param": 210, "bias_correction1": 210, "bias_correction2": 210, "denom": 210, "foreach_map_adam": 210, "updated_step": 210, "_foreach_copy_": 210, "hop": 210, "exp_avgs_upd": 210, "lerp": 210, "exp_avgs_sq_upd": 210, "params_upd": 210, "opt_eag": 210, "opt_eager_copi": 210, "compiled_adam": 210, "eager_p": 210, "compile_p": 210, "v0925": 210, "353000": 210, "22821": 210, "2345": 210, "__output_cod": 210, "0_infer": 210, "c_void_p": [210, 265], "c_long": 210, "c_int": 210, "cmath": 210, "nanj": 210, "run_intermediate_hook": [210, 265], "maybe_profil": 210, "memory_plan": 210, "_align": 210, "empty_strid": [210, 228, 265], "async_compil": [210, 275], "asynccompil": 210, "select_algorithm": 210, "extern_kernel": 210, "_cuda_getcurrentrawstream": 210, "get_raw_stream": 210, "tl": 210, "triton_heurist": 210, "start_graph": 210, "end_graph": 210, "inductor_op": 210, "_quantiz": 210, "assert_size_strid": [210, 265], "assert_align": 210, "empty_strided_cpu": 210, "_empty_strided_cpu": 210, "empty_strided_cuda": 210, "_empty_strided_cuda": 210, "empty_strided_xpu": 210, "_empty_strided_xpu": 210, "reinterpret_tensor": 210, "_reinterpret_tensor": 210, "alloc_from_pool": 210, "_alloc_from_pool": 210, "empty_strided_p2p": 210, "_distributed_c10d": [210, 262], "_symmetricmemori": 210, "torchinductor_ci": 210, "calrezlmzale753uatf4r4hyoxrgj2cygyga4s35ygdnlqxtbqrk": 210, "unsort": 210, "triton_for_fused_0": 210, "triton_help": 210, "libdevic": 210, "tl_math": 210, "autotunehint": 210, "reductionhint": 210, "tilehint": 210, "deviceproperti": 210, "num_warp": 210, "triton_meta": 210, "in_ptr2": 210, "in_ptr3": 210, "in_ptr4": 210, "in_ptr5": 210, "in_ptr6": 210, "in_ptr7": 210, "in_ptr8": 210, "in_ptr9": 210, "in_ptr10": 210, "in_ptr11": 210, "in_ptr12": 210, "in_ptr13": 210, "in_ptr14": 210, "in_ptr15": 210, "in_ptr16": 210, "in_ptr17": 210, "in_ptr18": 210, "in_ptr19": 210, "in_ptr20": 210, "in_ptr21": 210, "in_ptr22": 210, "in_ptr23": 210, "in_ptr24": 210, "in_ptr25": 210, "in_ptr26": 210, "in_ptr27": 210, "in_ptr28": 210, "in_ptr29": 210, "in_ptr30": 210, "in_ptr31": 210, "in_ptr32": 210, "in_ptr33": 210, "in_ptr34": 210, "in_ptr35": 210, "in_ptr36": 210, "in_ptr37": 210, "in_ptr38": 210, "in_ptr39": 210, "in_ptr40": 210, "in_ptr41": 210, "in_ptr42": 210, "in_ptr43": 210, "in_ptr44": 210, "in_ptr45": 210, "in_ptr46": 210, "in_ptr47": 210, "in_ptr48": 210, "in_ptr49": 210, "out_ptr6": 210, "out_ptr7": 210, "out_ptr8": 210, "out_ptr15": 210, "out_ptr16": 210, "out_ptr17": 210, "out_ptr24": 210, "out_ptr25": 210, "out_ptr26": 210, "out_ptr33": 210, "out_ptr34": 210, "out_ptr35": 210, "out_ptr42": 210, "out_ptr43": 210, "out_ptr44": 210, "out_ptr51": 210, "out_ptr52": 210, "out_ptr53": 210, "out_ptr60": 210, "out_ptr61": 210, "out_ptr62": 210, "out_ptr69": 210, "out_ptr70": 210, "out_ptr71": 210, "out_ptr78": 210, "out_ptr79": 210, "out_ptr80": 210, "out_ptr87": 210, "out_ptr88": 210, "out_ptr89": 210, "multi_processor_count": 210, "regs_per_multiprocessor": 210, "65536": 210, "max_threads_per_multi_processor": 210, "1536": 210, "warp_siz": 210, "tt": 210, "inductor_meta": 210, "grid_typ": 210, "sequentialcombokernelgrid": 210, "combo_grid_meta": 210, "min_block": 210, "default_config": 210, "xblock": 210, "no_x_dim_0": 210, "xnumel_0": 210, "1048576": 210, "no_x_dim_1": 210, "xnumel_1": 210, "no_x_dim_2": 210, "xnumel_2": 210, "no_x_dim_3": 210, "xnumel_3": 210, "no_x_dim_4": 210, "xnumel_4": 210, "no_x_dim_5": 210, "xnumel_5": 210, "no_x_dim_6": 210, "xnumel_6": 210, "no_x_dim_7": 210, "xnumel_7": 210, "no_x_dim_8": 210, "xnumel_8": 210, "no_x_dim_9": 210, "xnumel_9": 210, "kernel_nam": 210, "mutated_arg_nam": 210, "backend_hash": 210, "5521eadcb2516098f638687b39b477aa524882055648f5ae9ffb68d065b487c6": 210, "are_deterministic_algorithms_en": 210, "assert_indirect_index": 210, "autotune_local_cach": 210, "autotune_pointwis": 210, "autotune_remote_cach": 210, "force_disable_cach": 210, "dynamic_scale_rblock": 210, "max_autotun": [210, 252], "max_autotune_pointwis": 210, "min_split_scan_rblock": 210, "spill_threshold": 210, "store_cubin": 210, "pid": 210, "program_id": 210, "num_xblocks_0": 210, "cdiv": 210, "num_xblocks_1": 210, "num_xblocks_2": 210, "num_xblocks_3": 210, "num_xblocks_4": 210, "num_xblocks_5": 210, "num_xblocks_6": 210, "num_xblocks_7": 210, "num_xblocks_8": 210, "num_xblocks_9": 210, "pid_offset": 210, "xnumel": 210, "r0_numel": 210, "xoffset": 210, "xindex": 210, "xmask": 210, "int1": 210, "tmp8": [210, 275], "tmp15": 210, "tmp17": 210, "10000000149011612": 210, "tmp4": [210, 275], "tmp5": [210, 275], "tmp6": [210, 275], "tmp7": [210, 275], "tmp9": 210, "tmp10": 210, "tmp11": 210, "0010000000000000009": 210, "tmp12": 210, "tmp13": 210, "tmp14": 210, "tmp16": 210, "tmp18": 210, "tmp19": 210, "tmp20": 210, "tmp21": 210, "tmp22": 210, "tmp23": 210, "tmp24": 210, "tmp25": 210, "tmp26": 210, "int32": [210, 264], "tmp27": 210, "tmp28": 210, "tmp29": 210, "tmp30": 210, "tmp31": 210, "tmp32": 210, "tmp33": 210, "tmp34": 210, "tmp35": 210, "tmp36": 210, "tmp37": 210, "tmp38": 210, "tmp39": 210, "tmp40": 210, "tmp47": 210, "tmp54": 210, "tmp56": 210, "tmp41": 210, "tmp42": 210, "tmp43": 210, "tmp44": 210, "tmp45": 210, "tmp46": 210, "tmp48": 210, "tmp49": 210, "tmp50": 210, "tmp51": 210, "tmp52": 210, "tmp53": 210, "tmp55": 210, "tmp57": 210, "tmp58": 210, "tmp59": 210, "tmp60": 210, "tmp61": 210, "tmp62": 210, "tmp63": 210, "tmp64": 210, "tmp65": 210, "tmp66": 210, "tmp67": 210, "tmp68": 210, "tmp69": 210, "tmp70": 210, "tmp71": 210, "tmp72": 210, "tmp73": 210, "tmp74": 210, "tmp75": 210, "tmp76": 210, "tmp77": 210, "tmp78": 210, "tmp79": 210, "tmp86": 210, "tmp93": 210, "tmp95": 210, "tmp80": 210, "tmp81": 210, "tmp82": 210, "tmp83": 210, "tmp84": 210, "tmp85": 210, "tmp87": 210, "tmp88": 210, "tmp89": 210, "tmp90": 210, "tmp91": 210, "tmp92": 210, "tmp94": 210, "tmp96": 210, "tmp97": 210, "tmp98": 210, "tmp99": 210, "tmp100": 210, "tmp101": 210, "tmp102": 210, "tmp103": 210, "tmp104": 210, "tmp105": 210, "tmp106": 210, "tmp107": 210, "tmp108": 210, "tmp109": 210, "tmp110": 210, "tmp111": 210, "tmp112": 210, "tmp113": 210, "tmp114": 210, "tmp115": 210, "tmp116": 210, "tmp117": 210, "tmp118": 210, "tmp125": 210, "tmp132": 210, "tmp134": 210, "tmp119": 210, "tmp120": 210, "tmp121": 210, "tmp122": 210, "tmp123": 210, "tmp124": 210, "tmp126": 210, "tmp127": 210, "tmp128": 210, "tmp129": 210, "tmp130": 210, "tmp131": 210, "tmp133": 210, "tmp135": 210, "tmp136": 210, "tmp137": 210, "tmp138": 210, "tmp139": 210, "tmp140": 210, "tmp141": 210, "tmp142": 210, "tmp143": 210, "tmp144": 210, "tmp145": 210, "tmp146": 210, "tmp147": 210, "tmp148": 210, "tmp149": 210, "tmp150": 210, "tmp151": 210, "tmp152": 210, "tmp153": 210, "tmp154": 210, "tmp155": 210, "x4": 210, "tmp156": 210, "tmp157": 210, "tmp164": 210, "tmp171": 210, "tmp173": 210, "tmp158": 210, "tmp159": 210, "tmp160": 210, "tmp161": 210, "tmp162": 210, "tmp163": 210, "tmp165": 210, "tmp166": 210, "tmp167": 210, "tmp168": 210, "tmp169": 210, "tmp170": 210, "tmp172": 210, "tmp174": 210, "tmp175": 210, "tmp176": 210, "tmp177": 210, "tmp178": 210, "tmp179": 210, "tmp180": 210, "tmp181": 210, "tmp182": 210, "tmp183": 210, "tmp184": 210, "tmp185": 210, "tmp186": 210, "tmp187": 210, "tmp188": 210, "tmp189": 210, "tmp190": 210, "tmp191": 210, "tmp192": 210, "tmp193": 210, "tmp194": 210, "x5": 210, "tmp195": 210, "tmp196": 210, "tmp203": 210, "tmp210": 210, "tmp212": 210, "tmp197": 210, "tmp198": 210, "tmp199": 210, "tmp200": 210, "tmp201": 210, "tmp202": 210, "tmp204": 210, "tmp205": 210, "tmp206": 210, "tmp207": 210, "tmp208": 210, "tmp209": 210, "tmp211": 210, "tmp213": 210, "tmp214": 210, "tmp215": 210, "tmp216": 210, "tmp217": 210, "tmp218": 210, "tmp219": 210, "tmp220": 210, "tmp221": 210, "tmp222": 210, "tmp223": 210, "tmp224": 210, "tmp225": 210, "tmp226": 210, "tmp227": 210, "tmp228": 210, "tmp229": 210, "tmp230": 210, "tmp231": 210, "tmp232": 210, "tmp233": 210, "x6": 210, "tmp234": 210, "tmp235": 210, "tmp242": 210, "tmp249": 210, "tmp251": 210, "tmp236": 210, "tmp237": 210, "tmp238": 210, "tmp239": 210, "tmp240": 210, "tmp241": 210, "tmp243": 210, "tmp244": 210, "tmp245": 210, "tmp246": 210, "tmp247": 210, "tmp248": 210, "tmp250": 210, "tmp252": 210, "tmp253": 210, "tmp254": 210, "tmp255": 210, "tmp256": 210, "tmp257": 210, "tmp258": 210, "tmp259": 210, "tmp260": 210, "tmp261": 210, "tmp262": 210, "tmp263": 210, "tmp264": 210, "tmp265": 210, "tmp266": 210, "tmp267": 210, "tmp268": 210, "tmp269": 210, "tmp270": 210, "tmp271": 210, "tmp272": 210, "x7": 210, "tmp273": 210, "tmp274": 210, "tmp281": 210, "tmp288": 210, "tmp290": 210, "tmp275": 210, "tmp276": 210, "tmp277": 210, "tmp278": 210, "tmp279": 210, "tmp280": 210, "tmp282": 210, "tmp283": 210, "tmp284": 210, "tmp285": 210, "tmp286": 210, "tmp287": 210, "tmp289": 210, "tmp291": 210, "tmp292": 210, "tmp293": 210, "tmp294": 210, "tmp295": 210, "tmp296": 210, "tmp297": 210, "tmp298": 210, "tmp299": 210, "tmp300": 210, "tmp301": 210, "tmp302": 210, "tmp303": 210, "tmp304": 210, "tmp305": 210, "tmp306": 210, "tmp307": 210, "tmp308": 210, "tmp309": 210, "tmp310": 210, "tmp311": 210, "x8": 210, "tmp312": 210, "tmp313": 210, "tmp320": 210, "tmp327": 210, "tmp329": 210, "tmp314": 210, "tmp315": 210, "tmp316": 210, "tmp317": 210, "tmp318": 210, "tmp319": 210, "tmp321": 210, "tmp322": 210, "tmp323": 210, "tmp324": 210, "tmp325": 210, "tmp326": 210, "tmp328": 210, "tmp330": 210, "tmp331": 210, "tmp332": 210, "tmp333": 210, "tmp334": 210, "tmp335": 210, "tmp336": 210, "tmp337": 210, "tmp338": 210, "tmp339": 210, "tmp340": 210, "tmp341": 210, "tmp342": 210, "tmp343": 210, "tmp344": 210, "tmp345": 210, "tmp346": 210, "tmp347": 210, "tmp348": 210, "tmp349": 210, "tmp350": 210, "x9": 210, "tmp351": 210, "tmp352": 210, "tmp359": 210, "tmp366": 210, "tmp368": 210, "tmp353": 210, "tmp354": 210, "tmp355": 210, "tmp356": 210, "tmp357": 210, "tmp358": 210, "tmp360": 210, "tmp361": 210, "tmp362": 210, "tmp363": 210, "tmp364": 210, "tmp365": 210, "tmp367": 210, "tmp369": 210, "tmp370": 210, "tmp371": 210, "tmp372": 210, "tmp373": 210, "tmp374": 210, "tmp375": 210, "tmp376": 210, "tmp377": 210, "tmp378": 210, "tmp379": 210, "tmp380": 210, "tmp381": 210, "tmp382": 210, "tmp383": 210, "tmp384": 210, "tmp385": 210, "tmp386": 210, "tmp387": 210, "tmp388": 210, "tmp389": 210, "device_str": 210, "cpp_fused__foreach_copy_1": 210, "cpp_pybind": [210, 275], "cpp_prefix": 210, "out_ptr1": 210, "out_ptr3": 210, "out_ptr5": 210, "out_ptr9": 210, "out_ptr11": 210, "out_ptr13": 210, "out_ptr19": 210, "arg2_1": 210, "arg3_1": 210, "arg4_1": 210, "arg5_1": 210, "arg6_1": 210, "arg7_1": 210, "arg8_1": 210, "arg9_1": 210, "arg10_1": 210, "arg11_1": 210, "arg12_1": 210, "arg13_1": 210, "arg14_1": 210, "arg15_1": 210, "arg16_1": 210, "arg17_1": 210, "arg18_1": 210, "arg19_1": 210, "arg20_1": 210, "arg21_1": 210, "arg22_1": 210, "arg23_1": 210, "arg24_1": 210, "arg25_1": 210, "arg26_1": 210, "arg27_1": 210, "arg28_1": 210, "arg29_1": 210, "arg30_1": 210, "arg31_1": 210, "arg32_1": 210, "arg33_1": 210, "arg34_1": 210, "arg35_1": 210, "arg36_1": 210, "arg37_1": 210, "arg38_1": 210, "arg39_1": 210, "arg40_1": 210, "arg41_1": 210, "arg42_1": 210, "arg43_1": 210, "arg44_1": 210, "arg45_1": 210, "arg46_1": 210, "arg47_1": 210, "arg48_1": 210, "arg49_1": 210, "_deviceguard": [210, 265], "stream0": [210, 265], "benchmark_compiled_modul": 210, "rand_strid": 210, "print_perform": 210, "wrapper_benchmark": 210, "compiled_module_main": 210, "397000": 210, "2356": 210, "ff": 210, "cffqwnpkieergngjngozdun467la5vp6eyiisxxpikirosuditrp": 210, "i0925": 210, "414000": 210, "2317": 210, "247000": 210, "1_infer": 210, "294000": 210, "da": 210, "cdabi6efsaqwxkw2y4xsbsvooc4l752igga6mfi4rfeqb4ikja3b": 210, "330000": 210, "1202": 210, "9494850003175u": 210, "1013166039877u": 210, "sunita": 211, "nadamp": 211, "graviton3": 211, "sve": 211, "simd": 211, "graviton2": 211, "bla": 211, "acl": 211, "c7g": 211, "bfloa16": 211, "r7g": 211, "m7g": 211, "4vcpu": 211, "profileract": [211, 228], "myneuralnetwork": 211, "linear_relu_stack": 211, "11008": 211, "pred_probab": 211, "set_grad_en": 211, "mymodel_infer": 211, "self_cpu_time_tot": [211, 228], "avg": [211, 228], "813": 211, "255m": 211, "177": 211, "032m": 211, "160u": 211, "162": [211, 223], "054m": 211, "540": 211, "180u": 211, "738m": 211, "201": 211, "955m": 211, "985": 211, "282m": 211, "421m": 211, "043m": 211, "810u": 211, "356m": 211, "179": 211, "388m": 211, "896": 211, "940u": 211, "mmla": 211, "torchbench": 211, "dnnl_default_fpmath_mod": 211, "943": 211, "507m": 211, "167": [211, 256], "653m": 211, "838": 211, "265u": 211, "107": 211, "593m": 211, "358": 211, "643u": 211, "167m": 211, "262": 211, "911m": 211, "060": 211, "533m": 211, "414m": 211, "892m": 211, "307u": 211, "281m": 211, "934m": 211, "849": [211, 223], "670u": 211, "fastmath": 211, "821": 211, "914": 211, "713m": 211, "244m": 211, "711": 211, "220u": 211, "322m": 211, "307": 211, "740u": 211, "094": 211, "495m": 211, "921": 211, "736m": 211, "131m": 211, "441m": 211, "803u": 211, "942m": 211, "186m": 211, "720": 211, "930u": 211, "848": 211, "944": 211, "148m": 211, "141": [211, 223], "309m": 211, "706": 211, "545u": 211, "916m": 211, "720u": 211, "431m": 211, "471m": 211, "951": 211, "027m": 211, "243m": 211, "143u": 211, "928m": 211, "143": [211, 256], "237m": 211, "185u": 211, "47x": 211, "noteworthi": 211, "till": 211, "torch_mkldnn_matmul_min_dim": 211, "958": 211, "984": 211, "612m": 211, "124m": 211, "620u": 211, "951m": 211, "170u": 211, "423m": 211, "034": 211, "691m": 211, "988": 211, "628m": 211, "520m": 211, "945m": 211, "817u": 211, "382m": 211, "910u": 211, "781": 211, "604m": 211, "295": 211, "437m": 211, "477m": 211, "516m": 211, "558": 211, "387u": 211, "708m": 211, "499m": 211, "788": 211, "627m": 211, "982m": 211, "385m": 211, "617u": 211, "932m": 211, "297": 211, "369m": 211, "487m": 211, "038m": 211, "060m": 211, "300u": 211, "013m": 211, "106": 211, "710u": 211, "521m": 211, "750m": 211, "216": 211, "475m": 211, "033m": 211, "110u": 211, "285m": 211, "345m": 211, "186": [211, 264], "725u": 211, "margin": 211, "thp_mem_alloc_en": 211, "321": 211, "069m": 211, "568m": 211, "613m": 211, "602m": 211, "682": 211, "007u": 211, "777m": 211, "697": 211, "082m": 211, "329": 211, "097m": 211, "547m": 211, "325": 211, "115m": 211, "626m": 211, "avx512": 212, "amx": 212, "xmx": 212, "claus": [212, 257], "nhwc": 212, "upstream": [212, 238], "cooper": 212, "roialign": 212, "imper": 212, "intel_extension_for_pytorch": [212, 246], "ipex": [212, 246, 258], "bertmodel": 212, "seq_length": 212, "cache_en": 212, "argc": 212, "cerr": 212, "intel_ext_pt_cpu": 212, "libpytorch_path": 212, "ldd": 212, "workspac": 212, "libintel": 212, "ext": 212, "0x00007f3cf98e0000": 212, "libc10": 212, "0x00007f3cf985a000": 212, "0x00007f3cf70fc000": 212, "libtorch_cpu": [212, 237], "0x00007f3ce16ac000": 212, "mitig": [213, 238], "autotun": [213, 238, 247, 248, 250, 264, 284], "mx": 213, "hpu": [213, 279], "inc_target_devic": 213, "gaudi": [213, 279], "neural_compressor": 213, "fp8config": 213, "qconfig": 213, "fp8_config": 213, "e4m3": 213, "calibration_data": 213, "input_data": 213, "theblok": 213, "7b": 213, "gptq": 213, "model_name_or_path": 213, "torch_dtyp": 213, "hpu_model": 213, "safetensor": 213, "qd": 213, "w8a8": 213, "staticquantconfig": 213, "userfloatmodel": 213, "exported_model": [213, 278], "quant_config": 213, "prepared_model": [213, 278], "run_fn": 213, "q_model": 213, "opt_model": 213, "rtnconfig": 213, "tuningconfig": 213, "eval_fn": 213, "tune_config": 213, "config_set": 213, "use_sym": 213, "group_siz": 213, "tolerable_loss": 213, "max_trial": 213, "gui": [219, 258], "emit_itt": 219, "ex": [219, 266, 280], "8080": 219, "path_of_launch": 219, "iteration_n": 219, "range_push": 219, "range_pop": 219, "oneapi": 219, "brown": 219, "percerntag": 219, "jitter": [219, 223], "enrich": 219, "ittsampl": 219, "292820": 219, "unmark": 219, "244": [219, 280], "iteration_": 219, "basefold": 219, "bash_sourc": 219, "gradcam": 221, "283": 221, "occlus": 221, "deconvolut": 221, "guidedbackprop": 221, "deeplift": 221, "gradientshap": 221, "forward_func": 221, "pictori": 221, "textual": 221, "distractor": 221, "visualize_text": 221, "imdb_torchtext_interpret": 221, "gilbert": 221, "tanner": 221, "gilberttann": 221, "captum_recip": [221, 226, 234, 259], "carilli": 222, "ordinarili": 222, "ture": 222, "kepler": 222, "maxwel": 222, "pascal": 222, "modest": 222, "in_siz": 222, "out_siz": 222, "underflow": 222, "scaler": 222, "unscal": 222, "unscale_": 222, "rough": 222, "coalesc": [222, 271], "binary_cross_entropy_with_logit": 222, "suspect": 222, "docstr": 222, "subregion": 222, "backtrac": 222, "torch_show_cpp_stacktrac": 222, "amp_recip": [222, 226, 234, 259], "invalid": [223, 238, 272, 273, 274], "tediou": 223, "mistak": 223, "mul_sum": 223, "0x7fb10400d0f0": 223, "batched_dot_mul_sum": 223, "379": 223, "0x7fb103d67048": 223, "batched_dot_bmm": 223, "num_thread": [223, 275], "sub_label": 223, "0x7fb103d54080": 223, "118": 223, "0x7fb16935d2e8": 223, "2775": 223, "0x7fb10400d080": 223, "181": 223, "cubla": 223, "min_run_tim": [223, 237], "median": [223, 237, 280], "274": 223, "748": 223, "432": [223, 228], "22657": 223, "11899": 223, "609": 223, "23098": 223, "27246": 223, "267073": 223, "118823": 223, "189": 223, "2782": 223, "7471": 223, "11874": 223, "173": 223, "7264": 223, "27824": 223, "100060": 223, "121499": 223, "188": 223, "2773": 223, "6111": 223, "12833": 223, "6295": 223, "27062": 223, "71804": 223, "120365": 223, "103": 223, "6764": 223, "11871": 223, "6640": 223, "27592": 223, "73003": 223, "120083": 223, "callgrindstat": [223, 237], "trip": [223, 237], "batched_dot": 223, "36000": 223, "40000": 223, "stark": 223, "fuzzer": 223, "10000000": 223, "k0": 223, "k1": 223, "discontigu": 223, "725": 223, "383": 223, "1468": 223, "187": 223, "5039": 223, "2140": 223, "1296": 223, "41000": 223, "1598": 223, "310": 223, "519": 223, "763": 223, "1082": 223, "473": 223, "16384": 223, "12642115": 223, "8192": [223, 260], "4800": 223, "20400": 223, "110000": 223, "400000": 223, "493": 223, "1100": [223, 237], "2440": 223, "870": 223, "2030": 223, "495": 223, "23600": 223, "24000": [223, 237], "62374": 223, "90000": 223, "100000": 223, "240372": 223, "16000": 223, "40156": 223, "2670": 223, "opac": 223, "complementari": 223, "insensit": 223, "environment": 223, "cpp_lib": 223, "cpp_sourc": 223, "batched_dot_src": 223, "extra_cflag": 223, "extra_include_path": 223, "getenv": 223, "batched_dot_mul_sum_v0": 223, "batched_dot_mul_sum_v1": 223, "module_import_str": 223, "67631": 223, "importlib": 223, "spec_from_file_loc": 223, "repr": 223, "module_from_spec": 223, "exec_modul": 223, "textwrap": 223, "pretty_print": 223, "t_baselin": 223, "stats_v0": 223, "collect_callgrind": 223, "stats_v1": 223, "as_standard": [223, 237], "symbol": [223, 237, 253], "denois": 223, "cancel": [223, 238], "ing": 223, "wrap_pybind_function_impl_": 223, "set_printopt": [223, 280], "linewidth": 223, "valgrind_wrapp": [223, 237], "timer_interfac": [223, 237], "0x7fb0f06e7630": 223, "2392671": 223, "4367": 223, "rel_with_deb_info": [223, 237], "0x7fb10400d208": 223, "2378978": 223, "functioncount": [223, 237], "0x7fb1000ab358": 223, "0x000000000020d9e0": 223, "0x000000000020db10": 223, "integer_sequ": 223, "0ul": 223, "1ul": 223, "5200": 223, "undefinedtensorimpl": 223, "reset_": 223, "5935": 223, "0x000000000022c0e0": 223, "13693": 223, "impos": [224, 235], "changing_default_devic": [224, 234, 259], "subsidiari": [225, 239, 240], "neighbor": 225, "sharp": 225, "blurri": 225, "defining_a_neural_network": [225, 226, 234, 259], "what_is_state_dict": [226, 234, 240, 259], "saving_and_loading_models_for_infer": 226, "custom_dataset_transforms_load": 226, "dynamic_quant": 226, "warmstarting_model_using_parameters_from_a_different_model": [226, 234, 239, 259], "zeroing_out_gradi": [226, 234, 241, 259], "mobile_perf": 226, "regional_compil": [226, 243, 245, 259], "syntaxerror": [226, 234, 259], "undesir": 227, "unload": 227, "upfront": [227, 275], "somemodul": 227, "overwritten": [227, 241, 256], "param_in_model": 227, "param_in_state_dict": 227, "set_swap_module_params_on_convers": [227, 235], "swap_tensor": [227, 234, 259], "module_load_state_dict_tip": [227, 234, 259], "shivam": 228, "raikundalia": 228, "model_infer": 228, "_fork": 228, "509m": 228, "503m": 228, "931m": 228, "597m": 228, "700m": 228, "585m": 228, "_convolut": 228, "450m": 228, "mkldnn_convolut": 228, "838m": 228, "114m": 228, "556m": 228, "693m": 228, "734": 228, "_batch_norm_impl_index": 228, "482m": 228, "724": 228, "100u": 228, "native_batch_norm": 228, "229m": 228, "705": 228, "450u": 228, "332": 228, "631m": 228, "286u": 228, "668m": 228, "292m": 228, "988u": 228, "549m": 228, "dnn": 228, "group_by_input_shap": 228, "008m": 228, "956m": 228, "909m": 228, "834m": 228, "332m": 228, "303m": 228, "273m": 228, "233m": 228, "751m": 228, "occurr": 228, "666m": 228, "484m": 228, "_convolution_nogroup": 228, "thnn_conv2d": 228, "thnn_conv2d_forward": 228, "im2col_kernel": 228, "844m": 228, "sgemm_32x32x32_nn": 228, "206m": 228, "sgemm_32x32x32_nn_vec": 228, "093m": 228, "015m": 228, "567m": 228, "871m": 228, "560u": 228, "convolution_overrid": 228, "gen_conv": 228, "216u": 228, "640u": 228, "632u": 228, "conv_reord": 228, "880u": 228, "448u": 228, "712": 228, "486m": 228, "max_pool2d_with_indic": 228, "kb": 228, "572": 228, "resize_": 228, "480": 228, "masked_select": 228, "112": [228, 253, 256], "122": 228, "064m": 228, "viewer": 228, "439": 228, "_conv_forward": 228, "1051": 228, "_call_impl": 228, "016m": 228, "659m": 228, "skip_first": 228, "step_num": 228, "profiler_recip": [228, 234, 259], "reasoning_about_shap": [229, 234, 259], "009": 234, "tensorboard_with_pytorch": [234, 236, 259], "timer_quick_start": [234, 237, 259], "tuning_guid": [234, 238, 259], "hereaft": 235, "__class__": 235, "__dict__": [235, 278], "__slots__": 235, "pertin": 235, "glanc": [235, 271], "nasti": 235, "__torch_dispatch__": [235, 253], "new_param": 235, "myquantizedlinearweight": 235, "payload": 235, "__setattr__": 235, "module_load": 235, "__torch_function__": 235, "param_kei": 235, "histogram": 236, "scalar_valu": 236, "walltim": 236, "train_model": 236, "pend": 236, "anymor": [236, 275], "tfevent": 236, "OR": 236, "0x7f1929a38ed0": 237, "iqr": 237, "424": 237, "0x7f192b019ed0": 237, "unsurprisingli": 237, "0x7f1929a35850": 237, "563600": 237, "tensormethod": 237, "ab_ref": 237, "0x7f192a6dfd90": 237, "47264": 237, "_int_fre": 237, "25963": 237, "_int_malloc": 237, "19900": 237, "tensorit": 237, "tensoriteratorconfig": 237, "18000": 237, "__tls_get_addr": 237, "13500": 237, "malloc": [237, 238, 256], "11300": 237, "smallvector": 237, "10345": 237, "_int_memalign": 237, "9200": 237, "iteratorbas": 237, "get_strid": 237, "173472": 237, "0x7f192995d750": 237, "118200": 237, "tensoriter": 237, "65000": 237, "20900": 237, "15900": 237, "15100": 237, "cpualloc": 237, "12500": 237, "352327": 237, "a0": 237, "b0": 237, "a1": 237, "a127": 237, "pickleabl": 237, "broadcasting_stat": 237, "17600": 237, "tensoriteratorbas": 237, "compute_strid": 237, "12700": 237, "allocate_or_resize_output": 237, "10200": 237, "smallvectorimpl": 237, "7400": 237, "6200": 237, "invert_perm": 237, "6064": 237, "5100": 237, "reorder_dimens": 237, "4300": 237, "compatible_strid": 237, "check_tensor_options_and_extract_memory_format": 237, "__memcmp_avx2_movb": 237, "empty_cpu": 237, "1300": 237, "6100": 237, "compute_fast_setup_typ": 237, "22600": 237, "fast_set_up": 237, "58091": 237, "580": 237, "0x7f19299544d0": 237, "compute_shap": 237, "2300": 237, "coalesce_dimens": 237, "promin": 237, "__add__": 237, "__sub__": 237, "dice": 237, "szymon": 238, "migacz": 238, "set_to_non": 238, "elementwis": [238, 254], "anomali": 238, "detect_anomali": 238, "set_detect_anomali": 238, "emit_nvtx": 238, "nth": 238, "cpunodebind": 238, "membind": 238, "pytorch_script": 238, "omp_num_thread": [238, 256], "thrash": 238, "gomp_cpu_affin": 238, "omp_proc_bind": 238, "omp_schedul": 238, "libgomp": [238, 256], "sleep": 238, "jemalloc": [238, 256], "tcmalloc": [238, 256], "emphas": 238, "fragment": [238, 242], "ccl": 238, "alltoal": [238, 260], "set_float32_matmul_precis": 238, "judgment": 241, "sayak": 242, "paul": 242, "charl": 242, "bensimon": 242, "aot_inductor": 242, "package_constants_in_so": 242, "fullest": 242, "regional_aot": [242, 245, 259], "animesh": 243, "jain": 243, "startup": 243, "inline_inbuilt_nn_modul": 243, "graph_cod": 243, "strateg": 243, "919": 245, "horizont": [245, 258, 259], "foreach_map": [245, 258, 259], "torch_compiler_set_stance_tutori": [245, 251, 259], "torch_compile_torch_function_mod": [245, 249, 259], "torch_compile_user_defined_triton_kernel_tutori": [245, 250, 259], "torch_export_aoti_python": [245, 252, 259], "compile_model": 246, "resnet50_weight": 246, "weights_prepack": 246, "oguz": [247, 248, 250], "ulgen": [247, 248, 250], "sam": [247, 253], "larsen": 247, "fxgraphcach": [247, 248], "aotautogradcach": [247, 248], "redi": [247, 248], "usernam": 247, "aotautograd": [247, 248], "fxgraph": 247, "torchinductor_": 247, "torchinductor_myusernam": [247, 248], "triton_cache_dir": 247, "torchinductor_redis_host": 247, "torchinductor_redis_port": 247, "6379": 247, "cachebench": 248, "onward": 248, "save_cache_artifact": 248, "load_cache_artifact": 248, "artifact_byt": 248, "cache_info": 248, "pgo": 248, "tritoncach": 248, "cubin": [248, 252, 265], "inductorcach": 248, "autotuningcach": 248, "torchinductor_cache_dir": 248, "basetorchfunctionmod": 249, "flopcountermod": 250, "wrap_triton": 250, "footgun": 250, "register_kernel": 250, "register_flop_formula": 250, "flop_count": 250, "mysin": 250, "reappli": 251, "force_eag": 251, "eager_on_recompil": 251, "fail_on_recompil": 251, "torch.export": 252, "torch._inductor.aoti_compile_and_packag": 252, "aot_compil": 252, "torch._export.aoti_load_packag": 252, "ankith": [252, 253], "gunap": [252, 253], "bao": [252, 265], "_export": 252, "aot_load": 252, "runner": 252, "archive_format": 252, "10088": 252, "cagzt6akdaczvxwtbvqe34otfe5jlorktbqlojbzqjqvbfsjlge4": 252, "17160": 252, "c6oytfjmt5w4c7onvtm6fray7clirxt7q5xjbwx3hdydclmwoujz": 252, "16616": 252, "c7ydp7nocyz323hij4tmlf2kcedmwlyg6r57gaqzcsy3huneamu6": 252, "17776": 252, "cyqdf46ordevqhiddvpdpp3uzwatfbzdpl3auj2nx23uxvplnne2": 252, "10856": 252, "cpzfebfgrusqslui7fxsuoo4tvwulmrxirc5tmrpa4mvrbdno7kn": 252, "14608": 252, "c5ukeoz5wmaszd7vczdz2qhtt6n7tdbl3b6wuy4rb2se24fjwfoi": 252, "11376": 252, "csu3nstcp56tsjfycygaqsewpu64l5s6zavvz7537cm4s4cv2k3r": 252, "10984": 252, "cp76lez4glmgq7gedf2u25zvvv6rksv5lav4q22dibd2zicbgwj3": 252, "14736": 252, "c2bb5p6tnwz4elgujqelsrp3unvkgsyiv7xqxmpvuxcm4jfl7pc2": 252, "c6eopmb2b4ngodwsayae4r5q6ni3jlfogfbdk3ypg56tgpzhubfi": 252, "11624": 252, "chmwe6lvoekzfowdbiizitm3haiiuad5kdm6sd2m6mv6dkn2zk32": 252, "15632": 252, "c3jop5g344hj3ztsu4qm6ibxyaaerlhkzh2e6emak23rxfje6jam": 252, "25472": 252, "chaiixybeiuuitm2nmqnxzijzwgnn2n7uuss4qmsupgblfh3h5hk": 252, "139389": 252, "cvk6qzuybruhwxtfblzxiov3rlrziv5fkqc4mdhbmantfu3lmd6t": 252, "cvk6qzuybruhwxtfblzxiov3rlrziv5fkqc4mdhbmantfu3lmd6t_metadata": 252, "47195424": 252, "47523148": 252, "jordi": 253, "ramon": 253, "marco": 253, "carranza": 253, "mvit": 253, "whisper": 253, "blip": 253, "sam2": 253, "timm": 253, "multiscal": 253, "kinet": 253, "mvit_v1_b_weight": 253, "mvit_v1_b": 253, "224x224x3": 253, "input_fram": 253, "num_clip": 253, "print_exc": 253, "batch_dim": 253, "asr": 253, "transcrib": 253, "spoken": 253, "680k": 253, "whisperprocessor": 253, "whisperforconditionalgener": 253, "input_featur": 253, "decoder_input_id": 253, "decoder_start_token_id": 253, "internaltorchdynamoerror": 253, "attributeerror": 253, "dynamiccach": 253, "key_cach": 253, "non_strict": 253, "proxytensor": 253, "gameplai": 253, "gamer": 253, "salesforc": 253, "blip_decod": 253, "384": [253, 280], "caption_input": 253, "model_url": 253, "googleapi": 253, "sfr": 253, "model_base_capfilt_larg": 253, "exportdb": 253, "bos_token_id": 253, "anaconda3": 253, "functional_tensor": 253, "545": 253, "outs_unwrap": 253, "_op_dk": 253, "sam2imagepredictor": 253, "_predict": 253, "unnorm_coord": 253, "unnorm_box": 253, "mask_input": 253, "multimask_output": 253, "return_logit": 253, "image_predict": 253, "sam2_image_predictor": 253, "359": 253, "valueerror": 253, "exporthelp": 253, "model_to_export": 253, "aoti": 253, "preload": 256, "omp": [256, 275], "tunabl": 256, "taskset": 256, "uniform": 256, "uma": 256, "lscpu": 256, "9480": 256, "223": 256, "vendor": 256, "genuineintel": 256, "node0": 256, "node1": 256, "cento": 256, "yum": 256, "libiomp": 256, "perftool": 256, "gperftool": 256, "libjemalloc2": 256, "ninstanc": 256, "ncore": 256, "program_arg": 256, "iomp": 256, "prepend": 256, "core_id": 256, "dafault": 256, "ncores_per_inst": 256, "libtcmalloc": 256, "preliminarili": 256, "deepspe": 257, "marian": 257, "oftentim": 257, "print_peak_memori": 257, "max_memory_alloc": 257, "use_zero": 257, "optimizer_class": 257, "992": 257, "1361": 257, "3453": 257, "6123046875": 257, "1697": 257, "itt": 258, "vtune": 258, "torchcompil": 258, "run_cpu": 258, "graviton": 258, "compressor": 258, "tensorpip": 258, "dcp": 258, "commdebugmod": 258, "124": 259, "galleri": 259, "recipes_sourc": 259, "intermediate_sourc": 259, "torchao": [259, 281], "unstable_sourc": 259, "gpu_quantization_torchao_tutori": [259, 264, 281], "maskedtensor": [259, 281, 284], "maskedtensor_overview": [259, 272, 273, 274, 281], "advanced_sourc": 259, "maskedtensor_adagrad": [259, 271, 281], "vmap_recip": [259, 281, 283], "maskedtensor_spars": [259, 274, 281], "maskedtensor_advanced_semant": [259, 272, 281], "gpu_direct_storag": [259, 263, 281], "llama3": 260, "freq_ci": 260, "context_parallel": 260, "buffer_seq_dim": 260, "miscalcul": 260, "set_rotate_method": 260, "sdpbackend": 260, "sdpa_exampl": 260, "nhead": 260, "qkv_len": 260, "flash_attent": 260, "cudnn_attent": 260, "qkv": 260, "cp_sdpa_exampl": 260, "_attent": 260, "context_parallel_unshard": 260, "context_parallel_sdpa_exampl": 260, "mesh_shap": 260, "cp_qkv": 260, "cp_out": 260, "junji": 262, "impedi": 262, "starvat": 262, "deadlock": 262, "indefinit": 262, "diagnost": 262, "flight_record": 262, "torch_nccl_trace_buffer_s": 262, "torch_nccl_dump_on_timeout": 262, "torch_fr_dump_temp_fil": 262, "nccl_trace_rank_": 262, "torch_nccl_trace_cpp_stack": 262, "torch_symbolize_mod": 262, "torch_nccl_enable_tim": 262, "dladdr": 262, "addr2lin": 262, "debuginfowrit": 262, "registerwrit": 262, "_dump_nccl_trac": 262, "includecollect": 262, "includestacktrac": 262, "onlyact": 262, "pg_config": 262, "default_pg": 262, "pg_statu": 262, "last_enqueued_collect": 262, "last_started_collect": 262, "last_completed_collect": 262, "test_short_pickl": 262, "test_c10d_nccl": 262, "3647": 262, "spawn_main": 262, "116": 262, "record_id": 262, "pg_id": 262, "collective_seq_id": 262, "p2p_seq_id": 262, "op_id": 262, "profiling_nam": 262, "time_created_n": 262, "1724779239936775119": 262, "input_s": 262, "input_dtyp": 262, "time_discovered_started_n": 262, "time_discovered_completed_n": 262, "1724779239975811724": 262, "retir": 262, "timeout_m": 262, "600000": 262, "is_p2p": 262, "fr_trace": 262, "use_distribut": 262, "torchfrtrac": 262, "culprit": 262, "recod": 262, "torch_nccl_debug_info_temp_fil": 262, "trace_": 262, "trace_0": 262, "trace_1": 262, "bounc": 263, "gd": 263, "cufil": 263, "4kb": 263, "storage_align": 263, "serialization_config": 263, "gdsfile": 263, "skip_data": 263, "faketensormod": 263, "gds_register_buff": 263, "cufilebufregist": 263, "save_storag": 263, "cufilewrit": 263, "fake_tensor": 263, "fake_sd": 263, "untyped_storag": 263, "_checkpoint_offset": 263, "o_rdwr": 263, "sd_load": 263, "load_storag": 263, "cufileread": 263, "hdcharl": 264, "pg509": 264, "330": 264, "myenv": 264, "facebookresearch": 264, "vit_h": 264, "fbaipublicfil": 264, "segment_anyth": 264, "sam_vit_h_4b8939": 264, "sam_checkpoint_base_path": 264, "image_encod": 264, "instant": 264, "protect": 264, "43m": 264, "17gb": 264, "7x": 264, "16m": 264, "95m": 264, "24gb": 264, "int4": 264, "int8dynamicactivationint8weightconfig": 264, "int8weightonlyconfig": 264, "int4weightonlyconfig": 264, "apply_dynamic_qu": 264, "apply_weight_only_int8_qu": 264, "04m": 264, "58gb": 264, "dequant": 264, "force_fuse_int_mm_with_mul": 264, "78m": 264, "37gb": 264, "unquant": 264, "epilogu": [264, 275], "enlarg": 264, "39gb": 264, "appl": 264, "677": 264, "28m": 264, "729": 264, "65m": 264, "chunyuan": [265, 275], "cpp_wrapper": 265, "opt_fn": 265, "cpp_fused_add_lift_fresh_0": 265, "constant0": 265, "inductor_entry_cpp": 265, "19l": 265, "cppwrappercodecach": 265, "cpp_wrapper_src": 265, "c2buojsvlqbywxe3itb43hldieh4jqulk72iswa2awalwev7hjn2": 265, "_wrap_func": 265, "args_tensor": 265, "constants_tensor": 265, "lift_fresh": 265, "get_cuda_stream": 265, "triton_poi_fused_add_lift_fresh_0": 265, "cudaguard": 265, "device_guard": 265, "tensoropt": 265, "loadkernel": 265, "torchinductor_us": 265, "cmm6xjgijjffxjku4akv55eyzibirvw6bti6uqmfnruujm5cvvmw": 265, "triton_poi_fused_add_lift_fresh_0_0d1d2d3": 265, "cudeviceptr": 265, "var_0": 265, "reinterpret_cast": 265, "var_1": 265, "var_2": 265, "var_3": 265, "kernel_args_var_0": 265, "cudastream_t": 265, "getcurrentcudastream": 265, "launchkernel": 265, "czbpeilh4qqmbyejdgsbpdfuk2ss5jigl2qjb7xs4gearrjvuwem": 265, "zhaoqiong": 266, "zheng": 266, "xu": 266, "han": 266, "msvc": 266, "desktop": 266, "checkmark": 266, "cmd": 266, "vc": 266, "vcvars64": 266, "opt_foo1": 266, "9074e": 266, "3994e": 266, "3894e": 266, "2630e": 266, "3060e": 266, "1833e": 266, "4016e": 266, "1905e": 266, "0637e": 266, "3648e": 266, "3728e": 266, "2863e": 266, "6888e": 266, "5442e": 266, "6790e": 266, "2025e": 266, "2647e": 266, "2684e": 266, "2483e": 266, "2845e": 266, "7747e": 266, "2028e": 266, "1431e": 266, "7196e": 266, "5304e": 266, "1945e": 266, "6654e": 266, "7376e": 266, "3644e": 266, "3600e": 266, "0157e": 266, "7200e": 266, "0146e": 266, "8175e": 266, "4057e": 266, "8119e": 266, "2853e": 266, "2773e": 266, "5082e": 266, "4615e": 266, "4140e": 266, "2130e": 266, "0762e": 266, "3914e": 266, "1122e": 266, "6895e": 266, "8852e": 266, "3310e": 266, "4101e": 266, "8318e": 266, "2355e": 266, "9290e": 266, "3707e": 266, "3754e": 266, "3768e": 266, "8970e": 266, "1171e": 266, "9944e": 266, "2553e": 266, "3394e": 266, "3428e": 266, "8400e": 266, "1756e": 266, "0654e": 266, "7973e": 266, "4019e": 266, "1886e": 266, "9194e": 266, "3632e": 266, "1811e": 266, "1615e": 266, "6622e": 266, "2089e": 266, "2011e": 266, "0659e": 266, "0892e": 266, "1932e": 266, "3888e": 266, "3898e": 266, "3218e": 266, "4139e": 266, "4000e": 266, "1192e": 266, "0175e": 266, "6432e": 266, "0498e": 266, "4115e": 266, "3212e": 266, "0964e": 266, "0127e": 266, "7244e": 266, "2799e": 266, "3595e": 266, "0907e": 266, "7191e": 266, "4062e": 266, "3672e": 266, "8502e": 266, "5216e": 266, "6046e": 266, "icx": 266, "win64": 266, "clang": 266, "inductor_window": 267, "mobile_interpret": 270, "1369": 271, "weed": 271, "faithfulli": 271, "state_sum": 271, "addcmul_": 271, "addcdiv_": 271, "clr": 271, "_make_spars": 271, "grad_indic": 271, "sparse_coo_tensor": [271, 274], "_indic": 271, "grad_valu": 271, "_valu": 271, "sparse_mask": [271, 274], "std_valu": 271, "sqrt_": 271, "state_sum2": 271, "masked_grad": 271, "get_data": [271, 273], "std2": 271, "masked_tensor": [271, 273, 274], "to_spars": [271, 274], "param2": 271, "dodg": 271, "make_spars": 271, "brittl": 271, "argu": 271, "densif": 271, "csc": [271, 274], "bsr": [271, 274], "bsc": 271, "inconveni": 271, "conflat": 271, "disentangl": 271, "purposefulli": 271, "citizen": [271, 273], "relianc": 271, "unreli": [271, 273], "maskedarrai": [271, 284], "Their": [272, 274], "unspecifi": [272, 273, 274, 284], "intersect": 272, "logical_or": 272, "to_tensor": [272, 273], "mt0": 272, "get_mask": [272, 273], "mt1": 272, "rfc": [272, 275, 279], "revisit": 272, "ma": 272, "masked_arrai": 272, "mask0": 272, "mask1": 272, "necessit": 272, "as_masked_tensor": 273, "as_tensor": 273, "afterthought": 273, "born": 273, "recur": 273, "inabl": 273, "manifest": 273, "10729": 273, "troubl": 273, "52248": 273, "frustrat": 273, "4132": 273, "67180": 273, "longstand": 273, "unsaf": 273, "61474": 273, "nanmax": 273, "nanmin": 273, "lend": 273, "substructur": 274, "sparse_coo": 274, "sparse_csr": 274, "ndim": 274, "nse": 274, "int64": 274, "sparse_tensor_data": 274, "sparse_tensor_mask": 274, "dense_masked_tensor": 274, "to_sparse_coo": 274, "to_sparse_csr": 274, "nuanc": 274, "crow_indic": 274, "col_indic": 274, "nnz": 274, "to_dens": 274, "is_spars": 274, "is_sparse_coo": 274, "is_sparse_csr": 274, "mt": 274, "mt2": 274, "surfac": 274, "synergi": 274, "invest": 274, "lesli": 275, "fang": 275, "torchinductor_max_autotune_gemm_backend": 275, "torchinductor_freez": 275, "log_autotuning_result": 275, "amp_en": 275, "outperform": 275, "linear_unari": 275, "64x16": 275, "32x16": 275, "cpp_packed_gemm_0": 275, "2142": 275, "_linear_pointwis": 275, "2441": 275, "cpp_fused__to_copy_relu_1": 275, "kernel_micro_gemm_amx_kernel_32_2": 275, "amxstat": 275, "amx_stat": 275, "__restrict__": 275, "lda": 275, "ldb": 275, "ldc": 275, "uint8_t": 275, "tilecfg_row": 275, "kernel_micro_gemm": 275, "64l": 275, "tid": 275, "omp_get_thread_num": 275, "mc_block_id": 275, "num_mc_blocks_per_thread": 275, "n_block_start": 275, "n_block_end": 275, "nc_block": 275, "kc": 275, "k_block_start": 275, "k_block_end": 275, "kc_block": 275, "nci": 275, "nc_block_end": 275, "m_end": 275, "m_start": 275, "16l": 275, "div_floor_integ": 275, "n_end": 275, "n_start": 275, "loadu": 275, "local_acc_buf": 275, "nr": 275, "32l": 275, "invalu": 276, "nt": 276, "poss": 276, "irregularli": 276, "legal": 276, "semnat": 276, "law": 276, "daniil": 278, "lyakhov": 278, "aamir": 278, "nazir": 278, "suslov": 278, "yamini": 278, "nimmagadda": 278, "kozlov": 278, "openvinoquant": 278, "quantize_pt2": 278, "float_model": 278, "prepare_pt2": 278, "convert_pt2": 278, "traced_b": 278, "disable_patch": 278, "asymmetr": 278, "elu": 278, "prelu": 278, "quantizationpreset": 278, "model_typ": 278, "modeltyp": 278, "ignored_scop": 278, "layer_1": 278, "layer_2": 278, "layer_3": 278, "ignoredscop": 278, "regex": 278, "layer_": 278, "subgraph": 278, "target_devic": 278, "cpu_spr": 278, "targetdevic": 278, "fold": 278, "quantized_model": 278, "fold_quant": 278, "optimized_model": 278, "smoothquant": 278, "biascorrect": 278, "calibration_load": 278, "transform_fn": 278, "data_item": 278, "calibration_dataset": 278, "smooth_quant": 278, "fast_bias_correct": 278, "yuanhao": 279, "ji": 279, "effortless": 279, "huawei": 279, "torch_device_backend_autoload": 279, "torch_foo": 279, "_autoload": 279, "entry_point": 279, "habana_framework": 279, "__autoload": 279, "device_backend": 279, "is_load": 279, "entrypoint": 279, "_force_cutlass": 280, "2560": 280, "10240": 280, "dense_output": 280, "dense_t": 280, "1e3": 280, "sparse_output": 280, "sparse_t": 280, "80gb": 280, "870m": 280, "630m": 280, "382x": 280, "weightnormsparsifi": 280, "preprocess_validation_funct": 280, "only_second": 280, "return_overflowing_token": 280, "return_offsets_map": 280, "sample_map": 280, "overflow_to_sample_map": 280, "example_id": 280, "sample_idx": 280, "sequence_id": 280, "offset_map": 280, "preprocess_train_funct": 280, "start_posit": 280, "end_posit": 280, "start_char": 280, "answer_start": 280, "end_char": 280, "context_start": 280, "context_end": 280, "compute_metr": 280, "start_logit": 280, "end_logit": 280, "n_best": 280, "max_answer_length": 280, "example_to_featur": 280, "defaultdict": 280, "predicted_answ": 280, "feature_index": 280, "start_index": 280, "argsort": 280, "end_index": 280, "logit_scor": 280, "best_answ": 280, "prediction_text": 280, "theoretical_answ": 280, "measure_execution_tim": 280, "dataset_for_model": 280, "remove_column": 280, "set_format": 280, "batch_size_to_time_sec": 280, "column_nam": 280, "p50": 280, "automodelforquestionansw": 280, "squad_dataset": 280, "tokenized_squad_dataset": 280, "data_col": 280, "datacollatorwithpad": 280, "hyperparam": 280, "training_arg": 280, "trainingargu": 280, "num_train_epoch": 280, "lr_scheduler_typ": 280, "per_device_train_batch_s": 280, "per_device_eval_batch_s": 280, "eval_dataset": 280, "fp16_baselin": 280, "fp16_time": 280, "cuda_fp16": 280, "exact_match": 280, "53358561967833": 280, "9280493093186": 280, "927572380751371": 280, "607915310189128": 280, "18846387788653": 280, "91255673766136": 280, "sparsity_level": 280, "elemen": 280, "sparse_block_shap": 280, "zeros_per_block": 280, "sparse_config": 280, "tensor_fqn": 280, "named_modul": 280, "paramter": 280, "bertoutput": 280, "fakespars": 280, "elementwise_affin": 280, "59602649006622": 280, "51610004515979": 280, "edgeitem": 280, "0237": 280, "0130": 280, "0462": 280, "0272": 280, "0436": 280, "0492": 280, "0844": 280, "0340": 280, "0302": 280, "0350": 280, "0303": 280, "0175": 280, "0529": 280, "0327": 280, "0213": 280, "0735": 280, "0258": 280, "0239": 280, "0380": 280, "0562": 280, "0432": 280, "0598": 280, "0262": 280, "0227": 280, "0244": 280, "0921": 280, "0784": 280, "0761": 280, "0225": 280, "0395": 280, "0684": 280, "0344": 280, "metrics_spars": 280, "sparse_perf": 280, "43897824030275": 280, "48718950090766": 280, "621004460379481": 280, "368514601141214": 280, "702805917710066": 280, "19364519417286": 280, "87x": 280, "016": 281, "autovector": [283, 284], "42368": 283, "unsuccessfulli": 283, "rummag": 283, "shenanigin": 283, "8304": 283, "23475": 283, "performantli": 283, "7786": 283, "batch_of_sampl": 283, "grad_sampl": 283, "pypi": 284, "optimizi": 284, "coo": 284, "csr": 284, "flight": 284, "flightrecord": 284, "autoload": 284}, "objects": {}, "objtypes": {}, "objnames": {}, "titleterms": {"onnx": [0, 111, 112, 113, 114, 115], "live": 0, "tutori": [0, 36, 39, 51, 52, 54, 56, 59, 89, 96, 102, 122, 125, 135, 137, 168, 174, 176, 177, 184, 192, 193, 196, 197, 212, 213, 252, 265], "torchrl": [1, 16, 176], "object": [1, 104, 142, 196], "code": [1, 2, 9, 16, 36, 37, 56, 96, 219, 265, 271], "ddpg": 1, "loss": [1, 14, 37, 45, 48, 51, 54, 97, 101, 102, 103, 140, 144, 153, 176, 222, 241], "overview": [1, 20, 62, 111, 115, 122, 145, 153, 158, 181, 194, 204, 213, 238, 262, 273], "prerequisit": [1, 37, 102, 111, 115, 175, 206, 210, 228, 242, 243, 247, 248, 250, 251, 252, 253, 262, 265, 275, 278], "import": [1, 14, 46, 57, 90, 189, 225, 228, 239, 240, 241], "setup": [1, 20, 22, 90, 110, 128, 145, 152, 153, 164, 172, 175, 186, 187, 198, 202, 203, 210, 225, 228, 239, 240, 241, 242, 243, 254, 260, 280], "lossmodul": 1, "The": [1, 6, 9, 90, 92, 101, 141, 172, 173, 182, 197, 219], "__init__": [1, 34], "method": [1, 8, 17, 152, 164, 196, 235, 274], "valu": [1, 153, 168, 176, 193], "estim": [1, 160], "actor": 1, "put": [1, 160, 175, 196], "thing": [1, 16], "togeth": [1, 16, 140, 160, 167, 175, 196, 222], "forward": [1, 6, 117, 138, 145, 156, 159, 196, 197], "call": [1, 191], "environ": [1, 16, 55, 139, 153, 160, 176, 189, 264, 266], "transform": [1, 10, 16, 42, 43, 53, 97, 126, 127, 137, 140, 159, 169, 171, 172, 176, 181, 184, 197], "parallel": [1, 10, 46, 56, 58, 62, 131, 136, 137, 138, 140, 150, 151, 163, 171, 172, 207, 238, 260], "execut": [1, 16, 22, 112, 172, 178, 186, 228, 238], "normal": [1, 45, 176, 241], "observ": 1, "stat": 1, "build": [1, 3, 4, 8, 12, 33, 97, 104, 157, 173, 190, 197, 241, 282], "model": [1, 6, 10, 14, 20, 22, 33, 37, 38, 39, 46, 51, 57, 62, 77, 78, 87, 93, 95, 97, 99, 101, 102, 107, 109, 111, 112, 119, 121, 125, 126, 137, 138, 140, 141, 148, 150, 153, 154, 157, 160, 161, 163, 164, 171, 172, 174, 175, 182, 184, 186, 187, 189, 196, 202, 203, 210, 217, 218, 219, 221, 225, 228, 232, 233, 238, 239, 240, 242, 252, 253, 278], "explor": [1, 22], "data": [1, 6, 10, 26, 34, 38, 45, 46, 51, 52, 54, 56, 57, 58, 90, 97, 100, 110, 125, 136, 137, 138, 140, 143, 144, 150, 176, 182, 184, 186, 187, 189, 193, 194, 214, 225, 238, 239, 240, 241, 262, 273], "collector": [1, 153, 176], "evalu": [1, 51, 125, 141, 142, 143, 182, 222], "your": [1, 12, 16, 34, 62, 95, 99, 110, 117, 166, 196, 207, 225, 264], "record": [1, 186, 262], "replai": [1, 153, 176, 177], "buffer": [1, 153, 176, 238], "storag": [1, 253, 263], "batch": [1, 11, 16, 146, 159, 178, 190, 211, 238, 253], "size": [1, 253], "modul": [1, 6, 17, 69, 87, 97, 110, 117, 118, 153, 156, 168, 174, 194, 227, 235, 253], "construct": [1, 22, 57, 273, 274], "target": [1, 160, 238], "network": [1, 6, 33, 45, 48, 54, 90, 104, 107, 143, 144, 153, 160, 176, 177, 182, 184, 197, 222, 225, 239, 240, 241, 242], "updat": [1, 48, 160, 178], "optim": [1, 37, 38, 45, 54, 71, 101, 104, 110, 118, 138, 142, 167, 180, 194, 202, 203, 211, 238, 240, 241, 244, 256, 257], "time": [1, 21, 40, 49, 66, 72, 76, 84, 88, 98, 108, 116, 117, 120, 175, 183, 228, 234, 237, 242, 243, 245, 247, 248, 259, 281], "train": [1, 3, 6, 10, 13, 16, 18, 25, 33, 34, 45, 51, 54, 55, 57, 90, 92, 95, 99, 101, 104, 119, 125, 137, 140, 141, 143, 144, 148, 149, 152, 153, 160, 167, 171, 176, 177, 182, 184, 187, 194, 198, 212, 238, 241, 246, 250, 278], "polici": [1, 16, 137, 153, 176], "experi": [1, 16, 17, 142], "result": [1, 46, 54, 77, 112, 117, 142, 143, 147, 176, 182, 184, 186, 194, 219, 221, 223, 280], "conclus": [1, 2, 3, 4, 6, 8, 16, 17, 18, 20, 51, 84, 102, 111, 112, 115, 122, 128, 139, 140, 145, 153, 157, 158, 160, 161, 167, 170, 172, 176, 181, 191, 193, 194, 197, 198, 200, 203, 204, 205, 206, 207, 210, 211, 227, 235, 238, 242, 243, 247, 248, 249, 250, 251, 252, 253, 254, 256, 260, 262, 263, 264, 265, 266, 271, 272, 273, 274, 275, 276, 278, 279, 280], "next": [1, 45, 54, 77, 175, 176], "step": [1, 122, 167, 172, 173, 175, 176, 186, 197, 223, 225, 228, 239, 240, 241, 242, 243], "autograd": [2, 3, 11, 12, 32, 44, 64, 65, 79, 92, 118, 141, 145, 156, 180], "c": [2, 3, 6, 7, 8, 9, 11, 12, 212, 237, 265], "frontend": [2, 6, 87, 89], "basic": [2, 6, 35, 36, 145, 150, 156, 170, 173, 178, 191, 193, 211, 250], "oper": [2, 3, 4, 8, 9, 11, 12, 18, 41, 50, 92, 106, 115, 170, 200, 238, 273, 274, 276], "comput": [2, 16, 21, 32, 40, 44, 49, 66, 72, 76, 84, 88, 98, 106, 108, 109, 116, 120, 125, 159, 164, 183, 221, 234, 238, 245, 259, 281], "higher": 2, "order": [2, 238], "gradient": [2, 14, 32, 77, 93, 138, 169, 198, 222, 238, 241, 273], "us": [2, 6, 8, 10, 13, 14, 15, 25, 36, 44, 52, 55, 85, 110, 112, 115, 117, 119, 124, 136, 138, 145, 146, 148, 150, 151, 153, 154, 156, 169, 171, 173, 178, 179, 180, 181, 186, 187, 189, 201, 205, 206, 207, 213, 219, 221, 227, 228, 236, 238, 239, 250, 252, 254, 256, 257, 263, 266, 269, 273, 275], "custom": [2, 3, 4, 7, 8, 9, 12, 16, 17, 18, 34, 53, 69, 115, 118, 124, 125, 131, 146, 147, 156, 173, 174, 193, 196, 207], "function": [2, 14, 17, 32, 37, 45, 48, 54, 65, 77, 87, 90, 97, 101, 102, 103, 104, 110, 118, 146, 147, 156, 159, 164, 169, 174, 176, 210, 223, 228, 238, 241, 249], "translat": [2, 121, 127, 182], "from": [2, 8, 9, 44, 52, 110, 112, 119, 143, 144, 148, 165, 182, 189, 194, 196, 227, 239], "python": [2, 3, 4, 8, 9, 18, 87, 173, 252, 254], "cuda": [3, 9, 52, 84, 170, 238], "set": [3, 4, 90, 139, 142, 189, 202, 203, 210, 238, 247, 262, 264, 266], "up": [3, 4, 74, 118, 142, 189, 196, 202, 203, 210, 211, 237, 264, 266], "system": [3, 4], "defin": [3, 4, 6, 8, 11, 33, 45, 48, 51, 65, 102, 111, 118, 142, 172, 176, 189, 196, 223, 225, 237, 239, 240, 241, 242, 250], "op": [3, 4, 11, 193, 249], "ad": [3, 4, 11, 18, 90, 187, 194, 222, 250], "backend": [3, 4, 11, 12, 17, 139, 152, 158, 173, 213, 238, 246, 256, 278], "implement": [3, 4, 8, 11, 37, 54, 77, 103, 115, 146, 168, 173, 178, 179, 181, 210, 271, 273], "an": [3, 12, 16, 45, 107, 109, 115, 119, 141, 153, 176, 194, 203, 227, 256, 262], "regist": [3, 6, 11, 12, 17, 198], "torch": [3, 7, 32, 44, 83, 97, 106, 110, 111, 119, 143, 145, 150, 174, 181, 190, 191, 192, 193, 197, 202, 210, 222, 223, 227, 235, 243, 248, 249, 250, 251, 252, 253, 254, 256, 263, 266, 273, 278, 283], "compil": [3, 7, 129, 145, 158, 181, 190, 191, 197, 202, 203, 210, 242, 243, 247, 248, 249, 250, 251, 252, 254, 266, 275, 278], "support": [3, 7, 11, 12, 18, 90, 99, 115, 181, 250, 274], "hybrid": [3, 87, 89], "registr": 3, "test": [3, 4, 12, 16, 18, 45, 77, 90, 146, 190, 196, 225, 237], "creat": [3, 4, 9, 15, 34, 38, 46, 51, 100, 104, 106, 110, 142, 143, 144, 157, 164, 174, 238], "mutabl": [3, 18], "sycl": 4, "interfac": 4, "initi": [4, 41, 50, 54, 55, 138, 139, 150, 152, 160, 168, 225, 239, 240, 276], "packag": [4, 14, 80], "extens": [4, 12, 15, 131, 134, 173, 200, 203, 212, 235, 246, 279], "pytorch": [6, 8, 9, 12, 14, 17, 25, 44, 47, 52, 56, 59, 62, 64, 65, 67, 69, 70, 71, 75, 83, 91, 94, 95, 96, 97, 99, 100, 101, 104, 105, 106, 107, 109, 112, 115, 117, 118, 135, 152, 161, 170, 175, 186, 189, 194, 197, 200, 201, 209, 211, 212, 213, 214, 216, 219, 220, 225, 226, 228, 229, 236, 238, 239, 240, 241, 246, 261, 269, 278], "motiv": [6, 87, 271], "write": [6, 16, 53, 152, 187, 196, 271], "applic": [6, 152, 173, 201, 235], "neural": [6, 14, 33, 45, 48, 90, 110, 160, 164, 213, 225, 239, 240, 241, 242], "api": [6, 62, 92, 138, 156, 161, 167, 173, 219, 238, 254, 262, 265], "paramet": [6, 15, 33, 37, 38, 46, 97, 119, 174, 176, 178, 179, 223, 238, 239], "submodul": 6, "travers": 6, "hierarchi": [6, 219], "run": [6, 36, 46, 51, 52, 55, 56, 57, 77, 87, 96, 102, 142, 150, 186, 189, 193, 202, 203, 210, 228, 236], "mode": [6, 22, 156, 159, 249, 275], "ownership": 6, "dcgan": [6, 54], "what": [6, 12, 13, 17, 20, 45, 54, 58, 59, 92, 110, 119, 147, 154, 169, 170, 203, 206, 207, 219, 240, 252, 256, 257, 262, 280, 283], "wa": 6, "gan": [6, 54], "agan": 6, "gener": [6, 17, 54, 77, 119, 142, 144, 223, 231, 238], "discrimin": [6, 54, 103], "load": [6, 14, 34, 38, 39, 45, 51, 55, 102, 119, 125, 148, 150, 182, 184, 205, 214, 223, 225, 227, 230, 231, 232, 238, 239, 240, 241, 263], "loop": [6, 16, 37, 101, 153, 176, 177], "move": [6, 100], "gpu": [6, 45, 46, 57, 81, 90, 119, 170, 186, 194, 212, 238, 264, 269], "checkpoint": [6, 57, 119, 137, 150, 160, 204, 205, 227, 231, 238], "recov": 6, "state": [6, 138, 257], "inspect": [6, 145, 168, 174, 187, 222], "imag": [6, 14, 45, 60, 61, 99, 112, 125, 175, 189, 253], "class": [7, 8, 13, 16, 33, 53, 102, 168, 194], "export": [7, 111, 112, 115, 119, 192, 193, 252, 253, 278], "why": [7, 9, 55, 58, 140, 141, 206, 207, 273, 276], "do": [7, 11, 45, 92, 147, 161], "we": [7, 92], "need": [7, 11, 92, 197], "make": [7, 13, 103, 201], "fake": 7, "extend": [8, 12, 115, 174, 197], "bind": 8, "exampl": [8, 15, 18, 77, 81, 87, 92, 93, 104, 107, 109, 118, 119, 141, 197, 212, 213, 246, 251, 256, 262, 265, 275, 279], "project": [8, 197], "With": [8, 186], "cmake": 8, "serial": [8, 17, 174], "deseri": [8, 17], "take": 8, "return": [8, 141], "bound": 8, "author": [9, 112], "integr": [9, 17, 93], "manual": 9, "when": [9, 140, 147, 148, 252, 273], "should": [9, 58, 140], "i": [9, 13, 17, 30, 45, 54, 58, 59, 110, 119, 147, 148, 154, 167, 169, 197, 200, 206, 207, 219, 222, 240, 253, 257, 273, 283], "distribut": [10, 13, 19, 22, 55, 56, 57, 58, 62, 84, 131, 150, 151, 152, 172, 179, 180, 194, 204, 205, 238], "pipelin": [10, 151, 171, 172], "dispatch": [11, 12, 181], "schema": 11, "For": [11, 92, 232], "In": [11, 92, 100, 233], "place": [11, 92, 100], "view": [11, 186], "go": [11, 45, 54, 77, 189, 197], "beyond": 11, "autocast": [11, 222], "tracer": 11, "new": [12, 17, 65, 103, 118, 146], "": [12, 18, 106, 160, 272], "get": [12, 33, 84, 109, 136, 138, 150, 158, 166, 180, 205, 206, 207, 212, 213, 276], "kei": [12, 253], "full": [12, 37, 90], "list": 12, "kernel": [12, 17, 84, 164, 210, 211, 250], "jit": [12, 175], "against": 12, "nativ": [12, 201], "backward": [12, 137, 138, 145, 146, 147, 167], "compat": 12, "known": 12, "issu": 12, "addit": [12, 122, 135, 170, 172, 186, 198, 262], "note": [12, 103, 221], "futur": [12, 17], "work": [12, 13, 17, 38, 136, 137, 138, 140, 161, 205, 279], "stai": 12, "touch": 12, "uneven": 13, "input": [13, 54, 57, 77, 147, 194, 197, 223, 238], "join": 13, "context": [13, 260], "manag": [13, 170], "requir": [13, 20, 112, 141, 174, 219, 253, 257, 280], "distributeddataparallel": [13, 150, 238], "zeroredundancyoptim": [13, 257], "pass": [13, 117, 139, 145, 167, 190, 225], "keyword": 13, "argument": 13, "how": [13, 17, 36, 136, 137, 138, 140, 167, 205, 207, 219, 225, 236, 257, 266, 279], "doe": [13, 20, 141, 280], "joinabl": 13, "joinhook": 13, "toi": 13, "transfer": [14, 125], "introduct": [14, 25, 44, 54, 62, 84, 91, 93, 94, 95, 96, 99, 100, 101, 106, 114, 139, 168, 170, 172, 186, 189, 191, 194, 195, 200, 225, 228, 239, 240, 241, 247, 248, 256, 260, 265, 266, 271, 274, 275, 278], "underli": 14, "principl": [14, 274], "select": [14, 153, 260, 282], "devic": [14, 17, 33, 119, 137, 224, 227, 230, 238], "content": [14, 118, 211], "style": [14, 197], "descent": 14, "numpi": [15, 41, 50, 74, 100, 118, 272], "scipi": 15, "less": 15, "parametr": [15, 168, 174], "pendulum": 16, "effect": 16, "action": [16, 153], "_step": 16, "reset": 16, "simul": 16, "_reset": 16, "metadata": [16, 17], "env": 16, "_spec": 16, "spec": 16, "shape": [16, 39, 100, 193, 229], "reproduc": 16, "seed": [16, 100], "wrap": [16, 18, 110, 137, 196, 237, 250], "envbas": 16, "our": [16, 22, 146, 152, 167, 190, 225, 239, 240, 241], "rollout": 16, "simpl": [16, 46, 92, 112, 157, 182, 222, 228], "facilit": 17, "privateuse1": 17, "via": [17, 262], "guard": [17, 193], "other": [17, 22, 97, 99, 101, 170, 186], "improv": [17, 117, 186, 211, 278], "user": [17, 83, 250], "renam": 17, "name": [17, 143, 144, 193], "properti": 17, "relat": [17, 39, 189, 235], "pil": 18, "crop": 18, "combin": [19, 140, 150], "dataparallel": [19, 46, 58, 90, 119, 150], "rpc": [19, 131, 151, 178, 179, 180, 209, 261], "framework": [19, 179, 180], "beta": [20, 156, 157, 181, 202, 203, 211, 215, 249, 252, 254, 277], "acceler": [20, 100, 110, 166, 197, 263, 280], "bert": [20, 280], "semi": [20, 25, 280], "structur": [20, 280], "2": [20, 45, 46, 87, 112, 139, 164, 172, 173, 186, 187, 196, 223, 225, 228, 237, 239, 240, 241, 278, 280], "4": [20, 45, 87, 112, 173, 175, 186, 187, 223, 225, 228, 237, 239, 240, 241, 278, 280], "sparsiti": [20, 274, 280], "problem": [20, 280], "solv": [20, 280], "intro": [20, 199, 280], "establish": 20, "baselin": 20, "prune": [20, 174, 280], "spars": [20, 271, 274, 280], "infer": [20, 43, 119, 125, 175, 211, 212, 222, 232, 238, 246, 252], "torchrec": [22, 194, 195], "shard": [22, 62, 136, 137, 138, 140, 194, 257], "instal": [22, 84, 93, 112, 175, 194, 213, 236, 266, 278], "embed": [22, 99, 109, 194], "distributedmodelparallel": [22, 194], "multiprocess": 22, "tabl": [22, 118, 128], "wise": 22, "supervis": 25, "learn": [25, 35, 36, 47, 59, 87, 103, 104, 105, 118, 125, 131, 160, 170, 176, 177, 178, 180, 186, 223, 225, 228, 236, 239, 240, 241, 252, 256, 262], "usb": 25, "built": 25, "upon": 25, "freematch": 25, "softmatch": 25, "cifar": [25, 102], "10": [25, 102, 167], "onli": [25, 212, 213], "40": 25, "label": [25, 189], "specif": [25, 189, 238], "imbalanc": 25, "algorithm": [25, 177], "audio": [26, 27, 28, 29, 30, 31], "augment": [26, 28, 84, 107, 238], "dataset": [27, 34, 46, 53, 95, 99, 101, 110, 124, 196, 241], "featur": [28, 29, 93, 107, 125, 137, 186, 189, 194, 212, 213], "extract": [29, 189], "o": 30, "resampl": 31, "automat": [32, 106, 156, 222, 253], "differenti": [32, 44, 106, 156], "tensor": [32, 41, 50, 64, 75, 82, 95, 100, 106, 118, 128, 131, 140, 141, 143, 167, 181, 197, 203, 235, 238, 253, 274, 276], "graph": [32, 44, 99, 106, 112, 145, 191, 193, 238, 253, 278], "disabl": [32, 238], "track": [32, 147, 187], "more": [32, 92, 100, 141, 158, 159, 178, 186, 204, 223, 225, 228, 236, 239, 240, 241], "option": [32, 44, 46, 122, 196, 198, 225, 256, 278], "read": [32, 33, 34, 37, 42, 44, 55, 57, 58, 111, 112, 114, 115, 117, 122, 148, 149, 153, 189, 219, 238, 271, 273, 274], "jacobian": [32, 159, 164], "product": [32, 159, 164, 181], "further": [32, 33, 34, 37, 42, 44, 55, 57, 58, 111, 112, 114, 115, 117, 122, 125, 148, 149, 153, 197, 238, 271, 273, 274], "layer": [33, 93, 97, 140, 146, 197, 238], "nn": [33, 69, 70, 80, 87, 97, 110, 118, 119, 126, 127, 174, 197, 227, 235, 253], "flatten": 33, "linear": [33, 97, 104, 110], "relu": 33, "sequenti": [33, 110], "softmax": [33, 104, 273], "dataload": [34, 53, 95, 101, 110], "iter": [34, 51, 53, 174], "visual": [34, 93, 99, 112, 125, 167, 182, 184, 187, 198, 219, 221], "file": [34, 51, 112, 119, 148, 182, 233, 262], "__len__": 34, "__getitem__": 34, "prepar": [34, 51, 143, 144, 182, 186, 217, 218, 271, 272, 273], "through": [34, 53, 87, 225], "thi": [36, 59, 137, 167, 197, 279], "guid": [36, 138, 170, 238], "hyperparamet": [37, 90, 176, 177], "quickstart": 38, "save": [38, 39, 55, 57, 112, 119, 137, 141, 147, 148, 150, 160, 167, 204, 205, 222, 223, 230, 231, 232, 233, 239, 263], "weight": [39, 48, 54, 67, 118, 213], "attribut": [41, 50, 93, 221], "bridg": [41, 50, 100], "arrai": [41, 50], "totensor": 42, "lambda": 42, "fast": [43, 77, 211], "better": [43, 266, 275], "A": [44, 47, 59, 92, 93, 103, 146, 170, 219, 222, 231, 237, 239], "gentl": 44, "background": [44, 170], "usag": [44, 145, 146, 156, 167, 170, 191, 193, 211, 246, 250], "vector": [44, 154, 159, 164], "calculu": 44, "exclus": 44, "dag": 44, "classifi": [45, 104, 112, 143, 189], "about": [45, 229], "1": [45, 87, 112, 139, 164, 172, 173, 186, 187, 193, 196, 223, 225, 228, 237, 239, 240, 241, 278], "cifar10": 45, "convolut": [45, 97, 146, 153, 190, 238], "3": [45, 46, 87, 112, 139, 172, 173, 186, 187, 223, 225, 228, 237, 239, 240, 241, 278], "5": [45, 112, 186, 187, 223, 228, 237, 241], "multipl": [45, 119, 174, 233], "where": [45, 54, 77, 189, 273], "dummi": 46, "8": [46, 223, 237], "summari": [46, 128, 137, 181, 220], "deep": [47, 59, 103, 104, 105, 130], "60": [47, 59], "minut": [47, 59], "blitz": [47, 59], "backprop": 48, "chatbot": 51, "preprocess": [51, 124, 160, 175], "format": [51, 112, 161, 205, 238, 262], "trim": 51, "seq2seq": [51, 182], "encod": [51, 109, 182], "decod": [51, 182], "procedur": 51, "mask": [51, 197, 273], "singl": [51, 163], "greedi": 51, "my": 51, "text": [51, 123, 124, 188], "googl": 52, "colab": 52, "version": [52, 164], "drive": 52, "enabl": [52, 138, 238, 260, 262, 265], "compos": [53, 159, 250], "afterword": 53, "torchvis": [53, 78, 196], "adversari": [54, 77], "fault": 55, "toler": 55, "torchrun": [55, 150], "grace": 55, "restart": 55, "process": [55, 57, 150, 172, 173, 178], "group": [55, 57, 173], "provid": 55, "variabl": [55, 139, 238], "snapshot": [55, 167], "trainer": 55, "constructor": [55, 238], "resum": [55, 119, 222], "script": [55, 87, 166, 244, 256], "video": [56, 175, 253], "section": 56, "multi": [57, 81, 90, 142], "ddp": [57, 58, 131, 148, 150, 238], "job": [57, 228, 262], "you": [58, 99, 140, 170, 197, 221, 252, 256, 262], "prefer": 58, "over": 58, "dp": 58, "goal": 59, "segment": [60, 61, 196, 253], "deeplabv3": [60, 61], "android": [60, 201, 215, 217, 270, 282], "io": [61, 215, 218, 269, 270, 282], "primit": 62, "commun": [62, 84, 90, 152], "launcher": 62, "appli": [62, 140, 256, 278, 279], "To": 62, "scale": [62, 140, 149, 181], "develop": 62, "control": [67, 111, 118, 181, 193, 238, 251, 256], "flow": [67, 111, 118, 193, 253], "share": [67, 118], "warm": [74, 118], "threat": 77, "sign": 77, "attack": 77, "under": 77, "fgsm": 77, "accuraci": [77, 90, 158, 213], "v": [77, 128, 159, 170, 272], "epsilon": 77, "sampl": [77, 144, 169, 219], "finetun": [78, 125, 196], "former": 83, "holist": [84, 85], "trace": [84, 85, 87, 157, 191, 219, 228, 253, 282], "analysi": [84, 85], "hta": 84, "start": [84, 99, 136, 138, 150, 166, 180, 205, 206, 207, 212, 213, 237, 242, 243, 256, 276], "tempor": 84, "breakdown": 84, "idl": 84, "durat": 84, "overlap": 84, "counter": 84, "memori": [84, 107, 117, 141, 146, 161, 167, 170, 177, 204, 211, 228, 238, 256], "bandwidth": 84, "queue": 84, "length": [84, 238], "launch": [84, 172, 219], "statist": 84, "diff": 85, "syntax": 87, "inform": [87, 158], "part": [87, 107], "pure": 87, "top": 87, "level": [87, 92, 107, 143, 144], "tune": [90, 137, 211, 213, 238], "rai": 90, "loader": 90, "configur": [90, 142, 219, 247], "search": 90, "space": 90, "youtub": [91, 94, 96], "seri": [91, 96], "fundament": 92, "turn": [92, 143], "off": 92, "On": 92, "profil": [92, 117, 157, 158, 186, 209, 219, 228, 261], "advanc": [92, 103, 137, 152, 186, 200, 222, 250, 272], "topic": [92, 152, 222], "detail": 92, "high": [92, 181], "understand": [93, 128], "captum": [93, 221], "first": [93, 111, 168], "occlus": 93, "gradcam": 93, "insight": 93, "common": [97, 145, 253], "type": [97, 100, 194, 222, 253], "recurr": [97, 153], "manipul": [97, 100], "activ": [97, 101, 275], "tensorboard": [99, 186, 187, 236], "befor": [99, 189, 221], "show": 99, "scalar": [99, 236], "resourc": [99, 101, 135, 170, 172], "random": [100, 103], "math": [100, 211], "logic": 100, "brief": 100, "broadcast": 100, "alter": 100, "copi": [100, 170], "chang": [100, 224], "number": 100, "dimens": [100, 211], "per": [101, 169], "epoch": 101, "knowledg": 102, "distil": 102, "util": [102, 174, 177, 197, 200, 223, 235, 238, 249], "cross": [102, 197], "entropi": 102, "cosin": 102, "minim": 102, "intermedi": [102, 147, 238], "regressor": 102, "dynam": [103, 193, 251], "decis": 103, "bi": 103, "lstm": [103, 107, 153], "crf": 103, "versu": 103, "static": [103, 213, 253], "toolkit": 103, "condit": 103, "field": 103, "discuss": 103, "exercis": [103, 107, 109, 122, 143, 144, 182, 198], "tag": [103, 107], "block": [104, 197, 223], "affin": 104, "map": 104, "non": [104, 128, 170, 193, 203, 238], "probabl": 104, "compon": [104, 158], "logist": 104, "regress": 104, "bag": [104, 109], "word": [104, 109], "nlp": [105, 143, 144, 165, 182], "librari": [106, 123, 189, 201, 225, 228, 238, 239, 240, 241, 256], "reshap": 106, "sequenc": [107, 140, 182], "long": [107, 228], "short": [107, 219], "term": 107, "speech": [107, 185, 188, 253], "tagger": 107, "charact": [107, 143, 144], "lexic": 109, "semant": [109, 271, 272], "dens": [109, 181], "n": 109, "gram": 109, "languag": [109, 126, 127], "continu": 109, "realli": 110, "mnist": 110, "net": 110, "scratch": [110, 143, 144, 165, 182], "without": 110, "refactor": [110, 111], "add": [110, 139, 196, 249], "valid": [110, 238], "fit": [110, 167], "get_data": 110, "switch": [110, 238], "cnn": 110, "close": 110, "thought": 110, "attempt": 111, "suggest": [111, 193], "patch": [111, 189], "cond": 111, "depend": [112, 114, 181, 193, 194], "netron": 112, "6": [112, 186, 187, 223, 228, 237], "runtim": [112, 238, 252, 256], "7": [112, 186, 223, 228, 237], "compar": [112, 223], "ones": 112, "overrid": 115, "exist": [115, 161], "perform": [117, 139, 154, 157, 158, 161, 169, 175, 181, 186, 204, 211, 216, 238, 251, 256, 266, 275], "debug": [117, 158, 238, 262], "print": 117, "state_dict": [119, 240], "recommend": [119, 143, 170, 191], "entir": 119, "program": [119, 193], "One": [119, 233], "warmstart": [119, 239], "differ": [119, 145, 196, 239], "across": [119, 230], "cpu": [119, 137, 141, 157, 158, 170, 200, 212, 219, 238, 246, 250, 256, 266, 275], "t5": [121, 137], "base": [121, 209, 261, 282], "summar": 121, "sentiment": 121, "classif": [121, 123, 189, 253], "templat": 122, "torchtext": [123, 124, 126, 127], "vision": [125, 238], "few": 125, "predict": [125, 189], "convnet": 125, "fix": [125, 193], "extractor": 125, "requires_grad": 128, "retain_grad": 128, "leaf": 128, "refer": [128, 198], "dive": 130, "fsdp2": [131, 138], "tp": [131, 140], "devicemesh": [131, 207], "domain": 132, "ecosystem": 133, "welcom": 135, "fulli": [136, 137, 138, 140, 197], "fsdp": [136, 137], "recap": 137, "fine": 137, "hf": 137, "mix": [137, 138, 148, 222, 238], "precis": [137, 138, 148, 222, 238], "intial": 137, "strategi": [137, 142], "prefetch": [137, 138], "stream": 137, "rank0": 137, "clip": [138, 222], "dtensor": 138, "dict": 138, "dcp": [138, 204, 205], "fsdp1": 138, "migrat": 138, "libuv": 139, "tcpstore": 139, "benchmark": [139, 190, 202, 223], "impact": 139, "exit": 139, "rout": 139, "use_libuv": 139, "fals": 139, "0": [139, 193, 273], "init_method": 139, "processgroup": 139, "larg": 140, "layernorm": 140, "rmsnorm": 140, "hook": [141, 167, 198], "typic": 141, "than": 141, "concept": [141, 193], "pack": [141, 197], "unpack": 141, "some": 141, "unconvent": 141, "int": 141, "tupl": 141, "str": 141, "disk": 141, "na": 142, "ax": 142, "torchx": 142, "app": 142, "runner": 142, "searchspac": 142, "metric": [142, 278], "optimizationconfig": 142, "choos": [142, 256], "schedul": [142, 203], "acknowledg": 142, "rnn": [143, 144, 180], "plot": [143, 144, 182], "captur": [145, 157, 167, 175, 278], "larger": 145, "log": [145, 158, 160, 236], "flag": 145, "address": [145, 253], "certain": 145, "limit": [145, 250], "aotautograd": 145, "recompil": [145, 251], "reason": [145, 229], "fuse": [146, 167, 181, 190, 194, 238], "norm": [146, 190, 238], "formula": [146, 250], "batchnorm": 146, "out": [146, 190, 241, 279], "comparison": [146, 150, 169, 191], "doubl": 147, "output": [147, 194], "real": [148, 175], "world": 148, "cloud": 148, "enough": 148, "multinod": 149, "local": 149, "global": [149, 174], "rank": 149, "heteregen": 149, "troubleshoot": [149, 175, 222], "between": [150, 273], "case": [150, 238], "skew": 150, "speed": [150, 211], "point": [152, 235], "collect": [152, 176, 223], "own": 152, "ring": 152, "allreduc": 152, "dqn": [153, 177], "mlp": 153, "q": [153, 177], "ensembl": 154, "vmap": [154, 283], "forc": 155, "align": 155, "wav2vec2": [155, 185], "fx": [157, 191, 278], "symbol": [157, 193], "interpret": [157, 215, 221, 270, 282], "investig": 157, "resnet18": [157, 190], "inductor": [158, 247, 265], "determin": 158, "error": [158, 193, 222, 253], "hessian": 159, "hvp": 159, "vhp": 159, "revers": 159, "jacrev": 159, "jacfwd": 159, "functorch": 159, "mario": 160, "plai": 160, "rl": 160, "agent": 160, "definit": 160, "act": 160, "cach": [160, 168, 247, 248], "recal": 160, "td": 160, "all": [160, 167, 197, 222, 228, 238], "let": 160, "channel": 161, "last": 161, "gain": [161, 251], "convert": [161, 268, 277], "machin": 163, "best": [163, 191, 194], "practic": [163, 170, 186, 191, 194], "tangent": 164, "ntk": 164, "contract": 164, "nvfuser": 166, "dure": [167, 238], "disclaim": 167, "techniqu": 167, "register_post_accumulate_grad_hook": 167, "everyth": [167, 196], "line": 167, "hand": 168, "ar": [168, 197], "citizen": 168, "concaten": 168, "remov": [168, 174], "grad": [169, 238, 273], "effici": [169, 215, 238, 271], "wai": 169, "good": 170, "non_block": 170, "pin_memori": 170, "preambl": 170, "pageabl": 170, "asynchron": [170, 178, 204, 238], "synchron": [170, 238], "true": [170, 227, 238], "cudamemcpyasync": 170, "perspect": 170, "synergi": 170, "direct": 170, "mp": 170, "consider": 170, "partit": 172, "main": 172, "cpp": 173, "subclass": [173, 181, 235], "expos": 173, "re": 174, "raspberri": 175, "pi": 175, "30": 175, "fp": 175, "opencv": 175, "choic": 175, "mobilenetv2": [175, 268, 277], "quantiz": [175, 213, 264, 278], "It": 175, "reinforc": [176, 177, 180], "ppo": 176, "server": [178, 179], "cartpol": 178, "solver": 178, "rref": 180, "dot": 181, "attent": [181, 182, 197], "sdpa": 181, "explicit": [181, 210], "hardwar": 181, "causal": 181, "self": 181, "nestedtensor": 181, "attn_bia": 181, "spatial": 184, "depict": 184, "stn": 184, "recognit": [185, 253], "event": 186, "analyz": [186, 228, 262], "help": 186, "amd": 186, "projector": 187, "assess": 187, "tacotron2": 188, "whole": 189, "slide": 189, "tiatoolbox": 189, "clean": 189, "download": 189, "patchpredictor": 189, "pathologi": 189, "here": 189, "fuser": 190, "pattern": 190, "match": [190, 238], "fusion": [190, 210], "nest": [191, 197, 276], "demonstr": [191, 253], "speedup": [191, 222], "torchscript": 191, "torchdynamo": [191, 248, 253], "nightli": 192, "break": [193, 253], "strict": [193, 253], "constraint": 193, "special": 193, "dim": 193, "violat": 193, "_check": 193, "ir": 193, "decomposit": 193, "exportdb": 193, "recsi": 194, "embeddingbag": 194, "embeddingbagcollect": 194, "planner": 194, "lazyawait": 194, "anatomi": 194, "lookup": 194, "detect": 196, "pennfudan": 196, "pretrain": 196, "modifi": [196, 222], "backbon": 196, "instanc": 196, "replac": 197, "me": 197, "introduc": [197, 270], "abov": 197, "octob": 197, "2024": 197, "multiheadattent": 197, "gpt": 197, "one": 197, "row": 197, "longer": 197, "caus": 197, "nan": [197, 222, 273], "swiglu": 197, "feed": 197, "leverag": 200, "intel": [200, 212, 213, 219, 238, 246, 256, 266], "matrix": 200, "amx": 200, "guidelin": 200, "workload": [200, 209, 219, 238, 261], "can": 200, "confirm": 200, "being": 200, "prebuilt": 201, "see": [202, 250, 276], "also": [202, 250, 276], "lr": 203, "happen": 203, "even": 204, "pin": 204, "commdebugmod": 206, "hsdp": 207, "solut": [207, 253], "horizont": 210, "foreach_map": 210, "helper": [210, 274], "aw": 211, "graviton": 211, "processor": 211, "bfloat16": [211, 212], "openbla": 211, "smaller": 211, "alloc": [211, 238, 256], "overhead": 211, "linux": 211, "transpar": 211, "huge": 211, "page": 211, "thp": 211, "float32": 212, "float16": 212, "eas": 213, "compressor": 213, "fp8": 213, "pt2e": 213, "driven": 213, "mobil": [215, 216, 220, 244, 282], "recip": [216, 217, 218, 220, 226, 244, 258], "instrument": 219, "technologi": 219, "itt": 219, "vtune": 219, "xpu": [219, 266], "showcas": 219, "begin": 221, "final": 221, "default": [222, 224], "gradscal": 222, "e": 222, "g": 222, "amp": [222, 238], "minor": 222, "inf": 222, "mismatch": 222, "mai": 222, "manifest": 222, "cudnn_status_bad_param": 222, "syntaxerror": 223, "timeit": 223, "timer": [223, 237], "autorang": 223, "fuzz": 223, "instruct": [223, 237], "count": [223, 237], "callgrind": [223, 237], "necessari": [225, 228, 239, 240, 241], "specifi": 225, "tip": 227, "mmap": 227, "meta": 227, "load_state_dict": [227, 235], "assign": 227, "instanti": 228, "resnet": 228, "consumpt": 228, "examin": 228, "stack": 228, "And": [231, 232], "swap_tensor": 235, "quick": [237, 256], "wall": 237, "blocked_autorang": 237, "snippet": 237, "collect_callgrind": 237, "delv": 237, "deeper": 237, "b": [237, 239], "footnot": 237, "calcul": 238, "bia": 238, "directli": 238, "follow": 238, "none": 238, "instead": 238, "zero_grad": 238, "channels_last": 238, "uniform": 238, "access": [238, 240, 256, 273], "numa": [238, 256], "openmp": [238, 256], "libiomp": 238, "core": [238, 268], "cudnn": 238, "auto": 238, "tuner": 238, "avoid": 238, "unnecessari": 238, "prealloc": 238, "skip": 238, "reduc": [238, 242, 243], "accumul": 238, "find_unused_paramet": 238, "balanc": 238, "zero": 241, "while": 241, "aot": 242, "cold": [242, 243], "region": [242, 243], "ahead": 242, "_regions_": 242, "measur": [242, 251], "fp32": 246, "bf16": 246, "torchinductor_fx_graph_cach": 247, "torchinductor_autograd_cach": 247, "torchinductor_cache_dir": 247, "torchinductor_fx_graph_remote_cach": 247, "torchinductor_autograd_remote_cach": 247, "torchinductor_autotune_remote_cach": 247, "torchinductor_force_disable_cach": 247, "offer": 248, "end": [248, 262], "mega": 248, "modular": 248, "torchinductor": 248, "triton": [248, 250], "remot": 248, "rewrit": 249, "mul": 249, "triton_op": 250, "fallback": 250, "flopcount": 250, "set_stanc": 251, "descript": 251, "prevent": 251, "crash": 251, "sooner": 251, "aotinductor": 252, "challeng": 253, "them": 253, "No": 253, "caption": 253, "cannot": 253, "mutat": 253, "frozen": 253, "promptabl": 253, "torch_log": 254, "xeon": 256, "run_cpu": 256, "Will": 256, "command": 256, "explan": 256, "rotat": 260, "approach": 260, "flight": 262, "stuck": 262, "retriev": 262, "dump": 262, "prototyp": [263, 264, 268, 269, 270, 280, 282], "gpudirect": 263, "torchao": 264, "wrapper": 265, "window": 266, "softwar": 266, "altern": 266, "llvm": 266, "ml": 268, "lite": 270, "workflow": 270, "adagrad": 271, "maskedtensor": [271, 272, 273, 274], "simpler": 271, "origin": 271, "maskedarrai": 272, "reduct": [272, 274], "index": 273, "slice": 273, "distinguish": 273, "anoth": 273, "x": 273, "yield": 273, "nansum": 273, "nanmean": 273, "safe": 273, "miss": 273, "coo": 274, "csr": 274, "unari": 274, "binari": 274, "appendix": 274, "max": 275, "autotun": 275, "nnapi": 277, "openvino": 278, "post": 278, "nncf": 278, "lower": 278, "represent": 278, "autoload": 279, "tree": 279, "mechan": 279, "so": 283, "unstabl": 284}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 60}, "alltitles": {"ONNX Live Tutorial": [[0, "onnx-live-tutorial"]], "TorchRL objectives: Coding a DDPG loss": [[1, "torchrl-objectives-coding-a-ddpg-loss"]], "Overview": [[1, "overview"], [20, "overview"], [111, "overview"], [115, "overview"], [122, "overview"], [145, "overview"], [153, "overview"], [158, "overview"], [181, "overview"], [213, "overview"], [238, "overview"], [262, "overview"]], "Prerequisites": [[1, "prerequisites"], [102, "prerequisites"], [111, "prerequisites"], [115, "prerequisites"], [175, "prerequisites"], [206, "prerequisites"], [210, "prerequisites"], [228, "prerequisites"], [242, "prerequisites"], [243, "prerequisites"], [247, "prerequisites"], [248, "prerequisites"], [250, "prerequisites"], [251, "prerequisites"], [252, "prerequisites"], [253, "prerequisites"], [262, "prerequisites"], [278, "prerequisites"]], "Imports and setup": [[1, "imports-and-setup"]], "TorchRL LossModule": [[1, "torchrl-lossmodule"]], "The __init__ method": [[1, "the-init-method"]], "The value estimator loss method": [[1, "the-value-estimator-loss-method"]], "The actor loss method": [[1, "the-actor-loss-method"]], "The value loss method": [[1, "the-value-loss-method"]], "Putting things together in a forward call": [[1, "putting-things-together-in-a-forward-call"]], "Environment": [[1, "environment"], [153, "environment"], [160, "environment"]], "Transforms": [[1, "transforms"], [42, "transforms"], [53, "transforms"], [176, "transforms"]], "Parallel execution": [[1, "parallel-execution"]], "Normalization of the observations": [[1, "normalization-of-the-observations"]], "Normalization stats": [[1, "normalization-stats"]], "Building the model": [[1, "building-the-model"]], "Exploration": [[1, "exploration"]], "Data collector": [[1, "data-collector"], [176, "data-collector"]], "Evaluator: building your recorder object": [[1, "evaluator-building-your-recorder-object"]], "Replay buffer": [[1, "replay-buffer"], [176, "replay-buffer"]], "Replay buffer storage and batch size": [[1, "replay-buffer-storage-and-batch-size"]], "Loss module construction": [[1, "loss-module-construction"]], "Target network updater": [[1, "target-network-updater"]], "Optimizer": [[1, "optimizer"], [37, "optimizer"], [101, "optimizer"]], "Time to train the policy": [[1, "time-to-train-the-policy"]], "Experiment results": [[1, "experiment-results"]], "Conclusion": [[1, "conclusion"], [2, "conclusion"], [3, "conclusion"], [4, "conclusion"], [6, "conclusion"], [8, "conclusion"], [16, "conclusion"], [17, "conclusion"], [18, "conclusion"], [20, "conclusion"], [51, "conclusion"], [84, "conclusion"], [102, "conclusion"], [111, "conclusion"], [112, "conclusion"], [115, "conclusion"], [122, "conclusion"], [128, "conclusion"], [139, "conclusion"], [140, "conclusion"], [145, "conclusion"], [153, "conclusion"], [157, "conclusion"], [158, "conclusion"], [160, "conclusion"], [161, "conclusion"], [167, "conclusion"], [170, "conclusion"], [172, "conclusion"], [181, "conclusion"], [191, "conclusion"], [193, "conclusion"], [194, "conclusion"], [197, "conclusion"], [198, "conclusion"], [200, "conclusion"], [203, "conclusion"], [204, "conclusion"], [205, "conclusion"], [206, "conclusion"], [207, "conclusion"], [210, "conclusion"], [211, "conclusion"], [227, "conclusion"], [235, "conclusion"], [238, "conclusion"], [242, "conclusion"], [243, "conclusion"], [247, "conclusion"], [248, "conclusion"], [249, "conclusion"], [250, "conclusion"], [251, "conclusion"], [252, "conclusion"], [253, "conclusion"], [254, "conclusion"], [256, "conclusion"], [260, "conclusion"], [262, "conclusion"], [263, "conclusion"], [264, "conclusion"], [265, "conclusion"], [266, "conclusion"], [271, "conclusion"], [272, "conclusion"], [273, "conclusion"], [274, "conclusion"], [275, "conclusion"], [276, "conclusion"], [278, "conclusion"], [279, "conclusion"], [280, "conclusion"]], "Next Steps": [[1, "next-steps"], [175, "next-steps"]], "Autograd in C++ Frontend": [[2, "autograd-in-c-frontend"]], "Basic autograd operations": [[2, "basic-autograd-operations"]], "Computing higher-order gradients in C++": [[2, "computing-higher-order-gradients-in-c"]], "Using custom autograd function in C++": [[2, "using-custom-autograd-function-in-c"]], "Translating autograd code from Python to C++": [[2, "translating-autograd-code-from-python-to-c"]], "Custom C++ and CUDA Operators": [[3, "custom-c-and-cuda-operators"]], "Setting up the Build System": [[3, "setting-up-the-build-system"], [4, "setting-up-the-build-system"]], "Defining the custom op and adding backend implementations": [[3, "defining-the-custom-op-and-adding-backend-implementations"], [4, "defining-the-custom-op-and-adding-backend-implementations"]], "Defining an operator": [[3, "defining-an-operator"]], "Registering backend implementations for an operator": [[3, "registering-backend-implementations-for-an-operator"]], "Adding torch.compile support for an operator": [[3, "adding-torch-compile-support-for-an-operator"]], "Setting up hybrid Python/C++ registration": [[3, "setting-up-hybrid-python-c-registration"]], "Adding training (autograd) support for an operator": [[3, "adding-training-autograd-support-for-an-operator"]], "Testing an operator": [[3, "testing-an-operator"]], "Creating mutable operators": [[3, "creating-mutable-operators"]], "Custom SYCL Operators": [[4, "custom-sycl-operators"]], "Create a Python Interface": [[4, "create-a-python-interface"]], "Initialize Package": [[4, "initialize-package"]], "Testing SYCL extension operator": [[4, "testing-sycl-extension-operator"]], "Using the PyTorch C++ Frontend": [[6, "using-the-pytorch-c-frontend"]], "Motivation": [[6, "motivation"]], "Writing a Basic Application": [[6, "writing-a-basic-application"]], "Defining the Neural Network Models": [[6, "defining-the-neural-network-models"]], "Module API Basics": [[6, "module-api-basics"]], "Defining a Module and Registering Parameters": [[6, "defining-a-module-and-registering-parameters"]], "Registering Submodules and Traversing the Module Hierarchy": [[6, "registering-submodules-and-traversing-the-module-hierarchy"]], "Running the Network in Forward Mode": [[6, "running-the-network-in-forward-mode"]], "Module Ownership": [[6, "module-ownership"]], "Defining the DCGAN Modules": [[6, "defining-the-dcgan-modules"]], "What was a GAN aGAN?": [[6, "what-was-a-gan-agan"]], "The Generator Module": [[6, "the-generator-module"]], "The Discriminator Module": [[6, "the-discriminator-module"]], "Loading Data": [[6, "loading-data"]], "Writing the Training Loop": [[6, "writing-the-training-loop"]], "Moving to the GPU": [[6, "moving-to-the-gpu"]], "Checkpointing and Recovering the Training State": [[6, "checkpointing-and-recovering-the-training-state"]], "Inspecting Generated Images": [[6, "inspecting-generated-images"]], "Supporting Custom C++ Classes in torch.compile/torch.export": [[7, "supporting-custom-c-classes-in-torch-compile-torch-export"]], "Why do we need to make a Fake Class?": [[7, "why-do-we-need-to-make-a-fake-class"]], "Extending PyTorch with Custom C++ Classes": [[8, "extending-pytorch-with-custom-c-classes"]], "Implementing and Binding the Class in C++": [[8, "implementing-and-binding-the-class-in-c"]], "Building the Example as a C++ Project With CMake": [[8, "building-the-example-as-a-c-project-with-cmake"]], "Using the C++ Class from Python": [[8, "using-the-c-class-from-python"]], "Defining Serialization/Deserialization Methods for Custom C++ Classes": [[8, "defining-serialization-deserialization-methods-for-custom-c-classes"]], "Defining Custom Operators that Take or Return Bound C++ Classes": [[8, "defining-custom-operators-that-take-or-return-bound-c-classes"]], "PyTorch Custom Operators": [[9, "pytorch-custom-operators"]], "Authoring a custom operator from Python": [[9, "authoring-a-custom-operator-from-python"]], "Integrating custom C++ and/or CUDA code with PyTorch": [[9, "integrating-custom-c-and-or-cuda-code-with-pytorch"]], "The Custom Operators Manual": [[9, "the-custom-operators-manual"]], "When should I create a Custom Operator?": [[9, "when-should-i-create-a-custom-operator"]], "Why should I create a Custom Operator?": [[9, "why-should-i-create-a-custom-operator"]], "Training Transformer models using Distributed Data Parallel and Pipeline Parallelism": [[10, "training-transformer-models-using-distributed-data-parallel-and-pipeline-parallelism"]], "Registering a Dispatched Operator in C++": [[11, "registering-a-dispatched-operator-in-c"]], "Defining schema and backend implementations": [[11, "defining-schema-and-backend-implementations"]], "For operators that do not need autograd": [[11, "for-operators-that-do-not-need-autograd"]], "In-place or view ops": [[11, "in-place-or-view-ops"]], "Adding autograd support": [[11, "adding-autograd-support"]], "Going beyond autograd": [[11, "going-beyond-autograd"]], "Autocast": [[11, "autocast"]], "Batched": [[11, "batched"]], "Tracer": [[11, "tracer"]], "Extending dispatcher for a new backend in C++": [[12, "extending-dispatcher-for-a-new-backend-in-c"]], "What\u2019s a new backend?": [[12, "what-s-a-new-backend"]], "Get a dispatch key for your backend": [[12, "get-a-dispatch-key-for-your-backend"]], "Get the full list of PyTorch operators": [[12, "get-the-full-list-of-pytorch-operators"]], "Register kernels for the new backend": [[12, "register-kernels-for-the-new-backend"], [17, "register-kernels-for-the-new-backend"]], "Autograd support for the new backend": [[12, "autograd-support-for-the-new-backend"]], "Build an extension": [[12, "build-an-extension"]], "Custom operator support": [[12, "custom-operator-support"]], "JIT support": [[12, "jit-support"]], "Testing your backend against native PyTorch backends": [[12, "testing-your-backend-against-native-pytorch-backends"]], "Backward Compatibility": [[12, "backward-compatibility"]], "Known issues & additional notes": [[12, "known-issues-additional-notes"]], "Future Work": [[12, "future-work"], [17, "future-work"]], "Stay in touch": [[12, "stay-in-touch"]], "Distributed Training with Uneven Inputs Using the Join Context Manager": [[13, "distributed-training-with-uneven-inputs-using-the-join-context-manager"]], "Requirements": [[13, "requirements"], [20, "requirements"], [174, "requirements"], [219, "requirements"], [257, "requirements"], [280, "requirements"]], "What is Join?": [[13, "what-is-join"]], "Using Join with DistributedDataParallel": [[13, "using-join-with-distributeddataparallel"]], "Using Join with DistributedDataParallel and ZeroRedundancyOptimizer": [[13, "using-join-with-distributeddataparallel-and-zeroredundancyoptimizer"]], "Passing Keyword Arguments": [[13, "passing-keyword-arguments"]], "How Does Join Work?": [[13, "how-does-join-work"]], "Joinable": [[13, "joinable"]], "JoinHook": [[13, "joinhook"]], "Join": [[13, "join"]], "Making a Toy Class Work with Join": [[13, "making-a-toy-class-work-with-join"]], "Neural Transfer Using PyTorch": [[14, "neural-transfer-using-pytorch"]], "Introduction": [[14, "introduction"], [54, "introduction"], [62, "introduction"], [93, "id1"], [99, "id1"], [101, "id1"], [139, "introduction"], [170, "introduction"], [186, "introduction"], [189, "introduction"], [200, "introduction"], [225, "introduction"], [228, "introduction"], [239, "introduction"], [240, "introduction"], [241, "introduction"], [247, "introduction"], [248, "introduction"], [260, "introduction"], [265, "introduction"], [266, "introduction"], [274, "introduction"], [275, "introduction"], [278, "introduction"]], "Underlying Principle": [[14, "underlying-principle"]], "Importing Packages and Selecting a Device": [[14, "importing-packages-and-selecting-a-device"]], "Loading the Images": [[14, "loading-the-images"]], "Loss Functions": [[14, "loss-functions"], [97, "loss-functions"]], "Content Loss": [[14, "content-loss"]], "Style Loss": [[14, "style-loss"]], "Importing the Model": [[14, "importing-the-model"]], "Gradient Descent": [[14, "gradient-descent"]], "Creating Extensions Using NumPy and SciPy": [[15, "creating-extensions-using-numpy-and-scipy"]], "Parameter-less example": [[15, "parameter-less-example"]], "Parametrized example": [[15, "parametrized-example"]], "Pendulum: Writing your environment and transforms with TorchRL": [[16, "pendulum-writing-your-environment-and-transforms-with-torchrl"]], "Coding the effect of an action: _step()": [[16, "coding-the-effect-of-an-action-step"]], "Resetting the simulator: _reset()": [[16, "resetting-the-simulator-reset"]], "Environment metadata: env.*_spec": [[16, "environment-metadata-env-spec"]], "Specs shape": [[16, "specs-shape"]], "Reproducible experiments: seeding": [[16, "reproducible-experiments-seeding"]], "Wrapping things together: the EnvBase class": [[16, "wrapping-things-together-the-envbase-class"]], "Testing our environment": [[16, "testing-our-environment"]], "Transforming an environment": [[16, "transforming-an-environment"]], "Writing custom transforms": [[16, "writing-custom-transforms"]], "Executing a rollout": [[16, "executing-a-rollout"]], "Batching computations": [[16, "batching-computations"]], "Training a simple policy": [[16, "training-a-simple-policy"]], "Training loop": [[16, "training-loop"], [153, "training-loop"], [176, "training-loop"], [177, "training-loop"]], "Facilitating New Backend Integration by PrivateUse1": [[17, "facilitating-new-backend-integration-by-privateuse1"]], "What is PrivateUse1?": [[17, "what-is-privateuse1"]], "How to integrate new backend via PrivateUse1": [[17, "how-to-integrate-new-backend-via-privateuse1"]], "Register generator for the new backend": [[17, "register-generator-for-the-new-backend"]], "Register device guard for the new backend": [[17, "register-device-guard-for-the-new-backend"]], "Register serialization and deserialization functions for new backend metadata": [[17, "register-serialization-and-deserialization-functions-for-new-backend-metadata"]], "Other Modules": [[17, "other-modules"]], "How to Improve User Experience with Privateuse1": [[17, "how-to-improve-user-experience-with-privateuse1"]], "Register new backend module to Pytorch": [[17, "register-new-backend-module-to-pytorch"]], "Rename PrivateUse1 to a custom name for the new backend": [[17, "rename-privateuse1-to-a-custom-name-for-the-new-backend"]], "Generate methods and properties related to the new backend": [[17, "generate-methods-and-properties-related-to-the-new-backend"]], "Custom Python Operators": [[18, "custom-python-operators"]], "Example: Wrapping PIL\u2019s crop into a custom operator": [[18, "example-wrapping-pil-s-crop-into-a-custom-operator"]], "Adding training support for crop": [[18, "adding-training-support-for-crop"]], "Testing Python Custom operators": [[18, "testing-python-custom-operators"]], "Mutable Python Custom operators": [[18, "mutable-python-custom-operators"]], "Combining Distributed DataParallel with Distributed RPC Framework": [[19, "combining-distributed-dataparallel-with-distributed-rpc-framework"]], "(beta) Accelerating BERT with semi-structured (2:4) sparsity": [[20, "beta-accelerating-bert-with-semi-structured-2-4-sparsity"]], "What problem does semi-structured sparsity solve?": [[20, "what-problem-does-semi-structured-sparsity-solve"], [280, "what-problem-does-semi-structured-sparsity-solve"]], "Intro & Setup": [[20, "intro-setup"], [280, "intro-setup"]], "Establishing a baseline": [[20, "establishing-a-baseline"]], "Pruning BERT to be 2:4 sparse": [[20, "pruning-bert-to-be-2-4-sparse"], [280, "pruning-bert-to-be-2-4-sparse"]], "Accelerating 2:4 sparse models for inference": [[20, "accelerating-2-4-sparse-models-for-inference"]], "Computation times": [[21, "computation-times"], [40, "computation-times"], [49, "computation-times"], [66, "computation-times"], [72, "computation-times"], [76, "computation-times"], [88, "computation-times"], [98, "computation-times"], [108, "computation-times"], [116, "computation-times"], [120, "computation-times"], [183, "computation-times"], [234, "computation-times"], [245, "computation-times"], [259, "computation-times"], [281, "computation-times"]], "Exploring TorchRec sharding": [[22, "exploring-torchrec-sharding"]], "Installation": [[22, "installation"], [93, "installation"], [213, "installation"], [236, "installation"]], "Distributed Setup": [[22, "distributed-setup"]], "Constructing our embedding model": [[22, "constructing-our-embedding-model"]], "DistributedModelParallel in multiprocessing": [[22, "distributedmodelparallel-in-multiprocessing"]], "Multiprocessing Execution": [[22, "multiprocessing-execution"]], "Table Wise Sharding": [[22, "table-wise-sharding"]], "Explore other sharding modes": [[22, "explore-other-sharding-modes"]], "Semi-Supervised Learning using USB built upon PyTorch": [[25, "semi-supervised-learning-using-usb-built-upon-pytorch"]], "Introduction to FreeMatch and SoftMatch in Semi-Supervised Learning": [[25, "introduction-to-freematch-and-softmatch-in-semi-supervised-learning"]], "Use USB to Train FreeMatch/SoftMatch on CIFAR-10 with only 40 labels": [[25, "use-usb-to-train-freematch-softmatch-on-cifar-10-with-only-40-labels"]], "Use USB to Train SoftMatch with specific imbalanced algorithm on imbalanced CIFAR-10": [[25, "use-usb-to-train-softmatch-with-specific-imbalanced-algorithm-on-imbalanced-cifar-10"]], "Audio Data Augmentation": [[26, "audio-data-augmentation"]], "Audio Datasets": [[27, "audio-datasets"]], "Audio Feature Augmentation": [[28, "audio-feature-augmentation"]], "Audio Feature Extractions": [[29, "audio-feature-extractions"]], "Audio I/O": [[30, "audio-i-o"]], "Audio Resampling": [[31, "audio-resampling"]], "Automatic Differentiation with torch.autograd": [[32, "automatic-differentiation-with-torch-autograd"]], "Tensors, Functions and Computational graph": [[32, "tensors-functions-and-computational-graph"]], "Computing Gradients": [[32, "computing-gradients"]], "Disabling Gradient Tracking": [[32, "disabling-gradient-tracking"]], "More on Computational Graphs": [[32, "more-on-computational-graphs"]], "Optional Reading: Tensor Gradients and Jacobian Products": [[32, "optional-reading-tensor-gradients-and-jacobian-products"]], "Further Reading": [[32, "further-reading"], [33, "further-reading"], [34, "further-reading"], [37, "further-reading"], [42, "further-reading"], [55, "further-reading"], [57, "further-reading"], [58, "further-reading"], [117, "further-reading"], [122, "further-reading"], [148, "further-reading"], [149, "further-reading"], [153, "further-reading"], [238, "further-reading"], [271, "further-reading"], [273, "further-reading"], [274, "further-reading"]], "Build the Neural Network": [[33, "build-the-neural-network"]], "Get Device for Training": [[33, "get-device-for-training"]], "Define the Class": [[33, "define-the-class"]], "Model Layers": [[33, "model-layers"]], "nn.Flatten": [[33, "nn-flatten"]], "nn.Linear": [[33, "nn-linear"]], "nn.ReLU": [[33, "nn-relu"]], "nn.Sequential": [[33, "nn-sequential"]], "nn.Softmax": [[33, "nn-softmax"]], "Model Parameters": [[33, "model-parameters"]], "Datasets & DataLoaders": [[34, "datasets-dataloaders"]], "Loading a Dataset": [[34, "loading-a-dataset"]], "Iterating and Visualizing the Dataset": [[34, "iterating-and-visualizing-the-dataset"]], "Creating a Custom Dataset for your files": [[34, "creating-a-custom-dataset-for-your-files"]], "__init__": [[34, "init"]], "__len__": [[34, "len"]], "__getitem__": [[34, "getitem"]], "Preparing your data for training with DataLoaders": [[34, "preparing-your-data-for-training-with-dataloaders"]], "Iterate through the DataLoader": [[34, "iterate-through-the-dataloader"]], "Learn the Basics": [[35, "learn-the-basics"], [36, "learn-the-basics"]], "Running the Tutorial Code": [[36, "running-the-tutorial-code"], [96, "running-the-tutorial-code"]], "How to Use this Guide": [[36, "how-to-use-this-guide"]], "Optimizing Model Parameters": [[37, "optimizing-model-parameters"]], "Prerequisite Code": [[37, "prerequisite-code"]], "Hyperparameters": [[37, "hyperparameters"]], "Optimization Loop": [[37, "optimization-loop"]], "Loss Function": [[37, "loss-function"], [48, "loss-function"], [101, "loss-function"]], "Full Implementation": [[37, "full-implementation"]], "Quickstart": [[38, "quickstart"]], "Working with data": [[38, "working-with-data"]], "Creating Models": [[38, "creating-models"]], "Optimizing the Model Parameters": [[38, "optimizing-the-model-parameters"]], "Saving Models": [[38, "saving-models"]], "Loading Models": [[38, "loading-models"]], "Save and Load the Model": [[39, "save-and-load-the-model"]], "Saving and Loading Model Weights": [[39, "saving-and-loading-model-weights"]], "Saving and Loading Models with Shapes": [[39, "saving-and-loading-models-with-shapes"]], "Related Tutorials": [[39, "related-tutorials"]], "Tensors": [[41, "tensors"], [50, "tensors"], [82, "tensors"], [118, "tensors"], [118, "id1"]], "Initializing a Tensor": [[41, "initializing-a-tensor"]], "Attributes of a Tensor": [[41, "attributes-of-a-tensor"]], "Operations on Tensors": [[41, "operations-on-tensors"]], "Bridge with NumPy": [[41, "bridge-with-numpy"], [50, "bridge-with-numpy"]], "Tensor to NumPy array": [[41, "tensor-to-numpy-array"], [50, "tensor-to-numpy-array"]], "NumPy array to Tensor": [[41, "numpy-array-to-tensor"], [50, "numpy-array-to-tensor"]], "ToTensor()": [[42, "totensor"]], "Lambda Transforms": [[42, "lambda-transforms"]], "Fast Transformer Inference with Better Transformer": [[43, "fast-transformer-inference-with-better-transformer"]], "A Gentle Introduction to torch.autograd": [[44, "a-gentle-introduction-to-torch-autograd"]], "Background": [[44, "background"], [170, "background"]], "Usage in PyTorch": [[44, "usage-in-pytorch"]], "Differentiation in Autograd": [[44, "differentiation-in-autograd"]], "Optional Reading - Vector Calculus using autograd": [[44, "optional-reading-vector-calculus-using-autograd"]], "Computational Graph": [[44, "computational-graph"]], "Exclusion from the DAG": [[44, "exclusion-from-the-dag"]], "Further readings:": [[44, "further-readings"]], "Training a Classifier": [[45, "training-a-classifier"]], "What about data?": [[45, "what-about-data"]], "Training an image classifier": [[45, "training-an-image-classifier"]], "1. Load and normalize CIFAR10": [[45, "load-and-normalize-cifar10"]], "2. Define a Convolutional Neural Network": [[45, "define-a-convolutional-neural-network"]], "3. Define a Loss function and optimizer": [[45, "define-a-loss-function-and-optimizer"]], "4. Train the network": [[45, "train-the-network"]], "5. Test the network on the test data": [[45, "test-the-network-on-the-test-data"]], "Training on GPU": [[45, "training-on-gpu"]], "Training on multiple GPUs": [[45, "training-on-multiple-gpus"]], "Where do I go next?": [[45, "where-do-i-go-next"]], "Optional: Data Parallelism": [[46, "optional-data-parallelism"]], "Imports and parameters": [[46, "imports-and-parameters"]], "Dummy DataSet": [[46, "dummy-dataset"]], "Simple Model": [[46, "simple-model"]], "Create Model and DataParallel": [[46, "create-model-and-dataparallel"]], "Run the Model": [[46, "run-the-model"]], "Results": [[46, "results"], [54, "results"], [77, "results"], [176, "results"]], "2 GPUs": [[46, "gpus"]], "3 GPUs": [[46, "id1"]], "8 GPUs": [[46, "id2"]], "Summary": [[46, "summary"], [137, "summary"], [181, "summary"]], "Deep Learning with PyTorch: A 60 Minute Blitz": [[47, "deep-learning-with-pytorch-a-60-minute-blitz"], [59, "deep-learning-with-pytorch-a-60-minute-blitz"]], "Neural Networks": [[48, "neural-networks"]], "Define the network": [[48, "define-the-network"]], "Backprop": [[48, "backprop"]], "Update the weights": [[48, "update-the-weights"]], "Tensor Initialization": [[50, "tensor-initialization"]], "Tensor Attributes": [[50, "tensor-attributes"]], "Tensor Operations": [[50, "tensor-operations"]], "Chatbot Tutorial": [[51, "chatbot-tutorial"]], "Preparations": [[51, "preparations"]], "Load & Preprocess Data": [[51, "load-preprocess-data"]], "Create formatted data file": [[51, "create-formatted-data-file"]], "Load and trim data": [[51, "load-and-trim-data"]], "Prepare Data for Models": [[51, "prepare-data-for-models"]], "Define Models": [[51, "define-models"]], "Seq2Seq Model": [[51, "seq2seq-model"]], "Encoder": [[51, "encoder"]], "Decoder": [[51, "decoder"]], "Define Training Procedure": [[51, "define-training-procedure"]], "Masked loss": [[51, "masked-loss"]], "Single training iteration": [[51, "single-training-iteration"]], "Training iterations": [[51, "training-iterations"]], "Define Evaluation": [[51, "define-evaluation"]], "Greedy decoding": [[51, "greedy-decoding"]], "Evaluate my text": [[51, "evaluate-my-text"]], "Run Model": [[51, "run-model"]], "Run Training": [[51, "run-training"]], "Run Evaluation": [[51, "run-evaluation"]], "Running Tutorials in Google Colab": [[52, "running-tutorials-in-google-colab"]], "PyTorch Version in Google Colab": [[52, "pytorch-version-in-google-colab"]], "Using Tutorial Data from Google Drive in Colab": [[52, "using-tutorial-data-from-google-drive-in-colab"]], "Enabling CUDA": [[52, "enabling-cuda"]], "Writing Custom Datasets, DataLoaders and Transforms": [[53, "writing-custom-datasets-dataloaders-and-transforms"]], "Dataset class": [[53, "dataset-class"]], "Compose transforms": [[53, "compose-transforms"]], "Iterating through the dataset": [[53, "iterating-through-the-dataset"]], "Afterword: torchvision": [[53, "afterword-torchvision"]], "DCGAN Tutorial": [[54, "dcgan-tutorial"]], "Generative Adversarial Networks": [[54, "generative-adversarial-networks"]], "What is a GAN?": [[54, "what-is-a-gan"]], "What is a DCGAN?": [[54, "what-is-a-dcgan"]], "Inputs": [[54, "inputs"], [77, "inputs"]], "Data": [[54, "data"]], "Implementation": [[54, "implementation"], [77, "implementation"]], "Weight Initialization": [[54, "weight-initialization"]], "Generator": [[54, "generator"]], "Discriminator": [[54, "discriminator"]], "Loss Functions and Optimizers": [[54, "loss-functions-and-optimizers"]], "Training": [[54, "training"], [143, "training"], [144, "training"], [177, "training"], [182, "training"], [212, "training"], [212, "id3"]], "Where to Go Next": [[54, "where-to-go-next"]], "Fault-tolerant Distributed Training with torchrun": [[55, "fault-tolerant-distributed-training-with-torchrun"]], "Why use torchrun": [[55, "why-use-torchrun"]], "Graceful restarts": [[55, "graceful-restarts"]], "Process group initialization": [[55, "process-group-initialization"]], "Use torchrun-provided environment variables": [[55, "use-torchrun-provided-environment-variables"]], "Saving and loading snapshots": [[55, "saving-and-loading-snapshots"]], "Loading a snapshot in the Trainer constructor": [[55, "loading-a-snapshot-in-the-trainer-constructor"]], "Resuming training": [[55, "resuming-training"]], "Running the script": [[55, "running-the-script"]], "Distributed Data Parallel in PyTorch - Video Tutorials": [[56, "distributed-data-parallel-in-pytorch-video-tutorials"]], "Running the code": [[56, "running-the-code"]], "Tutorial sections": [[56, "tutorial-sections"]], "Multi GPU training with DDP": [[57, "multi-gpu-training-with-ddp"]], "Imports": [[57, "imports"]], "Constructing the process group": [[57, "constructing-the-process-group"]], "Constructing the DDP model": [[57, "constructing-the-ddp-model"]], "Distributing input data": [[57, "distributing-input-data"]], "Saving model checkpoints": [[57, "saving-model-checkpoints"]], "Running the distributed training job": [[57, "running-the-distributed-training-job"]], "What is Distributed Data Parallel (DDP)": [[58, "what-is-distributed-data-parallel-ddp"]], "Why you should prefer DDP over DataParallel (DP)": [[58, "why-you-should-prefer-ddp-over-dataparallel-dp"]], "What is PyTorch?": [[59, "what-is-pytorch"]], "Goal of this tutorial:": [[59, "goal-of-this-tutorial"]], "Image Segmentation DeepLabV3 on Android": [[60, "image-segmentation-deeplabv3-on-android"]], "Image Segmentation DeepLabV3 on iOS": [[61, "image-segmentation-deeplabv3-on-ios"]], "PyTorch Distributed Overview": [[62, "pytorch-distributed-overview"]], "Parallelism APIs": [[62, "parallelism-apis"]], "Sharding primitives": [[62, "sharding-primitives"]], "Communications APIs": [[62, "communications-apis"]], "Launcher": [[62, "launcher"]], "Applying Parallelism To Scale Your Model": [[62, "applying-parallelism-to-scale-your-model"]], "PyTorch Distributed Developers": [[62, "pytorch-distributed-developers"]], "PyTorch: Tensors and autograd": [[64, "pytorch-tensors-and-autograd"], [118, "pytorch-tensors-and-autograd"]], "PyTorch: Defining New autograd Functions": [[65, "pytorch-defining-new-autograd-functions"]], "PyTorch: Control Flow + Weight Sharing": [[67, "pytorch-control-flow-weight-sharing"], [118, "pytorch-control-flow-weight-sharing"]], "PyTorch: Custom nn Modules": [[69, "pytorch-custom-nn-modules"], [118, "pytorch-custom-nn-modules"]], "PyTorch: nn": [[70, "pytorch-nn"], [118, "pytorch-nn"]], "PyTorch: optim": [[71, "pytorch-optim"], [118, "pytorch-optim"]], "Warm-up: numpy": [[74, "warm-up-numpy"], [118, "warm-up-numpy"]], "PyTorch: Tensors": [[75, "pytorch-tensors"], [118, "pytorch-tensors"]], "Adversarial Example Generation": [[77, "adversarial-example-generation"]], "Threat Model": [[77, "threat-model"]], "Fast Gradient Sign Attack": [[77, "fast-gradient-sign-attack"]], "Model Under Attack": [[77, "model-under-attack"]], "FGSM Attack": [[77, "fgsm-attack"]], "Testing Function": [[77, "testing-function"]], "Run Attack": [[77, "run-attack"]], "Accuracy vs Epsilon": [[77, "accuracy-vs-epsilon"]], "Sample Adversarial Examples": [[77, "sample-adversarial-examples"]], "Where to go next?": [[77, "where-to-go-next"]], "Finetuning Torchvision Models": [[78, "finetuning-torchvision-models"]], "Autograd": [[79, "autograd"], [118, "autograd"], [118, "id2"]], "nn Package": [[80, "nn-package"]], "Multi-GPU Examples": [[81, "multi-gpu-examples"]], "PyTorch for Former Torch Users": [[83, "pytorch-for-former-torch-users"]], "Introduction to Holistic Trace Analysis": [[84, "introduction-to-holistic-trace-analysis"]], "Installing HTA": [[84, "installing-hta"]], "Getting Started": [[84, "getting-started"], [212, "getting-started"], [213, "getting-started"]], "Temporal Breakdown": [[84, "temporal-breakdown"]], "Idle Time Breakdown": [[84, "idle-time-breakdown"]], "Kernel Breakdown": [[84, "kernel-breakdown"]], "Kernel Duration Distribution": [[84, "kernel-duration-distribution"]], "Communication Computation Overlap": [[84, "communication-computation-overlap"]], "Augmented Counters": [[84, "augmented-counters"]], "Memory Bandwidth & Queue Length Counters": [[84, "memory-bandwidth-queue-length-counters"]], "CUDA Kernel Launch Statistics": [[84, "cuda-kernel-launch-statistics"]], "Trace Diff using Holistic Trace Analysis": [[85, "trace-diff-using-holistic-trace-analysis"]], "Learning Hybrid Frontend Syntax Through Example": [[87, "learning-hybrid-frontend-syntax-through-example"]], "Hybrid Frontend Information": [[87, "hybrid-frontend-information"]], "Motivating Example": [[87, "motivating-example"]], "Part 1 - Tracing a pure python function": [[87, "part-1-tracing-a-pure-python-function"]], "Part 2 - Scripting a pure python function": [[87, "part-2-scripting-a-pure-python-function"]], "Part 3 - Tracing a nn.Module": [[87, "part-3-tracing-a-nn-module"]], "Part 4 - Scripting a nn.Module": [[87, "part-4-scripting-a-nn-module"]], "Top-Level Module": [[87, "top-level-module"]], "Running the Model": [[87, "running-the-model"]], "Tracing the Top-Level Model": [[87, "tracing-the-top-level-model"]], "Hybrid Frontend Tutorials": [[89, "hybrid-frontend-tutorials"]], "Hyperparameter tuning with Ray Tune": [[90, "hyperparameter-tuning-with-ray-tune"]], "Setup / Imports": [[90, "setup-imports"]], "Data loaders": [[90, "data-loaders"]], "Configurable neural network": [[90, "configurable-neural-network"]], "The train function": [[90, "the-train-function"]], "Adding (multi) GPU support with DataParallel": [[90, "adding-multi-gpu-support-with-dataparallel"]], "Communicating with Ray Tune": [[90, "communicating-with-ray-tune"]], "Full training function": [[90, "full-training-function"]], "Test set accuracy": [[90, "test-set-accuracy"]], "Configuring the search space": [[90, "configuring-the-search-space"]], "Introduction to PyTorch - YouTube Series": [[91, "introduction-to-pytorch-youtube-series"], [96, "introduction-to-pytorch-youtube-series"]], "The Fundamentals of Autograd": [[92, "the-fundamentals-of-autograd"]], "What Do We Need Autograd For?": [[92, "what-do-we-need-autograd-for"]], "A Simple Example": [[92, "a-simple-example"]], "Autograd in Training": [[92, "autograd-in-training"]], "Turning Autograd Off and On": [[92, "turning-autograd-off-and-on"]], "Autograd and In-place Operations": [[92, "autograd-and-in-place-operations"]], "Autograd Profiler": [[92, "autograd-profiler"]], "Advanced Topic: More Autograd Detail and the High-Level API": [[92, "advanced-topic-more-autograd-detail-and-the-high-level-api"]], "The High-Level API": [[92, "the-high-level-api"]], "Model Understanding with Captum": [[93, "model-understanding-with-captum"]], "A First Example": [[93, "a-first-example"]], "Feature Attribution with Integrated Gradients": [[93, "feature-attribution-with-integrated-gradients"]], "Feature Attribution with Occlusion": [[93, "feature-attribution-with-occlusion"]], "Layer Attribution with Layer GradCAM": [[93, "layer-attribution-with-layer-gradcam"]], "Visualization with Captum Insights": [[93, "visualization-with-captum-insights"]], "Introduction to PyTorch on YouTube": [[94, "introduction-to-pytorch-on-youtube"]], "Introduction to PyTorch": [[95, "introduction-to-pytorch"], [106, "introduction-to-pytorch"]], "PyTorch Tensors": [[95, "pytorch-tensors"]], "PyTorch Models": [[95, "pytorch-models"]], "Datasets and Dataloaders": [[95, "datasets-and-dataloaders"]], "Training Your PyTorch Model": [[95, "training-your-pytorch-model"]], "Building Models with PyTorch": [[97, "building-models-with-pytorch"]], "torch.nn.Module and torch.nn.Parameter": [[97, "torch-nn-module-and-torch-nn-parameter"]], "Common Layer Types": [[97, "common-layer-types"]], "Linear Layers": [[97, "linear-layers"]], "Convolutional Layers": [[97, "convolutional-layers"]], "Recurrent Layers": [[97, "recurrent-layers"]], "Transformers": [[97, "transformers"]], "Other Layers and Functions": [[97, "other-layers-and-functions"]], "Data Manipulation Layers": [[97, "data-manipulation-layers"]], "Activation Functions": [[97, "activation-functions"]], "PyTorch TensorBoard Support": [[99, "pytorch-tensorboard-support"]], "Before You Start": [[99, "before-you-start"]], "Showing Images in TensorBoard": [[99, "showing-images-in-tensorboard"]], "Graphing Scalars to Visualize Training": [[99, "graphing-scalars-to-visualize-training"]], "Visualizing Your Model": [[99, "visualizing-your-model"]], "Visualizing Your Dataset with Embeddings": [[99, "visualizing-your-dataset-with-embeddings"]], "Other Resources": [[99, "other-resources"], [101, "other-resources"]], "Introduction to PyTorch Tensors": [[100, "introduction-to-pytorch-tensors"]], "Creating Tensors": [[100, "creating-tensors"], [106, "creating-tensors"]], "Random Tensors and Seeding": [[100, "random-tensors-and-seeding"]], "Tensor Shapes": [[100, "tensor-shapes"]], "Tensor Data Types": [[100, "tensor-data-types"]], "Math & Logic with PyTorch Tensors": [[100, "math-logic-with-pytorch-tensors"]], "In Brief: Tensor Broadcasting": [[100, "in-brief-tensor-broadcasting"]], "More Math with Tensors": [[100, "more-math-with-tensors"]], "Altering Tensors in Place": [[100, "altering-tensors-in-place"]], "Copying Tensors": [[100, "copying-tensors"]], "Moving to Accelerator": [[100, "moving-to-accelerator"]], "Manipulating Tensor Shapes": [[100, "manipulating-tensor-shapes"]], "Changing the Number of Dimensions": [[100, "changing-the-number-of-dimensions"]], "NumPy Bridge": [[100, "numpy-bridge"]], "Training with PyTorch": [[101, "training-with-pytorch"]], "Dataset and DataLoader": [[101, "dataset-and-dataloader"]], "The Model": [[101, "the-model"]], "The Training Loop": [[101, "the-training-loop"]], "Per-Epoch Activity": [[101, "per-epoch-activity"]], "Knowledge Distillation Tutorial": [[102, "knowledge-distillation-tutorial"]], "Loading CIFAR-10": [[102, "loading-cifar-10"]], "Defining model classes and utility functions": [[102, "defining-model-classes-and-utility-functions"]], "Cross-entropy runs": [[102, "cross-entropy-runs"]], "Knowledge distillation run": [[102, "knowledge-distillation-run"]], "Cosine loss minimization run": [[102, "cosine-loss-minimization-run"]], "Intermediate regressor run": [[102, "intermediate-regressor-run"]], "Advanced: Making Dynamic Decisions and the Bi-LSTM CRF": [[103, "advanced-making-dynamic-decisions-and-the-bi-lstm-crf"]], "Dynamic versus Static Deep Learning Toolkits": [[103, "dynamic-versus-static-deep-learning-toolkits"]], "Bi-LSTM Conditional Random Field Discussion": [[103, "bi-lstm-conditional-random-field-discussion"]], "Implementation Notes": [[103, "implementation-notes"]], "Exercise: A new loss function for discriminative tagging": [[103, "exercise-a-new-loss-function-for-discriminative-tagging"]], "Deep Learning with PyTorch": [[104, "deep-learning-with-pytorch"]], "Deep Learning Building Blocks: Affine maps, non-linearities and objectives": [[104, "deep-learning-building-blocks-affine-maps-non-linearities-and-objectives"]], "Affine Maps": [[104, "affine-maps"]], "Non-Linearities": [[104, "non-linearities"]], "Softmax and Probabilities": [[104, "softmax-and-probabilities"]], "Objective Functions": [[104, "objective-functions"]], "Optimization and Training": [[104, "optimization-and-training"]], "Creating Network Components in PyTorch": [[104, "creating-network-components-in-pytorch"]], "Example: Logistic Regression Bag-of-Words classifier": [[104, "example-logistic-regression-bag-of-words-classifier"]], "Deep Learning for NLP with Pytorch": [[105, "deep-learning-for-nlp-with-pytorch"]], "Introduction to Torch\u2019s tensor library": [[106, "introduction-to-torch-s-tensor-library"]], "Operations with Tensors": [[106, "operations-with-tensors"]], "Reshaping Tensors": [[106, "reshaping-tensors"]], "Computation Graphs and Automatic Differentiation": [[106, "computation-graphs-and-automatic-differentiation"]], "Sequence Models and Long Short-Term Memory Networks": [[107, "sequence-models-and-long-short-term-memory-networks"]], "LSTMs in Pytorch": [[107, "lstms-in-pytorch"]], "Example: An LSTM for Part-of-Speech Tagging": [[107, "example-an-lstm-for-part-of-speech-tagging"]], "Exercise: Augmenting the LSTM part-of-speech tagger with character-level features": [[107, "exercise-augmenting-the-lstm-part-of-speech-tagger-with-character-level-features"]], "Word Embeddings: Encoding Lexical Semantics": [[109, "word-embeddings-encoding-lexical-semantics"]], "Getting Dense Word Embeddings": [[109, "getting-dense-word-embeddings"]], "Word Embeddings in Pytorch": [[109, "word-embeddings-in-pytorch"]], "An Example: N-Gram Language Modeling": [[109, "an-example-n-gram-language-modeling"]], "Exercise: Computing Word Embeddings: Continuous Bag-of-Words": [[109, "exercise-computing-word-embeddings-continuous-bag-of-words"]], "What is torch.nn really?": [[110, "what-is-torch-nn-really"]], "MNIST data setup": [[110, "mnist-data-setup"]], "Neural net from scratch (without torch.nn)": [[110, "neural-net-from-scratch-without-torch-nn"]], "Using torch.nn.functional": [[110, "using-torch-nn-functional"]], "Refactor using nn.Module": [[110, "refactor-using-nn-module"]], "Refactor using nn.Linear": [[110, "refactor-using-nn-linear"]], "Refactor using torch.optim": [[110, "refactor-using-torch-optim"]], "Refactor using Dataset": [[110, "refactor-using-dataset"]], "Refactor using DataLoader": [[110, "refactor-using-dataloader"]], "Add validation": [[110, "add-validation"]], "Create fit() and get_data()": [[110, "create-fit-and-get-data"]], "Switch to CNN": [[110, "switch-to-cnn"]], "Using nn.Sequential": [[110, "using-nn-sequential"]], "Wrapping DataLoader": [[110, "wrapping-dataloader"]], "Using your Accelerator": [[110, "using-your-accelerator"]], "Closing thoughts": [[110, "closing-thoughts"]], "Export a model with control flow to ONNX": [[111, "export-a-model-with-control-flow-to-onnx"]], "Define the Models": [[111, "define-the-models"]], "Exporting the Model: First Attempt": [[111, "exporting-the-model-first-attempt"]], "Suggested Patch: Refactoring with torch.cond()": [[111, "suggested-patch-refactoring-with-torch-cond"]], "Further reading": [[111, "further-reading"], [112, "further-reading"], [114, "further-reading"], [115, "further-reading"]], "Export a PyTorch model to ONNX": [[112, "export-a-pytorch-model-to-onnx"]], "1. Install the required dependencies": [[112, "install-the-required-dependencies"]], "2. Author a simple image classifier model": [[112, "author-a-simple-image-classifier-model"]], "3. Export the model to ONNX format": [[112, "export-the-model-to-onnx-format"]], "4. Save the ONNX model in a file": [[112, "save-the-onnx-model-in-a-file"]], "5. Visualize the ONNX model graph using Netron": [[112, "visualize-the-onnx-model-graph-using-netron"]], "6. Execute the ONNX model with ONNX Runtime": [[112, "execute-the-onnx-model-with-onnx-runtime"]], "7. Compare the PyTorch results with the ones from the ONNX Runtime": [[112, "compare-the-pytorch-results-with-the-ones-from-the-onnx-runtime"]], "ONNX": [[113, "onnx"]], "Introduction to ONNX": [[114, "introduction-to-onnx"]], "Dependencies": [[114, "dependencies"]], "Extending the ONNX Exporter Operator Support": [[115, "extending-the-onnx-exporter-operator-support"]], "Overriding the implementation of an existing PyTorch operator": [[115, "overriding-the-implementation-of-an-existing-pytorch-operator"]], "Using custom ONNX operators": [[115, "using-custom-onnx-operators"]], "Supporting a custom PyTorch operator": [[115, "supporting-a-custom-pytorch-operator"]], "Profiling your PyTorch Module": [[117, "profiling-your-pytorch-module"]], "Performance debugging using Profiler": [[117, "performance-debugging-using-profiler"]], "Profile the forward pass": [[117, "profile-the-forward-pass"]], "Print profiler results": [[117, "print-profiler-results"]], "Improve memory performance": [[117, "improve-memory-performance"]], "Improve time performance": [[117, "improve-time-performance"]], "Learning PyTorch with Examples": [[118, "learning-pytorch-with-examples"]], "Table of Contents": [[118, "table-of-contents"]], "PyTorch: Defining new autograd functions": [[118, "pytorch-defining-new-autograd-functions"]], "nn module": [[118, "nn-module"], [118, "id3"]], "Examples": [[118, "examples"], [213, "examples"], [251, "examples"], [279, "examples"]], "Saving and Loading Models": [[119, "saving-and-loading-models"]], "What is a state_dict?": [[119, "what-is-a-state-dict"]], "Example:": [[119, "example"]], "Saving & Loading Model for Inference": [[119, "saving-loading-model-for-inference"]], "Save/Load state_dict (Recommended)": [[119, "save-load-state-dict-recommended"]], "Save/Load Entire Model": [[119, "save-load-entire-model"]], "Saving an Exported Program": [[119, "saving-an-exported-program"]], "Saving & Loading a General Checkpoint for Inference and/or Resuming Training": [[119, "saving-loading-a-general-checkpoint-for-inference-and-or-resuming-training"]], "Save:": [[119, "save"], [119, "id1"], [119, "id3"]], "Load:": [[119, "load"], [119, "id2"], [119, "id4"]], "Saving Multiple Models in One File": [[119, "saving-multiple-models-in-one-file"]], "Warmstarting Model Using Parameters from a Different Model": [[119, "warmstarting-model-using-parameters-from-a-different-model"]], "Saving & Loading Model Across Devices": [[119, "saving-loading-model-across-devices"]], "Save on GPU, Load on CPU": [[119, "save-on-gpu-load-on-cpu"]], "Save on GPU, Load on GPU": [[119, "save-on-gpu-load-on-gpu"]], "Save on CPU, Load on GPU": [[119, "save-on-cpu-load-on-gpu"]], "Saving torch.nn.DataParallel Models": [[119, "saving-torch-nn-dataparallel-models"]], "T5-Base Model for Summarization, Sentiment Classification, and Translation": [[121, "t5-base-model-for-summarization-sentiment-classification-and-translation"]], "Template Tutorial": [[122, "template-tutorial"]], "Steps": [[122, "steps"], [186, "steps"], [223, "steps"], [225, "steps"], [228, "steps"], [239, "steps"], [240, "steps"], [241, "steps"], [242, "steps"], [243, "steps"]], "(Optional) Additional Exercises": [[122, "optional-additional-exercises"]], "Text classification with the torchtext library": [[123, "text-classification-with-the-torchtext-library"]], "Preprocess custom text dataset using torchtext": [[124, "preprocess-custom-text-dataset-using-torchtext"]], "Transfer Learning for Computer Vision Tutorial": [[125, "transfer-learning-for-computer-vision-tutorial"]], "Load Data": [[125, "load-data"]], "Visualize a few images": [[125, "visualize-a-few-images"]], "Training the model": [[125, "training-the-model"], [184, "training-the-model"]], "Visualizing the model predictions": [[125, "visualizing-the-model-predictions"]], "Finetuning the ConvNet": [[125, "finetuning-the-convnet"]], "Train and evaluate": [[125, "train-and-evaluate"], [125, "id1"]], "ConvNet as fixed feature extractor": [[125, "convnet-as-fixed-feature-extractor"]], "Inference on custom images": [[125, "inference-on-custom-images"]], "Further Learning": [[125, "further-learning"]], "Language Modeling with nn.Transformer and torchtext": [[126, "language-modeling-with-nn-transformer-and-torchtext"]], "Language Translation with nn.Transformer and torchtext": [[127, "language-translation-with-nn-transformer-and-torchtext"]], "Understanding requires_grad, retain_grad, Leaf, and Non-leaf Tensors": [[128, "understanding-requires-grad-retain-grad-leaf-and-non-leaf-tensors"]], "Setup": [[128, "setup"], [145, "setup"], [152, "setup"], [153, "setup"], [164, "setup"], [172, "setup"], [186, "setup"], [198, "setup"], [225, "setup"], [228, "setup"], [239, "setup"], [240, "setup"], [241, "setup"], [242, "setup"], [243, "setup"], [254, "setup"], [260, "setup"]], "Leaf vs.\u00a0non-leaf tensors": [[128, "leaf-vs-non-leaf-tensors"]], "requires_grad": [[128, "requires-grad"]], "retain_grad": [[128, "retain-grad"]], "Summary table": [[128, "summary-table"]], "References": [[128, "references"], [198, "references"]], "Compilers": [[129, "compilers"]], "Deep Dive": [[130, "deep-dive"]], "Distributed": [[131, "distributed"]], "Learn DDP": [[131, "learn-ddp"]], "Learn FSDP2": [[131, "learn-fsdp2"]], "Learn Tensor Parallel (TP)": [[131, "learn-tensor-parallel-tp"]], "Learn DeviceMesh": [[131, "learn-devicemesh"]], "Learn RPC": [[131, "learn-rpc"]], "Custom Extensions": [[131, "custom-extensions"]], "Domains": [[132, "domains"]], "Ecosystem": [[133, "ecosystem"]], "Extension": [[134, "extension"]], "Welcome to PyTorch Tutorials": [[135, "welcome-to-pytorch-tutorials"]], "Additional Resources": [[135, "additional-resources"], [172, "additional-resources"]], "Getting Started with Fully Sharded Data Parallel(FSDP)": [[136, "getting-started-with-fully-sharded-data-parallel-fsdp"]], "How FSDP works": [[136, "how-fsdp-works"]], "How to use FSDP": [[136, "how-to-use-fsdp"]], "Advanced Model Training with Fully Sharded Data Parallel (FSDP)": [[137, "advanced-model-training-with-fully-sharded-data-parallel-fsdp"]], "FSDP Features in This Tutorial": [[137, "fsdp-features-in-this-tutorial"]], "Recap on How FSDP Works": [[137, "recap-on-how-fsdp-works"]], "Fine-tuning HF T5": [[137, "fine-tuning-hf-t5"]], "Transformer Wrapping Policy": [[137, "transformer-wrapping-policy"]], "Mixed Precision": [[137, "mixed-precision"]], "Intializing FSDP Model on Device": [[137, "intializing-fsdp-model-on-device"]], "Sharding Strategy": [[137, "sharding-strategy"]], "Backward Prefetch": [[137, "backward-prefetch"]], "Model Checkpoint Saving, by streaming to the Rank0 CPU": [[137, "model-checkpoint-saving-by-streaming-to-the-rank0-cpu"]], "Getting Started with Fully Sharded Data Parallel (FSDP2)": [[138, "getting-started-with-fully-sharded-data-parallel-fsdp2"]], "How FSDP2 works": [[138, "how-fsdp2-works"]], "How to use FSDP2": [[138, "how-to-use-fsdp2"]], "Model Initialization": [[138, "model-initialization"]], "Forward/Backward with Prefetching": [[138, "forward-backward-with-prefetching"]], "Enabling Mixed Precision": [[138, "enabling-mixed-precision"]], "Gradient Clipping and Optimizer with DTensor": [[138, "gradient-clipping-and-optimizer-with-dtensor"]], "State Dicts with DTensor APIs": [[138, "state-dicts-with-dtensor-apis"]], "State Dict with DCP APIs": [[138, "state-dict-with-dcp-apis"]], "FSDP1-to-FSDP2 migration guide": [[138, "fsdp1-to-fsdp2-migration-guide"]], "Introduction to Libuv TCPStore Backend": [[139, "introduction-to-libuv-tcpstore-backend"]], "Performance Benchmark": [[139, "performance-benchmark"]], "Impact": [[139, "impact"]], "Exit Route 1: Pass use_libuv=False to TCPStore Initialization": [[139, "exit-route-1-pass-use-libuv-false-to-tcpstore-initialization"]], "Exit Route 2: Add use_libuv=0 to init_method at ProcessGroup Initialization": [[139, "exit-route-2-add-use-libuv-0-to-init-method-at-processgroup-initialization"]], "Exit Route 3: Set Environment Variable USE_LIBUV to 0": [[139, "exit-route-3-set-environment-variable-use-libuv-to-0"]], "Large Scale Transformer model training with Tensor Parallel (TP)": [[140, "large-scale-transformer-model-training-with-tensor-parallel-tp"]], "How Tensor Parallel works?": [[140, "how-tensor-parallel-works"]], "When and Why you should apply Tensor Parallel": [[140, "when-and-why-you-should-apply-tensor-parallel"]], "How to apply Tensor Parallel": [[140, "how-to-apply-tensor-parallel"]], "Apply Sequence Parallel to LayerNorm/RMSNorm layers": [[140, "apply-sequence-parallel-to-layernorm-rmsnorm-layers"]], "Apply Loss Parallel": [[140, "apply-loss-parallel"]], "Combine Tensor Parallel with Fully Sharded Data Parallel together": [[140, "combine-tensor-parallel-with-fully-sharded-data-parallel-together"]], "Hooks for autograd saved tensors": [[141, "hooks-for-autograd-saved-tensors"]], "Saved tensors": [[141, "saved-tensors"]], "Why does training a model (typically) requires more memory than evaluating it?": [[141, "why-does-training-a-model-typically-requires-more-memory-than-evaluating-it"]], "The concept of packing / unpacking": [[141, "the-concept-of-packing-unpacking"]], "Saved tensors hooks": [[141, "saved-tensors-hooks"]], "Some unconventional examples": [[141, "some-unconventional-examples"]], "Returning an int": [[141, "returning-an-int"]], "Returning a tuple": [[141, "returning-a-tuple"]], "Returning a str": [[141, "returning-a-str"]], "Saving tensors to CPU": [[141, "saving-tensors-to-cpu"]], "Saving tensors to disk": [[141, "saving-tensors-to-disk"]], "Multi-Objective NAS with Ax": [[142, "multi-objective-nas-with-ax"]], "Defining the TorchX App": [[142, "defining-the-torchx-app"]], "Setting up the Runner": [[142, "setting-up-the-runner"]], "Setting up the SearchSpace": [[142, "setting-up-the-searchspace"]], "Setting up Metrics": [[142, "setting-up-metrics"]], "Setting up the OptimizationConfig": [[142, "setting-up-the-optimizationconfig"]], "Creating the Ax Experiment": [[142, "creating-the-ax-experiment"]], "Choosing the Generation Strategy": [[142, "choosing-the-generation-strategy"]], "Configuring the Scheduler": [[142, "configuring-the-scheduler"]], "Running the optimization": [[142, "running-the-optimization"]], "Evaluating the results": [[142, "evaluating-the-results"]], "Acknowledgments": [[142, "acknowledgments"]], "NLP From Scratch: Classifying Names with a Character-Level RNN": [[143, "nlp-from-scratch-classifying-names-with-a-character-level-rnn"]], "Recommended Preparation": [[143, "recommended-preparation"]], "Preparing Torch": [[143, "preparing-torch"]], "Preparing the Data": [[143, "preparing-the-data"], [144, "preparing-the-data"]], "Turning Names into Tensors": [[143, "turning-names-into-tensors"]], "Creating the Network": [[143, "creating-the-network"], [144, "creating-the-network"]], "Training the Network": [[143, "training-the-network"], [144, "training-the-network"]], "Plotting the Results": [[143, "plotting-the-results"]], "Evaluating the Results": [[143, "evaluating-the-results"]], "Exercises": [[143, "exercises"], [144, "exercises"], [182, "exercises"]], "NLP From Scratch: Generating Names with a Character-Level RNN": [[144, "nlp-from-scratch-generating-names-with-a-character-level-rnn"]], "Preparing for Training": [[144, "preparing-for-training"]], "Plotting the Losses": [[144, "plotting-the-losses"]], "Sampling the Network": [[144, "sampling-the-network"]], "Compiled Autograd: Capturing a larger backward graph for torch.compile": [[145, "compiled-autograd-capturing-a-larger-backward-graph-for-torch-compile"]], "Basic usage": [[145, "basic-usage"]], "Inspecting the compiled autograd logs": [[145, "inspecting-the-compiled-autograd-logs"]], "Compiling the forward and backward pass using different flags": [[145, "compiling-the-forward-and-backward-pass-using-different-flags"]], "Compiled Autograd addresses certain limitations of AOTAutograd": [[145, "compiled-autograd-addresses-certain-limitations-of-aotautograd"]], "Common recompilation reasons for Compiled Autograd": [[145, "common-recompilation-reasons-for-compiled-autograd"]], "Fusing Convolution and Batch Norm using Custom Function": [[146, "fusing-convolution-and-batch-norm-using-custom-function"]], "Backward Formula Implementation for Convolution": [[146, "backward-formula-implementation-for-convolution"]], "Backward Formula Implementation for Batch Norm": [[146, "backward-formula-implementation-for-batch-norm"]], "Fusing Convolution and BatchNorm": [[146, "fusing-convolution-and-batchnorm"]], "Testing out our new Layer": [[146, "testing-out-our-new-layer"]], "A Comparison of Memory Usage": [[146, "a-comparison-of-memory-usage"]], "Double Backward with Custom Functions": [[147, "double-backward-with-custom-functions"]], "Saving the Inputs": [[147, "saving-the-inputs"]], "Saving the Outputs": [[147, "saving-the-outputs"]], "Saving Intermediate Results": [[147, "saving-intermediate-results"]], "Saving Intermediate Results: What not to do": [[147, "saving-intermediate-results-what-not-to-do"]], "When Backward is not Tracked": [[147, "when-backward-is-not-tracked"]], "Training \u201creal-world\u201d models with DDP": [[148, "training-real-world-models-with-ddp"]], "Files used for training": [[148, "files-used-for-training"]], "Saving and Loading from the cloud": [[148, "saving-and-loading-from-the-cloud"]], "Using Mixed Precision": [[148, "using-mixed-precision"]], "When is DDP not enough?": [[148, "when-is-ddp-not-enough"]], "Multinode Training": [[149, "multinode-training"]], "Local and Global ranks": [[149, "local-and-global-ranks"]], "Heteregeneous Scaling": [[149, "heteregeneous-scaling"]], "Troubleshooting": [[149, "troubleshooting"], [222, "troubleshooting"]], "Getting Started with Distributed Data Parallel": [[150, "getting-started-with-distributed-data-parallel"]], "Comparison between DataParallel and DistributedDataParallel": [[150, "comparison-between-dataparallel-and-distributeddataparallel"]], "Basic Use Case": [[150, "basic-use-case"]], "Skewed Processing Speeds": [[150, "skewed-processing-speeds"]], "Save and Load Checkpoints": [[150, "save-and-load-checkpoints"]], "Combining DDP with Model Parallelism": [[150, "combining-ddp-with-model-parallelism"]], "Initialize DDP with torch.distributed.run/torchrun": [[150, "initialize-ddp-with-torch-distributed-run-torchrun"]], "Distributed Pipeline Parallelism Using RPC": [[151, "distributed-pipeline-parallelism-using-rpc"]], "Writing Distributed Applications with PyTorch": [[152, "writing-distributed-applications-with-pytorch"]], "Point-to-Point Communication": [[152, "point-to-point-communication"]], "Collective Communication": [[152, "collective-communication"]], "Distributed Training": [[152, "distributed-training"]], "Our Own Ring-Allreduce": [[152, "our-own-ring-allreduce"]], "Advanced Topics": [[152, "advanced-topics"]], "Communication Backends": [[152, "communication-backends"]], "Initialization Methods": [[152, "initialization-methods"]], "Recurrent DQN: Training recurrent policies": [[153, "recurrent-dqn-training-recurrent-policies"]], "Policy": [[153, "policy"], [176, "policy"]], "Convolutional network": [[153, "convolutional-network"]], "LSTM Module": [[153, "lstm-module"]], "MLP": [[153, "mlp"]], "Using the Q-Values to select an action": [[153, "using-the-q-values-to-select-an-action"]], "Using the model for the loss": [[153, "using-the-model-for-the-loss"]], "DQN Loss": [[153, "dqn-loss"]], "Collector and replay buffer": [[153, "collector-and-replay-buffer"]], "Model ensembling": [[154, "model-ensembling"]], "What is model ensembling?": [[154, "what-is-model-ensembling"]], "Using vmap to vectorize the ensemble": [[154, "using-vmap-to-vectorize-the-ensemble"]], "Performance": [[154, "performance"]], "Forced Alignment with Wav2Vec2": [[155, "forced-alignment-with-wav2vec2"]], "Forward-mode Automatic Differentiation (Beta)": [[156, "forward-mode-automatic-differentiation-beta"]], "Basic Usage": [[156, "basic-usage"], [191, "basic-usage"], [193, "basic-usage"], [211, "basic-usage"], [250, "basic-usage"]], "Usage with Modules": [[156, "usage-with-modules"]], "Using the functional Module API (beta)": [[156, "using-the-functional-module-api-beta"]], "Custom autograd Function": [[156, "custom-autograd-function"]], "Functional API (beta)": [[156, "functional-api-beta"]], "Using the functional API with Modules": [[156, "using-the-functional-api-with-modules"]], "(beta) Building a Simple CPU Performance Profiler with FX": [[157, "beta-building-a-simple-cpu-performance-profiler-with-fx"]], "Capturing the Model with Symbolic Tracing": [[157, "capturing-the-model-with-symbolic-tracing"]], "Creating a Profiling Interpreter": [[157, "creating-a-profiling-interpreter"]], "Investigating the Performance of ResNet18": [[157, "investigating-the-performance-of-resnet18"]], "Inductor CPU backend debugging and profiling": [[158, "inductor-cpu-backend-debugging-and-profiling"]], "Debugging": [[158, "debugging"]], "Get more logging information": [[158, "get-more-logging-information"]], "Determine component of error": [[158, "determine-component-of-error"]], "Compilation error": [[158, "compilation-error"]], "Accuracy debugging": [[158, "accuracy-debugging"]], "Performance profiling": [[158, "performance-profiling"]], "Jacobians, Hessians, hvp, vhp, and more: composing function transforms": [[159, "jacobians-hessians-hvp-vhp-and-more-composing-function-transforms"]], "Computing the Jacobian": [[159, "computing-the-jacobian"]], "Reverse-mode Jacobian (jacrev) vs forward-mode Jacobian (jacfwd)": [[159, "reverse-mode-jacobian-jacrev-vs-forward-mode-jacobian-jacfwd"]], "Hessian computation with functorch.hessian": [[159, "hessian-computation-with-functorch-hessian"]], "Batch Jacobian and Batch Hessian": [[159, "batch-jacobian-and-batch-hessian"]], "Computing Hessian-vector products": [[159, "computing-hessian-vector-products"]], "Train a Mario-playing RL Agent": [[160, "train-a-mario-playing-rl-agent"]], "RL Definitions": [[160, "rl-definitions"]], "Initialize Environment": [[160, "initialize-environment"]], "Preprocess Environment": [[160, "preprocess-environment"]], "Agent": [[160, "agent"]], "Act": [[160, "act"]], "Cache and Recall": [[160, "cache-and-recall"]], "Learn": [[160, "learn"]], "Neural Network": [[160, "neural-network"]], "TD Estimate & TD Target": [[160, "td-estimate-td-target"]], "Updating the model": [[160, "updating-the-model"]], "Save checkpoint": [[160, "save-checkpoint"]], "Putting it all together": [[160, "putting-it-all-together"]], "Logging": [[160, "logging"]], "Let\u2019s play!": [[160, "lets-play"]], "Channels Last Memory Format in PyTorch": [[161, "channels-last-memory-format-in-pytorch"]], "Memory Format API": [[161, "memory-format-api"]], "Performance Gains": [[161, "performance-gains"]], "Converting existing models": [[161, "converting-existing-models"]], "Work to do": [[161, "work-to-do"]], "Single-Machine Model Parallel Best Practices": [[163, "single-machine-model-parallel-best-practices"]], "Neural Tangent Kernels": [[164, "neural-tangent-kernels"]], "Create a function version of the model": [[164, "create-a-function-version-of-the-model"]], "Compute the NTK: method 1 (Jacobian contraction)": [[164, "compute-the-ntk-method-1-jacobian-contraction"]], "Compute the NTK: method 2 (NTK-vector products)": [[164, "compute-the-ntk-method-2-ntk-vector-products"]], "NLP from Scratch": [[165, "nlp-from-scratch"]], "Getting Started - Accelerate Your Scripts with nvFuser": [[166, "getting-started-accelerate-your-scripts-with-nvfuser"]], "How to save memory by fusing the optimizer step into the backward pass": [[167, "how-to-save-memory-by-fusing-the-optimizer-step-into-the-backward-pass"]], "Memory usage during training": [[167, "memory-usage-during-training"]], "Capturing and visualizing memory snapshots": [[167, "capturing-and-visualizing-memory-snapshots"]], "DISCLAIMER: This technique is not for all": [[167, "disclaimer-this-technique-is-not-for-all"]], "Tensor.register_post_accumulate_grad_hook(hook) API and our technique": [[167, "tensor-register-post-accumulate-grad-hook-hook-api-and-our-technique"]], "How everything fits together in 10 lines": [[167, "how-everything-fits-together-in-10-lines"]], "Parametrizations Tutorial": [[168, "parametrizations-tutorial"]], "Implementing parametrizations by hand": [[168, "implementing-parametrizations-by-hand"]], "Introduction to parametrizations": [[168, "introduction-to-parametrizations"]], "Inspecting a parametrized module": [[168, "inspecting-a-parametrized-module"]], "Parametrizations are first-class citizens": [[168, "parametrizations-are-first-class-citizens"]], "Caching the value of a parametrization": [[168, "caching-the-value-of-a-parametrization"]], "Concatenating parametrizations": [[168, "concatenating-parametrizations"]], "Initializing parametrizations": [[168, "initializing-parametrizations"]], "Removing parametrizations": [[168, "removing-parametrizations"]], "Per-sample-gradients": [[169, "per-sample-gradients"]], "What is it?": [[169, "what-is-it"]], "Per-sample-grads, the efficient way, using function transforms": [[169, "per-sample-grads-the-efficient-way-using-function-transforms"]], "Performance comparison": [[169, "performance-comparison"]], "A guide on good usage of non_blocking and pin_memory() in PyTorch": [[170, "a-guide-on-good-usage-of-non-blocking-and-pin-memory-in-pytorch"]], "What you will learn": [[170, "what-you-will-learn"], [252, "what-you-will-learn"], [262, "what-you-will-learn"]], "Preamble": [[170, "preamble"]], "Memory management basics": [[170, "memory-management-basics"]], "CUDA and (non-)pageable memory": [[170, "cuda-and-non-pageable-memory"]], "Asynchronous vs. Synchronous Operations with non_blocking=True (CUDA cudaMemcpyAsync)": [[170, "asynchronous-vs-synchronous-operations-with-non-blocking-true-cuda-cudamemcpyasync"]], "A PyTorch perspective": [[170, "a-pytorch-perspective"]], "pin_memory()": [[170, "pin-memory"]], "non_blocking=True": [[170, "non-blocking-true"]], "Synergies": [[170, "synergies"]], "Other copy directions (GPU -> CPU, CPU -> MPS)": [[170, "other-copy-directions-gpu-cpu-cpu-mps"]], "Practical recommendations": [[170, "practical-recommendations"]], "Additional considerations": [[170, "additional-considerations"]], "Additional resources": [[170, "additional-resources"]], "Training Transformer models using Pipeline Parallelism": [[171, "training-transformer-models-using-pipeline-parallelism"]], "Introduction to Distributed Pipeline Parallelism": [[172, "introduction-to-distributed-pipeline-parallelism"]], "Step 1: Partition the Transformer Model": [[172, "step-1-partition-the-transformer-model"]], "Step 2: Define The Main Execution": [[172, "step-2-define-the-main-execution"]], "Step 3: Launch the Distributed Processes": [[172, "step-3-launch-the-distributed-processes"]], "Customize Process Group Backends Using Cpp Extensions": [[173, "customize-process-group-backends-using-cpp-extensions"]], "Basics": [[173, "basics"], [178, "basics"]], "Step 1: Implement a Subclass of Backend": [[173, "step-1-implement-a-subclass-of-backend"]], "Step 2: Expose The Extension Python APIs": [[173, "step-2-expose-the-extension-python-apis"]], "Step 3: Build The Custom Extension": [[173, "step-3-build-the-custom-extension"]], "Step 4: Use The Extension in Application": [[173, "step-4-use-the-extension-in-application"]], "Pruning Tutorial": [[174, "pruning-tutorial"]], "Create a model": [[174, "create-a-model"]], "Inspect a Module": [[174, "inspect-a-module"]], "Pruning a Module": [[174, "pruning-a-module"]], "Iterative Pruning": [[174, "iterative-pruning"]], "Serializing a pruned model": [[174, "serializing-a-pruned-model"]], "Remove pruning re-parametrization": [[174, "remove-pruning-re-parametrization"]], "Pruning multiple parameters in a model": [[174, "pruning-multiple-parameters-in-a-model"]], "Global pruning": [[174, "global-pruning"]], "Extending torch.nn.utils.prune with custom pruning functions": [[174, "extending-torch-nn-utils-prune-with-custom-pruning-functions"]], "Real Time Inference on Raspberry Pi 4 (30 fps!)": [[175, "real-time-inference-on-raspberry-pi-4-30-fps"]], "Raspberry Pi 4 Setup": [[175, "raspberry-pi-4-setup"]], "Installing PyTorch and OpenCV": [[175, "installing-pytorch-and-opencv"]], "Video Capture": [[175, "video-capture"]], "Image Preprocessing": [[175, "image-preprocessing"]], "Model Choices": [[175, "model-choices"]], "MobileNetV2: Quantization and JIT": [[175, "mobilenetv2-quantization-and-jit"]], "Putting It Together": [[175, "putting-it-together"]], "Troubleshooting: Performance": [[175, "troubleshooting-performance"]], "Reinforcement Learning (PPO) with TorchRL Tutorial": [[176, "reinforcement-learning-ppo-with-torchrl-tutorial"]], "Define Hyperparameters": [[176, "define-hyperparameters"]], "Data collection parameters": [[176, "data-collection-parameters"]], "PPO parameters": [[176, "ppo-parameters"]], "Define an environment": [[176, "define-an-environment"]], "Normalization": [[176, "normalization"]], "Value network": [[176, "value-network"]], "Loss function": [[176, "loss-function"]], "Conclusion and next steps": [[176, "conclusion-and-next-steps"]], "Reinforcement Learning (DQN) Tutorial": [[177, "reinforcement-learning-dqn-tutorial"]], "Replay Memory": [[177, "replay-memory"]], "DQN algorithm": [[177, "dqn-algorithm"]], "Q-network": [[177, "q-network"]], "Hyperparameters and utilities": [[177, "hyperparameters-and-utilities"]], "Implementing Batch RPC Processing Using Asynchronous Executions": [[178, "implementing-batch-rpc-processing-using-asynchronous-executions"]], "Batch-Updating Parameter Server": [[178, "batch-updating-parameter-server"]], "Batch-Processing CartPole Solver": [[178, "batch-processing-cartpole-solver"]], "Learn More": [[178, "learn-more"], [186, "learn-more"], [223, "learn-more"], [225, "learn-more"], [228, "learn-more"], [236, "learn-more"], [239, "learn-more"], [240, "learn-more"], [241, "learn-more"]], "Implementing a Parameter Server Using Distributed RPC Framework": [[179, "implementing-a-parameter-server-using-distributed-rpc-framework"]], "Getting Started with Distributed RPC Framework": [[180, "getting-started-with-distributed-rpc-framework"]], "Distributed Reinforcement Learning using RPC and RRef": [[180, "distributed-reinforcement-learning-using-rpc-and-rref"]], "Distributed RNN using Distributed Autograd and Distributed Optimizer": [[180, "distributed-rnn-using-distributed-autograd-and-distributed-optimizer"]], "(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)": [[181, "beta-implementing-high-performance-transformers-with-scaled-dot-product-attention-sdpa"]], "Fused implementations": [[181, "fused-implementations"]], "Explicit Dispatcher Control": [[181, "explicit-dispatcher-control"]], "Hardware dependence": [[181, "hardware-dependence"]], "Causal Self Attention": [[181, "causal-self-attention"]], "NestedTensor and Dense tensor support": [[181, "nestedtensor-and-dense-tensor-support"]], "Using SDPA with torch.compile": [[181, "using-sdpa-with-torch-compile"]], "Using SDPA with attn_bias subclasses": [[181, "using-sdpa-with-attn-bias-subclasses"]], "NLP From Scratch: Translation with a Sequence to Sequence Network and Attention": [[182, "nlp-from-scratch-translation-with-a-sequence-to-sequence-network-and-attention"]], "Loading data files": [[182, "loading-data-files"]], "The Seq2Seq Model": [[182, "the-seq2seq-model"]], "The Encoder": [[182, "the-encoder"]], "The Decoder": [[182, "the-decoder"]], "Simple Decoder": [[182, "simple-decoder"]], "Attention Decoder": [[182, "attention-decoder"]], "Preparing Training Data": [[182, "preparing-training-data"]], "Training the Model": [[182, "training-the-model"]], "Plotting results": [[182, "plotting-results"]], "Evaluation": [[182, "evaluation"]], "Training and Evaluating": [[182, "training-and-evaluating"]], "Visualizing Attention": [[182, "visualizing-attention"]], "Spatial Transformer Networks Tutorial": [[184, "spatial-transformer-networks-tutorial"]], "Loading the data": [[184, "loading-the-data"]], "Depicting spatial transformer networks": [[184, "depicting-spatial-transformer-networks"]], "Visualizing the STN results": [[184, "visualizing-the-stn-results"]], "Speech Recognition with Wav2Vec2": [[185, "speech-recognition-with-wav2vec2"]], "PyTorch Profiler With TensorBoard": [[186, "pytorch-profiler-with-tensorboard"]], "1. Prepare the data and model": [[186, "prepare-the-data-and-model"]], "2. Use profiler to record execution events": [[186, "use-profiler-to-record-execution-events"]], "3. Run the profiler": [[186, "run-the-profiler"]], "4. Use TensorBoard to view results and analyze model performance": [[186, "use-tensorboard-to-view-results-and-analyze-model-performance"]], "5. Improve performance with the help of profiler": [[186, "improve-performance-with-the-help-of-profiler"]], "6. Analyze performance with other advanced features": [[186, "analyze-performance-with-other-advanced-features"]], "7. Additional Practices: Profiling PyTorch on AMD GPUs": [[186, "additional-practices-profiling-pytorch-on-amd-gpus"]], "Visualizing Models, Data, and Training with TensorBoard": [[187, "visualizing-models-data-and-training-with-tensorboard"]], "1. TensorBoard setup": [[187, "tensorboard-setup"]], "2. Writing to TensorBoard": [[187, "writing-to-tensorboard"]], "3. Inspect the model using TensorBoard": [[187, "inspect-the-model-using-tensorboard"]], "4. Adding a \u201cProjector\u201d to TensorBoard": [[187, "adding-a-projector-to-tensorboard"]], "5. Tracking model training with TensorBoard": [[187, "tracking-model-training-with-tensorboard"]], "6. Assessing trained models with TensorBoard": [[187, "assessing-trained-models-with-tensorboard"]], "Text-to-speech with Tacotron2": [[188, "text-to-speech-with-tacotron2"]], "Whole Slide Image Classification Using PyTorch and TIAToolbox": [[189, "whole-slide-image-classification-using-pytorch-and-tiatoolbox"]], "Setting up the environment": [[189, "setting-up-the-environment"]], "Importing related libraries": [[189, "importing-related-libraries"]], "Clean-up before a run": [[189, "clean-up-before-a-run"]], "Downloading the data": [[189, "downloading-the-data"]], "Reading the data": [[189, "reading-the-data"]], "Classify image patches": [[189, "classify-image-patches"]], "Define PatchPredictor model": [[189, "define-patchpredictor-model"]], "Predict patch labels": [[189, "predict-patch-labels"]], "Predict patch labels for a whole slide": [[189, "predict-patch-labels-for-a-whole-slide"]], "Feature extraction with a pathology-specific model": [[189, "feature-extraction-with-a-pathology-specific-model"]], "Where to Go From Here": [[189, "where-to-go-from-here"]], "Building a Convolution/Batch Norm fuser with torch.compile": [[190, "building-a-convolution-batch-norm-fuser-with-torch-compile"]], "Fusing Convolution with Batch Norm": [[190, "fusing-convolution-with-batch-norm"], [190, "id1"]], "Pattern Matching with torch.compile": [[190, "pattern-matching-with-torch-compile"]], "Testing out our Fusion Pass": [[190, "testing-out-our-fusion-pass"]], "Benchmarking our Fusion on ResNet18": [[190, "benchmarking-our-fusion-on-resnet18"]], "Introduction to torch.compile": [[191, "introduction-to-torch-compile"]], "torch.compile and Nested Calls": [[191, "torch-compile-and-nested-calls"]], "Best Practices and Recommendations": [[191, "best-practices-and-recommendations"]], "Demonstrating Speedups": [[191, "demonstrating-speedups"]], "Comparison to TorchScript and FX Tracing": [[191, "comparison-to-torchscript-and-fx-tracing"]], "TorchDynamo and FX Graphs": [[191, "torchdynamo-and-fx-graphs"]], "torch.export Nightly Tutorial": [[192, "torch-export-nightly-tutorial"]], "torch.export Tutorial": [[193, "torch-export-tutorial"]], "Graph Breaks": [[193, "graph-breaks"]], "Non-Strict Export": [[193, "non-strict-export"]], "Control Flow Ops": [[193, "control-flow-ops"]], "Constraints/Dynamic Shapes": [[193, "constraints-dynamic-shapes"]], "Basic concepts: symbols and guards": [[193, "basic-concepts-symbols-and-guards"]], "0/1 specialization": [[193, "specialization"]], "Named Dims": [[193, "named-dims"]], "Constraint violations, suggested fixes": [[193, "constraint-violations-suggested-fixes"]], "Data-dependent errors": [[193, "data-dependent-errors"]], "Guards, torch._check()": [[193, "guards-torch-check"]], "Specialized values": [[193, "specialized-values"]], "Custom Ops": [[193, "custom-ops"]], "IR/Decompositions": [[193, "ir-decompositions"]], "ExportDB": [[193, "exportdb"]], "Running the Exported Program": [[193, "running-the-exported-program"]], "Introduction to TorchRec": [[194, "introduction-to-torchrec"], [195, "introduction-to-torchrec"]], "Install Dependencies": [[194, "install-dependencies"]], "Embeddings": [[194, "embeddings"]], "Embeddings in RecSys": [[194, "embeddings-in-recsys"]], "Embeddings in PyTorch": [[194, "embeddings-in-pytorch"]], "TorchRec Features Overview": [[194, "torchrec-features-overview"]], "From EmbeddingBag to EmbeddingBagCollection": [[194, "from-embeddingbag-to-embeddingbagcollection"]], "TorchRec Input/Output Data Types": [[194, "torchrec-input-output-data-types"]], "Distributed Training and Sharding": [[194, "distributed-training-and-sharding"]], "Distributed Embeddings": [[194, "distributed-embeddings"]], "Sharding": [[194, "sharding"]], "Sharded Modules": [[194, "sharded-modules"]], "Planner": [[194, "planner"]], "Planner Result": [[194, "planner-result"]], "GPU Training with LazyAwaitable": [[194, "gpu-training-with-lazyawaitable"]], "Anatomy of Sharded TorchRec modules": [[194, "anatomy-of-sharded-torchrec-modules"]], "Optimizing Embedding Lookups": [[194, "optimizing-embedding-lookups"]], "DistributedModelParallel": [[194, "distributedmodelparallel"]], "Sharding Best Practices": [[194, "sharding-best-practices"]], "Adding in the Optimizer": [[194, "adding-in-the-optimizer"]], "Optimizer Classes": [[194, "optimizer-classes"]], "Fused optimizer in TorchRec": [[194, "fused-optimizer-in-torchrec"]], "Adding an Optimizer to EmbeddingBagCollection": [[194, "adding-an-optimizer-to-embeddingbagcollection"]], "TorchVision Object Detection Finetuning Tutorial": [[196, "torchvision-object-detection-finetuning-tutorial"]], "Defining the Dataset": [[196, "defining-the-dataset"]], "Writing a custom dataset for PennFudan": [[196, "writing-a-custom-dataset-for-pennfudan"]], "Defining your model": [[196, "defining-your-model"]], "1 - Finetuning from a pretrained model": [[196, "finetuning-from-a-pretrained-model"]], "2 - Modifying the model to add a different backbone": [[196, "modifying-the-model-to-add-a-different-backbone"]], "Object detection and instance segmentation model for PennFudan Dataset": [[196, "object-detection-and-instance-segmentation-model-for-pennfudan-dataset"]], "Putting everything together": [[196, "putting-everything-together"]], "Testing forward() method (Optional)": [[196, "testing-forward-method-optional"]], "Wrapping up": [[196, "wrapping-up"]], "Accelerating PyTorch Transformers by replacing nn.Transformer with Nested Tensors and torch.compile()": [[197, "accelerating-pytorch-transformers-by-replacing-nn-transformer-with-nested-tensors-and-torch-compile"]], "Is this tutorial for me?": [[197, "is-this-tutorial-for-me"]], "Introducing the Building Blocks": [[197, "introducing-the-building-blocks"]], "The above building blocks are \u201cAll You Need\u201d (as of October 2024)": [[197, "the-above-building-blocks-are-all-you-need-as-of-october-2024"]], "MultiheadAttention": [[197, "multiheadattention"]], "Utilities": [[197, "utilities"]], "GPT-style layer": [[197, "gpt-style-layer"]], "Going one step further": [[197, "going-one-step-further"]], "Cross Attention": [[197, "cross-attention"]], "Fully masked rows no longer cause NaNs": [[197, "fully-masked-rows-no-longer-cause-nans"]], "Packed Projection": [[197, "packed-projection"]], "Input projection for MultiheadAttention": [[197, "input-projection-for-multiheadattention"]], "SwiGLU feed forward network of Transformer Layer": [[197, "swiglu-feed-forward-network-of-transformer-layer"]], "Extended examples": [[197, "extended-examples"]], "Visualizing Gradients": [[198, "visualizing-gradients"]], "Registering hooks": [[198, "registering-hooks"]], "Training and visualization": [[198, "training-and-visualization"]], "(Optional) Additional exercises": [[198, "optional-additional-exercises"]], "Intro": [[199, "intro"]], "Leverage Intel\u00ae Advanced Matrix Extensions": [[200, "leverage-intel-advanced-matrix-extensions"]], "AMX in PyTorch": [[200, "amx-in-pytorch"]], "Guidelines of leveraging AMX with workloads": [[200, "guidelines-of-leveraging-amx-with-workloads"]], "CPU operators that can leverage AMX:": [[200, "cpu-operators-that-can-leverage-amx"]], "Confirm AMX is being utilized": [[200, "confirm-amx-is-being-utilized"]], "Making Native Android Application that uses PyTorch prebuilt libraries": [[201, "making-native-android-application-that-uses-pytorch-prebuilt-libraries"]], "(beta) Compiling the optimizer with torch.compile": [[202, "beta-compiling-the-optimizer-with-torch-compile"]], "Model Setup": [[202, "model-setup"], [203, "model-setup"], [210, "model-setup"]], "Setting up and running the optimizer benchmark": [[202, "setting-up-and-running-the-optimizer-benchmark"]], "See Also": [[202, "see-also"], [250, "see-also"], [276, "see-also"]], "(beta) Running the compiled optimizer with an LR Scheduler": [[203, "beta-running-the-compiled-optimizer-with-an-lr-scheduler"]], "Setting up and running the compiled optimizer with LR Scheduler": [[203, "setting-up-and-running-the-compiled-optimizer-with-lr-scheduler"]], "Extension: What happens with a non-tensor LR?": [[203, "extension-what-happens-with-a-non-tensor-lr"]], "Asynchronous Saving with Distributed Checkpoint (DCP)": [[204, "asynchronous-saving-with-distributed-checkpoint-dcp"]], "Asynchronous Checkpointing Overview": [[204, "asynchronous-checkpointing-overview"]], "Even more performance with Pinned Memory": [[204, "even-more-performance-with-pinned-memory"]], "Getting Started with Distributed Checkpoint (DCP)": [[205, "getting-started-with-distributed-checkpoint-dcp"]], "How DCP works": [[205, "how-dcp-works"]], "How to use DCP": [[205, "how-to-use-dcp"]], "Saving": [[205, "saving"]], "Loading": [[205, "loading"]], "Formats": [[205, "formats"]], "Getting Started with CommDebugMode": [[206, "getting-started-with-commdebugmode"]], "What is CommDebugMode and why is it useful": [[206, "what-is-commdebugmode-and-why-is-it-useful"]], "Using CommDebugMode": [[206, "using-commdebugmode"]], "Getting Started with DeviceMesh": [[207, "getting-started-with-devicemesh"]], "What is DeviceMesh": [[207, "what-is-devicemesh"]], "Why DeviceMesh is Useful": [[207, "why-devicemesh-is-useful"]], "How to use DeviceMesh with HSDP": [[207, "how-to-use-devicemesh-with-hsdp"]], "How to use DeviceMesh for your custom parallel solutions": [[207, "how-to-use-devicemesh-for-your-custom-parallel-solutions"]], "Profiling PyTorch RPC-Based Workloads": [[209, "profiling-pytorch-rpc-based-workloads"], [261, "profiling-pytorch-rpc-based-workloads"]], "Explicit horizontal fusion with foreach_map and torch.compile": [[210, "explicit-horizontal-fusion-with-foreach-map-and-torch-compile"]], "Helper functions for foreach_map implementation": [[210, "helper-functions-for-foreach-map-implementation"]], "Setting up and running the compiled kernel": [[210, "setting-up-and-running-the-compiled-kernel"]], "(Beta) PyTorch Inference Performance Tuning on AWS Graviton Processors": [[211, "beta-pytorch-inference-performance-tuning-on-aws-graviton-processors"]], "Contents": [[211, "contents"]], "Speed up Inference with bfloat16 Fast Math Kernels": [[211, "speed-up-inference-with-bfloat16-fast-math-kernels"]], "Improve Inference Performance with OpenBLAS for Smaller Batch Dimensions": [[211, "improve-inference-performance-with-openblas-for-smaller-batch-dimensions"]], "Optimize Memory Allocation Overhead with Linux Transparent Huge Pages (THP)": [[211, "optimize-memory-allocation-overhead-with-linux-transparent-huge-pages-thp"]], "Intel\u00ae Extension for PyTorch*": [[212, "intel-extension-for-pytorch"]], "Features": [[212, "features"], [213, "features"]], "Examples \u2013 CPU": [[212, "examples-cpu"]], "Float32": [[212, "float32"], [212, "id1"], [212, "id4"], [212, "id7"]], "BFloat16": [[212, "bfloat16"], [212, "id2"], [212, "id5"], [212, "id8"]], "Inference": [[212, "inference"], [212, "id6"]], "Examples \u2013 GPU": [[212, "examples-gpu"]], "Float16": [[212, "float16"]], "C++ (CPU only)": [[212, "c-cpu-only"]], "Tutorials": [[212, "tutorials"], [213, "tutorials"]], "Ease-of-use quantization for PyTorch with Intel\u00ae Neural Compressor": [[213, "ease-of-use-quantization-for-pytorch-with-intel-neural-compressor"]], "FP8 Quantization": [[213, "fp8-quantization"]], "Weight-only Quantization": [[213, "weight-only-quantization"]], "Static Quantization with PT2E Backend": [[213, "static-quantization-with-pt2e-backend"]], "Accuracy-driven Tuning": [[213, "accuracy-driven-tuning"]], "Loading data in PyTorch": [[214, "loading-data-in-pytorch"]], "(beta) Efficient mobile interpreter in Android and iOS": [[215, "beta-efficient-mobile-interpreter-in-android-and-ios"]], "Pytorch Mobile Performance Recipes": [[216, "pytorch-mobile-performance-recipes"]], "Model Preparation for Android Recipe": [[217, "model-preparation-for-android-recipe"]], "Model Preparation for iOS Recipe": [[218, "model-preparation-for-ios-recipe"]], "Profiling PyTorch workloads with The Instrumentation and Tracing Technology (ITT) API": [[219, "profiling-pytorch-workloads-with-the-instrumentation-and-tracing-technology-itt-api"]], "What is Intel\u00ae VTune\u2122 Profiler": [[219, "what-is-intel-vtune-profiler"]], "What is Instrumentation and Tracing Technology (ITT) API": [[219, "what-is-instrumentation-and-tracing-technology-itt-api"]], "How to visualize PyTorch model hierarchy in Intel\u00ae VTune\u2122 Profiler": [[219, "how-to-visualize-pytorch-model-hierarchy-in-intel-vtune-profiler"]], "Launch Intel\u00ae VTune\u2122 Profiler": [[219, "launch-intel-vtune-profiler"]], "Configure Profiling for CPU": [[219, "configure-profiling-for-cpu"]], "Configure Profiling for XPU": [[219, "configure-profiling-for-xpu"]], "Read Profiling Result": [[219, "read-profiling-result"]], "Read XPU Profiling Result": [[219, "read-xpu-profiling-result"]], "A short sample code showcasing how to use PyTorch ITT APIs": [[219, "a-short-sample-code-showcasing-how-to-use-pytorch-itt-apis"]], "Summary of PyTorch Mobile Recipes": [[220, "summary-of-pytorch-mobile-recipes"]], "Model Interpretability using Captum": [[221, "model-interpretability-using-captum"]], "Before you begin": [[221, "before-you-begin"]], "Computing Attribution": [[221, "computing-attribution"]], "Visualizing the Results": [[221, "visualizing-the-results"]], "Final Notes": [[221, "final-notes"]], "Automatic Mixed Precision": [[222, "automatic-mixed-precision"]], "A simple network": [[222, "a-simple-network"]], "Default Precision": [[222, "default-precision"]], "Adding torch.autocast": [[222, "adding-torch-autocast"]], "Adding GradScaler": [[222, "adding-gradscaler"]], "All together: \u201cAutomatic Mixed Precision\u201d": [[222, "all-together-automatic-mixed-precision"]], "Inspecting/modifying gradients (e.g., clipping)": [[222, "inspecting-modifying-gradients-e-g-clipping"]], "Saving/Resuming": [[222, "saving-resuming"]], "Inference/Evaluation": [[222, "inference-evaluation"]], "Advanced topics": [[222, "advanced-topics"]], "Speedup with Amp is minor": [[222, "speedup-with-amp-is-minor"]], "Loss is inf/NaN": [[222, "loss-is-inf-nan"]], "Type mismatch error (may manifest as CUDNN_STATUS_BAD_PARAM)": [[222, "type-mismatch-error-may-manifest-as-cudnn-status-bad-param"]], "SyntaxError": [[223, "syntaxerror"]], "1. Defining functions to benchmark": [[223, "defining-functions-to-benchmark"]], "2. Benchmarking with timeit.Timer": [[223, "benchmarking-with-timeit-timer"]], "3. Benchmarking with torch.utils.benchmark.Timer": [[223, "benchmarking-with-torch-utils-benchmark-timer"]], "4. Benchmarking with Blocked Autorange": [[223, "benchmarking-with-blocked-autorange"]], "5. Comparing benchmark results": [[223, "comparing-benchmark-results"]], "6. Saving/Loading benchmark results": [[223, "saving-loading-benchmark-results"]], "7. Generating inputs with Fuzzed Parameters": [[223, "generating-inputs-with-fuzzed-parameters"]], "8. Collecting instruction counts with Callgrind": [[223, "collecting-instruction-counts-with-callgrind"]], "Changing default device": [[224, "changing-default-device"]], "Defining a Neural Network in PyTorch": [[225, "defining-a-neural-network-in-pytorch"]], "1. Import necessary libraries for loading our data": [[225, "import-necessary-libraries-for-loading-our-data"], [239, "import-necessary-libraries-for-loading-our-data"], [240, "import-necessary-libraries-for-loading-our-data"], [241, "import-necessary-libraries-for-loading-our-data"]], "2. Define and initialize the neural network": [[225, "define-and-initialize-the-neural-network"], [240, "define-and-initialize-the-neural-network"]], "3. Specify how data will pass through your model": [[225, "specify-how-data-will-pass-through-your-model"]], "4. [Optional] Pass data through your model to test": [[225, "optional-pass-data-through-your-model-to-test"]], "PyTorch Recipes": [[226, "pytorch-recipes"]], "Tips for Loading an nn.Module from a Checkpoint": [[227, "tips-for-loading-an-nn-module-from-a-checkpoint"]], "Using torch.load(mmap=True)": [[227, "using-torch-load-mmap-true"]], "Using torch.device('meta')": [[227, "using-torch-device-meta"]], "Using load_state_dict(assign=True)": [[227, "using-load-state-dict-assign-true"]], "PyTorch Profiler": [[228, "pytorch-profiler"]], "1. Import all necessary libraries": [[228, "import-all-necessary-libraries"]], "2. Instantiate a simple Resnet model": [[228, "instantiate-a-simple-resnet-model"]], "3. Using profiler to analyze execution time": [[228, "using-profiler-to-analyze-execution-time"]], "4. Using profiler to analyze memory consumption": [[228, "using-profiler-to-analyze-memory-consumption"]], "5. Using tracing functionality": [[228, "using-tracing-functionality"]], "6. Examining stack traces": [[228, "examining-stack-traces"]], "7. Using profiler to analyze long-running jobs": [[228, "using-profiler-to-analyze-long-running-jobs"]], "Reasoning about Shapes in PyTorch": [[229, "reasoning-about-shapes-in-pytorch"]], "Save Load Across Devices": [[230, "save-load-across-devices"]], "Saving And Loading A General Checkpoint": [[231, "saving-and-loading-a-general-checkpoint"]], "Saving And Loading Models For Inference": [[232, "saving-and-loading-models-for-inference"]], "Saving Multiple Models In One File": [[233, "saving-multiple-models-in-one-file"]], "Extension points in nn.Module for load_state_dict and tensor subclasses": [[235, "extension-points-in-nn-module-for-load-state-dict-and-tensor-subclasses"]], "torch.utils.swap_tensors": [[235, "torch-utils-swap-tensors"]], "Application to nn.Module": [[235, "application-to-nn-module"]], "nn.Module.to() and related methods": [[235, "nn-module-to-and-related-methods"]], "nn.Module.load_state_dict()": [[235, "nn-module-load-state-dict"]], "How to use TensorBoard with PyTorch": [[236, "how-to-use-tensorboard-with-pytorch"]], "Using TensorBoard in PyTorch": [[236, "using-tensorboard-in-pytorch"]], "Log scalars": [[236, "log-scalars"]], "Run TensorBoard": [[236, "run-tensorboard"]], "Timer quick start": [[237, "timer-quick-start"]], "1. Defining a Timer": [[237, "defining-a-timer"]], "2. Wall time: Timer.blocked_autorange(...)": [[237, "wall-time-timer-blocked-autorange"]], "3. C++ snippets": [[237, "c-snippets"]], "4. Instruction counts: Timer.collect_callgrind(...)": [[237, "instruction-counts-timer-collect-callgrind"]], "5. Instruction counts: Delving deeper": [[237, "instruction-counts-delving-deeper"]], "6. A/B testing with Callgrind": [[237, "a-b-testing-with-callgrind"]], "7. Wrapping up": [[237, "wrapping-up"]], "8. Footnotes": [[237, "footnotes"]], "Performance Tuning Guide": [[238, "performance-tuning-guide"]], "General optimizations": [[238, "general-optimizations"]], "Enable asynchronous data loading and augmentation": [[238, "enable-asynchronous-data-loading-and-augmentation"]], "Disable gradient calculation for validation or inference": [[238, "disable-gradient-calculation-for-validation-or-inference"]], "Disable bias for convolutions directly followed by a batch norm": [[238, "disable-bias-for-convolutions-directly-followed-by-a-batch-norm"]], "Use parameter.grad = None instead of model.zero_grad() or optimizer.zero_grad()": [[238, "use-parameter-grad-none-instead-of-model-zero-grad-or-optimizer-zero-grad"]], "Fuse operations": [[238, "fuse-operations"]], "Enable channels_last memory format for computer vision models": [[238, "enable-channels-last-memory-format-for-computer-vision-models"]], "Checkpoint intermediate buffers": [[238, "checkpoint-intermediate-buffers"]], "Disable debugging APIs": [[238, "disable-debugging-apis"]], "CPU specific optimizations": [[238, "cpu-specific-optimizations"]], "Utilize Non-Uniform Memory Access (NUMA) Controls": [[238, "utilize-non-uniform-memory-access-numa-controls"]], "Utilize OpenMP": [[238, "utilize-openmp"]], "Intel OpenMP Runtime Library (libiomp)": [[238, "intel-openmp-runtime-library-libiomp"]], "Switch Memory allocator": [[238, "switch-memory-allocator"]], "Train a model on CPU with PyTorch ``DistributedDataParallel``(DDP) functionality": [[238, "train-a-model-on-cpu-with-pytorch-distributeddataparallel-ddp-functionality"]], "GPU specific optimizations": [[238, "gpu-specific-optimizations"]], "Enable Tensor cores": [[238, "enable-tensor-cores"]], "Use CUDA Graphs": [[238, "use-cuda-graphs"]], "Enable cuDNN auto-tuner": [[238, "enable-cudnn-auto-tuner"]], "Avoid unnecessary CPU-GPU synchronization": [[238, "avoid-unnecessary-cpu-gpu-synchronization"]], "Create tensors directly on the target device": [[238, "create-tensors-directly-on-the-target-device"]], "Use mixed precision and AMP": [[238, "use-mixed-precision-and-amp"]], "Preallocate memory in case of variable input length": [[238, "preallocate-memory-in-case-of-variable-input-length"]], "Distributed optimizations": [[238, "distributed-optimizations"]], "Use efficient data-parallel backend": [[238, "use-efficient-data-parallel-backend"]], "Skip unnecessary all-reduce if training with DistributedDataParallel and gradient accumulation": [[238, "skip-unnecessary-all-reduce-if-training-with-distributeddataparallel-and-gradient-accumulation"]], "Match the order of layers in constructors and during the execution if using DistributedDataParallel(find_unused_parameters=True)": [[238, "match-the-order-of-layers-in-constructors-and-during-the-execution-if-using-distributeddataparallel-find-unused-parameters-true"]], "Load-balance workload in a distributed setting": [[238, "load-balance-workload-in-a-distributed-setting"]], "Warmstarting model using parameters from a different model in PyTorch": [[239, "warmstarting-model-using-parameters-from-a-different-model-in-pytorch"]], "2. Define and initialize the neural network A and B": [[239, "define-and-initialize-the-neural-network-a-and-b"]], "3. Save model A": [[239, "save-model-a"]], "4. Load into model B": [[239, "load-into-model-b"]], "What is a state_dict in PyTorch": [[240, "what-is-a-state-dict-in-pytorch"]], "3. Initialize the optimizer": [[240, "initialize-the-optimizer"]], "4. Access the model and optimizer state_dict": [[240, "access-the-model-and-optimizer-state-dict"]], "Zeroing out gradients in PyTorch": [[241, "zeroing-out-gradients-in-pytorch"]], "2. Load and normalize the dataset": [[241, "load-and-normalize-the-dataset"]], "3. Build the neural network": [[241, "build-the-neural-network"]], "4. Define a Loss function and optimizer": [[241, "define-a-loss-function-and-optimizer"]], "5. Zero the gradients while training the network": [[241, "zero-the-gradients-while-training-the-network"]], "Reducing AoT cold start compilation time with regional compilation": [[242, "reducing-aot-cold-start-compilation-time-with-regional-compilation"]], "Defining the Neural Network": [[242, "defining-the-neural-network"]], "Compiling the model ahead-of-time": [[242, "compiling-the-model-ahead-of-time"]], "Compiling _regions_ of the model ahead-of-time": [[242, "compiling-regions-of-the-model-ahead-of-time"]], "Measuring compilation time": [[242, "measuring-compilation-time"]], "Reducing torch.compile cold start compilation time with regional compilation": [[243, "reducing-torch-compile-cold-start-compilation-time-with-regional-compilation"]], "Script and Optimize for Mobile Recipe": [[244, "script-and-optimize-for-mobile-recipe"]], "Intel\u00ae Extension for PyTorch* Backend on Intel\u00ae CPUs": [[246, "intel-extension-for-pytorch-backend-on-intel-cpus"]], "Usage Example": [[246, "usage-example"]], "Train FP32": [[246, "train-fp32"]], "Train BF16": [[246, "train-bf16"]], "Inference FP32": [[246, "inference-fp32"]], "Inference BF16": [[246, "inference-bf16"]], "Compile Time Caching Configuration": [[247, "compile-time-caching-configuration"]], "Inductor Cache Settings": [[247, "inductor-cache-settings"]], "TORCHINDUCTOR_FX_GRAPH_CACHE": [[247, "torchinductor-fx-graph-cache"]], "TORCHINDUCTOR_AUTOGRAD_CACHE": [[247, "torchinductor-autograd-cache"]], "TORCHINDUCTOR_CACHE_DIR": [[247, "torchinductor-cache-dir"]], "TORCHINDUCTOR_FX_GRAPH_REMOTE_CACHE": [[247, "torchinductor-fx-graph-remote-cache"]], "TORCHINDUCTOR_AUTOGRAD_REMOTE_CACHE": [[247, "torchinductor-autograd-remote-cache"]], "TORCHINDUCTOR_AUTOTUNE_REMOTE_CACHE": [[247, "torchinductor-autotune-remote-cache"]], "TORCHINDUCTOR_FORCE_DISABLE_CACHES": [[247, "torchinductor-force-disable-caches"]], "Compile Time Caching in torch.compile": [[248, "compile-time-caching-in-torch-compile"]], "Caching Offerings": [[248, "caching-offerings"]], "torch.compile end-to-end caching (Mega-Cache)": [[248, "torch-compile-end-to-end-caching-mega-cache"]], "Modular caching of TorchDynamo, TorchInductor, and Triton": [[248, "modular-caching-of-torchdynamo-torchinductor-and-triton"]], "Remote Caching": [[248, "remote-caching"]], "(beta) Utilizing Torch Function modes with torch.compile": [[249, "beta-utilizing-torch-function-modes-with-torch-compile"]], "Rewriting a torch op (torch.add -> torch.mul)": [[249, "rewriting-a-torch-op-torch-add-torch-mul"]], "Using User-Defined Triton Kernels with torch.compile": [[250, "using-user-defined-triton-kernels-with-torch-compile"]], "Advanced Usage": [[250, "advanced-usage"]], "Composability": [[250, "composability"]], "Wrapping Triton kernels with triton_op": [[250, "wrapping-triton-kernels-with-triton-op"]], "Adding training support": [[250, "adding-training-support"]], "Adding a CPU Fallback": [[250, "adding-a-cpu-fallback"]], "Adding a FlopCounter Formula": [[250, "adding-a-flopcounter-formula"]], "Limitations": [[250, "limitations"]], "Dynamic Compilation Control with torch.compiler.set_stance": [[251, "dynamic-compilation-control-with-torch-compiler-set-stance"]], "Description": [[251, "description"]], "Preventing recompilation": [[251, "preventing-recompilation"]], "Measuring performance gains": [[251, "measuring-performance-gains"]], "Crashing sooner": [[251, "crashing-sooner"]], "torch.export AOTInductor Tutorial for Python runtime (Beta)": [[252, "torch-export-aotinductor-tutorial-for-python-runtime-beta"]], "Model Compilation": [[252, "model-compilation"]], "Model Inference in Python": [[252, "model-inference-in-python"]], "When to use AOTInductor with a Python Runtime": [[252, "when-to-use-aotinductor-with-a-python-runtime"]], "Demonstration of torch.export flow, common challenges and the solutions to address them": [[253, "demonstration-of-torch-export-flow-common-challenges-and-the-solutions-to-address-them"]], "Key requirement for torch.export: No graph break": [[253, "key-requirement-for-torch-export-no-graph-break"]], "Video Classification": [[253, "video-classification"]], "Error: Static batch size": [[253, "error-static-batch-size"]], "Solution": [[253, "solution"], [253, "id1"], [253, "id2"], [253, "id3"]], "Automatic Speech Recognition": [[253, "automatic-speech-recognition"]], "Error: strict tracing with TorchDynamo": [[253, "error-strict-tracing-with-torchdynamo"]], "Image Captioning": [[253, "image-captioning"]], "Error: Cannot mutate tensors with frozen storage": [[253, "error-cannot-mutate-tensors-with-frozen-storage"]], "Promptable Image Segmentation": [[253, "promptable-image-segmentation"]], "Error: Model is not of type torch.nn.Module": [[253, "error-model-is-not-of-type-torch-nn-module"]], "(beta) Using TORCH_LOGS python API with torch.compile": [[254, "beta-using-torch-logs-python-api-with-torch-compile"]], "Optimizing CPU Performance on Intel\u00ae Xeon\u00ae with run_cpu Script": [[256, "optimizing-cpu-performance-on-intel-xeon-with-run-cpu-script"]], "What You Will Learn": [[256, "what-you-will-learn"]], "Introduction of the Optimizations": [[256, "introduction-of-the-optimizations"]], "Applying NUMA Access Control": [[256, "applying-numa-access-control"]], "Using Intel\u00ae OpenMP Runtime Library": [[256, "using-intel-openmp-runtime-library"]], "Choosing an Optimized Memory Allocator": [[256, "choosing-an-optimized-memory-allocator"]], "Quick Start Example Commands": [[256, "quick-start-example-commands"]], "Using torch.backends.xeon.run_cpu": [[256, "using-torch-backends-xeon-run-cpu"]], "Explanation of the options": [[256, "explanation-of-the-options"]], "Shard Optimizer States with ZeroRedundancyOptimizer": [[257, "shard-optimizer-states-with-zeroredundancyoptimizer"]], "What is ZeroRedundancyOptimizer?": [[257, "what-is-zeroredundancyoptimizer"]], "How to use ZeroRedundancyOptimizer?": [[257, "how-to-use-zeroredundancyoptimizer"]], "Recipes": [[258, "recipes"]], "Introduction to Context Parallel": [[260, "introduction-to-context-parallel"]], "Enable Context Parallel": [[260, "enable-context-parallel"]], "Select Rotation Approach": [[260, "select-rotation-approach"]], "Flight Recorder for Debugging Stuck Jobs": [[262, "flight-recorder-for-debugging-stuck-jobs"]], "Enabling Flight Recorder": [[262, "enabling-flight-recorder"]], "Additional Settings": [[262, "additional-settings"]], "Retrieving Flight Recorder Data via an API": [[262, "retrieving-flight-recorder-data-via-an-api"]], "Flight Recorder File Formats": [[262, "flight-recorder-file-formats"]], "Analyzing Flight Recorder Dumps": [[262, "analyzing-flight-recorder-dumps"]], "An End-to-End Example": [[262, "an-end-to-end-example"]], "(prototype) Accelerating torch.save and torch.load with GPUDirect Storage": [[263, "prototype-accelerating-torch-save-and-torch-load-with-gpudirect-storage"]], "Using GPUDirect Storage with torch.save and torch.load": [[263, "using-gpudirect-storage-with-torch-save-and-torch-load"]], "(prototype) GPU Quantization with TorchAO": [[264, "prototype-gpu-quantization-with-torchao"]], "Set up Your Environment": [[264, "set-up-your-environment"]], "Inductor C++ Wrapper Tutorial": [[265, "inductor-c-wrapper-tutorial"]], "Prerequisites:": [[265, "prerequisites"], [275, "prerequisites"]], "Enabling the API": [[265, "enabling-the-api"]], "Example code": [[265, "example-code"]], "How to use torch.compile on Windows CPU/XPU": [[266, "how-to-use-torch-compile-on-windows-cpu-xpu"]], "Software Installation": [[266, "software-installation"]], "Install a Compiler": [[266, "install-a-compiler"]], "Set Up Environment": [[266, "set-up-environment"]], "Alternative Compiler for better performance on CPU": [[266, "id1"]], "Intel Compiler": [[266, "id2"]], "LLVM Compiler": [[266, "id4"]], "(Prototype) Convert Mobilenetv2 to Core ML": [[268, "prototype-convert-mobilenetv2-to-core-ml"]], "(Prototype) Use iOS GPU in PyTorch": [[269, "prototype-use-ios-gpu-in-pytorch"]], "(Prototype) Introduce lite interpreter workflow in Android and iOS": [[270, "prototype-introduce-lite-interpreter-workflow-in-android-and-ios"]], "Efficiently writing \u201csparse\u201d semantics for Adagrad with MaskedTensor": [[271, "efficiently-writing-sparse-semantics-for-adagrad-with-maskedtensor"]], "Introduction and Motivation": [[271, "introduction-and-motivation"]], "Preparation": [[271, "preparation"], [272, "preparation"], [273, "preparation"]], "Simpler Code with MaskedTensor": [[271, "simpler-code-with-maskedtensor"]], "Original Sparse Implementation": [[271, "original-sparse-implementation"]], "MaskedTensor Sparse Implementation": [[271, "maskedtensor-sparse-implementation"]], "MaskedTensor Advanced Semantics": [[272, "maskedtensor-advanced-semantics"]], "MaskedTensor vs NumPy\u2019s MaskedArray": [[272, "maskedtensor-vs-numpy-s-maskedarray"]], "Reduction Semantics": [[272, "reduction-semantics"]], "MaskedTensor Overview": [[273, "maskedtensor-overview"]], "Using MaskedTensor": [[273, "using-maskedtensor"]], "Construction": [[273, "construction"]], "Accessing the data and mask": [[273, "accessing-the-data-and-mask"]], "Indexing and slicing": [[273, "indexing-and-slicing"]], "Why is MaskedTensor useful?": [[273, "why-is-maskedtensor-useful"]], "Distinguishing between 0 and NaN gradient": [[273, "distinguishing-between-0-and-nan-gradient"]], "torch.where": [[273, "torch-where"]], "Another torch.where": [[273, "another-torch-where"]], "When using mask, x/0 yields NaN grad": [[273, "when-using-mask-x-0-yields-nan-grad"]], "torch.nansum() and torch.nanmean()": [[273, "torch-nansum-and-torch-nanmean"]], "Safe Softmax": [[273, "safe-softmax"]], "Implementing missing torch.nan* operators": [[273, "implementing-missing-torch-nan-operators"]], "MaskedTensor Sparsity": [[274, "maskedtensor-sparsity"]], "Principles": [[274, "principles"]], "Sparse COO tensors": [[274, "sparse-coo-tensors"]], "Sparse CSR tensors": [[274, "sparse-csr-tensors"]], "Supported Operations": [[274, "supported-operations"]], "Unary": [[274, "unary"]], "Binary": [[274, "binary"]], "Reductions": [[274, "reductions"]], "MaskedTensor Helper Methods": [[274, "maskedtensor-helper-methods"]], "Appendix": [[274, "appendix"]], "Sparse COO Construction": [[274, "sparse-coo-construction"]], "Sparse CSR Construction": [[274, "sparse-csr-construction"]], "Using Max-Autotune Compilation on CPU for Better Performance": [[275, "using-max-autotune-compilation-on-cpu-for-better-performance"]], "Activating the max-autotune mode": [[275, "activating-the-max-autotune-mode"]], "Example": [[275, "example"]], "Getting Started with Nested Tensors": [[276, "getting-started-with-nested-tensors"]], "Nested tensor initialization": [[276, "nested-tensor-initialization"]], "Nested Tensor Operations": [[276, "nested-tensor-operations"]], "Why Nested Tensor": [[276, "why-nested-tensor"]], "(Beta) Convert MobileNetV2 to NNAPI": [[277, "beta-convert-mobilenetv2-to-nnapi"]], "PyTorch 2 Export Quantization for OpenVINO torch.compile Backend": [[278, "pytorch-2-export-quantization-for-openvino-torch-compile-backend"]], "Post Training Quantization": [[278, "post-training-quantization"]], "Prerequisite: OpenVINO and NNCF installation": [[278, "prerequisite-openvino-and-nncf-installation"]], "1. Capture FX Graph": [[278, "capture-fx-graph"]], "2. Apply Quantization": [[278, "apply-quantization"]], "3. Lower into OpenVINO representation": [[278, "lower-into-openvino-representation"]], "4. Optional: Improve quantized model metrics": [[278, "optional-improve-quantized-model-metrics"]], "Autoloading Out-of-Tree Extension": [[279, "autoloading-out-of-tree-extension"]], "How to apply this mechanism to out-of-tree extensions?": [[279, "how-to-apply-this-mechanism-to-out-of-tree-extensions"]], "How it works": [[279, "how-it-works"]], "(prototype) Accelerating BERT with semi-structured (2:4) sparsity": [[280, "prototype-accelerating-bert-with-semi-structured-2-4-sparsity"]], "results": [[280, "id1"]], "(prototype) Tracing-based Selective Build Mobile Interpreter in Android and iOS": [[282, "prototype-tracing-based-selective-build-mobile-interpreter-in-android-and-ios"]], "torch.vmap": [[283, "torch-vmap"]], "So, what is vmap?": [[283, "so-what-is-vmap"]], "Unstable": [[284, "unstable"]]}, "indexentries": {}})