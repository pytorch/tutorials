Search.setIndex({"docnames": ["advanced/ONNXLive", "advanced/coding_ddpg", "advanced/cpp_autograd", "advanced/cpp_cuda_graphs", "advanced/cpp_custom_ops", "advanced/cpp_custom_ops_sycl", "advanced/cpp_export", "advanced/cpp_frontend", "advanced/custom_class_pt2", "advanced/custom_classes", "advanced/custom_ops_landing_page", "advanced/ddp_pipeline", "advanced/dispatcher", "advanced/extend_dispatcher", "advanced/generic_join", "advanced/neural_style_tutorial", "advanced/numpy_extensions_tutorial", "advanced/pendulum", "advanced/privateuseone", "advanced/python_custom_ops", "advanced/rpc_ddp_tutorial", "advanced/semi_structured_sparse", "advanced/sg_execution_times", "advanced/sharding", "advanced/torch-script-parallelism", "advanced/torch_script_custom_ops", "advanced/usb_semisup_learn", "beginner/audio_data_augmentation_tutorial", "beginner/audio_datasets_tutorial", "beginner/audio_feature_augmentation_tutorial", "beginner/audio_feature_extractions_tutorial", "beginner/audio_io_tutorial", "beginner/audio_resampling_tutorial", "beginner/basics/autogradqs_tutorial", "beginner/basics/buildmodel_tutorial", "beginner/basics/data_tutorial", "beginner/basics/index", "beginner/basics/intro", "beginner/basics/optimization_tutorial", "beginner/basics/quickstart_tutorial", "beginner/basics/saveloadrun_tutorial", "beginner/basics/sg_execution_times", "beginner/basics/tensorqs_tutorial", "beginner/basics/transforms_tutorial", "beginner/bettertransformer_tutorial", "beginner/blitz/autograd_tutorial", "beginner/blitz/cifar10_tutorial", "beginner/blitz/data_parallel_tutorial", "beginner/blitz/index", "beginner/blitz/neural_networks_tutorial", "beginner/blitz/sg_execution_times", "beginner/blitz/tensor_tutorial", "beginner/chatbot_tutorial", "beginner/colab", "beginner/data_loading_tutorial", "beginner/dcgan_faces_tutorial", "beginner/ddp_series_fault_tolerance", "beginner/ddp_series_intro", "beginner/ddp_series_multigpu", "beginner/ddp_series_theory", "beginner/deep_learning_60min_blitz", "beginner/deeplabv3_on_android", "beginner/deeplabv3_on_ios", "beginner/dist_overview", "beginner/examples_autograd/index", "beginner/examples_autograd/polynomial_autograd", "beginner/examples_autograd/polynomial_custom_function", "beginner/examples_autograd/sg_execution_times", "beginner/examples_nn/dynamic_net", "beginner/examples_nn/index", "beginner/examples_nn/polynomial_module", "beginner/examples_nn/polynomial_nn", "beginner/examples_nn/polynomial_optim", "beginner/examples_nn/sg_execution_times", "beginner/examples_tensor/index", "beginner/examples_tensor/polynomial_numpy", "beginner/examples_tensor/polynomial_tensor", "beginner/examples_tensor/sg_execution_times", "beginner/fgsm_tutorial", "beginner/finetuning_torchvision_models_tutorial", "beginner/former_torchies/autograd_tutorial_old", "beginner/former_torchies/nnft_tutorial", "beginner/former_torchies/parallelism_tutorial", "beginner/former_torchies/tensor_tutorial_old", "beginner/former_torchies_tutorial", "beginner/hta_intro_tutorial", "beginner/hta_trace_diff_tutorial", "beginner/hybrid_frontend/index", "beginner/hybrid_frontend/learning_hybrid_frontend_through_example_tutorial", "beginner/hybrid_frontend/sg_execution_times", "beginner/hybrid_frontend_tutorial", "beginner/hyperparameter_tuning_tutorial", "beginner/introyt", "beginner/introyt/autogradyt_tutorial", "beginner/introyt/captumyt", "beginner/introyt/index", "beginner/introyt/introyt1_tutorial", "beginner/introyt/introyt_index", "beginner/introyt/modelsyt_tutorial", "beginner/introyt/sg_execution_times", "beginner/introyt/tensorboardyt_tutorial", "beginner/introyt/tensors_deeper_tutorial", "beginner/introyt/trainingyt", "beginner/knowledge_distillation_tutorial", "beginner/nlp/advanced_tutorial", "beginner/nlp/deep_learning_tutorial", "beginner/nlp/index", "beginner/nlp/pytorch_tutorial", "beginner/nlp/sequence_models_tutorial", "beginner/nlp/sg_execution_times", "beginner/nlp/word_embeddings_tutorial", "beginner/nn_tutorial", "beginner/onnx/export_control_flow_model_to_onnx_tutorial", "beginner/onnx/export_simple_model_to_onnx_tutorial", "beginner/onnx/index", "beginner/onnx/intro_onnx", "beginner/onnx/onnx_registry_tutorial", "beginner/onnx/sg_execution_times", "beginner/profiler", "beginner/pytorch_with_examples", "beginner/saving_loading_models", "beginner/sg_execution_times", "beginner/t5_tutoria", "beginner/template_tutorial", "beginner/text_sentiment_ngrams_tutorial", "beginner/torchtext_custom_dataset_tutorial", "beginner/transfer_learning_tutorial", "beginner/transformer_tutorial", "beginner/translation_transformer", "beginner/understanding_leaf_vs_nonleaf_tutorial", "compilers_index", "deep-dive", "distributed", "domains", "ecosystem", "extension", "index", "intermediate/FSDP1_tutorial", "intermediate/FSDP_advanced_tutorial", "intermediate/FSDP_tutorial", "intermediate/TCPStore_libuv_backend", "intermediate/TP_tutorial", "intermediate/autograd_saved_tensors_hooks_tutorial", "intermediate/ax_multiobjective_nas_tutorial", "intermediate/char_rnn_classification_tutorial", "intermediate/char_rnn_generation_tutorial", "intermediate/compiled_autograd_tutorial", "intermediate/custom_function_conv_bn_tutorial", "intermediate/custom_function_double_backward_tutorial", "intermediate/ddp_series_minGPT", "intermediate/ddp_series_multinode", "intermediate/ddp_tutorial", "intermediate/dist_pipeline_parallel_tutorial", "intermediate/dist_tuto", "intermediate/dqn_with_rnn_tutorial", "intermediate/ensembling", "intermediate/forced_alignment_with_torchaudio_tutorial", "intermediate/forward_ad_usage", "intermediate/fx_profiling_tutorial", "intermediate/inductor_debug_cpu", "intermediate/jacobians_hessians", "intermediate/mario_rl_tutorial", "intermediate/memory_format_tutorial", "intermediate/mnist_train_nas", "intermediate/model_parallel_tutorial", "intermediate/neural_tangent_kernels", "intermediate/nlp_from_scratch_index", "intermediate/nvfuser_intro_tutorial", "intermediate/optimizer_step_in_backward_tutorial", "intermediate/parametrizations", "intermediate/per_sample_grads", "intermediate/pinmem_nonblock", "intermediate/pipeline_tutorial", "intermediate/pipelining_tutorial", "intermediate/process_group_cpp_extension_tutorial", "intermediate/pruning_tutorial", "intermediate/realtime_rpi", "intermediate/reinforcement_ppo", "intermediate/reinforcement_q_learning", "intermediate/rpc_async_execution", "intermediate/rpc_param_server_tutorial", "intermediate/rpc_tutorial", "intermediate/scaled_dot_product_attention_tutorial", "intermediate/seq2seq_translation_tutorial", "intermediate/sg_execution_times", "intermediate/spatial_transformer_tutorial", "intermediate/speech_recognition_pipeline_tutorial", "intermediate/tensorboard_profiler_tutorial", "intermediate/tensorboard_tutorial", "intermediate/text_to_speech_with_torchaudio", "intermediate/tiatoolbox_tutorial", "intermediate/torch_compile_conv_bn_fuser", "intermediate/torch_compile_tutorial", "intermediate/torch_export_nightly_tutorial", "intermediate/torch_export_tutorial", "intermediate/torchrec_intro_tutorial", "intermediate/torchrec_tutorial", "intermediate/torchvision_tutorial", "intermediate/transformer_building_blocks", "intermediate/visualizing_gradients_tutorial", "intro", "recipes/amx", "recipes/android_native_app_with_custom_op", "recipes/compiling_optimizer", "recipes/compiling_optimizer_lr_scheduler", "recipes/distributed_async_checkpoint_recipe", "recipes/distributed_checkpoint_recipe", "recipes/distributed_comm_debug_mode", "recipes/distributed_device_mesh", "recipes/distributed_optim_torchscript", "recipes/distributed_rpc_profiling", "recipes/foreach_map", "recipes/inference_tuning_on_aws_graviton", "recipes/intel_extension_for_pytorch", "recipes/intel_neural_compressor_for_pytorch", "recipes/loading_data_recipe", "recipes/mobile_interpreter", "recipes/mobile_perf", "recipes/model_preparation_android", "recipes/model_preparation_ios", "recipes/profile_with_itt", "recipes/ptmobile_recipes_summary", "recipes/recipes/Captum_Recipe", "recipes/recipes/amp_recipe", "recipes/recipes/benchmark", "recipes/recipes/changing_default_device", "recipes/recipes/defining_a_neural_network", "recipes/recipes/index", "recipes/recipes/module_load_state_dict_tips", "recipes/recipes/profiler_recipe", "recipes/recipes/reasoning_about_shapes", "recipes/recipes/save_load_across_devices", "recipes/recipes/saving_and_loading_a_general_checkpoint", "recipes/recipes/saving_and_loading_models_for_inference", "recipes/recipes/saving_multiple_models_in_one_file", "recipes/recipes/sg_execution_times", "recipes/recipes/swap_tensors", "recipes/recipes/tensorboard_with_pytorch", "recipes/recipes/timer_quick_start", "recipes/recipes/tuning_guide", "recipes/recipes/warmstarting_model_using_parameters_from_a_different_model", "recipes/recipes/what_is_state_dict", "recipes/recipes/zeroing_out_gradients", "recipes/regional_aot", "recipes/regional_compilation", "recipes/script_optimized", "recipes/sg_execution_times", "recipes/torch_compile_backend_ipex", "recipes/torch_compile_caching_configuration_tutorial", "recipes/torch_compile_caching_tutorial", "recipes/torch_compile_torch_function_modes", "recipes/torch_compile_user_defined_triton_kernel_tutorial", "recipes/torch_compiler_set_stance_tutorial", "recipes/torch_export_aoti_python", "recipes/torch_export_challenges_solutions", "recipes/torch_logs", "recipes/torchscript_inference", "recipes/xeon_run_cpu", "recipes/zero_redundancy_optimizer", "recipes_index", "sg_execution_times", "unstable/context_parallel", "unstable/distributed_rpc_profiling", "unstable/flight_recorder_tutorial", "unstable/gpu_direct_storage", "unstable/gpu_quantization_torchao_tutorial", "unstable/inductor_cpp_wrapper_tutorial", "unstable/inductor_windows", "unstable/inductor_windows_cpu", "unstable/ios_coreml_workflow", "unstable/ios_gpu_workflow", "unstable/lite_interpreter", "unstable/maskedtensor_adagrad", "unstable/maskedtensor_advanced_semantics", "unstable/maskedtensor_overview", "unstable/maskedtensor_sparsity", "unstable/max_autotune_on_CPU_tutorial", "unstable/nestedtensor", "unstable/nnapi_mobilenetv2", "unstable/openvino_quantizer", "unstable/python_extension_autoload", "unstable/semi_structured_sparse", "unstable/sg_execution_times", "unstable/tracing_based_selective_build", "unstable/vmap_recipe", "unstable_index"], "filenames": ["advanced/ONNXLive.rst", "advanced/coding_ddpg.rst", "advanced/cpp_autograd.rst", "advanced/cpp_cuda_graphs.rst", "advanced/cpp_custom_ops.rst", "advanced/cpp_custom_ops_sycl.rst", "advanced/cpp_export.rst", "advanced/cpp_frontend.rst", "advanced/custom_class_pt2.rst", "advanced/custom_classes.rst", "advanced/custom_ops_landing_page.rst", "advanced/ddp_pipeline.rst", "advanced/dispatcher.rst", "advanced/extend_dispatcher.rst", "advanced/generic_join.rst", "advanced/neural_style_tutorial.rst", "advanced/numpy_extensions_tutorial.rst", "advanced/pendulum.rst", "advanced/privateuseone.rst", "advanced/python_custom_ops.rst", "advanced/rpc_ddp_tutorial.rst", "advanced/semi_structured_sparse.rst", "advanced/sg_execution_times.rst", "advanced/sharding.rst", "advanced/torch-script-parallelism.rst", "advanced/torch_script_custom_ops.rst", "advanced/usb_semisup_learn.rst", "beginner/audio_data_augmentation_tutorial.rst", "beginner/audio_datasets_tutorial.rst", "beginner/audio_feature_augmentation_tutorial.rst", "beginner/audio_feature_extractions_tutorial.rst", "beginner/audio_io_tutorial.rst", "beginner/audio_resampling_tutorial.rst", "beginner/basics/autogradqs_tutorial.rst", "beginner/basics/buildmodel_tutorial.rst", "beginner/basics/data_tutorial.rst", "beginner/basics/index.rst", "beginner/basics/intro.rst", "beginner/basics/optimization_tutorial.rst", "beginner/basics/quickstart_tutorial.rst", "beginner/basics/saveloadrun_tutorial.rst", "beginner/basics/sg_execution_times.rst", "beginner/basics/tensorqs_tutorial.rst", "beginner/basics/transforms_tutorial.rst", "beginner/bettertransformer_tutorial.rst", "beginner/blitz/autograd_tutorial.rst", "beginner/blitz/cifar10_tutorial.rst", "beginner/blitz/data_parallel_tutorial.rst", "beginner/blitz/index.rst", "beginner/blitz/neural_networks_tutorial.rst", "beginner/blitz/sg_execution_times.rst", "beginner/blitz/tensor_tutorial.rst", "beginner/chatbot_tutorial.rst", "beginner/colab.rst", "beginner/data_loading_tutorial.rst", "beginner/dcgan_faces_tutorial.rst", "beginner/ddp_series_fault_tolerance.rst", "beginner/ddp_series_intro.rst", "beginner/ddp_series_multigpu.rst", "beginner/ddp_series_theory.rst", "beginner/deep_learning_60min_blitz.rst", "beginner/deeplabv3_on_android.rst", "beginner/deeplabv3_on_ios.rst", "beginner/dist_overview.rst", "beginner/examples_autograd/index.rst", "beginner/examples_autograd/polynomial_autograd.rst", "beginner/examples_autograd/polynomial_custom_function.rst", "beginner/examples_autograd/sg_execution_times.rst", "beginner/examples_nn/dynamic_net.rst", "beginner/examples_nn/index.rst", "beginner/examples_nn/polynomial_module.rst", "beginner/examples_nn/polynomial_nn.rst", "beginner/examples_nn/polynomial_optim.rst", "beginner/examples_nn/sg_execution_times.rst", "beginner/examples_tensor/index.rst", "beginner/examples_tensor/polynomial_numpy.rst", "beginner/examples_tensor/polynomial_tensor.rst", "beginner/examples_tensor/sg_execution_times.rst", "beginner/fgsm_tutorial.rst", "beginner/finetuning_torchvision_models_tutorial.rst", "beginner/former_torchies/autograd_tutorial_old.rst", "beginner/former_torchies/nnft_tutorial.rst", "beginner/former_torchies/parallelism_tutorial.rst", "beginner/former_torchies/tensor_tutorial_old.rst", "beginner/former_torchies_tutorial.rst", "beginner/hta_intro_tutorial.rst", "beginner/hta_trace_diff_tutorial.rst", "beginner/hybrid_frontend/index.rst", "beginner/hybrid_frontend/learning_hybrid_frontend_through_example_tutorial.rst", "beginner/hybrid_frontend/sg_execution_times.rst", "beginner/hybrid_frontend_tutorial.rst", "beginner/hyperparameter_tuning_tutorial.rst", "beginner/introyt.rst", "beginner/introyt/autogradyt_tutorial.rst", "beginner/introyt/captumyt.rst", "beginner/introyt/index.rst", "beginner/introyt/introyt1_tutorial.rst", "beginner/introyt/introyt_index.rst", "beginner/introyt/modelsyt_tutorial.rst", "beginner/introyt/sg_execution_times.rst", "beginner/introyt/tensorboardyt_tutorial.rst", "beginner/introyt/tensors_deeper_tutorial.rst", "beginner/introyt/trainingyt.rst", "beginner/knowledge_distillation_tutorial.rst", "beginner/nlp/advanced_tutorial.rst", "beginner/nlp/deep_learning_tutorial.rst", "beginner/nlp/index.rst", "beginner/nlp/pytorch_tutorial.rst", "beginner/nlp/sequence_models_tutorial.rst", "beginner/nlp/sg_execution_times.rst", "beginner/nlp/word_embeddings_tutorial.rst", "beginner/nn_tutorial.rst", "beginner/onnx/export_control_flow_model_to_onnx_tutorial.rst", "beginner/onnx/export_simple_model_to_onnx_tutorial.rst", "beginner/onnx/index.rst", "beginner/onnx/intro_onnx.rst", "beginner/onnx/onnx_registry_tutorial.rst", "beginner/onnx/sg_execution_times.rst", "beginner/profiler.rst", "beginner/pytorch_with_examples.rst", "beginner/saving_loading_models.rst", "beginner/sg_execution_times.rst", "beginner/t5_tutoria.rst", "beginner/template_tutorial.rst", "beginner/text_sentiment_ngrams_tutorial.rst", "beginner/torchtext_custom_dataset_tutorial.rst", "beginner/transfer_learning_tutorial.rst", "beginner/transformer_tutorial.rst", "beginner/translation_transformer.rst", "beginner/understanding_leaf_vs_nonleaf_tutorial.rst", "compilers_index.rst", "deep-dive.rst", "distributed.rst", "domains.rst", "ecosystem.rst", "extension.rst", "index.rst", "intermediate/FSDP1_tutorial.rst", "intermediate/FSDP_advanced_tutorial.rst", "intermediate/FSDP_tutorial.rst", "intermediate/TCPStore_libuv_backend.rst", "intermediate/TP_tutorial.rst", "intermediate/autograd_saved_tensors_hooks_tutorial.rst", "intermediate/ax_multiobjective_nas_tutorial.rst", "intermediate/char_rnn_classification_tutorial.rst", "intermediate/char_rnn_generation_tutorial.rst", "intermediate/compiled_autograd_tutorial.rst", "intermediate/custom_function_conv_bn_tutorial.rst", "intermediate/custom_function_double_backward_tutorial.rst", "intermediate/ddp_series_minGPT.rst", "intermediate/ddp_series_multinode.rst", "intermediate/ddp_tutorial.rst", "intermediate/dist_pipeline_parallel_tutorial.rst", "intermediate/dist_tuto.rst", "intermediate/dqn_with_rnn_tutorial.rst", "intermediate/ensembling.rst", "intermediate/forced_alignment_with_torchaudio_tutorial.rst", "intermediate/forward_ad_usage.rst", "intermediate/fx_profiling_tutorial.rst", "intermediate/inductor_debug_cpu.rst", "intermediate/jacobians_hessians.rst", "intermediate/mario_rl_tutorial.rst", "intermediate/memory_format_tutorial.rst", "intermediate/mnist_train_nas.rst", "intermediate/model_parallel_tutorial.rst", "intermediate/neural_tangent_kernels.rst", "intermediate/nlp_from_scratch_index.rst", "intermediate/nvfuser_intro_tutorial.rst", "intermediate/optimizer_step_in_backward_tutorial.rst", "intermediate/parametrizations.rst", "intermediate/per_sample_grads.rst", "intermediate/pinmem_nonblock.rst", "intermediate/pipeline_tutorial.rst", "intermediate/pipelining_tutorial.rst", "intermediate/process_group_cpp_extension_tutorial.rst", "intermediate/pruning_tutorial.rst", "intermediate/realtime_rpi.rst", "intermediate/reinforcement_ppo.rst", "intermediate/reinforcement_q_learning.rst", "intermediate/rpc_async_execution.rst", "intermediate/rpc_param_server_tutorial.rst", "intermediate/rpc_tutorial.rst", "intermediate/scaled_dot_product_attention_tutorial.rst", "intermediate/seq2seq_translation_tutorial.rst", "intermediate/sg_execution_times.rst", "intermediate/spatial_transformer_tutorial.rst", "intermediate/speech_recognition_pipeline_tutorial.rst", "intermediate/tensorboard_profiler_tutorial.rst", "intermediate/tensorboard_tutorial.rst", "intermediate/text_to_speech_with_torchaudio.rst", "intermediate/tiatoolbox_tutorial.rst", "intermediate/torch_compile_conv_bn_fuser.rst", "intermediate/torch_compile_tutorial.rst", "intermediate/torch_export_nightly_tutorial.rst", "intermediate/torch_export_tutorial.rst", "intermediate/torchrec_intro_tutorial.rst", "intermediate/torchrec_tutorial.rst", "intermediate/torchvision_tutorial.rst", "intermediate/transformer_building_blocks.rst", "intermediate/visualizing_gradients_tutorial.rst", "intro.rst", "recipes/amx.rst", "recipes/android_native_app_with_custom_op.rst", "recipes/compiling_optimizer.rst", "recipes/compiling_optimizer_lr_scheduler.rst", "recipes/distributed_async_checkpoint_recipe.rst", "recipes/distributed_checkpoint_recipe.rst", "recipes/distributed_comm_debug_mode.rst", "recipes/distributed_device_mesh.rst", "recipes/distributed_optim_torchscript.rst", "recipes/distributed_rpc_profiling.rst", "recipes/foreach_map.rst", "recipes/inference_tuning_on_aws_graviton.rst", "recipes/intel_extension_for_pytorch.rst", "recipes/intel_neural_compressor_for_pytorch.rst", "recipes/loading_data_recipe.rst", "recipes/mobile_interpreter.rst", "recipes/mobile_perf.rst", "recipes/model_preparation_android.rst", "recipes/model_preparation_ios.rst", "recipes/profile_with_itt.rst", "recipes/ptmobile_recipes_summary.rst", "recipes/recipes/Captum_Recipe.rst", "recipes/recipes/amp_recipe.rst", "recipes/recipes/benchmark.rst", "recipes/recipes/changing_default_device.rst", "recipes/recipes/defining_a_neural_network.rst", "recipes/recipes/index.rst", "recipes/recipes/module_load_state_dict_tips.rst", "recipes/recipes/profiler_recipe.rst", "recipes/recipes/reasoning_about_shapes.rst", "recipes/recipes/save_load_across_devices.rst", "recipes/recipes/saving_and_loading_a_general_checkpoint.rst", "recipes/recipes/saving_and_loading_models_for_inference.rst", "recipes/recipes/saving_multiple_models_in_one_file.rst", "recipes/recipes/sg_execution_times.rst", "recipes/recipes/swap_tensors.rst", "recipes/recipes/tensorboard_with_pytorch.rst", "recipes/recipes/timer_quick_start.rst", "recipes/recipes/tuning_guide.rst", "recipes/recipes/warmstarting_model_using_parameters_from_a_different_model.rst", "recipes/recipes/what_is_state_dict.rst", "recipes/recipes/zeroing_out_gradients.rst", "recipes/regional_aot.rst", "recipes/regional_compilation.rst", "recipes/script_optimized.rst", "recipes/sg_execution_times.rst", "recipes/torch_compile_backend_ipex.rst", "recipes/torch_compile_caching_configuration_tutorial.rst", "recipes/torch_compile_caching_tutorial.rst", "recipes/torch_compile_torch_function_modes.rst", "recipes/torch_compile_user_defined_triton_kernel_tutorial.rst", "recipes/torch_compiler_set_stance_tutorial.rst", "recipes/torch_export_aoti_python.rst", "recipes/torch_export_challenges_solutions.rst", "recipes/torch_logs.rst", "recipes/torchscript_inference.rst", "recipes/xeon_run_cpu.rst", "recipes/zero_redundancy_optimizer.rst", "recipes_index.rst", "sg_execution_times.rst", "unstable/context_parallel.rst", "unstable/distributed_rpc_profiling.rst", "unstable/flight_recorder_tutorial.rst", "unstable/gpu_direct_storage.rst", "unstable/gpu_quantization_torchao_tutorial.rst", "unstable/inductor_cpp_wrapper_tutorial.rst", "unstable/inductor_windows.rst", "unstable/inductor_windows_cpu.rst", "unstable/ios_coreml_workflow.rst", "unstable/ios_gpu_workflow.rst", "unstable/lite_interpreter.rst", "unstable/maskedtensor_adagrad.rst", "unstable/maskedtensor_advanced_semantics.rst", "unstable/maskedtensor_overview.rst", "unstable/maskedtensor_sparsity.rst", "unstable/max_autotune_on_CPU_tutorial.rst", "unstable/nestedtensor.rst", "unstable/nnapi_mobilenetv2.rst", "unstable/openvino_quantizer.rst", "unstable/python_extension_autoload.rst", "unstable/semi_structured_sparse.rst", "unstable/sg_execution_times.rst", "unstable/tracing_based_selective_build.rst", "unstable/vmap_recipe.rst", "unstable_index.rst"], "titles": ["ONNX Live Tutorial", "TorchRL objectives: Coding a DDPG loss", "Autograd in C++ Frontend", "Using CUDA Graphs in PyTorch C++ API", "Custom C++ and CUDA Operators", "Custom SYCL Operators", "&lt;no title&gt;", "Using the PyTorch C++ Frontend", "Supporting Custom C++ Classes in torch.compile/torch.export", "Extending PyTorch with Custom C++ Classes", "PyTorch Custom Operators", "Training Transformer models using Distributed Data Parallel and Pipeline Parallelism", "Registering a Dispatched Operator in C++", "Extending dispatcher for a new backend in C++", "Distributed Training with Uneven Inputs Using the Join Context Manager", "Neural Transfer Using PyTorch", "Creating Extensions Using NumPy and SciPy", "Pendulum: Writing your environment and transforms with TorchRL", "Facilitating New Backend Integration by PrivateUse1", "Custom Python Operators", "Combining Distributed DataParallel with Distributed RPC Framework", "(beta) Accelerating BERT with semi-structured (2:4) sparsity", "Computation times", "Exploring TorchRec sharding", "&lt;no title&gt;", "&lt;no title&gt;", "Semi-Supervised Learning using USB built upon PyTorch", "Audio Data Augmentation", "Audio Datasets", "Audio Feature Augmentation", "Audio Feature Extractions", "Audio I/O", "Audio Resampling", "Automatic Differentiation with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.autograd</span></code>", "Build the Neural Network", "Datasets &amp; DataLoaders", "Learn the Basics", "Learn the Basics", "Optimizing Model Parameters", "Quickstart", "Save and Load the Model", "Computation times", "Tensors", "Transforms", "Fast Transformer Inference with Better Transformer", "A Gentle Introduction to <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.autograd</span></code>", "Training a Classifier", "Optional: Data Parallelism", "Deep Learning with PyTorch: A 60 Minute Blitz", "Neural Networks", "Computation times", "Tensors", "Chatbot Tutorial", "Running Tutorials in Google Colab", "Writing Custom Datasets, DataLoaders and Transforms", "DCGAN Tutorial", "Fault-tolerant Distributed Training with <code class=\"docutils literal notranslate\"><span class=\"pre\">torchrun</span></code>", "Distributed Data Parallel in PyTorch - Video Tutorials", "Multi GPU training with DDP", "What is Distributed Data Parallel (DDP)", "Deep Learning with PyTorch: A 60 Minute Blitz", "Image Segmentation DeepLabV3 on Android", "Image Segmentation DeepLabV3 on iOS", "PyTorch Distributed Overview", "&lt;no title&gt;", "PyTorch: Tensors and autograd", "PyTorch: Defining New autograd Functions", "Computation times", "PyTorch: Control Flow + Weight Sharing", "&lt;no title&gt;", "PyTorch: Custom nn Modules", "PyTorch: nn", "PyTorch: optim", "Computation times", "&lt;no title&gt;", "Warm-up: numpy", "PyTorch: Tensors", "Computation times", "Adversarial Example Generation", "Finetuning Torchvision Models", "Autograd", "nn Package", "Multi-GPU Examples", "Tensors", "PyTorch for Former Torch Users", "Introduction to Holistic Trace Analysis", "Trace Diff using Holistic Trace Analysis", "&lt;no title&gt;", "Learning Hybrid Frontend Syntax Through Example", "Computation times", "Hybrid Frontend Tutorials", "Hyperparameter tuning with Ray Tune", "Introduction to PyTorch - YouTube Series", "The Fundamentals of Autograd", "Model Understanding with Captum", "Introduction to PyTorch on YouTube", "Introduction to PyTorch", "Introduction to PyTorch - YouTube Series", "Building Models with PyTorch", "Computation times", "PyTorch TensorBoard Support", "Introduction to PyTorch Tensors", "Training with PyTorch", "Knowledge Distillation Tutorial", "Advanced: Making Dynamic Decisions and the Bi-LSTM CRF", "Deep Learning with PyTorch", "Deep Learning for NLP with Pytorch", "Introduction to PyTorch", "Sequence Models and Long Short-Term Memory Networks", "Computation times", "Word Embeddings: Encoding Lexical Semantics", "What is <cite>torch.nn</cite> <em>really</em>?", "Export a model with control flow to ONNX", "Export a PyTorch model to ONNX", "ONNX", "Introduction to ONNX", "Extending the ONNX Exporter Operator Support", "Computation times", "Profiling your PyTorch Module", "Learning PyTorch with Examples", "Saving and Loading Models", "Computation times", "T5-Base Model for Summarization, Sentiment Classification, and Translation", "Template Tutorial", "Text classification with the torchtext library", "Preprocess custom text dataset using torchtext", "Transfer Learning for Computer Vision Tutorial", "Language Modeling with <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> and torchtext", "Language Translation with <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> and torchtext", "Understanding requires_grad, retain_grad, Leaf, and Non-leaf Tensors", "Compilers", "Deep Dive", "Distributed", "Domains", "Ecosystem", "Extension", "Welcome to PyTorch Tutorials", "Getting Started with Fully Sharded Data Parallel(FSDP)", "Advanced Model Training with Fully Sharded Data Parallel (FSDP)", "Getting Started with Fully Sharded Data Parallel (FSDP2)", "Introduction to Libuv TCPStore Backend", "Large Scale Transformer model training with Tensor Parallel (TP)", "Hooks for autograd saved tensors", "Multi-Objective NAS with Ax", "NLP From Scratch: Classifying Names with a Character-Level RNN", "NLP From Scratch: Generating Names with a Character-Level RNN", "Compiled Autograd: Capturing a larger backward graph for <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "Fusing Convolution and Batch Norm using Custom Function", "Double Backward with Custom Functions", "Training \u201creal-world\u201d models with DDP", "Multinode Training", "Getting Started with Distributed Data Parallel", "Distributed Pipeline Parallelism Using RPC", "Writing Distributed Applications with PyTorch", "Recurrent DQN: Training recurrent policies", "Model ensembling", "Forced Alignment with Wav2Vec2", "Forward-mode Automatic Differentiation (Beta)", "(beta) Building a Simple CPU Performance Profiler with FX", "Inductor CPU backend debugging and profiling", "Jacobians, Hessians, hvp, vhp, and more: composing function transforms", "Train a Mario-playing RL Agent", "Channels Last Memory Format in PyTorch", "&lt;no title&gt;", "Single-Machine Model Parallel Best Practices", "Neural Tangent Kernels", "NLP from Scratch", "Getting Started - Accelerate Your Scripts with nvFuser", "How to save memory by fusing the optimizer step into the backward pass", "Parametrizations Tutorial", "Per-sample-gradients", "A guide on good usage of <code class=\"docutils literal notranslate\"><span class=\"pre\">non_blocking</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">pin_memory()</span></code> in PyTorch", "Training Transformer models using Pipeline Parallelism", "Introduction to Distributed Pipeline Parallelism", "Customize Process Group Backends Using Cpp Extensions", "Pruning Tutorial", "Real Time Inference on Raspberry Pi 4 (30 fps!)", "Reinforcement Learning (PPO) with TorchRL Tutorial", "Reinforcement Learning (DQN) Tutorial", "Implementing Batch RPC Processing Using Asynchronous Executions", "Implementing a Parameter Server Using Distributed RPC Framework", "Getting Started with Distributed RPC Framework", "(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)", "NLP From Scratch: Translation with a Sequence to Sequence Network and Attention", "Computation times", "Spatial Transformer Networks Tutorial", "Speech Recognition with Wav2Vec2", "PyTorch Profiler With TensorBoard", "Visualizing Models, Data, and Training with TensorBoard", "Text-to-speech with Tacotron2", "Whole Slide Image Classification Using PyTorch and TIAToolbox", "Building a Convolution/Batch Norm fuser with torch.compile", "Introduction to <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "torch.export Nightly Tutorial", "torch.export Tutorial", "Introduction to TorchRec", "Introduction to TorchRec", "TorchVision Object Detection Finetuning Tutorial", "Accelerating PyTorch Transformers by replacing <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> with Nested Tensors and <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile()</span></code>", "Visualizing Gradients", "Intro", "Leverage Intel\u00ae Advanced Matrix Extensions", "Making Native Android Application that uses PyTorch prebuilt libraries", "(beta) Compiling the optimizer with torch.compile", "(beta) Running the compiled optimizer with an LR Scheduler", "Asynchronous Saving with Distributed Checkpoint (DCP)", "Getting Started with Distributed Checkpoint (DCP)", "Getting Started with <code class=\"docutils literal notranslate\"><span class=\"pre\">CommDebugMode</span></code>", "Getting Started with DeviceMesh", "&lt;no title&gt;", "Profiling PyTorch RPC-Based Workloads", "Explicit horizontal fusion with foreach_map and torch.compile", "(Beta) PyTorch Inference Performance Tuning on AWS Graviton Processors", "Intel\u00ae Extension for PyTorch*", "Ease-of-use quantization for PyTorch with Intel\u00ae Neural Compressor", "Loading data in PyTorch", "(beta) Efficient mobile interpreter in Android and iOS", "Pytorch Mobile Performance Recipes", "Model Preparation for Android Recipe", "Model Preparation for iOS Recipe", "Profiling PyTorch workloads with The Instrumentation and Tracing Technology (ITT) API", "Summary of PyTorch Mobile Recipes", "Model Interpretability using Captum", "Automatic Mixed Precision", "SyntaxError", "Changing default device", "Defining a Neural Network in PyTorch", "PyTorch Recipes", "Tips for Loading an <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Module</span></code> from a Checkpoint", "PyTorch Profiler", "Reasoning about Shapes in PyTorch", "Save Load Across Devices", "Saving And Loading A General Checkpoint", "Saving And Loading Models For Inference", "Saving Multiple Models In One File", "Computation times", "Extension points in <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Module</span></code> for <code class=\"docutils literal notranslate\"><span class=\"pre\">load_state_dict</span></code> and tensor subclasses", "How to use TensorBoard with PyTorch", "Timer quick start", "Performance Tuning Guide", "Warmstarting model using parameters from a different model in PyTorch", "What is a state_dict in PyTorch", "Zeroing out gradients in PyTorch", "Reducing AoT cold start compilation time with regional compilation", "Reducing torch.compile cold start compilation time with regional compilation", "Script and Optimize for Mobile Recipe", "Computation times", "Intel\u00ae Extension for PyTorch* Backend on Intel\u00ae CPUs", "Compile Time Caching Configuration", "Compile Time Caching in <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "(beta) Utilizing Torch Function modes with torch.compile", "Using User-Defined Triton Kernels with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "Dynamic Compilation Control with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compiler.set_stance</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">torch.export</span></code> AOTInductor Tutorial for Python runtime (Beta)", "Demonstration of torch.export flow, common challenges and the solutions to address them", "(beta) Using TORCH_LOGS python API with torch.compile", "&lt;no title&gt;", "Optimizing CPU Performance on Intel\u00ae Xeon\u00ae with run_cpu Script", "Shard Optimizer States with ZeroRedundancyOptimizer", "Recipes", "Computation times", "Introduction to Context Parallel", "Profiling PyTorch RPC-Based Workloads", "Flight Recorder for Debugging Stuck Jobs", "(prototype) Accelerating <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.save</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.load</span></code> with GPUDirect Storage", "(prototype) GPU Quantization with TorchAO", "Inductor C++ Wrapper Tutorial", "How to use <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code> on Windows CPU/XPU", "&lt;no title&gt;", "(Prototype) Convert Mobilenetv2 to Core ML", "(Prototype) Use iOS GPU in PyTorch", "(Prototype) Introduce lite interpreter workflow in Android and iOS", "Efficiently writing \u201csparse\u201d semantics for Adagrad with MaskedTensor", "MaskedTensor Advanced Semantics", "MaskedTensor Overview", "MaskedTensor Sparsity", "Using Max-Autotune Compilation on CPU for Better Performance", "Getting Started with Nested Tensors", "(Beta) Convert MobileNetV2 to NNAPI", "PyTorch 2 Export Quantization for OpenVINO torch.compile Backend", "Autoloading Out-of-Tree Extension", "(prototype) Accelerating BERT with semi-structured (2:4) sparsity", "Computation times", "(prototype) Tracing-based Selective Build Mobile Interpreter in Android and iOS", "torch.vmap", "Unstable"], "terms": {"thi": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 42, 44, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 63, 65, 66, 68, 70, 71, 72, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 90, 91, 92, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 220, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 271, 272, 273, 274, 275, 276, 277, 279, 281, 283, 284, 285], "ha": [0, 1, 2, 4, 7, 8, 9, 11, 13, 14, 15, 16, 17, 19, 21, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 44, 45, 46, 49, 52, 53, 65, 71, 78, 79, 86, 88, 91, 92, 93, 94, 96, 97, 98, 100, 101, 102, 103, 105, 107, 108, 110, 111, 115, 118, 119, 122, 124, 125, 128, 129, 137, 138, 139, 140, 141, 142, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 162, 164, 165, 167, 168, 169, 171, 172, 173, 175, 176, 177, 178, 181, 182, 183, 186, 187, 188, 189, 190, 191, 193, 194, 195, 197, 198, 199, 204, 207, 210, 213, 222, 224, 225, 229, 236, 238, 239, 243, 244, 245, 250, 251, 253, 254, 257, 258, 261, 262, 264, 265, 268, 271, 272, 273, 274, 275, 277, 279, 280, 281, 283], "been": [0, 1, 3, 7, 9, 11, 17, 18, 21, 27, 28, 29, 30, 31, 32, 44, 53, 72, 78, 79, 86, 88, 91, 92, 93, 94, 96, 101, 107, 111, 122, 124, 125, 128, 129, 137, 140, 145, 147, 148, 149, 152, 153, 154, 156, 159, 160, 164, 165, 167, 168, 169, 172, 175, 176, 177, 178, 182, 186, 187, 188, 189, 190, 193, 194, 195, 198, 204, 210, 213, 220, 224, 236, 237, 245, 253, 254, 257, 261, 262, 268, 271, 272, 275, 277, 280, 281, 283], "deprec": [0, 6, 11, 12, 24, 25, 44, 113, 122, 124, 125, 127, 128, 137, 139, 140, 152, 164, 167, 172, 187, 188, 194, 209, 210, 215, 231, 232, 233, 234, 245, 256, 262], "redirect": [0, 11, 27, 28, 29, 30, 31, 32, 44, 61, 62, 79, 80, 81, 82, 83, 84, 92, 122, 124, 125, 128, 152, 156, 164, 167, 172, 186, 189, 193, 196, 202, 210, 216, 217, 218, 219, 221, 231, 232, 233, 234, 245, 262, 268, 269, 270, 278, 283], "3": [0, 2, 3, 4, 5, 7, 8, 9, 11, 17, 20, 21, 23, 26, 27, 28, 29, 30, 31, 32, 34, 37, 43, 44, 45, 55, 61, 62, 65, 66, 70, 71, 72, 78, 79, 80, 81, 82, 83, 84, 93, 94, 96, 98, 101, 103, 104, 105, 107, 108, 110, 111, 112, 115, 116, 118, 119, 120, 122, 123, 124, 125, 128, 137, 138, 139, 141, 146, 147, 148, 152, 153, 154, 155, 156, 159, 161, 162, 164, 165, 166, 167, 168, 169, 170, 172, 175, 176, 177, 179, 180, 181, 182, 186, 189, 190, 192, 193, 194, 195, 197, 198, 201, 202, 204, 207, 208, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 228, 231, 232, 233, 234, 236, 239, 245, 247, 251, 253, 254, 261, 263, 265, 267, 268, 269, 270, 277, 278, 281, 283], "second": [0, 1, 4, 7, 9, 11, 12, 15, 16, 17, 19, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 61, 62, 71, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 96, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 116, 122, 123, 124, 125, 126, 128, 129, 136, 137, 140, 142, 143, 144, 145, 146, 147, 148, 152, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 182, 183, 185, 186, 187, 188, 189, 192, 193, 194, 197, 198, 199, 202, 204, 207, 211, 216, 217, 218, 219, 221, 224, 225, 228, 230, 231, 232, 233, 234, 236, 238, 239, 243, 244, 245, 250, 251, 252, 253, 255, 257, 263, 265, 268, 269, 270, 272, 273, 274, 275, 277, 278, 283, 284], "go": [1, 9, 14, 15, 16, 17, 19, 20, 21, 23, 26, 33, 34, 35, 37, 38, 39, 40, 42, 43, 45, 47, 49, 51, 52, 54, 65, 66, 68, 70, 71, 72, 75, 76, 88, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 115, 116, 118, 120, 123, 126, 129, 136, 138, 142, 143, 144, 145, 147, 150, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 173, 175, 176, 177, 178, 180, 182, 183, 185, 187, 188, 191, 192, 194, 195, 197, 199, 204, 206, 211, 222, 223, 224, 225, 226, 228, 229, 230, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 251, 252, 253, 255, 264, 265, 272, 273, 274, 275, 277, 284], "end": [1, 4, 7, 8, 9, 12, 15, 16, 17, 19, 21, 26, 33, 34, 35, 37, 38, 39, 40, 42, 43, 45, 46, 47, 49, 51, 52, 54, 55, 57, 63, 65, 66, 68, 70, 71, 72, 75, 76, 78, 85, 88, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 115, 116, 118, 119, 120, 123, 126, 129, 130, 131, 136, 138, 140, 141, 142, 143, 144, 145, 147, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 181, 182, 183, 185, 187, 188, 191, 192, 194, 195, 197, 198, 199, 204, 211, 213, 222, 223, 224, 225, 226, 228, 229, 230, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 251, 252, 253, 255, 258, 259, 261, 264, 265, 272, 273, 274, 275, 277, 280, 281, 284], "download": [1, 7, 15, 16, 17, 19, 21, 26, 33, 34, 35, 37, 38, 39, 40, 42, 43, 45, 46, 47, 49, 51, 52, 53, 54, 55, 65, 66, 68, 70, 71, 72, 75, 76, 78, 85, 88, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 115, 116, 118, 120, 123, 126, 129, 137, 138, 142, 143, 144, 145, 147, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 175, 176, 177, 178, 180, 182, 183, 185, 187, 188, 191, 192, 194, 195, 197, 198, 199, 204, 211, 213, 222, 223, 224, 225, 226, 228, 229, 230, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 249, 250, 251, 252, 253, 255, 264, 265, 267, 272, 273, 274, 275, 277, 284], "full": [1, 3, 4, 7, 12, 14, 15, 16, 17, 19, 21, 26, 33, 34, 35, 37, 39, 40, 42, 43, 45, 46, 47, 49, 51, 52, 53, 54, 55, 65, 66, 68, 70, 71, 72, 75, 76, 78, 88, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 115, 116, 118, 120, 123, 126, 129, 137, 138, 139, 142, 143, 144, 145, 146, 147, 149, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 174, 175, 177, 178, 179, 182, 183, 185, 187, 191, 192, 194, 195, 197, 198, 199, 204, 211, 222, 223, 224, 225, 226, 228, 229, 230, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 251, 252, 253, 255, 257, 259, 261, 263, 264, 265, 272, 273, 274, 275, 277, 279, 284], "exampl": [1, 2, 3, 4, 5, 7, 8, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 26, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 85, 86, 87, 89, 91, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 111, 112, 113, 115, 116, 117, 118, 121, 123, 126, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 190, 191, 192, 194, 195, 197, 199, 201, 203, 204, 205, 206, 207, 208, 211, 212, 220, 222, 223, 224, 225, 226, 228, 229, 230, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 248, 249, 250, 251, 253, 254, 255, 258, 259, 260, 261, 264, 265, 267, 272, 273, 274, 275, 277, 279, 281, 282, 284], "author": [1, 4, 5, 7, 14, 15, 16, 17, 20, 21, 26, 37, 47, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 78, 85, 86, 88, 90, 97, 103, 104, 105, 107, 108, 110, 111, 112, 115, 116, 118, 119, 120, 123, 126, 129, 137, 138, 139, 140, 141, 143, 144, 145, 146, 149, 150, 151, 153, 154, 158, 159, 161, 162, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 191, 192, 194, 198, 199, 203, 204, 205, 206, 207, 208, 211, 212, 223, 228, 229, 236, 239, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255, 261, 263, 265, 266, 267, 276, 279, 280, 281, 284], "vincent": [1, 17, 154, 171, 177], "moen": [1, 17, 154, 171, 177], "separ": [1, 4, 5, 7, 9, 12, 19, 35, 52, 55, 88, 93, 100, 101, 102, 103, 111, 118, 141, 155, 159, 161, 169, 171, 180, 183, 190, 197, 224, 239, 249, 252, 255, 272], "rl": [1, 133, 136, 177, 178, 179, 184, 260], "algorithm": [1, 7, 13, 14, 15, 33, 38, 43, 52, 55, 59, 72, 85, 91, 94, 96, 102, 104, 105, 106, 107, 111, 119, 133, 136, 138, 141, 143, 147, 153, 154, 161, 171, 174, 177, 180, 185, 203, 204, 222, 226, 239, 261, 279], "variou": [1, 4, 12, 18, 42, 49, 51, 52, 53, 86, 88, 91, 96, 100, 108, 111, 118, 120, 143, 153, 158, 160, 175, 177, 180, 181, 190, 195, 198, 201, 207, 211, 238, 242, 243, 248, 251, 254, 263, 265, 274, 277], "piec": [1, 12, 17, 88, 96, 111, 176, 177, 181, 190, 197], "assembl": [1, 12, 52, 96], "script": [1, 7, 8, 9, 13, 15, 16, 17, 19, 33, 34, 35, 38, 39, 40, 42, 43, 45, 46, 47, 49, 51, 52, 54, 55, 58, 63, 71, 75, 76, 78, 91, 93, 96, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 115, 116, 123, 126, 129, 137, 138, 139, 142, 143, 144, 145, 146, 147, 149, 150, 151, 153, 155, 157, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 173, 175, 176, 177, 178, 180, 182, 183, 185, 190, 192, 194, 197, 198, 199, 204, 211, 212, 213, 220, 223, 224, 225, 228, 229, 230, 236, 239, 243, 244, 250, 251, 252, 253, 255, 259, 263, 265, 272, 273, 274, 275, 277, 284], "collect": [1, 5, 7, 14, 17, 18, 23, 38, 45, 47, 52, 58, 63, 96, 101, 102, 105, 110, 136, 137, 138, 141, 151, 154, 158, 174, 178, 181, 194, 195, 200, 206, 207, 208, 220, 238, 239, 259, 261, 263, 281], "final": [1, 7, 9, 13, 14, 15, 17, 18, 20, 21, 26, 43, 45, 49, 52, 55, 78, 88, 91, 93, 96, 98, 101, 102, 103, 108, 111, 113, 116, 118, 120, 126, 136, 137, 138, 139, 141, 143, 144, 145, 147, 148, 153, 158, 159, 160, 161, 165, 168, 170, 173, 175, 177, 178, 179, 180, 181, 183, 187, 188, 194, 195, 214, 261, 263, 265, 272, 275, 279, 281], "function": [1, 3, 4, 5, 7, 9, 10, 12, 13, 16, 17, 19, 20, 21, 23, 26, 35, 39, 40, 42, 43, 45, 51, 52, 54, 56, 58, 63, 64, 67, 68, 70, 71, 72, 85, 86, 93, 94, 96, 100, 101, 107, 110, 112, 115, 116, 118, 120, 126, 129, 130, 131, 132, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 153, 154, 155, 158, 159, 161, 168, 169, 171, 173, 174, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 200, 203, 204, 212, 213, 220, 223, 225, 226, 236, 238, 240, 246, 248, 251, 252, 253, 255, 258, 259, 260, 261, 266, 272, 273, 274, 275, 279, 281, 284], "ar": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 23, 26, 33, 34, 35, 38, 42, 43, 45, 46, 49, 51, 52, 53, 54, 55, 56, 58, 59, 63, 70, 71, 72, 78, 85, 86, 88, 91, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 118, 119, 120, 126, 129, 132, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 168, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 192, 194, 195, 197, 199, 201, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 220, 222, 223, 224, 226, 228, 229, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251, 253, 254, 255, 257, 258, 259, 261, 263, 264, 265, 272, 273, 274, 275, 276, 277, 279, 280, 281, 284, 285], "state": [1, 4, 8, 9, 12, 13, 14, 17, 21, 39, 40, 46, 52, 55, 56, 58, 91, 94, 96, 98, 102, 103, 104, 108, 111, 119, 120, 129, 137, 138, 144, 145, 147, 149, 151, 154, 155, 157, 161, 168, 170, 175, 177, 178, 179, 180, 181, 183, 187, 194, 199, 205, 206, 211, 222, 223, 228, 241, 259, 263, 264, 275, 280, 281], "contain": [1, 2, 7, 12, 13, 15, 17, 18, 21, 34, 35, 39, 43, 49, 52, 53, 58, 70, 71, 72, 85, 88, 93, 94, 98, 101, 102, 107, 108, 111, 112, 119, 120, 126, 133, 136, 137, 138, 142, 143, 144, 149, 151, 154, 169, 173, 175, 177, 178, 179, 181, 182, 183, 185, 187, 188, 190, 191, 194, 195, 197, 198, 220, 223, 226, 228, 236, 238, 239, 241, 243, 253, 254, 257, 263, 264, 275, 281], "trainabl": [1, 7, 71, 103, 105], "paramet": [1, 9, 13, 14, 15, 17, 18, 20, 21, 26, 33, 35, 36, 37, 40, 42, 43, 45, 46, 49, 51, 52, 54, 55, 70, 71, 78, 88, 91, 93, 96, 102, 103, 105, 107, 110, 111, 116, 118, 119, 126, 129, 131, 132, 136, 137, 138, 139, 141, 143, 144, 149, 151, 153, 154, 155, 157, 159, 160, 161, 165, 168, 169, 170, 181, 182, 185, 187, 188, 190, 194, 195, 199, 203, 205, 206, 211, 212, 213, 220, 223, 227, 228, 229, 230, 235, 236, 237, 241, 242, 243, 247, 251, 257, 258, 259, 260, 265, 272, 279, 281], "tutori": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 26, 27, 28, 29, 30, 31, 32, 36, 39, 44, 45, 46, 47, 48, 54, 56, 58, 59, 63, 78, 79, 80, 81, 82, 83, 84, 85, 87, 91, 94, 95, 98, 100, 102, 104, 106, 107, 111, 112, 113, 114, 115, 116, 119, 120, 121, 122, 124, 125, 128, 129, 130, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 176, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 195, 196, 199, 200, 201, 203, 204, 205, 206, 207, 208, 210, 211, 212, 222, 223, 227, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 243, 245, 246, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 283, 284, 285], "guid": [1, 8, 12, 21, 63, 85, 88, 116, 133, 134, 136, 137, 153, 162, 176, 184, 187, 194, 195, 211, 220, 222, 224, 227, 235, 257, 259, 260, 265, 279, 281], "you": [1, 2, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 26, 32, 33, 34, 35, 37, 38, 40, 42, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 70, 71, 78, 80, 81, 82, 83, 84, 85, 88, 90, 91, 93, 94, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 116, 118, 119, 120, 123, 126, 129, 130, 132, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 166, 168, 169, 170, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 185, 187, 188, 190, 191, 192, 194, 195, 197, 199, 200, 201, 203, 205, 206, 207, 208, 212, 213, 220, 223, 224, 225, 226, 228, 229, 237, 239, 240, 241, 242, 243, 244, 248, 249, 251, 252, 254, 255, 258, 259, 261, 264, 265, 266, 267, 272, 273, 274, 275, 276, 277, 279, 280, 281, 284], "through": [1, 3, 7, 9, 12, 13, 16, 17, 18, 20, 26, 33, 34, 38, 39, 45, 49, 52, 55, 57, 58, 87, 89, 91, 93, 96, 98, 100, 102, 103, 105, 106, 107, 108, 111, 112, 113, 115, 116, 119, 123, 131, 132, 136, 138, 139, 140, 141, 142, 144, 146, 147, 148, 153, 155, 158, 159, 160, 161, 162, 165, 168, 170, 171, 173, 174, 177, 178, 179, 180, 181, 182, 183, 187, 188, 190, 191, 192, 194, 195, 199, 200, 205, 206, 212, 213, 223, 224, 229, 237, 242, 254, 257, 260, 264, 265, 266, 267, 272, 274, 279, 281, 284], "from": [1, 3, 4, 5, 7, 8, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 26, 33, 35, 38, 39, 40, 41, 42, 43, 46, 49, 50, 51, 52, 54, 55, 56, 58, 65, 66, 67, 70, 71, 72, 73, 75, 76, 77, 78, 85, 86, 88, 89, 91, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 115, 116, 117, 118, 119, 121, 123, 126, 129, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 187, 188, 191, 192, 194, 198, 199, 200, 205, 206, 208, 211, 212, 213, 214, 220, 223, 224, 226, 227, 229, 235, 236, 237, 238, 239, 241, 243, 246, 249, 250, 251, 253, 254, 257, 258, 259, 260, 261, 263, 264, 265, 267, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 285], "ground": [1, 17, 46, 78, 197], "up": [1, 3, 7, 9, 12, 13, 17, 19, 21, 23, 33, 35, 38, 52, 55, 58, 63, 74, 77, 85, 88, 93, 94, 96, 97, 98, 101, 103, 104, 105, 107, 108, 110, 111, 113, 118, 129, 130, 136, 137, 138, 139, 140, 141, 144, 145, 149, 150, 151, 153, 154, 155, 158, 159, 165, 168, 170, 171, 173, 176, 177, 178, 179, 180, 183, 187, 188, 192, 194, 195, 199, 201, 205, 207, 208, 213, 224, 229, 239, 242, 243, 253, 254, 255, 257, 258, 259, 260, 266, 277, 279, 281, 285], "us": [1, 4, 5, 6, 8, 10, 12, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 34, 35, 38, 39, 40, 42, 43, 46, 47, 49, 51, 52, 54, 55, 57, 58, 59, 60, 63, 65, 66, 68, 70, 71, 72, 75, 76, 78, 85, 88, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 115, 119, 123, 126, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 148, 150, 153, 158, 159, 160, 161, 162, 165, 166, 168, 169, 171, 173, 175, 176, 177, 178, 183, 184, 185, 191, 192, 194, 195, 197, 198, 199, 201, 203, 204, 205, 209, 211, 212, 213, 223, 224, 225, 226, 227, 230, 235, 236, 238, 241, 242, 243, 244, 246, 248, 249, 250, 252, 254, 256, 259, 260, 261, 263, 265, 266, 272, 273, 275, 277, 279, 280, 281, 284, 285], "To": [1, 4, 7, 12, 13, 14, 15, 17, 19, 20, 21, 33, 34, 38, 39, 40, 43, 49, 52, 53, 54, 60, 68, 76, 85, 86, 88, 91, 94, 100, 102, 103, 104, 105, 107, 108, 110, 111, 112, 115, 119, 120, 123, 129, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 153, 154, 157, 159, 168, 169, 171, 174, 175, 176, 177, 178, 179, 180, 182, 183, 187, 188, 190, 194, 195, 198, 199, 207, 208, 212, 213, 214, 220, 223, 224, 226, 228, 229, 236, 237, 238, 239, 240, 241, 242, 247, 251, 253, 254, 255, 257, 261, 263, 265, 266, 267, 272, 274, 275, 276, 281, 285], "aim": [1, 7, 103, 106, 140, 168, 178, 181, 214, 275], "we": [1, 2, 3, 4, 5, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 26, 33, 34, 35, 37, 38, 39, 40, 42, 43, 45, 46, 47, 49, 51, 52, 53, 54, 55, 58, 65, 66, 68, 70, 71, 72, 78, 85, 86, 88, 91, 94, 96, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 116, 118, 119, 126, 129, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 166, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 211, 212, 220, 222, 224, 226, 228, 229, 230, 236, 237, 238, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 261, 263, 264, 265, 266, 267, 272, 273, 274, 275, 276, 277, 279, 280, 281, 284, 285], "focus": [1, 3, 94, 103, 106, 131, 133, 174, 183, 195], "which": [1, 3, 4, 5, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 33, 34, 37, 38, 39, 40, 42, 43, 45, 46, 49, 51, 52, 53, 54, 55, 58, 59, 63, 65, 66, 70, 71, 72, 78, 85, 86, 88, 91, 93, 94, 96, 97, 98, 101, 102, 103, 104, 105, 107, 108, 110, 111, 113, 116, 118, 119, 120, 126, 129, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 153, 154, 155, 157, 158, 159, 160, 162, 165, 168, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 192, 194, 195, 197, 198, 199, 201, 204, 205, 206, 207, 208, 211, 220, 222, 223, 224, 225, 226, 228, 229, 236, 238, 239, 240, 241, 242, 243, 244, 248, 249, 251, 252, 253, 254, 255, 257, 258, 261, 264, 265, 272, 273, 274, 275, 276, 277, 279, 280, 281], "i": [1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 33, 34, 35, 37, 38, 39, 40, 42, 43, 45, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 61, 62, 63, 65, 66, 68, 71, 75, 76, 78, 80, 81, 82, 83, 84, 85, 88, 90, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 112, 113, 115, 116, 118, 119, 121, 123, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 153, 154, 157, 158, 159, 160, 161, 162, 165, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 192, 194, 195, 196, 197, 199, 200, 202, 203, 204, 205, 206, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 272, 273, 275, 276, 277, 278, 279, 280, 281], "rel": [1, 7, 94, 102, 126, 142, 160, 165, 181, 183, 198, 266], "straightforward": [1, 5, 7, 20, 21, 52, 93, 96, 101, 103, 104, 159, 171, 194, 198], "deep": [1, 5, 7, 15, 16, 37, 49, 52, 55, 72, 75, 76, 96, 97, 98, 101, 103, 107, 109, 110, 119, 130, 132, 133, 136, 144, 145, 146, 147, 151, 159, 160, 161, 169, 175, 178, 183, 190, 195, 199, 200, 201, 203, 204, 214, 220, 226, 238, 239, 244, 257, 260], "determinist": [1, 14, 17, 139, 154, 178, 238, 239], "gradient": [1, 4, 7, 13, 14, 16, 17, 19, 20, 38, 45, 46, 49, 52, 55, 59, 63, 65, 66, 68, 70, 71, 75, 76, 93, 96, 98, 101, 102, 103, 104, 105, 107, 111, 119, 126, 129, 131, 136, 137, 138, 141, 142, 144, 146, 148, 149, 151, 153, 157, 160, 161, 168, 175, 177, 179, 180, 181, 184, 188, 190, 195, 206, 222, 227, 235, 258, 259, 260, 272, 284], "simpl": [1, 3, 4, 5, 7, 9, 12, 15, 18, 20, 21, 26, 49, 52, 54, 57, 59, 70, 78, 88, 91, 94, 96, 98, 101, 102, 103, 111, 112, 115, 119, 120, 129, 130, 132, 136, 137, 142, 143, 146, 148, 153, 155, 159, 160, 165, 170, 171, 173, 175, 177, 179, 180, 181, 182, 184, 185, 187, 192, 194, 195, 201, 203, 204, 206, 208, 211, 213, 224, 228, 237, 238, 239, 241, 251, 254, 255, 258, 260, 261, 276, 279, 281], "continu": [1, 52, 56, 88, 91, 96, 101, 103, 108, 111, 139, 140, 141, 145, 149, 153, 177, 181, 183, 187, 192, 207, 224, 226, 229, 239, 240, 241, 242, 244, 263, 264, 272, 274, 275, 281], "control": [1, 12, 13, 17, 33, 35, 38, 45, 69, 73, 86, 88, 93, 103, 113, 114, 115, 116, 123, 130, 136, 138, 139, 140, 142, 143, 153, 157, 169, 177, 178, 179, 192, 207, 220, 224, 243, 244, 246, 259, 260, 280], "It": [1, 4, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 26, 27, 28, 29, 30, 31, 33, 43, 45, 46, 47, 49, 52, 54, 55, 78, 79, 85, 91, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 115, 120, 126, 129, 135, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 165, 168, 169, 170, 171, 175, 178, 179, 181, 183, 185, 186, 187, 189, 190, 193, 194, 195, 197, 198, 205, 206, 208, 224, 225, 237, 239, 242, 247, 249, 251, 253, 254, 257, 261, 263, 277, 281, 284], "consist": [1, 3, 4, 7, 9, 17, 18, 26, 33, 34, 35, 38, 45, 103, 105, 111, 139, 141, 149, 158, 161, 165, 168, 177, 178, 182, 183, 187, 191, 195, 198, 204, 224, 229, 239, 261, 263, 274, 275], "learn": [1, 4, 5, 7, 16, 17, 19, 21, 22, 33, 34, 35, 38, 39, 40, 42, 43, 45, 47, 49, 52, 54, 55, 56, 57, 58, 59, 63, 72, 75, 76, 78, 85, 87, 89, 90, 91, 93, 94, 96, 97, 98, 101, 102, 103, 107, 109, 110, 111, 112, 113, 115, 116, 120, 121, 123, 129, 130, 131, 133, 134, 135, 136, 137, 138, 140, 143, 144, 145, 146, 149, 150, 151, 153, 154, 159, 160, 162, 166, 168, 169, 170, 173, 175, 176, 180, 183, 184, 185, 188, 190, 191, 194, 195, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 211, 212, 214, 220, 222, 228, 236, 239, 243, 244, 247, 248, 249, 252, 254, 258, 259, 260, 261, 264, 265, 272, 273, 274, 275, 276, 277, 280, 281, 285], "parametr": [1, 2, 21, 131, 136, 177, 184, 260, 281], "an": [1, 2, 3, 5, 7, 8, 9, 10, 12, 14, 15, 16, 18, 19, 20, 21, 23, 26, 33, 34, 35, 37, 38, 39, 40, 42, 45, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 68, 70, 72, 78, 85, 86, 88, 90, 91, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 111, 112, 113, 115, 118, 119, 126, 129, 130, 131, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 150, 151, 153, 155, 157, 158, 159, 160, 161, 162, 165, 166, 168, 169, 170, 171, 174, 175, 176, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 192, 194, 197, 198, 199, 201, 203, 205, 206, 208, 211, 212, 213, 214, 220, 222, 223, 224, 225, 226, 227, 229, 230, 235, 236, 238, 239, 241, 243, 244, 246, 248, 251, 252, 253, 254, 255, 259, 260, 261, 264, 265, 266, 267, 272, 274, 275, 276, 277, 279, 280, 281, 284, 285], "action": [1, 98, 102, 107, 111, 137, 138, 161, 175, 177, 178, 179, 180, 181, 187, 229, 238, 254, 259, 261], "pair": [1, 7, 49, 52, 55, 94, 144, 145, 147, 170, 177, 178, 183, 187, 197, 204, 214, 220, 238], "output": [1, 2, 3, 4, 5, 7, 8, 13, 14, 15, 17, 19, 20, 21, 33, 34, 38, 42, 45, 46, 47, 49, 51, 52, 55, 65, 66, 68, 70, 71, 72, 75, 76, 78, 85, 86, 88, 91, 93, 94, 96, 98, 101, 102, 103, 105, 107, 108, 110, 111, 113, 116, 118, 119, 120, 123, 126, 129, 137, 138, 139, 141, 142, 144, 145, 146, 151, 153, 154, 155, 157, 159, 160, 162, 165, 170, 171, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 185, 188, 190, 192, 194, 197, 198, 199, 201, 203, 207, 211, 212, 213, 214, 222, 224, 226, 229, 230, 237, 239, 247, 255, 258, 261, 263, 265, 267, 276, 277, 279, 281], "maxim": [1, 17, 55, 78, 85, 103, 105, 143, 161, 178, 192, 239, 257], "given": [1, 4, 7, 9, 12, 13, 15, 17, 19, 21, 33, 35, 38, 42, 43, 45, 51, 52, 55, 58, 78, 85, 88, 94, 98, 102, 103, 106, 107, 110, 111, 120, 138, 144, 145, 153, 155, 157, 160, 161, 162, 170, 175, 177, 178, 180, 181, 183, 192, 194, 195, 197, 212, 214, 224, 230, 239, 250, 254, 258, 264, 275, 281], "certain": [1, 7, 13, 14, 18, 52, 58, 94, 107, 132, 138, 141, 142, 147, 157, 160, 162, 177, 182, 192, 194, 195, 222, 226, 250, 251, 254, 257, 263, 272, 275, 277], "what": [1, 2, 3, 4, 5, 9, 12, 17, 19, 23, 33, 34, 35, 45, 47, 48, 56, 57, 58, 63, 78, 90, 91, 94, 96, 98, 101, 102, 104, 105, 107, 108, 110, 112, 116, 121, 123, 135, 136, 138, 140, 141, 142, 143, 145, 146, 149, 150, 153, 154, 161, 162, 168, 173, 175, 177, 178, 179, 182, 188, 190, 191, 194, 195, 197, 198, 199, 203, 205, 223, 224, 225, 226, 227, 228, 235, 238, 239, 254, 259, 260, 261, 264, 274, 280], "how": [1, 2, 4, 5, 7, 8, 9, 12, 13, 15, 17, 19, 20, 21, 23, 33, 35, 38, 39, 40, 45, 46, 47, 49, 52, 53, 54, 55, 58, 59, 60, 78, 85, 88, 90, 91, 93, 94, 96, 98, 101, 102, 103, 105, 106, 107, 108, 110, 111, 112, 113, 116, 118, 126, 129, 130, 131, 132, 133, 134, 135, 136, 140, 142, 143, 144, 145, 146, 148, 149, 151, 153, 154, 155, 157, 158, 159, 161, 162, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 201, 204, 205, 207, 211, 212, 222, 223, 224, 227, 228, 229, 235, 236, 238, 239, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 259, 260, 261, 263, 264, 265, 272, 273, 274, 275, 276, 277, 279, 281, 285], "write": [1, 4, 5, 8, 9, 10, 12, 13, 19, 22, 46, 52, 63, 66, 100, 104, 105, 106, 107, 111, 119, 121, 126, 133, 135, 136, 140, 142, 143, 148, 149, 151, 154, 157, 159, 165, 169, 171, 174, 177, 180, 181, 183, 187, 190, 192, 194, 198, 206, 223, 224, 225, 226, 230, 239, 254, 260, 263, 264, 275, 279, 282, 284], "custom": [1, 7, 12, 14, 21, 22, 52, 55, 66, 69, 73, 94, 111, 118, 121, 131, 133, 135, 136, 139, 143, 154, 161, 171, 177, 180, 184, 190, 191, 192, 195, 198, 211, 213, 220, 223, 227, 236, 239, 247, 250, 251, 260, 279, 281], "its": [1, 2, 3, 4, 5, 7, 8, 9, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 33, 34, 38, 43, 45, 49, 52, 54, 55, 56, 58, 71, 85, 93, 94, 96, 98, 101, 103, 105, 107, 108, 110, 111, 113, 118, 119, 120, 129, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 151, 153, 154, 155, 157, 158, 159, 161, 162, 168, 169, 173, 175, 177, 178, 179, 180, 181, 183, 187, 188, 192, 194, 195, 199, 201, 206, 208, 213, 214, 220, 223, 224, 226, 228, 229, 236, 239, 240, 241, 242, 258, 265, 274, 275, 277, 280, 281], "includ": [1, 2, 3, 4, 5, 7, 8, 9, 12, 17, 18, 19, 26, 38, 39, 42, 51, 52, 56, 58, 63, 72, 78, 85, 88, 91, 93, 94, 96, 98, 101, 102, 103, 104, 111, 113, 115, 116, 118, 131, 141, 143, 144, 145, 146, 148, 149, 151, 153, 154, 159, 161, 171, 173, 174, 175, 177, 180, 183, 187, 188, 191, 192, 194, 195, 197, 198, 206, 207, 211, 212, 213, 214, 220, 222, 223, 224, 226, 229, 236, 239, 249, 251, 252, 257, 263, 265, 272, 274, 276, 279, 280], "design": [1, 7, 17, 21, 26, 55, 59, 78, 88, 94, 110, 111, 145, 151, 154, 171, 177, 178, 179, 181, 182, 187, 188, 194, 201, 212, 224, 226, 239, 247, 251, 254, 257, 261, 272, 273, 274, 279, 281, 284], "effici": [1, 5, 13, 15, 18, 21, 33, 52, 54, 78, 85, 101, 103, 107, 110, 130, 131, 137, 138, 141, 143, 151, 153, 154, 160, 165, 175, 177, 181, 182, 187, 190, 195, 205, 224, 228, 247, 251, 257, 260, 263, 266, 275, 276, 277, 281, 282], "store": [1, 7, 9, 20, 21, 33, 34, 35, 39, 40, 42, 45, 51, 54, 56, 71, 91, 93, 100, 101, 104, 105, 107, 110, 111, 113, 119, 129, 140, 142, 143, 145, 153, 154, 159, 161, 162, 169, 171, 173, 174, 175, 177, 178, 179, 180, 181, 183, 194, 195, 211, 229, 238, 239, 248, 249, 261, 265, 275, 276, 281], "them": [1, 2, 3, 4, 7, 12, 13, 14, 15, 17, 21, 23, 33, 35, 38, 45, 46, 49, 51, 52, 54, 56, 58, 63, 70, 71, 91, 93, 94, 96, 98, 100, 101, 102, 103, 106, 107, 108, 110, 111, 112, 113, 115, 116, 119, 120, 129, 130, 131, 136, 138, 139, 141, 143, 144, 145, 147, 148, 153, 154, 155, 158, 159, 160, 165, 168, 169, 170, 171, 175, 176, 178, 179, 180, 181, 190, 191, 192, 194, 197, 198, 199, 204, 212, 213, 223, 224, 228, 236, 238, 239, 248, 249, 257, 259, 261, 265, 274, 276, 277, 280, 281], "trajectori": [1, 17, 154, 177, 178], "transit": [1, 17, 88, 90, 104, 154, 171, 178], "assum": [1, 2, 7, 8, 12, 13, 17, 18, 37, 45, 46, 54, 57, 78, 93, 96, 97, 103, 104, 106, 108, 111, 116, 129, 141, 142, 144, 145, 153, 154, 169, 175, 177, 180, 182, 183, 197, 206, 228, 229, 236, 238, 254, 274, 275, 277], "have": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 26, 33, 34, 35, 38, 42, 43, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 58, 60, 71, 72, 78, 85, 86, 88, 91, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 118, 119, 120, 123, 126, 129, 132, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 190, 191, 192, 194, 195, 197, 198, 199, 201, 204, 205, 206, 207, 208, 211, 212, 213, 220, 223, 224, 225, 226, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 251, 252, 253, 254, 257, 258, 261, 263, 264, 265, 266, 272, 273, 274, 275, 276, 277, 279, 280, 281, 284], "complet": [1, 7, 18, 37, 88, 91, 93, 96, 104, 105, 107, 116, 136, 138, 140, 141, 143, 144, 146, 148, 153, 171, 173, 175, 176, 177, 180, 190, 192, 197, 222, 239, 253, 254, 263, 265, 274, 275, 279], "ppo": [1, 133, 136, 184, 260], "give": [1, 2, 7, 14, 17, 21, 38, 47, 49, 52, 53, 55, 78, 93, 94, 96, 98, 103, 105, 107, 108, 110, 111, 120, 145, 149, 155, 158, 159, 160, 161, 170, 176, 180, 183, 187, 190, 192, 194, 195, 198, 212, 224, 273, 277, 281], "compon": [1, 7, 12, 13, 17, 55, 88, 98, 103, 107, 120, 131, 135, 136, 143, 144, 146, 154, 161, 177, 181, 185, 187, 191, 192, 194, 198, 201, 249, 277], "depend": [1, 7, 9, 12, 14, 49, 53, 55, 78, 85, 88, 93, 94, 100, 101, 103, 104, 108, 111, 141, 143, 144, 147, 148, 153, 154, 157, 158, 160, 161, 171, 174, 176, 177, 180, 187, 192, 198, 201, 203, 212, 224, 225, 230, 236, 239, 243, 244, 257, 265, 274, 285], "tensordict": [1, 17, 154, 161, 171, 177], "nn": [1, 2, 7, 8, 9, 14, 15, 16, 17, 18, 20, 21, 23, 38, 39, 40, 45, 46, 47, 49, 52, 58, 69, 72, 73, 91, 93, 96, 102, 105, 110, 115, 118, 121, 126, 129, 131, 136, 137, 138, 139, 141, 142, 144, 145, 146, 147, 151, 154, 155, 157, 165, 169, 170, 173, 177, 178, 179, 180, 181, 182, 184, 188, 190, 192, 194, 195, 199, 203, 205, 206, 208, 211, 212, 213, 220, 223, 226, 227, 229, 230, 235, 237, 239, 240, 241, 243, 244, 247, 258, 259, 260, 261, 264, 273, 276, 277, 281], "tensordictmodul": [1, 154, 177], "although": [1, 15, 20, 45, 52, 104, 105, 110, 111, 113, 116, 129, 140, 142, 161, 169, 171, 180, 192, 194, 212], "should": [1, 2, 4, 7, 8, 9, 12, 13, 14, 17, 18, 19, 20, 23, 33, 45, 46, 52, 53, 54, 55, 56, 58, 72, 78, 85, 88, 91, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 113, 119, 126, 135, 136, 138, 139, 140, 142, 143, 146, 148, 151, 153, 154, 155, 158, 161, 162, 165, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 188, 190, 191, 192, 194, 195, 197, 199, 205, 206, 212, 220, 223, 224, 229, 237, 238, 239, 242, 250, 254, 257, 259, 263, 264, 265, 267, 272, 273, 274, 279, 280, 284], "suffici": [1, 7, 52, 55, 103, 104, 126, 149, 151, 168, 171, 194], "transpar": [1, 15, 94, 105, 154, 180, 207, 213, 248], "understood": [1, 4, 19, 251], "without": [1, 7, 12, 13, 17, 19, 21, 33, 52, 56, 58, 98, 101, 103, 104, 115, 136, 137, 139, 141, 142, 145, 146, 153, 155, 157, 158, 160, 161, 162, 168, 171, 174, 175, 176, 177, 178, 179, 182, 187, 190, 194, 199, 204, 205, 208, 223, 228, 230, 236, 239, 249, 250, 252, 258, 264, 272, 274, 275, 277, 280, 281], "understand": [1, 2, 4, 5, 7, 10, 18, 45, 46, 55, 60, 85, 88, 93, 95, 96, 97, 98, 100, 101, 102, 104, 107, 111, 112, 116, 121, 126, 131, 136, 139, 142, 143, 144, 145, 148, 153, 157, 159, 171, 183, 190, 194, 195, 199, 200, 205, 208, 220, 222, 237, 241, 244, 248, 249, 251, 253, 254, 257, 260, 264, 273, 276], "class": [1, 2, 5, 7, 12, 13, 16, 18, 26, 33, 35, 37, 39, 40, 46, 49, 52, 55, 56, 68, 70, 78, 86, 88, 94, 96, 98, 100, 101, 102, 105, 106, 110, 111, 116, 119, 120, 126, 136, 137, 138, 139, 143, 144, 146, 148, 149, 151, 153, 154, 155, 158, 159, 161, 162, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 188, 190, 194, 197, 199, 205, 206, 208, 212, 220, 222, 224, 226, 238, 242, 243, 244, 254, 263, 272, 273, 274, 276], "do": [1, 2, 3, 4, 7, 9, 10, 13, 14, 15, 16, 17, 18, 19, 21, 23, 33, 34, 40, 49, 52, 53, 54, 55, 57, 65, 66, 72, 88, 91, 96, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 113, 119, 120, 123, 129, 131, 136, 137, 141, 142, 143, 144, 150, 151, 153, 154, 155, 158, 159, 160, 161, 165, 168, 169, 171, 174, 175, 176, 177, 178, 181, 183, 188, 190, 194, 195, 197, 198, 199, 206, 220, 223, 224, 225, 228, 236, 237, 238, 239, 240, 242, 251, 252, 253, 259, 261, 263, 265, 273, 274, 275, 280, 281, 284], "sota": 1, "implement": [1, 2, 3, 7, 8, 13, 14, 15, 16, 17, 18, 21, 26, 34, 35, 37, 45, 47, 49, 52, 54, 58, 60, 63, 65, 66, 68, 70, 71, 72, 75, 76, 88, 93, 96, 102, 110, 111, 112, 119, 131, 132, 133, 136, 139, 141, 142, 144, 146, 148, 153, 154, 155, 157, 159, 160, 161, 162, 165, 170, 171, 173, 175, 177, 178, 181, 184, 187, 191, 194, 195, 197, 198, 201, 205, 212, 213, 224, 228, 236, 239, 247, 248, 250, 251, 254, 257, 260, 261, 263, 266, 273, 275, 276, 277, 279, 280, 281], "rather": [1, 16, 52, 55, 72, 78, 88, 98, 101, 103, 110, 111, 120, 136, 145, 147, 159, 169, 170, 171, 177, 190, 194, 198, 201, 224, 239, 248, 252, 263, 265, 272], "provid": [1, 4, 7, 8, 12, 13, 14, 17, 18, 19, 20, 21, 23, 26, 34, 35, 46, 52, 54, 55, 58, 59, 78, 85, 86, 88, 91, 93, 94, 96, 101, 102, 103, 104, 105, 111, 112, 115, 116, 119, 120, 132, 135, 136, 138, 140, 141, 142, 143, 149, 150, 151, 153, 154, 158, 159, 160, 161, 171, 175, 176, 177, 179, 180, 182, 187, 190, 191, 192, 194, 195, 197, 198, 201, 206, 207, 211, 212, 213, 214, 220, 222, 223, 224, 226, 228, 229, 237, 238, 239, 243, 244, 249, 252, 253, 254, 257, 263, 274, 275, 281, 284, 285], "high": [1, 2, 7, 18, 46, 52, 55, 56, 58, 60, 63, 85, 88, 98, 105, 110, 113, 118, 131, 136, 137, 138, 141, 143, 146, 147, 153, 184, 187, 188, 190, 194, 195, 214, 238, 239, 251, 257, 258, 260, 266, 275, 279, 285], "level": [1, 2, 4, 7, 19, 21, 46, 52, 56, 58, 60, 63, 71, 98, 106, 113, 119, 136, 137, 138, 141, 146, 149, 151, 153, 157, 159, 162, 166, 182, 183, 184, 187, 190, 192, 194, 195, 198, 207, 208, 248, 258, 260, 279, 281, 285], "illustr": [1, 34, 46, 49, 59, 126, 141, 142, 143, 155, 171, 178, 188, 190, 197, 199, 208, 220, 222, 229, 236, 274, 275], "": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 14, 15, 17, 20, 21, 23, 26, 33, 34, 35, 37, 38, 39, 42, 43, 45, 46, 47, 49, 51, 52, 54, 55, 56, 58, 60, 71, 78, 88, 91, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 108, 110, 111, 112, 113, 115, 116, 118, 119, 120, 126, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 147, 148, 149, 151, 153, 154, 155, 157, 158, 159, 160, 162, 165, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 211, 212, 222, 223, 224, 226, 228, 229, 236, 237, 238, 239, 241, 242, 243, 244, 248, 249, 251, 257, 258, 259, 261, 263, 265, 266, 267, 272, 274, 275, 277, 280, 281, 284, 285], "librari": [1, 3, 4, 5, 7, 8, 9, 10, 12, 15, 17, 19, 23, 35, 39, 46, 53, 54, 60, 63, 91, 94, 111, 115, 116, 129, 133, 136, 140, 143, 147, 148, 158, 171, 173, 174, 176, 177, 181, 187, 195, 198, 199, 201, 208, 212, 213, 220, 243, 244, 251, 253, 263, 267, 276, 283], "featur": [1, 7, 8, 9, 13, 14, 15, 17, 35, 39, 43, 52, 53, 54, 55, 85, 86, 88, 93, 96, 98, 101, 103, 104, 110, 111, 115, 119, 136, 137, 142, 146, 154, 159, 160, 161, 168, 171, 174, 176, 177, 181, 182, 188, 192, 194, 197, 198, 201, 211, 212, 220, 222, 226, 228, 236, 238, 239, 242, 244, 248, 251, 254, 259, 266, 275, 276, 277, 279, 280, 281, 284, 285], "context": [1, 2, 12, 17, 20, 21, 45, 52, 78, 93, 98, 110, 111, 118, 129, 132, 141, 146, 157, 169, 171, 177, 180, 181, 182, 183, 187, 192, 198, 207, 223, 225, 228, 229, 230, 239, 252, 254, 257, 264, 266, 276, 281, 285], "bash": [1, 23, 161, 178, 220], "pip3": [1, 23, 53, 138, 154, 171, 177, 178, 187, 195, 265], "instal": [1, 4, 5, 7, 12, 21, 26, 37, 53, 54, 56, 58, 60, 91, 97, 100, 111, 115, 129, 137, 138, 141, 144, 145, 149, 150, 153, 154, 157, 158, 161, 166, 171, 174, 177, 178, 179, 183, 187, 190, 192, 197, 199, 212, 220, 222, 224, 226, 229, 238, 240, 241, 242, 243, 244, 251, 257, 263, 264, 265, 280], "mujoco": [1, 154, 177], "glfw": 1, "cuda": [1, 5, 7, 12, 13, 14, 15, 18, 21, 23, 26, 34, 39, 42, 45, 46, 47, 56, 57, 58, 65, 66, 76, 78, 86, 91, 101, 105, 111, 118, 119, 120, 126, 130, 135, 136, 137, 138, 139, 140, 141, 144, 147, 149, 150, 151, 153, 155, 162, 168, 169, 173, 174, 178, 179, 180, 181, 182, 187, 190, 192, 195, 197, 203, 204, 205, 206, 208, 211, 214, 223, 224, 225, 229, 249, 252, 253, 254, 258, 259, 261, 263, 264, 265, 266, 276, 281], "avail": [1, 2, 3, 4, 5, 7, 9, 13, 15, 18, 21, 23, 33, 34, 35, 38, 39, 40, 42, 45, 46, 51, 52, 53, 54, 55, 56, 65, 78, 91, 94, 96, 98, 101, 102, 103, 107, 111, 113, 119, 126, 138, 142, 144, 153, 154, 157, 161, 162, 171, 175, 176, 177, 178, 181, 182, 183, 187, 190, 191, 194, 195, 197, 206, 213, 214, 220, 222, 224, 225, 226, 239, 240, 241, 242, 243, 244, 253, 255, 263, 279, 281, 284, 285], "seri": [1, 7, 18, 55, 56, 57, 58, 59, 85, 95, 98, 101, 102, 132, 136, 140, 144, 145, 149, 150, 158, 166, 175, 177, 183, 198, 200, 212, 257, 274], "easili": [1, 15, 26, 34, 47, 63, 78, 94, 101, 102, 103, 111, 118, 119, 120, 138, 141, 143, 144, 151, 153, 158, 159, 165, 175, 177, 178, 181, 190, 192, 194, 197, 205, 206, 208, 224, 241, 261, 265, 279, 285], "reusabl": [1, 7], "swappabl": 1, "signatur": [1, 12, 13, 17, 18, 116, 153, 169, 180, 191, 194, 211], "main": [1, 3, 5, 7, 14, 20, 38, 55, 56, 58, 91, 103, 116, 119, 137, 138, 144, 149, 153, 159, 171, 178, 179, 180, 181, 185, 194, 195, 197, 198, 205, 213, 220, 239, 258, 265, 266, 284, 285], "characterist": [1, 17, 45, 146, 158, 160, 161, 176, 182, 194, 254], "thei": [1, 3, 7, 12, 13, 15, 17, 19, 20, 34, 35, 42, 46, 51, 52, 55, 58, 78, 85, 88, 93, 96, 98, 101, 102, 103, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 118, 119, 120, 129, 138, 142, 143, 144, 145, 148, 151, 153, 154, 159, 160, 162, 168, 169, 177, 178, 179, 181, 183, 190, 194, 195, 198, 201, 206, 208, 213, 224, 228, 229, 237, 238, 241, 242, 267, 272, 273, 274, 275, 277], "copi": [1, 7, 15, 23, 37, 42, 46, 47, 53, 58, 78, 85, 93, 97, 102, 103, 118, 120, 123, 136, 137, 142, 147, 151, 153, 154, 155, 158, 161, 169, 180, 187, 190, 191, 194, 205, 211, 212, 228, 239, 261, 263, 279], "loss_modul": 1, "whatev": [1, 9, 12, 96, 101, 102, 105, 107, 111, 120, 220], "need": [1, 3, 4, 5, 7, 9, 13, 14, 15, 17, 18, 19, 20, 21, 23, 26, 33, 34, 35, 38, 39, 40, 42, 43, 45, 46, 47, 49, 52, 53, 54, 56, 57, 58, 63, 65, 66, 70, 85, 86, 91, 94, 96, 100, 101, 102, 103, 105, 107, 108, 110, 111, 113, 119, 120, 126, 129, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 168, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 190, 191, 192, 194, 195, 197, 199, 205, 206, 208, 211, 212, 213, 220, 223, 224, 226, 229, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 252, 253, 254, 263, 264, 265, 272, 276, 277, 280, 281], "follow": [1, 2, 3, 4, 5, 7, 8, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 23, 33, 34, 35, 37, 38, 42, 46, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 78, 85, 86, 88, 90, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 113, 115, 116, 120, 123, 126, 129, 136, 137, 138, 139, 141, 142, 143, 146, 149, 150, 151, 153, 154, 158, 159, 160, 161, 162, 166, 168, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 182, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 206, 208, 212, 213, 220, 223, 226, 228, 229, 230, 236, 237, 243, 244, 247, 248, 249, 251, 253, 254, 257, 261, 263, 264, 266, 273, 275, 276, 277, 279, 280, 281, 284], "convent": [1, 17, 55, 111, 120, 129, 154, 190, 198, 224], "torch": [1, 2, 3, 5, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 19, 21, 23, 24, 25, 34, 35, 36, 38, 39, 40, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 60, 63, 65, 66, 70, 76, 78, 88, 91, 93, 94, 96, 100, 101, 102, 103, 105, 108, 110, 113, 115, 116, 118, 119, 121, 126, 129, 130, 131, 135, 136, 137, 138, 139, 140, 141, 145, 148, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 190, 195, 197, 199, 201, 204, 205, 206, 208, 209, 212, 213, 214, 220, 225, 226, 227, 229, 230, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 256, 258, 259, 260, 261, 263, 265, 266, 272, 273, 275, 276, 277, 280, 281, 282, 285], "receiv": [1, 7, 17, 20, 58, 91, 101, 107, 119, 153, 171, 173, 177, 179, 180, 181, 192, 195, 223, 226, 239, 263], "input": [1, 2, 4, 7, 8, 12, 13, 15, 16, 17, 19, 20, 33, 34, 37, 38, 42, 45, 46, 47, 49, 51, 52, 59, 63, 65, 66, 68, 70, 71, 72, 75, 76, 86, 88, 91, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 116, 118, 119, 120, 129, 132, 137, 138, 141, 143, 144, 145, 146, 147, 149, 151, 153, 154, 155, 157, 159, 160, 161, 162, 165, 168, 170, 173, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 192, 194, 197, 201, 203, 206, 211, 212, 213, 214, 222, 223, 226, 229, 230, 242, 243, 248, 252, 254, 257, 261, 265, 275, 277, 279, 281, 284], "all": [1, 2, 3, 5, 7, 9, 12, 13, 14, 15, 17, 18, 20, 21, 23, 33, 34, 35, 38, 39, 42, 43, 45, 46, 47, 49, 52, 53, 54, 55, 56, 58, 59, 63, 78, 85, 88, 93, 94, 96, 98, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 118, 120, 123, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 162, 165, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 188, 190, 191, 192, 194, 195, 197, 199, 207, 211, 213, 220, 222, 224, 226, 228, 236, 237, 238, 240, 241, 242, 243, 244, 248, 249, 251, 252, 254, 255, 257, 258, 259, 260, 261, 263, 264, 265, 272, 273, 275, 277, 279, 280, 281, 284, 285], "necessari": [1, 4, 7, 12, 13, 15, 18, 23, 26, 40, 46, 55, 56, 58, 88, 91, 101, 102, 104, 111, 120, 129, 137, 138, 141, 147, 151, 161, 173, 179, 180, 181, 187, 194, 199, 214, 223, 239, 243, 244, 252, 261, 274, 277, 279, 280], "inform": [1, 2, 4, 9, 10, 12, 13, 17, 19, 33, 47, 52, 56, 78, 85, 91, 93, 98, 100, 101, 103, 107, 108, 110, 120, 137, 142, 143, 144, 145, 151, 153, 154, 157, 158, 161, 176, 177, 178, 180, 182, 183, 187, 188, 190, 192, 194, 195, 197, 199, 201, 206, 207, 208, 220, 223, 224, 238, 239, 241, 242, 252, 255, 257, 263, 264, 265, 275, 277, 279, 284], "return": [1, 2, 4, 5, 7, 8, 12, 13, 14, 15, 17, 18, 19, 20, 23, 34, 35, 39, 42, 47, 49, 52, 54, 55, 70, 78, 85, 93, 94, 96, 101, 102, 103, 105, 107, 108, 111, 113, 116, 118, 119, 120, 129, 137, 138, 139, 141, 145, 146, 148, 151, 153, 154, 155, 157, 159, 161, 162, 165, 169, 173, 174, 176, 177, 178, 179, 180, 181, 182, 187, 188, 190, 192, 194, 195, 197, 203, 205, 206, 208, 211, 212, 213, 214, 220, 222, 224, 226, 229, 238, 249, 252, 254, 266, 267, 272, 274, 276, 279, 280, 281, 284], "replay_buff": 1, "sampl": [1, 4, 5, 7, 12, 34, 35, 38, 39, 42, 46, 49, 51, 52, 54, 55, 58, 63, 91, 96, 98, 100, 101, 103, 120, 126, 131, 136, 137, 144, 147, 153, 160, 161, 168, 169, 177, 178, 179, 181, 184, 190, 194, 197, 198, 203, 222, 229, 238, 239, 243, 252, 260, 277, 284], "loss_dict": 1, "instanc": [1, 7, 9, 14, 15, 17, 34, 40, 47, 56, 57, 58, 63, 85, 91, 96, 98, 101, 102, 103, 104, 105, 108, 110, 111, 112, 119, 137, 138, 142, 143, 146, 149, 150, 151, 154, 159, 161, 171, 173, 177, 179, 180, 181, 192, 199, 211, 212, 213, 220, 223, 229, 237, 238, 239, 243, 244, 254, 257, 258, 280], "written": [1, 4, 5, 7, 8, 9, 12, 13, 17, 19, 88, 100, 106, 111, 112, 148, 154, 158, 165, 169, 170, 173, 182, 187, 190, 211, 213, 237, 249, 251, 263, 264, 265, 272], "under": [1, 12, 23, 33, 49, 52, 53, 55, 57, 59, 63, 100, 103, 105, 118, 119, 139, 141, 142, 146, 153, 160, 161, 169, 171, 175, 181, 187, 188, 197, 206, 207, 220, 223, 248, 251, 264, 273, 275], "loss_": 1, "smth": 1, "where": [1, 3, 4, 7, 12, 14, 15, 16, 17, 20, 21, 23, 26, 33, 35, 49, 52, 54, 63, 66, 71, 86, 88, 91, 93, 94, 96, 98, 100, 101, 103, 104, 105, 107, 108, 110, 119, 136, 138, 141, 143, 144, 145, 148, 150, 151, 153, 155, 159, 162, 165, 168, 169, 170, 171, 173, 176, 177, 178, 179, 180, 181, 182, 183, 188, 192, 194, 195, 197, 198, 205, 208, 211, 220, 223, 224, 226, 236, 237, 238, 242, 254, 257, 261, 263, 265, 272, 275, 276, 281], "string": [1, 4, 8, 9, 12, 18, 52, 70, 101, 113, 119, 143, 144, 145, 154, 175, 177, 183, 190, 195, 220, 224, 238, 263], "describ": [1, 7, 12, 13, 17, 18, 20, 40, 42, 51, 52, 55, 63, 78, 96, 103, 113, 116, 123, 132, 153, 165, 173, 177, 178, 181, 187, 190, 194, 195, 199, 208, 211, 224, 257], "addit": [1, 2, 4, 8, 12, 14, 18, 21, 53, 58, 78, 94, 96, 101, 103, 108, 111, 113, 118, 138, 141, 142, 144, 151, 153, 155, 159, 162, 175, 179, 180, 183, 188, 191, 192, 194, 198, 205, 212, 224, 229, 239, 250, 251, 253, 254, 257, 272, 273, 274, 275, 279, 280, 281, 285], "kei": [1, 4, 7, 8, 12, 14, 17, 18, 52, 85, 106, 110, 113, 118, 120, 123, 138, 139, 140, 143, 154, 161, 171, 176, 177, 179, 182, 183, 187, 188, 190, 194, 195, 198, 203, 204, 211, 213, 214, 228, 237, 239, 240, 243, 250, 251, 261, 264, 277, 280, 281], "mai": [1, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 21, 38, 52, 53, 55, 71, 78, 88, 93, 94, 96, 98, 101, 105, 112, 116, 119, 120, 137, 140, 141, 142, 143, 146, 147, 148, 153, 154, 155, 157, 159, 160, 165, 168, 169, 171, 176, 177, 180, 183, 187, 190, 192, 194, 198, 201, 203, 206, 208, 214, 224, 229, 239, 242, 243, 249, 251, 252, 254, 263, 274, 277, 281], "metric": [1, 21, 91, 100, 101, 103, 118, 138, 187, 190, 197, 220, 224, 237, 281], "log": [1, 23, 38, 52, 53, 55, 56, 100, 104, 105, 108, 110, 111, 137, 140, 143, 150, 176, 177, 179, 181, 187, 188, 190, 194, 195, 204, 207, 249, 255, 257, 259, 276], "dure": [1, 3, 12, 15, 17, 23, 33, 34, 38, 39, 40, 52, 55, 65, 66, 88, 93, 96, 98, 101, 102, 103, 105, 110, 111, 112, 119, 120, 130, 136, 137, 138, 139, 141, 142, 145, 146, 147, 148, 149, 151, 154, 158, 159, 165, 169, 176, 177, 178, 179, 181, 187, 191, 192, 194, 197, 199, 206, 213, 220, 229, 236, 237, 243, 244, 263, 264, 267, 276, 279], "reason": [1, 7, 12, 17, 18, 19, 21, 33, 55, 85, 93, 96, 103, 105, 108, 111, 120, 126, 142, 147, 153, 159, 177, 182, 183, 194, 195, 206, 224, 227, 228, 235, 253, 259, 260, 263, 265, 274, 281], "independ": [1, 52, 110, 111, 160, 161, 165, 180, 211, 272, 280], "let": [1, 2, 4, 5, 7, 9, 12, 13, 14, 15, 17, 19, 20, 21, 23, 26, 34, 38, 45, 46, 47, 49, 52, 54, 55, 71, 78, 88, 91, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 116, 118, 119, 120, 126, 129, 130, 139, 141, 143, 148, 151, 153, 154, 155, 158, 159, 160, 162, 165, 168, 169, 170, 171, 173, 175, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 203, 206, 208, 211, 212, 222, 224, 226, 228, 229, 236, 237, 238, 239, 242, 243, 244, 253, 254, 261, 265, 267, 272, 273, 277, 281], "user": [1, 3, 8, 9, 17, 21, 23, 26, 43, 46, 52, 53, 85, 86, 88, 94, 103, 107, 116, 123, 129, 130, 138, 139, 140, 141, 144, 145, 151, 159, 162, 171, 179, 181, 182, 183, 187, 190, 194, 195, 197, 198, 201, 205, 206, 207, 208, 211, 213, 214, 220, 229, 244, 246, 248, 249, 250, 257, 259, 260, 261, 272, 273, 274, 275, 280, 281], "differ": [1, 3, 4, 7, 9, 12, 13, 14, 15, 16, 17, 20, 21, 23, 26, 33, 38, 42, 49, 51, 52, 54, 55, 63, 76, 78, 85, 86, 88, 91, 94, 96, 98, 101, 102, 103, 104, 105, 110, 111, 113, 129, 136, 137, 138, 139, 141, 143, 144, 145, 147, 150, 151, 153, 155, 158, 159, 160, 162, 165, 168, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 190, 191, 192, 194, 195, 198, 205, 206, 207, 208, 211, 212, 220, 224, 227, 229, 235, 237, 238, 239, 244, 249, 252, 254, 257, 258, 259, 260, 263, 265, 266, 272, 273, 274, 275, 276, 277, 281], "set": [1, 2, 3, 7, 9, 12, 13, 14, 15, 17, 18, 19, 21, 23, 26, 33, 38, 40, 45, 46, 49, 51, 52, 53, 55, 56, 58, 63, 65, 66, 71, 78, 85, 86, 90, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 108, 110, 111, 113, 115, 119, 120, 126, 129, 134, 136, 137, 138, 139, 141, 144, 145, 146, 149, 150, 151, 153, 154, 159, 161, 168, 169, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 187, 188, 191, 192, 194, 195, 197, 198, 199, 201, 205, 206, 208, 212, 213, 220, 224, 225, 228, 236, 238, 240, 242, 249, 255, 257, 272, 274, 276, 277, 279, 280, 281], "sum": [1, 2, 4, 5, 10, 14, 17, 19, 23, 34, 45, 52, 55, 70, 85, 93, 94, 96, 104, 105, 107, 119, 137, 138, 139, 145, 146, 148, 153, 160, 169, 178, 179, 180, 181, 187, 192, 194, 195, 203, 205, 206, 211, 224, 242, 258, 273], "can": [1, 2, 3, 4, 5, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 26, 33, 34, 35, 37, 38, 39, 40, 42, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 70, 71, 76, 78, 85, 86, 88, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 118, 119, 120, 123, 126, 129, 131, 132, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 166, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 203, 204, 205, 206, 207, 208, 211, 212, 213, 220, 222, 223, 224, 225, 226, 228, 229, 230, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 261, 263, 264, 265, 267, 272, 273, 274, 275, 276, 277, 279, 280, 281, 284, 285], "simpli": [1, 3, 7, 12, 16, 45, 46, 52, 56, 88, 96, 107, 110, 119, 120, 129, 140, 141, 143, 145, 148, 153, 159, 160, 168, 174, 175, 177, 178, 179, 180, 183, 185, 187, 188, 192, 194, 195, 198, 206, 224, 238, 240, 241, 242, 261, 263, 273, 280, 284], "done": [1, 4, 7, 9, 12, 13, 17, 20, 21, 52, 57, 85, 88, 98, 101, 103, 104, 105, 111, 137, 138, 141, 142, 145, 147, 154, 155, 158, 159, 161, 162, 171, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 188, 190, 194, 195, 199, 213, 228, 239, 253, 263, 265, 281], "via": [1, 3, 4, 7, 9, 10, 20, 21, 23, 40, 57, 58, 78, 88, 103, 136, 137, 138, 141, 143, 153, 154, 160, 169, 176, 177, 182, 188, 190, 192, 194, 195, 197, 208, 212, 213, 220, 228, 236, 237, 239, 248, 251, 264, 267, 276, 279, 281], "loss_val": 1, "item": [1, 2, 5, 7, 13, 14, 18, 42, 52, 70, 71, 96, 107, 119, 120, 123, 137, 138, 139, 144, 145, 153, 154, 176, 177, 179, 180, 181, 188, 190, 194, 223, 239, 264], "startswith": [1, 86], "parent": [1, 4, 5, 17, 96, 208], "As": [1, 2, 3, 7, 9, 12, 13, 14, 15, 17, 20, 40, 45, 52, 53, 55, 78, 88, 91, 94, 96, 98, 101, 102, 103, 111, 113, 119, 120, 137, 138, 139, 140, 141, 142, 143, 151, 153, 154, 157, 158, 159, 160, 161, 168, 169, 171, 173, 175, 177, 178, 179, 180, 181, 182, 187, 190, 191, 194, 195, 197, 198, 201, 207, 212, 220, 224, 228, 239, 244, 251, 257, 258, 265, 275, 277, 280], "mani": [1, 2, 7, 13, 17, 18, 19, 21, 23, 33, 34, 38, 39, 52, 54, 55, 68, 72, 78, 85, 93, 94, 96, 98, 101, 103, 105, 106, 107, 111, 113, 115, 119, 138, 141, 143, 147, 153, 155, 160, 162, 165, 170, 171, 177, 179, 180, 183, 191, 192, 194, 195, 198, 222, 223, 224, 226, 239, 243, 244, 251, 257, 274, 281, 284], "other": [1, 7, 8, 9, 12, 13, 14, 17, 21, 33, 34, 37, 42, 46, 49, 51, 52, 55, 56, 58, 59, 60, 71, 72, 78, 85, 86, 91, 93, 94, 96, 101, 103, 105, 107, 108, 110, 111, 119, 120, 123, 129, 131, 133, 137, 139, 140, 141, 144, 145, 147, 149, 150, 151, 153, 154, 157, 158, 159, 160, 161, 165, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 188, 191, 192, 194, 195, 197, 198, 199, 206, 208, 223, 224, 226, 228, 229, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 258, 263, 265, 272, 273, 274, 275, 277, 281], "expect": [1, 4, 5, 7, 9, 13, 14, 17, 47, 49, 52, 54, 78, 88, 91, 93, 94, 96, 98, 101, 102, 103, 107, 108, 110, 111, 112, 120, 126, 140, 143, 147, 151, 154, 160, 161, 168, 169, 175, 176, 177, 178, 179, 180, 182, 190, 194, 195, 197, 207, 213, 220, 222, 223, 224, 229, 236, 239, 243, 252, 254, 258, 263, 279], "ani": [1, 2, 4, 7, 8, 9, 12, 13, 14, 15, 16, 17, 19, 20, 21, 33, 43, 45, 47, 49, 52, 54, 56, 58, 70, 93, 96, 98, 101, 103, 104, 106, 107, 110, 111, 113, 115, 119, 120, 129, 132, 137, 139, 141, 142, 144, 146, 148, 149, 153, 155, 157, 158, 161, 162, 168, 169, 170, 171, 173, 176, 177, 178, 180, 181, 185, 187, 190, 191, 194, 195, 199, 201, 203, 204, 205, 206, 208, 211, 220, 223, 226, 228, 230, 236, 238, 242, 248, 249, 251, 252, 253, 255, 257, 264, 266, 272, 273, 274, 275, 276, 279, 281], "similar": [1, 3, 4, 5, 7, 9, 12, 13, 14, 17, 18, 42, 51, 52, 85, 86, 94, 96, 98, 101, 103, 104, 110, 111, 116, 119, 141, 144, 148, 153, 154, 169, 177, 179, 180, 181, 182, 183, 187, 188, 190, 194, 197, 199, 212, 223, 224, 238, 239, 243, 248, 254, 258, 264, 272, 273, 274, 275, 276, 277], "structur": [1, 5, 7, 9, 12, 17, 22, 23, 34, 39, 40, 42, 51, 52, 55, 56, 88, 93, 96, 98, 102, 103, 104, 108, 113, 120, 136, 146, 149, 155, 158, 161, 162, 169, 170, 175, 177, 181, 188, 190, 192, 197, 237, 243, 251, 253, 260, 275, 284, 285], "format": [1, 15, 21, 43, 111, 115, 120, 131, 136, 137, 138, 140, 158, 159, 176, 179, 181, 184, 187, 188, 190, 195, 197, 201, 213, 214, 222, 224, 260, 272, 274, 275, 281], "make": [1, 4, 5, 7, 9, 12, 13, 15, 17, 23, 34, 38, 39, 43, 45, 46, 47, 52, 53, 54, 56, 57, 58, 60, 71, 78, 91, 93, 96, 98, 100, 101, 103, 105, 106, 107, 109, 110, 111, 112, 115, 116, 120, 123, 126, 129, 131, 136, 137, 138, 139, 141, 143, 144, 145, 146, 147, 151, 153, 154, 158, 159, 160, 161, 168, 169, 171, 174, 175, 177, 178, 179, 180, 181, 183, 188, 190, 191, 192, 194, 195, 197, 198, 199, 206, 207, 208, 212, 213, 222, 223, 224, 228, 230, 237, 238, 239, 248, 249, 251, 254, 260, 261, 263, 265, 272, 273, 274, 275, 277, 284], "possibl": [1, 2, 4, 7, 10, 12, 13, 17, 18, 21, 93, 94, 98, 101, 104, 107, 115, 139, 142, 146, 147, 148, 154, 155, 157, 158, 160, 161, 171, 176, 177, 179, 180, 183, 191, 192, 194, 195, 197, 198, 201, 211, 213, 223, 228, 239, 251, 257, 263, 277, 281], "re": [1, 4, 7, 8, 9, 10, 13, 17, 20, 26, 37, 39, 42, 46, 51, 52, 53, 94, 96, 98, 100, 101, 102, 103, 104, 111, 119, 126, 129, 142, 144, 145, 154, 155, 157, 160, 165, 168, 170, 171, 176, 177, 178, 179, 180, 183, 194, 195, 197, 206, 208, 214, 223, 224, 228, 238, 239, 243, 264, 265, 272, 284], "across": [1, 4, 12, 14, 17, 20, 23, 26, 42, 52, 55, 57, 58, 59, 85, 94, 101, 103, 113, 132, 137, 138, 139, 141, 149, 150, 151, 153, 155, 161, 171, 173, 175, 178, 180, 181, 191, 194, 195, 204, 206, 208, 211, 222, 237, 239, 240, 242, 248, 252, 254, 257, 258, 261], "modal": [1, 171, 222], "complex": [1, 7, 34, 35, 53, 70, 71, 93, 94, 98, 103, 113, 119, 120, 132, 137, 151, 165, 169, 171, 179, 181, 188, 191, 192, 194, 195, 207, 208, 230, 240, 251, 263, 277], "read": [1, 2, 7, 8, 9, 10, 17, 39, 49, 52, 54, 78, 96, 107, 108, 111, 120, 126, 132, 138, 139, 140, 142, 143, 144, 145, 146, 153, 159, 168, 171, 176, 177, 178, 180, 183, 185, 188, 191, 192, 198, 223, 224, 254, 257, 264], "multipl": [1, 4, 12, 13, 14, 17, 19, 20, 21, 23, 42, 47, 51, 52, 56, 57, 58, 59, 63, 68, 85, 91, 93, 94, 96, 98, 101, 102, 103, 107, 111, 119, 132, 137, 139, 141, 142, 143, 144, 145, 151, 153, 155, 159, 161, 171, 173, 176, 177, 179, 180, 181, 183, 187, 188, 190, 192, 194, 195, 198, 201, 206, 211, 212, 223, 224, 229, 238, 239, 240, 253, 257, 261, 263, 265, 276, 277, 281], "entri": [1, 14, 17, 56, 107, 110, 118, 120, 149, 154, 159, 175, 177, 179, 187, 194, 241, 248, 263, 274, 275, 277, 280], "In": [1, 2, 3, 4, 5, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 26, 33, 34, 35, 37, 39, 40, 42, 45, 47, 51, 52, 53, 54, 55, 56, 58, 59, 60, 66, 70, 71, 78, 85, 86, 88, 90, 91, 94, 96, 98, 100, 102, 103, 104, 105, 107, 108, 110, 111, 113, 116, 118, 119, 120, 126, 129, 131, 132, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 158, 159, 160, 161, 162, 165, 166, 168, 169, 170, 171, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 211, 212, 213, 220, 222, 223, 224, 226, 228, 229, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 261, 263, 264, 265, 266, 267, 272, 273, 274, 275, 276, 277, 279, 280, 281], "word": [1, 7, 13, 14, 17, 46, 52, 78, 85, 94, 98, 103, 104, 106, 108, 109, 120, 136, 144, 145, 153, 166, 168, 169, 175, 181, 183, 195, 254, 260, 273, 275, 277], "allow": [1, 2, 7, 8, 9, 12, 13, 14, 15, 17, 26, 33, 34, 35, 45, 52, 53, 54, 55, 56, 85, 86, 88, 91, 93, 94, 96, 98, 101, 103, 105, 107, 108, 110, 111, 113, 119, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 151, 153, 154, 161, 162, 165, 168, 169, 171, 174, 175, 177, 178, 179, 181, 182, 183, 185, 190, 191, 192, 194, 195, 197, 198, 208, 211, 220, 223, 224, 229, 236, 237, 238, 248, 257, 261, 263, 266, 272, 273, 277, 279], "u": [1, 4, 7, 8, 12, 13, 14, 17, 19, 21, 33, 35, 46, 49, 52, 54, 55, 72, 85, 88, 91, 93, 94, 96, 98, 101, 103, 104, 105, 107, 110, 111, 116, 119, 129, 138, 141, 144, 147, 149, 153, 154, 155, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 173, 176, 177, 178, 180, 183, 188, 190, 191, 192, 194, 195, 198, 203, 211, 222, 224, 226, 228, 236, 238, 243, 252, 265, 272, 273, 275, 277, 279, 281, 284], "oblivi": [1, 177], "type": [1, 4, 7, 9, 12, 13, 17, 23, 42, 51, 52, 53, 78, 85, 88, 94, 96, 97, 100, 102, 107, 111, 113, 116, 132, 137, 138, 141, 143, 153, 155, 159, 170, 171, 174, 175, 177, 179, 180, 181, 182, 187, 190, 192, 194, 198, 201, 205, 206, 211, 213, 214, 220, 222, 236, 237, 239, 240, 243, 247, 250, 257, 272, 276, 279], "being": [1, 3, 4, 7, 13, 15, 17, 21, 49, 52, 55, 85, 94, 102, 103, 104, 105, 107, 111, 113, 126, 129, 138, 141, 143, 147, 153, 154, 169, 171, 173, 175, 177, 178, 180, 192, 194, 195, 199, 205, 213, 224, 228, 239, 253, 257, 273, 274, 277, 281], "run": [1, 2, 3, 4, 8, 9, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 26, 33, 34, 35, 38, 39, 40, 42, 43, 45, 46, 49, 51, 54, 55, 59, 60, 63, 66, 71, 75, 76, 85, 91, 93, 94, 96, 98, 100, 101, 102, 104, 105, 107, 108, 110, 111, 112, 113, 115, 116, 118, 119, 120, 123, 126, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 188, 191, 192, 195, 197, 198, 199, 201, 205, 206, 207, 208, 212, 214, 220, 223, 224, 225, 228, 230, 236, 238, 239, 243, 244, 246, 248, 250, 251, 252, 253, 254, 255, 257, 259, 260, 263, 265, 266, 272, 273, 274, 275, 276, 277, 279, 280, 281, 284, 285], "elementari": [1, 2], "onli": [1, 4, 7, 9, 10, 12, 13, 14, 16, 17, 18, 23, 33, 40, 45, 46, 47, 49, 52, 56, 58, 59, 78, 85, 91, 93, 96, 98, 101, 103, 104, 105, 110, 111, 118, 120, 123, 126, 129, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 157, 158, 162, 165, 168, 169, 170, 171, 173, 174, 175, 176, 177, 180, 181, 182, 183, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 203, 204, 208, 211, 220, 223, 224, 229, 236, 239, 240, 241, 244, 248, 251, 252, 254, 257, 258, 264, 265, 272, 273, 274, 275, 276, 277, 279, 280, 284, 285], "those": [1, 4, 7, 10, 13, 14, 17, 21, 33, 40, 45, 91, 93, 101, 104, 110, 111, 116, 129, 140, 141, 142, 144, 155, 158, 168, 169, 173, 174, 175, 181, 183, 188, 190, 194, 195, 200, 201, 206, 220, 223, 224, 238, 248, 251, 253, 257, 265, 273, 281, 284], "keep": [1, 4, 7, 13, 14, 17, 33, 42, 45, 52, 55, 78, 85, 88, 96, 98, 101, 103, 105, 107, 108, 111, 119, 120, 129, 135, 136, 137, 138, 139, 140, 141, 142, 145, 150, 151, 154, 159, 165, 171, 181, 183, 194, 195, 198, 224, 239, 258], "didact": [1, 153], "ll": [1, 4, 7, 9, 12, 13, 19, 21, 34, 35, 37, 42, 51, 52, 53, 80, 81, 82, 83, 91, 93, 94, 96, 98, 100, 101, 102, 104, 111, 113, 129, 139, 144, 145, 151, 153, 154, 155, 157, 160, 165, 168, 170, 176, 177, 178, 180, 183, 188, 194, 195, 198, 199, 203, 204, 211, 224, 250, 255, 265, 272, 274, 276, 281], "displai": [1, 2, 7, 15, 35, 46, 94, 100, 102, 118, 126, 147, 183, 187, 207, 223, 224, 237], "each": [1, 2, 4, 7, 8, 12, 13, 14, 15, 17, 19, 20, 21, 23, 26, 33, 34, 35, 37, 38, 39, 42, 45, 46, 47, 51, 52, 54, 55, 56, 58, 59, 63, 68, 78, 85, 86, 88, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 108, 110, 111, 115, 118, 119, 120, 126, 129, 132, 136, 137, 138, 139, 141, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 160, 161, 162, 165, 168, 169, 170, 171, 173, 175, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 194, 195, 197, 198, 199, 204, 207, 208, 211, 213, 220, 222, 223, 224, 226, 228, 229, 230, 236, 237, 238, 239, 241, 242, 243, 254, 255, 257, 258, 261, 263, 264, 266, 272, 275, 277, 281], "popul": [1, 33, 45, 52, 91, 101, 129, 138, 154, 161, 177, 179, 204, 211, 238, 249, 263], "later": [1, 3, 4, 5, 7, 14, 19, 33, 42, 49, 52, 78, 91, 94, 98, 103, 107, 108, 111, 120, 137, 138, 140, 141, 145, 146, 148, 153, 155, 157, 158, 159, 160, 161, 165, 170, 173, 177, 178, 181, 182, 183, 188, 190, 191, 194, 195, 198, 203, 204, 205, 207, 211, 220, 223, 224, 225, 228, 236, 239, 243, 244, 248, 249, 250, 251, 253, 254, 255, 261, 263, 264, 267, 272, 280], "stage": [1, 17, 20, 98, 111, 173, 205, 211, 266, 276], "start": [1, 5, 7, 14, 20, 21, 23, 26, 33, 37, 45, 46, 52, 53, 55, 56, 57, 58, 63, 78, 91, 93, 94, 97, 98, 101, 102, 103, 106, 107, 111, 112, 113, 116, 129, 130, 132, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 153, 159, 160, 161, 168, 169, 171, 176, 178, 179, 180, 183, 187, 188, 190, 192, 194, 195, 197, 199, 200, 205, 212, 220, 224, 227, 229, 235, 237, 242, 246, 248, 249, 251, 258, 259, 260, 261, 263, 265, 267, 274, 279, 281, 282], "solv": [1, 7, 17, 52, 54, 103, 110, 126, 169, 177, 179, 181, 224, 228, 239, 274], "task": [1, 7, 16, 17, 21, 26, 38, 39, 52, 102, 103, 104, 110, 118, 126, 132, 133, 136, 137, 144, 154, 169, 171, 177, 178, 183, 185, 190, 197, 224, 229, 238, 239, 248, 254, 257, 281], "strategi": [1, 21, 23, 26, 55, 85, 136, 145, 153, 159, 160, 170, 171, 179, 180, 201, 205, 207, 208, 214, 239, 281], "predict": [1, 34, 37, 38, 39, 40, 45, 46, 52, 55, 65, 66, 70, 71, 72, 75, 76, 93, 94, 96, 98, 102, 103, 104, 108, 110, 111, 119, 129, 141, 143, 144, 145, 155, 160, 161, 171, 178, 183, 188, 195, 197, 212, 222, 226, 254, 259, 281], "henc": [1, 17, 21, 42, 45, 51, 85, 137, 142, 151, 162, 165, 171, 174, 177, 179, 181, 195, 212, 224, 254, 281], "our": [1, 2, 3, 4, 5, 7, 9, 10, 12, 13, 15, 20, 21, 33, 34, 35, 37, 38, 39, 42, 43, 45, 46, 47, 51, 52, 53, 54, 55, 56, 58, 63, 65, 66, 68, 70, 71, 72, 78, 91, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 108, 110, 111, 113, 116, 118, 119, 126, 129, 136, 137, 138, 140, 143, 144, 145, 146, 148, 149, 150, 151, 154, 157, 158, 159, 160, 161, 162, 165, 169, 170, 171, 173, 175, 177, 178, 179, 180, 182, 183, 185, 188, 190, 192, 194, 195, 197, 198, 199, 200, 204, 205, 206, 211, 212, 222, 224, 238, 243, 244, 249, 250, 258, 259, 261, 265, 267, 272, 273, 274, 275, 280, 281, 284], "two": [1, 4, 7, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 26, 33, 35, 38, 39, 42, 43, 45, 51, 52, 53, 55, 60, 78, 86, 88, 91, 93, 94, 96, 98, 101, 103, 104, 105, 107, 108, 110, 111, 112, 113, 118, 119, 126, 129, 137, 138, 143, 144, 146, 147, 148, 150, 151, 153, 154, 157, 158, 159, 160, 161, 162, 165, 169, 170, 171, 173, 174, 175, 177, 178, 179, 181, 182, 183, 190, 195, 197, 198, 199, 201, 208, 211, 212, 220, 224, 226, 228, 229, 236, 238, 239, 240, 249, 251, 253, 257, 258, 261, 263, 265, 266, 273, 275, 277, 279, 281], "constructor": [1, 7, 9, 13, 14, 15, 70, 72, 88, 98, 102, 119, 129, 137, 138, 151, 171, 174, 175, 177, 179, 181, 223, 224, 275], "both": [1, 2, 7, 9, 12, 13, 14, 15, 17, 20, 26, 35, 52, 54, 55, 63, 78, 85, 88, 94, 101, 102, 103, 110, 111, 118, 119, 138, 139, 141, 143, 147, 150, 151, 153, 157, 159, 160, 162, 165, 171, 175, 177, 179, 180, 181, 182, 183, 191, 194, 195, 197, 198, 205, 206, 208, 212, 213, 220, 222, 223, 224, 236, 238, 243, 248, 249, 254, 257, 265, 266, 272, 275, 276], "compat": [1, 5, 7, 8, 12, 14, 21, 53, 100, 101, 107, 112, 140, 146, 154, 182, 192, 194, 253, 254, 280], "comput": [1, 3, 4, 5, 7, 12, 14, 15, 16, 19, 20, 21, 26, 38, 42, 46, 49, 51, 52, 54, 55, 56, 60, 63, 65, 66, 68, 70, 71, 75, 76, 78, 86, 88, 93, 94, 96, 98, 101, 102, 103, 104, 105, 106, 111, 113, 115, 119, 129, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 153, 154, 157, 159, 161, 168, 169, 170, 171, 173, 175, 176, 177, 178, 180, 182, 183, 187, 190, 191, 192, 194, 195, 197, 198, 199, 201, 203, 204, 211, 212, 220, 223, 224, 226, 228, 230, 238, 243, 251, 254, 257, 261, 263, 265, 276, 277, 281, 284, 285], "fit": [1, 7, 13, 14, 26, 63, 91, 110, 119, 137, 138, 139, 141, 151, 171, 181, 195, 223, 257], "gener": [1, 9, 12, 13, 14, 17, 20, 21, 23, 26, 40, 45, 46, 52, 54, 56, 75, 76, 85, 88, 93, 94, 96, 100, 101, 102, 103, 105, 107, 110, 111, 112, 119, 121, 123, 126, 131, 133, 136, 141, 142, 144, 146, 151, 153, 155, 159, 160, 161, 162, 165, 166, 168, 169, 170, 171, 175, 177, 179, 181, 182, 183, 184, 185, 187, 188, 190, 192, 194, 195, 197, 198, 201, 205, 206, 211, 212, 213, 220, 229, 238, 241, 243, 249, 253, 254, 255, 257, 260, 263, 264, 265, 266, 267, 272, 273, 274, 276, 277, 279, 281], "crucial": [1, 2, 15, 17, 85, 107, 154, 171, 177, 195, 239], "convert_to_funct": 1, "extract": [1, 52, 55, 78, 100, 103, 126, 129, 136, 144, 145, 157, 159, 170, 177, 183, 192, 194, 197, 199, 211, 226], "convert": [1, 13, 15, 34, 35, 42, 43, 46, 52, 54, 55, 58, 96, 98, 101, 103, 111, 113, 115, 120, 130, 136, 139, 144, 145, 176, 177, 179, 180, 188, 195, 206, 213, 214, 222, 236, 239, 265, 272, 273, 275, 276, 277, 279], "strictli": [1, 101, 177], "speak": [1, 12, 45, 101, 142, 153, 239], "one": [1, 4, 5, 7, 8, 9, 10, 12, 14, 15, 17, 18, 21, 23, 33, 35, 37, 42, 43, 47, 49, 51, 52, 54, 55, 58, 59, 63, 78, 88, 91, 93, 94, 96, 98, 101, 102, 103, 104, 106, 107, 108, 110, 111, 116, 119, 120, 123, 126, 129, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 150, 151, 153, 154, 155, 157, 158, 159, 160, 168, 169, 170, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 188, 190, 191, 194, 195, 197, 199, 205, 206, 207, 208, 224, 226, 228, 229, 239, 240, 242, 251, 252, 253, 254, 257, 258, 263, 264, 265, 272, 273, 274, 276, 277, 281, 284], "perfectli": [1, 17], "howev": [1, 4, 5, 7, 8, 9, 10, 12, 13, 15, 17, 18, 19, 21, 33, 40, 47, 49, 52, 54, 55, 78, 88, 91, 103, 104, 119, 126, 141, 142, 146, 147, 148, 153, 154, 155, 158, 162, 168, 171, 174, 175, 178, 179, 180, 181, 182, 183, 188, 190, 191, 192, 194, 195, 199, 201, 206, 207, 211, 212, 224, 228, 236, 238, 239, 244, 251, 254, 257, 266, 267, 273, 274, 277, 281, 284], "encourag": [1, 7, 98, 178, 183, 190], "usag": [1, 3, 4, 14, 16, 18, 85, 93, 118, 130, 131, 135, 136, 137, 139, 142, 153, 154, 159, 160, 173, 177, 179, 181, 182, 184, 187, 198, 201, 205, 213, 214, 220, 223, 237, 239, 252, 257, 259, 260, 261, 265, 267, 276, 277], "doe": [1, 2, 4, 7, 12, 16, 17, 18, 19, 33, 43, 45, 49, 75, 76, 78, 88, 93, 94, 96, 98, 100, 101, 102, 103, 105, 107, 110, 111, 113, 116, 119, 120, 126, 129, 137, 138, 139, 140, 146, 148, 151, 153, 154, 160, 161, 162, 168, 169, 171, 173, 176, 177, 178, 180, 181, 182, 183, 187, 188, 191, 192, 194, 195, 197, 198, 199, 205, 220, 223, 224, 228, 236, 238, 239, 251, 253, 257, 263, 264, 265, 273, 274, 275, 284], "often": [1, 7, 13, 17, 21, 42, 52, 78, 91, 93, 94, 96, 101, 103, 105, 107, 110, 111, 119, 120, 141, 142, 143, 145, 161, 169, 194, 195, 203, 205, 223, 238, 239, 263, 277, 281], "same": [1, 2, 3, 4, 5, 7, 8, 9, 12, 13, 14, 15, 18, 21, 33, 34, 40, 42, 45, 46, 52, 54, 55, 56, 58, 68, 76, 78, 88, 91, 93, 96, 101, 102, 103, 105, 107, 108, 110, 111, 113, 116, 118, 119, 120, 129, 137, 138, 139, 140, 141, 142, 144, 146, 147, 150, 151, 153, 155, 157, 159, 160, 161, 162, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 192, 194, 195, 198, 205, 206, 220, 223, 224, 229, 231, 232, 233, 234, 236, 239, 242, 243, 248, 249, 252, 253, 257, 258, 261, 264, 266, 272, 273, 274, 275, 277, 281], "usual": [1, 7, 12, 19, 45, 94, 96, 98, 100, 101, 105, 106, 108, 110, 111, 126, 141, 142, 145, 147, 148, 151, 153, 154, 159, 162, 168, 171, 175, 177, 194, 198, 223, 228, 229, 239, 257, 284], "former": [1, 144, 145, 183], "some": [1, 3, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 21, 33, 34, 35, 38, 42, 43, 45, 46, 49, 51, 52, 53, 54, 55, 65, 71, 78, 85, 91, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 116, 118, 119, 120, 129, 136, 137, 138, 140, 143, 144, 145, 146, 147, 148, 149, 151, 153, 154, 155, 157, 158, 159, 160, 165, 168, 170, 171, 173, 175, 177, 178, 180, 181, 183, 185, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 206, 213, 223, 224, 226, 228, 229, 230, 238, 239, 240, 243, 244, 251, 252, 254, 257, 261, 263, 265, 272, 273, 274, 275, 277, 279, 280, 281, 284], "lag": [1, 177], "absolut": [1, 7, 13, 85, 96, 105, 175, 178, 199, 238], "dilut": 1, "move": [1, 9, 10, 15, 27, 28, 29, 30, 31, 32, 34, 39, 42, 45, 49, 51, 79, 92, 93, 105, 111, 137, 138, 139, 141, 150, 151, 154, 156, 168, 169, 171, 174, 178, 180, 181, 186, 187, 189, 193, 197, 205, 206, 212, 224, 238, 239, 268, 271, 273], "averag": [1, 3, 52, 55, 63, 85, 91, 94, 96, 102, 103, 111, 137, 140, 145, 153, 170, 178, 181, 183, 187, 199, 224, 239], "These": [1, 12, 14, 15, 17, 21, 40, 45, 52, 55, 58, 63, 85, 91, 98, 106, 108, 110, 111, 118, 126, 133, 134, 153, 161, 177, 180, 182, 183, 190, 191, 194, 195, 198, 200, 212, 224, 238, 239, 248, 249, 251, 265, 279, 281], "associ": [1, 4, 7, 12, 13, 34, 35, 53, 85, 94, 148, 157, 171, 175, 182, 190, 195, 226, 236, 239, 253, 264, 273, 281], "One": [1, 2, 4, 7, 13, 14, 18, 52, 54, 78, 85, 93, 98, 101, 103, 104, 105, 107, 137, 138, 139, 140, 141, 142, 145, 151, 153, 155, 168, 169, 171, 185, 188, 191, 192, 194, 195, 197, 198, 205, 206, 224, 230, 236, 238, 239, 254, 263, 274, 284], "advantag": [1, 3, 7, 17, 21, 52, 88, 101, 104, 111, 132, 138, 139, 142, 153, 154, 169, 171, 177, 192, 205, 206, 213, 220, 239, 243, 249, 253, 275, 281], "match": [1, 13, 17, 21, 71, 96, 101, 103, 111, 113, 116, 119, 120, 155, 159, 162, 168, 170, 177, 180, 192, 194, 212, 213, 214, 223, 226, 230, 240, 257, 273, 275, 281], "exactli": [1, 12, 13, 15, 21, 33, 45, 54, 55, 96, 107, 110, 111, 113, 119, 154, 159, 169, 194, 195, 281], "current": [1, 4, 7, 9, 12, 13, 14, 15, 17, 18, 34, 39, 42, 52, 55, 65, 78, 85, 94, 103, 111, 119, 126, 137, 138, 140, 142, 143, 144, 145, 153, 154, 157, 161, 162, 170, 171, 173, 175, 177, 178, 179, 180, 181, 182, 183, 187, 194, 195, 198, 206, 212, 229, 239, 248, 251, 263, 272, 274, 275, 277], "configur": [1, 5, 7, 9, 17, 23, 26, 52, 53, 85, 94, 102, 130, 138, 141, 149, 151, 159, 168, 177, 180, 187, 190, 195, 199, 212, 213, 214, 239, 244, 249, 251, 254, 257, 259, 265, 267, 276], "pessimist": [1, 177], "bound": [1, 52, 120, 139, 143, 159, 177, 178, 187, 194, 195, 197, 198, 223, 224, 229, 239, 257, 265], "pai": [1, 13, 47, 52, 140, 239, 252], "attent": [1, 13, 47, 52, 98, 131, 133, 136, 140, 141, 144, 145, 166, 184, 185, 251, 260, 261, 265, 277, 285], "create_target_param": 1, "keyword": [1, 175, 177, 190, 228, 236], "argument": [1, 2, 4, 5, 7, 9, 12, 17, 19, 33, 39, 42, 45, 46, 51, 54, 58, 72, 85, 93, 94, 98, 100, 101, 103, 105, 108, 110, 112, 118, 119, 120, 137, 138, 145, 150, 151, 153, 154, 155, 159, 160, 170, 171, 173, 174, 175, 177, 179, 180, 181, 182, 187, 190, 192, 194, 195, 199, 207, 211, 223, 224, 228, 229, 236, 237, 239, 240, 251, 257, 261, 263, 274, 276, 284], "below": [1, 2, 4, 7, 13, 14, 15, 17, 20, 23, 26, 35, 40, 42, 45, 47, 51, 54, 55, 56, 57, 58, 59, 60, 85, 88, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 115, 116, 123, 129, 139, 140, 141, 143, 146, 147, 149, 150, 151, 153, 154, 157, 159, 162, 168, 174, 177, 178, 179, 180, 181, 182, 187, 188, 190, 192, 194, 195, 197, 199, 204, 205, 206, 207, 211, 212, 214, 220, 223, 224, 228, 229, 244, 247, 248, 251, 252, 253, 254, 257, 258, 263, 265, 266, 267, 273, 274, 275, 276, 277, 279, 280], "tell": [1, 8, 19, 23, 72, 91, 93, 96, 98, 102, 110, 111, 119, 129, 143, 144, 154, 155, 157, 168, 178, 179, 181, 183, 194, 224, 229], "creat": [1, 2, 7, 8, 9, 13, 15, 17, 19, 20, 22, 23, 26, 33, 34, 37, 40, 42, 43, 45, 46, 49, 51, 53, 54, 55, 65, 66, 68, 70, 71, 72, 75, 76, 78, 85, 88, 93, 94, 96, 98, 100, 102, 103, 104, 106, 108, 110, 112, 113, 116, 119, 120, 123, 129, 135, 136, 138, 139, 140, 141, 146, 148, 151, 153, 154, 157, 161, 162, 166, 169, 170, 171, 173, 174, 176, 177, 178, 180, 181, 183, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 203, 204, 205, 206, 208, 211, 212, 220, 223, 224, 226, 229, 230, 236, 237, 240, 241, 242, 243, 244, 251, 253, 254, 258, 259, 260, 261, 264, 265, 267, 272, 275, 277, 279], "If": [1, 2, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 26, 33, 34, 37, 39, 42, 45, 46, 47, 49, 51, 52, 53, 55, 56, 58, 63, 65, 78, 85, 91, 93, 96, 98, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 119, 120, 123, 126, 129, 137, 138, 139, 140, 141, 142, 145, 147, 151, 153, 154, 155, 157, 159, 160, 162, 168, 169, 170, 171, 174, 176, 177, 178, 179, 180, 181, 182, 183, 187, 190, 192, 194, 195, 197, 198, 199, 201, 205, 206, 213, 220, 222, 223, 225, 228, 229, 236, 237, 238, 239, 240, 242, 243, 244, 251, 252, 257, 263, 264, 265, 266, 272, 273, 275, 276, 277, 280, 281, 284], "fals": [1, 2, 4, 5, 7, 8, 13, 14, 17, 26, 40, 45, 58, 65, 66, 85, 86, 93, 96, 107, 119, 120, 126, 129, 137, 138, 139, 141, 147, 157, 159, 162, 168, 169, 171, 176, 179, 180, 188, 190, 192, 194, 203, 211, 212, 213, 214, 223, 236, 239, 240, 243, 247, 254, 257, 258, 263, 266, 273, 274, 276, 279, 280, 281], "see": [1, 2, 3, 4, 5, 7, 10, 12, 13, 14, 17, 19, 21, 23, 26, 34, 38, 39, 42, 46, 47, 49, 51, 52, 53, 54, 55, 58, 63, 78, 85, 86, 88, 91, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 118, 120, 129, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 151, 153, 154, 155, 157, 158, 159, 161, 162, 165, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 201, 204, 206, 207, 208, 211, 212, 215, 220, 222, 223, 224, 229, 236, 237, 238, 239, 240, 241, 242, 243, 248, 249, 250, 252, 253, 255, 257, 261, 263, 265, 272, 274, 275, 276, 279, 280, 281, 284, 285], "target_actor_network_param": 1, "attribut": [1, 7, 9, 14, 17, 33, 45, 49, 56, 85, 88, 98, 110, 111, 116, 129, 142, 154, 157, 162, 169, 173, 175, 194, 201, 223, 242, 254, 259, 277], "still": [1, 7, 12, 13, 14, 15, 17, 18, 21, 23, 49, 55, 78, 91, 93, 101, 103, 107, 111, 118, 120, 138, 144, 145, 146, 151, 153, 154, 157, 158, 162, 168, 171, 181, 192, 194, 195, 205, 206, 208, 212, 238, 239, 252, 258, 261, 265, 266, 272, 274, 276, 281], "access": [1, 7, 13, 17, 21, 34, 35, 53, 71, 78, 91, 93, 96, 98, 101, 102, 103, 108, 111, 119, 120, 129, 138, 142, 149, 153, 169, 171, 176, 178, 180, 190, 191, 194, 199, 205, 208, 220, 238, 242, 248, 264, 272, 273, 275, 276, 279, 281], "just": [1, 2, 3, 4, 7, 9, 12, 13, 17, 19, 20, 21, 33, 46, 47, 49, 52, 53, 54, 55, 56, 59, 70, 75, 76, 88, 91, 93, 94, 96, 98, 101, 103, 104, 105, 107, 108, 110, 111, 119, 120, 126, 129, 137, 138, 141, 143, 144, 145, 151, 154, 159, 160, 165, 168, 169, 171, 174, 175, 176, 177, 178, 179, 180, 181, 188, 190, 191, 192, 194, 195, 197, 200, 206, 208, 213, 224, 225, 226, 238, 239, 242, 243, 244, 257, 265, 266, 274, 281], "detach": [1, 2, 7, 14, 33, 93, 101, 107, 140, 165, 170, 261], "version": [1, 3, 4, 7, 9, 12, 13, 15, 17, 94, 96, 98, 101, 102, 111, 112, 113, 115, 116, 137, 138, 142, 153, 154, 155, 157, 160, 162, 169, 171, 173, 174, 175, 176, 177, 185, 187, 188, 190, 195, 197, 198, 199, 211, 212, 213, 214, 223, 224, 228, 238, 244, 249, 253, 263, 264, 265, 267, 272, 280], "q": [1, 45, 52, 133, 136, 141, 161, 182, 190, 214, 281], "base": [1, 7, 13, 14, 17, 20, 21, 23, 26, 35, 46, 52, 60, 78, 88, 91, 93, 94, 98, 102, 103, 105, 113, 118, 120, 132, 133, 136, 137, 138, 139, 140, 143, 144, 146, 154, 161, 171, 173, 174, 175, 178, 180, 183, 187, 188, 190, 191, 194, 195, 197, 212, 223, 236, 238, 239, 249, 253, 254, 261, 266, 274, 276, 279, 280, 281, 285], "empir": [1, 165, 177], "bootstrap": [1, 154], "td": 1, "0": [1, 2, 3, 4, 5, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 49, 50, 51, 52, 54, 55, 58, 66, 67, 71, 73, 75, 76, 77, 78, 85, 88, 89, 91, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 126, 129, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 190, 191, 192, 195, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 220, 224, 225, 226, 228, 229, 230, 235, 236, 237, 238, 239, 243, 244, 246, 247, 250, 251, 252, 253, 254, 255, 257, 258, 260, 261, 263, 264, 265, 266, 272, 273, 275, 276, 277, 280, 281, 282, 284], "low": [1, 4, 7, 17, 19, 26, 52, 55, 71, 85, 98, 105, 119, 131, 136, 144, 187, 194, 198, 213, 214, 238, 279], "varianc": [1, 7, 100, 177], "bia": [1, 2, 7, 45, 49, 71, 96, 105, 111, 119, 120, 137, 146, 147, 154, 160, 169, 175, 177, 181, 182, 198, 236, 276, 277, 281], "mean": [1, 2, 4, 7, 13, 15, 17, 38, 49, 52, 54, 55, 71, 78, 85, 88, 93, 96, 98, 101, 103, 104, 105, 107, 110, 118, 119, 120, 129, 138, 141, 143, 144, 147, 151, 153, 162, 169, 171, 176, 177, 178, 180, 181, 183, 187, 188, 190, 194, 195, 199, 201, 203, 206, 211, 224, 228, 229, 238, 239, 244, 254, 257, 264, 272, 274, 277, 280, 284], "obtain": [1, 26, 33, 38, 52, 71, 91, 111, 119, 143, 144, 147, 153, 160, 170, 177, 178, 180, 187, 190, 197, 229, 243, 253, 264], "reward": [1, 17, 154, 161, 177, 178, 179, 181], "noth": [1, 78, 96, 111, 148, 171, 181, 187], "els": [1, 5, 8, 12, 14, 23, 49, 52, 91, 93, 110, 112, 129, 138, 139, 153, 173, 174, 179, 180, 181, 188, 190, 192, 194, 208, 211, 223, 254, 258, 261, 266, 276, 281], "mont": 1, "carlo": 1, "1": [1, 2, 3, 4, 5, 7, 8, 9, 12, 14, 15, 17, 18, 19, 20, 21, 23, 26, 33, 34, 37, 43, 45, 52, 55, 56, 58, 66, 71, 78, 89, 91, 93, 94, 96, 98, 101, 103, 104, 105, 107, 108, 110, 111, 112, 115, 116, 118, 119, 120, 123, 126, 129, 137, 138, 139, 141, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 157, 158, 159, 160, 161, 162, 166, 168, 169, 170, 175, 176, 177, 178, 179, 180, 181, 182, 190, 192, 195, 198, 201, 205, 206, 207, 208, 211, 212, 213, 214, 220, 223, 228, 230, 237, 239, 247, 248, 253, 254, 257, 258, 261, 263, 265, 266, 267, 272, 273, 274, 275, 276, 277, 280, 281], "case": [1, 2, 3, 4, 7, 8, 9, 12, 13, 14, 16, 17, 20, 21, 33, 40, 45, 52, 54, 63, 71, 78, 85, 88, 93, 94, 100, 101, 103, 104, 105, 107, 108, 110, 111, 116, 119, 120, 132, 137, 138, 139, 141, 142, 143, 146, 147, 148, 153, 154, 155, 157, 159, 160, 162, 165, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 190, 192, 194, 195, 197, 198, 206, 222, 223, 224, 229, 230, 236, 238, 242, 243, 244, 249, 251, 252, 254, 257, 261, 265, 272, 274, 275, 276, 277, 279, 280, 281, 284], "whole": [1, 3, 46, 49, 98, 111, 120, 136, 140, 153, 175, 177, 183, 195, 244, 273, 284], "sequenc": [1, 7, 15, 42, 51, 52, 70, 71, 98, 104, 106, 109, 110, 119, 120, 136, 144, 145, 154, 166, 169, 177, 182, 184, 191, 198, 203, 204, 208, 211, 223, 229, 239, 260, 261, 265, 277, 284, 285], "upcom": 1, "intermedi": [1, 79, 93, 98, 101, 129, 132, 149, 157, 159, 160, 161, 166, 168, 171, 184, 193, 198, 199, 224, 230, 281], "lambda": [1, 9, 111, 146, 176, 179, 194, 211, 223, 224, 281], "also": [1, 2, 4, 5, 7, 8, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 23, 26, 33, 39, 42, 45, 49, 51, 52, 54, 55, 56, 57, 63, 70, 71, 78, 85, 88, 91, 93, 94, 96, 98, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 118, 119, 120, 129, 137, 138, 140, 141, 142, 143, 144, 145, 147, 148, 151, 153, 154, 157, 159, 160, 168, 169, 170, 171, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 187, 190, 192, 194, 195, 197, 198, 199, 201, 204, 205, 206, 207, 208, 211, 212, 213, 214, 220, 223, 224, 225, 228, 229, 236, 237, 238, 239, 241, 242, 243, 244, 248, 249, 250, 252, 253, 255, 257, 258, 261, 263, 267, 272, 273, 274, 275, 280, 281, 284], "compromis": 1, "easi": [1, 2, 7, 26, 35, 46, 47, 54, 71, 93, 94, 101, 103, 105, 138, 139, 141, 143, 153, 160, 165, 169, 173, 177, 187, 191, 194, 195, 213, 224, 238, 254, 266, 281, 284], "valueestim": 1, "enum": 1, "pointer": [1, 7, 9, 10, 180], "defin": [1, 2, 8, 15, 17, 18, 19, 20, 21, 23, 33, 38, 39, 40, 43, 45, 47, 55, 64, 67, 68, 70, 71, 72, 78, 88, 91, 93, 98, 100, 102, 104, 105, 110, 111, 113, 116, 120, 130, 137, 138, 142, 144, 146, 149, 153, 154, 155, 158, 161, 165, 168, 170, 171, 178, 179, 180, 182, 185, 187, 188, 191, 192, 194, 198, 199, 203, 205, 206, 211, 212, 213, 227, 228, 229, 235, 236, 244, 246, 250, 252, 253, 254, 258, 259, 260, 263, 272, 279, 280, 281], "default": [1, 3, 4, 5, 7, 12, 13, 14, 18, 21, 26, 33, 38, 42, 45, 47, 52, 54, 55, 58, 65, 66, 85, 96, 98, 100, 101, 105, 107, 112, 116, 119, 126, 129, 136, 137, 138, 139, 140, 141, 144, 153, 154, 155, 157, 159, 162, 168, 171, 174, 176, 179, 180, 181, 187, 188, 190, 192, 194, 195, 198, 201, 205, 206, 212, 213, 220, 224, 227, 228, 229, 235, 237, 239, 242, 244, 247, 248, 249, 252, 254, 257, 258, 260, 261, 263, 266, 275, 276, 279, 280], "here": [1, 2, 3, 4, 7, 8, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 23, 26, 35, 38, 39, 42, 43, 46, 49, 51, 53, 54, 55, 56, 58, 72, 78, 84, 85, 88, 91, 93, 94, 96, 98, 101, 102, 103, 105, 107, 108, 110, 111, 118, 119, 120, 123, 126, 129, 137, 138, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 175, 177, 178, 180, 181, 182, 183, 187, 188, 191, 192, 194, 195, 197, 198, 204, 206, 207, 212, 213, 223, 224, 225, 228, 229, 239, 243, 244, 249, 251, 254, 257, 267, 272, 274, 275, 276, 277, 279, 281], "take": [1, 2, 3, 4, 7, 8, 12, 14, 15, 17, 18, 19, 20, 21, 34, 35, 42, 45, 46, 49, 51, 52, 53, 54, 55, 71, 78, 85, 88, 93, 94, 96, 98, 100, 101, 102, 103, 105, 107, 108, 110, 111, 116, 119, 120, 126, 140, 141, 142, 143, 144, 145, 146, 148, 151, 153, 158, 160, 161, 168, 169, 171, 176, 177, 178, 179, 180, 181, 183, 187, 188, 190, 192, 194, 195, 197, 198, 205, 206, 212, 213, 214, 224, 225, 226, 229, 236, 238, 239, 240, 241, 242, 243, 244, 249, 254, 257, 261, 265, 267, 272, 275, 277, 279, 281, 284], "simplest": [1, 7, 33, 49, 93, 101, 105, 154, 177, 183, 239], "show": [1, 13, 14, 19, 21, 23, 26, 46, 54, 55, 63, 78, 85, 86, 88, 91, 93, 94, 96, 98, 101, 102, 111, 116, 118, 137, 140, 143, 144, 145, 147, 148, 151, 154, 155, 159, 162, 171, 174, 176, 178, 179, 181, 187, 188, 190, 192, 194, 195, 199, 204, 205, 206, 208, 213, 214, 220, 223, 224, 229, 237, 238, 239, 243, 244, 253, 254, 257, 258, 272, 281], "chang": [1, 2, 7, 8, 9, 13, 14, 15, 17, 26, 33, 42, 45, 51, 53, 54, 55, 56, 58, 85, 86, 88, 91, 93, 94, 96, 97, 102, 103, 104, 106, 107, 108, 113, 120, 129, 130, 136, 137, 140, 141, 143, 144, 146, 149, 150, 153, 154, 157, 159, 160, 161, 168, 169, 171, 174, 175, 179, 187, 190, 192, 194, 195, 198, 199, 201, 204, 205, 206, 211, 213, 223, 224, 227, 235, 236, 237, 239, 240, 243, 247, 252, 253, 254, 255, 257, 260, 265, 266, 274, 276, 277, 279, 280], "instruct": [1, 7, 26, 37, 94, 97, 100, 102, 144, 145, 154, 157, 173, 175, 177, 179, 181, 183, 201, 212, 213, 220, 222, 239, 257, 259], "queri": [1, 9, 17, 52, 96, 101, 120, 140, 180, 182, 197, 198, 261, 277], "correspond": [1, 2, 3, 4, 7, 12, 13, 15, 17, 18, 34, 35, 39, 45, 52, 58, 85, 93, 94, 98, 100, 105, 108, 118, 120, 137, 142, 143, 146, 159, 168, 173, 175, 177, 180, 183, 185, 187, 188, 190, 192, 194, 195, 197, 198, 206, 222, 228, 229, 239, 257, 259, 264, 275, 280], "make_value_estim": 1, "central": [1, 12, 78, 93, 101, 102, 108, 110, 149, 242], "quit": [1, 7, 21, 52, 78, 142, 153, 168, 177, 181, 194, 195, 205, 208, 211, 224, 238, 272, 281], "weight": [1, 2, 3, 7, 15, 16, 17, 21, 26, 33, 34, 45, 46, 52, 65, 66, 69, 70, 71, 72, 73, 75, 76, 78, 93, 96, 98, 101, 102, 103, 105, 106, 108, 111, 120, 126, 137, 144, 146, 147, 149, 154, 155, 159, 160, 162, 168, 169, 170, 175, 177, 178, 181, 183, 187, 190, 191, 195, 198, 205, 212, 226, 236, 241, 242, 247, 254, 260, 265, 276, 279, 281], "when": [1, 4, 7, 9, 12, 13, 14, 15, 17, 18, 19, 21, 23, 33, 35, 38, 40, 42, 45, 46, 47, 49, 51, 52, 53, 55, 56, 58, 63, 78, 85, 88, 91, 93, 94, 96, 98, 100, 101, 102, 103, 104, 107, 110, 111, 112, 115, 116, 118, 119, 120, 129, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 150, 151, 153, 154, 157, 158, 159, 161, 162, 165, 168, 169, 171, 174, 175, 177, 178, 179, 181, 182, 183, 187, 190, 192, 194, 195, 197, 198, 199, 201, 204, 206, 207, 208, 212, 214, 220, 223, 224, 226, 228, 229, 230, 236, 238, 239, 240, 242, 243, 248, 249, 251, 252, 254, 257, 258, 259, 263, 265, 272, 275, 276, 277, 279, 280, 281], "must": [1, 2, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 34, 35, 52, 55, 70, 78, 88, 93, 94, 101, 104, 110, 115, 116, 119, 120, 138, 151, 153, 154, 155, 157, 171, 177, 180, 187, 190, 192, 194, 195, 207, 228, 230, 236, 239, 251, 263, 264, 272, 273, 275, 277, 284], "sure": [1, 7, 9, 12, 13, 14, 17, 40, 54, 60, 91, 96, 100, 103, 104, 110, 116, 120, 129, 137, 141, 146, 151, 153, 154, 158, 171, 177, 179, 190, 195, 199, 213, 222, 223, 228, 237, 239, 248, 249, 251, 273, 275, 284], "out": [1, 2, 4, 7, 8, 9, 12, 13, 14, 17, 18, 19, 21, 26, 33, 37, 38, 42, 43, 45, 46, 47, 51, 52, 54, 55, 61, 62, 63, 78, 80, 81, 82, 83, 84, 86, 88, 91, 93, 94, 96, 98, 101, 103, 104, 106, 108, 111, 115, 118, 129, 135, 136, 137, 139, 140, 141, 142, 143, 144, 148, 149, 151, 153, 154, 155, 158, 159, 160, 168, 169, 171, 174, 175, 176, 177, 179, 180, 181, 183, 187, 188, 190, 194, 195, 198, 199, 200, 201, 202, 208, 214, 216, 217, 218, 219, 221, 222, 227, 229, 235, 236, 239, 243, 249, 252, 253, 254, 257, 259, 260, 261, 263, 269, 270, 272, 273, 274, 275, 277, 278, 279, 281, 284, 285], "graph": [1, 13, 17, 19, 49, 52, 65, 68, 71, 75, 76, 85, 88, 90, 93, 104, 106, 112, 115, 116, 119, 129, 130, 136, 142, 144, 148, 158, 159, 160, 162, 180, 181, 187, 188, 190, 191, 198, 199, 201, 211, 213, 214, 226, 237, 243, 244, 248, 249, 253, 255, 266, 267], "otherwis": [1, 4, 12, 13, 34, 39, 52, 58, 65, 78, 85, 88, 101, 111, 119, 120, 126, 129, 137, 142, 148, 151, 154, 159, 160, 162, 168, 177, 178, 180, 192, 195, 199, 238, 252, 257, 281, 284], "mix": [1, 12, 18, 63, 118, 162, 213, 227, 235, 259, 260, 279], "For": [1, 2, 4, 5, 7, 8, 9, 10, 13, 14, 15, 17, 18, 19, 20, 21, 23, 33, 38, 39, 42, 43, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 58, 65, 66, 71, 78, 85, 86, 91, 94, 98, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 113, 119, 120, 123, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 153, 154, 155, 158, 159, 161, 162, 169, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 190, 191, 192, 194, 195, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 220, 222, 223, 224, 226, 228, 230, 236, 237, 238, 239, 240, 241, 242, 244, 250, 251, 252, 255, 257, 258, 261, 263, 264, 265, 266, 272, 273, 274, 275, 277, 279, 280, 281], "hold_out_param": 1, "now": [1, 2, 7, 8, 9, 12, 13, 14, 15, 18, 19, 20, 21, 23, 26, 38, 39, 45, 46, 47, 49, 52, 53, 54, 55, 58, 78, 88, 91, 92, 93, 94, 100, 101, 103, 105, 107, 110, 111, 113, 116, 119, 126, 129, 136, 138, 141, 142, 143, 144, 146, 147, 148, 151, 153, 154, 158, 159, 160, 161, 165, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 185, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 204, 205, 206, 225, 226, 236, 237, 238, 241, 243, 249, 261, 265, 267, 272, 273, 277, 279, 280, 281, 284], "reli": [1, 3, 4, 7, 12, 17, 40, 52, 93, 110, 113, 142, 161, 168, 171, 175, 177, 194, 201, 239, 267, 274, 276], "miss": [1, 54, 120, 146, 151, 154, 187, 192, 223, 238, 240, 257, 261, 273], "glue": [1, 181], "cost": [1, 17, 52, 103, 105, 118, 137, 138, 141, 142, 146, 165, 187, 194, 205, 225, 239, 252, 253], "deliv": [1, 201, 213, 251], "most": [1, 2, 9, 14, 17, 21, 33, 37, 45, 52, 54, 55, 78, 91, 93, 94, 96, 98, 101, 105, 107, 108, 111, 118, 119, 120, 126, 132, 137, 141, 142, 143, 145, 147, 148, 153, 158, 159, 161, 162, 168, 171, 176, 177, 179, 180, 181, 182, 183, 187, 190, 192, 194, 195, 198, 205, 213, 214, 222, 229, 236, 238, 239, 244, 248, 252, 254, 257, 274, 275, 276, 281], "first": [1, 2, 3, 4, 5, 7, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 23, 26, 37, 40, 43, 46, 47, 52, 53, 54, 55, 56, 58, 63, 71, 72, 78, 85, 86, 88, 91, 93, 96, 98, 101, 103, 105, 107, 108, 110, 111, 116, 118, 119, 120, 129, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 153, 154, 155, 157, 158, 159, 160, 165, 168, 170, 171, 173, 174, 175, 177, 178, 179, 180, 181, 183, 187, 190, 191, 192, 194, 195, 197, 198, 199, 205, 206, 208, 212, 214, 223, 224, 226, 228, 229, 236, 239, 243, 244, 249, 251, 252, 253, 254, 257, 261, 263, 265, 267, 272, 274, 275, 277, 281, 284], "taken": [1, 7, 9, 12, 17, 85, 86, 98, 154, 168, 177, 190, 194, 230, 253, 265, 279], "care": [1, 4, 17, 78, 91, 93, 103, 148, 153, 171, 177, 181, 198, 205, 224, 225, 238, 272], "condit": [1, 17, 52, 58, 101, 108, 112, 137, 153, 169, 171, 192, 194, 280], "remaind": [1, 96, 157], "cheetah": 1, "goal": [1, 7, 17, 18, 46, 52, 55, 63, 78, 88, 103, 142, 143, 153, 154, 158, 177, 179, 181, 263, 272], "half": [1, 12, 21, 126, 173, 223, 258, 281], "fast": [1, 7, 21, 23, 52, 93, 111, 137, 141, 151, 165, 171, 177, 182, 190, 195, 198, 238, 263, 265, 281, 285], "dm_control": 1, "gym": [1, 17, 133, 136, 154, 161, 177, 178, 179, 181, 198], "env": [1, 23, 140, 150, 153, 154, 177, 178, 179, 181, 224, 238, 254, 261, 263], "gymenv": [1, 177], "halfcheetah": 1, "v4": 1, "dmcontrolenv": 1, "By": [1, 12, 21, 33, 42, 45, 65, 66, 85, 91, 93, 101, 107, 110, 111, 112, 119, 129, 138, 141, 143, 153, 155, 157, 158, 159, 168, 175, 178, 187, 191, 194, 199, 205, 206, 211, 220, 226, 229, 239, 244, 248, 249, 251, 254, 257, 263, 266, 273, 275, 277, 281], "disabl": [1, 8, 14, 18, 129, 137, 138, 146, 161, 165, 176, 180, 182, 187, 192, 206, 223, 248, 257, 265, 272, 273, 274, 275, 280], "render": [1, 7, 85, 94, 100, 161, 171, 177], "easier": [1, 21, 23, 26, 53, 54, 104, 111, 137, 143, 159, 168, 179, 183, 188, 206, 224, 238, 251, 265, 272, 275, 281, 284], "than": [1, 3, 4, 7, 12, 13, 14, 15, 16, 17, 21, 46, 51, 52, 53, 55, 56, 63, 70, 72, 78, 85, 88, 93, 96, 98, 101, 103, 104, 105, 107, 110, 111, 113, 119, 120, 126, 136, 137, 138, 140, 143, 145, 147, 150, 151, 153, 155, 159, 160, 161, 165, 168, 169, 170, 171, 176, 177, 178, 179, 187, 188, 190, 191, 192, 195, 197, 198, 201, 224, 228, 239, 240, 248, 254, 257, 259, 263, 265, 272, 277, 281], "imag": [1, 34, 35, 37, 43, 45, 49, 52, 54, 55, 60, 78, 85, 91, 94, 96, 98, 101, 102, 103, 111, 130, 131, 133, 134, 136, 141, 146, 155, 161, 162, 168, 170, 178, 185, 187, 188, 195, 197, 201, 208, 222, 226, 237, 240, 241, 259, 277, 279], "focu": [1, 4, 7, 13, 23, 94, 103, 105, 129, 138, 141, 142, 177, 179, 181, 183, 194, 214, 265, 273], "pass": [1, 2, 3, 4, 7, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 33, 34, 35, 38, 39, 40, 45, 46, 52, 54, 55, 56, 59, 65, 66, 68, 70, 75, 76, 85, 88, 91, 93, 94, 96, 98, 101, 102, 103, 105, 107, 108, 111, 112, 119, 120, 129, 130, 136, 137, 138, 141, 142, 143, 144, 147, 148, 149, 151, 153, 154, 155, 157, 158, 161, 162, 165, 169, 170, 173, 175, 177, 178, 179, 180, 181, 183, 184, 187, 190, 192, 194, 195, 198, 199, 204, 206, 207, 211, 212, 223, 224, 228, 229, 230, 236, 239, 242, 243, 258, 260, 261, 265, 272, 275], "pixel": [1, 34, 43, 46, 78, 98, 101, 103, 154, 162, 185, 190, 254], "from_pixel": 1, "true": [1, 2, 4, 5, 7, 8, 9, 13, 14, 15, 18, 19, 26, 33, 35, 38, 40, 43, 45, 49, 52, 54, 65, 66, 85, 91, 93, 96, 101, 107, 113, 115, 118, 119, 120, 126, 129, 137, 138, 139, 140, 143, 146, 147, 148, 151, 153, 154, 157, 159, 162, 169, 176, 179, 180, 181, 182, 187, 188, 190, 192, 194, 197, 198, 205, 206, 211, 213, 214, 229, 236, 242, 244, 247, 251, 257, 258, 261, 263, 266, 273, 274, 275, 276, 279, 280, 281], "pixels_onli": 1, "make_env": 1, "helper": [1, 12, 20, 21, 49, 54, 58, 94, 100, 102, 103, 104, 112, 137, 138, 143, 144, 145, 153, 154, 178, 179, 180, 181, 183, 185, 188, 190, 197, 203, 204, 229, 254, 281], "either": [1, 2, 4, 7, 12, 19, 46, 52, 76, 91, 102, 103, 111, 113, 120, 126, 138, 141, 151, 154, 162, 175, 178, 179, 180, 187, 192, 194, 198, 213, 220, 223, 229, 236, 239, 251, 275, 277, 280, 281], "backend": [1, 7, 8, 10, 14, 17, 23, 26, 56, 58, 130, 131, 132, 135, 136, 143, 146, 150, 151, 154, 162, 176, 177, 184, 187, 192, 194, 195, 201, 212, 220, 223, 250, 254, 259, 260, 261, 267, 276, 280], "consid": [1, 4, 7, 13, 14, 17, 33, 40, 52, 71, 78, 85, 119, 129, 137, 139, 148, 151, 153, 162, 165, 168, 169, 171, 174, 179, 183, 187, 192, 194, 195, 197, 205, 228, 229, 230, 249, 263, 272, 273, 274, 276, 284], "abov": [1, 3, 4, 7, 9, 10, 12, 13, 14, 17, 18, 20, 45, 46, 52, 54, 55, 68, 70, 71, 78, 85, 93, 94, 96, 98, 100, 101, 103, 104, 105, 107, 108, 110, 111, 119, 129, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 153, 157, 159, 160, 161, 162, 165, 168, 169, 170, 171, 173, 175, 177, 179, 180, 181, 182, 187, 190, 192, 194, 195, 197, 205, 206, 207, 208, 212, 213, 220, 222, 224, 228, 229, 236, 237, 243, 248, 254, 257, 261, 263, 265, 267, 272, 273, 274, 275, 276, 280], "dm": 1, "want": [1, 2, 4, 7, 8, 9, 10, 12, 13, 15, 17, 18, 20, 26, 33, 34, 35, 38, 40, 45, 46, 49, 52, 54, 55, 63, 65, 66, 70, 78, 88, 91, 93, 94, 96, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 119, 120, 126, 140, 141, 142, 143, 151, 153, 154, 155, 157, 158, 160, 162, 165, 169, 171, 173, 175, 176, 177, 180, 182, 183, 185, 190, 191, 192, 194, 195, 197, 198, 199, 206, 207, 220, 223, 224, 228, 236, 238, 240, 251, 253, 272, 274, 279, 284, 285], "modifi": [1, 3, 7, 13, 14, 17, 39, 43, 45, 46, 55, 78, 103, 104, 141, 144, 153, 158, 159, 174, 177, 179, 183, 194, 198, 199, 236, 252, 254, 261], "represent": [1, 13, 17, 45, 55, 88, 94, 98, 100, 103, 105, 108, 110, 112, 113, 115, 130, 143, 158, 161, 183, 187, 188, 191, 194, 195, 198, 224, 236, 238, 253, 277], "more": [1, 2, 3, 4, 7, 9, 10, 12, 13, 14, 17, 18, 19, 21, 35, 37, 38, 39, 42, 45, 46, 47, 51, 52, 53, 54, 55, 56, 58, 59, 63, 70, 78, 88, 94, 96, 98, 100, 102, 103, 104, 105, 107, 108, 110, 111, 113, 115, 118, 119, 120, 126, 129, 131, 132, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 157, 158, 161, 165, 168, 169, 171, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 188, 190, 191, 192, 194, 195, 197, 198, 199, 201, 206, 207, 208, 212, 213, 214, 220, 222, 228, 236, 238, 239, 243, 244, 249, 251, 252, 253, 254, 255, 257, 258, 260, 263, 265, 272, 273, 274, 275, 277, 279, 281, 284, 285], "friendli": [1, 18, 200, 223], "append": [1, 8, 12, 17, 20, 23, 52, 101, 118, 120, 138, 153, 175, 177, 179, 180, 181, 183, 188, 211, 257, 281], "special": [1, 9, 13, 23, 42, 51, 96, 98, 105, 107, 110, 111, 116, 133, 142, 154, 162, 174, 175, 187, 190, 206, 236, 239, 254, 277, 279], "torchr": 1, "transformedenv": [1, 17, 177], "common": [1, 7, 12, 13, 17, 19, 21, 38, 39, 46, 52, 54, 63, 85, 96, 101, 103, 105, 107, 110, 112, 120, 126, 130, 136, 141, 151, 155, 158, 161, 169, 171, 175, 176, 177, 182, 190, 194, 195, 197, 224, 225, 238, 239, 240, 244, 250, 259, 274, 277, 281], "rescal": [1, 54, 197, 265], "heurist": [1, 85, 212, 251, 263], "multipli": [1, 4, 15, 51, 52, 93, 94, 96, 101, 111, 183, 191, 238, 250], "5": [1, 2, 3, 7, 14, 21, 26, 37, 43, 47, 50, 52, 55, 68, 85, 88, 91, 96, 98, 100, 102, 105, 107, 108, 109, 110, 115, 118, 119, 120, 137, 138, 147, 151, 153, 155, 159, 162, 169, 176, 179, 180, 181, 190, 194, 195, 197, 198, 201, 203, 208, 211, 212, 213, 220, 237, 244, 247, 263, 264, 267, 280, 281, 284], "interfac": [1, 4, 7, 9, 17, 18, 52, 101, 111, 143, 150, 153, 177, 190, 195, 213, 220, 254, 266], "between": [1, 7, 9, 12, 14, 15, 17, 20, 21, 34, 42, 49, 51, 52, 68, 76, 78, 85, 86, 88, 91, 93, 96, 98, 101, 103, 104, 105, 108, 110, 111, 119, 129, 134, 136, 137, 139, 141, 143, 153, 154, 158, 162, 165, 171, 173, 175, 178, 180, 181, 182, 183, 188, 190, 192, 194, 195, 197, 198, 199, 205, 207, 223, 224, 225, 229, 239, 244, 254, 255, 258, 261, 263, 264, 265, 266, 272, 273, 275, 279, 281, 285], "simul": [1, 21, 23, 98, 146, 177, 208, 214, 281], "work": [1, 2, 4, 5, 7, 9, 10, 15, 17, 19, 21, 23, 37, 38, 45, 52, 53, 54, 55, 58, 59, 63, 78, 88, 91, 93, 94, 96, 98, 101, 102, 103, 104, 106, 110, 111, 112, 115, 129, 136, 142, 144, 145, 147, 148, 149, 151, 153, 154, 155, 157, 158, 160, 168, 169, 170, 171, 174, 175, 176, 177, 179, 181, 182, 183, 187, 190, 191, 194, 195, 197, 198, 199, 201, 205, 208, 212, 213, 214, 223, 224, 229, 236, 238, 239, 244, 247, 248, 251, 254, 263, 265, 272, 273, 274, 275, 281, 284], "doubl": [1, 2, 4, 5, 7, 38, 93, 100, 111, 118, 133, 135, 136, 147, 154, 161, 170, 177, 188, 212, 223], "precis": [1, 12, 13, 18, 63, 142, 147, 148, 162, 171, 177, 188, 212, 213, 214, 227, 235, 244, 259, 260, 279], "number": [1, 4, 7, 14, 15, 18, 23, 35, 38, 43, 46, 54, 55, 56, 58, 68, 85, 88, 91, 93, 96, 98, 103, 105, 107, 110, 111, 118, 119, 120, 137, 138, 140, 141, 142, 143, 144, 150, 151, 153, 154, 155, 157, 159, 160, 165, 169, 171, 173, 175, 176, 177, 178, 179, 180, 181, 187, 190, 192, 195, 197, 199, 203, 206, 212, 224, 226, 229, 238, 239, 243, 249, 255, 257, 263, 265, 275, 276, 277, 284], "presum": 1, "singl": [1, 2, 4, 7, 9, 12, 13, 14, 18, 21, 23, 39, 42, 45, 49, 54, 56, 57, 58, 59, 63, 88, 91, 93, 94, 96, 98, 100, 101, 102, 103, 105, 111, 136, 137, 138, 139, 141, 144, 146, 147, 148, 149, 150, 151, 153, 154, 160, 161, 165, 170, 171, 173, 177, 178, 179, 180, 181, 183, 187, 190, 192, 194, 195, 198, 206, 212, 224, 238, 239, 243, 254, 257, 261, 263, 265, 277, 281, 284], "ones": [1, 2, 4, 7, 8, 14, 17, 19, 96, 98, 101, 103, 129, 153, 155, 158, 169, 170, 171, 173, 174, 177, 178, 187, 194, 198, 238, 254, 273], "goe": [1, 54, 101, 104, 105, 136, 140, 148, 160, 174, 177, 180, 195], "wai": [1, 2, 4, 7, 9, 12, 13, 14, 15, 17, 33, 37, 39, 42, 45, 46, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 70, 75, 78, 85, 91, 93, 94, 96, 97, 101, 104, 105, 107, 110, 111, 113, 115, 116, 120, 129, 132, 137, 141, 142, 143, 144, 148, 150, 151, 157, 158, 159, 160, 161, 162, 165, 168, 169, 173, 175, 177, 179, 180, 182, 185, 188, 191, 194, 195, 197, 198, 206, 222, 225, 229, 230, 236, 239, 251, 261, 265, 273, 274, 275, 277, 285], "repres": [1, 4, 13, 15, 16, 23, 34, 45, 52, 54, 55, 63, 65, 78, 85, 88, 93, 94, 96, 98, 102, 103, 110, 112, 113, 115, 118, 119, 137, 138, 139, 141, 143, 144, 146, 154, 157, 158, 161, 162, 177, 178, 181, 183, 190, 194, 195, 197, 198, 224, 226, 236, 238, 243, 263, 272, 277], "doubletofloat": [1, 177], "in_kei": [1, 17, 154, 177], "list": [1, 4, 5, 7, 8, 12, 14, 15, 17, 18, 20, 26, 35, 39, 42, 46, 49, 51, 52, 53, 55, 71, 78, 91, 94, 98, 101, 107, 108, 110, 112, 113, 115, 116, 119, 142, 145, 153, 162, 169, 171, 176, 179, 180, 181, 183, 187, 188, 190, 192, 194, 195, 208, 211, 222, 224, 228, 229, 248, 254, 257, 266, 274, 277, 279, 281], "refer": [1, 4, 5, 7, 9, 10, 12, 16, 18, 21, 26, 33, 39, 63, 78, 85, 88, 93, 94, 101, 103, 105, 107, 108, 110, 112, 113, 115, 116, 118, 120, 137, 138, 139, 141, 142, 145, 146, 150, 151, 153, 159, 168, 171, 175, 177, 179, 180, 181, 187, 190, 194, 195, 197, 198, 212, 214, 222, 223, 224, 226, 228, 229, 236, 239, 249, 251, 254, 257, 263, 267, 272, 275, 279, 280, 281], "float": [1, 4, 5, 7, 12, 14, 43, 96, 101, 107, 110, 118, 137, 138, 141, 143, 153, 162, 174, 175, 179, 181, 194, 195, 197, 211, 212, 214, 223, 229, 236, 263, 265, 266, 274, 275, 276], "while": [1, 2, 3, 7, 8, 14, 15, 16, 17, 21, 35, 38, 52, 55, 58, 85, 94, 101, 112, 113, 118, 130, 132, 136, 138, 139, 140, 142, 143, 146, 149, 151, 153, 154, 159, 160, 162, 168, 171, 175, 176, 177, 180, 181, 182, 183, 185, 192, 194, 195, 205, 214, 223, 224, 228, 229, 236, 243, 244, 248, 251, 254, 263, 265, 272, 273, 274, 275, 276, 277, 279, 281], "in_keys_inv": [1, 17], "befor": [1, 3, 4, 7, 12, 13, 14, 15, 17, 20, 33, 38, 40, 45, 46, 47, 49, 52, 54, 55, 58, 63, 78, 88, 93, 94, 98, 103, 104, 105, 107, 108, 110, 111, 113, 115, 116, 118, 119, 120, 126, 129, 130, 136, 138, 139, 141, 143, 144, 146, 151, 153, 154, 157, 159, 161, 166, 168, 169, 171, 173, 175, 176, 177, 179, 180, 181, 183, 187, 188, 191, 192, 194, 195, 197, 199, 205, 208, 223, 224, 226, 228, 237, 239, 240, 241, 242, 243, 244, 248, 249, 251, 252, 257, 258, 263, 272, 273, 275, 280], "concaten": [1, 17, 42, 51, 52, 107, 108, 141, 145, 178], "cattensor": 1, "leav": [1, 12, 19, 21, 33, 45, 52, 54, 56, 88, 93, 129, 143, 168, 169, 176, 212, 236, 281], "constant": [1, 2, 7, 42, 51, 85, 91, 93, 101, 105, 140, 154, 169, 178, 188, 192, 194, 211, 239, 276, 281], "significantli": [1, 108, 132, 141, 147, 171, 192, 230, 243, 249, 257, 265, 279], "speed": [1, 7, 13, 17, 33, 35, 38, 51, 52, 88, 93, 96, 97, 103, 111, 130, 131, 132, 136, 138, 139, 141, 144, 149, 154, 155, 159, 162, 171, 176, 177, 179, 182, 192, 201, 205, 224, 237, 239, 243, 253, 254, 257, 259, 265, 266, 279, 285], "throughput": [1, 138, 171, 239, 257], "choos": [1, 12, 13, 15, 18, 52, 55, 58, 63, 68, 91, 94, 105, 119, 120, 140, 141, 145, 151, 153, 161, 169, 176, 177, 178, 183, 187, 190, 195, 197, 220, 223, 229, 244, 261, 265, 267], "whether": [1, 7, 12, 13, 14, 17, 52, 55, 93, 94, 96, 100, 101, 103, 111, 113, 120, 129, 148, 153, 158, 161, 168, 171, 177, 179, 187, 188, 190, 194, 224, 229, 239, 240, 275], "individu": [1, 7, 15, 34, 52, 88, 93, 94, 98, 119, 139, 141, 143, 147, 170, 171, 175, 180, 183, 188, 192, 194, 195, 198, 220, 223, 224, 239, 249], "approach": [1, 4, 7, 9, 10, 40, 59, 94, 111, 113, 115, 120, 140, 144, 149, 169, 170, 171, 177, 178, 180, 183, 192, 194, 197, 224, 236, 244, 263, 272, 275, 276, 279, 284], "parallelenv": [1, 177], "num_work": [1, 26, 46, 54, 91, 96, 137, 138, 187, 239], "4": [1, 2, 3, 4, 7, 12, 15, 19, 20, 22, 26, 37, 43, 47, 54, 56, 57, 58, 65, 66, 68, 73, 78, 91, 94, 96, 98, 100, 101, 102, 104, 105, 107, 110, 111, 117, 119, 134, 136, 137, 138, 140, 146, 147, 149, 150, 153, 154, 159, 161, 162, 168, 169, 173, 175, 178, 179, 180, 181, 190, 192, 194, 197, 198, 201, 205, 208, 212, 237, 244, 248, 249, 254, 257, 260, 261, 263, 265, 267, 275, 285], "leverag": [1, 7, 52, 78, 103, 113, 116, 120, 134, 136, 138, 141, 151, 153, 160, 197, 207, 208, 211, 214, 239, 240, 253, 257, 259, 266, 276, 280, 285], "vector": [1, 2, 7, 8, 9, 15, 17, 33, 52, 55, 85, 93, 94, 98, 100, 101, 103, 105, 107, 108, 110, 111, 144, 145, 146, 154, 157, 170, 174, 183, 195, 201, 212, 213, 239, 251, 266, 276, 284], "capabl": [1, 3, 14, 18, 21, 52, 78, 135, 141, 162, 171, 182, 187, 191, 201, 203, 204, 211, 223, 239, 281], "pytorch": [1, 2, 4, 5, 8, 12, 14, 17, 19, 21, 22, 23, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 46, 47, 51, 52, 54, 55, 56, 58, 59, 61, 62, 64, 67, 69, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 91, 93, 94, 103, 104, 109, 111, 112, 114, 115, 120, 121, 123, 126, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 165, 166, 168, 170, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 194, 199, 200, 203, 204, 205, 206, 207, 208, 211, 216, 218, 219, 222, 223, 224, 225, 228, 231, 232, 233, 234, 235, 236, 238, 243, 244, 248, 249, 250, 251, 253, 254, 255, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 283, 284, 285], "adopt": [1, 26, 63, 168, 174, 180, 214, 280], "frame_skip": [1, 177], "frame": [1, 7, 154, 161, 176, 177, 187, 254, 263], "count": [1, 7, 9, 14, 38, 46, 52, 85, 105, 153, 154, 177, 181, 183, 187, 190, 207], "frames_per_batch": [1, 177], "total_fram": [1, 177], "adjust": [1, 5, 17, 33, 38, 39, 45, 55, 78, 93, 96, 102, 141, 143, 144, 165, 179, 239], "total": [1, 14, 15, 16, 17, 19, 20, 21, 22, 33, 34, 35, 38, 39, 40, 41, 42, 43, 45, 46, 47, 49, 50, 51, 52, 54, 55, 56, 58, 67, 71, 73, 75, 76, 77, 78, 86, 88, 89, 91, 93, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 116, 117, 118, 121, 123, 126, 129, 138, 140, 142, 143, 144, 145, 147, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 175, 176, 177, 178, 180, 182, 183, 184, 185, 187, 190, 192, 194, 195, 197, 198, 199, 204, 211, 212, 224, 225, 228, 229, 230, 235, 236, 238, 243, 244, 246, 250, 251, 252, 253, 255, 257, 260, 265, 272, 273, 274, 275, 277, 282, 284], "rais": [1, 12, 14, 19, 78, 112, 140, 141, 142, 159, 162, 176, 177, 192, 194, 205, 239, 252, 254], "skip": [1, 13, 17, 21, 45, 104, 120, 148, 157, 161, 179, 181, 187, 192, 194, 198, 213, 224, 229, 242, 257, 280, 281], "unchang": [1, 12, 86, 93], "seem": [1, 46, 55, 142, 144, 154, 171, 173, 195, 224], "like": [1, 3, 4, 7, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 34, 35, 38, 39, 42, 45, 46, 47, 49, 51, 52, 54, 55, 56, 58, 63, 70, 71, 85, 88, 91, 93, 94, 96, 98, 101, 103, 104, 105, 107, 108, 110, 111, 112, 113, 116, 118, 119, 123, 126, 129, 130, 132, 133, 135, 136, 137, 141, 142, 143, 145, 148, 150, 151, 153, 154, 155, 157, 158, 159, 160, 162, 165, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 182, 183, 187, 188, 190, 191, 194, 195, 197, 198, 199, 201, 206, 207, 208, 212, 213, 220, 222, 223, 224, 225, 226, 229, 238, 239, 243, 248, 249, 250, 251, 252, 254, 257, 266, 273, 274, 275, 279, 280, 281, 284, 285], "cheat": [1, 101, 183], "compar": [1, 5, 13, 18, 21, 38, 46, 86, 94, 101, 103, 108, 111, 116, 126, 137, 139, 140, 141, 143, 153, 158, 159, 160, 162, 165, 168, 170, 171, 175, 177, 178, 179, 181, 183, 187, 190, 192, 194, 198, 199, 201, 205, 211, 212, 213, 214, 228, 237, 238, 239, 252, 253, 257, 259, 261, 264, 265, 266, 272, 281, 285], "dataset": [1, 7, 21, 26, 33, 34, 36, 37, 38, 39, 40, 42, 43, 45, 46, 49, 52, 55, 56, 58, 60, 78, 94, 98, 103, 105, 121, 126, 136, 137, 138, 143, 144, 145, 149, 153, 155, 170, 171, 176, 180, 182, 183, 185, 187, 188, 190, 195, 199, 213, 215, 226, 239, 247, 254, 259, 260, 279, 281], "10m": 1, "element": [1, 7, 8, 15, 21, 39, 42, 51, 52, 93, 94, 96, 98, 101, 105, 107, 108, 110, 129, 142, 153, 159, 165, 169, 177, 190, 194, 197, 224, 226, 239, 273, 274, 275, 277, 281], "2": [1, 2, 3, 4, 5, 7, 8, 12, 14, 15, 17, 18, 19, 20, 22, 23, 26, 34, 37, 43, 45, 52, 54, 55, 56, 58, 65, 66, 67, 70, 71, 72, 77, 78, 91, 93, 94, 96, 101, 103, 104, 105, 107, 110, 112, 115, 116, 119, 120, 123, 126, 129, 136, 137, 138, 139, 141, 143, 146, 147, 148, 149, 150, 151, 153, 154, 155, 159, 160, 162, 166, 168, 169, 170, 175, 176, 177, 178, 179, 180, 181, 182, 190, 192, 194, 195, 198, 201, 203, 204, 207, 208, 211, 212, 213, 214, 223, 225, 228, 236, 239, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 260, 261, 263, 264, 265, 266, 267, 272, 277, 280, 285], "anoth": [1, 4, 12, 14, 17, 33, 42, 45, 51, 52, 55, 65, 78, 88, 96, 98, 101, 102, 104, 108, 111, 118, 119, 120, 129, 136, 145, 146, 147, 148, 150, 153, 154, 157, 169, 171, 175, 177, 179, 180, 181, 182, 183, 191, 192, 194, 195, 197, 199, 222, 224, 229, 239, 240, 257, 265], "actual": [1, 3, 7, 9, 12, 14, 16, 17, 18, 33, 40, 52, 54, 55, 78, 88, 96, 103, 104, 107, 110, 116, 129, 135, 136, 139, 142, 143, 144, 147, 151, 153, 158, 168, 171, 177, 183, 187, 188, 192, 194, 195, 214, 224, 243, 250, 264, 265, 272, 274, 284], "ratio": [1, 85, 103, 159, 171, 177, 187, 197], "interact": [1, 7, 17, 52, 94, 100, 101, 143, 146, 148, 161, 177, 180, 188, 192, 194, 195, 200, 207, 251], "nutshel": [1, 274], "cautiou": 1, "about": [1, 4, 7, 9, 12, 13, 17, 18, 21, 37, 38, 39, 42, 45, 52, 55, 56, 57, 58, 60, 75, 76, 78, 91, 93, 96, 98, 100, 101, 103, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 118, 119, 120, 126, 129, 130, 132, 136, 138, 140, 143, 144, 145, 148, 150, 151, 153, 155, 158, 159, 160, 168, 170, 171, 176, 177, 178, 179, 181, 182, 183, 185, 187, 190, 192, 194, 195, 197, 198, 199, 205, 207, 208, 227, 228, 235, 236, 238, 241, 249, 253, 254, 259, 260, 263, 264, 265, 273, 274, 275, 280, 281, 285], "deal": [1, 46, 52, 54, 55, 96, 103, 111, 119, 120, 138, 160, 171, 177, 194, 195, 199, 207, 241], "lead": [1, 4, 7, 17, 19, 52, 55, 78, 85, 91, 103, 111, 144, 146, 148, 154, 155, 171, 194, 205, 236, 239, 243, 244, 257, 274, 284], "bias": [1, 34, 45, 98, 103, 120, 182, 198, 236, 241, 242], "comparison": [1, 21, 86, 94, 101, 102, 103, 104, 137, 159, 160, 238, 261, 265, 272, 274, 277, 279, 281], "scale": [1, 7, 34, 43, 54, 59, 78, 98, 100, 103, 113, 131, 132, 136, 137, 138, 140, 151, 153, 154, 161, 173, 177, 178, 184, 185, 195, 207, 208, 223, 239, 244, 251, 260, 261, 265], "help": [1, 4, 9, 12, 13, 18, 21, 23, 33, 34, 45, 52, 55, 71, 85, 91, 94, 103, 104, 107, 108, 110, 111, 120, 131, 132, 134, 136, 137, 138, 143, 150, 151, 154, 155, 159, 160, 165, 168, 174, 177, 178, 179, 180, 181, 182, 183, 190, 192, 194, 195, 199, 200, 203, 205, 206, 208, 211, 214, 220, 222, 223, 224, 226, 237, 239, 240, 249, 251, 252, 255, 257, 259, 263, 265, 273, 274, 275, 277, 279, 280, 281, 284], "signal": [1, 45, 94, 96, 177, 179, 229, 238], "magnitud": [1, 21, 93, 175, 195, 223, 281], "truncat": [1, 101, 118, 159, 177, 281], "A": [1, 7, 8, 9, 12, 14, 15, 17, 21, 33, 34, 35, 39, 42, 49, 50, 51, 52, 54, 55, 56, 58, 65, 66, 70, 71, 72, 75, 76, 78, 85, 86, 96, 98, 101, 102, 103, 105, 107, 108, 110, 111, 112, 119, 120, 129, 132, 136, 138, 142, 143, 144, 145, 148, 149, 153, 155, 158, 162, 168, 169, 170, 177, 178, 179, 180, 182, 183, 184, 185, 188, 190, 192, 194, 195, 198, 199, 200, 206, 212, 213, 214, 224, 228, 236, 239, 241, 249, 251, 254, 257, 260, 263, 264, 276, 277, 280, 281], "thousand": [1, 110, 132, 141, 144, 154, 183, 190], "500": [1, 7, 26, 162, 173, 178, 181, 224], "good": [1, 2, 7, 46, 53, 55, 96, 100, 101, 103, 110, 113, 136, 137, 143, 153, 154, 159, 165, 176, 178, 182, 184, 188, 190, 194, 195, 197, 198, 220, 224, 239, 244, 257, 260, 276], "statist": [1, 55, 96, 130, 136, 147, 158, 175, 177, 183, 187, 188, 190, 224], "arbitrari": [1, 12, 17, 19, 33, 70, 76, 94, 103, 108, 119, 138, 155, 161, 170, 188, 192, 198, 229, 230], "random": [1, 7, 17, 20, 42, 45, 46, 47, 49, 51, 54, 55, 65, 66, 68, 75, 76, 78, 94, 96, 100, 107, 108, 111, 112, 113, 118, 119, 126, 137, 138, 143, 145, 146, 151, 153, 155, 161, 165, 168, 169, 175, 177, 178, 179, 181, 183, 188, 192, 211, 224, 226, 230, 239], "standard": [1, 12, 42, 46, 51, 55, 85, 91, 94, 96, 103, 104, 105, 111, 113, 115, 116, 130, 153, 176, 185, 192, 194, 195, 197, 226, 239, 265, 277], "deviat": [1, 85, 96, 103], "observationnorm": [1, 177], "init_stat": 1, "purpos": [1, 9, 60, 78, 88, 93, 98, 102, 119, 137, 142, 143, 145, 153, 154, 158, 159, 168, 173, 176, 177, 180, 181, 187, 191, 192, 195, 206, 236, 239, 243, 244, 248, 263, 265, 273, 276], "get": [1, 2, 5, 7, 9, 10, 12, 14, 17, 18, 19, 20, 21, 26, 35, 37, 45, 46, 47, 52, 53, 54, 55, 58, 59, 63, 78, 86, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 118, 119, 120, 126, 129, 131, 132, 135, 136, 138, 140, 141, 143, 144, 145, 146, 153, 155, 158, 160, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 183, 187, 188, 190, 191, 194, 195, 197, 200, 201, 205, 212, 220, 224, 229, 239, 242, 244, 254, 257, 258, 259, 260, 263, 264, 265, 267, 272, 279, 280, 281, 282], "summari": [1, 85, 110, 143, 154, 171, 177, 187, 194, 237, 238], "dummi": [1, 4, 12, 19, 88, 96, 102, 151, 155, 160, 170, 173, 174, 195, 199, 206, 254, 279], "over": [1, 4, 7, 9, 13, 14, 17, 19, 21, 23, 34, 35, 38, 39, 42, 46, 49, 51, 52, 53, 54, 55, 56, 58, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 107, 108, 111, 118, 119, 134, 136, 137, 138, 139, 140, 141, 144, 146, 150, 151, 153, 155, 158, 159, 160, 161, 162, 165, 170, 175, 177, 178, 179, 180, 181, 182, 183, 187, 188, 190, 192, 194, 195, 197, 198, 199, 212, 223, 239, 242, 252, 253, 261, 265, 276, 281, 284], "earlier": [1, 7, 9, 78, 96, 98, 101, 104, 105, 108, 111, 137, 139, 141, 154, 168, 171, 177, 183, 194, 223, 224], "turn": [1, 7, 12, 17, 18, 43, 52, 94, 98, 101, 118, 145, 154, 160, 168, 169, 171, 175, 179, 183, 195, 266, 273, 274, 276], "seen": [1, 13, 14, 23, 46, 49, 52, 54, 98, 101, 103, 108, 110, 111, 118, 154, 170, 180, 192, 194, 195, 224, 243, 251, 276], "requir": [1, 2, 4, 5, 7, 8, 9, 12, 13, 15, 17, 18, 19, 23, 26, 37, 43, 45, 52, 53, 54, 55, 58, 63, 86, 88, 91, 93, 97, 102, 110, 111, 115, 116, 129, 137, 141, 143, 145, 147, 148, 150, 151, 153, 154, 155, 157, 160, 165, 168, 169, 170, 171, 173, 176, 177, 179, 180, 181, 182, 183, 190, 191, 192, 194, 195, 197, 198, 201, 203, 204, 205, 206, 208, 212, 213, 214, 223, 225, 226, 228, 229, 236, 238, 239, 243, 244, 248, 249, 250, 251, 252, 255, 263, 264, 265, 266, 267, 273, 274, 275, 279, 284], "select": [1, 4, 13, 53, 85, 91, 100, 103, 111, 113, 153, 162, 175, 178, 179, 181, 187, 188, 192, 194, 212, 229, 239, 249, 251, 263, 267, 274, 276, 281], "recal": [1, 7, 55, 93, 101, 104, 110, 151, 177, 188, 236, 238, 273, 274, 275], "wrap": [1, 4, 7, 13, 20, 35, 39, 47, 91, 96, 105, 107, 108, 113, 118, 137, 139, 142, 147, 151, 154, 161, 171, 177, 180, 181, 190, 191, 194, 195, 199, 203, 204, 206, 207, 220, 223, 229, 258, 264], "flow": [1, 17, 33, 45, 55, 69, 73, 88, 100, 103, 113, 114, 115, 116, 130, 136, 139, 177, 178, 187, 192, 199, 239, 259, 260, 264, 279], "handl": [1, 5, 12, 13, 19, 52, 55, 56, 88, 98, 101, 111, 112, 116, 130, 136, 137, 141, 144, 155, 166, 170, 171, 173, 175, 176, 177, 180, 181, 182, 190, 191, 192, 194, 195, 201, 205, 206, 213, 222, 228, 229, 238, 254, 257, 272, 274, 277, 284], "specifi": [1, 4, 7, 9, 12, 14, 19, 21, 26, 35, 39, 54, 55, 85, 91, 93, 94, 96, 98, 101, 102, 107, 112, 119, 137, 138, 139, 140, 141, 143, 144, 148, 154, 155, 157, 174, 175, 177, 180, 181, 187, 190, 194, 214, 228, 229, 237, 239, 240, 243, 248, 251, 253, 254, 257, 261, 272, 273, 274, 275, 277, 279, 281, 284, 285], "scenario": [1, 7, 17, 112, 113, 115, 116, 120, 126, 129, 142, 171, 178, 181, 194, 212, 236, 240, 257, 263, 276], "tensordictsequenti": [1, 154], "valueoper": 1, "automat": [1, 2, 4, 5, 7, 9, 12, 13, 18, 34, 36, 37, 39, 42, 45, 47, 48, 49, 51, 56, 60, 63, 100, 102, 104, 111, 119, 123, 129, 131, 136, 137, 138, 139, 141, 142, 143, 148, 159, 162, 171, 173, 177, 178, 181, 184, 185, 187, 190, 191, 194, 195, 199, 201, 205, 206, 212, 213, 214, 220, 225, 227, 228, 229, 235, 238, 239, 251, 259, 260, 261, 263, 280], "out_kei": [1, 17, 154, 177], "state_action_valu": 1, "state_valu": 1, "built": [1, 4, 7, 9, 10, 12, 22, 33, 49, 93, 94, 96, 98, 105, 129, 136, 144, 153, 154, 177, 182, 188, 192, 194, 197, 222, 224, 226, 242, 249, 260], "present": [1, 7, 9, 12, 23, 38, 85, 86, 103, 112, 169, 174, 175, 178, 179, 181, 190, 192, 194, 197, 199, 239, 258, 277], "origin": [1, 7, 8, 12, 15, 17, 21, 33, 52, 55, 78, 91, 94, 101, 103, 108, 113, 139, 141, 142, 144, 145, 165, 166, 169, 170, 171, 175, 178, 190, 191, 192, 194, 211, 213, 220, 254, 265, 266, 275, 279, 281], "paper": [1, 15, 20, 21, 55, 78, 123, 138, 141, 177, 178, 180, 182, 183, 185, 195, 198, 199, 277, 281], "found": [1, 4, 5, 7, 9, 13, 20, 52, 53, 94, 103, 143, 151, 153, 154, 158, 162, 171, 180, 181, 182, 190, 194, 213, 220, 239, 254, 277], "ddpgmlpactor": 1, "ddpgmlpqnet": 1, "sinc": [1, 3, 4, 8, 12, 13, 14, 16, 17, 20, 46, 52, 54, 55, 56, 78, 88, 93, 94, 96, 103, 104, 105, 107, 108, 110, 111, 126, 129, 139, 140, 141, 143, 144, 145, 146, 148, 149, 153, 154, 158, 168, 169, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 188, 190, 192, 194, 195, 197, 198, 201, 203, 205, 206, 220, 224, 228, 229, 230, 242, 243, 244, 252, 254, 258, 265, 272, 273, 274], "lazi": 1, "materi": [1, 137, 141, 160, 195, 198, 230, 236, 264, 272], "abl": [1, 3, 4, 7, 17, 18, 21, 33, 34, 52, 65, 78, 88, 96, 103, 104, 106, 110, 111, 119, 126, 143, 147, 148, 149, 150, 151, 153, 154, 155, 159, 161, 162, 168, 170, 177, 180, 188, 192, 194, 195, 197, 198, 201, 211, 226, 236, 242, 251, 254, 263, 274, 281], "devic": [1, 3, 4, 5, 7, 12, 13, 14, 17, 19, 20, 21, 23, 26, 42, 45, 46, 47, 51, 52, 53, 55, 56, 58, 59, 63, 66, 76, 91, 101, 103, 105, 113, 119, 132, 135, 136, 137, 139, 141, 143, 144, 150, 151, 153, 154, 155, 159, 162, 168, 171, 173, 175, 176, 177, 180, 181, 187, 195, 197, 203, 204, 205, 206, 208, 211, 212, 213, 214, 224, 227, 229, 230, 235, 236, 240, 242, 249, 250, 251, 253, 254, 255, 258, 259, 260, 261, 263, 264, 266, 267, 279, 280, 281], "achiev": [1, 3, 4, 7, 17, 21, 26, 33, 46, 52, 59, 85, 91, 103, 136, 139, 142, 147, 153, 154, 159, 168, 169, 171, 175, 177, 178, 187, 195, 198, 212, 239, 251, 253, 257, 259, 264, 265, 281], "oper": [1, 7, 8, 16, 17, 18, 21, 22, 23, 33, 34, 39, 45, 47, 49, 52, 54, 63, 65, 66, 70, 76, 85, 86, 88, 96, 97, 101, 103, 104, 105, 110, 111, 112, 113, 114, 115, 118, 119, 129, 130, 135, 136, 137, 139, 140, 141, 142, 144, 146, 148, 153, 154, 155, 157, 159, 160, 162, 165, 170, 173, 174, 176, 177, 179, 183, 187, 188, 190, 191, 192, 194, 195, 198, 199, 200, 206, 207, 211, 212, 213, 214, 220, 222, 223, 224, 226, 229, 230, 238, 242, 249, 250, 251, 254, 257, 258, 259, 260, 265, 272, 273, 276, 279, 281, 284, 285], "practic": [1, 7, 14, 40, 49, 52, 54, 55, 93, 94, 96, 101, 103, 105, 111, 112, 119, 123, 126, 131, 134, 136, 141, 142, 149, 154, 159, 162, 169, 175, 177, 178, 194, 198, 224, 225, 228, 239, 243, 244, 253, 254, 257, 272, 273, 277], "small": [1, 3, 7, 21, 23, 26, 45, 46, 49, 60, 78, 93, 96, 98, 100, 101, 103, 105, 106, 108, 113, 119, 126, 137, 138, 140, 143, 144, 145, 147, 158, 168, 169, 171, 176, 177, 178, 181, 183, 185, 190, 195, 197, 212, 223, 224, 226, 239, 254, 255, 263, 265, 272, 281], "fake": [1, 7, 21, 49, 55, 168, 194, 277, 281], "spec": [1, 116, 154, 177, 181, 194, 224], "ornsteinuhlenbeckprocessmodul": 1, "suggest": [1, 4, 15, 55, 90, 103, 139, 145, 159, 160, 161, 162, 165, 187, 190, 214, 263], "ou": 1, "nois": [1, 7, 15, 55, 78, 207, 238], "reach": [1, 8, 13, 21, 55, 63, 103, 129, 144, 151, 153, 161, 162, 177, 181, 194, 199, 224, 281], "minimum": [1, 4, 85, 139, 177, 181, 274], "iter": [1, 3, 7, 14, 15, 17, 26, 33, 34, 38, 39, 45, 46, 49, 55, 56, 58, 88, 91, 93, 94, 96, 98, 104, 111, 113, 120, 143, 146, 149, 151, 154, 159, 177, 178, 179, 180, 181, 187, 188, 192, 195, 197, 204, 214, 220, 223, 237, 239, 242, 252, 254, 258], "reset": [1, 38, 96, 101, 111, 126, 154, 177, 178, 179, 181, 187, 192, 255, 266], "develop": [1, 3, 4, 12, 13, 15, 18, 26, 85, 88, 94, 107, 111, 113, 115, 130, 133, 146, 153, 162, 174, 181, 187, 192, 198, 206, 207, 211, 213, 227, 239, 265, 266, 267, 272, 275, 276], "tight": [1, 112, 113, 115, 116], "per": [1, 4, 7, 12, 14, 103, 110, 131, 136, 138, 144, 145, 147, 151, 153, 154, 160, 162, 168, 173, 175, 181, 182, 183, 184, 187, 188, 190, 194, 195, 197, 201, 205, 206, 224, 228, 238, 248, 257, 258, 260, 261, 263, 264, 272, 284], "sync": [1, 13, 14, 20, 58, 135, 136, 137, 138, 139, 140, 161, 195], "natur": [1, 7, 21, 23, 26, 47, 78, 98, 103, 111, 143, 144, 154, 171, 180, 190, 201, 274, 277, 281], "resourc": [1, 56, 78, 91, 113, 115, 137, 151, 153, 168, 177, 187, 190, 200, 211, 224, 239, 244, 247, 257, 263], "alloc": [1, 7, 9, 23, 42, 51, 58, 101, 147, 153, 168, 171, 187, 194, 195, 206, 228, 229, 258, 277], "gpu": [1, 3, 5, 10, 15, 21, 23, 26, 42, 45, 49, 51, 52, 53, 55, 56, 57, 59, 60, 63, 66, 76, 85, 86, 96, 97, 101, 102, 103, 105, 113, 119, 123, 126, 132, 136, 137, 138, 139, 141, 142, 144, 149, 150, 151, 153, 154, 155, 159, 162, 165, 168, 170, 173, 177, 178, 180, 181, 182, 190, 192, 197, 201, 203, 205, 206, 214, 220, 223, 224, 229, 242, 249, 251, 259, 260, 261, 263, 264, 266, 267, 279, 281, 282], "worker": [1, 7, 14, 20, 54, 55, 96, 132, 137, 138, 140, 153, 162, 177, 180, 181, 187, 239], "so": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 21, 23, 26, 33, 46, 49, 52, 54, 55, 56, 68, 71, 78, 86, 88, 91, 93, 94, 96, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 118, 119, 126, 129, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 153, 154, 159, 160, 161, 168, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 190, 192, 194, 195, 197, 198, 199, 211, 212, 213, 214, 220, 223, 224, 228, 238, 239, 242, 243, 252, 253, 254, 257, 258, 259, 263, 264, 265, 272, 274, 275, 276, 277, 281], "syncdatacollector": [1, 177], "process": [1, 4, 5, 7, 9, 14, 15, 17, 18, 20, 21, 23, 26, 35, 38, 39, 43, 49, 52, 53, 54, 55, 59, 63, 78, 85, 88, 93, 94, 96, 98, 102, 103, 111, 112, 113, 120, 123, 130, 132, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 149, 150, 153, 154, 158, 159, 161, 162, 170, 171, 176, 178, 180, 181, 182, 183, 187, 190, 194, 195, 201, 205, 206, 208, 214, 224, 226, 228, 229, 238, 239, 240, 242, 248, 253, 254, 255, 257, 258, 259, 263, 264, 265, 276, 279, 280, 281], "offer": [1, 4, 5, 10, 14, 17, 19, 23, 39, 43, 45, 56, 63, 93, 94, 105, 138, 139, 141, 153, 155, 157, 159, 160, 171, 195, 198, 206, 222, 224, 229, 238, 239, 243, 244, 257], "multiasyncdatacollector": [1, 177], "rollout": [1, 177], "asynchron": [1, 132, 136, 140, 143, 174, 177, 181, 229, 259], "manner": [1, 12, 17, 33, 93, 111, 177, 190, 195], "therebi": [1, 254, 266, 272, 277], "decoupl": [1, 35, 169], "factori": [1, 7, 101, 107, 225, 228, 273, 274], "empti": [1, 4, 7, 8, 12, 17, 101, 145, 159, 169, 176, 183, 187, 190, 194, 198, 229, 238, 264], "maximum": [1, 14, 52, 85, 96, 98, 108, 143, 145, 154, 159, 177, 182, 183, 239, 276], "non": [1, 2, 3, 9, 12, 14, 17, 34, 52, 54, 56, 57, 59, 85, 88, 98, 101, 103, 104, 106, 110, 111, 120, 121, 136, 138, 139, 143, 147, 148, 153, 154, 157, 160, 162, 165, 175, 179, 182, 183, 187, 192, 195, 198, 199, 206, 224, 236, 240, 253, 257, 260, 265, 272, 279], "termin": [1, 17, 56, 91, 177, 178, 180, 181, 190], "max_frames_per_traj": [1, 177], "effect": [1, 7, 8, 12, 14, 19, 58, 78, 85, 94, 98, 101, 103, 111, 116, 141, 144, 145, 151, 155, 168, 170, 171, 175, 178, 182, 183, 190, 195, 199, 205, 207, 223, 239, 243, 244, 253, 274, 284], "regist": [1, 5, 8, 9, 10, 19, 38, 45, 49, 98, 116, 118, 120, 135, 136, 138, 139, 141, 151, 157, 168, 169, 177, 191, 194, 201, 213, 220, 223, 230, 241, 263, 264], "new": [1, 2, 4, 5, 7, 9, 10, 12, 15, 17, 19, 26, 32, 33, 37, 42, 45, 47, 51, 52, 53, 55, 58, 64, 67, 78, 80, 81, 82, 83, 85, 88, 96, 100, 101, 102, 103, 105, 108, 110, 115, 116, 118, 120, 126, 129, 131, 133, 135, 136, 137, 138, 139, 140, 142, 146, 154, 157, 159, 161, 168, 169, 170, 171, 174, 175, 177, 178, 179, 182, 183, 187, 190, 191, 194, 195, 197, 201, 220, 229, 236, 239, 240, 245, 259, 260, 263, 264, 266, 267, 272, 277, 284, 285], "stepcount": [1, 154, 177], "infer": [1, 3, 5, 7, 10, 12, 13, 40, 42, 51, 52, 94, 96, 98, 102, 103, 107, 110, 111, 113, 130, 134, 136, 139, 142, 143, 146, 147, 159, 177, 179, 190, 191, 192, 194, 195, 197, 201, 206, 214, 220, 226, 227, 241, 243, 244, 251, 254, 257, 259, 276, 277, 279, 281, 285], "manual": [1, 4, 9, 12, 15, 19, 35, 49, 52, 56, 72, 75, 76, 101, 103, 111, 119, 120, 139, 148, 154, 155, 169, 170, 171, 173, 194, 195, 201, 208, 211, 220, 223, 239, 257, 277], "around": [1, 7, 14, 26, 35, 39, 52, 58, 94, 96, 98, 101, 103, 126, 136, 145, 155, 159, 160, 165, 170, 183, 187, 188, 194, 195, 212, 230, 264, 272, 273], "1m": [1, 96, 154, 177, 261], "outer": [1, 7, 138, 160], "loop": [1, 3, 12, 14, 20, 37, 39, 46, 49, 52, 54, 55, 78, 88, 93, 96, 100, 103, 111, 119, 137, 139, 143, 144, 146, 155, 159, 160, 161, 168, 170, 171, 180, 181, 188, 195, 212, 224, 229, 239, 242, 281], "equal": [1, 13, 93, 101, 103, 142, 162, 175, 177, 178, 190, 194, 254, 257, 263, 264, 275], "length": [1, 15, 17, 52, 55, 93, 94, 98, 110, 111, 141, 145, 177, 182, 183, 195, 198, 253, 259, 261, 274, 277, 281, 284, 285], "sub": [1, 7, 93, 118, 141, 146, 173, 177, 181, 187, 192, 195, 208, 248, 257], "shape": [1, 4, 5, 8, 19, 21, 33, 42, 45, 51, 52, 55, 71, 88, 93, 96, 103, 104, 107, 110, 118, 119, 138, 141, 144, 145, 146, 155, 157, 160, 170, 177, 187, 190, 191, 195, 197, 198, 212, 220, 224, 227, 229, 235, 248, 249, 251, 252, 254, 259, 260, 265, 275, 277, 281], "env_per_collector": 1, "traj_len": 1, "perform": [1, 3, 5, 7, 12, 13, 14, 15, 17, 18, 19, 20, 21, 33, 34, 38, 39, 43, 45, 46, 47, 52, 59, 66, 70, 75, 78, 85, 88, 91, 93, 96, 98, 101, 102, 103, 104, 105, 110, 111, 119, 120, 129, 130, 131, 132, 134, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 153, 154, 157, 160, 161, 165, 171, 173, 174, 177, 178, 179, 181, 184, 185, 188, 190, 191, 192, 194, 195, 197, 198, 199, 201, 203, 208, 211, 213, 214, 220, 223, 224, 225, 227, 228, 229, 235, 238, 242, 243, 244, 247, 251, 253, 254, 255, 259, 260, 261, 264, 265, 266, 272, 273, 277, 279, 281, 285], "assess": [1, 171, 195], "mode": [1, 15, 40, 45, 52, 55, 58, 78, 85, 88, 90, 94, 100, 120, 131, 136, 138, 146, 147, 148, 154, 159, 161, 162, 165, 173, 179, 182, 183, 184, 188, 190, 191, 192, 194, 195, 198, 206, 212, 213, 224, 239, 246, 253, 254, 257, 259, 260, 263, 264, 279, 285], "dedic": [1, 13, 58, 101, 180, 181, 222, 223, 258], "frequenc": [1, 86, 143], "everi": [1, 2, 7, 12, 13, 17, 18, 21, 23, 26, 33, 34, 35, 39, 45, 46, 49, 52, 54, 55, 58, 63, 93, 96, 98, 100, 101, 102, 126, 141, 142, 144, 145, 147, 153, 154, 157, 162, 168, 169, 170, 171, 175, 177, 178, 179, 181, 183, 187, 188, 192, 194, 195, 203, 225, 237, 239, 250, 258, 277, 281], "10": [1, 3, 7, 8, 12, 14, 21, 34, 35, 43, 45, 46, 47, 52, 56, 78, 86, 91, 96, 102, 118, 120, 137, 138, 140, 146, 151, 153, 155, 162, 176, 179, 180, 181, 182, 183, 187, 188, 190, 194, 195, 198, 203, 205, 208, 211, 212, 214, 220, 224, 226, 229, 237, 238, 254, 263, 264, 265, 267, 281], "come": [1, 5, 7, 9, 13, 21, 43, 54, 55, 78, 88, 91, 93, 98, 101, 103, 104, 116, 120, 137, 141, 143, 153, 154, 159, 168, 169, 171, 174, 177, 182, 192, 194, 195, 198, 214, 224, 249, 258, 265, 281], "flavor": [1, 4], "priorit": [1, 239, 277], "error": [1, 4, 7, 9, 12, 13, 14, 15, 19, 38, 39, 45, 49, 52, 53, 56, 71, 93, 96, 98, 101, 103, 107, 111, 115, 116, 119, 129, 138, 140, 142, 148, 168, 174, 177, 178, 192, 195, 198, 208, 213, 224, 236, 239, 242, 252, 263, 265, 272, 280], "higher": [1, 46, 51, 56, 85, 93, 94, 98, 103, 105, 119, 137, 138, 144, 145, 148, 157, 160, 176, 177, 178, 187, 188, 190, 194, 195, 201, 204, 208, 211, 279, 284], "likelihood": [1, 38, 52, 98, 105, 111], "regular": [1, 7, 12, 13, 26, 103, 111, 123, 141, 144, 145, 160, 169, 170, 171, 185, 195, 198, 213, 239, 251, 272, 274, 277, 279], "circular": [1, 263, 280], "compos": [1, 4, 7, 10, 13, 19, 21, 63, 96, 98, 105, 136, 137, 153, 157, 165, 170, 176, 177, 180, 182, 184, 188, 190, 198, 208, 213, 226, 229, 243, 244, 247, 249, 260], "pick": [1, 7, 46, 104, 144, 178, 183, 220, 238, 249], "tensor": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 21, 34, 35, 36, 37, 38, 39, 40, 43, 45, 46, 47, 48, 49, 50, 52, 60, 63, 64, 66, 67, 68, 70, 71, 72, 74, 77, 78, 88, 93, 94, 95, 97, 98, 100, 102, 103, 105, 108, 111, 112, 113, 116, 118, 120, 121, 131, 136, 137, 138, 139, 145, 146, 147, 148, 151, 153, 154, 155, 157, 159, 160, 162, 165, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 190, 191, 192, 194, 195, 197, 199, 207, 208, 211, 212, 213, 222, 223, 224, 226, 227, 228, 229, 230, 235, 238, 241, 242, 243, 248, 251, 259, 260, 261, 263, 264, 265, 266, 267, 272, 273, 274, 281, 282, 284, 285], "physic": [1, 17, 110, 171, 228, 239, 257], "memori": [1, 7, 12, 13, 20, 21, 23, 42, 51, 52, 54, 58, 91, 98, 101, 102, 103, 106, 109, 111, 113, 120, 131, 135, 136, 137, 138, 139, 141, 149, 153, 154, 159, 160, 161, 165, 175, 180, 182, 184, 187, 190, 194, 195, 197, 198, 201, 213, 223, 224, 228, 230, 248, 258, 259, 260, 261, 263, 264, 265, 272, 275, 277, 281], "map": [1, 7, 15, 34, 52, 55, 94, 96, 98, 103, 108, 110, 120, 139, 144, 154, 155, 160, 168, 169, 170, 177, 178, 181, 190, 194, 197, 206, 211, 228, 238, 239, 241, 281, 284], "arrai": [1, 7, 33, 34, 45, 46, 49, 54, 63, 75, 76, 88, 93, 94, 101, 110, 111, 118, 119, 144, 145, 161, 176, 183, 190, 222, 275], "desir": [1, 4, 12, 15, 17, 20, 52, 55, 78, 85, 103, 120, 139, 153, 175, 187, 190, 194, 220, 223, 226, 254, 257, 261, 263, 265, 273], "hyperparamet": [1, 7, 17, 21, 55, 111, 120, 121, 131, 134, 136, 143, 144, 241, 260, 272, 277], "temporari": [1, 143], "directori": [1, 7, 9, 15, 35, 52, 54, 55, 91, 100, 103, 120, 123, 126, 143, 144, 145, 159, 183, 187, 190, 206, 214, 220, 237, 248, 257, 263, 265], "disk": [1, 8, 35, 96, 100, 113, 120, 154, 171, 224, 228, 229, 237, 248, 249, 263, 264], "along": [1, 7, 12, 17, 21, 33, 34, 42, 45, 51, 52, 56, 57, 58, 59, 86, 93, 94, 96, 97, 98, 100, 101, 102, 103, 107, 108, 111, 112, 126, 137, 138, 144, 145, 149, 150, 154, 168, 175, 178, 180, 188, 190, 194, 195, 253, 261, 274, 279, 281, 285], "dimens": [1, 7, 15, 17, 23, 34, 42, 49, 51, 52, 94, 96, 98, 100, 107, 108, 110, 111, 131, 136, 141, 144, 154, 155, 162, 170, 176, 177, 179, 191, 194, 195, 223, 239, 254, 261, 273, 277, 284, 285], "feed": [1, 7, 15, 46, 49, 52, 96, 98, 102, 103, 106, 108, 113, 120, 141, 144, 145, 151, 161, 178, 183, 188, 206, 226, 242], "adapt": [1, 2, 17, 21, 26, 91, 96, 113, 143, 199, 224, 261, 281], "divid": [1, 12, 13, 14, 15, 17, 18, 88, 103, 105, 140, 153, 169, 171, 181, 254, 257], "yield": [1, 7, 14, 15, 21, 38, 40, 101, 120, 141, 142, 179, 181, 198, 212, 239, 243, 265, 275, 281], "regard": [1, 7, 8, 14, 17, 120, 159, 160, 177, 187, 195, 253], "200": [1, 7, 154, 162, 181, 212, 265], "random_crop_len": 1, "25": [1, 78, 93, 96, 103, 118, 126, 137, 180, 190, 211, 212, 224, 229, 265], "balanc": [1, 7, 23, 151, 187, 195, 220], "choic": [1, 4, 7, 12, 19, 91, 143, 145, 153, 171, 195, 203, 239], "heterogen": [1, 285], "figur": [1, 9, 12, 15, 17, 52, 78, 85, 96, 103, 135, 136, 140, 141, 143, 154, 159, 171, 179, 187, 188, 190, 194], "dataflow": 1, "8": [1, 3, 5, 7, 8, 21, 43, 91, 96, 98, 99, 107, 108, 118, 119, 138, 141, 147, 151, 159, 162, 169, 173, 176, 187, 190, 194, 195, 201, 205, 206, 207, 208, 211, 212, 223, 229, 239, 257, 258, 261, 263, 265, 267, 281, 282], "1000": [1, 2, 45, 100, 102, 126, 137, 138, 142, 159, 177, 188, 220, 224, 238, 281], "known": [1, 4, 15, 21, 93, 141, 153, 157, 158, 175, 178, 183, 194, 195, 201, 224, 238, 249, 263, 281], "utd": 1, "64": [1, 7, 18, 21, 23, 35, 39, 45, 91, 101, 108, 111, 137, 138, 141, 154, 155, 170, 176, 179, 180, 195, 201, 211, 212, 224, 229, 243, 244, 261, 276, 281, 284], "reproduc": [1, 15, 55, 78, 96, 101, 103, 159, 177, 178, 181, 192, 212, 224, 239], "realiz": [1, 21, 281], "sever": [1, 2, 3, 4, 8, 9, 13, 14, 18, 20, 33, 39, 43, 47, 49, 55, 56, 57, 78, 103, 105, 136, 138, 141, 144, 150, 153, 161, 168, 169, 171, 174, 177, 179, 180, 187, 188, 192, 194, 198, 212, 213, 224, 238, 248, 249, 257, 274, 279], "qnet": 1, "ve": [1, 7, 9, 12, 21, 47, 49, 53, 93, 94, 96, 98, 101, 102, 111, 142, 154, 158, 160, 168, 170, 171, 180, 188, 194, 195, 205, 206, 224, 265, 272, 274, 275, 276, 281], "becaus": [1, 2, 4, 7, 9, 12, 15, 17, 18, 19, 20, 21, 33, 35, 40, 42, 45, 46, 49, 51, 52, 54, 55, 58, 59, 78, 88, 91, 93, 94, 96, 98, 101, 103, 104, 105, 107, 111, 112, 113, 116, 120, 126, 129, 138, 139, 142, 144, 147, 148, 151, 154, 157, 160, 161, 162, 165, 170, 171, 175, 179, 181, 183, 185, 187, 192, 194, 197, 198, 199, 203, 211, 212, 224, 236, 239, 241, 242, 254, 265, 272, 274, 281, 284], "_must_": 1, "off": [1, 12, 20, 26, 33, 45, 52, 98, 101, 120, 137, 143, 144, 159, 168, 177, 179, 180, 181, 190, 205, 272], "dictat": [1, 17], "introduc": [1, 8, 9, 14, 18, 20, 21, 26, 34, 37, 57, 91, 94, 103, 105, 118, 119, 136, 138, 140, 146, 151, 159, 162, 168, 179, 181, 182, 183, 190, 192, 194, 195, 201, 205, 213, 236, 239, 254, 255, 257, 264, 266, 267, 272, 274, 275, 276, 279, 281, 284], "outdat": 1, "trick": [1, 4, 7, 13, 52, 101, 148, 153, 160], "multi": [1, 7, 17, 23, 49, 52, 55, 56, 57, 59, 63, 93, 94, 98, 101, 105, 134, 136, 138, 139, 141, 149, 150, 151, 154, 177, 179, 182, 184, 187, 197, 206, 208, 239, 257, 260, 277], "altern": [1, 7, 13, 51, 52, 108, 126, 137, 155, 158, 162, 174, 177, 183, 187, 190, 192, 198, 199, 206, 236, 239, 255, 265, 275, 276], "hack": [1, 236, 272], "find": [1, 2, 4, 7, 9, 12, 13, 21, 33, 35, 42, 51, 78, 85, 86, 88, 91, 96, 98, 101, 104, 107, 111, 134, 136, 137, 140, 144, 153, 157, 159, 169, 178, 181, 183, 187, 194, 195, 214, 220, 222, 224, 237, 272, 273, 274, 275, 276, 281], "well": [1, 3, 4, 7, 12, 13, 14, 35, 42, 46, 51, 52, 56, 70, 85, 88, 91, 94, 96, 103, 105, 107, 111, 113, 119, 120, 126, 129, 130, 137, 138, 139, 142, 143, 144, 147, 148, 153, 154, 157, 168, 169, 171, 173, 176, 179, 180, 181, 182, 183, 187, 188, 190, 192, 195, 197, 205, 206, 208, 213, 220, 224, 228, 236, 238, 241, 249, 250, 251, 254, 255, 257, 272, 273, 274, 277], "despit": [1, 78, 146, 151], "fact": [1, 3, 4, 7, 12, 15, 17, 33, 42, 78, 93, 94, 96, 98, 101, 103, 105, 110, 142, 169, 177, 178, 188, 194, 195, 198], "part": [1, 3, 7, 12, 13, 16, 17, 18, 20, 38, 45, 47, 52, 55, 78, 91, 93, 94, 98, 104, 106, 110, 111, 112, 136, 138, 141, 142, 144, 145, 148, 149, 153, 154, 158, 159, 166, 168, 169, 177, 183, 194, 195, 220, 222, 223, 236, 238, 244, 248, 251, 254, 261, 263, 265, 266, 272, 274, 276, 285], "made": [1, 7, 13, 18, 55, 91, 94, 101, 103, 138, 140, 142, 153, 154, 171, 183, 188, 190, 194, 222, 239, 275, 285], "thank": [1, 52, 111, 143, 144, 145, 153, 183, 198], "hardupd": 1, "softupd": [1, 154], "appropri": [1, 7, 12, 52, 94, 111, 143, 151, 169, 180, 188, 195, 198, 212, 213, 223, 264, 279], "locat": [1, 4, 7, 32, 35, 42, 51, 85, 94, 96, 110, 118, 153, 171, 177, 187, 197, 206, 220, 229, 239, 248, 263], "adam": [1, 7, 14, 16, 38, 49, 55, 72, 102, 105, 119, 129, 139, 153, 168, 178, 179, 181, 203, 204, 205, 206, 211, 258], "pretti": [1, 20, 46, 101, 118, 119, 160, 181, 284], "plot": [1, 7, 55, 78, 85, 93, 143, 154, 171, 178, 179, 188, 190, 199], "alreadi": [1, 2, 4, 7, 9, 13, 14, 18, 93, 96, 101, 103, 104, 111, 129, 141, 143, 151, 162, 168, 171, 173, 176, 177, 182, 188, 195, 208, 212, 224, 226, 239, 240, 241, 242, 243, 244, 258, 274, 276, 280], "mention": [1, 4, 7, 13, 14, 18, 20, 55, 78, 88, 101, 103, 104, 120, 137, 141, 153, 154, 171, 178, 180, 187, 190, 194, 198, 206, 220, 228, 236, 243, 248, 257], "greater": [1, 14, 52, 55, 94, 119, 142, 257], "concret": [1, 7, 8, 12, 14, 93, 171, 177, 194, 272], "takeawai": [1, 123, 198, 239], "further": [1, 7, 12, 49, 78, 91, 98, 103, 111, 141, 153, 159, 171, 175, 177, 190, 191, 192, 194, 205, 213, 228, 247, 265, 277, 279, 280, 285], "might": [1, 4, 8, 12, 13, 18, 19, 20, 33, 40, 46, 53, 54, 55, 56, 93, 96, 101, 103, 104, 108, 110, 113, 116, 118, 129, 139, 148, 149, 150, 151, 153, 158, 160, 169, 171, 178, 181, 182, 183, 187, 192, 194, 195, 197, 198, 208, 224, 225, 229, 236, 239, 244, 254, 257, 263, 265, 272, 280], "dispatch": [1, 4, 18, 135, 136, 139, 174, 198, 201, 212, 220, 223, 250], "distpatch": 1, "iql": 1, "flexibl": [1, 2, 7, 26, 52, 88, 93, 111, 113, 120, 131, 136, 138, 139, 149, 198, 206, 224, 279], "runnable_code_remov": [1, 9, 15, 16, 17, 19, 21, 33, 34, 35, 37, 38, 39, 40, 42, 45, 46, 47, 49, 51, 52, 54, 55, 65, 66, 68, 71, 72, 75, 76, 78, 88, 91, 93, 94, 97, 98, 100, 101, 102, 103, 104, 105, 108, 110, 111, 112, 113, 115, 116, 118, 119, 123, 126, 129, 142, 143, 144, 145, 147, 154, 157, 158, 159, 160, 161, 162, 163, 165, 168, 170, 171, 175, 177, 178, 182, 183, 185, 187, 191, 192, 194, 195, 197, 198, 199, 204, 222, 223, 224, 225, 226, 228, 229, 230, 236, 238, 239, 240, 241, 242, 243, 244, 250, 251, 252, 253, 255, 265, 272, 273, 274, 275, 277, 284], "minut": [1, 15, 16, 17, 19, 33, 34, 35, 38, 39, 40, 42, 43, 45, 46, 47, 49, 51, 52, 54, 55, 71, 75, 76, 78, 88, 91, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 116, 123, 126, 129, 140, 142, 143, 144, 145, 147, 155, 157, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 175, 176, 177, 178, 182, 183, 185, 188, 192, 194, 197, 198, 199, 204, 211, 225, 228, 230, 236, 243, 244, 250, 251, 252, 253, 255, 265, 272, 273, 274, 275, 277, 284], "002": [1, 15, 16, 17, 19, 22, 33, 34, 35, 38, 39, 40, 41, 42, 45, 46, 47, 49, 50, 51, 54, 71, 73, 75, 76, 77, 91, 93, 98, 99, 101, 104, 108, 109, 110, 111, 112, 113, 116, 117, 121, 123, 129, 138, 142, 143, 144, 147, 158, 160, 161, 162, 165, 168, 170, 175, 177, 178, 183, 184, 185, 197, 199, 204, 225, 228, 230, 235, 236, 243, 244, 246, 250, 251, 252, 253, 255, 260, 272, 273, 274, 275, 277, 282, 284], "jupyt": [1, 15, 16, 17, 19, 21, 26, 33, 34, 35, 37, 38, 39, 40, 42, 43, 45, 46, 47, 49, 51, 52, 54, 55, 65, 66, 68, 70, 71, 72, 75, 76, 78, 85, 88, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 115, 116, 118, 120, 123, 126, 129, 142, 143, 144, 145, 147, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 175, 177, 178, 182, 183, 185, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 204, 211, 222, 223, 224, 225, 226, 228, 229, 230, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 251, 252, 253, 255, 264, 265, 272, 273, 274, 275, 277, 284], "notebook": [1, 15, 16, 17, 19, 21, 23, 26, 33, 34, 35, 37, 38, 39, 40, 42, 43, 45, 46, 47, 49, 51, 52, 53, 54, 55, 65, 66, 68, 70, 71, 72, 75, 76, 78, 85, 86, 88, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 118, 120, 123, 126, 129, 142, 143, 144, 145, 147, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 175, 177, 178, 182, 183, 185, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 204, 211, 222, 223, 224, 225, 226, 228, 229, 230, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 251, 252, 253, 255, 264, 265, 272, 273, 274, 275, 277, 284], "coding_ddpg": [1, 22, 260], "ipynb": [1, 15, 16, 17, 19, 21, 26, 33, 34, 35, 37, 38, 39, 40, 42, 43, 45, 46, 47, 49, 51, 52, 54, 55, 65, 66, 68, 70, 71, 72, 75, 76, 78, 88, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 115, 116, 118, 120, 123, 126, 129, 142, 143, 144, 145, 147, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 175, 177, 178, 182, 183, 185, 187, 191, 192, 194, 195, 197, 198, 199, 204, 211, 222, 223, 224, 225, 226, 228, 229, 230, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 251, 252, 253, 255, 264, 265, 272, 273, 274, 275, 277, 284], "python": [1, 3, 7, 8, 13, 15, 16, 17, 18, 21, 22, 23, 26, 33, 34, 35, 37, 38, 39, 40, 42, 43, 45, 46, 47, 49, 51, 52, 54, 55, 56, 58, 59, 60, 65, 66, 68, 70, 71, 72, 75, 76, 78, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 115, 116, 118, 119, 120, 123, 126, 129, 130, 135, 136, 137, 138, 142, 143, 144, 145, 146, 147, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 175, 176, 177, 178, 180, 182, 183, 185, 187, 191, 192, 194, 195, 197, 198, 199, 204, 206, 207, 208, 211, 213, 220, 222, 223, 224, 225, 226, 228, 229, 230, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 250, 251, 252, 254, 257, 259, 260, 261, 263, 264, 265, 266, 272, 273, 274, 275, 277, 279, 280, 284, 285], "sourc": [1, 3, 5, 7, 13, 14, 15, 16, 17, 19, 20, 21, 26, 33, 34, 35, 37, 38, 39, 40, 42, 43, 45, 46, 47, 49, 51, 52, 54, 55, 58, 65, 66, 68, 70, 71, 72, 75, 76, 78, 88, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 115, 116, 118, 120, 123, 126, 129, 138, 141, 142, 143, 144, 145, 147, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 174, 175, 177, 178, 179, 181, 182, 183, 185, 187, 190, 191, 192, 194, 195, 197, 198, 199, 204, 211, 213, 214, 222, 223, 224, 225, 226, 228, 229, 230, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 251, 252, 253, 255, 263, 264, 265, 266, 272, 273, 274, 275, 277, 284, 285], "py": [1, 4, 5, 7, 9, 12, 13, 15, 16, 17, 19, 21, 22, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 126, 129, 137, 138, 139, 142, 143, 144, 145, 146, 147, 149, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 173, 174, 175, 177, 178, 180, 182, 183, 184, 185, 187, 191, 192, 194, 195, 197, 198, 199, 204, 207, 208, 211, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 250, 251, 252, 253, 254, 255, 257, 260, 261, 263, 264, 265, 272, 273, 274, 275, 277, 280, 282, 284], "zip": [1, 7, 15, 16, 17, 19, 21, 23, 26, 33, 34, 35, 37, 38, 39, 40, 42, 43, 45, 46, 47, 49, 51, 52, 53, 54, 55, 65, 66, 68, 70, 71, 72, 75, 76, 78, 88, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 115, 116, 118, 120, 123, 126, 129, 142, 143, 144, 145, 147, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 175, 177, 178, 179, 181, 182, 183, 185, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 204, 211, 222, 223, 224, 225, 226, 228, 229, 230, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 251, 252, 253, 255, 264, 265, 272, 273, 274, 275, 277, 281, 284], "The": [2, 3, 4, 5, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 26, 33, 34, 35, 38, 39, 42, 43, 45, 46, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 63, 70, 71, 72, 76, 78, 85, 86, 88, 94, 95, 96, 98, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 118, 119, 120, 123, 126, 127, 129, 131, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 175, 176, 177, 178, 179, 180, 181, 182, 185, 187, 190, 191, 192, 194, 195, 197, 199, 201, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 223, 224, 226, 228, 229, 236, 237, 238, 239, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 261, 263, 264, 265, 266, 272, 273, 274, 275, 276, 277, 279, 280, 281, 284], "packag": [2, 4, 7, 21, 23, 26, 46, 49, 54, 60, 63, 71, 72, 91, 102, 103, 105, 111, 115, 119, 126, 131, 132, 136, 137, 138, 151, 153, 158, 174, 176, 178, 181, 187, 190, 192, 208, 213, 222, 226, 229, 238, 242, 254, 259, 280, 281], "build": [2, 7, 8, 17, 33, 35, 36, 37, 38, 39, 40, 42, 43, 49, 52, 63, 71, 72, 91, 93, 94, 95, 96, 97, 100, 101, 102, 104, 110, 111, 118, 119, 123, 129, 130, 131, 132, 136, 144, 145, 153, 154, 157, 166, 168, 170, 171, 177, 178, 179, 180, 181, 184, 194, 195, 200, 213, 224, 226, 238, 239, 251, 254, 260, 263, 267, 277, 284, 285], "highli": [2, 7, 13, 23, 52, 91, 183, 195, 239, 284], "dynam": [2, 7, 8, 9, 12, 15, 17, 18, 33, 45, 56, 68, 93, 103, 106, 109, 112, 119, 120, 129, 130, 131, 136, 146, 162, 175, 177, 213, 223, 227, 239, 246, 249, 251, 254, 259, 260, 265], "neural": [2, 16, 17, 21, 22, 33, 36, 37, 39, 45, 48, 50, 52, 54, 60, 71, 78, 93, 94, 96, 98, 102, 103, 104, 105, 106, 107, 108, 110, 113, 115, 119, 126, 131, 133, 134, 136, 143, 144, 145, 146, 147, 154, 166, 175, 177, 178, 180, 183, 184, 185, 188, 190, 199, 201, 212, 213, 220, 227, 235, 239, 244, 259, 260, 276, 279, 281], "network": [2, 3, 8, 12, 15, 16, 17, 21, 33, 36, 37, 38, 39, 40, 45, 48, 50, 52, 54, 60, 71, 72, 78, 93, 94, 96, 98, 102, 103, 104, 106, 107, 109, 110, 111, 113, 115, 119, 126, 129, 131, 133, 136, 142, 143, 146, 147, 150, 151, 165, 166, 169, 171, 175, 180, 184, 187, 188, 190, 199, 201, 212, 213, 220, 227, 230, 235, 239, 244, 259, 260, 263, 276, 279, 281], "api": [2, 4, 5, 9, 10, 11, 12, 13, 14, 17, 18, 19, 23, 26, 34, 35, 37, 39, 42, 43, 51, 59, 85, 94, 115, 118, 120, 130, 131, 135, 136, 137, 138, 140, 141, 142, 143, 146, 151, 153, 158, 159, 160, 164, 170, 172, 173, 179, 180, 181, 187, 188, 192, 194, 195, 197, 205, 206, 207, 208, 213, 214, 222, 224, 225, 229, 238, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 259, 260, 261, 264, 265, 276, 279, 284, 285], "explor": [2, 7, 12, 17, 47, 52, 78, 116, 130, 131, 134, 136, 143, 148, 154, 159, 161, 168, 171, 173, 177, 178, 182, 183, 195, 198, 207, 222, 248, 251, 254, 257, 263, 276], "note": [2, 4, 7, 9, 12, 15, 18, 19, 20, 21, 23, 26, 33, 45, 46, 47, 49, 52, 53, 55, 78, 88, 93, 94, 96, 98, 101, 102, 105, 106, 107, 108, 110, 111, 116, 118, 120, 126, 129, 137, 138, 139, 141, 142, 147, 148, 150, 151, 153, 155, 157, 159, 160, 162, 168, 170, 171, 174, 175, 179, 180, 181, 182, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 201, 205, 206, 208, 214, 229, 238, 241, 244, 248, 249, 250, 251, 257, 258, 263, 264, 272, 273, 274, 275, 277, 281, 284], "pleas": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 19, 24, 25, 46, 47, 49, 54, 61, 62, 84, 91, 129, 137, 138, 141, 151, 153, 155, 157, 158, 159, 162, 168, 170, 174, 179, 180, 181, 187, 190, 192, 194, 195, 197, 198, 199, 202, 206, 208, 209, 212, 213, 214, 216, 217, 218, 219, 220, 221, 223, 225, 254, 256, 257, 263, 264, 266, 267, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 284], "differenti": [2, 7, 17, 23, 36, 37, 42, 48, 49, 60, 93, 119, 129, 131, 136, 154, 170, 178, 184, 185, 199, 260, 274], "requires_grad": [2, 4, 5, 7, 12, 33, 45, 49, 65, 66, 93, 101, 107, 111, 119, 121, 126, 136, 146, 148, 169, 228, 242, 260, 261, 281], "track": [2, 12, 17, 34, 38, 45, 55, 85, 93, 98, 100, 101, 105, 107, 111, 119, 129, 138, 140, 145, 146, 150, 154, 181, 183, 187, 207, 229, 237, 242, 253, 254, 280], "auto": [2, 3, 7, 8, 9, 12, 13, 15, 58, 137, 138, 159, 174, 194, 195, 211, 213, 214, 224, 238, 257, 266, 276], "x": [2, 4, 7, 8, 9, 15, 23, 33, 42, 45, 49, 51, 52, 55, 65, 66, 70, 71, 72, 75, 76, 78, 88, 93, 96, 98, 101, 103, 104, 105, 107, 111, 119, 120, 129, 137, 139, 141, 142, 144, 145, 146, 148, 151, 153, 155, 160, 169, 171, 173, 174, 176, 179, 180, 181, 188, 190, 191, 192, 194, 197, 205, 206, 208, 211, 212, 213, 220, 224, 237, 238, 249, 251, 254, 265, 266, 267, 276, 277, 279, 281], "std": [2, 7, 8, 9, 15, 18, 54, 96, 103, 174, 176, 181, 190, 213, 224, 266, 272], "cout": [2, 7, 213], "endl": [2, 7, 213], "cpufloattyp": [2, 7], "y": [2, 9, 23, 33, 42, 43, 45, 51, 55, 65, 66, 70, 71, 72, 75, 76, 78, 85, 88, 93, 96, 98, 101, 103, 104, 107, 108, 111, 119, 129, 138, 142, 173, 174, 187, 190, 192, 194, 237, 238, 249, 251, 266, 267, 274, 276], "wa": [2, 3, 4, 9, 14, 19, 21, 46, 54, 55, 78, 93, 94, 96, 98, 101, 102, 103, 104, 105, 107, 111, 116, 120, 129, 137, 141, 143, 146, 151, 153, 161, 165, 168, 169, 170, 171, 173, 175, 176, 177, 178, 181, 182, 183, 188, 194, 195, 198, 206, 220, 223, 224, 229, 231, 232, 233, 234, 243, 254, 257, 265, 274, 275, 281], "result": [2, 4, 5, 7, 8, 12, 13, 15, 17, 21, 26, 33, 38, 40, 42, 45, 46, 54, 66, 70, 85, 86, 91, 93, 94, 96, 101, 102, 103, 107, 111, 116, 119, 120, 123, 129, 138, 139, 140, 141, 142, 145, 151, 153, 154, 157, 159, 160, 161, 165, 170, 171, 174, 175, 176, 178, 179, 180, 181, 182, 188, 190, 191, 192, 194, 197, 198, 203, 205, 211, 212, 214, 226, 228, 229, 236, 238, 239, 243, 244, 248, 249, 251, 252, 253, 257, 258, 259, 261, 263, 265, 273, 274, 275, 276, 277], "grad_fn": [2, 33, 45, 49, 93, 96, 107, 129, 142, 148, 169], "name": [2, 4, 5, 7, 9, 12, 13, 15, 16, 17, 19, 21, 23, 33, 53, 54, 55, 85, 104, 110, 111, 113, 116, 118, 120, 136, 138, 141, 143, 146, 151, 154, 159, 166, 169, 173, 174, 175, 177, 178, 179, 180, 182, 183, 184, 187, 190, 192, 195, 197, 199, 206, 208, 212, 214, 224, 228, 229, 238, 240, 253, 257, 260, 263, 279, 280, 281], "addbackward1": 2, "z": [2, 55, 88, 96, 101, 107, 129, 194, 274], "27": [2, 43, 54, 159, 181, 211, 212, 224, 253, 265], "mulbackward1": 2, "meanbackward0": 2, "requires_grad_": [2, 33, 107, 129], "exist": [2, 7, 9, 12, 13, 14, 19, 21, 49, 55, 56, 63, 70, 86, 88, 101, 107, 119, 136, 146, 153, 175, 176, 181, 182, 183, 185, 187, 190, 192, 194, 198, 205, 207, 223, 224, 236, 239, 243, 272, 273, 275, 280, 281], "flag": [2, 4, 17, 45, 93, 107, 169, 183, 194, 228, 238, 244, 257, 285], "place": [2, 7, 9, 14, 17, 23, 42, 45, 47, 51, 55, 88, 94, 98, 100, 105, 107, 111, 138, 143, 151, 153, 155, 168, 170, 171, 177, 183, 190, 192, 194, 195, 198, 199, 206, 211, 228, 236, 238, 239, 261, 272, 279, 284], "randn": [2, 4, 5, 7, 8, 15, 70, 107, 119, 120, 146, 151, 155, 179, 181, 214, 224, 237, 254, 258, 266, 267, 276, 279, 284], "b": [2, 4, 5, 7, 21, 23, 33, 43, 45, 65, 66, 70, 86, 93, 96, 101, 105, 108, 110, 111, 118, 119, 129, 142, 144, 145, 159, 160, 162, 176, 178, 192, 194, 195, 198, 224, 229, 249, 263, 267, 276, 281], "sumbackward0": [2, 107], "backprop": [2, 45, 107, 111, 144, 161], "scalar": [2, 17, 18, 33, 45, 52, 55, 65, 93, 96, 101, 107, 119, 129, 188, 194, 211], "backward": [2, 3, 4, 5, 7, 8, 12, 14, 15, 16, 18, 19, 20, 33, 38, 45, 47, 49, 55, 65, 66, 70, 75, 76, 93, 94, 96, 102, 107, 108, 111, 119, 126, 129, 130, 135, 136, 137, 141, 142, 145, 149, 151, 153, 157, 160, 165, 170, 173, 179, 180, 181, 184, 187, 188, 194, 195, 198, 199, 203, 204, 205, 206, 211, 213, 223, 229, 237, 239, 242, 247, 251, 253, 258, 260], "equival": [2, 9, 14, 33, 45, 93, 105, 119, 139, 157, 170, 173, 178, 180, 190, 194, 195, 198, 239, 255, 266, 272, 274, 277, 281], "print": [2, 7, 9, 14, 17, 23, 34, 39, 46, 47, 52, 54, 55, 56, 70, 78, 88, 91, 93, 96, 98, 101, 103, 105, 107, 110, 111, 112, 115, 119, 120, 129, 137, 138, 139, 140, 145, 146, 147, 150, 151, 153, 154, 155, 159, 169, 173, 174, 176, 179, 180, 181, 183, 188, 191, 192, 194, 195, 198, 203, 205, 206, 207, 208, 211, 212, 213, 214, 223, 224, 229, 230, 239, 241, 255, 258, 263, 264, 267, 272, 274, 280, 281], "d": [2, 4, 7, 9, 12, 39, 43, 55, 63, 65, 66, 70, 93, 94, 96, 98, 101, 105, 110, 111, 119, 138, 141, 143, 145, 147, 153, 160, 161, 168, 173, 187, 190, 194, 198, 208, 252, 275], "dx": [2, 66, 105, 119, 148], "grad": [2, 4, 7, 15, 19, 33, 45, 49, 65, 93, 107, 111, 119, 129, 137, 142, 146, 148, 151, 153, 157, 160, 165, 168, 179, 180, 181, 198, 204, 211, 223, 242, 272, 284], "5000": [2, 224], "got": [2, 18, 58, 94, 96, 101, 104, 105, 107, 111, 151, 174, 180, 194, 254], "matrix": [2, 7, 15, 21, 33, 42, 45, 51, 85, 93, 96, 98, 101, 104, 105, 107, 110, 111, 118, 141, 144, 145, 160, 165, 169, 182, 183, 190, 194, 195, 198, 199, 212, 213, 214, 220, 226, 239, 253, 259, 275, 277, 281, 284], "explan": [2, 55, 188, 228], "arriv": [2, 7, 18, 138, 151, 179, 239], "valu": [2, 4, 7, 8, 9, 15, 17, 23, 33, 34, 38, 42, 43, 45, 49, 51, 52, 53, 58, 65, 78, 85, 88, 91, 93, 94, 96, 98, 101, 102, 103, 105, 107, 108, 110, 111, 113, 119, 129, 141, 142, 143, 146, 150, 151, 153, 155, 158, 161, 173, 174, 178, 179, 180, 181, 182, 183, 187, 190, 192, 195, 198, 199, 204, 211, 223, 224, 229, 236, 237, 243, 248, 257, 258, 261, 263, 272, 273, 274, 275, 277, 279, 285], "section": [2, 4, 7, 12, 14, 18, 23, 34, 35, 37, 38, 39, 40, 42, 45, 46, 49, 53, 54, 55, 78, 94, 97, 101, 102, 103, 104, 105, 108, 110, 111, 116, 129, 131, 133, 135, 139, 142, 146, 147, 153, 159, 161, 165, 171, 178, 179, 181, 187, 190, 194, 195, 197, 198, 201, 204, 211, 213, 214, 220, 223, 224, 228, 239, 249, 253, 273, 274], "look": [2, 4, 7, 9, 12, 13, 14, 15, 17, 20, 23, 35, 40, 42, 45, 46, 49, 51, 52, 53, 54, 55, 58, 78, 88, 91, 93, 94, 96, 98, 100, 101, 102, 104, 105, 107, 108, 110, 111, 112, 113, 120, 126, 129, 133, 137, 139, 141, 142, 143, 148, 153, 154, 155, 162, 165, 168, 171, 175, 176, 177, 180, 181, 182, 183, 187, 188, 190, 194, 195, 197, 198, 200, 207, 211, 212, 224, 226, 229, 237, 238, 240, 241, 242, 244, 249, 253, 266, 272, 275, 277, 279], "jacobian": [2, 45, 93, 131, 136, 157, 184, 260, 284], "product": [2, 3, 7, 42, 45, 51, 88, 93, 105, 113, 130, 131, 134, 136, 138, 153, 157, 173, 183, 184, 195, 251, 260, 261, 284], "norm": [2, 17, 21, 55, 98, 103, 130, 135, 136, 141, 169, 173, 175, 184, 190, 198, 260, 281], "1021": 2, "4020": 2, "314": 2, "6695": 2, "613": [2, 212], "4944": 2, "v": [2, 21, 23, 26, 33, 45, 55, 56, 58, 93, 96, 100, 102, 107, 108, 110, 138, 141, 157, 178, 180, 187, 188, 198, 212, 252, 264, 265, 274, 281, 285], "0001": [2, 91, 159], "kfloat": [2, 3, 4, 5, 266], "102": 2, "4000": [2, 96, 238], "1024": [2, 23, 85, 103, 140, 203, 211, 224], "0000": [2, 169, 281], "stop": [2, 33, 91, 93, 107, 145, 162, 168, 177, 179, 183, 187, 214, 229, 263], "histori": [2, 33, 42, 49, 51, 93, 101, 107, 146, 175], "put": [2, 7, 12, 15, 17, 20, 34, 47, 52, 54, 88, 96, 98, 101, 131, 136, 137, 138, 153, 154, 169, 177, 178, 180, 181, 190], "nogradguard": 2, "block": [2, 4, 5, 7, 9, 12, 13, 15, 21, 33, 34, 49, 52, 85, 93, 107, 112, 137, 140, 141, 153, 154, 159, 171, 173, 179, 180, 181, 182, 187, 190, 201, 239, 243, 244, 261, 265, 276, 281], "pow": [2, 211, 272], "no_grad": [2, 33, 45, 93, 96, 105, 107, 108, 111, 119, 137, 138, 161, 176, 180, 188, 194, 211, 213, 239, 247, 276, 279], "Or": [2, 146, 168, 181], "content": [2, 4, 17, 53, 59, 100, 101, 102, 120, 127, 142, 151, 153, 171, 176, 177, 181, 183, 192, 194, 215, 224, 238, 253, 254, 263], "eq": [2, 52, 137, 180, 194, 229], "bool": [2, 14, 17, 18, 174, 190, 257, 276, 281], "is_leaf": [2, 129], "detach_": [2, 181], "register_hook": [2, 146], "retain_grad": [2, 121, 136, 199, 260], "doc": [2, 4, 7, 10, 52, 65, 78, 93, 101, 102, 103, 118, 119, 126, 139, 150, 151, 153, 158, 171, 179, 181, 190, 194, 195, 214, 220, 223, 237, 252, 253, 277, 284], "applic": [2, 3, 14, 15, 17, 18, 35, 52, 63, 94, 98, 103, 113, 126, 131, 132, 133, 136, 137, 142, 143, 147, 151, 158, 168, 171, 175, 179, 181, 190, 194, 205, 206, 211, 212, 214, 220, 239, 253, 257, 265, 274, 280], "calcul": [2, 15, 21, 33, 38, 45, 46, 52, 55, 59, 78, 85, 88, 91, 93, 94, 96, 102, 103, 111, 129, 144, 145, 161, 178, 179, 181, 182, 183, 190, 195, 198, 208, 242, 261, 274, 281], "penalti": [2, 169, 176, 223], "h": [2, 4, 5, 7, 8, 9, 12, 13, 52, 141, 159, 162, 173, 174, 197, 211, 213, 238, 257], "model": [2, 3, 9, 12, 14, 17, 20, 26, 33, 35, 36, 37, 42, 43, 45, 46, 49, 51, 55, 56, 57, 59, 65, 68, 70, 71, 72, 90, 91, 93, 95, 97, 101, 104, 105, 106, 107, 109, 111, 114, 115, 116, 118, 119, 121, 130, 131, 132, 133, 134, 136, 137, 143, 144, 145, 146, 147, 150, 153, 157, 159, 160, 166, 168, 169, 170, 177, 178, 179, 180, 181, 182, 184, 191, 192, 194, 195, 198, 199, 201, 205, 206, 207, 208, 212, 213, 214, 223, 227, 228, 230, 235, 236, 237, 242, 244, 247, 249, 251, 252, 257, 258, 259, 260, 261, 263, 265, 266, 276, 277, 280, 281, 284, 285], "linear": [2, 7, 14, 20, 21, 42, 45, 47, 49, 51, 71, 78, 96, 101, 106, 118, 119, 120, 126, 137, 139, 141, 144, 145, 146, 151, 155, 159, 160, 169, 173, 179, 180, 181, 183, 188, 194, 198, 199, 201, 203, 204, 205, 206, 207, 208, 211, 212, 213, 220, 223, 228, 230, 236, 237, 241, 244, 258, 264, 265, 272, 276, 277, 279, 281], "loss": [2, 3, 7, 14, 17, 20, 21, 22, 33, 39, 42, 45, 51, 68, 70, 71, 72, 75, 76, 78, 91, 93, 96, 100, 105, 110, 111, 119, 120, 129, 133, 136, 137, 138, 139, 144, 146, 153, 161, 162, 170, 173, 178, 180, 181, 183, 187, 188, 195, 213, 214, 237, 247, 258, 260, 281], "target": [2, 3, 7, 9, 17, 20, 23, 38, 46, 49, 52, 58, 78, 94, 101, 103, 105, 108, 110, 111, 116, 137, 145, 153, 154, 155, 159, 168, 170, 171, 173, 174, 176, 178, 179, 180, 181, 183, 188, 190, 192, 194, 197, 213, 214, 220, 224, 226, 247, 279], "mseloss": [2, 15, 38, 49, 70, 119, 151, 179, 205, 206, 237, 258], "grad_output": [2, 12, 13], "ones_lik": [2, 101], "create_graph": [2, 148], "gradient_penalti": 2, "dim": [2, 14, 34, 43, 96, 101, 137, 139, 173, 175, 176, 179, 180, 181, 188, 190, 212, 213, 254, 261, 273, 274], "add": [2, 4, 5, 7, 8, 9, 10, 12, 13, 15, 17, 18, 19, 21, 38, 46, 49, 53, 78, 88, 91, 98, 101, 102, 105, 108, 116, 123, 135, 136, 137, 138, 141, 145, 146, 147, 153, 154, 158, 159, 160, 168, 170, 171, 174, 176, 177, 179, 180, 181, 183, 187, 191, 194, 198, 206, 211, 224, 226, 229, 251, 255, 261, 265, 266, 272, 274, 280, 281], "combined_loss": 2, "1042": 2, "0638": 2, "0103": 2, "0723": 2, "2543": 2, "1222": 2, "0071": 2, "0814": 2, "1683": 2, "1052": 2, "0355": 2, "document": [2, 4, 7, 19, 33, 49, 55, 63, 85, 88, 91, 93, 94, 98, 100, 101, 102, 107, 120, 126, 136, 151, 153, 154, 157, 158, 159, 180, 181, 182, 187, 190, 192, 194, 197, 206, 213, 214, 239, 248, 249, 251, 252, 255, 264, 274, 279, 284], "link": [2, 7, 9, 13, 15, 37, 39, 55, 85, 97, 111, 113, 123, 153, 157, 213, 254, 274, 276], "ad": [2, 7, 8, 13, 18, 23, 26, 33, 52, 53, 56, 78, 86, 88, 93, 96, 98, 100, 101, 102, 105, 107, 120, 137, 138, 144, 145, 146, 151, 154, 157, 160, 165, 168, 174, 178, 182, 183, 194, 197, 213, 236, 238, 241, 252, 280], "subclass": [2, 7, 17, 21, 34, 35, 70, 93, 96, 98, 111, 119, 139, 143, 154, 175, 180, 188, 197, 212, 222, 223, 227, 235, 251, 259, 260, 274, 277, 281], "encod": [2, 17, 42, 43, 49, 51, 98, 106, 109, 138, 143, 154, 169, 177, 181, 190, 198, 223, 254, 260, 265, 281], "method": [2, 4, 7, 8, 12, 13, 14, 15, 17, 20, 21, 33, 34, 40, 42, 46, 49, 52, 54, 58, 70, 78, 86, 88, 93, 94, 96, 98, 100, 101, 103, 105, 107, 111, 112, 119, 120, 132, 136, 140, 143, 144, 148, 151, 154, 157, 158, 159, 160, 161, 169, 170, 171, 173, 174, 175, 177, 178, 179, 180, 188, 190, 192, 194, 195, 198, 199, 205, 206, 214, 222, 223, 226, 237, 238, 239, 244, 254, 257, 272, 276, 279, 281], "forward": [2, 3, 8, 9, 12, 13, 14, 15, 17, 18, 20, 33, 34, 39, 45, 47, 49, 52, 55, 59, 65, 66, 68, 70, 75, 76, 88, 93, 96, 98, 101, 103, 104, 105, 106, 108, 111, 112, 119, 120, 126, 129, 131, 136, 137, 138, 141, 142, 144, 147, 148, 149, 151, 153, 155, 165, 168, 169, 170, 173, 175, 178, 179, 180, 181, 183, 184, 187, 188, 190, 192, 194, 195, 199, 204, 205, 206, 207, 208, 211, 212, 213, 220, 223, 226, 229, 230, 239, 254, 258, 260, 276], "detail": [2, 4, 5, 7, 12, 13, 15, 18, 19, 20, 35, 38, 45, 46, 47, 55, 56, 78, 85, 86, 88, 98, 101, 102, 112, 116, 137, 139, 141, 143, 145, 147, 149, 151, 159, 165, 168, 181, 182, 187, 188, 191, 192, 194, 195, 201, 204, 207, 211, 212, 213, 214, 220, 222, 223, 224, 228, 238, 239, 249, 254, 261, 263, 272, 273, 274, 275, 279, 280, 284], "namespac": [2, 4, 5, 7, 8, 9, 12, 13, 34, 111, 116, 174, 192, 277], "inherit": [2, 9, 14, 18, 39, 54, 88, 96, 101, 102, 105, 158, 161, 177, 190, 197, 254, 263, 274, 277], "linearfunct": 2, "public": [2, 5, 12, 13, 18, 139, 174], "static": [2, 4, 5, 12, 13, 17, 93, 157, 174, 194, 195, 239, 265], "option": [2, 4, 5, 7, 12, 13, 14, 37, 46, 48, 50, 54, 56, 85, 91, 93, 94, 97, 98, 101, 103, 113, 116, 118, 130, 132, 139, 140, 143, 149, 154, 155, 159, 162, 171, 173, 175, 176, 190, 192, 194, 195, 211, 223, 224, 229, 239, 247, 248, 249, 252, 253, 255, 260, 263, 265], "autogradcontext": [2, 12, 13], "ctx": [2, 4, 12, 13, 23, 148], "save_for_backward": [2, 4, 148], "mm": [2, 201, 266], "t": [2, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 21, 26, 33, 37, 38, 42, 45, 46, 49, 53, 55, 56, 58, 63, 70, 78, 91, 93, 94, 96, 98, 101, 103, 104, 105, 107, 108, 110, 111, 113, 116, 119, 120, 126, 129, 137, 138, 142, 148, 154, 155, 157, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 175, 176, 177, 178, 179, 181, 182, 183, 188, 190, 191, 192, 194, 195, 198, 199, 203, 204, 211, 212, 220, 223, 224, 226, 238, 239, 240, 241, 242, 250, 251, 252, 254, 255, 257, 261, 263, 265, 272, 273, 274, 276, 281, 284], "unsqueez": [2, 17, 49, 71, 101, 119, 170, 176, 179, 181, 188], "expand_a": 2, "tensor_list": [2, 12, 13, 153], "save": [2, 4, 7, 9, 14, 15, 33, 34, 35, 36, 37, 38, 42, 43, 46, 51, 52, 53, 55, 78, 91, 100, 102, 103, 121, 126, 136, 137, 139, 141, 143, 147, 159, 160, 173, 175, 179, 180, 181, 183, 184, 187, 190, 195, 213, 214, 226, 227, 228, 229, 237, 238, 239, 241, 242, 244, 249, 253, 259, 260, 263, 282], "get_saved_vari": 2, "grad_input": [2, 148], "grad_weight": 2, "grad_bia": 2, "Then": [2, 4, 9, 15, 18, 21, 26, 46, 47, 55, 78, 88, 104, 105, 108, 110, 111, 116, 123, 137, 151, 168, 173, 174, 175, 177, 178, 179, 181, 183, 187, 208, 236, 261, 280, 281], "appli": [2, 3, 7, 12, 13, 17, 18, 21, 33, 34, 43, 54, 55, 71, 85, 88, 93, 96, 98, 101, 103, 105, 119, 133, 136, 137, 139, 144, 146, 147, 148, 151, 153, 155, 160, 161, 162, 165, 168, 169, 170, 173, 175, 177, 179, 180, 181, 183, 185, 190, 191, 194, 195, 197, 198, 199, 201, 203, 206, 207, 208, 213, 214, 222, 236, 239, 243, 244, 247, 248, 251, 253, 255, 261, 263, 265, 272, 273, 277, 281, 284], "5314": 2, "2807": 2, "4864": 2, "7608": 2, "9101": 2, "0073": 2, "mulconst": 2, "object": [2, 4, 7, 8, 9, 13, 14, 17, 22, 33, 34, 35, 38, 39, 45, 52, 55, 93, 94, 96, 98, 101, 103, 107, 111, 119, 120, 126, 133, 134, 136, 142, 144, 147, 153, 155, 157, 158, 171, 174, 179, 180, 181, 182, 184, 187, 188, 190, 194, 205, 206, 213, 224, 236, 238, 239, 241, 244, 254, 259, 260, 261, 277], "stash": 2, "saved_data": 2, "were": [2, 3, 7, 15, 21, 23, 33, 55, 86, 88, 93, 98, 101, 103, 105, 107, 111, 123, 143, 146, 150, 151, 155, 162, 169, 177, 178, 180, 182, 183, 191, 194, 195, 198, 211, 220, 224, 228, 229, 236, 254, 257, 264, 272, 281, 284], "todoubl": 2, "On": [2, 7, 9, 12, 97, 101, 111, 126, 138, 151, 153, 162, 169, 175, 179, 180, 192, 195, 197, 198, 199, 212, 220, 223, 239, 257, 281, 285], "easiest": [2, 37, 97, 111, 160, 177, 194, 239], "your": [2, 4, 5, 7, 9, 10, 12, 14, 15, 18, 19, 21, 22, 23, 33, 34, 37, 39, 45, 46, 47, 49, 52, 53, 54, 56, 57, 58, 70, 78, 85, 91, 93, 94, 97, 98, 101, 102, 105, 107, 108, 110, 112, 113, 115, 116, 119, 120, 121, 123, 130, 131, 133, 134, 136, 137, 138, 139, 142, 144, 147, 148, 149, 150, 151, 153, 154, 157, 158, 160, 161, 162, 166, 168, 169, 171, 174, 175, 176, 177, 180, 181, 182, 185, 187, 188, 190, 192, 194, 195, 198, 200, 203, 207, 222, 223, 224, 229, 237, 238, 240, 241, 242, 243, 244, 251, 252, 253, 254, 259, 260, 263, 266, 267, 276, 280, 281, 284, 285], "tabl": [2, 20, 110, 118, 136, 138, 153, 159, 180, 181, 187, 194, 195, 212, 224, 229], "set_data": 2, "data": [2, 3, 4, 8, 9, 10, 14, 15, 17, 20, 21, 23, 26, 33, 34, 37, 38, 42, 43, 45, 48, 49, 50, 51, 54, 63, 70, 75, 76, 78, 85, 88, 93, 94, 96, 100, 102, 103, 104, 105, 106, 107, 108, 110, 113, 119, 120, 132, 133, 136, 142, 143, 149, 153, 154, 155, 158, 159, 160, 161, 162, 165, 166, 168, 170, 171, 173, 176, 178, 179, 180, 181, 192, 197, 198, 199, 201, 206, 207, 208, 212, 213, 214, 220, 222, 223, 224, 228, 229, 230, 236, 237, 243, 244, 247, 253, 254, 258, 259, 260, 264, 265, 273, 275, 276, 277, 279, 281, 284, 285], "output_nr": 2, "after": [2, 3, 7, 8, 13, 15, 17, 18, 19, 21, 23, 26, 33, 34, 35, 42, 45, 47, 49, 52, 55, 56, 91, 93, 94, 98, 103, 104, 105, 108, 110, 111, 113, 120, 129, 136, 138, 139, 140, 141, 144, 145, 146, 147, 150, 151, 153, 154, 155, 159, 161, 162, 168, 169, 171, 173, 174, 175, 176, 177, 178, 180, 181, 183, 185, 187, 188, 194, 195, 197, 199, 206, 223, 224, 228, 229, 236, 237, 239, 249, 251, 253, 258, 279, 280, 281], "file": [2, 4, 5, 7, 9, 12, 13, 18, 22, 41, 50, 53, 54, 55, 58, 67, 73, 77, 85, 86, 89, 91, 93, 94, 99, 107, 109, 111, 117, 118, 121, 123, 138, 142, 144, 145, 151, 153, 159, 168, 171, 174, 176, 184, 187, 190, 194, 197, 201, 206, 207, 208, 213, 223, 224, 228, 229, 235, 237, 238, 240, 246, 248, 249, 253, 254, 257, 260, 261, 264, 266, 267, 275, 276, 277, 280, 282], "bug": [2, 13, 100, 159, 198, 254, 263, 266, 276], "report": [2, 13, 21, 55, 78, 91, 93, 96, 98, 102, 130, 136, 140, 159, 171, 179, 181, 182, 229, 251, 263, 266, 276, 281], "github": [2, 3, 7, 8, 9, 13, 14, 20, 26, 52, 56, 57, 58, 63, 116, 137, 138, 140, 141, 149, 150, 151, 153, 155, 161, 170, 173, 174, 179, 180, 181, 187, 197, 201, 206, 208, 213, 214, 222, 254, 261, 264, 265, 266, 276], "issu": [2, 7, 8, 9, 12, 54, 129, 138, 139, 150, 155, 158, 159, 162, 170, 171, 176, 187, 192, 194, 195, 198, 199, 201, 206, 207, 220, 223, 225, 236, 254, 263, 264, 265, 266, 272, 274, 276, 277, 280], "fix": [2, 17, 21, 26, 33, 52, 53, 54, 55, 103, 129, 142, 178, 179, 199, 220, 238, 239, 252, 265, 281], "soon": [2, 55, 162, 168, 205, 213], "overview": [2, 7, 14, 56, 58, 96, 131, 132, 136, 144, 145, 151, 153, 174, 177, 179, 180, 181, 183, 187, 198, 201, 203, 260, 272, 273, 275, 282, 285], "alwai": [2, 3, 4, 5, 7, 9, 17, 20, 23, 43, 55, 96, 98, 102, 108, 110, 111, 139, 140, 141, 142, 147, 153, 154, 171, 176, 177, 178, 179, 181, 194, 195, 197, 201, 252, 272, 276], "problem": [2, 7, 9, 14, 17, 18, 23, 52, 54, 55, 104, 106, 110, 111, 119, 126, 143, 154, 159, 160, 169, 177, 179, 181, 187, 191, 192, 195, 201, 224, 225, 228, 239, 254, 257, 272, 274], "question": [2, 7, 9, 12, 13, 21, 52, 94, 138, 153, 158, 183, 195, 201, 224, 273, 281], "forum": [2, 7, 9, 46, 129, 158, 199, 201], "touch": [2, 7, 9, 17, 201], "view": [3, 13, 14, 17, 18, 20, 53, 56, 58, 59, 63, 85, 94, 96, 100, 101, 107, 110, 111, 113, 119, 120, 137, 140, 141, 143, 149, 150, 151, 153, 159, 173, 174, 179, 180, 181, 182, 183, 188, 204, 206, 207, 208, 211, 220, 222, 230, 237, 255, 261, 263, 277], "edit": [3, 7, 14, 15, 20, 51, 53, 63, 140, 141, 151, 153, 158, 159, 173, 174, 176, 179, 180, 181, 206, 208, 261, 265], "code": [3, 4, 5, 7, 8, 9, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 26, 33, 34, 35, 39, 40, 42, 43, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 58, 59, 60, 65, 66, 68, 70, 71, 72, 75, 76, 78, 85, 86, 88, 91, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 118, 119, 120, 123, 126, 129, 130, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 166, 168, 169, 170, 171, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 204, 206, 207, 208, 211, 213, 222, 223, 224, 225, 226, 228, 229, 230, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 250, 251, 252, 253, 254, 255, 258, 259, 260, 261, 263, 264, 265, 273, 274, 275, 276, 277, 280, 281, 284], "prerequisit": [3, 4, 5, 7, 19, 56, 58, 59, 106, 123, 138, 140, 141, 146, 149, 150, 151, 153, 154, 162, 173, 174, 179, 180, 181, 190, 191, 195, 198, 205, 206, 208, 239, 261, 264, 280], "frontend": [3, 4, 5, 13, 87, 89, 131, 135, 136, 213, 247, 260, 266, 277, 285], "semant": [3, 4, 7, 9, 52, 71, 101, 106, 108, 109, 119, 139, 153, 194, 195, 260, 274, 275, 277, 282, 284, 285], "11": [3, 7, 14, 21, 23, 96, 118, 137, 138, 157, 176, 181, 190, 192, 195, 207, 208, 211, 212, 224, 229], "nvidia": [3, 21, 53, 147, 153, 162, 192, 208, 223, 239, 259, 281], "toolkit": [3, 106, 161, 171, 194, 237], "releas": [3, 4, 7, 13, 21, 26, 53, 118, 120, 137, 138, 142, 168, 180, 182, 187, 205, 212, 213, 229, 239, 244, 254, 281], "greatli": [3, 7, 52, 93, 111, 178], "reduc": [3, 7, 14, 21, 35, 38, 45, 59, 96, 98, 103, 118, 130, 137, 138, 139, 141, 143, 144, 147, 149, 151, 153, 160, 161, 162, 168, 171, 175, 176, 179, 181, 187, 190, 192, 195, 199, 207, 223, 224, 227, 228, 246, 248, 249, 257, 258, 259, 260, 261, 266, 281], "cpu": [3, 4, 7, 8, 12, 13, 14, 17, 18, 23, 34, 39, 42, 45, 46, 51, 52, 55, 65, 76, 78, 85, 86, 91, 101, 103, 105, 111, 113, 118, 119, 126, 130, 131, 136, 137, 139, 140, 141, 144, 151, 153, 162, 169, 173, 174, 176, 177, 179, 180, 181, 182, 183, 184, 187, 190, 195, 197, 205, 211, 212, 214, 223, 224, 225, 228, 229, 236, 254, 259, 260, 263, 264, 266, 279, 285], "overhead": [3, 7, 13, 21, 59, 85, 118, 137, 138, 141, 146, 151, 160, 162, 171, 176, 179, 181, 182, 187, 192, 198, 205, 224, 229, 239, 250, 257, 263, 265, 266, 277, 281], "increas": [3, 7, 23, 26, 38, 39, 46, 78, 85, 86, 91, 94, 103, 111, 137, 138, 139, 141, 143, 144, 145, 149, 168, 171, 176, 187, 195, 199, 207, 212, 222, 223, 224, 238, 239, 242, 244, 257, 259, 265, 277], "mostli": [3, 13, 88, 93, 103, 144, 181, 183], "util": [3, 4, 5, 7, 9, 13, 18, 26, 35, 39, 46, 52, 54, 56, 58, 85, 96, 100, 102, 111, 118, 119, 120, 126, 131, 136, 137, 138, 139, 141, 144, 146, 153, 155, 157, 159, 160, 162, 169, 171, 173, 174, 176, 177, 180, 182, 183, 187, 188, 190, 192, 197, 203, 205, 206, 211, 213, 220, 222, 223, 237, 238, 246, 247, 249, 251, 253, 257, 259, 260, 264, 277, 279, 281], "deploy": [3, 103, 130, 134, 143, 213, 243, 253, 266, 279], "import": [3, 4, 5, 7, 8, 9, 12, 13, 14, 17, 21, 23, 26, 33, 43, 45, 49, 52, 53, 54, 55, 56, 70, 78, 85, 88, 93, 94, 96, 98, 100, 101, 103, 105, 107, 108, 111, 115, 119, 120, 123, 129, 137, 138, 139, 140, 141, 146, 147, 148, 151, 153, 154, 155, 157, 158, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 187, 188, 191, 192, 194, 195, 199, 201, 203, 204, 205, 206, 208, 211, 212, 213, 214, 220, 224, 236, 237, 238, 239, 243, 244, 247, 249, 254, 255, 257, 258, 261, 263, 264, 266, 267, 272, 274, 275, 276, 277, 279, 280, 281], "appear": [3, 9, 14, 17, 110, 194, 220], "won": [3, 13, 45, 111, 119, 137, 148, 157, 165, 170, 177, 194, 195, 223, 276], "heart": [3, 52, 212], "veri": [3, 4, 5, 7, 9, 12, 17, 18, 23, 26, 42, 47, 49, 51, 52, 68, 78, 88, 94, 98, 105, 107, 111, 119, 126, 137, 141, 142, 144, 168, 169, 178, 179, 181, 182, 183, 185, 187, 188, 195, 197, 199, 220, 229, 238, 252, 272, 274], "time": [3, 4, 7, 8, 12, 14, 15, 16, 17, 18, 19, 21, 33, 34, 35, 38, 39, 40, 42, 43, 45, 46, 47, 49, 51, 52, 53, 54, 55, 63, 68, 71, 75, 76, 78, 86, 88, 91, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 116, 119, 120, 123, 126, 129, 130, 134, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 175, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 192, 194, 195, 197, 198, 199, 204, 205, 206, 211, 212, 214, 220, 223, 224, 225, 227, 228, 230, 236, 239, 250, 251, 252, 253, 255, 259, 263, 265, 272, 273, 274, 275, 276, 277, 279, 281, 284, 285], "tool": [3, 7, 12, 17, 54, 85, 91, 93, 94, 98, 102, 104, 119, 134, 137, 151, 153, 154, 159, 171, 179, 182, 187, 188, 190, 198, 207, 220, 228, 251, 257, 263], "compil": [3, 5, 7, 9, 10, 12, 13, 19, 21, 88, 104, 131, 135, 136, 153, 158, 184, 194, 201, 213, 214, 224, 227, 229, 238, 239, 246, 247, 254, 259, 260, 265, 266, 277, 285], "boost": [3, 103, 105, 159, 160, 201, 213, 214, 265, 276, 285], "would": [3, 4, 7, 9, 12, 17, 19, 20, 23, 33, 45, 52, 56, 58, 78, 91, 93, 96, 98, 101, 103, 107, 110, 111, 116, 120, 126, 129, 137, 140, 141, 142, 143, 144, 145, 147, 148, 151, 154, 158, 159, 160, 162, 168, 169, 170, 174, 176, 177, 178, 179, 180, 181, 183, 190, 192, 194, 195, 197, 198, 199, 201, 206, 208, 220, 248, 249, 253, 257, 263, 264, 274, 275, 284, 285], "demonstr": [3, 4, 5, 9, 17, 19, 20, 21, 40, 45, 53, 60, 85, 88, 94, 96, 102, 112, 116, 130, 132, 133, 136, 137, 138, 140, 141, 142, 147, 148, 151, 155, 157, 158, 159, 162, 165, 171, 173, 174, 177, 179, 180, 181, 182, 187, 190, 191, 194, 195, 198, 199, 204, 205, 206, 208, 211, 212, 223, 224, 228, 229, 242, 243, 248, 250, 251, 252, 253, 255, 257, 258, 259, 261, 263, 264, 265, 266, 274, 276, 277, 279, 280, 281], "mnist": [3, 7, 35, 46, 49, 78, 96, 100, 102, 131, 136, 137, 143, 153, 155, 170, 180, 185, 188, 199, 226, 259], "libtorch": [3, 4, 7, 9, 213], "counterpart": [3, 21, 159, 194, 208, 213, 281], "syntax": [3, 51, 87, 89, 90, 120, 224, 260], "step": [3, 4, 7, 8, 12, 13, 14, 15, 17, 18, 20, 21, 23, 33, 37, 38, 45, 46, 49, 52, 55, 63, 70, 78, 85, 88, 93, 96, 102, 103, 104, 105, 111, 113, 116, 119, 132, 136, 137, 138, 139, 144, 145, 146, 147, 149, 151, 153, 154, 159, 161, 165, 169, 171, 178, 179, 180, 181, 182, 183, 184, 188, 190, 192, 194, 195, 200, 203, 204, 205, 206, 211, 213, 214, 220, 223, 236, 237, 239, 247, 253, 258, 260, 263, 264, 265, 267, 276, 277, 279, 281], "depict": [3, 100, 195], "chunk": [3, 58, 153, 168, 171, 173, 261], "batch": [3, 7, 20, 21, 35, 38, 39, 40, 47, 49, 52, 54, 55, 56, 58, 59, 78, 85, 91, 93, 94, 96, 100, 101, 102, 103, 108, 111, 120, 126, 130, 132, 135, 136, 137, 138, 139, 141, 142, 143, 144, 149, 153, 154, 155, 161, 162, 165, 168, 170, 171, 173, 176, 177, 178, 180, 181, 182, 184, 185, 187, 188, 190, 192, 195, 197, 198, 199, 223, 224, 260, 261, 265, 274, 277, 281, 284, 285], "data_load": [3, 7], "optim": [3, 7, 12, 13, 14, 15, 17, 18, 20, 21, 23, 26, 33, 34, 35, 36, 37, 40, 42, 43, 45, 49, 52, 56, 58, 63, 68, 69, 70, 73, 85, 88, 91, 93, 96, 100, 103, 104, 112, 116, 120, 126, 129, 130, 131, 133, 134, 136, 137, 138, 141, 146, 147, 149, 151, 153, 154, 155, 159, 161, 162, 169, 170, 171, 175, 176, 177, 178, 179, 180, 183, 184, 187, 188, 190, 191, 192, 194, 197, 198, 199, 201, 205, 206, 211, 213, 214, 223, 224, 228, 236, 237, 240, 243, 244, 246, 247, 248, 251, 253, 254, 259, 260, 265, 267, 272, 277, 279, 281, 285], "zero_grad": [3, 7, 38, 49, 70, 93, 96, 111, 119, 137, 138, 139, 151, 153, 168, 179, 181, 188, 195, 205, 206, 213, 237, 242, 247], "nll_loss": [3, 137, 153, 180], "updat": [3, 7, 13, 14, 15, 16, 17, 20, 21, 38, 45, 46, 52, 55, 70, 72, 85, 93, 103, 105, 110, 111, 112, 119, 120, 137, 138, 139, 143, 147, 151, 154, 162, 168, 177, 178, 180, 181, 187, 195, 198, 201, 203, 206, 211, 223, 236, 241, 258, 272, 280, 281], "captur": [3, 7, 9, 55, 93, 112, 113, 115, 130, 136, 137, 157, 190, 191, 192, 194, 195, 198, 214, 224, 254, 263, 266], "But": [3, 7, 12, 13, 46, 47, 55, 78, 94, 101, 107, 110, 142, 151, 162, 168, 169, 170, 178, 194, 197, 214, 224, 272, 275, 284], "slightli": [3, 17, 138, 153, 154, 171, 176, 183, 224, 239, 275], "prealloc": 3, "reus": [3, 13, 68, 111, 119, 148, 157, 169, 178, 195, 239, 243, 244, 257], "tensoropt": [3, 266], "floatcuda": 3, "dtype": [3, 4, 5, 12, 13, 17, 18, 19, 43, 96, 101, 107, 139, 148, 173, 194, 211, 213, 223, 236, 247, 249, 261, 264, 266, 275], "longcuda": 3, "klong": 3, "zero": [3, 7, 8, 14, 21, 33, 38, 43, 49, 52, 70, 93, 94, 96, 98, 101, 102, 110, 111, 119, 129, 137, 138, 145, 153, 154, 165, 169, 171, 174, 175, 179, 181, 183, 188, 199, 223, 227, 229, 235, 238, 239, 254, 258, 259, 260, 272, 274, 275, 280, 281], "ktrainbatchs": 3, "28": [3, 7, 21, 35, 98, 100, 111, 155, 170, 188, 211, 212, 224, 238, 281], "copy_": [3, 42, 51, 118, 139, 159, 179, 228, 236], "training_step": 3, "call": [3, 4, 7, 9, 10, 12, 13, 14, 16, 17, 18, 20, 21, 26, 33, 34, 35, 38, 40, 42, 43, 45, 46, 47, 49, 52, 54, 55, 56, 58, 70, 78, 88, 93, 94, 96, 98, 100, 101, 103, 105, 107, 110, 111, 116, 118, 119, 120, 129, 130, 132, 135, 136, 137, 139, 140, 141, 142, 143, 145, 146, 151, 153, 154, 157, 158, 159, 161, 162, 165, 168, 169, 170, 171, 173, 174, 175, 177, 179, 180, 181, 182, 183, 185, 187, 190, 194, 195, 201, 204, 205, 206, 207, 211, 212, 223, 224, 225, 226, 228, 229, 237, 238, 239, 242, 249, 250, 251, 252, 254, 257, 263, 266, 280, 281, 284], "void": [3, 4, 5, 7, 8, 9, 18, 159, 174, 211, 224, 229, 238, 266, 276], "net": [3, 7, 26, 46, 47, 49, 52, 55, 78, 88, 91, 96, 100, 101, 103, 137, 153, 165, 176, 180, 187, 188, 226], "stream": [3, 18, 85, 101, 104, 139, 171, 176, 211, 213, 266], "cudagraph": 3, "cudastream": 3, "capturestream": 3, "getstreamfrompool": 3, "setcurrentcudastream": 3, "capture_begin": 3, "capture_end": 3, "warm": [3, 74, 77, 118, 187, 192, 211, 212, 224, 229, 260, 277], "side": [3, 8, 54, 55, 85, 110, 155, 162, 168, 170, 171, 174, 178, 179, 187, 220], "prepar": [3, 14, 21, 46, 54, 55, 71, 72, 100, 108, 119, 120, 155, 168, 173, 174, 177, 179, 214, 229, 243, 279, 281], "cach": [3, 130, 146, 159, 187, 198, 214, 239, 252, 257, 259, 265, 276], "cubla": [3, 224], "cudnn": [3, 144, 147, 154, 162, 223], "warmupstream": 3, "int": [3, 4, 5, 7, 14, 23, 26, 54, 56, 58, 137, 138, 140, 151, 153, 159, 173, 174, 179, 180, 181, 187, 192, 194, 197, 208, 213, 257, 261, 263, 276], "num_warmup_it": 3, "success": [3, 7, 17, 78, 107, 143, 159, 183, 220], "replac": [3, 4, 7, 26, 45, 58, 60, 94, 105, 111, 112, 116, 118, 126, 136, 137, 139, 153, 157, 175, 181, 183, 184, 187, 191, 194, 197, 213, 214, 224, 254, 260, 261, 265, 274, 277, 283], "replai": [3, 17, 161], "spin": [3, 96], "ordinari": 3, "epoch": [3, 7, 20, 26, 35, 38, 39, 55, 56, 58, 91, 96, 100, 103, 105, 111, 120, 126, 137, 138, 139, 143, 144, 153, 162, 168, 177, 181, 188, 197, 199, 237], "59584": 3, "60000": [3, 153], "3921": 3, "test": [3, 9, 12, 26, 35, 38, 39, 52, 86, 88, 94, 96, 102, 103, 105, 106, 112, 123, 136, 137, 138, 144, 153, 155, 157, 159, 162, 171, 176, 180, 183, 185, 188, 192, 194, 211, 212, 224, 263, 265, 284, 285], "2051": 3, "accuraci": [3, 21, 26, 39, 46, 96, 102, 103, 111, 131, 132, 134, 136, 137, 138, 139, 143, 165, 175, 176, 180, 185, 188, 190, 212, 223, 237, 242, 259, 279, 281], "938": [3, 7, 162], "1826": 3, "1273": 3, "960": 3, "1796": 3, "1012": [3, 162], "968": 3, "1603": 3, "0869": 3, "973": 3, "2315": 3, "0736": [3, 96], "978": 3, "6": [3, 7, 14, 37, 43, 52, 70, 88, 94, 96, 98, 101, 107, 110, 112, 116, 118, 119, 120, 147, 148, 153, 159, 162, 165, 174, 175, 176, 179, 181, 190, 192, 194, 198, 208, 211, 212, 223, 243, 251, 252, 253, 257, 265, 267, 281], "0511": 3, "0704": 3, "977": [3, 162, 212], "7": [3, 7, 9, 21, 22, 23, 37, 43, 54, 88, 107, 118, 126, 137, 138, 153, 161, 162, 176, 190, 191, 192, 195, 201, 203, 204, 208, 211, 212, 223, 250, 254, 261, 264, 265, 267, 276], "0802": 3, "0654": 3, "979": 3, "0774": 3, "0604": 3, "980": 3, "9": [3, 4, 7, 21, 23, 35, 41, 45, 52, 91, 96, 107, 110, 111, 118, 120, 159, 169, 176, 179, 188, 190, 195, 211, 212, 213, 224, 226, 229, 246, 247, 267, 281], "0669": 3, "0544": 3, "984": [3, 212], "0219": 3, "0517": 3, "983": 3, "real": [3, 7, 8, 17, 33, 39, 55, 57, 93, 103, 104, 105, 106, 110, 134, 137, 144, 145, 153, 154, 168, 174, 178, 183, 192, 194, 195, 212, 224, 243, 263, 274, 277], "0m44": 3, "287": 3, "018": 3, "sy": [3, 23, 56, 58, 151, 153, 174, 203, 211], "0m1": 3, "116": [3, 263], "produc": [3, 7, 9, 14, 71, 103, 112, 119, 143, 146, 154, 155, 157, 158, 160, 162, 171, 177, 178, 183, 190, 194, 195, 206, 223, 239, 244, 279], "4092": 3, "2037": 3, "2039": 3, "1274": 3, "961": 3, "1779": 3, "1017": [3, 107], "1559": 3, "0871": 3, "972": 3, "2240": 3, "0735": [3, 281], "0520": 3, "0710": 3, "0935": [3, 107], "0666": 3, "0744": 3, "0603": 3, "981": 3, "0762": 3, "0547": 3, "0207": 3, "0525": 3, "0m6": 3, "952": [3, 159], "0m7": 3, "048": [3, 201], "0m0": 3, "619": 3, "gain": [3, 21, 85, 187, 261, 281, 285], "six": [3, 177], "kind": [3, 7, 38, 46, 49, 52, 78, 94, 102, 104, 108, 120, 131, 136, 214, 257], "larg": [3, 4, 5, 7, 10, 15, 19, 20, 21, 23, 38, 42, 52, 63, 91, 94, 98, 100, 103, 108, 110, 111, 113, 119, 126, 132, 136, 137, 138, 140, 143, 147, 151, 153, 155, 165, 171, 173, 177, 178, 180, 181, 182, 190, 192, 195, 197, 203, 208, 212, 223, 229, 230, 239, 243, 244, 261, 263, 274, 281], "improv": [3, 7, 12, 13, 21, 26, 38, 52, 59, 96, 101, 103, 111, 116, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 144, 147, 162, 169, 178, 182, 183, 190, 191, 192, 198, 199, 201, 203, 211, 213, 223, 224, 237, 239, 247, 251, 263, 264, 265, 276, 281, 285], "due": [3, 7, 9, 21, 23, 55, 85, 88, 101, 116, 137, 141, 146, 151, 168, 169, 180, 192, 198, 204, 207, 214, 254, 257, 263, 265, 274, 279, 281], "size": [3, 4, 5, 7, 8, 12, 14, 15, 17, 21, 23, 33, 34, 38, 39, 43, 45, 46, 47, 49, 52, 54, 55, 58, 85, 91, 94, 96, 98, 101, 102, 103, 107, 108, 110, 111, 120, 126, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 153, 154, 155, 159, 160, 161, 162, 165, 168, 170, 171, 174, 176, 177, 178, 179, 180, 183, 187, 190, 191, 192, 194, 195, 197, 198, 200, 205, 206, 207, 213, 223, 224, 228, 230, 237, 238, 239, 258, 259, 261, 263, 264, 265, 272, 275, 277, 281], "larger": [3, 12, 15, 78, 85, 93, 103, 111, 115, 120, 130, 136, 137, 138, 141, 143, 149, 171, 178, 181, 183, 187, 190, 191, 192, 205, 206, 212, 224, 244, 265, 277], "heavi": [3, 7, 52, 103, 107], "less": [3, 7, 10, 12, 19, 59, 85, 98, 103, 104, 111, 115, 126, 138, 143, 154, 157, 168, 171, 177, 178, 179, 187, 188, 192, 194, 195, 198, 208, 224, 228, 263, 265], "impact": [3, 15, 21, 38, 91, 103, 154, 171, 179, 182, 222, 257, 258, 265, 281], "smaller": [3, 38, 98, 103, 110, 111, 137, 141, 177, 179, 190, 224, 228, 244], "nevertheless": [3, 162, 177], "richard": 4, "zou": 4, "integr": [4, 5, 7, 13, 17, 19, 37, 91, 112, 116, 118, 135, 136, 143, 146, 173, 187, 188, 192, 198, 205, 212, 220, 222, 236, 241, 251, 257, 276, 280, 285], "opcheck": [4, 19], "basic": [4, 5, 12, 14, 18, 19, 20, 26, 33, 34, 35, 38, 39, 40, 41, 42, 43, 52, 57, 59, 60, 76, 80, 83, 90, 93, 96, 97, 98, 101, 103, 106, 110, 111, 112, 113, 115, 116, 119, 129, 130, 136, 141, 144, 147, 159, 166, 173, 177, 182, 195, 198, 199, 200, 205, 206, 224, 237, 248, 249, 253, 254, 259, 260, 273, 277], "program": [4, 5, 7, 10, 23, 63, 98, 104, 106, 107, 110, 136, 141, 144, 158, 171, 173, 180, 192, 206, 224, 239, 243, 253, 254, 257, 261, 263, 267, 280], "amd": 4, "rocm": [4, 187], "modif": [4, 17, 18, 91, 104, 111, 147, 153, 175, 177, 180, 185, 188, 194, 198, 238, 244, 254], "e": [4, 5, 7, 8, 9, 10, 12, 13, 14, 19, 23, 33, 34, 39, 45, 46, 52, 54, 55, 63, 78, 88, 91, 93, 96, 98, 101, 103, 106, 110, 111, 120, 126, 129, 131, 136, 137, 139, 140, 141, 143, 144, 145, 148, 150, 151, 153, 155, 162, 169, 170, 174, 175, 179, 181, 183, 187, 191, 192, 194, 198, 199, 208, 211, 213, 214, 224, 226, 229, 238, 239, 241, 242, 274, 275, 277, 279, 284, 285], "g": [4, 5, 7, 8, 10, 12, 13, 14, 17, 19, 23, 45, 52, 54, 55, 63, 91, 93, 96, 98, 101, 103, 105, 106, 110, 126, 129, 131, 136, 137, 139, 143, 144, 145, 151, 153, 155, 159, 168, 170, 174, 177, 179, 181, 183, 187, 192, 194, 198, 199, 208, 211, 214, 224, 229, 238, 239, 266, 275, 279, 284, 285], "etc": [4, 5, 10, 13, 19, 46, 47, 49, 52, 54, 72, 96, 98, 101, 104, 105, 106, 107, 111, 120, 129, 141, 171, 175, 177, 178, 183, 194, 195, 198, 199, 212, 213, 224, 226, 239, 241, 274, 279], "wish": [4, 5, 7, 10, 19, 55, 78, 94, 101, 120, 140, 165, 170, 180, 190, 195, 206, 223, 252, 273], "bring": [4, 5, 10, 94, 140, 171, 177, 187, 190, 195, 229, 239, 257, 265, 275, 284], "bless": 4, "path": [4, 5, 7, 9, 23, 35, 52, 53, 55, 56, 78, 85, 91, 93, 96, 101, 102, 103, 104, 111, 120, 137, 138, 159, 174, 190, 192, 198, 201, 205, 206, 211, 214, 220, 224, 236, 238, 239, 240, 243, 257, 263, 264, 265, 272, 279], "fuse": [4, 5, 21, 130, 134, 135, 136, 159, 176, 184, 198, 211, 259, 260, 265, 276, 281], "subsystem": [4, 10, 19, 194, 251], "def": [4, 5, 7, 8, 9, 12, 14, 17, 23, 56, 58, 70, 88, 96, 119, 120, 137, 138, 139, 140, 141, 146, 148, 151, 153, 155, 159, 169, 173, 174, 179, 180, 181, 188, 190, 203, 205, 206, 208, 211, 212, 214, 220, 224, 237, 249, 254, 258, 261, 266, 267, 272, 276, 279, 280, 281], "mymuladd": [4, 5], "bind": [4, 5, 7, 8, 10, 13, 140, 239, 257, 264], "precompil": 4, "instead": [4, 6, 7, 10, 12, 13, 19, 21, 24, 25, 33, 46, 47, 52, 54, 55, 56, 66, 93, 96, 101, 104, 105, 110, 111, 118, 119, 126, 137, 138, 139, 142, 143, 145, 148, 149, 153, 158, 160, 161, 162, 165, 168, 174, 175, 176, 179, 180, 181, 183, 185, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 206, 209, 212, 215, 220, 230, 244, 250, 252, 256, 258, 265, 272, 274, 275, 276, 277, 281, 284], "cpp_extens": [4, 5, 13, 174, 224], "extens": [4, 7, 10, 18, 22, 55, 94, 120, 134, 136, 139, 146, 148, 153, 190, 212, 224, 227, 235, 250, 259, 260, 266, 272, 274, 285], "ahead": [4, 9, 38, 96, 146, 168, 188, 194, 206, 239, 253], "setuptool": [4, 5, 13, 174, 187], "load_inlin": [4, 224], "setup": [4, 5, 7, 13, 20, 37, 55, 56, 58, 137, 138, 143, 151, 168, 174, 181, 205, 206, 208, 224, 238, 263, 265, 274, 275, 280, 284], "extension_cpp": 4, "ext_modul": [4, 5, 13, 174], "cppextens": [4, 13, 174], "muladd": [4, 5], "cpp": [4, 7, 9, 12, 132, 136, 159, 213, 238, 253, 276, 285], "py_limited_api": [4, 5], "min": [4, 55, 85, 98, 103, 126, 153, 174, 177, 179, 181, 190, 194, 254], "expos": [4, 7, 9, 12, 102, 139, 181, 195, 239, 280], "stabl": [4, 27, 28, 29, 30, 31, 52, 65, 78, 103, 104, 119, 126, 140, 151, 156, 176, 186, 187, 189, 214, 223, 283], "limit": [4, 7, 13, 14, 18, 21, 40, 52, 63, 78, 137, 141, 144, 154, 155, 161, 162, 170, 171, 183, 191, 192, 194, 195, 205, 224, 236, 265, 281], "subset": [4, 17, 88, 91, 96, 100, 103, 115, 126, 153, 174, 190, 212, 224, 274, 275], "extra_compile_arg": [4, 5, 13], "cxx": [4, 5, 7, 9, 213, 267], "dpy_limited_api": [4, 5], "0x03090000": [4, 5], "wheel": [4, 52, 103, 177, 187, 285], "cmdclass": [4, 5, 13, 174], "build_ext": [4, 5, 13, 174], "buildextens": [4, 5, 13, 174], "bdist_wheel": [4, 5], "cp39": [4, 5], "cu": 4, "cudaextens": [4, 174], "cpython": [4, 238], "agnost": [4, 191, 225], "pure": [4, 7, 13, 144, 148, 155, 170, 194, 197, 266, 276], "agnostic": 4, "minim": [4, 7, 13, 15, 21, 38, 55, 65, 66, 70, 71, 72, 75, 76, 78, 85, 93, 105, 110, 111, 119, 130, 136, 138, 143, 150, 159, 173, 178, 192, 239, 242, 244, 272, 279, 281], "oldest": 4, "hexcod": 4, "throughout": [4, 15, 55, 108, 153, 168, 171, 177, 188, 236, 274], "environ": [4, 5, 7, 8, 10, 14, 19, 22, 23, 37, 58, 85, 88, 94, 97, 100, 113, 123, 133, 136, 137, 138, 141, 146, 150, 151, 153, 159, 171, 173, 174, 178, 179, 180, 181, 192, 194, 195, 198, 201, 205, 206, 207, 208, 212, 214, 220, 222, 224, 238, 239, 248, 253, 255, 257, 258, 260, 261, 263, 276, 280], "unknown": 4, "behavior": [4, 8, 9, 12, 13, 14, 15, 17, 38, 52, 54, 98, 108, 111, 112, 129, 154, 158, 159, 162, 168, 171, 192, 194, 228, 239, 250, 252, 257, 273, 274], "runnabl": [4, 143, 159, 242], "three": [4, 7, 13, 15, 17, 18, 35, 38, 54, 55, 66, 78, 85, 88, 93, 94, 96, 100, 101, 104, 111, 116, 119, 120, 136, 140, 141, 144, 145, 162, 166, 169, 171, 174, 177, 181, 182, 183, 185, 187, 188, 195, 220, 229, 263, 265, 275, 276], "line": [4, 7, 9, 12, 15, 19, 52, 53, 54, 58, 59, 85, 96, 100, 101, 102, 103, 105, 111, 118, 143, 144, 145, 151, 153, 159, 176, 178, 180, 181, 183, 187, 188, 192, 194, 205, 206, 208, 213, 228, 237, 239, 254, 255, 257, 263, 266, 267, 272, 274], "specif": [4, 5, 7, 9, 12, 13, 14, 21, 23, 35, 39, 46, 58, 78, 85, 91, 93, 94, 96, 98, 100, 102, 105, 106, 107, 111, 112, 113, 115, 116, 120, 123, 129, 133, 137, 138, 141, 144, 145, 147, 153, 154, 159, 171, 173, 175, 177, 179, 180, 181, 182, 183, 187, 188, 191, 194, 195, 197, 198, 201, 205, 206, 212, 213, 220, 222, 229, 236, 238, 248, 251, 253, 257, 258, 259, 273, 276, 277, 279, 280, 281], "verifi": [4, 5, 7, 88, 93, 101, 116, 123, 129, 148, 155, 157, 160, 162, 175, 176, 191, 195, 197, 199, 212, 213, 220, 264], "met": [4, 17, 137, 171], "crash": [4, 7, 263], "wors": 4, "silent": [4, 19, 159, 192, 236], "incorrect": [4, 19, 55, 93, 96, 142, 148, 171, 192], "avoid": [4, 20, 46, 91, 100, 103, 137, 138, 139, 141, 147, 151, 153, 162, 165, 168, 177, 179, 192, 194, 199, 205, 223, 224, 228, 229, 236, 248, 257, 264, 265, 272, 273, 277, 280, 281], "unstabl": [4, 282], "libtorch_python": 4, "particular": [4, 7, 12, 14, 35, 46, 54, 85, 86, 91, 93, 94, 96, 98, 110, 133, 143, 144, 146, 153, 155, 165, 170, 173, 180, 190, 194, 197, 198, 228, 239, 248, 272, 273, 275, 277], "aten": [4, 5, 12, 13, 18, 116, 118, 159, 187, 194, 211, 212, 213, 220, 229, 238, 266, 276, 279], "strongli": [4, 18, 154, 169, 198], "recommend": [4, 7, 10, 12, 13, 18, 23, 63, 85, 94, 100, 111, 113, 115, 136, 139, 145, 151, 166, 176, 183, 187, 194, 195, 197, 198, 201, 205, 212, 213, 220, 228, 237, 238, 239, 243, 261, 263, 274, 279, 285], "ascertain": [4, 264], "compliant": [4, 197, 205, 206], "safe": [4, 8, 103, 171], "guarante": [4, 13, 103, 150, 153, 162, 171, 175, 180, 181, 194, 254, 273], "better": [4, 7, 17, 21, 35, 38, 39, 46, 55, 59, 93, 96, 98, 100, 103, 110, 111, 115, 118, 131, 136, 139, 140, 143, 144, 145, 146, 159, 160, 161, 168, 170, 171, 177, 178, 183, 187, 188, 190, 194, 201, 224, 239, 247, 257, 261, 265, 272, 273, 281], "wild": 4, "west": 4, "There": [4, 7, 9, 12, 13, 17, 18, 21, 33, 49, 78, 88, 93, 94, 96, 98, 101, 102, 103, 104, 105, 108, 110, 111, 126, 129, 132, 145, 146, 150, 154, 155, 158, 160, 162, 165, 168, 170, 173, 176, 177, 180, 181, 183, 194, 195, 196, 197, 198, 214, 224, 226, 231, 232, 233, 234, 238, 239, 242, 243, 245, 248, 253, 255, 257, 263, 274, 281], "caveat": [4, 8, 151, 179, 224, 228, 263], "yourself": [4, 7, 12, 37, 96, 107, 136, 161, 195], "truli": [4, 7, 52, 161], "relev": [4, 7, 17, 56, 104, 106, 110, 123, 138, 141, 175, 190, 194, 239, 241, 248, 254, 264], "third": [4, 7, 8, 9, 12, 15, 19, 55, 65, 66, 68, 70, 71, 72, 75, 76, 98, 101, 108, 119, 130, 136, 140, 148, 174, 183, 272, 284], "intend": [4, 7, 12, 15, 93, 103, 137, 141, 159, 162, 182, 192, 194, 198, 199, 226, 239, 249, 272], "influenc": [4, 7, 55, 98, 171, 257], "accordingli": [4, 9, 13, 23, 154, 168, 179, 190, 201], "command": [4, 7, 17, 53, 94, 100, 102, 115, 123, 136, 139, 150, 151, 171, 174, 177, 179, 180, 181, 183, 187, 188, 190, 197, 206, 208, 212, 213, 229, 237, 239, 253, 254, 255, 261, 263, 267], "consequ": [4, 141, 171, 178, 194], "properli": [4, 12, 13, 17, 53, 58, 103, 148, 151, 153, 162, 168, 169, 177, 179, 180, 181, 183, 198, 236, 272, 274], "could": [4, 7, 8, 12, 13, 14, 55, 91, 93, 98, 103, 104, 105, 107, 108, 110, 113, 118, 137, 138, 141, 142, 145, 153, 162, 168, 171, 177, 178, 179, 180, 181, 183, 187, 188, 190, 194, 197, 206, 207, 208, 213, 214, 220, 228, 229, 257, 272, 274, 276, 279, 284], "outsid": [4, 8, 13, 17, 18, 47, 135, 136, 139, 141, 147, 187, 190, 194, 236, 244, 252, 272], "cannot": [4, 7, 8, 9, 14, 17, 23, 52, 63, 85, 101, 112, 116, 119, 120, 139, 140, 148, 151, 153, 154, 162, 171, 177, 192, 194, 211, 251, 265, 284], "mymuladd_cpu": 4, "const": [4, 5, 7, 8, 9, 12, 13, 18, 159, 174, 211, 213, 224, 238, 266, 276], "torch_check": [4, 5, 12], "torch_internal_assert": [4, 12], "devicetyp": [4, 12, 18], "a_contig": [4, 5], "contigu": [4, 5, 12, 34, 162, 239, 276], "b_contig": [4, 5], "a_ptr": [4, 5], "data_ptr": [4, 5, 12, 266], "b_ptr": [4, 5], "result_ptr": [4, 12], "int64_t": [4, 7, 8, 12, 211, 276], "numel": [4, 5, 12, 179, 238, 272], "order": [4, 5, 7, 9, 10, 14, 15, 18, 19, 21, 33, 34, 35, 46, 47, 52, 53, 58, 65, 66, 68, 70, 71, 72, 75, 76, 78, 85, 91, 93, 94, 96, 101, 111, 112, 113, 115, 116, 118, 119, 131, 136, 137, 139, 142, 143, 145, 148, 151, 153, 158, 159, 160, 162, 174, 175, 180, 183, 185, 190, 192, 194, 195, 197, 198, 211, 228, 238, 248, 249, 257, 261, 274, 277, 281, 284], "torch_librari": [4, 5, 7, 8, 9, 10, 12, 19, 213], "ensur": [4, 5, 9, 12, 13, 14, 15, 17, 18, 39, 52, 56, 59, 66, 103, 111, 112, 118, 119, 120, 137, 141, 150, 151, 153, 157, 171, 173, 177, 178, 180, 182, 190, 191, 192, 195, 205, 224, 226, 236, 242, 251, 257, 264, 266, 276, 280], "awar": [4, 78, 93, 101, 141, 143, 153, 154, 182, 194, 251, 272], "top": [4, 7, 9, 12, 21, 37, 53, 55, 85, 86, 94, 97, 100, 103, 111, 141, 153, 176, 181, 182, 187, 188, 192, 197, 212, 220, 222, 279, 281], "project": [4, 7, 55, 93, 100, 120, 141, 174, 178, 183, 188, 213, 214, 220, 258, 277], "schema": [4, 8, 13], "mutat": [4, 8, 12, 13, 19, 119, 155, 170, 171, 194, 204, 211, 284], "m": [4, 5, 7, 8, 9, 12, 13, 17, 18, 33, 45, 52, 93, 98, 107, 111, 137, 138, 155, 159, 160, 174, 176, 179, 181, 206, 212, 220, 239, 257, 264, 276, 281], "torch_library_impl": [4, 5, 8, 12, 13, 18], "impl": [4, 5, 8, 12, 13, 18, 238], "myaddmul": [4, 5], "__global__": 4, "muladd_kernel": [4, 5], "idx": [4, 5, 35, 176, 188, 281], "blockidx": 4, "blockdim": 4, "threadidx": 4, "mymuladd_cuda": 4, "255": [4, 7, 15, 96, 103, 184, 190, 229], "256": [4, 5, 7, 21, 54, 91, 141, 142, 161, 183, 194, 201, 211, 212, 229, 281], "faketensor": [4, 19, 194, 264], "kernel": [4, 5, 7, 10, 12, 16, 19, 21, 23, 86, 96, 98, 101, 111, 116, 130, 131, 136, 139, 144, 155, 159, 162, 169, 170, 171, 182, 183, 184, 187, 191, 192, 194, 195, 198, 201, 220, 224, 226, 228, 229, 239, 246, 249, 254, 259, 260, 265, 266, 267, 276, 279, 281, 283], "meta": [4, 19, 23, 139, 141, 143, 155, 170, 177, 194, 230, 236, 259], "abstract": [4, 7, 14, 17, 35, 54, 63, 91, 101, 102, 106, 111, 119, 141, 143, 153, 171, 174, 177, 195, 207, 208], "metadata": [4, 9, 13, 19, 21, 146, 177, 188, 194, 228, 243, 264, 281], "correct": [4, 5, 7, 12, 13, 14, 15, 16, 19, 38, 45, 46, 49, 52, 66, 78, 88, 91, 93, 94, 96, 98, 101, 102, 104, 105, 111, 119, 137, 138, 142, 147, 154, 159, 162, 169, 177, 179, 180, 183, 185, 187, 188, 195, 208, 223, 236, 254, 261, 264, 277], "stride": [4, 7, 19, 55, 94, 96, 98, 137, 147, 159, 162, 190, 194, 228, 264, 275], "register_fak": [4, 8, 19], "though": [4, 7, 13, 49, 78, 93, 101, 103, 104, 126, 147, 148, 155, 158, 170, 177, 188, 194, 195, 213, 224, 238, 243, 265, 272], "definit": [4, 7, 9, 12, 13, 40, 49, 71, 78, 88, 105, 119, 129, 131, 136, 158, 169, 178, 182, 238, 239, 273], "load": [4, 8, 9, 21, 23, 26, 33, 34, 36, 37, 38, 42, 43, 45, 49, 54, 55, 58, 78, 91, 96, 101, 102, 104, 111, 113, 121, 136, 137, 139, 144, 159, 162, 168, 171, 173, 177, 187, 188, 190, 194, 197, 205, 211, 213, 214, 223, 227, 235, 236, 238, 243, 244, 253, 254, 259, 260, 263, 265, 266, 280, 281, 282], "strive": 4, "load_librari": [4, 8, 9], "next": [4, 7, 9, 12, 14, 15, 17, 18, 20, 21, 35, 45, 52, 54, 56, 58, 59, 85, 88, 93, 96, 98, 101, 103, 104, 108, 111, 113, 120, 129, 137, 138, 139, 141, 142, 144, 145, 146, 147, 148, 150, 154, 155, 158, 159, 161, 165, 168, 170, 171, 178, 179, 180, 181, 183, 187, 188, 194, 195, 199, 212, 213, 214, 220, 228, 229, 243, 244, 249, 261, 265, 267, 274, 275, 281], "_c": [4, 5, 107, 140, 211, 263], "_": [4, 14, 15, 17, 18, 42, 51, 52, 55, 96, 101, 104, 111, 129, 139, 140, 144, 153, 155, 165, 177, 179, 181, 188, 203, 211, 212, 223, 228, 254, 258, 261, 279], "_check": 4, "empty_lik": [4, 5, 101, 162, 272], "formula": [4, 13, 19, 103, 157, 177], "matter": [4, 190, 203, 223, 272, 274], "wrong": [4, 55, 78, 105, 144, 159, 192], "hold": [4, 17, 20, 23, 49, 65, 66, 68, 70, 71, 72, 91, 111, 119, 137, 138, 139, 144, 150, 168, 178, 179, 181, 228, 236, 239], "happen": [4, 12, 33, 34, 35, 38, 45, 55, 93, 96, 98, 101, 103, 105, 111, 113, 138, 139, 141, 148, 151, 153, 171, 175, 179, 187, 188, 194, 195, 207, 224, 228, 239, 242, 252, 254, 265], "modul": [4, 8, 9, 15, 16, 17, 20, 23, 26, 34, 39, 40, 43, 46, 47, 49, 52, 56, 58, 63, 69, 71, 73, 93, 94, 96, 101, 102, 105, 110, 115, 120, 121, 126, 129, 130, 136, 137, 138, 139, 141, 142, 146, 147, 151, 153, 155, 158, 159, 162, 165, 168, 170, 173, 174, 176, 177, 179, 180, 181, 182, 185, 188, 190, 191, 192, 194, 198, 199, 205, 206, 207, 208, 212, 213, 220, 224, 226, 227, 229, 235, 239, 241, 243, 244, 257, 259, 260, 263, 265, 266, 276, 279, 280, 281], "initi": [4, 7, 9, 12, 14, 17, 20, 23, 34, 35, 38, 45, 52, 58, 66, 75, 76, 78, 94, 96, 101, 102, 103, 105, 108, 110, 111, 118, 119, 120, 126, 137, 138, 141, 144, 145, 154, 155, 159, 162, 168, 171, 173, 175, 176, 178, 179, 180, 181, 183, 187, 191, 192, 195, 198, 199, 205, 206, 208, 212, 220, 222, 224, 228, 236, 239, 243, 244, 261, 263, 275], "pybind11_modul": [4, 174], "notic": [4, 9, 12, 17, 33, 45, 46, 55, 78, 88, 93, 96, 101, 103, 105, 120, 129, 148, 153, 159, 161, 169, 170, 177, 187, 192, 194, 198, 199, 242, 254, 272, 274], "pybind11": [4, 9, 12, 174, 224], "promis": [4, 111, 276], "With": [4, 12, 13, 18, 20, 21, 23, 42, 51, 55, 78, 88, 93, 94, 100, 107, 139, 141, 148, 151, 153, 159, 165, 168, 173, 179, 180, 181, 182, 183, 184, 199, 201, 204, 205, 208, 220, 222, 228, 236, 239, 253, 257, 258, 260, 261, 265, 266, 281], "sadli": 4, "foreshadow": 4, "wonder": [4, 105, 129, 168, 171, 195, 198], "sai": [4, 7, 19, 26, 45, 54, 101, 105, 107, 110, 139, 142, 155, 160, 168, 175, 187, 265], "not_agnost": 4, "csrc": [4, 9, 174, 211], "extension_bad": 4, "__init__": [4, 5, 7, 8, 9, 14, 17, 34, 39, 54, 56, 70, 96, 98, 105, 119, 120, 137, 144, 146, 151, 153, 155, 169, 173, 175, 179, 180, 181, 188, 190, 205, 206, 208, 212, 220, 226, 228, 254, 276, 280], "successfulli": [4, 7, 9, 53, 113, 140, 143, 153, 159, 173, 180, 194, 195, 211, 212, 226, 240, 241, 242, 274], "extern": [4, 54, 103, 120, 143, 158, 159, 211, 239, 266, 276], "pyobject": 4, "pyinit__c": 4, "struct": [4, 7, 8, 9, 18], "pymoduledef": 4, "module_def": 4, "pymoduledef_head_init": 4, "null": [4, 7, 220, 263], "interpret": [4, 7, 59, 85, 88, 94, 110, 130, 136, 145, 146, 183, 192, 194, 224, 227, 235, 238, 254, 257, 259, 260, 266], "global": [4, 7, 52, 59, 91, 141, 155, 168, 173, 180, 185, 194, 203, 207, 211, 225, 236, 238, 239, 280, 281], "variabl": [4, 7, 9, 12, 33, 52, 85, 91, 93, 101, 104, 105, 107, 111, 123, 146, 150, 153, 159, 173, 179, 182, 194, 195, 198, 201, 212, 220, 248, 255, 257, 263, 265, 267, 274, 276, 277, 280, 284], "pymodule_cr": 4, "entir": [4, 7, 17, 20, 23, 49, 52, 56, 103, 105, 108, 111, 126, 136, 137, 138, 144, 146, 147, 168, 170, 173, 175, 177, 181, 183, 191, 194, 195, 206, 223, 228, 230, 239, 244, 254, 272, 273, 274], "statement": [4, 12, 33, 45, 47, 112, 183, 194, 223, 225, 280], "trigger": [4, 139, 151, 159, 171, 179, 181, 191, 239], "challeng": [4, 17, 107, 108, 112, 130, 137, 140, 141, 153, 169, 178, 190, 191, 206, 207, 208, 224, 259], "shift": [4, 177, 199], "toward": [4, 52, 103, 145, 178], "trivial": [4, 17, 54, 59, 101, 142, 195, 207], "pathlib": [4, 5, 111, 138, 190], "so_fil": [4, 5], "__file__": [4, 5, 174, 224], "glob": [4, 5], "assert": [4, 5, 8, 14, 23, 139, 146, 151, 155, 159, 169, 180, 182, 188, 194, 203, 211, 249, 261, 263, 264, 281], "len": [4, 5, 8, 54, 58, 111, 126, 137, 138, 139, 153, 179, 180, 188, 190, 208, 281], "f": [4, 5, 9, 12, 14, 15, 19, 23, 33, 45, 49, 56, 58, 70, 93, 96, 105, 111, 119, 120, 129, 137, 138, 140, 141, 142, 151, 153, 155, 159, 160, 169, 173, 174, 176, 179, 180, 181, 188, 190, 203, 205, 206, 208, 211, 212, 220, 224, 258, 261, 263, 264, 266, 281, 284], "register_autograd": [4, 19, 251], "prefer": [4, 7, 12, 19, 56, 160, 165, 174, 177, 192, 195, 199, 200, 223, 251, 263, 276], "directli": [4, 7, 9, 12, 14, 15, 17, 19, 34, 42, 51, 55, 88, 91, 93, 94, 96, 101, 112, 113, 115, 116, 139, 140, 141, 146, 148, 149, 160, 171, 176, 177, 181, 183, 195, 199, 206, 257, 263, 265, 274, 275], "_backward": 4, "saved_tensor": [4, 148], "grad_a": 4, "grad_b": 4, "none": [4, 8, 14, 17, 18, 23, 26, 52, 91, 93, 103, 107, 111, 129, 137, 138, 139, 153, 155, 159, 162, 170, 173, 180, 190, 194, 201, 205, 206, 208, 211, 237, 249, 279, 281], "needs_input_grad": 4, "_setup_context": 4, "saved_a": 4, "saved_b": 4, "setup_context": 4, "composit": [4, 7, 10, 14, 19, 105, 106, 160, 173, 177, 208, 251], "had": [4, 7, 49, 54, 93, 96, 101, 108, 111, 113, 119, 129, 168, 169, 178, 188, 213, 220, 236], "own": [4, 7, 12, 13, 14, 17, 20, 21, 23, 34, 35, 52, 55, 66, 78, 91, 93, 94, 96, 111, 116, 118, 119, 131, 136, 137, 138, 139, 145, 146, 147, 151, 159, 168, 169, 175, 176, 177, 180, 181, 183, 190, 192, 194, 195, 197, 198, 205, 207, 224, 236, 263, 265, 281], "mymul": 4, "mymul_cpu": 4, "correctli": [4, 5, 15, 19, 52, 55, 78, 93, 94, 96, 123, 136, 139, 157, 162, 168, 171, 173, 175, 176, 190, 192, 195, 198, 208, 242, 274], "mathemat": [4, 13, 16, 19, 45, 51, 66, 93, 96, 98, 107, 153, 177, 194], "plan": [4, 7, 10, 13, 23, 120, 138, 141, 190, 195, 275], "gradcheck": [4, 19, 147, 148, 157, 239], "sample_input": [4, 5, 120], "make_tensor": [4, 5], "make_nondiff_tensor": [4, 5], "20": [4, 5, 7, 43, 85, 88, 91, 101, 118, 137, 143, 144, 151, 153, 154, 162, 168, 175, 179, 181, 187, 211, 224, 229, 238, 254, 258, 281], "14": [4, 5, 9, 26, 43, 96, 137, 159, 190, 198, 212, 224, 229, 257], "123": [4, 5, 54, 181, 212], "reference_muladd": [4, 5], "extend": [4, 7, 8, 12, 26, 55, 91, 112, 113, 114, 115, 130, 131, 135, 136, 137, 145, 154, 176, 180, 181, 190, 191, 195, 213, 214, 239, 244, 248, 250, 263, 266, 285], "arg": [4, 5, 23, 56, 58, 107, 120, 137, 138, 151, 153, 158, 178, 179, 180, 181, 190, 192, 194, 203, 205, 206, 211, 213, 254, 258, 266], "assert_clos": [4, 5], "check": [4, 5, 7, 9, 12, 16, 17, 18, 37, 38, 39, 42, 45, 46, 47, 52, 53, 55, 58, 61, 62, 78, 84, 88, 93, 96, 98, 101, 102, 103, 104, 107, 111, 113, 118, 129, 136, 137, 138, 139, 140, 143, 144, 151, 153, 154, 157, 159, 162, 169, 170, 171, 175, 176, 177, 180, 190, 191, 192, 194, 195, 197, 198, 202, 206, 212, 213, 216, 217, 218, 219, 220, 221, 223, 229, 243, 247, 249, 253, 254, 267, 269, 270, 275, 276, 277, 278, 279, 280], "undefin": [4, 8, 153, 198, 272, 273, 274], "myadd_out": 4, "myadd_out_cpu": 4, "is_contigu": [4, 162, 238], "caus": [4, 9, 15, 18, 78, 85, 93, 101, 111, 142, 159, 171, 176, 179, 183, 187, 190, 194, 195, 220, 225, 239, 252, 257, 263, 272, 280], "incompat": [4, 140, 194, 243, 254], "went": [4, 55, 98, 101, 146, 159], "fairli": [4, 103, 111, 153, 168, 178, 198], "serv": [5, 7, 10, 60, 63, 88, 96, 103, 108, 119, 136, 151, 158, 161, 174, 180, 181, 195, 207, 211, 223, 224, 238, 248, 264, 274], "languag": [5, 7, 10, 26, 46, 52, 98, 104, 106, 108, 136, 141, 143, 144, 145, 166, 181, 183, 201, 211, 212, 239, 243, 244, 249, 251, 254, 261, 266], "intel": [5, 10, 136, 153, 159, 162, 259, 279, 280], "label": [5, 7, 35, 38, 39, 43, 45, 46, 54, 55, 78, 91, 93, 94, 96, 100, 101, 102, 105, 110, 118, 126, 129, 138, 141, 144, 151, 171, 176, 179, 183, 188, 195, 197, 220, 224, 226, 229, 254, 258, 259, 281], "xpu": [5, 34, 39, 42, 65, 78, 101, 119, 126, 151, 153, 197, 213, 229], "bundl": [5, 249], "essenti": [5, 7, 13, 17, 19, 33, 52, 104, 105, 107, 146, 153, 166, 171, 178, 194, 200, 257, 279], "activ": [5, 7, 13, 15, 17, 18, 21, 34, 55, 61, 62, 85, 93, 94, 96, 103, 105, 111, 129, 130, 138, 141, 146, 149, 153, 160, 168, 175, 176, 187, 198, 199, 201, 202, 212, 213, 216, 217, 218, 219, 220, 221, 222, 229, 239, 261, 266, 267, 269, 270, 278, 279, 281], "prior": [5, 14, 18, 53, 55, 93, 98, 103, 151, 161, 175, 188, 198, 206], "execut": [5, 7, 12, 14, 18, 20, 22, 33, 34, 40, 41, 45, 47, 50, 53, 67, 73, 77, 85, 89, 93, 96, 99, 101, 104, 109, 112, 116, 117, 121, 132, 136, 139, 140, 142, 143, 146, 153, 154, 158, 159, 162, 171, 174, 177, 178, 180, 181, 182, 184, 192, 194, 198, 201, 212, 213, 220, 223, 235, 238, 246, 249, 253, 254, 257, 260, 261, 263, 266, 276, 282], "best": [5, 7, 12, 40, 45, 55, 63, 78, 91, 113, 116, 118, 120, 126, 131, 134, 136, 149, 153, 155, 159, 170, 171, 176, 179, 181, 185, 194, 198, 212, 213, 214, 229, 238, 239, 242, 249, 251, 257, 259, 265, 276, 281], "c": [5, 15, 18, 19, 23, 45, 65, 66, 70, 88, 93, 94, 100, 101, 103, 110, 119, 131, 135, 136, 138, 145, 146, 148, 153, 159, 162, 171, 176, 181, 182, 190, 192, 194, 195, 211, 220, 223, 224, 236, 237, 253, 263, 267, 276], "sycl_exampl": 5, "sycl_extens": 5, "test_sycl_extens": 5, "syclextens": 5, "except": [5, 12, 14, 21, 42, 45, 51, 52, 55, 94, 96, 98, 101, 105, 108, 112, 126, 129, 139, 140, 144, 155, 157, 160, 162, 170, 174, 183, 194, 213, 248, 254, 264, 277, 281, 284, 285], "o": [5, 7, 9, 14, 23, 52, 53, 56, 58, 103, 137, 138, 140, 151, 153, 165, 168, 171, 173, 174, 176, 179, 180, 181, 190, 205, 206, 208, 211, 224, 228, 258, 261, 263, 264, 280, 281], "find_packag": [5, 7, 9, 213], "library_nam": 5, "o3": [5, 224], "fdiagnost": 5, "color": [5, 46, 55, 94, 96, 98, 100, 101, 143, 161, 162, 176, 188, 190, 197], "is_avail": [5, 7, 15, 91, 101, 173, 174, 178, 180, 254, 261, 280], "this_dir": 5, "dirnam": [5, 159, 174, 220], "curdir": 5, "extensions_dir": 5, "join": [5, 13, 23, 42, 51, 52, 53, 56, 96, 132, 137, 144, 151, 153, 179, 180, 181, 205, 206, 224, 258, 263], "construct": [5, 7, 17, 33, 49, 55, 68, 70, 88, 103, 119, 126, 131, 136, 139, 145, 148, 154, 155, 160, 166, 170, 177, 178, 180, 183, 195, 197, 198, 212, 223, 226, 241, 258, 277, 284], "install_requir": 5, "descript": [5, 7, 53, 137, 138, 159, 177, 179, 180, 181, 182, 190, 194, 199, 224, 239, 254, 255, 279], "c10": [5, 8, 9, 12, 13, 18, 174, 212, 213, 224, 238, 266, 276], "xpustream": 5, "hpp": [5, 174], "nd_item": 5, "get_global_id": 5, "muladdkernelfunctor": 5, "_numel": 5, "_a": 5, "_b": 5, "_result": 5, "privat": [5, 8, 17, 18, 140, 174, 175, 272], "mymuladd_xpu": 5, "is_xpu": 5, "res_ptr": 5, "queue": [5, 8, 220, 239], "getcurrentxpustream": 5, "constexpr": [5, 211, 276], "thread": [5, 7, 8, 9, 12, 55, 118, 139, 140, 151, 155, 171, 176, 179, 180, 181, 220, 224, 229, 238, 239, 257], "submit": [5, 13, 213], "handler": [5, 12, 190, 236], "cgh": 5, "parallel_for": 5, "nd_rang": 5, "static_cast": [5, 159, 211, 276], "__all__": 5, "ctype": [5, 211], "current_dir": 5, "build_dir": 5, "_op": [5, 116], "dl_open_guard": 5, "loaded_lib": 5, "cdll": 5, "_intern": 5, "common_util": 5, "testcas": 5, "unittest": 5, "testmymuladd": 5, "self": [5, 7, 8, 9, 12, 13, 14, 17, 18, 26, 35, 52, 56, 58, 70, 96, 105, 111, 118, 119, 120, 136, 137, 141, 146, 151, 153, 155, 159, 161, 169, 173, 179, 180, 181, 187, 188, 190, 194, 198, 205, 206, 208, 212, 220, 229, 236, 244, 254, 276], "_test_correct": 5, "skipif": 5, "test_correctness_xpu": 5, "__name__": [5, 14, 54, 56, 58, 137, 138, 140, 151, 153, 173, 179, 180, 181, 205, 206, 211, 220, 258, 261], "__main__": [5, 14, 54, 56, 58, 137, 138, 151, 153, 173, 179, 180, 181, 205, 206, 211, 220, 224, 258, 261], "against": [5, 9, 19, 38, 39, 46, 98, 100, 113, 140, 153, 162, 177, 198, 213, 224], "showcas": [5, 17, 68, 138, 139, 165, 168, 195, 266, 285], "support": [5, 7, 9, 14, 17, 18, 20, 21, 23, 26, 33, 39, 49, 54, 59, 61, 62, 78, 86, 88, 93, 94, 95, 96, 97, 98, 101, 102, 103, 112, 113, 114, 115, 118, 130, 135, 136, 137, 138, 139, 140, 143, 148, 150, 151, 153, 154, 157, 159, 162, 169, 171, 173, 174, 175, 176, 177, 179, 180, 181, 187, 190, 192, 194, 197, 201, 202, 203, 204, 206, 211, 212, 213, 214, 216, 217, 218, 219, 221, 222, 224, 229, 239, 248, 250, 253, 254, 255, 257, 259, 263, 264, 267, 269, 270, 272, 273, 274, 276, 277, 278, 279, 280, 281], "enabl": [5, 7, 12, 14, 17, 18, 20, 23, 26, 35, 49, 58, 59, 85, 93, 101, 103, 115, 120, 137, 138, 140, 141, 143, 146, 147, 148, 151, 153, 159, 162, 171, 173, 175, 176, 177, 187, 188, 190, 191, 194, 195, 199, 201, 205, 206, 207, 212, 213, 220, 223, 229, 236, 244, 248, 249, 250, 252, 253, 257, 258, 264, 265, 272, 274, 276, 277, 280, 285], "torchscript": [6, 8, 9, 24, 25, 113, 130, 209, 213, 229, 256], "export": [6, 10, 12, 24, 25, 49, 88, 93, 114, 115, 130, 136, 150, 151, 159, 182, 184, 192, 201, 209, 212, 214, 223, 239, 243, 246, 256, 259, 260, 276, 280], "peter": 7, "goldsborough": 7, "ubuntu": [7, 187, 257], "linux": [7, 9, 23, 113, 141, 151, 153, 176, 187, 197, 213, 239, 257], "cmake": [7, 213], "maco": [7, 113, 153, 190, 239], "window": [7, 46, 54, 96, 98, 110, 113, 151, 180, 187, 197, 220, 239, 285], "machin": [7, 23, 37, 39, 43, 46, 52, 53, 54, 56, 57, 58, 59, 63, 78, 91, 93, 94, 97, 113, 115, 136, 137, 138, 143, 149, 150, 151, 153, 158, 170, 171, 176, 180, 181, 182, 183, 195, 197, 203, 211, 212, 220, 237, 239, 248, 249, 254, 257, 263], "framework": [7, 13, 26, 37, 55, 93, 105, 106, 119, 132, 134, 136, 171, 173, 179, 182, 190, 198, 201, 254, 263, 279], "primari": [7, 18, 171, 191, 207, 238, 239, 257, 266, 276, 277], "sit": [7, 112, 113, 115, 116, 169], "atop": 7, "substanti": [7, 143, 171], "codebas": [7, 13, 17], "foundat": [7, 144, 177, 190, 195, 200], "17": [7, 96, 118, 159, 194, 211, 212, 213, 224], "underli": [7, 12, 17, 42, 51, 63, 78, 101, 103, 120, 143, 155, 159, 170, 180, 194, 208, 239, 263, 274, 275, 277], "popular": [7, 71, 78, 103, 119, 130, 143, 153, 154, 195, 198, 213, 214, 254, 259, 265, 276], "stochast": [7, 38, 49, 55, 68, 93, 96, 102, 111, 119, 153, 177, 178], "descent": [7, 38, 45, 49, 68, 93, 96, 102, 111, 119, 129, 153, 195, 242, 265], "parallel": [7, 14, 20, 23, 46, 48, 50, 52, 54, 58, 78, 91, 96, 120, 136, 143, 149, 153, 165, 177, 180, 181, 195, 205, 206, 207, 211, 223, 229, 257, 258, 260, 263, 276, 285], "loader": [7, 26, 39, 46, 102, 111, 177, 180, 197, 224], "serial": [7, 13, 39, 40, 111, 120, 194, 220, 224, 243, 253, 264], "routin": [7, 195], "walk": [7, 9, 13, 18, 20, 26, 45, 57, 93, 106, 111, 123, 131, 132, 136, 142, 159, 161, 180, 223, 237, 265, 266, 267, 279], "digit": [7, 49, 96, 111, 131, 136, 137, 138, 190, 254], "conceptu": [7, 33, 45, 52, 119, 238], "enough": [7, 21, 52, 85, 96, 107, 111, 119, 142, 147, 176, 194, 205, 212, 223, 263, 281], "whirlwind": 7, "wet": 7, "appetit": 7, "begin": [7, 8, 9, 14, 15, 21, 33, 45, 52, 53, 55, 58, 78, 88, 93, 96, 108, 110, 138, 141, 166, 168, 178, 180, 187, 188, 195, 211, 223, 224, 226, 229, 240, 241, 242, 243, 244, 274, 281], "why": [7, 12, 14, 17, 19, 46, 55, 88, 94, 103, 105, 110, 120, 123, 148, 151, 159, 168, 183, 192, 194, 195, 224, 253, 254, 273, 275], "dive": [7, 14, 39, 130, 146, 151, 159, 238, 276], "straight": [7, 183], "watch": [7, 102, 149, 153], "lightn": [7, 143], "talk": [7, 12, 52, 55, 58, 96, 107, 171, 177, 180, 194, 195], "cppcon": 7, "2018": 7, "quick": [7, 21, 34, 51, 93, 103, 105, 108, 110, 138, 151, 155, 160, 169, 170, 195, 224, 227, 235, 259, 260, 265, 281], "humor": 7, "sweep": [7, 182], "philosophi": 7, "ecosystem": [7, 116, 146], "http": [7, 23, 26, 27, 28, 29, 30, 31, 36, 47, 48, 52, 65, 78, 79, 80, 81, 82, 83, 84, 87, 95, 100, 103, 106, 113, 114, 116, 119, 126, 132, 137, 144, 145, 147, 151, 156, 157, 158, 166, 168, 169, 176, 183, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 200, 222, 223, 224, 227, 228, 231, 232, 233, 234, 237, 254, 265, 268, 271, 273, 275, 283], "org": [7, 27, 28, 29, 30, 31, 36, 47, 48, 52, 65, 78, 79, 80, 81, 82, 83, 84, 87, 95, 98, 100, 102, 103, 106, 114, 119, 126, 132, 144, 145, 151, 156, 157, 158, 166, 168, 169, 176, 183, 186, 187, 189, 192, 193, 194, 195, 200, 220, 223, 227, 228, 231, 232, 233, 234, 265, 268, 271, 273, 275, 283, 284, 285], "cppdoc": 7, "embark": 7, "excit": [7, 158, 168], "journei": [7, 55, 200], "back": [7, 9, 12, 13, 17, 18, 33, 46, 49, 54, 78, 91, 93, 101, 103, 107, 111, 113, 118, 139, 142, 162, 168, 171, 177, 179, 180, 181, 183, 190, 192, 194, 195, 198, 206, 236, 239, 251, 252, 272, 277], "discuss": [7, 12, 13, 18, 20, 46, 78, 93, 96, 98, 102, 107, 108, 129, 137, 138, 146, 153, 158, 159, 165, 171, 173, 192, 198, 228, 249, 251, 263, 272, 273, 274, 275], "team": [7, 116, 143, 178, 190, 198], "research": [7, 21, 52, 55, 78, 88, 94, 101, 105, 123, 153, 165, 170, 175, 190, 214, 254, 281], "right": [7, 12, 13, 15, 17, 33, 37, 42, 45, 51, 52, 55, 66, 85, 93, 98, 100, 103, 105, 107, 110, 119, 144, 153, 161, 165, 168, 177, 178, 179, 182, 183, 187, 190, 197, 198, 212, 220, 284], "job": [7, 47, 55, 56, 57, 63, 85, 103, 140, 143, 149, 150, 151, 153, 173, 285], "latenc": [7, 21, 134, 136, 141, 143, 150, 159, 171, 176, 192, 212, 243, 248, 249, 257, 281], "system": [7, 9, 12, 13, 15, 17, 18, 58, 103, 129, 136, 139, 143, 153, 169, 171, 176, 177, 179, 191, 192, 194, 195, 199, 201, 205, 226, 239, 248, 257, 263], "reinforc": [7, 17, 102, 133, 136, 161, 179, 180, 184, 260], "game": [7, 46, 55, 161, 254], "engin": [7, 17, 33, 45, 91, 93, 129, 137, 146, 171, 176, 181, 190, 194, 195, 197, 201, 213, 254, 263, 284], "much": [7, 12, 13, 15, 17, 21, 38, 55, 59, 93, 94, 103, 104, 105, 110, 111, 120, 138, 142, 143, 160, 161, 168, 171, 176, 177, 180, 181, 183, 187, 188, 191, 192, 194, 195, 220, 223, 224, 228, 237, 239, 240, 244, 257, 259, 263, 265, 272, 275, 281], "tractabl": [7, 104], "slow": [7, 12, 38, 137, 139, 171, 195, 198, 229, 239], "multithread": [7, 45, 59, 118, 171, 220, 224, 257], "lock": [7, 8, 17, 59, 153, 171, 179, 180, 205], "gil": [7, 59, 151], "multiprocess": [7, 14, 17, 35, 39, 54, 56, 58, 59, 137, 138, 151, 153, 177, 180, 181, 205, 206, 257, 258, 263], "scalabl": [7, 136, 140, 143, 195, 201, 212, 213, 239, 257, 272], "signific": [7, 55, 85, 94, 138, 140, 144, 147, 159, 160, 162, 168, 171, 177, 182, 187, 192, 195, 206, 207, 208, 212, 214, 223, 224, 239, 251, 263], "shortcom": [7, 274], "constraint": [7, 15, 21, 23, 88, 105, 131, 136, 141, 143, 169, 177, 190, 195, 205, 223, 224, 236, 254, 261, 263, 281], "neuroevolut": 7, "benefit": [7, 21, 23, 45, 88, 91, 138, 140, 157, 162, 168, 171, 182, 198, 212, 213, 223, 239, 243, 250, 257, 265, 281], "owner": [7, 179, 180, 181], "anyth": [7, 16, 19, 46, 75, 76, 96, 98, 101, 104, 107, 108, 110, 111, 119, 176, 198, 220, 236, 237, 254, 265], "web": [7, 113, 220], "page": [7, 9, 10, 13, 19, 53, 57, 63, 92, 111, 118, 119, 135, 136, 144, 146, 171, 181, 187, 194, 195, 201, 205, 210, 239, 252], "server": [7, 20, 132, 136, 140, 151, 174, 181, 206, 213, 220, 248, 254, 257], "3d": [7, 63, 98, 100, 107, 108, 173, 190, 239], "graphic": [7, 182], "photo": [7, 94], "softwar": [7, 174, 187, 263], "remain": [7, 91, 93, 103, 129, 139, 140, 153, 168, 171, 175, 183, 239, 261, 263, 265, 274, 277], "spare": 7, "hassl": 7, "forth": [7, 111], "retain": [7, 42, 51, 101, 120, 129, 243], "intuit": [7, 55, 78, 96, 101, 105, 120, 159, 183, 190, 194, 220, 236, 273], "tradit": [7, 55, 103, 105, 160, 180, 194, 195, 198, 263, 276], "experi": [7, 13, 103, 104, 138, 140, 153, 161, 171, 174, 177, 178, 182, 183, 185, 190, 192, 194, 195, 198, 207, 223, 238, 240, 248, 254, 255, 257, 265, 272, 280, 284, 285], "compet": [7, 143, 171], "meant": [7, 10, 14, 88, 93, 98, 138, 195, 239, 263, 274], "complement": 7, "know": [7, 9, 12, 14, 23, 33, 45, 52, 75, 76, 78, 96, 98, 101, 105, 107, 110, 111, 119, 142, 144, 145, 148, 153, 154, 155, 159, 161, 162, 165, 170, 171, 173, 177, 178, 179, 183, 188, 194, 195, 197, 224, 250, 273], "alik": 7, "love": 7, "simplic": [7, 78, 138, 147, 171, 177, 178, 208, 224, 276], "core": [7, 12, 13, 14, 47, 104, 105, 106, 119, 120, 136, 141, 153, 154, 159, 162, 171, 176, 187, 194, 200, 220, 223, 238, 257, 263], "principl": [7, 12, 108, 110, 143, 243], "interest": [7, 13, 17, 21, 46, 52, 54, 91, 93, 94, 103, 105, 112, 113, 115, 116, 126, 138, 143, 160, 168, 169, 177, 185, 194, 195, 197, 198, 224, 238, 241, 242, 281, 284], "curiou": [7, 155, 168, 170, 204], "paragraph": 7, "tri": [7, 23, 55, 93, 104, 110, 178, 194, 223, 254], "close": [7, 17, 21, 55, 93, 98, 101, 103, 104, 138, 143, 168, 188, 237, 239, 281], "experienc": [7, 88], "ever": [7, 142, 151, 194, 228], "ask": [7, 9, 21, 94, 96, 98, 145, 154, 171, 177, 194, 195, 224, 280, 281], "rememb": [7, 46, 55, 78, 108, 111, 118, 120, 129, 160, 161, 168, 171, 183, 195, 198, 224], "dot": [7, 17, 33, 55, 108, 110, 129, 131, 136, 160, 183, 184, 224, 251, 260, 261, 284], "colon": [7, 190], "grab": [7, 10, 55, 100, 176, 181], "distribut": [7, 17, 18, 26, 55, 78, 91, 96, 101, 102, 103, 105, 110, 136, 137, 138, 139, 140, 141, 143, 149, 150, 162, 168, 174, 177, 179, 187, 198, 207, 208, 224, 257, 258, 259, 261, 263, 279, 285], "readi": [7, 9, 13, 20, 52, 94, 96, 102, 104, 105, 110, 111, 136, 138, 153, 165, 173, 174, 177, 179, 180, 181, 195, 197, 229, 254], "archiv": [7, 139, 162, 194, 253], "header": [7, 9, 12, 174, 224], "websit": [7, 94, 178, 220, 222], "rest": [7, 17, 46, 126, 139, 154, 158, 177, 179, 180, 195, 198, 236, 274], "free": [7, 9, 13, 38, 45, 52, 78, 88, 103, 112, 113, 115, 116, 120, 138, 139, 143, 153, 158, 161, 162, 168, 171, 177, 179, 183, 187, 194, 238], "too": [7, 13, 17, 46, 66, 71, 85, 91, 96, 98, 103, 104, 110, 111, 118, 119, 139, 141, 151, 168, 171, 175, 178, 179, 181, 183, 194, 238, 252, 272], "debug": [7, 12, 63, 104, 130, 131, 136, 142, 178, 184, 194, 199, 207, 224, 238, 248, 260, 266, 285], "abi": [7, 9, 213], "try": [7, 9, 15, 17, 18, 21, 38, 42, 46, 49, 51, 52, 55, 56, 63, 78, 93, 101, 102, 103, 104, 105, 106, 107, 111, 112, 113, 118, 129, 140, 143, 144, 145, 146, 154, 159, 161, 165, 168, 171, 173, 174, 175, 177, 178, 183, 187, 191, 192, 194, 198, 199, 212, 213, 223, 224, 236, 237, 254, 257, 261, 265, 273, 281], "local": [7, 9, 12, 20, 23, 37, 52, 53, 63, 93, 97, 104, 112, 120, 123, 129, 138, 139, 141, 143, 151, 153, 168, 175, 179, 180, 181, 183, 185, 195, 214, 223, 226, 239, 248, 249, 257, 258, 261, 263, 264], "retriev": [7, 17, 20, 33, 35, 52, 142, 143, 173, 177, 179, 180, 195, 220, 257], "vanilla": [7, 52, 68, 105, 119, 190, 198, 258, 272], "cu90": 7, "url": [7, 187, 192, 195, 237, 265], "wget": [7, 23, 197, 265], "nightli": [7, 23, 157, 192, 197, 254, 263, 265, 284, 285], "share": [7, 9, 13, 14, 23, 42, 51, 58, 69, 73, 91, 103, 107, 138, 142, 151, 153, 154, 161, 171, 177, 180, 181, 194, 206, 213, 224, 228, 238, 243, 248, 253, 257, 260, 263], "dep": 7, "latest": [7, 11, 13, 17, 91, 94, 119, 120, 130, 136, 138, 146, 153, 164, 172, 176, 177, 180, 183, 185, 190, 192, 214], "unzip": [7, 53, 190, 197, 253], "tini": [7, 137, 168, 254], "ident": [7, 21, 58, 88, 93, 101, 102, 111, 119, 141, 150, 165, 188, 191, 194, 199, 224, 275, 281], "iostream": [7, 8, 213], "ey": [7, 169, 171], "fledg": 7, "cmakelist": [7, 9, 213], "txt": [7, 9, 52, 144, 145, 159, 176, 183, 207, 213], "cmake_minimum_requir": [7, 9, 213], "fatal_error": [7, 9, 213], "add_execut": [7, 213], "target_link_librari": [7, 9, 213], "set_properti": [7, 213], "properti": [7, 14, 17, 33, 42, 51, 93, 96, 101, 107, 110, 129, 143, 169, 183, 194, 213, 223, 224, 236, 241, 273], "cxx_standard": [7, 213], "hard": [7, 12, 18, 35, 105, 143, 171, 175, 194, 224, 248], "visual": [7, 17, 45, 55, 78, 85, 86, 96, 102, 133, 136, 138, 142, 143, 148, 158, 169, 177, 184, 187, 190, 207, 229, 237, 259, 260, 266, 267, 274], "studio": [7, 267], "qmake": 7, "plain": [7, 52, 111, 139, 144, 145, 183, 197, 236, 238], "makefil": 7, "feel": [7, 13, 38, 45, 52, 103, 112, 113, 115, 116, 120, 138, 158, 159, 161, 162, 168, 187, 194], "comfort": 7, "box": [7, 12, 13, 14, 19, 21, 43, 78, 135, 136, 139, 143, 146, 148, 153, 176, 179, 187, 194, 197, 198, 201, 220, 222, 254, 281, 284], "cmake_prefix_path": [7, 9], "invok": [7, 9, 12, 103, 151, 153, 157, 158, 159, 171, 174, 180, 181, 201, 220, 236, 247, 251, 257, 266, 274], "agre": [7, 258], "someth": [7, 14, 17, 46, 91, 96, 101, 105, 107, 153, 159, 176, 183, 194, 198, 224, 238, 284], "break": [7, 8, 12, 13, 14, 19, 34, 35, 85, 93, 98, 112, 120, 139, 140, 146, 168, 179, 181, 192, 253, 261, 272], "unexpect": [7, 54, 239, 274], "pwd": [7, 220], "root": [7, 9, 17, 33, 35, 43, 45, 54, 55, 96, 104, 129, 139, 147, 154, 159, 180, 181, 213, 220, 237, 247, 263], "fa350df05ecf": 7, "home": [7, 42, 51, 210, 272], "mkdir": [7, 187, 190], "cd": [7, 9, 187, 197, 220], "dcmake_prefix_path": [7, 9, 213], "identif": [7, 9, 213], "gnu": [7, 9, 213, 239, 257], "usr": [7, 9, 23, 153, 213], "bin": [7, 9, 96, 153, 213, 220, 253, 266], "cc": [7, 9, 45, 211, 213], "detect": [7, 9, 14, 15, 23, 55, 98, 133, 136, 176, 184, 187, 192, 194, 213, 214, 226, 239, 252, 257, 260], "info": [7, 9, 85, 140, 150, 153, 161, 190, 194, 201, 213], "pthread": [7, 9], "pthread_creat": [7, 9], "lib": [7, 9, 13, 23, 159, 213, 238, 254, 257, 263], "config": [7, 13, 21, 26, 91, 137, 139, 143, 146, 176, 191, 211, 213, 214, 236, 244, 248, 251, 254, 264, 265, 266, 276, 281], "scan": [7, 9, 96, 98, 190, 194], "50": [7, 9, 21, 26, 55, 56, 96, 111, 154, 162, 175, 178, 181, 197, 211, 212, 239, 279, 281], "cmakefil": [7, 9], "dir": [7, 9, 85, 100, 143, 238, 248, 263], "100": [7, 9, 43, 51, 70, 96, 105, 119, 137, 140, 146, 151, 155, 159, 162, 176, 177, 178, 181, 188, 190, 208, 212, 224, 238, 249, 276, 281], "folder": [7, 53, 55, 85, 86, 94, 96, 138, 188, 197, 263], "insid": [7, 9, 13, 20, 23, 34, 38, 47, 139, 141, 187, 192, 197, 201, 276, 281, 284], "enter": [7, 52, 138, 151, 153], "ran": [7, 110, 140, 177, 180, 182, 224], "binari": [7, 52, 55, 101, 113, 153, 162, 192, 213, 243, 253, 273, 285], "me": [7, 21, 52, 168, 183, 281], "deriv": [7, 13, 19, 21, 33, 38, 42, 45, 51, 93, 101, 105, 107, 108, 110, 119, 142, 144, 148, 157, 160, 239, 281], "besid": [7, 96, 110, 169, 179, 222, 239], "encapsul": [7, 38, 49, 98, 102, 146, 168, 179], "buffer": [7, 17, 46, 49, 120, 138, 139, 147, 151, 155, 157, 161, 165, 168, 169, 170, 171, 175, 178, 194, 205, 228, 241, 242, 243, 261, 263, 264], "form": [7, 15, 18, 21, 43, 49, 52, 55, 63, 104, 111, 113, 142, 145, 159, 183, 190, 198, 205, 206, 220, 239, 249, 257, 265, 277, 281], "record": [7, 12, 33, 45, 52, 111, 120, 129, 130, 136, 137, 138, 146, 147, 148, 168, 177, 178, 180, 181, 194, 214, 229, 254, 285], "normal": [7, 12, 14, 15, 38, 40, 43, 52, 54, 55, 88, 94, 96, 98, 102, 103, 105, 110, 119, 120, 126, 137, 147, 153, 154, 169, 171, 176, 179, 180, 182, 183, 188, 190, 192, 195, 198, 199, 213, 239, 247, 252, 265, 273], "logic": [7, 14, 21, 38, 43, 88, 104, 112, 130, 136, 137, 143, 150, 173, 175, 180, 181, 190, 191, 199, 206, 257, 281], "nest": [7, 17, 34, 45, 96, 101, 136, 139, 177, 179, 181, 182, 184, 191, 260, 282, 285], "term": [7, 18, 42, 55, 63, 78, 93, 94, 98, 102, 105, 106, 107, 109, 118, 138, 140, 141, 165, 175, 177, 194, 195, 198, 230, 257, 260, 265, 275], "explicitli": [7, 23, 38, 42, 45, 51, 55, 56, 91, 93, 107, 129, 139, 140, 141, 150, 154, 162, 181, 182, 185, 194, 220, 239, 275, 277, 280], "onc": [7, 9, 12, 13, 14, 17, 20, 21, 33, 35, 38, 54, 55, 59, 85, 94, 96, 100, 101, 102, 103, 104, 108, 113, 149, 154, 162, 168, 169, 175, 176, 177, 178, 180, 183, 187, 188, 194, 195, 207, 211, 213, 220, 223, 224, 239, 253, 254, 264, 265, 277, 281], "similarli": [7, 15, 54, 86, 94, 101, 139, 142, 143, 144, 159, 160, 168, 171, 173, 206, 264, 275], "kcuda": [7, 266], "n": [7, 8, 15, 21, 33, 45, 63, 75, 76, 85, 88, 93, 98, 101, 103, 111, 119, 137, 138, 139, 151, 153, 160, 161, 165, 169, 173, 175, 179, 180, 181, 183, 188, 194, 195, 197, 213, 239, 263, 265, 276, 281, 284], "super": [7, 9, 14, 23, 70, 96, 119, 120, 137, 140, 146, 151, 155, 161, 169, 173, 179, 180, 181, 188, 190, 205, 206, 208, 212, 220, 254, 276], "w": [7, 33, 38, 45, 49, 78, 108, 110, 129, 138, 162, 181, 187, 194, 197, 265, 276], "addmm": [7, 118, 159, 201, 212, 229], "register_paramet": 7, "reflect": [7, 12, 42, 51, 96, 101, 177, 194], "magic": [7, 105, 145, 153, 160], "assign": [7, 9, 43, 47, 49, 56, 70, 94, 98, 101, 103, 104, 105, 108, 110, 112, 119, 139, 153, 169, 177, 195, 208, 220, 236, 239, 257], "behind": [7, 12, 21, 47, 85, 103, 105, 111, 119, 147, 178, 273, 275, 281, 285], "scene": [7, 111, 119, 254], "another_bia": 7, "rand": [7, 18, 88, 96, 101, 148, 169, 203, 205, 206, 211, 212, 213, 220, 239, 247, 249, 261, 281], "recurs": [7, 20, 46, 139, 146, 192, 237], "0808": 7, "8613": 7, "2017": [7, 78], "5206": 7, "5353": 7, "3740": 7, "0976": 7, "4786": 7, "4928": 7, "1434": 7, "4713": 7, "1735": 7, "3293": 7, "3467": 7, "3858": [7, 96], "1980": 7, "1986": 7, "1975": 7, "4278": 7, "1831": 7, "2709": 7, "3730": 7, "4307": 7, "3236": 7, "0629": 7, "2038": 7, "4638": 7, "2023": [7, 190], "1230": 7, "0516": 7, "aptli": [7, 16], "register_modul": 7, "dropout": [7, 40, 52, 78, 98, 111, 120, 137, 141, 143, 145, 154, 179, 181, 183, 277, 281], "conv2d": [7, 15, 46, 49, 55, 96, 111, 120, 137, 147, 169, 176, 180, 188, 191, 194, 201, 213, 220, 229, 239, 279], "subtleti": [7, 129, 136, 275], "bodi": [7, 159], "upon": [7, 22, 52, 59, 126, 153, 157, 183, 188, 192, 198, 222, 239, 260, 263], "tree": [7, 9, 13, 18, 104, 110, 207, 285], "p": [7, 23, 52, 71, 98, 104, 110, 111, 119, 137, 138, 147, 153, 155, 162, 165, 168, 179, 180, 181, 191, 197, 201, 211, 281], "0345": 7, "4456": 7, "6313": 7, "3585": 7, "4008": 7, "1647": 7, "2891": 7, "0527": 7, "0354": 7, "3084": 7, "2025": [7, 253], "0343": 7, "1824": 7, "4630": 7, "2862": 7, "2500": 7, "0420": 7, "3679": 7, "1482": 7, "0460": 7, "1967": 7, "2132": 7, "1992": 7, "4257": 7, "0739": 7, "01": [7, 14, 43, 45, 49, 96, 99, 118, 153, 181, 184, 198, 203, 211, 212, 253, 258, 260, 267], "6861": 7, "1166": 7, "45": [7, 43, 96, 143, 159, 181, 211, 212], "0333": 7, "9983": 7, "0705": 7, "named_paramet": [7, 34, 169, 195], "ordereddict": [7, 197], "again": [7, 46, 53, 93, 94, 98, 100, 101, 103, 104, 111, 112, 142, 147, 153, 154, 168, 179, 181, 183, 187, 190, 192, 195, 224, 264, 265, 280], "13": [7, 96, 118, 181, 190, 198, 211, 212, 220], "48": [7, 21, 96, 159, 162, 188, 211, 212, 229, 281], "1863": 7, "8611": 7, "1228": 7, "3269": 7, "9858": 7, "0339": 7, "2484": 7, "2035": 7, "2103": 7, "0715": 7, "2975": 7, "4350": 7, "1878": 7, "3616": 7, "1050": [7, 169], "4982": 7, "0335": 7, "1605": 7, "4963": 7, "4099": 7, "2883": [7, 107], "1818": 7, "3447": 7, "1501": 7, "0215": 7, "0250": 7, "0408": 7, "3756": 7, "2149": 7, "3636": 7, "ourselv": [7, 38, 52, 147, 177], "8559": 7, "1572": 7, "1069": 7, "1247": [7, 96], "8060": 7, "At": [7, 12, 17, 18, 21, 45, 49, 52, 53, 88, 91, 108, 111, 119, 137, 138, 141, 154, 157, 161, 177, 178, 179, 182, 183, 187, 229, 236, 239, 253, 272, 275, 281], "point": [7, 12, 13, 14, 17, 21, 23, 45, 49, 52, 53, 54, 55, 56, 85, 88, 93, 96, 98, 101, 103, 104, 106, 107, 108, 110, 111, 119, 137, 139, 141, 142, 143, 148, 149, 151, 158, 161, 165, 171, 177, 179, 183, 188, 190, 194, 195, 214, 227, 235, 237, 239, 250, 254, 259, 260, 263, 265, 272, 274, 275, 280, 281], "topic": [7, 52, 63, 78, 94, 101, 112, 113, 115, 116, 123, 129, 130, 132, 135, 196, 231, 232, 233, 234, 245, 283], "devour": 7, "menu": [7, 53], "concept": [7, 9, 14, 37, 38, 58, 97, 106, 107, 111, 119, 123, 136, 143, 161, 171, 179, 182, 183, 195, 200, 229, 238, 257, 263, 266, 276], "pipelin": [7, 20, 63, 111, 136, 177, 190, 197, 263], "briefli": [7, 38, 63, 136, 141, 177, 192, 198, 201], "determin": [7, 8, 12, 14, 21, 42, 51, 94, 96, 101, 102, 103, 104, 107, 110, 113, 129, 140, 141, 143, 155, 168, 169, 170, 175, 192, 194, 195, 224, 229, 230, 239, 263, 277, 280, 281], "who": [7, 52, 78, 103, 106, 140, 153, 168, 194, 200, 206, 220, 224, 249, 253], "heap": 7, "forget": [7, 111, 120, 192], "live": [7, 13, 18, 101, 135, 136, 142, 171, 180, 181, 275], "referenc": [7, 181], "thing": [7, 9, 12, 18, 19, 33, 45, 46, 49, 52, 88, 91, 93, 96, 101, 102, 103, 104, 105, 107, 108, 110, 111, 135, 136, 139, 141, 142, 143, 148, 149, 150, 153, 154, 158, 159, 162, 169, 176, 177, 185, 194, 205, 224, 242, 265, 280], "lower": [7, 17, 21, 53, 78, 85, 98, 100, 136, 138, 139, 140, 143, 151, 157, 159, 168, 169, 177, 178, 182, 188, 190, 194, 195, 198, 238, 239, 254, 275, 281], "realm": 7, "heavili": [7, 171, 183, 265], "ergonom": 7, "shown": [7, 12, 21, 55, 93, 101, 111, 129, 139, 141, 143, 159, 161, 178, 179, 181, 182, 187, 190, 192, 195, 206, 212, 213, 220, 253, 254, 255, 257, 258, 263, 273, 274, 275, 280, 281], "thu": [7, 12, 13, 33, 40, 52, 88, 91, 103, 111, 129, 138, 155, 168, 171, 183, 220, 224, 229, 239, 257, 276], "far": [7, 9, 17, 49, 52, 66, 93, 96, 98, 101, 103, 104, 105, 119, 142, 153, 168, 175, 178, 183, 194, 195, 198, 224, 272], "stack": [7, 12, 17, 18, 42, 51, 96, 118, 136, 141, 155, 161, 165, 171, 174, 179, 183, 187, 188, 190, 195, 263], "shared_ptr": [7, 9], "cognit": 7, "think": [7, 9, 46, 55, 71, 94, 96, 104, 105, 107, 108, 110, 119, 160, 177, 180, 182, 195, 198, 275, 284], "declar": [7, 16, 78], "everywher": [7, 101, 110], "make_shar": 7, "even": [7, 12, 13, 17, 20, 45, 46, 54, 78, 93, 96, 98, 101, 110, 111, 120, 129, 137, 138, 141, 146, 148, 151, 158, 160, 169, 171, 177, 179, 182, 190, 194, 195, 198, 212, 224, 239, 240, 243, 265, 272, 274, 275], "latter": [7, 143, 179], "nativ": [7, 12, 18, 19, 58, 91, 115, 116, 135, 136, 138, 141, 154, 173, 181, 198, 212, 213, 229, 238, 239, 261, 265, 272, 275], "stai": [7, 85, 140, 141, 146, 177, 178, 179], "shorten": 7, "therefor": [7, 8, 18, 52, 54, 103, 120, 132, 144, 151, 162, 165, 171, 174, 175, 180, 181, 194, 223, 257, 267, 274, 275], "wait": [7, 20, 85, 140, 145, 151, 153, 154, 171, 174, 179, 180, 181, 187, 190, 195, 205, 211, 228, 229, 239, 263], "don": [7, 8, 12, 13, 19, 45, 46, 55, 56, 58, 91, 96, 98, 101, 104, 105, 108, 111, 116, 120, 126, 129, 142, 148, 158, 160, 161, 168, 171, 177, 178, 181, 182, 191, 194, 195, 199, 204, 211, 220, 223, 251, 252, 272, 273, 274], "mymodul": 7, "hell": 7, "lot": [7, 12, 13, 18, 54, 93, 104, 111, 137, 139, 153, 165, 180, 183, 187, 192, 195, 223, 224, 238, 265, 272], "came": [7, 55, 273], "elabor": [7, 141, 159, 179], "scheme": [7, 23, 102, 103, 136, 195, 228, 236, 272, 279], "hide": [7, 147, 177, 284], "reserv": [7, 13, 18, 187, 264], "simplifi": [7, 13, 17, 26, 111, 144, 151, 173, 183, 190, 197, 208, 263, 272, 275, 279, 285], "linearimpl": 7, "torch_modul": 7, "brief": [7, 26, 85, 93, 104, 177, 195, 198], "macro": [7, 12, 18], "wrapper": [7, 12, 58, 111, 120, 137, 138, 148, 154, 161, 177, 190, 195, 199, 205, 206, 251, 264, 285], "typedef": 7, "among": [7, 9, 12, 56, 85, 91, 102, 141, 175, 187, 222, 257], "holder": 7, "arrow": [7, 45, 141], "resembl": [7, 15, 104, 149, 178], "becom": [7, 14, 26, 55, 78, 88, 94, 103, 141, 148, 160, 162, 171, 187, 188, 195, 203, 212, 223, 243, 257, 263, 266, 277], "extra": [7, 12, 59, 96, 101, 103, 107, 108, 111, 115, 139, 144, 145, 147, 154, 157, 169, 177, 183, 190, 192, 197, 213, 229, 238, 239], "netimpl": 7, "subtl": [7, 101, 223], "deserv": 7, "tricki": [7, 21, 148, 191, 194, 195, 281], "decid": [7, 12, 13, 21, 23, 55, 63, 91, 93, 178, 194, 195, 242, 275, 281, 285], "nullptr": [7, 266], "familiar": [7, 9, 12, 13, 37, 38, 42, 46, 51, 56, 57, 59, 88, 96, 97, 101, 102, 104, 106, 111, 120, 136, 138, 142, 149, 150, 153, 161, 173, 180, 194, 220, 224, 238, 243, 280], "pythonista": 7, "disadvantag": [7, 120], "mechan": [7, 14, 17, 18, 26, 33, 52, 59, 102, 129, 133, 136, 148, 158, 169, 183, 185, 187, 194, 199, 213, 220, 248, 249, 279, 285], "boilerpl": [7, 46, 105, 188, 272], "That": [7, 8, 21, 45, 46, 47, 52, 93, 94, 96, 101, 105, 107, 108, 110, 111, 113, 141, 144, 151, 157, 158, 160, 162, 165, 168, 177, 178, 182, 187, 194, 195, 197, 238, 272, 273, 275, 281], "said": [7, 161, 168, 177, 178, 272, 273], "introduct": [7, 14, 19, 21, 48, 50, 56, 57, 58, 59, 60, 87, 88, 93, 98, 105, 106, 109, 112, 113, 114, 116, 129, 136, 146, 149, 150, 159, 184, 198, 199, 200, 213, 224, 239, 251, 254, 259, 260, 274, 281], "awai": [7, 49, 98, 100, 104, 105, 107, 177, 178, 179, 195, 207, 275], "sooner": [7, 138], "technic": [7, 153, 154, 168, 195, 203, 204, 211, 272], "henceforth": 7, "background": [7, 34, 78, 100, 176, 188, 190, 197, 249, 250], "post": [7, 14, 52, 103, 137, 138, 139, 143, 162, 185, 195, 222, 261], "recap": [7, 49, 178, 228, 275], "adversari": [7, 46, 102, 121, 133, 136, 260], "architectur": [7, 21, 34, 55, 59, 78, 88, 98, 103, 104, 134, 136, 138, 141, 143, 149, 155, 165, 171, 173, 175, 182, 188, 190, 192, 198, 199, 220, 223, 239, 276, 279, 281], "repositori": [7, 13, 57, 86, 123, 138, 141, 153, 173, 174, 181, 182, 183, 197, 263], "distinct": [7, 21, 55, 85, 101, 110, 129, 138, 181, 188, 194, 195, 254, 281], "transform": [7, 15, 21, 22, 26, 33, 34, 35, 36, 37, 38, 39, 40, 42, 46, 52, 55, 91, 93, 94, 96, 101, 102, 118, 121, 131, 132, 133, 136, 137, 139, 153, 154, 155, 157, 159, 161, 165, 168, 169, 176, 180, 183, 184, 187, 188, 190, 191, 197, 199, 212, 213, 224, 226, 236, 238, 239, 243, 244, 247, 251, 254, 260, 261, 265, 277, 279, 281], "emit": [7, 104, 194], "probabl": [7, 9, 12, 34, 52, 55, 94, 98, 101, 103, 104, 107, 110, 137, 142, 143, 145, 169, 176, 178, 188, 190, 212, 277], "judg": 7, "closer": [7, 93, 103, 178], "feedback": [7, 129, 138, 158, 161, 162, 199, 211, 264, 285], "authent": 7, "theori": [7, 52, 55, 93, 103, 142, 171], "delic": 7, "tandem": [7, 250], "indistinguish": 7, "fool": [7, 52, 78], "excel": [7, 54, 188, 205], "realist": [7, 198, 277], "transpos": [7, 15, 42, 51, 52, 55, 96, 159, 169, 188, 254, 277], "2d": [7, 34, 55, 98, 111, 139, 144, 179, 190, 191, 195, 208], "convolut": [7, 12, 15, 16, 55, 94, 96, 101, 103, 111, 120, 126, 130, 131, 133, 135, 136, 162, 165, 175, 184, 185, 194, 201, 212, 213, 220, 223, 226, 229, 230, 241, 242, 253, 260], "relu": [7, 15, 49, 55, 96, 98, 105, 111, 120, 129, 137, 151, 155, 159, 176, 179, 180, 181, 188, 205, 206, 207, 208, 212, 213, 223, 239, 276, 279], "unit": [7, 52, 98, 101, 137, 138, 160, 171, 175, 177, 178, 183, 190, 194, 198, 226, 239], "dcgangeneratorimpl": 7, "knoises": 7, "conv1": [7, 49, 96, 98, 120, 137, 170, 175, 180, 188], "convtranspose2dopt": 7, "batch_norm1": 7, "conv2": [7, 96, 98, 120, 137, 180, 188], "128": [7, 9, 54, 55, 58, 91, 103, 137, 141, 144, 153, 155, 176, 179, 180, 181, 195, 198, 201, 213, 214, 224, 238, 247], "pad": [7, 52, 98, 147, 182, 198, 239, 274, 277, 281], "batch_norm2": 7, "conv3": 7, "batch_norm3": 7, "conv4": 7, "tanh": [7, 55, 98, 105, 177, 239], "convtranspose2d": 7, "batchnorm2d": [7, 55, 111, 147, 239], "dcgangener": 7, "chosen": [7, 9, 94, 98, 140, 178, 192, 223, 224, 254], "outlin": [7, 171, 195], "cours": [7, 17, 21, 56, 93, 94, 101, 103, 106, 107, 110, 111, 142, 153, 188, 220, 281], "student": [7, 103], "No": [7, 56, 116, 139, 159, 204, 251], "harm": [7, 103], "discoveri": [7, 194], "fed": [7, 15, 39, 52, 55, 190, 195], "soylent": 7, "regularli": [7, 56], "channel": [7, 13, 15, 45, 46, 55, 94, 96, 98, 101, 103, 111, 131, 136, 141, 175, 184, 188, 191, 197, 213, 226, 239, 260], "moduleopt": 7, "linearopt": 7, "leaki": [7, 55], "alpha": [7, 18, 161, 190, 211, 272], "sigmoid": [7, 55, 98, 199, 239], "squash": [7, 154, 161], "rang": [7, 8, 14, 15, 17, 23, 43, 46, 54, 55, 56, 70, 78, 85, 91, 94, 96, 103, 111, 112, 113, 115, 116, 119, 137, 138, 139, 140, 143, 153, 155, 173, 176, 179, 181, 183, 187, 188, 194, 197, 203, 205, 208, 211, 212, 220, 222, 223, 229, 237, 239, 251, 254, 257, 258, 261, 263, 265, 266, 281], "sequenti": [7, 15, 52, 71, 98, 110, 119, 154, 169, 191, 203, 211, 212, 239, 257, 258, 277, 284], "orient": [7, 185], "layer": [7, 12, 13, 14, 15, 16, 18, 20, 21, 33, 39, 40, 45, 49, 52, 55, 58, 63, 71, 78, 91, 93, 96, 100, 101, 102, 103, 105, 111, 119, 120, 126, 129, 137, 138, 139, 143, 144, 145, 146, 154, 162, 169, 173, 175, 176, 177, 180, 181, 183, 185, 194, 195, 197, 199, 203, 204, 207, 211, 212, 222, 223, 226, 228, 230, 236, 240, 241, 243, 244, 261, 265, 276, 279, 281], "conv2dopt": 7, "leakyrelu": [7, 55], "leakyreluopt": 7, "negative_slop": 7, "fourth": [7, 68, 119, 148], "power": [7, 45, 52, 60, 68, 78, 91, 93, 96, 103, 105, 111, 119, 131, 136, 137, 143, 151, 153, 159, 161, 165, 174, 175, 176, 183, 190, 191, 211, 224, 251, 257, 265, 275], "knob": [7, 257], "launch": [7, 56, 63, 140, 143, 150, 151, 179, 180, 181, 182, 187, 212, 224, 229, 239, 257, 261], "few": [7, 8, 9, 12, 13, 18, 49, 54, 59, 88, 93, 94, 96, 101, 103, 105, 106, 107, 108, 110, 120, 132, 138, 139, 142, 144, 145, 146, 151, 153, 154, 169, 171, 176, 177, 180, 183, 192, 198, 199, 204, 206, 213, 223, 238, 239, 240, 243, 248, 265, 273, 274, 275], "sampler": [7, 35, 58, 102, 137, 138, 177, 185], "indic": [7, 13, 14, 17, 34, 52, 65, 66, 85, 93, 94, 96, 98, 100, 104, 105, 110, 116, 118, 119, 143, 144, 154, 159, 175, 177, 178, 180, 187, 188, 190, 195, 201, 222, 224, 254, 263, 272, 274, 275], "index": [7, 8, 18, 35, 42, 43, 46, 51, 52, 54, 86, 101, 104, 105, 107, 108, 110, 111, 118, 137, 142, 143, 144, 153, 169, 173, 179, 183, 187, 190, 192, 194, 195, 211, 257, 265, 277, 284], "instanti": [7, 9, 13, 17, 35, 40, 54, 55, 68, 70, 88, 96, 103, 111, 113, 119, 129, 143, 174, 175, 178, 190, 199, 211, 228], "collat": [7, 54], "wherev": 7, "make_data_load": 7, "unique_ptr": 7, "spawn": [7, 14, 23, 52, 55, 56, 58, 63, 137, 151, 153, 179, 180, 181, 205, 206, 258, 263], "concurr": [7, 118, 141, 143, 171, 205, 239, 257, 261], "kbatchsiz": 7, "dataloaderopt": 7, "batch_siz": [7, 17, 26, 35, 52, 54, 55, 58, 91, 96, 137, 138, 139, 141, 153, 178, 179, 180, 187, 188, 190, 191, 195, 213, 223, 247, 254, 276, 281], "consol": [7, 188, 190], "field": [7, 13, 14, 17, 18, 34, 52, 98, 108, 110, 129, 133, 153, 168, 179, 187, 194, 197, 263, 274], "rebuild": [7, 224], "finish": [7, 20, 47, 96, 151, 179, 181, 188, 205, 213, 220, 226, 239, 279], "danc": [7, 15], "generator_optim": 7, "adamopt": 7, "2e": [7, 93], "beta": [7, 22, 130, 131, 136, 184, 246, 259, 260, 275], "make_tupl": 7, "discriminator_optim": 7, "5e": [7, 26], "adagrad": [7, 102, 119, 260, 275, 282, 285], "lbfg": [7, 15], "rmsprop": [7, 38, 49, 72, 105, 119], "sgd": [7, 38, 45, 46, 49, 70, 72, 91, 96, 102, 105, 111, 119, 120, 129, 151, 153, 179, 180, 181, 185, 188, 213, 237, 241, 242, 247], "date": [7, 12, 13, 78, 80, 81, 82, 83, 84, 138, 180, 213, 236, 253], "exhaust": [7, 14, 194], "knumberofepoch": 7, "batch_index": 7, "real_imag": 7, "real_label": 7, "uniform_": [7, 181], "real_output": 7, "reshap": [7, 15, 98, 101, 110, 111, 173, 277], "d_loss_real": 7, "binary_cross_entropi": [7, 223], "fake_imag": 7, "fake_label": 7, "fake_output": 7, "d_loss_fak": 7, "d_loss": 7, "fill_": [7, 8, 187], "g_loss": 7, "printf": 7, "r": [7, 14, 17, 38, 45, 49, 78, 88, 96, 104, 133, 136, 159, 160, 161, 162, 165, 178, 179, 181, 190, 197, 213, 224, 239, 257, 284], "2ld": 7, "3ld": 7, "4f": [7, 137, 138], "batches_per_epoch": 7, "evalu": [7, 15, 21, 26, 38, 40, 78, 93, 94, 100, 103, 113, 120, 146, 160, 165, 173, 178, 180, 188, 192, 194, 197, 214, 254, 281], "uniformli": [7, 91, 178, 239], "robust": [7, 52, 56, 57, 78, 101, 140, 178, 212], "smooth": [7, 103, 112, 190], "propag": [7, 13, 20, 33, 38, 45, 47, 49, 55, 103, 107, 108, 111, 148, 157, 162, 177, 239], "repeat": [7, 17, 23, 93, 96, 144, 145, 177, 187, 194, 199, 211, 229, 238, 243, 244, 261, 272], "spiel": 7, "ideal": [7, 17, 35, 93, 96, 101, 103, 171, 183, 194, 201, 249], "progress": [7, 12, 18, 26, 55, 56, 100, 102, 154, 183, 188, 206, 263, 276], "fill": [7, 17, 96, 110, 111, 144, 154, 273, 274], "yet": [7, 13, 14, 23, 53, 78, 93, 96, 101, 115, 116, 146, 153, 171, 180, 183, 195, 206, 213, 254, 277], "moment": [7, 14, 211, 275], "observ": [7, 17, 49, 54, 85, 102, 126, 137, 138, 143, 146, 154, 161, 162, 168, 171, 177, 178, 179, 181, 182, 183, 192, 198, 203, 212, 214, 223, 224, 230, 236, 244, 255, 258, 259, 275, 279], "meaning": [7, 52, 103, 162, 263], "3c0711f20896": 7, "dcga": 7, "6876": 7, "1304": 7, "3776": 7, "3101": 7, "300": [7, 138, 181, 212, 224, 238], "3652": 7, "6626": 7, "400": [7, 96, 120, 224, 238, 254], "8057": 7, "2795": [7, 224], "3531": 7, "4452": 7, "600": [7, 162, 178], "3501": [7, 107], "0811": 7, "700": 7, "3581": 7, "5623": 7, "800": 7, "6423": 7, "7385": 7, "900": 7, "3592": 7, "7333": 7, "4660": 7, "5242": 7, "6364": 7, "0886": 7, "3717": 7, "8103": 7, "0201": 7, "3544": 7, "4522": 7, "6545": 7, "fine": [7, 21, 52, 54, 93, 104, 142, 153, 159, 176, 187, 192, 195, 223, 224, 238, 239, 257, 272, 281], "faster": [7, 12, 15, 52, 59, 78, 98, 101, 103, 111, 120, 136, 138, 140, 150, 151, 154, 155, 160, 162, 170, 171, 179, 183, 192, 197, 223, 224, 238, 239, 240, 257, 259, 263, 276], "quickli": [7, 37, 46, 85, 103, 104, 105, 110, 111, 119, 141, 168, 178, 183, 199, 200, 214, 263], "onto": [7, 12, 17, 20, 23, 46, 98, 100, 101, 136, 154, 168, 180, 181, 195, 239, 263], "somewher": [7, 98, 104, 105, 120], "kcpu": [7, 266], "last": [7, 14, 17, 34, 45, 52, 55, 56, 78, 86, 88, 91, 96, 98, 101, 102, 105, 108, 113, 126, 131, 136, 141, 142, 145, 153, 154, 159, 168, 177, 178, 179, 181, 182, 183, 184, 188, 194, 197, 213, 223, 239, 254, 260, 272, 275, 279], "whose": [7, 85, 88, 93, 94, 103, 110, 138, 142, 162, 171, 190, 222, 224], "creation": [7, 13, 101, 228, 275], "hand": [7, 12, 17, 21, 23, 78, 101, 104, 110, 111, 145, 153, 170, 171, 192, 194, 195, 205, 206, 243, 244, 273, 281], "insert": [7, 15, 21, 98, 181, 194, 214, 279, 281], "explicit": [7, 8, 139, 162, 171, 181, 194, 198, 220, 223, 246, 251, 259, 260, 273, 280], "suppli": [7, 107, 162, 176], "op": [7, 8, 9, 13, 14, 18, 51, 85, 116, 129, 130, 136, 137, 138, 139, 141, 146, 147, 151, 153, 159, 162, 176, 187, 198, 201, 211, 223, 228, 259, 265, 266, 273, 274, 276, 277], "previou": [7, 14, 17, 18, 20, 21, 38, 52, 56, 58, 101, 102, 103, 111, 116, 126, 138, 139, 140, 144, 145, 148, 149, 150, 154, 161, 168, 171, 173, 175, 177, 178, 179, 181, 182, 183, 187, 188, 190, 192, 194, 195, 201, 224, 230, 239, 254, 281], "resid": [7, 103, 171], "And": [7, 13, 19, 26, 55, 94, 107, 113, 144, 148, 159, 160, 162, 165, 176, 187, 188, 192, 194, 224, 238], "downstream": [7, 190], "portabl": [7, 249], "augment": [7, 26, 54, 111, 126, 133, 136, 185, 194, 197], "period": [7, 52, 55, 140, 143, 161, 187, 263], "middl": 7, "procedur": [7, 49, 132, 178, 185], "restor": [7, 78, 120, 151, 162, 241], "long": [7, 13, 52, 53, 85, 91, 98, 101, 105, 106, 107, 109, 111, 138, 140, 142, 145, 154, 158, 159, 169, 173, 178, 181, 187, 195, 198, 199, 224, 238, 239, 242, 252, 260, 261, 263, 266], "session": [7, 103, 113], "fortun": [7, 13, 18, 91, 153, 154, 224], "deseri": [7, 120], "filenam": [7, 118, 190, 223, 263], "interv": [7, 17, 93, 143, 181], "kcheckpointeveri": 7, "pt": [7, 56, 120, 137, 138, 139, 213, 214, 249, 264], "str": [7, 8, 23, 86, 138, 173, 177, 180, 190, 194, 257], "checkpoint_count": 7, "integ": [7, 12, 43, 96, 101, 105, 107, 110, 143, 175, 194, 197, 201, 229, 265, 275], "counter": [7, 14, 52, 55, 146, 153, 191, 251], "bump": 7, "beta1": [7, 55, 211], "krestorefromcheckpoint": 7, "intermediari": [7, 142], "xxx": [7, 18, 54], "matplotlib": [7, 15, 35, 55, 60, 93, 94, 96, 100, 178, 183, 188, 190], "argpars": [7, 137, 138, 179, 180, 181], "pyplot": [7, 15, 96, 111, 188, 190], "plt": [7, 15, 96, 183, 188, 190], "parser": [7, 104, 137, 138, 179, 180, 181], "argumentpars": [7, 137, 138, 179, 180, 181], "add_argu": [7, 137, 138, 179, 180, 181], "png": [7, 54, 136, 197], "parse_arg": [7, 137, 138, 179, 180, 181], "jit": [7, 8, 9, 12, 18, 88, 192, 201, 211, 213, 224, 229, 243, 244, 251, 253, 254], "sample_fil": 7, "mul": [7, 146, 159, 194, 211, 224, 238], "uint8": [7, 197], "numpi": [7, 15, 19, 22, 43, 46, 54, 60, 74, 76, 77, 93, 96, 111, 113, 118, 148, 176, 181, 188, 190, 192, 222, 238, 254, 260, 272, 281, 285], "axi": [7, 85, 107, 108, 144, 171, 175, 190], "subplot": 7, "imshow": [7, 15, 96, 188, 190], "cmap": [7, 188], "grai": [7, 161], "get_xaxi": 7, "set_vis": 7, "get_yaxi": 7, "savefig": 7, "out_fil": 7, "30": [7, 47, 85, 96, 105, 134, 138, 140, 155, 162, 175, 179, 181, 211, 224, 229, 281], "57": [7, 21, 118, 159, 211, 229], "4953": 7, "0195": 7, "3610": 7, "8148": 7, "4072": 7, "36760": 7, "4444": 7, "3761": 7, "8790": 7, "3977": 7, "3315": 7, "120": [7, 96, 120, 126, 181, 188, 229], "8084": 7, "hoorai": 7, "ball": 7, "court": 7, "hopefulli": [7, 53, 54, 78, 88, 105, 120, 240], "digest": [7, 238], "necess": [7, 52, 100], "broad": [7, 60, 94, 102], "did": [7, 12, 19, 46, 55, 93, 96, 98, 101, 113, 129, 140, 153, 157, 169, 177, 180, 183, 195, 224, 263], "space": [7, 9, 17, 52, 55, 78, 93, 94, 98, 103, 104, 108, 110, 143, 154, 161, 168, 171, 177, 178, 181, 183, 187, 188, 190, 195, 198, 214, 264], "consult": [7, 168, 222], "stuck": [7, 285], "whenev": [7, 9, 56, 70, 101, 104, 105, 201, 242], "rate": [7, 38, 45, 55, 91, 96, 98, 102, 103, 105, 126, 137, 138, 143, 144, 161, 178, 180, 195, 197, 237, 239, 263], "prototyp": [8, 13, 14, 18, 35, 194, 195, 211, 260, 266, 268, 272, 273, 274, 275, 276, 277, 282, 284, 285], "statu": [8, 26, 140, 143, 146, 181, 194, 253], "subject": [8, 14, 17, 137, 157, 183, 194, 201, 211, 224, 253, 276, 277, 279, 284], "snapshot": [8, 136, 149, 194], "__obj_flatten__": 8, "inspect": [8, 93, 103, 116, 138, 139, 143, 158, 182, 185, 192, 194, 195, 199, 224, 253], "guard": [8, 12, 151, 204, 211], "tupl": [8, 35, 42, 51, 85, 96, 98, 101, 103, 108, 110, 113, 178, 194, 197, 238, 261, 275], "attribute_nam": 8, "_librari": 8, "register_fake_class": 8, "addition": [8, 14, 15, 38, 85, 142, 143, 151, 171, 194, 197, 205, 206, 248, 257, 263, 280], "__obj_unflatten__": 8, "classmethod": 8, "flatten": [8, 49, 71, 103, 111, 119, 137, 141, 155, 180, 194, 212], "breakdown": [8, 187], "diff": [8, 56, 58, 85, 136, 224, 238], "custom_class": [8, 9], "tensorqueu": 8, "customclasshold": [8, 9], "init_tensor_": 8, "dict": [8, 23, 52, 54, 168, 169, 177, 194, 197, 205, 206, 211, 223, 228], "init_tensor": 8, "size_tensor": 8, "size_tensor_acc": 8, "const_data_ptr": 8, "queue_siz": 8, "irang": 8, "val": [8, 9, 21, 138, 176, 281], "queue_": 8, "to_str": 8, "push_back": [8, 9, 213], "push": [8, 9, 55, 78, 98, 103, 160, 265, 284], "rear": 8, "lock_guard": 8, "mutex": 8, "mutex_": 8, "pop": [8, 9, 98, 281], "front": [8, 155, 175, 194], "pop_front": 8, "get_raw_queu": 8, "raw_queu": 8, "dequ": 8, "mycustomclass": 8, "class_": [8, 9], "init": [8, 9, 140, 169, 199, 280], "clone": [8, 9, 14, 57, 101, 144, 148, 149, 153, 159, 162, 173, 254, 261], "2a": 8, "class_nam": [8, 126, 190], "faketensorqueu": 8, "2b": [8, 45], "cl": [8, 15, 267], "flattened_tq": 8, "libcustom_class": [8, 9], "tq": 8, "mod": [8, 192, 194, 254], "sin": [8, 17, 19, 65, 66, 70, 71, 72, 75, 76, 93, 101, 119, 239, 249, 267], "co": [8, 93, 110, 229, 239, 267], "poped_t": 8, "allclos": [8, 155, 159, 169, 211, 261, 281], "eager": [8, 13, 88, 90, 146, 159, 162, 182, 192, 194, 198, 203, 211, 214, 239, 252, 254, 279], "fullgraph": [8, 19, 146, 192, 203, 251], "exported_program": [8, 120, 254], "strict": [8, 120, 190, 240, 273], "for_each_add_": 8, "inc": 8, "add_": [8, 101, 194, 272], "torch_library_frag": 8, "__torch__": [8, 9], "foo": [8, 9, 169, 180, 238, 267, 280], "intrusive_ptr": [8, 9, 174, 224, 238], "fake_for_each_add_": 8, "foreachadd": 8, "scriptobject": 8, "empty_tensor_queu": 8, "qlen": 8, "ep": [8, 147, 181, 194, 211, 254, 272, 281], "trace": [8, 12, 13, 19, 33, 45, 93, 100, 118, 136, 146, 159, 165, 171, 182, 187, 191, 194, 207, 250, 251, 255, 259, 263, 276], "major": [8, 13, 14, 98, 101, 110, 126, 140, 159, 168, 182, 192, 195, 211, 212, 244, 251, 258, 275], "downsid": [8, 157, 171], "consum": [8, 115, 118, 142, 159, 171, 177, 179, 181, 182, 229, 239], "difficult": [8, 104, 160, 169, 183, 195, 211, 274, 284], "parti": [8, 9, 12, 19, 130, 139, 140, 174], "complic": [8, 17, 104, 105, 110, 111, 119, 143, 194, 208, 223, 224, 284], "fakif": 8, "tracing_mod": 8, "alias": [8, 12, 13, 194], "within": [8, 17, 23, 63, 88, 93, 94, 100, 111, 112, 113, 118, 129, 141, 146, 148, 159, 169, 175, 178, 180, 190, 191, 192, 195, 198, 208, 212, 224, 230, 239, 243, 248, 250, 253, 257, 264, 266, 275, 276, 277, 280], "torchbind": 8, "transfer": [9, 12, 22, 46, 54, 103, 111, 120, 121, 133, 136, 153, 171, 176, 180, 187, 197, 225, 240, 260, 264], "maintain": [9, 13, 17, 33, 34, 35, 45, 52, 78, 98, 103, 108, 135, 136, 140, 149, 153, 161, 178, 181, 194, 199, 205, 223, 258, 280], "persist": [9, 14, 40, 205, 223], "member": [9, 70, 119, 280, 285], "portion": [9, 85, 168, 171, 173, 175, 212, 220, 238, 263], "registr": [9, 10, 12, 13, 18, 19, 213, 220], "templat": [9, 12, 121, 153, 159, 191, 260, 276], "mystackclass": 9, "stack_": 9, "pop_back": 9, "make_intrus": [9, 174], "merg": [9, 17, 47, 94, 98, 176, 190, 213], "elem": [9, 236], "smart": [9, 194], "oppos": [9, 10, 52, 55, 126, 153, 160, 165, 180, 224], "intern": [9, 12, 13, 14, 18, 39, 40, 52, 59, 71, 98, 103, 119, 135, 136, 137, 139, 143, 153, 187, 199, 201, 205, 238, 263, 272], "manag": [9, 34, 45, 52, 63, 93, 111, 118, 129, 132, 139, 141, 146, 149, 150, 151, 169, 182, 187, 192, 195, 205, 206, 207, 208, 223, 224, 225, 228, 229, 230, 239, 252, 257, 264], "visibl": [9, 46, 91, 100, 190], "qualifi": [9, 12, 206], "my_class": 9, "contructor": 9, "overload": [9, 12], "stateless": [9, 17, 155, 157], "yourclass": 9, "ref": 9, "four": [9, 17, 23, 70, 88, 96, 98, 101, 119, 138, 153, 173, 188, 198, 214, 254, 279], "examin": [9, 14, 85, 93, 94, 100, 102, 103, 153, 158, 171, 195], "address": [9, 15, 23, 26, 85, 98, 130, 136, 140, 153, 171, 179, 180, 194, 195, 198, 207, 214, 236, 257, 259, 280], "fulli": [9, 14, 15, 17, 18, 37, 63, 85, 91, 96, 97, 98, 111, 126, 132, 136, 143, 146, 149, 162, 165, 178, 180, 182, 187, 199, 201, 206, 211, 213, 226, 274, 281], "unari": 9, "rule": [9, 12, 33, 45, 49, 93, 101, 108, 129, 142, 155, 160, 169, 170, 177, 178, 194, 223], "cover": [9, 10, 17, 18, 20, 23, 35, 49, 101, 106, 116, 123, 129, 134, 135, 136, 138, 143, 153, 173, 174, 177, 180, 181, 188, 192, 194, 200, 212, 213, 223, 231, 232, 233, 234, 237, 238, 239, 250, 257, 274, 276, 277], "add_librari": 9, "cmake_cxx_standard": 9, "custom_class_project": 9, "opt": [9, 12, 111, 143, 162, 174, 180, 181, 187, 203, 265], "rh": 9, "devtoolset": 9, "torchbind_tutori": 9, "j": [9, 33, 45, 78, 93, 96, 103, 104, 108, 139, 183, 263], "annot": [9, 12, 13, 23, 35, 54, 105, 116, 190, 192, 194, 224], "futur": [9, 23, 52, 111, 116, 118, 129, 137, 157, 161, 168, 174, 178, 179, 180, 181, 205, 212, 241, 252, 275], "scriptmodul": [9, 88], "export_attr": 9, "runtimeerror": [9, 129, 140, 174, 176, 254], "def_pickl": 9, "pushivalueimpl": 9, "pickler": 9, "__getstate__": 9, "__setstate__": 9, "pickl": [9, 40, 91, 111, 120, 168, 224, 263], "salient": 9, "preserv": [9, 12, 21, 101, 131, 136, 139, 162, 175, 236, 241, 273, 279, 281], "conveni": [9, 12, 17, 46, 49, 52, 94, 107, 111, 142, 145, 155, 160, 174, 177, 206, 213, 223, 224, 238, 263, 273, 275], "wherea": [9, 111, 146, 188, 190, 265, 273, 274], "didn": [9, 12, 94, 113, 158, 179, 284], "confus": [9, 111, 144, 157, 190, 195, 265, 273, 274, 275], "de": [9, 21, 23, 183, 281], "suppos": [9, 13, 103, 104, 105, 110, 137, 192, 197, 213, 280], "manipulate_inst": 9, "trycustomop": 9, "bar": [9, 52, 85, 169, 180, 190, 192, 220], "enforc": [9, 13, 17, 143, 169, 272, 273], "relax": [9, 169, 254], "standalon": [9, 56, 223, 251, 261], "blend": 9, "smoothli": 9, "frequent": [9, 33, 85, 110, 119, 137, 213, 252, 274], "faq": 9, "autograd": [10, 15, 18, 19, 20, 34, 35, 37, 38, 39, 40, 42, 43, 48, 49, 50, 60, 64, 67, 71, 94, 95, 96, 97, 98, 100, 101, 102, 106, 107, 111, 129, 130, 131, 135, 136, 144, 145, 148, 151, 159, 160, 165, 170, 178, 179, 180, 183, 184, 194, 199, 220, 223, 239, 251, 260, 284], "vmap": [10, 12, 131, 136, 157, 160, 165, 170, 260, 282, 285], "treat": [10, 19, 93, 110, 170, 179, 192, 194, 195], "opaqu": [10, 19, 238, 251], "callabl": [10, 19, 43, 54, 111, 187, 192, 194, 222, 251], "especi": [10, 21, 52, 55, 78, 94, 101, 138, 140, 151, 158, 165, 168, 171, 194, 198, 265, 273, 281], "respect": [10, 19, 20, 33, 35, 37, 38, 39, 45, 52, 55, 65, 66, 93, 94, 105, 107, 119, 123, 129, 141, 142, 154, 157, 159, 160, 170, 171, 177, 181, 183, 187, 195, 236, 241, 251, 257, 261], "aotinductor": [10, 130, 194, 243, 246, 251, 254, 259, 260], "sycl": [10, 136], "site": [10, 23, 53, 55, 158, 183, 229, 238, 254], "head": [10, 21, 37, 86, 98, 118, 151, 182, 197, 277, 281], "toe": 10, "express": [10, 19, 93, 96, 98, 101, 104, 115, 123, 141, 194, 198, 211, 274, 279], "doesn": [10, 12, 13, 16, 19, 21, 63, 105, 107, 110, 111, 142, 160, 162, 171, 175, 190, 192, 194, 203, 204, 211, 238, 239, 250, 254, 255, 257, 265, 272, 281, 284], "pybind": 10, "ed": [10, 253], "newest": 12, "respons": [12, 14, 20, 23, 52, 93, 94, 102, 111, 135, 136, 141, 147, 151, 153, 179, 180, 183, 192, 194, 203, 222], "nontrivi": 12, "cross": [12, 16, 46, 55, 96, 98, 102, 141, 143, 239, 242, 257], "cut": [12, 173, 194], "concern": [12, 105, 195, 214, 272], "switch": [12, 18, 100, 101, 120, 168, 195, 212, 223, 225, 229, 242], "organ": [12, 17, 54, 96, 120, 144, 224, 257, 261], "convers": [12, 52, 93, 101, 162, 183, 211, 236, 272], "highest": [12, 46, 52, 100, 140, 145, 178, 190, 192, 239], "prioriti": [12, 140], "redispatch": 12, "involv": [12, 18, 21, 37, 40, 53, 88, 93, 94, 101, 104, 107, 113, 120, 129, 132, 142, 144, 150, 161, 168, 181, 183, 194, 230, 239, 244, 251, 254, 263, 264, 265, 277, 281], "unlik": [12, 15, 21, 94, 101, 103, 119, 141, 142, 157, 162, 183, 191, 194, 251, 257, 280, 281], "style": [12, 141, 173, 194, 197, 206], "abid": [12, 55], "myop": 12, "myadd": [12, 13], "realli": [12, 46, 93, 98, 101, 104, 105, 110, 119, 121, 136, 142, 188, 224, 260, 272, 274, 284], "myadd_cpu": 12, "self_": 12, "other_": 12, "self_ptr": 12, "other_ptr": 12, "catch": [12, 14, 192, 194, 213, 252], "previous": [12, 33, 88, 107, 111, 146, 157, 173, 175, 177, 178, 179, 187, 194, 236, 253, 272, 284], "myadd_cuda": 12, "split": [12, 23, 47, 52, 55, 88, 91, 96, 100, 102, 136, 144, 145, 151, 173, 177, 180, 181, 183, 195, 197, 220], "boundari": [12, 139, 177, 248], "myops_cpu": 12, "myops_cuda": 12, "subdivid": 12, "xla": [12, 13, 18, 236], "torch_xla": [12, 13], "useabl": 12, "behav": [12, 19, 101, 111, 162, 169, 179, 220], "autogradnotimplementedfallback": 12, "notimpl": 12, "node": [12, 23, 33, 45, 49, 56, 57, 58, 59, 63, 65, 93, 100, 104, 116, 119, 129, 132, 138, 139, 140, 144, 146, 149, 150, 151, 158, 159, 180, 183, 194, 208, 211, 239, 257, 261, 266, 279], "require_grad": [12, 129], "ness": 12, "pin": [12, 102, 142, 171, 239], "lost": [12, 21, 281], "adinplaceorview": 12, "bookkeep": [12, 224], "autogradnotimplementedinplaceorviewfallback": 12, "logi": 12, "guess": [12, 38, 45, 52, 55, 144, 183], "twist": 12, "constitut": [12, 17], "hood": [12, 52, 55, 57, 59, 63, 119, 141, 142, 160, 161, 171, 181, 207, 275], "singleton": [12, 180], "findschemaorthrow": 12, "decltyp": 12, "down": [12, 13, 14, 34, 35, 53, 85, 91, 93, 98, 100, 105, 111, 137, 154, 159, 160, 161, 180, 185, 188, 194, 238, 239, 263, 272], "typic": [12, 14, 17, 35, 45, 49, 51, 57, 58, 85, 96, 104, 105, 110, 139, 141, 143, 147, 149, 159, 168, 171, 177, 180, 190, 192, 194, 195, 211, 212, 213, 223, 225, 239, 243, 244, 254, 257], "cast": [12, 21, 23, 76, 118, 138, 139, 171, 194, 223, 281], "runtim": [12, 17, 23, 42, 53, 85, 88, 93, 96, 97, 101, 115, 116, 118, 130, 136, 140, 141, 146, 147, 158, 168, 171, 173, 187, 192, 194, 195, 201, 203, 211, 212, 223, 224, 229, 242, 246, 250, 259, 260, 265, 267, 276], "lookup": [12, 20, 110, 146, 181], "typo": [12, 129, 199], "myaddfunct": [12, 13], "autononvariabletypemod": [12, 13], "myadd_autograd": [12, 13], "raii": 12, "infinit": 12, "overflow": [12, 52, 223, 265], "send": [12, 13, 14, 15, 46, 47, 63, 91, 153, 161, 171, 173, 174, 179, 180, 181, 195, 229], "exclud": [12, 45, 139, 192, 229, 279], "consider": [12, 13, 137, 194, 195, 254], "autogradcpu": 12, "autogradcuda": 12, "pythondispatch": 12, "_python_dispatch": 12, "sens": [12, 15, 17, 103, 110, 111, 129, 155, 171, 188], "isn": [12, 93, 104, 157, 171, 176, 188, 194, 195, 224, 226, 240, 241, 274], "glorifi": 12, "add_cpu": 12, "add_cuda": 12, "unsupport": [12, 112, 116, 130, 136, 192, 194, 254], "decentr": 12, "importantli": [12, 148, 168, 171, 224, 272], "aspect": [12, 18, 78, 153, 197, 224], "patch": [12, 13, 178], "dispatchkei": [12, 13], "varieti": [12, 26, 34, 52, 93, 94, 98, 102, 111, 120, 145, 171, 198, 214, 257, 275], "fallback": [12, 13, 18, 198], "amp": [12, 18, 63, 139, 162, 201, 213, 247, 259, 276], "incom": [12, 96, 187], "float16": [12, 18, 138, 162, 201, 223], "float32": [12, 17, 96, 138, 139, 176, 181, 211, 223, 236, 261, 266, 276], "matmul": [12, 141, 159, 194, 201, 212, 223, 265, 281, 284], "impair": 12, "converg": [12, 38, 52, 55, 66, 102, 103, 119, 120, 141, 153, 169, 178, 183, 204, 223, 240, 259], "hypothet": 12, "autocast_mod": 12, "mymatmul_autocast": 12, "excludedispatchkeyguard": 12, "no_autocast": 12, "mymatmul": 12, "cached_cast": 12, "khalf": 12, "elig": [12, 239], "polici": [12, 18, 133, 136, 137, 139, 161, 178, 179, 181, 184, 214, 257, 260], "mixtur": [12, 211], "meanwhil": [12, 142, 159, 213, 273], "float64": 12, "unaffect": [12, 103], "forc": [12, 17, 21, 52, 98, 136, 183, 192, 198, 223, 239, 248, 272, 274, 281], "fallthrough": 12, "occur": [12, 14, 19, 56, 85, 103, 159, 162, 171, 179, 180, 187, 190, 194, 195, 199, 207, 229, 250, 263, 265], "pointwis": [12, 162, 191, 211, 239, 259], "fall": [12, 18, 94, 169, 178, 199, 252], "unfortun": [12, 119, 153, 194], "aren": [12, 148, 154, 194, 195, 239, 242, 274], "dri": [12, 187], "guidanc": [12, 140, 200, 223, 257], "reduct": [12, 70, 101, 119, 137, 138, 139, 142, 147, 168, 174, 187, 190, 198, 223, 239, 272, 274, 285], "gemm": [12, 159, 212, 276], "unless": [12, 42, 51, 101, 105, 112, 177, 194, 228, 265, 284], "categori": [12, 13, 78, 85, 94, 101, 126, 144, 145, 187, 194], "promote_typ": 12, "widest": 12, "safest": 12, "my_multiple_input_op_autocast": 12, "t0": [12, 138, 203, 211, 224], "t1": [12, 224], "optimist": 12, "exec_typ": 12, "my_multiple_input_op": 12, "myadd_autocast": 12, "gymnast": 12, "suitabl": [12, 43, 149, 153, 190, 238], "invoc": [12, 158, 179, 220, 244, 250], "stabil": [12, 103, 178], "41478": 12, "repo": [13, 18, 23, 57, 85, 135, 136, 149, 153, 171, 179, 180, 195, 264, 265], "mainten": [13, 190], "solut": [13, 21, 55, 112, 120, 130, 136, 159, 170, 171, 190, 192, 195, 207, 224, 239, 249, 259, 274, 277, 281], "pr": [13, 188, 198, 213, 238], "propos": [13, 26, 141, 154, 169, 207, 272, 274], "request": [13, 33, 45, 91, 101, 111, 138, 169, 176, 179, 180, 205, 266, 274, 275, 276, 280], "hardwar": [13, 18, 21, 42, 51, 53, 101, 103, 113, 144, 153, 155, 160, 162, 170, 171, 174, 175, 195, 198, 201, 212, 213, 214, 225, 239, 247, 251, 254, 265, 281], "googl": [13, 21, 26, 37, 52, 55, 100, 136, 153, 154, 177, 178, 187, 195, 257], "tpu": [13, 174, 242], "chip": 13, "layout": [13, 21, 141, 198, 208, 239, 272, 275, 281, 285], "spars": [13, 20, 98, 105, 110, 136, 154, 175, 195, 236, 260, 274, 282, 285], "quantiz": [13, 103, 126, 131, 134, 168, 201, 227, 236, 259, 260, 282], "mainli": [13, 17, 18, 23, 159, 187, 192, 253, 279], "haven": [13, 91, 93, 96, 101, 104, 108, 110, 129, 155, 158, 170], "identifi": [13, 21, 35, 56, 58, 78, 85, 86, 94, 111, 118, 150, 161, 162, 166, 175, 180, 194, 197, 207, 254, 263, 275, 281], "carri": [13, 17, 52, 55, 93, 101, 103, 107, 149, 154, 162, 183, 228], "privateuse1": [13, 135, 136, 280], "autogradprivateuse1": [13, 18], "privateuse2": [13, 18], "autogradprivateuse2": [13, 18], "privateuse3": [13, 18], "autogradprivateuse3": [13, 18], "tensorimpl": [13, 18, 224, 238], "storag": [13, 18, 19, 102, 107, 120, 136, 142, 154, 155, 162, 171, 177, 187, 205, 206, 223, 228, 236, 260, 263, 272, 274, 275, 282, 285], "dispatchkeyset": [13, 18], "k": [13, 15, 85, 94, 104, 129, 141, 179, 180, 182, 263, 264, 276, 281], "caffe2": [13, 88], "typemeta": 13, "data_typ": [13, 107], "opaquetensorimpl": 13, "tweak": [13, 52, 242], "overrid": [13, 18, 54, 96, 105, 140, 158, 162, 174, 190, 250, 259], "vulkan": 13, "src": [13, 14, 116, 153, 174, 238], "registrationdeclar": 13, "snippet": [13, 137, 138, 140, 146, 153, 159, 174, 182, 208, 223, 228, 239, 259, 261, 264, 272, 276, 280], "ab": [13, 96, 192, 201, 229], "abs_": 13, "abs_out": 13, "absolute_": 13, "absolute_out": 13, "angl": [13, 17, 110], "angle_out": 13, "sgn": 13, "uniqu": [13, 21, 52, 56, 58, 104, 105, 106, 108, 110, 138, 150, 180, 183, 195, 197, 254, 272, 281], "boolean": [13, 154, 194], "impli": [13, 103, 108, 194, 205, 228, 238, 251], "schema_my_op1": 13, "my_op1": 13, "schema_my_op2": 13, "my_op2": 13, "schema_my_op2_backward": 13, "my_op2_backward": 13, "zoom": [13, 85, 100, 143, 187, 190], "1600": [13, 224, 238], "grow": [13, 52, 105, 140, 142, 149, 205], "unrealist": 13, "decompos": [13, 21, 137, 194, 281], "combin": [13, 38, 58, 63, 91, 93, 96, 98, 103, 104, 107, 110, 111, 132, 136, 137, 142, 144, 145, 147, 155, 165, 171, 175, 178, 181, 183, 194, 195, 207, 208, 224, 239, 266, 277], "classifi": [13, 15, 26, 34, 45, 48, 49, 50, 55, 60, 78, 85, 91, 96, 98, 103, 120, 126, 130, 136, 139, 145, 161, 166, 183, 184, 197, 198, 222, 254, 259, 260], "accompani": 13, "comment": [13, 153, 168, 183, 213, 225, 272, 284], "sacrif": [13, 175], "max_pool2d": [13, 96, 137, 180, 229], "alia": [13, 101], "worri": [13, 55, 105, 148, 151, 168, 181, 208], "my_op": 13, "squeez": [13, 17, 101, 188, 265], "max": [13, 14, 52, 55, 85, 96, 98, 137, 143, 153, 177, 188, 190, 194, 198, 239, 254, 257, 258, 265, 277, 281, 285], "op_backward": 13, "proper": [13, 33, 138, 141, 151, 162, 177, 181, 190, 195, 239, 272], "rare": [13, 18, 52, 126, 171, 183, 239], "assumpt": [13, 17, 78, 103, 110, 111, 165, 171], "myadd_schema": 13, "train": [13, 15, 20, 21, 23, 33, 37, 38, 39, 43, 45, 48, 49, 50, 54, 57, 59, 60, 63, 65, 66, 68, 70, 71, 72, 75, 76, 78, 85, 88, 94, 95, 97, 98, 101, 103, 104, 106, 108, 110, 111, 113, 119, 130, 131, 132, 133, 136, 137, 139, 140, 143, 146, 147, 151, 162, 163, 165, 166, 169, 170, 173, 174, 176, 179, 180, 181, 182, 184, 187, 190, 191, 192, 194, 197, 201, 203, 204, 205, 206, 207, 208, 214, 223, 226, 229, 237, 240, 241, 244, 254, 258, 259, 260, 261, 263, 264, 274, 281], "my_add": 13, "_xlac": 13, "torch_xla_sourc": 13, "include_dir": [13, 174], "library_dir": 13, "extra_link_arg": 13, "make_relative_rpath": 13, "seamlessli": [13, 17, 56, 141, 195, 198, 224, 249], "nm": [13, 213], "torchvsion": 13, "torchvis": [13, 15, 35, 37, 39, 43, 45, 46, 53, 60, 91, 94, 96, 97, 100, 102, 103, 126, 133, 136, 137, 138, 158, 168, 176, 179, 180, 184, 187, 188, 190, 192, 213, 214, 229, 237, 239, 242, 247, 253, 254, 260, 265, 279], "adhoc": 13, "unbox": 13, "potenti": [13, 17, 78, 93, 104, 138, 140, 146, 171, 180, 192, 194, 197, 243, 249, 251, 263, 279, 285], "wiki": [13, 157, 169], "suit": [13, 94, 118, 177, 212, 276], "ship": [13, 46, 96], "delet": [13, 86, 142, 151, 168, 173, 181, 190, 265], "old": [13, 120, 140, 175, 187, 277], "until": [13, 52, 85, 93, 138, 140, 144, 145, 153, 154, 159, 168, 171, 177, 179, 180, 181, 187, 224, 261, 272], "interrupt": [13, 56, 91, 183], "quarterli": 13, "cadenc": 13, "announc": 13, "slack": [13, 46], "com": [13, 23, 26, 52, 116, 137, 144, 145, 147, 183, 191, 197, 222, 224, 254, 265], "Not": [13, 151, 176, 258], "search": [13, 23, 52, 134, 136, 143, 159, 175, 194, 257, 265], "instantiate_device_type_test": 13, "testtorchdevicetyp": 13, "testviewop": 13, "testtensordeviceop": 13, "testtypepromot": 13, "__reduce_ex__": 13, "monkei": 13, "direct": [13, 33, 45, 49, 55, 78, 93, 94, 96, 102, 110, 129, 143, 153, 157, 161, 165, 169, 183, 205, 252, 259, 264, 265, 275], "vice": [13, 42, 51], "versa": [13, 42, 51], "Such": [13, 14, 93], "seamless": [13, 195, 207, 285], "coverag": [13, 157, 160, 162, 223, 277, 279], "math": [13, 70, 88, 93, 107, 119, 165, 176, 211, 239], "comprehens": [13, 26, 42, 51, 94, 116, 159, 194, 211, 238, 239], "refactor": [13, 120, 149], "codegen": [13, 159, 211], "dev": [13, 105, 146, 176, 187, 190, 192, 220, 223, 285], "andrew": 14, "gu": 14, "shard": [14, 132, 136, 149, 206, 207, 208, 259, 261], "saw": [14, 17, 38, 52, 96, 98, 101, 105, 107, 157, 160, 161], "skeleton": [14, 17, 236], "implicitli": [14, 45, 52, 93, 137, 148, 182, 194, 220], "schedul": [14, 85, 91, 102, 126, 130, 137, 138, 139, 151, 173, 178, 187, 197, 229, 239, 246, 257, 259, 260], "synchron": [14, 20, 58, 59, 85, 137, 139, 151, 153, 177, 179, 180, 187, 192, 205, 220, 223, 224, 252, 258, 263, 264], "rank": [14, 20, 23, 47, 56, 58, 85, 131, 136, 137, 138, 139, 140, 151, 153, 173, 174, 179, 180, 181, 195, 205, 206, 208, 257, 258, 261, 263], "commun": [14, 18, 23, 58, 136, 137, 138, 139, 141, 143, 149, 150, 151, 173, 174, 177, 179, 180, 181, 187, 190, 194, 195, 207, 208, 239, 259, 261, 263, 267, 285], "particip": [14, 98, 150, 180, 223, 239], "group": [14, 23, 26, 52, 63, 86, 98, 101, 118, 132, 136, 137, 138, 139, 140, 145, 147, 149, 151, 153, 159, 173, 187, 195, 197, 198, 205, 206, 208, 211, 224, 254, 257, 258, 263], "fewer": [14, 147, 160], "hang": [14, 58, 145], "facilit": [14, 17, 52, 94, 101, 103, 120, 135, 136, 139, 141, 154, 239, 277, 280], "earli": [14, 55, 91, 151, 153, 171, 211, 274], "shadow": 14, "hook": [14, 139, 141, 146, 151, 175, 184, 211, 230, 260], "dist": [14, 23, 137, 138, 140, 151, 153, 169, 173, 174, 180, 205, 206, 208, 258, 261, 263], "mp": [14, 18, 34, 39, 42, 56, 58, 65, 78, 101, 119, 126, 136, 137, 138, 151, 153, 179, 180, 181, 197, 205, 206, 258], "ddp": [14, 20, 56, 57, 63, 136, 137, 138, 139, 141, 150, 187, 208, 258], "nccl": [14, 23, 56, 58, 85, 137, 138, 140, 141, 153, 187, 195, 206, 208, 261, 263], "world_siz": [14, 20, 23, 26, 56, 58, 137, 138, 140, 151, 153, 173, 174, 179, 180, 181, 205, 206, 208, 258, 261, 263], "num_input": 14, "master_addr": [14, 23, 56, 58, 137, 140, 151, 153, 174, 179, 180, 181, 205, 206, 258, 263], "localhost": [14, 23, 56, 58, 100, 137, 140, 151, 174, 179, 180, 181, 187, 188, 195, 205, 206, 208, 237, 248, 258], "master_port": [14, 23, 56, 58, 137, 140, 151, 153, 174, 179, 180, 181, 205, 206, 258, 263], "29500": [14, 23, 153, 174, 179, 180, 181, 258], "init_process_group": [14, 20, 23, 56, 58, 137, 138, 140, 151, 153, 173, 174, 205, 206, 208, 258, 261, 263], "device_id": [14, 58, 120, 138, 139, 151, 258], "nproc": [14, 56, 58, 137, 151, 179, 181, 205, 206, 258, 261], "arbitrarili": [14, 52, 103, 230], "togeth": [14, 21, 34, 40, 52, 54, 63, 88, 96, 98, 101, 102, 103, 107, 111, 137, 139, 147, 151, 154, 155, 171, 179, 181, 183, 190, 198, 238, 251, 281], "lr": [14, 26, 49, 55, 70, 91, 96, 111, 119, 120, 126, 130, 137, 138, 139, 151, 153, 159, 161, 178, 179, 180, 181, 188, 203, 205, 206, 211, 213, 237, 246, 247, 258, 259, 260], "notabl": [14, 91, 236], "divide_by_initial_world_s": 14, "world": [14, 17, 23, 39, 57, 93, 101, 105, 141, 153, 158, 161, 174, 178, 179, 180, 194, 195, 205, 206, 208, 212, 263, 277], "nonetheless": [14, 103], "mind": [14, 42, 52, 55, 88, 103, 150, 165], "preliminari": [14, 153], "delv": [14, 159, 251], "deeper": [14, 15, 39, 94, 101, 103, 105, 158, 159, 182, 194, 204, 211], "insight": [14, 78, 85, 135, 153, 182, 224, 238], "join_hook": 14, "kwarg": [14, 120, 139, 158, 162, 177, 180, 194, 195, 203, 211, 254, 276], "join_devic": 14, "join_process_group": 14, "processgroup": [14, 20, 23, 63, 132, 136, 141, 181, 195, 208, 239, 263], "throw_on_early_termin": 14, "explain": [14, 15, 21, 45, 49, 55, 78, 94, 105, 111, 129, 140, 141, 159, 192, 194, 199, 229, 249, 254, 266, 276, 279, 281], "joinconfig": 14, "_join_config": 14, "main_hook": 14, "repeatedli": [14, 98, 177, 181, 264], "post_hook": 14, "is_last_join": 14, "broadcast": [14, 71, 111, 119, 139, 151, 153, 174, 194, 238, 258], "itself": [14, 33, 34, 45, 85, 88, 96, 98, 101, 103, 107, 108, 111, 116, 120, 129, 141, 142, 144, 148, 153, 161, 177, 180, 181, 183, 195, 223, 229, 253], "vacuou": 14, "contextlib": [14, 190], "nullcontext": 14, "relat": [14, 17, 55, 93, 94, 101, 102, 107, 110, 135, 136, 141, 159, 169, 194, 198, 224, 239, 276], "conform": [14, 190], "interleav": [14, 261], "syncbatchnorm": [14, 58], "proce": [14, 103, 105, 159, 194, 239, 263], "__exit__": 14, "heartbeat": 14, "notify_join_context": 14, "serializ": 14, "proceed": [14, 49, 103, 116, 171], "overlap": [14, 59, 137, 138, 139, 144, 149, 151, 171, 187, 190, 239, 261], "moreov": [14, 171, 213, 224, 272], "permit": [14, 223], "customiz": [14, 154], "idea": [14, 26, 78, 88, 103, 105, 106, 107, 110, 119, 141, 147, 154, 159, 169, 178, 181, 183, 220, 224, 239, 257, 258, 272, 284], "counterjoinhook": 14, "sync_max_count": 14, "all_reduc": [14, 63, 137, 138, 153, 174, 207, 263], "get_rank": [14, 139, 151, 153], "process_group": [14, 208, 263], "common_rank": 14, "find_common_rank": 14, "max_count": 14, "__call__": [14, 54, 175], "increment": [14, 88, 107, 111, 153, 178], "meth": [14, 17], "to_consid": 14, "reduceop": [14, 137, 138, 153], "device_count": [14, 56, 58, 91, 101, 137, 151, 205, 206, 208], "highlight": [14, 52, 88, 112, 123, 132, 138, 139, 182, 187, 192, 194, 195, 213, 251], "alexi": 15, "jacq": 15, "winston": 15, "her": [15, 174], "leon": 15, "gati": 15, "alexand": [15, 279], "ecker": 15, "matthia": 15, "bethg": 15, "artist": 15, "distanc": [15, 65, 66, 70, 71, 72, 75, 76, 93, 103, 119], "d_c": 15, "d_": 15, "measur": [15, 38, 85, 93, 94, 96, 98, 103, 110, 137, 140, 155, 158, 160, 171, 177, 178, 182, 185, 192, 212, 223, 224, 229, 238, 244, 253, 259, 265, 276], "indispens": [15, 177], "pil": [15, 43, 54, 176, 190, 197], "pretrain": [15, 26, 45, 78, 94, 110, 126, 136, 176, 183, 190, 213, 253, 254, 279], "longer": [15, 55, 61, 62, 93, 105, 111, 113, 119, 130, 139, 142, 146, 159, 168, 175, 178, 179, 192, 194, 202, 204, 216, 217, 218, 219, 221, 224, 239, 269, 270, 276, 277, 278], "resiz": [15, 49, 55, 154, 213, 247], "unabl": [15, 19, 155, 170, 194, 274], "caff": 15, "picasso": 15, "jpg": [15, 35, 54, 55, 94], "reconvert": 15, "f_": [15, 177], "xl": [15, 212], "l": [15, 17, 45, 54, 55, 93, 105, 129, 177, 178, 194, 224, 253, 263], "w_": [15, 110], "squar": [15, 38, 49, 54, 65, 66, 70, 71, 72, 75, 76, 93, 96, 98, 101, 103, 119, 147, 148, 161, 169, 178, 182], "contentloss": 15, "recomput": [15, 103, 147, 149, 169, 239], "act": [15, 45, 52, 93, 98, 101, 143, 154, 175, 178, 180, 194, 195], "gram": 15, "g_": 15, "hat": [15, 108], "counteract": 15, "matric": [15, 21, 42, 51, 93, 107, 160, 169, 201, 281], "pool": [15, 23, 55, 96, 98, 103, 111, 120, 188, 195], "tend": [15, 21, 93, 98, 103, 265, 281], "almost": [15, 108, 110, 137, 141, 154, 176, 194, 243, 265], "sl": 15, "19": [15, 21, 96, 159, 178, 194, 211, 212, 229, 265, 266, 281], "vgg": 15, "child": [15, 118, 187, 208], "connect": [15, 49, 91, 96, 98, 110, 126, 136, 140, 141, 153, 157, 158, 165, 175, 176, 178, 198, 199, 208, 226, 263], "eval": [15, 21, 26, 40, 52, 111, 120, 137, 138, 147, 180, 183, 190, 191, 213, 247, 254, 279, 281], "485": [15, 54, 103, 176], "456": [15, 54, 103, 176], "406": [15, 54, 103, 176], "229": [15, 54, 103, 176], "224": [15, 54, 103, 176, 190, 213, 214, 247, 254, 257, 279], "225": [15, 54, 103, 118, 176], "vgg19": [15, 162], "maxpool2d": [15, 49, 96, 120, 158, 188], "align": [15, 136, 182, 183, 211, 220, 264, 273], "depth": [15, 45, 55, 59, 93, 96, 101, 107, 142, 159, 194, 199, 203, 239], "immedi": [15, 23, 42, 51, 55, 98, 101, 108, 153, 168, 179, 180, 187, 265], "white": [15, 19, 21, 78, 96, 98, 111, 188, 190, 281], "input_img": 15, "content_img": 15, "bfg": 15, "closur": [15, 194, 199], "reevalu": 15, "exce": [15, 78, 147, 195], "sphinx_gallery_thumbnail_numb": 15, "neural_style_tutori": [15, 22, 260], "paszk": [16, 153, 178], "dziedzic": 16, "shall": [16, 49, 55], "learnabl": [16, 49, 70, 119, 120, 241], "particularli": [16, 21, 56, 111, 169, 183, 239, 276, 281], "badfftfunct": 16, "literatur": [16, 178], "confusingli": 16, "correl": [16, 85, 98, 111, 159], "filter": [16, 26, 52, 86, 94, 103, 142, 183, 195, 238, 263], "flip": [16, 160], "wrt": [16, 148], "numpy_extensions_tutori": [16, 22, 260], "freeli": 17, "inspir": [17, 153, 160, 165, 182, 284], "v1": [17, 21, 162, 178, 179, 181, 224, 281], "openai": [17, 133, 136, 161, 177, 178, 179, 181, 254], "farama": [17, 177], "gymnasium": [17, 177, 178], "encount": [17, 52, 138, 146, 159, 192, 194, 195, 198, 239, 248, 254, 280], "undertaken": 17, "broader": 17, "wider": [17, 160], "algebra": [17, 42, 51, 96, 101, 105, 212], "acquaint": 17, "set_se": 17, "avenu": [17, 88], "backpropag": [17, 38, 39, 45, 49, 52, 78, 93, 104, 105, 106, 108, 110, 111, 119, 129, 142, 161, 195], "_set_se": 17, "torqu": 17, "upward": 17, "posit": [17, 94, 98, 105, 131, 136, 169, 177, 178, 182, 183, 190, 194, 198, 222, 257, 263, 281], "angular": 17, "stand": [17, 88, 93, 96, 111, 161, 198, 275], "equat": [17, 55, 178, 226, 230], "motion": 17, "veloc": [17, 178], "theta": [17, 78, 105, 177], "_t": [17, 161], "theta_t": 17, "dt": 17, "rad": 17, "sec": [17, 137], "gravit": 17, "mass": 17, "accord": [17, 18, 26, 33, 101, 102, 120, 159, 161, 173, 175, 178, 182, 190, 201, 248, 275], "theta_": [17, 161], "001": [17, 26, 96, 120, 151, 179, 188, 211, 213, 247], "deleg": [17, 136], "is_shar": 17, "new_th": 17, "th": [17, 54, 105, 110, 153, 161], "plu": [17, 105], "new_thdot": 17, "neg": [17, 38, 52, 94, 98, 104, 105, 111, 112, 159, 171, 175, 177, 211, 222], "inde": [17, 19, 103, 147, 160, 171, 177, 182, 192, 195, 224, 274, 275], "discourag": [17, 42, 51, 177], "possibli": [17, 55, 139, 177, 194, 249, 263], "omit": [17, 93, 118, 139, 159, 177, 198, 229, 236, 238], "agent": [17, 133, 136, 178, 179, 181, 184, 260], "albeit": 17, "param": [17, 54, 120, 137, 138, 139, 148, 151, 153, 155, 157, 170, 180, 181, 211, 236, 258, 272], "mandatori": [17, 157, 177], "domain": [17, 26, 35, 39, 52, 53, 78, 102, 116, 136, 177, 191, 239, 277], "accur": [17, 78, 91, 96, 118, 143, 158, 171, 181, 192, 252, 274, 279], "lazili": [17, 168], "costli": [17, 142, 239], "observation_spec": [17, 177], "compositespec": 17, "dictionari": [17, 39, 40, 52, 85, 110, 113, 120, 145, 168, 170, 177, 179, 180, 183, 190, 195, 228, 241, 259, 264], "action_spec": [17, 177], "reward_spec": [17, 177], "done_spec": 17, "input_spec": [17, 177], "state_spec": 17, "output_spec": 17, "neither": [17, 101, 257], "shortcut": 17, "tensorspec": 17, "irrelev": [17, 174], "incorpor": [17, 103, 112, 136, 154, 182], "pseudo": [17, 26], "_make_spec": 17, "pendulumenv": 17, "gen_param": 17, "batch_lock": 17, "homonym": [17, 171], "check_env_spec": [17, 177], "coupl": [17, 37, 52, 97, 101, 102, 110, 138, 148, 154, 155, 168, 171, 188, 194, 239], "rand_step": 17, "randomli": [17, 46, 54, 55, 75, 76, 91, 96, 98, 119, 145, 161, 178, 183, 195], "invers": [17, 96, 101, 264, 273], "thdot": 17, "effort": [17, 52, 54, 55, 116, 238], "summar": [17, 52, 54, 111, 123, 129, 138, 143, 187, 194], "_apply_transform": 17, "_call": 17, "inv": 17, "_inv_apply_transform": 17, "eventu": [17, 140, 147, 154], "out_keys_inv": 17, "unitari": 17, "sine": [17, 96, 119], "cosin": [17, 212], "raw": [17, 34, 46, 52, 71, 85, 96, 119, 199, 252, 263], "del_kei": 17, "mdp": 17, "gather": [17, 58, 94, 100, 137, 139, 141, 151, 153, 154, 158, 177, 199, 223, 261, 284, 285], "unexplor": 17, "abil": [17, 101, 111, 120, 141, 142, 153, 185, 188, 192, 198, 274], "fly": [17, 54, 104, 177, 198], "recreat": [17, 33, 45], "Of": [17, 103, 107, 111, 142, 153, 188, 220, 253, 273, 275], "clip": [17, 52, 78, 96, 177], "scratch": [17, 33, 45, 52, 56, 103, 104, 120, 123, 126, 136, 184, 240, 259, 260, 263], "advanc": [18, 21, 22, 45, 91, 106, 109, 112, 113, 115, 116, 130, 131, 132, 135, 136, 139, 151, 171, 190, 195, 198, 207, 213, 239, 257, 259, 260, 272, 275, 276, 279, 281, 282, 284, 285], "verif": [18, 180], "rapid": [18, 93, 275], "manufactur": 18, "bit": [18, 71, 96, 101, 118, 119, 154, 176, 177, 183, 195, 201, 214, 224, 265, 272], "imposs": [18, 96, 104, 168, 284], "simultan": [18, 33, 45, 59, 143, 153, 171, 176, 239], "began": 18, "lack": [18, 85, 94, 207, 272], "enhanc": [18, 94, 130, 131, 140, 144, 171, 185, 201, 239, 254, 257, 267, 276, 280], "rapidli": 18, "situat": [18, 93, 101, 139, 147, 148, 151, 153, 197, 265], "wrapper_custom_tensor_add": 18, "torch_fn": 18, "custom_cpu_fallback": 18, "operatorhandl": 18, "hint": [18, 23, 93, 103, 104, 108, 116, 142, 153, 179, 187, 194, 199, 211], "cpu_fallback": 18, "cppfunction": 18, "makefromboxedfunct": 18, "cumtomselufunct": 18, "selu": 18, "wrapper_autogradcumstom__selu": 18, "wrapper_autogradcustom__selu": 18, "autocastprivateuse1": 18, "autocast": [18, 201, 213, 247, 276, 281], "kernel_privateuseon": 18, "makefallthrough": 18, "backendmodul": 18, "_register_device_modul": 18, "backend_nam": 18, "get_amp_supported_dtyp": 18, "is_autocast_en": 18, "get_autocast_dtyp": 18, "set_autocast_dtyp": 18, "set_autocast_en": 18, "generatorimpl": 18, "builder": [18, 194], "register_generator_privateuse1": 18, "customgeneratorimpl": 18, "make_custom_gener": 18, "deviceindex": 18, "device_index": 18, "make_gener": 18, "make_cumstom_gener": 18, "event": [18, 85, 118, 137, 138, 179, 192, 229, 237, 252, 263], "deviceguard": 18, "deviceguardimplinterfac": 18, "c10_register_guard_impl": 18, "customguardimpl": 18, "backend_meta_": 18, "extrameta": 18, "backendmeta": 18, "custombackendmetadata": 18, "unordered_map": 18, "tensorbackendmetaregistri": 18, "for_seri": 18, "for_deseri": 18, "expand": [18, 93, 107, 113, 159, 166, 188, 205, 254, 277], "benchmark": [18, 21, 26, 35, 118, 136, 143, 155, 159, 160, 171, 176, 182, 192, 198, 211, 229, 235, 238, 239, 249, 254, 257, 259, 260, 265, 276, 277, 279, 281], "timer": [18, 55, 155, 183, 203, 211, 227, 235, 260, 281], "ascend": [18, 55, 86, 280], "npu": [18, 279, 280], "meet": [18, 53, 55, 214, 224], "usabl": [18, 120, 129, 154, 240, 263], "compli": 18, "habit": 18, "torch_npu": [18, 280], "exclus": [18, 175], "rename_privateuse1_backend": 18, "register_privateuse1_backend": 18, "unsupported_dtyp": 18, "quint8": 18, "generate_methods_for_privateuse1_backend": 18, "for_tensor": 18, "for_modul": 18, "for_storag": 18, "is_npu": 18, "perhap": [19, 78, 144, 175, 206], "prevent": [19, 38, 52, 58, 111, 118, 142, 145, 151, 159, 161, 171, 194, 195, 223, 224, 239, 244, 257, 280], "custom_op": [19, 116, 251], "land": [19, 135, 136, 146, 161, 198, 213, 258, 274], "everyth": [19, 45, 91, 101, 103, 105, 129, 134, 143, 144, 148, 154, 176, 177, 178, 179, 183, 188, 195, 264], "induc": [19, 175, 263], "bad": [19, 91, 142, 239, 265], "uncom": [19, 52, 54, 66, 76, 96, 100, 107, 111, 119, 173, 178], "cropped_img": 19, "img": [19, 94, 96, 136, 188, 190], "black": [19, 78, 85, 96, 98, 111, 135, 136, 141, 143, 179, 183], "aka": [19, 160, 162, 171, 198, 213, 253], "mutates_arg": 19, "led": 19, "messag": [19, 52, 93, 116, 146, 153, 190, 194, 201, 257], "past": [19, 52, 53, 102, 107, 194, 198], "exercis": [19, 46, 153, 223], "reader": [19, 108, 153, 198, 238], "region": [19, 94, 101, 130, 143, 158, 185, 190, 197, 220, 223, 227, 239, 246, 250, 252, 259, 260], "unus": [19, 159, 174], "forgot": [19, 263], "python_custom_op": [19, 22, 260], "pritam": 20, "damania": 20, "yi": [20, 194, 243, 253], "wang": [20, 26, 113, 115, 116, 159, 161, 263], "distributeddataparallel": [20, 58, 59, 63, 132, 137, 138, 139, 153, 174, 181, 223, 258], "paradigm": [20, 21, 63, 103, 119, 132, 180, 181, 281], "techniqu": [20, 21, 52, 63, 103, 104, 110, 112, 131, 136, 141, 147, 148, 149, 158, 166, 169, 171, 173, 175, 181, 190, 195, 198, 199, 239, 254, 257, 265, 272, 277, 281], "embed": [20, 52, 98, 104, 106, 108, 109, 120, 136, 138, 139, 141, 173, 180, 181, 183, 188, 198, 207, 260, 261], "dens": [20, 21, 195, 198, 272, 277, 281], "fc": [20, 45, 161], "replic": [20, 23, 59, 63, 136, 137, 141, 149, 151, 153, 180, 181, 195, 208], "trainer": [20, 26, 58, 143, 149, 179, 180, 181, 206, 281], "hybrid": [20, 87, 89, 208, 260], "pipedream": 20, "master": [20, 137, 153, 158, 162, 180, 181, 197, 213, 263], "embeddingbag": [20, 23], "drive": [20, 55, 93, 96, 98, 136, 161, 171, 272], "respond": [20, 94, 161, 180], "amongst": [20, 195, 273], "themselv": [20, 98, 195, 199, 274], "remotemodul": 20, "kick": [20, 33, 45, 168, 179, 180, 181], "remot": [20, 63, 132, 143, 179, 180, 181, 187, 220, 248, 257], "hybridmodel": 20, "allreduc": [20, 85, 137, 141, 151, 174, 239, 263], "firstli": [20, 116, 159, 178], "tcp": [20, 58, 140, 149, 150, 153], "init_method": [20, 151, 153, 261], "_run_train": [20, 181], "rpc_async": [20, 179, 181], "exit": [20, 157, 179, 180, 181, 203, 204, 211, 214, 250, 255, 257, 263], "port": [20, 140, 153, 180, 195, 220, 248, 263], "conflict": [20, 159, 194], "remote_emb_modul": 20, "rref": [20, 179, 180], "distributedoptim": [20, 180, 181], "remote_paramet": 20, "cannnot": 20, "crossentropyloss": [20, 38, 96, 105, 141, 173, 181, 188, 213, 247], "get_next_batch": [20, 179, 181], "jess": [21, 281], "cai": [21, 281], "seek": [21, 88, 94, 207, 281], "expens": [21, 42, 103, 118, 181, 194, 229, 238, 252, 265, 281], "grain": [21, 35, 93, 138, 153, 187, 192, 223, 224, 238, 281], "pattern": [21, 98, 100, 136, 141, 153, 159, 169, 180, 208, 213, 214, 243, 272, 274, 279, 281], "2n": [21, 281], "degrad": [21, 78, 243, 281], "sparsifi": [21, 131, 136, 175, 281], "answer": [21, 38, 94, 98, 105, 153, 158, 168, 183, 194, 195, 281], "tune": [21, 38, 85, 103, 111, 121, 131, 134, 136, 137, 143, 146, 176, 227, 235, 238, 257, 259, 260, 265, 276, 279, 281], "recov": [21, 137, 138, 151, 162, 281], "nearli": [21, 111, 188, 224, 281], "f1": [21, 192, 281], "86": [21, 159, 176, 181, 198, 211, 212, 224, 281], "92": [21, 212, 224, 281], "3x": [21, 66, 119, 201, 223, 239, 281], "speedup": [21, 46, 119, 136, 155, 159, 170, 198, 212, 239, 244, 253, 265, 276, 277, 281], "beginn": [21, 36, 41, 47, 48, 50, 67, 73, 77, 80, 81, 82, 83, 87, 89, 95, 97, 99, 106, 109, 114, 117, 119, 121, 132, 136, 200, 231, 232, 233, 234, 281], "to_sparse_semi_structur": [21, 281], "mask": [21, 94, 98, 118, 133, 136, 154, 169, 175, 182, 190, 197, 213, 254, 265, 272, 273, 275, 277, 281, 285], "motiv": [21, 78, 140, 159, 180, 266, 273, 274, 277, 281], "affect": [21, 94, 98, 102, 103, 148, 171, 173, 239, 281], "swap": [21, 54, 105, 141, 171, 177, 198, 236, 265, 277, 281], "compress": [21, 94, 175, 272, 275, 279, 281], "arrang": [21, 119, 281], "drawback": [21, 110, 194, 205, 206, 281], "2020": [21, 281], "amper": [21, 138, 165, 170, 223, 281], "cutlass": [21, 276, 281], "cusparselt": [21, 281], "milder": [21, 281], "account": [21, 53, 111, 154, 168, 171, 183, 188, 198, 253, 279, 281], "retrain": [21, 281], "sweet": [21, 281], "spot": [21, 96, 100, 101, 144, 281], "2x": [21, 88, 136, 148, 168, 212, 281], "theoret": [21, 55, 171, 244, 272, 281], "granular": [21, 138, 159, 195, 229, 239, 257, 281], "fp16": [21, 138, 162, 265, 276, 281], "resnet": [21, 45, 46, 94, 142, 187, 239, 281], "imagenet": [21, 46, 54, 94, 126, 176, 281], "76": [21, 162, 181, 198, 211, 224, 281], "resnext": [21, 281], "101_32x8d": [21, 281], "79": [21, 159, 211, 224, 229, 281], "xception": [21, 281], "ssd": [21, 239, 281], "rn50": [21, 281], "coco2017": [21, 281], "bbap": [21, 281], "24": [21, 43, 159, 176, 198, 212, 224, 281], "maskrcnn": [21, 281], "37": [21, 118, 176, 181, 211, 212, 229, 281], "fairseq": [21, 281], "en": [21, 157, 169, 183, 190, 281], "wmt14": [21, 281], "bleu": [21, 281], "squad": [21, 281], "91": [21, 96, 181, 212, 224, 281], "workflow": [21, 37, 85, 90, 91, 112, 136, 137, 195, 200, 275, 281], "perspect": [21, 107, 177, 257, 281], "subproblem": [21, 281], "bmatrix": [21, 108, 281], "handoff": [21, 281], "anticip": [21, 281], "area": [21, 94, 98, 133, 188, 197, 222, 265, 275, 281], "littl": [21, 55, 96, 103, 105, 111, 154, 177, 179, 181, 182, 185, 187, 281], "colab": [21, 23, 26, 37, 42, 51, 97, 100, 111, 136, 153, 154, 160, 177, 178, 190, 195], "pip": [21, 26, 53, 85, 94, 100, 113, 115, 161, 176, 178, 187, 190, 192, 197, 212, 214, 222, 224, 226, 229, 237, 240, 241, 242, 243, 244, 251, 257, 263, 265, 279], "panda": [21, 54, 78, 190], "hug": [21, 159], "face": [21, 46, 54, 55, 78, 159, 254], "token": [21, 52, 110, 138, 141, 145, 173, 182, 183, 198, 239, 254, 281], "span": [21, 104, 151, 187, 220, 281], "segment": [21, 136, 198, 265, 281], "text": [21, 35, 46, 55, 78, 88, 94, 104, 105, 107, 108, 110, 129, 136, 138, 144, 145, 153, 166, 171, 177, 178, 183, 187, 190, 198, 220, 222, 254, 281], "wikipedia": [21, 157, 169, 281], "articl": [21, 35, 281], "score": [21, 52, 94, 104, 108, 110, 118, 182, 183, 197, 198, 222, 254, 261, 281], "fair": [21, 103, 277, 281], "remov": [21, 52, 55, 56, 86, 111, 116, 118, 123, 139, 142, 151, 159, 168, 176, 182, 183, 190, 191, 192, 194, 195, 198, 224, 238, 265, 272, 273, 277, 281], "lowest": [21, 137, 175, 281], "l1": [21, 91, 175, 281], "ao": [21, 265, 279, 281], "satisfi": [21, 143, 239, 281], "anytim": [21, 281], "pruner": [21, 281], "update_mask": [21, 281], "shot": [21, 179, 254, 281], "wouldn": [21, 110, 137, 154, 281], "squash_mask": [21, 281], "left": [21, 33, 45, 49, 52, 55, 66, 88, 93, 100, 101, 105, 110, 119, 120, 153, 161, 165, 177, 178, 180, 182, 187, 188, 220, 281], "quickstart": [21, 33, 34, 35, 36, 37, 38, 40, 42, 43, 136, 281], "28x": [21, 281], "16": [21, 26, 91, 96, 98, 103, 120, 151, 154, 162, 176, 181, 188, 190, 194, 197, 205, 206, 211, 212, 224, 229, 253, 254, 265, 276, 281], "amen": [21, 281], "spent": [21, 85, 182, 187, 224, 229, 244, 281], "slower": [21, 59, 151, 171, 176, 178, 192, 197, 265, 266, 277, 281], "delta": [21, 159, 178, 224, 238, 281], "exact": [21, 103, 120, 147, 182, 194, 198, 203, 263, 281], "78": [21, 96, 211, 224, 281], "53": [21, 162, 211, 212, 229, 281], "44": [21, 159, 181, 260, 281], "09": [21, 52, 159, 181, 212, 281], "93": [21, 118, 181, 212, 224, 229, 281], "49": [21, 43, 162, 181, 211, 224, 281], "15": [21, 26, 47, 78, 96, 98, 126, 188, 190, 197, 211, 212, 224, 229, 235, 246, 260, 281], "54": [21, 43, 96, 162, 211, 224], "71x": 21, "35": [21, 141, 162, 211, 212], "74": [21, 181, 211, 212, 224, 229], "23x": 21, "72": [21, 96, 176, 211, 224, 229], "71": [21, 54, 159, 181, 211], "59": [21, 96, 176, 190, 211, 224, 229], "41": [21, 137, 176, 211, 224, 229], "22x": 21, "286": [21, 162, 190, 281], "65": [21, 43, 54, 96, 181, 197, 198, 211, 224], "247": [21, 181], "63": [21, 211, 229], "14x": 21, "46": [21, 159, 162, 176, 211], "02x": 21, "ye": [21, 53, 168, 251], "47": [21, 91, 162, 211, 212, 224, 229], "68": [21, 54, 159, 211, 224], "18x": [21, 281], "36": [21, 176, 211, 212], "13x": 21, "159": 21, "22": [21, 159, 162, 181, 211, 212, 224], "142": [21, 212], "23": [21, 96, 99, 159, 181, 211, 212, 224, 229, 238, 260], "12x": [21, 198], "sparsesemistructuredtensor": [21, 281], "semi_structured_spars": [21, 22, 260], "00": [22, 41, 43, 50, 67, 73, 77, 89, 96, 99, 109, 117, 118, 121, 159, 181, 184, 190, 212, 229, 235, 246, 260, 265, 267, 282], "012": [22, 50], "mem": [22, 41, 50, 67, 73, 77, 85, 89, 99, 109, 117, 118, 121, 184, 229, 235, 246, 260, 282], "mb": [22, 41, 50, 67, 73, 77, 89, 99, 109, 117, 118, 121, 137, 184, 229, 235, 246, 258, 260, 282], "torchrl": [22, 133, 136, 154, 161, 184, 260], "ddpg": [22, 133, 136, 260], "pendulum": [22, 133, 136, 177, 260], "scipi": [22, 46, 148, 192, 260], "acceler": [22, 34, 39, 42, 51, 52, 53, 60, 63, 65, 78, 103, 115, 119, 126, 136, 144, 151, 153, 162, 171, 184, 197, 199, 201, 204, 212, 213, 214, 239, 260, 277, 282, 285], "bert": [22, 98, 136, 137, 260, 279, 285], "semi": [22, 133, 136, 198, 260, 285], "sparsiti": [22, 110, 136, 175, 260, 272, 274, 282, 285], "000": [22, 35, 41, 67, 73, 99, 117, 121, 143, 161, 162, 184, 188, 190, 235, 260, 282], "supervis": [22, 105, 133, 136, 185, 190, 260], "usb": [22, 133, 136, 176, 260], "usb_semisup_learn": [22, 26, 260], "embeddingplann": [23, 136], "conda": [23, 85, 94, 100, 153, 159, 222, 237, 238, 257, 263, 265, 285], "cudatoolkit": 23, "sudo": [23, 187], "rm": 23, "miniconda3": [23, 238], "py37_4": 23, "x86_64": 23, "sh": [23, 151, 220], "anaconda": [23, 85, 94, 153, 237], "miniconda": 23, "chmod": 23, "fbgemm": [23, 195], "ipython": [23, 118], "cp": [23, 261], "restart": [23, 94, 100, 150, 178], "newli": [23, 126, 153], "python37": 23, "python3": [23, 187, 212, 238, 254, 263], "dynload": 23, "enviro": 23, "spmd": [23, 141, 206], "mimic": [23, 103, 243, 265, 272], "launcher": 23, "embeddingbagcollect": 23, "bag": [23, 37, 188, 195], "ebc": [23, 195], "row": [23, 54, 78, 93, 98, 101, 105, 107, 108, 110, 111, 139, 141, 143, 144, 160, 179, 195, 220, 273, 275, 284], "4096": [23, 195, 212, 264], "parameterconstraint": 23, "placement": [23, 139, 257, 279], "evenli": [23, 93], "column": [23, 93, 101, 105, 107, 118, 141, 144, 159, 160, 165, 187, 190, 195, 229, 273, 274, 275], "intra": [23, 138, 141, 208], "host": [23, 37, 57, 85, 97, 104, 137, 138, 141, 151, 153, 171, 173, 180, 181, 187, 208, 229, 239, 248], "interconnect": [23, 226], "nvlink": [23, 141], "data_parallel": 23, "planner": 23, "embedding_typ": 23, "embeddingcomputekernel": 23, "shardingtyp": 23, "large_table_cnt": 23, "small_table_cnt": 23, "large_t": 23, "embeddingbagconfig": 23, "large_table_": 23, "embedding_dim": [23, 98], "num_embed": 23, "feature_nam": 23, "large_table_feature_": 23, "poolingtyp": 23, "small_tabl": 23, "small_table_": 23, "small_table_feature_": 23, "gen_constraint": 23, "sharding_typ": 23, "table_wis": 23, "large_table_constraint": 23, "small_table_constraint": 23, "mimick": 23, "single_rank_execut": 23, "embeddingbagcollectionshard": [23, 195], "model_parallel": 23, "embeddingshardingplann": 23, "topologi": [23, 195, 206, 208, 213, 220], "moduleshard": 23, "shardingenv": 23, "init_distributed_single_host": 23, "pyre": 23, "fixm": 23, "set_devic": [23, 56, 58, 137, 138, 205, 206, 208, 211, 261, 266], "compute_devic": 23, "pg": [23, 263], "sharder": [23, 195], "shardingplan": 23, "collective_plan": 23, "sharded_model": 23, "from_process_group": 23, "spmd_sharing_simul": 23, "get_context": [23, 153], "exitcod": 23, "factor": [23, 98, 126, 171, 178, 179, 192, 195, 205, 265], "medium": [23, 140, 197, 239], "large_table_0": 23, "parametershard": 23, "compute_kernel": 23, "batched_fus": 23, "sharding_spec": 23, "enumerableshardingspec": 23, "shardmetadata": 23, "shard_offset": 23, "shard_siz": 23, "large_table_1": 23, "small_table_0": 23, "small_table_1": 23, "finer": [23, 35, 229], "halv": [23, 118], "row_wis": 23, "2048": [23, 103], "512": [23, 138, 173, 194, 201, 213, 224, 229, 281], "imbal": [23, 239], "vertic": 23, "column_wis": 23, "32": [23, 26, 43, 58, 91, 96, 98, 101, 103, 108, 118, 137, 165, 170, 173, 176, 180, 181, 187, 190, 194, 211, 212, 214, 224, 261, 276], "unfortu": 23, "batched_dens": 23, "hao": 26, "chen": [26, 194], "unifi": [26, 136, 147, 207, 222, 254], "ssl": 26, "modular": [26, 35, 120, 192, 241], "fixmatch": 26, "defixmatch": 26, "vision": [26, 39, 46, 54, 94, 98, 121, 133, 136, 162, 168, 222, 254, 260], "speech": [26, 78, 98, 104, 106, 110, 136, 145, 239], "light": [26, 55, 96, 100, 101, 147, 222], "vit": [26, 254], "famou": [26, 78], "baselin": [26, 94, 103, 190, 214, 224, 238, 265, 281], "strong": [26, 104, 194, 254, 275], "unlabel": [26, 101], "confid": [26, 55, 94, 96, 102, 105, 143, 177, 178, 188, 223], "threshold": [26, 52, 85, 143, 177, 181, 190, 212, 239], "absorb": 26, "gaussian": [26, 55, 143, 177], "overcom": [26, 112], "quantiti": [26, 103, 131, 136, 141, 160, 165, 170], "qualiti": [26, 161, 183], "trade": [26, 143, 168, 276], "afford": 26, "cv": [26, 277], "nlp": [26, 96, 98, 105, 108, 109, 110, 123, 136, 184, 223, 239, 260, 277], "audio": [26, 35, 46, 136, 156, 186, 189], "semilearn": 26, "get_dataset": 26, "get_data_load": 26, "weak": 26, "get_net_build": 26, "get_algorithm": 26, "get_config": 26, "hyper": [26, 182, 257], "vit_tiny_patch2_32": 26, "use_pretrain": 26, "pretrain_path": 26, "microsoft": [26, 37, 115, 116, 187, 267], "vit_tiny_patch2_32_mlp_im_1k_32": 26, "pth": [26, 120, 190, 206, 213, 254, 265], "num_train_it": 26, "num_eval_it": 26, "num_log_it": 26, "adamw": [26, 138, 178], "layer_decai": 26, "eval_batch_s": 26, "cifar10": [26, 60, 91, 96, 187, 213, 242, 247], "num_label": 26, "num_class": [26, 179, 188, 190, 197], "img_siz": 26, "crop_ratio": 26, "875": 26, "data_dir": [26, 91, 138], "ulb_samples_per_class": 26, "hard_label": 26, "ema_p": 26, "999": [26, 188, 211], "ent_loss_ratio": 26, "uratio": 26, "ulb_loss_ratio": 26, "dataset_dict": 26, "include_lb_to_ulb": 26, "train_lb_load": 26, "train_lb": 26, "train_ulb_load": 26, "train_ulb": 26, "eval_load": 26, "from_nam": 26, "tb_log": 26, "logger": [26, 140, 190], "valid": [26, 38, 52, 91, 96, 98, 100, 102, 103, 115, 118, 120, 126, 129, 137, 138, 143, 144, 147, 148, 171, 174, 190, 191, 194, 197, 224, 249, 252, 273, 274, 281], "87": [26, 118, 181, 212, 224, 276], "lb_imb_ratio": 26, "ulb_imb_ratio": 26, "1500": [26, 138, 224], "ulb_num_label": 26, "3000": [26, 188, 194, 254], "kihyuk": 26, "sohn": 26, "et": [26, 52, 55, 78, 153, 175, 183], "al": [26, 52, 55, 78, 175, 183, 211], "yidong": 26, "audio_data_augmentation_tutori": [27, 29], "html": [27, 28, 29, 30, 31, 36, 47, 48, 52, 60, 65, 78, 79, 80, 81, 82, 83, 87, 95, 103, 106, 114, 119, 123, 126, 132, 151, 156, 158, 166, 186, 189, 190, 193, 194, 195, 200, 223, 227, 228, 231, 232, 233, 234, 268, 271, 273, 275, 283], "audio_datasets_tutori": 28, "audio_feature_extractions_tutori": 30, "audio_io_tutori": 31, "dataload": [33, 34, 36, 37, 38, 39, 40, 42, 43, 46, 47, 55, 58, 78, 91, 103, 121, 137, 138, 144, 153, 171, 173, 180, 187, 188, 190, 213, 215, 227, 239, 247, 260, 279], "frac": [33, 45, 66, 88, 93, 104, 105, 107, 110, 119, 129, 142, 148, 153, 177, 178, 198], "partial": [33, 45, 91, 93, 107, 120, 129, 137, 138, 139, 141, 142, 146, 154, 160, 213, 240, 259, 261], "leaf": [33, 45, 93, 121, 136, 192, 260], "retain_graph": [33, 146], "surround": [33, 171], "mark": [33, 52, 141, 146, 162, 178, 179, 194, 220, 274], "frozen": [33, 45, 139, 161, 276], "acycl": [33, 45, 129], "dag": [33, 129], "chain": [33, 45, 93, 101, 105, 106, 129, 139, 147, 159, 179, 274], "accumul": [33, 45, 49, 52, 55, 93, 96, 107, 129, 148, 161, 168, 178, 179, 180, 181, 223, 242], "vec": [33, 45, 93, 276], "langl": 33, "x_1": [33, 107, 165], "x_n": [33, 55], "rangl": 33, "y_1": [33, 107], "y_m": 33, "ccc": [33, 45, 93], "y_": [33, 45, 93, 104], "x_": [33, 45, 93], "cdot": [33, 45, 55, 93, 110, 129, 142], "vdot": [33, 45, 93], "ddot": [33, 45, 93], "v_1": 33, "v_m": 33, "life": [33, 103, 144, 145, 205], "autogradqs_tutori": [33, 36, 41, 80, 260], "compris": [34, 35, 55, 120], "fashionmnist": [34, 35, 37, 39, 43, 188], "mtia": [34, 39, 42, 65, 78, 101, 119, 126, 151, 197], "neuralnetwork": 34, "dimension": [34, 42, 49, 51, 52, 55, 63, 75, 76, 93, 98, 100, 101, 103, 106, 107, 108, 110, 119, 141, 146, 162, 175, 182, 183, 188, 190, 195, 201, 208, 275], "minibatch": [34, 35, 100, 111, 144, 155, 170, 173], "28x28": [34, 111, 188, 226], "784": [34, 100, 111, 155, 188], "nonlinear": 34, "wide": [34, 63, 93, 98, 111, 140, 141, 144, 145, 153, 174, 183, 222, 239, 265], "phenomena": 34, "seq_modul": 34, "logit": [34, 38, 103, 212], "infti": [34, 178], "parameter": [34, 281], "preview": 34, "buildmodel_tutori": [34, 36, 41, 260], "messi": 35, "readabl": [35, 54, 94, 101, 104, 145, 187, 224, 238, 263], "primit": [35, 39, 119, 136, 141, 160, 171, 195, 198, 201, 263], "pre": [35, 104, 133, 136, 138, 141, 153, 176, 190, 195, 197, 198, 206, 214, 249, 257, 265, 276], "fashion": [35, 52, 100, 102, 115, 138, 141, 143, 180, 185, 188, 190, 192, 195, 213], "zalando": 35, "60": [35, 113, 138, 144, 145, 162, 176, 181, 183, 188, 194, 211, 212, 229], "grayscal": [35, 154, 161], "internet": [35, 176], "target_transform": [35, 39, 43], "training_data": [35, 108], "img_dir": 35, "csv": [35, 52, 54, 138], "annotations_fil": 35, "tshirt1": 35, "tshirt2": 35, "ankleboot999": 35, "decode_imag": 35, "img_label": 35, "reshuffl": 35, "overfit": [35, 96, 111, 120, 145], "train_featur": 35, "train_label": 35, "shuffl": [35, 39, 54, 58, 96, 102, 111, 137, 138, 153, 176, 180, 187, 188, 261], "data_tutori": [35, 36, 41, 260], "intro": [36, 37, 41, 58, 105, 106, 132, 154, 188, 204, 211, 260], "quickstart_tutori": [36, 39, 41, 260], "tensorqs_tutori": [36, 41, 42, 83, 260], "tensor_tutori": [36, 48, 50, 51, 60, 260], "transforms_tutori": [36, 41, 43, 260], "autograd_tutori": [36, 45, 48, 50, 60, 260], "optimization_tutori": [36, 38, 41, 260], "saveloadrun_tutori": [36, 40, 41, 260], "sphx_glr_beginner_basics_autogradqs_tutori": [36, 41, 260], "sphx_glr_beginner_basics_buildmodel_tutori": [36, 41, 260], "sphx_glr_beginner_basics_intro": [36, 41, 260], "sphx_glr_beginner_basics_saveloadrun_tutori": [36, 41, 260], "sphx_glr_beginner_basics_optimization_tutori": [36, 41, 260], "sphx_glr_beginner_basics_data_tutori": [36, 41, 260], "sphx_glr_beginner_basics_quickstart_tutori": [36, 41, 260], "sphx_glr_beginner_basics_tensorqs_tutori": [36, 41, 260], "sphx_glr_beginner_basics_transforms_tutori": [36, 41, 260], "suraj": [37, 56, 57, 58, 59, 118, 149, 150, 161], "subramanian": [37, 56, 57, 58, 59, 118, 149, 150, 161], "seth": 37, "juarez": 37, "cassi": 37, "breviu": 37, "dmitri": 37, "soshnikov": 37, "ari": 37, "bornstein": 37, "ml": [37, 78, 101, 103, 132, 136, 143, 195, 211, 212], "belong": [37, 144, 195], "shirt": [37, 188], "trouser": [37, 188], "pullov": [37, 188], "dress": [37, 188], "coat": [37, 188], "sandal": [37, 188], "sneaker": [37, 188], "ankl": [37, 188], "boot": [37, 176, 188], "cloud": [37, 57, 97, 111, 113, 257], "open": [37, 39, 53, 91, 94, 96, 97, 100, 102, 110, 113, 115, 136, 138, 153, 155, 158, 168, 170, 183, 187, 190, 198, 213, 214, 220, 267], "favorit": [37, 97, 153, 158], "id": [37, 85, 97, 146, 151, 169, 179, 180, 181, 190, 194, 195, 205, 206, 211, 257, 281], "walkthrough": [38, 45, 51, 85, 118], "video": [38, 45, 46, 56, 58, 59, 93, 94, 96, 98, 100, 101, 102, 123, 131, 132, 133, 134, 136, 149, 150, 187, 200], "3blue1brown": [38, 45], "unpredict": [38, 93, 151], "jump": [38, 78, 108, 112, 113, 115, 116, 161, 249], "untrain": 38, "degre": [38, 66, 98, 119, 143, 183, 187, 261, 275], "dissimilar": [38, 101, 110], "regress": [38, 111, 185, 224, 237], "nllloss": [38, 105], "classif": [38, 46, 55, 78, 91, 94, 96, 101, 102, 103, 105, 126, 133, 136, 137, 145, 176, 185, 197, 198, 242], "logsoftmax": 38, "deposit": [38, 45], "train_loop": 38, "test_loop": 38, "warmstart": [38, 227, 235, 259, 260], "torchtext": [39, 53, 96, 102, 136], "torchaudio": [39, 53, 96, 102, 133, 136, 138, 176, 187, 265], "cifar": [39, 46, 96, 188], "coco": [39, 197], "conduct": [39, 94, 159, 174, 265], "decreas": [39, 52, 78, 86, 103, 111, 141, 144, 195, 275], "state_dict": [40, 52, 56, 58, 91, 137, 138, 139, 151, 175, 192, 205, 206, 213, 223, 226, 227, 235, 236, 240, 243, 259, 260, 264], "load_state_dict": [40, 56, 91, 102, 120, 139, 151, 190, 205, 206, 223, 227, 235, 240, 260], "weights_onli": [40, 120, 139, 151, 190], "unpickl": [40, 120, 263], "inferenc": 40, "fail": [40, 93, 101, 112, 120, 129, 159, 171, 176, 178, 182, 192, 194, 223, 254, 263, 280, 285], "inconsist": [40, 120, 159], "legaci": [40, 113, 140], "checkpoint": [40, 52, 91, 139, 149, 168, 173, 213, 223, 227, 235, 241, 259, 260, 264, 265], "tip": [40, 55, 97, 110, 188, 227, 235, 259, 260], "04": [41, 187, 212, 224, 260, 267], "504": 41, "489": [41, 43, 260], "ndarrai": [42, 43, 51, 101, 190], "elimin": [42, 118, 147, 155, 159, 160, 176, 194, 198, 277, 280], "datatyp": [42, 51, 76, 96, 101, 118, 213, 223], "overridden": [42, 51, 154, 228], "1200": [42, 224], "arithmet": [42, 96, 101, 171], "manipul": [42, 43, 96, 100, 119, 129, 139, 158, 168, 199], "slice": [42, 51, 108, 111, 175, 198, 208, 213, 238, 277], "breez": [42, 51], "cat": [42, 46, 51, 94, 96, 104, 107, 159, 181, 183, 188, 197, 222], "subtli": [42, 51], "y1": [42, 197, 237], "y2": 42, "y3": 42, "wise": [42, 51, 78, 96, 101, 105, 141, 153, 159, 162, 165, 194, 195, 239, 253], "z1": [42, 159], "z2": 42, "z3": 42, "aggreg": [42, 45, 96, 118, 161, 190, 229, 273], "numer": [42, 52, 75, 76, 101, 103, 104, 113, 119, 139, 143, 223, 239, 261, 281], "operand": [42, 93, 194], "denot": [42, 105, 108, 195, 272, 273, 277], "suffix": [42, 51, 85, 129, 159], "t_": [42, 51], "problemat": [42, 51, 159, 169, 239], "accept": [43, 70, 91, 93, 103, 108, 119, 141, 143, 157, 160, 165, 170, 171, 177, 180, 187, 190, 212, 229, 239, 284], "commonli": [43, 52, 72, 91, 98, 103, 119, 173, 176, 183, 187, 230, 239, 244], "hot": [43, 52, 78, 98, 110, 144, 145, 154, 183], "scatter_": [43, 179], "26": [43, 159, 161, 162, 176, 181, 211, 212], "4m": 43, "5k": 43, "12": [43, 96, 107, 118, 121, 137, 138, 159, 179, 188, 211, 212, 224, 265, 281], "363kb": 43, "197k": 43, "575kb": 43, "786k": 43, "80mb": 43, "11m": 43, "03": [43, 96, 180, 181, 190, 212, 238, 261], "16mb": 43, "49m": [43, 182], "6mb": [43, 96], "2m": [43, 96], "4mb": [43, 96], "77": [43, 96, 159, 211], "9mb": [43, 96], "99": [43, 70, 96, 119, 181], "2mb": 43, "18": [43, 96, 116, 118, 144, 159, 176, 181, 211, 212, 224, 253, 265], "29": [43, 176, 181, 224], "327kb": 43, "42m": 43, "360kb": 43, "229k": 43, "06": [43, 212], "677kb": 43, "21": [43, 107, 118, 176, 211, 212, 224, 229, 238], "918k": 43, "09mb": 43, "83": [43, 54, 212, 238], "67m": 43, "23mb": [43, 96], "06mb": 43, "15k": 43, "0mb": [43, 96, 258], "floattensor": [43, 101], "intens": [43, 88, 159, 171, 201, 257], "prop": 45, "proportion": [45, 168], "travers": [45, 181], "resnet18": [45, 162, 176, 187, 190, 214, 253, 279], "height": [45, 49, 98, 101, 190, 191, 197, 220, 254], "width": [45, 46, 49, 98, 101, 143, 165, 190, 191, 197, 254], "momentum": [45, 46, 68, 72, 91, 96, 102, 111, 119, 120, 147, 153, 179, 188, 195, 213, 241, 242, 247], "3a": [45, 176], "9a": 45, "dq": [45, 214], "bf": 45, "external_grad": 45, "blue": [45, 138, 141, 220], "freez": [45, 126, 214], "finetun": [45, 133, 136, 142, 168, 184, 260], "unfrozen": 45, "exclusionari": 45, "revers": [45, 52, 93, 139, 157, 165, 169, 176, 183, 195], "autodiff": [45, 131, 136, 160], "pillow": [46, 96], "opencv": 46, "librosa": 46, "cython": 46, "nltk": 46, "spaci": 46, "viz": [46, 94], "huge": [46, 105, 110, 119, 141, 151, 154], "airplan": [46, 96, 103], "automobil": [46, 96, 103], "bird": [46, 96], "deer": [46, 96], "dog": [46, 96, 103, 197, 222], "frog": [46, 96], "hors": [46, 96], "truck": [46, 96, 103], "3x32x32": 46, "32x32": [46, 49, 96, 103, 113, 188], "extrem": [46, 110, 162, 195, 199], "pilimag": 46, "brokenpipeerror": 46, "fun": [46, 52, 112, 113, 115, 116, 177], "entropi": [46, 55, 96, 98, 102, 141, 242], "learnt": 46, "truth": [46, 78, 113, 197, 285], "okai": 46, "wasn": [46, 104, 107, 194], "energi": [46, 52], "chanc": [46, 52, 103, 161], "hmmm": 46, "massiv": [46, 107, 110, 195, 213], "plai": [46, 52, 55, 103, 105, 133, 136, 177, 184, 257, 260], "art": [46, 55, 94, 96, 98, 175, 222], "recurr": [46, 52, 104, 108, 133, 136, 144, 145, 166, 169, 183, 184, 199, 260], "lstm": [46, 52, 98, 106, 109, 144, 145, 181, 260], "chat": [46, 52, 183], "cifar10_tutori": [46, 48, 50, 60, 260], "sung": 47, "kim": 47, "jenni": 47, "kang": 47, "mytensor": 47, "my_tensor": [47, 120], "rewrit": [47, 146, 169, 194, 284], "parallelli": 47, "getitem": 47, "demo": [47, 136, 174, 187, 212], "cnn": [47, 103, 133, 136, 165, 169, 170, 185, 190, 197, 213], "rnn": [47, 52, 98, 136, 154, 166, 169, 180, 183, 184, 239, 260], "capsul": 47, "monitor": [47, 111, 153], "output_s": [47, 263], "former_torchi": 47, "parallelism_tutori": 47, "data_parallel_tutori": [47, 48, 50, 82, 260], "neural_networks_tutori": [48, 49, 50, 60, 260], "gentl": [48, 50, 59, 60, 129, 132, 199, 260], "glimps": 49, "convnet": [49, 94, 154, 161, 180], "learning_r": [49, 103], "lenet": [49, 78, 96, 100, 102, 175], "mini": [49, 52, 55, 96, 100, 108, 111, 170, 176, 188], "4d": [49, 162], "nsampl": 49, "nchannel": 49, "least": [49, 78, 101, 120, 129, 143, 145, 151, 161, 171, 176, 183, 194, 206, 224, 258], "estim": [49, 54, 55, 98, 143, 177, 178, 183, 195, 224, 244, 265], "clear": [49, 54, 78, 93, 104, 105, 110, 142, 146, 159, 171, 181, 190, 191, 211, 224, 266, 274], "sub_": 49, "nesterov": [49, 120], "criterion": [49, 70, 96, 119, 181, 183, 188, 213, 237, 247], "blitz": [50, 82, 113, 144, 145, 183, 188, 260], "matthew": [52, 90, 120], "inkawhich": [52, 55, 78, 88, 90, 120], "movi": [52, 53, 94], "cornel": [52, 53], "dialog": [52, 53], "corpu": [52, 53], "artifici": [52, 103, 226], "intellig": 52, "servic": [52, 176, 213, 244, 257], "onlin": [52, 154, 161, 177, 180], "helpdesk": 52, "bot": 52, "predefin": [52, 103, 111, 154, 214, 239], "restrict": [52, 88, 153, 187, 192, 194, 284], "compani": 52, "IT": 52, "teach": [52, 55, 103, 183], "human": [52, 78, 94, 145, 161, 183, 190, 263], "recent": [52, 108, 118, 140, 141, 153, 159, 165, 169, 178, 187, 254, 257], "boom": 52, "hello": [52, 105, 168], "am": [52, 107, 145, 183], "hospit": 52, "lawyer": 52, "friend": [52, 168], "arrest": 52, "kid": 52, "sorri": 52, "san": 52, "francisco": [52, 111], "goodby": 52, "luong": [52, 183], "jointli": [52, 183], "acknowledg": [52, 153], "borrow": [52, 181], "yuan": 52, "kuei": 52, "wu": [52, 140, 261, 266, 276], "ywk991112": 52, "sean": [52, 144, 145, 183], "robertson": [52, 144, 145, 183], "translat": [52, 113, 115, 116, 136, 144, 145, 165, 166, 184, 239, 254, 260, 274], "spro": 52, "floydhub": 52, "textutil": 52, "__": [52, 65, 78, 103, 119, 126, 151, 190, 195], "reformat": 52, "rich": [52, 220], "charact": [52, 110, 136, 149, 166, 177, 183, 184, 260], "220": [52, 181], "579": [52, 162], "exchang": [52, 113, 115, 138, 153, 183, 187], "292": [52, 91], "035": 52, "617": 52, "304": 52, "713": [52, 96], "utter": [52, 53], "divers": 52, "great": [52, 113, 119, 120, 224, 241, 274], "variat": [52, 102, 111, 148, 198, 224, 238, 272], "formal": [52, 206, 272], "sentiment": 52, "hope": [52, 161, 168, 192, 198, 212], "datafil": 52, "nice": [52, 111, 168, 170, 194, 195, 198], "tab": [52, 100, 102, 183, 188, 220], "sentenc": [52, 98, 104, 105, 108, 110, 145, 153, 183, 198, 277], "pars": [52, 54, 110, 137, 138, 143, 224, 263], "jsonl": [52, 53], "loadlinesandconvers": 52, "lineid": 52, "characterid": 52, "conversationid": 52, "movieid": 52, "extractsentencepair": 52, "formatted_movie_lin": 52, "unescap": 52, "delimit": 52, "busi": [52, 145, 257], "vocabulari": [52, 96, 98, 110, 141, 144, 239, 277], "implicit": [52, 93, 139, 194, 220, 239], "discret": [52, 213], "voc": 52, "addword": 52, "addsent": 52, "infrequ": 52, "unicod": [52, 144, 145, 183], "ascii": [52, 110, 144, 145, 183], "unicodetoascii": 52, "letter": [52, 144, 145, 183], "lowercas": [52, 111, 183], "punctuat": [52, 183], "normalizestr": 52, "aid": [52, 120, 195, 228], "max_length": [52, 281], "filterpair": 52, "stackoverflow": [52, 144, 145, 183, 224], "518232": [52, 144, 145, 183], "2809427": [52, 144, 145, 183], "tactic": 52, "benefici": [52, 98, 132, 178, 239, 242, 243, 257, 276, 280], "soften": 52, "difficulti": [52, 177, 199], "approxim": [52, 94, 138, 147, 158, 161, 165, 175, 178, 212, 226, 239], "min_count": 52, "massag": 52, "ultim": [52, 55, 88, 201, 272], "accommod": 52, "shorter": [52, 54, 111, 183, 187, 272], "eos_token": 52, "english": [52, 105, 108, 144, 166, 183], "indexesfromsent": 52, "zeropad": 52, "inputvar": 52, "outputvar": 52, "pad_token": 52, "batch2traindata": 52, "bunch": [52, 144, 145, 220, 253], "aforement": [52, 85, 103, 198, 214, 249], "brain": 52, "sutskev": 52, "discov": [52, 116, 153, 180, 198, 280], "accomplish": [52, 55, 144, 153, 165, 208, 224, 238], "hidden": [52, 94, 98, 103, 104, 108, 111, 141, 143, 144, 145, 154, 181, 182, 183, 191, 222], "jeddy92": 52, "io": [52, 54, 100, 136, 179, 182, 190], "ts_seq2seq_intro": 52, "gate": [52, 98, 198, 236], "invent": [52, 55, 177], "cho": 52, "2014": [52, 55], "bidirect": [52, 154], "variant": [52, 96, 98, 100, 102, 141, 147, 176, 182, 195, 198, 211, 261], "gru": [52, 98, 144, 145, 183], "colah": 52, "2015": [52, 103], "fp": [52, 91, 134, 165], "hidden_s": 52, "pack": [52, 159, 177, 179, 181, 276], "unpack": 52, "pack_padded_sequ": 52, "pad_packed_sequ": 52, "input_seq": 52, "input_length": [52, 138], "n_layer": [52, 173], "num_direct": 52, "sole": [52, 187], "combat": [52, 110], "bahdanau": [52, 183], "groundwork": 52, "knowledg": [52, 55, 78, 105, 106, 121, 123, 129, 131, 136, 159, 161, 199, 260], "h_t": [52, 108], "overal": [52, 98, 137, 138, 153, 171, 178, 190, 194, 195, 212, 224, 239], "attn": [52, 183], "softmax": [52, 98, 103, 108, 110, 111, 144, 176, 179, 181, 188, 198, 212, 277], "submodul": [52, 88, 98, 112, 139, 169, 182, 280], "unidirect": 52, "input_step": 52, "last_hidden": 52, "encoder_output": 52, "num_word": 52, "masknllloss": 52, "clever": [52, 105], "teacher": [52, 103, 131, 136, 183], "teacher_forcing_ratio": [52, 183], "instabl": [52, 183], "craft": [52, 78, 110, 145], "explod": [52, 98, 199], "essenc": [52, 107], "exponenti": [52, 93, 101, 105, 107, 169, 178, 265], "nan": [52, 211, 273], "overshoot": 52, "steep": 52, "cliff": 52, "goodfellow": [52, 55, 78], "2016": 52, "www": [52, 183, 197], "deeplearningbook": 52, "sos_token": 52, "realiti": [52, 55, 78, 107, 111, 182, 238], "tie": 52, "trainit": [52, 183], "n_iter": 52, "explanatori": 52, "lift": [52, 243, 284], "tarbal": 52, "NOT": [52, 88, 120, 146, 148, 149, 151, 168], "decoder_output": 52, "greedysearchdecod": 52, "searcher": 52, "evaluateinput": 52, "press": [52, 55], "gracefulli": [52, 56, 180, 206], "prompt": [52, 53, 254, 265], "regardless": [52, 101, 102, 160, 171, 180, 191], "attn_model": 52, "concat": [52, 107], "loadfilenam": 52, "save_dir": [52, 190], "model_nam": [52, 138, 213, 214, 279, 281], "corpus_nam": [52, 53], "encoder_n_lay": 52, "decoder_n_lay": 52, "_checkpoint": [52, 138], "tar": [52, 120], "checkpoint_it": 52, "folk": 52, "congratul": [52, 116, 142, 144, 195, 226, 240, 241, 242], "fundament": [52, 95, 98, 107, 110, 119, 136, 161, 171, 194, 195, 200, 206, 238, 273], "tailor": [52, 153, 171, 195, 257], "cool": [52, 55, 168, 170, 284], "003": [52, 55, 78, 88, 89, 99, 100, 102, 103, 105, 109, 121, 126, 145, 157, 159, 171, 182, 184, 192, 194, 198, 260, 265, 282], "chatbot_tutori": [52, 121, 260], "wen": [53, 192, 194, 252], "uninstal": 53, "reinstal": 53, "torchdata": 53, "chatbot": [53, 121, 260], "browser": [53, 100, 102, 113, 187, 207], "click": [53, 100, 111, 113, 187, 188, 195, 220], "subfold": 53, "visit": [53, 129, 199, 265], "in_": 53, "_colab": 53, "_name": 53, "mount": [53, 263], "gdrive": 53, "my": [53, 104, 110, 198], "upload": [53, 207], "cell": [53, 93, 94, 96, 98, 101, 102, 118, 171, 178, 182, 190, 195, 239, 265], "button": [53, 55, 113, 187, 220], "rerun": [53, 129, 146, 168], "evolv": [53, 159, 165], "drop": [53, 98, 100, 113, 149, 168, 181, 212, 265], "t4": 53, "sasank": [54, 126], "chilamkurthi": [54, 126], "preprocess": [54, 103, 111, 136, 144, 183, 190], "scikit": 54, "ignor": [54, 103, 108, 110, 120, 174, 188, 190, 194, 197, 223, 229, 240, 252, 273, 274, 277], "warn": [54, 129, 159, 190, 224, 229, 238, 272, 273, 274, 275], "facial": 54, "pose": [54, 207, 208], "landmark": 54, "dlib": 54, "tag": [54, 98, 106, 110, 194, 228, 237, 264], "image_nam": 54, "part_0_x": 54, "part_0_i": 54, "part_1_x": 54, "part_1_i": 54, "part_2_x": 54, "part_67_x": 54, "part_67_i": 54, "0805personali01": 54, "98": [54, 159, 181, 212], "84": [54, 96, 118, 120, 161, 188], "134": 54, "1084239450_e76e00b7e7": 54, "70": [54, 155, 162, 181, 211, 224, 281], "236": 54, "257": [54, 224], "312": [54, 162, 254], "person": [54, 195, 197], "img_nam": 54, "__len__": [54, 111, 144, 153, 197], "__getitem__": [54, 111, 144, 153, 197], "randomcrop": 54, "crop": [54, 96, 143, 185, 197], "totensor": [54, 96, 137, 153, 176, 180, 188, 190, 213, 247], "ax": [54, 105, 108, 134, 136, 183, 184, 188, 260], "tsfm": 54, "transformed_sampl": 54, "np": [54, 96, 104, 176, 181, 188, 190, 238, 254, 273, 281], "safer": [54, 224], "stick": [54, 153, 162], "randint": [54, 55, 139, 155, 173, 213], "lose": [54, 56, 101, 103, 161], "collate_fn": 54, "indent": [54, 224], "imagefold": [54, 55, 96], "ant": [54, 126], "xxy": 54, "jpeg": 54, "xxz": 54, "bee": [54, 126], "nsdf3": 54, "asd932_": 54, "randomhorizontalflip": 54, "data_transform": 54, "randomresizedcrop": 54, "hymenoptera_dataset": 54, "hymenoptera_data": 54, "dataset_load": 54, "data_loading_tutori": [54, 121, 260], "nathan": [55, 78, 88, 90], "celebr": [55, 133, 136], "pictur": [55, 78, 139, 141, 183], "thorough": 55, "shed": [55, 222], "spend": [55, 85, 168, 224, 229], "sake": [55, 154, 175, 178, 240, 241], "ian": 55, "constantli": [55, 78, 178], "outsmart": 55, "equilibrium": 55, "perfect": [55, 93, 151, 200, 274], "notat": [55, 78], "chw": [55, 176], "3x64x64": 55, "thought": [55, 86, 238, 273], "latent": [55, 110], "p_": 55, "p_g": 55, "minimax": 55, "logd": 55, "underset": 55, "mathbb": [55, 88, 165, 178], "sim": 55, "big": [55, 98, 104, 110, 119, 139, 145, 155, 168, 177, 183, 190], "radford": 55, "unsupervis": 55, "drawn": [55, 111, 177], "rgb": [55, 96, 103, 161, 176, 190], "conv": [55, 98, 147, 162, 180, 191, 220, 229], "volum": [55, 137], "inlin": [55, 93, 96, 100, 102, 146, 159, 191, 244, 272, 276], "seed": [55, 78, 96, 103, 137, 138, 153, 178, 179, 181], "manualse": 55, "10000": [55, 96, 173, 181, 224, 238], "dataroot": 55, "image_s": [55, 254], "spatial": [55, 94, 96, 98, 133, 136, 184, 191, 197, 260], "64x64": 55, "nc": [55, 276], "nz": 55, "ngf": 55, "ndf": 55, "num_epoch": 55, "0002": 55, "ngpu": 55, "celeb": 55, "img_align_celeba": 55, "celeba": 55, "188242": 55, "173822": 55, "284702": 55, "537394": 55, "subdirectori": [55, 197], "stdev": 55, "02": [55, 159, 181, 212, 267], "weights_init": 55, "reiniti": 55, "criteria": 55, "netg": 55, "netd": 55, "worth": [55, 168, 171, 180], "critic": [55, 88, 139, 150, 171, 205, 238, 261], "contribut": [55, 63, 85, 94, 101, 162, 187], "batchnorm": [55, 58, 120, 162, 191, 199, 239, 241, 279], "downsampl": [55, 96, 161], "promot": 55, "healthi": 55, "bceloss": 55, "ell": [55, 183], "l_1": 55, "l_n": 55, "quad": [55, 178], "y_n": 55, "bce": 55, "gt": [55, 118], "fixed_nois": 55, "establish": 55, "Be": [55, 93], "somewhat": [55, 171], "collaps": 55, "ganhack": 55, "secondli": 55, "loss_d": 55, "loss_g": 55, "versu": [55, 78, 136, 144, 201], "anim": [55, 96], "music": 55, "dcgan_faces_tutori": [55, 121, 260], "mingpt": [56, 57, 58, 59, 149, 150], "aw": [56, 58, 137, 149, 150, 259], "p3": [56, 57, 58, 66, 119, 149, 150], "8xlarg": [56, 58], "youtub": [56, 57, 58, 59, 93, 94, 96, 98, 100, 101, 102, 136, 149, 150, 200], "failur": [56, 112, 150, 151, 159, 194, 204, 254, 263], "disrupt": [56, 252, 263], "suscept": [56, 208], "elast": [56, 138, 151, 208], "attempt": [56, 93, 101, 105, 138, 171, 194, 201, 228, 252, 263], "minutia": 56, "multinod": [56, 149, 195], "load_snapshot": 56, "snapshot_path": 56, "train_step": 56, "should_checkpoint": 56, "save_snapshot": 56, "membership": [56, 150], "intervent": [56, 103, 249], "multigpu": [56, 58, 150], "multigpu_torchrun": 56, "envvari": 56, "ddp_setup": [56, 58], "12355": [56, 58, 137, 151, 205, 206], "local_rank": [56, 138, 150, 151, 173, 263], "gpu_id": [56, 58, 150], "_save_snapshot": 56, "model_st": 56, "epochs_run": 56, "_load_snapshot": 56, "max_epoch": 56, "_run_epoch": [56, 58], "total_epoch": [56, 58], "argv": [56, 58, 213], "save_everi": [56, 58], "nproc_per_nod": [56, 138, 139, 151, 173, 208, 263], "migrat": [56, 58, 239], "fault": [57, 58, 59, 91, 149, 150, 171], "toler": [57, 58, 59, 91, 93, 149, 150], "deploi": [57, 113, 130, 136, 143, 150, 175, 176], "cluster": [57, 100, 138, 143, 149, 150, 151, 153, 206, 208, 248], "torchrun": [57, 63, 138, 139, 149, 150, 173, 208, 261, 263], "amazon": 57, "ec2": [57, 137], "gentli": 57, "gpt": [57, 137, 149, 150, 173], "stat": [58, 138, 146, 177, 187, 195, 229, 238], "replica": [58, 59, 63, 137, 139, 151, 153, 258], "convert_sync_batchnorm": 58, "single_gpu": 58, "mytraindataset": 58, "distributedsampl": [58, 59, 137, 138], "destroy_process_group": [58, 137, 138, 140, 151, 173, 205, 206, 261], "excess": [58, 85, 141, 192, 213, 223], "train_data": 58, "train_dataset": [58, 103, 138, 213, 247, 281], "set_epoch": [58, 137, 138], "b_sz": 58, "_run_batch": 58, "ckp": 58, "_save_checkpoint": 58, "load_train_obj": 58, "prepare_dataload": 58, "shorthand": 58, "ring": [59, 141, 261], "older": [59, 118, 119, 155, 170, 171, 178, 265], "destroi": [59, 93, 157], "soumith": [60, 153], "chintala": [60, 153], "scientif": [60, 98, 101, 119], "mobil": [61, 62, 103, 202, 218, 219, 227, 267, 269, 270, 278], "executorch": [61, 62, 136, 202, 216, 217, 218, 219, 221, 254, 269, 270, 278, 283], "Will": [63, 139, 191], "constabl": [63, 139], "wei": [63, 139], "feng": [63, 139, 161, 174, 191], "categor": [63, 85, 100, 154, 179, 181, 195], "navig": [63, 187, 188, 220], "technologi": [63, 103, 136, 153, 198, 259], "infrastructur": 63, "fsdp2": [63, 136, 137], "tp": [63, 208, 263], "pp": 63, "dtensor": [63, 141, 207, 259], "devicemesh": [63, 141, 259], "reshard": [63, 139, 206], "mesh": [63, 132, 139, 141, 208], "recip": [63, 118, 132, 136, 200, 203, 207, 211, 220, 222, 223, 224, 225, 226, 228, 229, 235, 236, 240, 241, 242, 243, 244, 246, 248, 249, 250, 251, 252, 253, 254, 258, 260, 271], "c10d": [63, 151, 174, 239, 263], "all_gath": [63, 137, 138, 153, 174], "p2p": 63, "isend": [63, 153], "guidelin": [63, 239], "fullyshardeddataparallel": [63, 137, 138, 139, 205, 206], "torchtitan": [63, 173, 261], "polynomi": [65, 66, 68, 70, 71, 72, 75, 76, 119], "pi": [65, 66, 70, 71, 72, 75, 76, 93, 119, 134, 178], "euclidean": [65, 66, 70, 71, 72, 75, 76, 93, 103, 119], "polynomial_autograd": [65, 67, 260], "bx": [66, 119], "cx": [66, 105, 119], "p_3": [66, 119], "5x": [66, 119], "legendr": [66, 119], "polynomial_custom_funct": [66, 67, 260], "examples_autograd": [67, 260], "strang": [68, 88, 119], "fifth": [68, 119], "tough": [68, 119], "dynamic_net": [68, 73, 260], "polynomial3": [70, 119], "linspac": [70, 93, 119], "2000": [70, 71, 96, 103, 119, 188, 190, 194, 224, 258, 263], "1e": [70, 91, 98, 119, 139, 147, 155, 179, 181, 211, 261, 281], "y_pred": [70, 119, 129, 212], "polynomial_modul": [70, 73, 260], "flaten": [71, 119], "1d": [71, 98, 119, 239, 284], "mse": [71, 98, 103, 119, 129], "polynomial_nn": [71, 73, 260], "polynomial_optim": [72, 73, 260], "examples_nn": [73, 260], "polynomial_numpi": [75, 77, 260], "biggest": [76, 263], "polynomial_tensor": [76, 77, 260], "004": 77, "examples_tensor": [77, 260], "appreci": [78, 104], "overlook": [78, 224], "secur": [78, 187], "vulner": 78, "surpris": [78, 169], "impercept": 78, "perturb": [78, 94], "drastic": [78, 194, 243, 253], "overarch": 78, "amount": [78, 85, 120, 141, 151, 171, 175, 192, 195, 229, 239, 265], "misclassif": 78, "alter": [78, 120, 230, 241, 265], "har": 78, "remark": [78, 192], "mathbf": [78, 129], "nabla_": [78, 105], "007": [78, 117], "misclassifi": 78, "gibbon": 78, "clearli": [78, 143, 263, 272, 273], "pretrained_model": [78, 190], "fgsm_attack": 78, "clean": [78, 137, 138, 144, 151, 168, 173, 195, 261, 272], "data_grad": 78, "_imag": 78, "_grad": 78, "strength": [78, 188], "_data": 78, "allud": 78, "trend": [78, 86, 187], "curv": [78, 187, 188], "linearli": 78, "05": [78, 138, 181, 212], "hit": [78, 141, 187], "lunch": 78, "BUT": [78, 107], "percept": 78, "tradeoff": [78, 134, 136, 142, 143, 153, 177, 244], "titl": [78, 144, 171, 183, 190], "evid": [78, 140], "subsequ": [78, 94, 103, 120, 129, 137, 144, 154, 179, 181, 183, 192, 239, 242, 248, 257, 263, 265], "defend": 78, "nip": 78, "defens": 78, "competit": [78, 155, 170, 257], "defenc": 78, "dirti": 78, "fgsm_tutori": [78, 121, 260], "torchvision_tutori": [79, 184, 197, 260], "nn_tutori": [81, 111, 121, 260], "anupam": [85, 86], "bhatnagar": [85, 86], "analyz": [85, 134, 136, 168, 177, 192, 194, 238, 254], "offici": [85, 116, 140, 153, 178, 192, 194, 213, 214], "holistictraceanalysi": 85, "env_nam": [85, 177], "deactiv": 85, "trace_dir": 85, "trace_analysi": 85, "traceanalysi": 85, "primarili": [85, 180, 192, 207, 223, 239], "engag": [85, 285], "datafram": [85, 143, 190], "time_spent_df": 85, "get_temporal_breakdown": 85, "enqueu": 85, "ineffici": [85, 277], "slowdown": [85, 138, 142], "fusion": [85, 159, 195, 213, 239, 246, 255, 259, 260, 265, 276], "consecut": [85, 145, 154, 161, 171, 176, 190, 257], "insuffici": [85, 178], "delai": [85, 151, 179, 195], "stall": [85, 257, 263], "gap": [85, 88], "nanosecond": 85, "consecutive_kernel_delai": 85, "get_idle_time_breakdown": 85, "idle_time_df": 85, "show_idle_interval_stat": 85, "percentag": [85, 175, 277], "visualize_pctg": 85, "comm": 85, "comp": 85, "proport": [85, 168], "pie": [85, 168], "chart": [85, 100, 251], "kernel_type_metrics_df": 85, "kernel_metrics_df": 85, "get_gpu_kernel_breakdown": 85, "bottleneck": [85, 118, 138, 141, 150, 168, 171, 179, 187, 192, 203, 220], "plotli": [85, 94, 143], "hover": [85, 143, 176], "pan": 85, "num_kernel": [85, 211], "duration_ratio": 85, "preced": [85, 93, 101, 147, 154, 191, 279], "lab": [85, 188], "image_render": 85, "jupyterlab": 85, "gpu_kernel_breakdown": 85, "tflop": 85, "oversubscrib": 85, "unresolv": [85, 274], "extent": [85, 101], "overlap_df": 85, "get_comm_comp_overlap": 85, "h2d": 85, "d2h": 85, "d2d": 85, "memcpi": 85, "memset": 85, "outstand": 85, "generate_trace_with_count": 85, "_with_count": 85, "screenshot": [85, 220], "profil": [85, 121, 130, 131, 134, 136, 137, 171, 182, 184, 212, 224, 227, 235, 239, 259, 260, 276], "get_memory_bw_summari": 85, "get_queue_length_summari": 85, "get_memory_bw_time_seri": 85, "get_queue_length_time_seri": 85, "mem_bw_summari": 85, "queue_len_summari": 85, "mem_bw_seri": 85, "queue_len_seri": 85, "get_queue_length_seri": 85, "25th": 85, "50th": 85, "75th": 85, "percentil": 85, "cudalaunchkernel": 85, "cudamemcpyasync": 85, "cudamemsetasync": 85, "kernel_info_df": 85, "get_cuda_kernel_launch_stat": 85, "short": [85, 98, 101, 104, 106, 109, 132, 145, 153, 169, 171, 177, 183, 185, 194, 239, 242, 260], "outlier": [85, 178], "microsecond": [85, 160, 182, 224], "cutoff": 85, "runtime_cutoff": 85, "launch_delay_cutoff": 85, "occasion": [86, 180, 183], "hta": [86, 187], "tracediff": 86, "cumul": [86, 178], "compare_trac": 86, "durat": [86, 174, 178, 187, 263], "ops_diff": 86, "absent": 86, "visualize_counts_diff": 86, "visualize_duration_diff": 86, "ten": [86, 96, 100, 103], "df": 86, "compare_traces_output": 86, "sort_valu": 86, "diff_count": 86, "largest": [86, 111, 190], "diff_dur": 86, "differer": 86, "overshadow": 86, "profilerstep": [86, 159], "loc": [86, 177, 223], "trace_diff_demo": 86, "learning_hybrid_frontend_through_example_tutori": [87, 88, 89, 260], "hybrid_frontend": [87, 89, 260], "introduction_to_hybrid_frontend_tutori": 87, "shini": 88, "eas": [88, 101, 102, 138, 198, 213, 228, 259], "enjoi": [88, 161], "aquaint": 88, "opportun": [88, 113, 154, 195], "bridg": [88, 207], "refin": [88, 194], "gradual": [88, 168], "proven": [88, 275], "resouc": 88, "consumpt": [88, 96, 98, 100, 102, 118, 138, 141, 143, 159, 171, 175, 187, 239, 258, 259], "discrep": [88, 279], "interwork": 88, "intrus": [88, 168], "decor": [88, 93, 116, 132, 146, 161, 179, 192, 239, 252], "broken": [88, 107], "epsilon": [88, 147, 154, 177, 178], "biggl": 88, "lfloor": 88, "sqrt": [88, 111, 198, 211, 272], "prod_": 88, "biggr": 88, "rfloor": 88, "hline": 88, "190": [88, 181, 190, 224], "4377": 88, "59051": 88, "accomod": [88, 149], "script_method": 88, "tracedmodul": 88, "workaround": [88, 148, 157, 254], "onnx": [88, 117, 130, 136, 260], "dramat": [91, 111], "industri": [91, 94], "analysi": [91, 93, 102, 136, 137, 158, 159, 182, 187, 190, 194, 220, 238, 254, 261, 265], "slight": [91, 140, 148, 212, 225], "trial": [91, 143, 223], "train_cifar": 91, "l2": [91, 98, 175], "get_checkpoint": 91, "as_directori": 91, "checkpoint_dir": [91, 205, 206], "data_path": 91, "pkl": 91, "rb": 91, "checkpoint_st": 91, "start_epoch": 91, "net_state_dict": 91, "optimizer_state_dict": [91, 120, 205, 206, 213], "80": [91, 96, 143, 144, 162, 181, 211, 254], "luckili": [91, 159, 194, 195, 224, 274], "enumer": [91, 96, 102, 137, 139, 141, 176, 180, 187, 188, 213, 247, 281], "trainload": [91, 96, 188], "fraction": [91, 224], "checkpoint_data": 91, "tempfil": [91, 151, 211], "temporarydirectori": 91, "wb": 91, "dump": [91, 159, 201, 207], "from_directori": 91, "val_loss": [91, 138], "val_step": 91, "wast": [91, 187, 224, 228, 230, 244, 277], "lastli": [91, 168, 194], "loguniform": [91, 224], "ashaschedul": 91, "functool": [91, 137, 138], "gpus_per_tri": 91, "resources_per_tri": 91, "num_sampl": [91, 138], "checkpoint_at_end": 91, "000668163": 91, "31479": 91, "0977": 91, "0331514": 91, "31605": 91, "0983": 91, "000150295": 91, "30755": 91, "1023": 91, "0128248": 91, "66912": 91, "4391": 91, "00464561": 91, "7316": 91, "3463": 91, "00031556": 91, "19409": 91, "1736": 91, "00574329": 91, "85679": 91, "3368": 91, "00325652": 91, "30272": 91, "0984": 91, "000342987": 91, "76044": 91, "003734": 91, "53101": 91, "4761": [91, 107], "0037339984519545164": 91, "5310075663924216": 91, "4737": 91, "confirm": [91, 94, 111, 112, 138, 160, 179], "hyperparameter_tuning_tutori": [91, 121, 260], "tensorboard": [93, 94, 95, 96, 97, 98, 101, 102, 134, 136, 143, 184, 227, 229, 235, 259, 260], "decis": [93, 106, 109, 154, 171, 194, 201, 239, 249, 255, 260, 272, 273, 275], "branch": [93, 112, 194, 197, 213], "rigidli": 93, "sign": [93, 169], "contextu": 93, "nudg": [93, 96, 102], "calculu": [93, 129], "next_funct": 93, "drill": [93, 238], "machineri": [93, 224], "took": [93, 153, 158, 168, 182, 192, 252, 263], "ins": [93, 192], "never": [93, 104, 105, 106, 110, 129, 142, 175, 185], "ideal_output": 93, "layer2": 93, "blow": 93, "b1": 93, "b2": 93, "temporarili": 93, "enable_grad": 93, "throw": [93, 101, 129, 140, 179], "sin_": 93, "handi": [93, 96, 111, 153, 161, 188], "bake": [93, 191], "chrome": [93, 171, 182, 187, 229], "imagin": [93, 101, 104, 110, 148, 153, 168, 169, 183, 195, 224, 236], "hessian": [93, 131, 136, 184, 260, 284], "twice": [93, 111, 148, 171, 212, 224, 229, 258, 265], "jvp": [93, 157, 160], "vjp": [93, 160, 165, 284], "vhp": [93, 131, 136, 184, 260], "hvp": [93, 131, 136, 184, 260], "autogradyt_tutori": [93, 95, 99, 260], "latin": 94, "increasingli": [94, 198], "ai": [94, 105, 106, 111, 137, 143, 161, 183, 201, 206, 213, 214, 222, 239, 263, 276], "review": [94, 149, 166, 194, 213, 244, 272, 273, 275, 280], "neuron": [94, 103, 222], "analag": 94, "ablat": 94, "permut": [94, 103, 162, 176, 190, 211], "valuabl": [94, 103, 183, 211, 277], "certainli": [94, 158, 273, 275], "attr": [94, 174, 201], "widget": 94, "toolset": 94, "flask": 94, "renam": 94, "virtual": [94, 171, 174, 228, 267], "pull": [94, 101, 102, 158, 280], "recogn": [94, 98, 174, 191, 226], "224x224": [94, 176], "visualize_image_attr": 94, "integrated_gradi": 94, "strongest": [94, 96, 98, 102], "visualize_image_attr_multipl": 94, "heat": [94, 176], "upsampl": 94, "interpol": 94, "layerattribut": 94, "novel": [94, 261], "teapot": 94, "trilobit": 94, "fossil": 94, "dig": [94, 105, 182, 194], "attributionvisu": 94, "imagefeatur": 94, "heatmap": 94, "captumyt": [94, 99, 260], "introyt": [95, 99, 200, 260], "introyt1_tutori": [95, 96, 99, 260], "tensors_deeper_tutori": [95, 99, 101, 260], "modelsyt_tutori": [95, 98, 99, 260], "tensorboardyt_tutori": [95, 99, 100, 260], "trainingyt_tutori": 95, "captumyt_tutori": 95, "captum": [95, 227, 235, 259, 260], "sphx_glr_beginner_introyt_introyt_index": [95, 99, 260], "sphx_glr_beginner_introyt_modelsyt_tutori": [95, 99, 260], "sphx_glr_beginner_introyt_autogradyt_tutori": [95, 99, 260], "sphx_glr_beginner_introyt_tensors_deeper_tutori": [95, 99, 260], "sphx_glr_beginner_introyt_captumyt": [95, 99, 260], "sphx_glr_beginner_introyt_trainingyt": [95, 99, 260], "sphx_glr_beginner_introyt_tensorboardyt_tutori": [95, 99, 260], "sphx_glr_beginner_introyt_introyt1_tutori": [95, 99, 260], "5x3": 96, "int16": [96, 101], "helpfulli": 96, "prng": 96, "manual_se": [96, 101, 107, 137, 138, 153, 155, 178, 179, 258, 261, 281], "1729": 96, "r1": 96, "r2": 96, "na": [96, 184, 260], "r3": 96, "nshould": 96, "3126": [96, 107], "3791": 96, "3087": 96, "4216": 96, "0691": 96, "2332": 96, "4047": 96, "nabsolut": 96, "trigonometr": [96, 101], "ninvers": 96, "asin": 96, "singular": [96, 169, 182, 253], "decomposit": [96, 116, 139, 159], "ndetermin": 96, "det": [96, 169], "nsingular": 96, "svd": 96, "naverag": 96, "std_mean": 96, "nmaximum": 96, "9956": 96, "2232": 96, "6593": 96, "4775": 96, "2251": 96, "3961": 96, "7199": 96, "5703": 96, "return_typ": 96, "8353": 96, "5497": 96, "1793": 96, "4836": 96, "8851": 96, "4654": 96, "7217": 96, "diagram": [96, 178], "earliest": 96, "driver": [96, 187], "explos": 96, "handwritten": [96, 137], "abridg": 96, "c1": [96, 159], "s2": [96, 194], "c3": 96, "s4": [96, 194], "f5": 96, "f6": 96, "5x5": [96, 98], "affin": [96, 108, 129, 147, 185, 239, 257], "wx": 96, "fc1": [96, 120, 137, 155, 180, 188], "fc2": [96, 120, 137, 155, 180, 188], "fc3": [96, 120, 155, 188], "num_flat_featur": 96, "num_featur": [96, 191], "artifact": [96, 149, 194, 243, 248, 249, 253], "nimag": 96, "nraw": 96, "kernel_s": [96, 137, 169], "in_featur": [96, 137, 169, 230, 276, 281], "out_featur": [96, 137, 169, 276, 281], "0898": 96, "0318": 96, "1485": 96, "0301": 96, "0085": 96, "1135": 96, "0296": 96, "0164": 96, "0039": 96, "0616": 96, "addmmbackward0": 96, "gist": 96, "tile": [96, 100, 102, 190, 201, 281], "hasn": 96, "shouldn": [96, 175], "4914": 96, "4822": 96, "4465": [96, 107], "2470": 96, "2435": 96, "2616": 96, "center": [96, 98, 102, 178, 187, 239], "concatdataset": 96, "trainset": [96, 188], "50000": 96, "rotat": [96, 100, 185, 188], "vehicl": [96, 181], "170m": [96, 212], "524k": 96, "32m": 96, "6m": 96, "3mb": 96, "9m": 96, "42": [96, 178, 181, 211, 224], "5m": 96, "100mb": 96, "106mb": 96, "39": [96, 137, 181, 198, 212, 224], "7m": 96, "109mb": 96, "0m": 96, "110mb": 96, "52": [96, 162, 211, 212], "88": [96, 118, 181], "111mb": 96, "112mb": 96, "111m": 96, "122m": 96, "133m": 96, "105mb": 96, "144m": 96, "90": [96, 181, 212], "153m": 96, "94": [96, 143, 212, 229], "161m": [96, 159], "73": [96, 159, 181, 211, 224, 281], "7mb": 96, "filesystem": [96, 153, 264], "told": [96, 177], "plane": [96, 140], "car": 96, "unnorm": [96, 188], "npimg": [96, 188], "datait": [96, 188], "make_grid": [96, 188], "49473685": 96, "5632443": 96, "strip": [96, 238, 281], "testset": [96, 188], "testload": [96, 188], "ingredi": 96, "running_loss": [96, 188], "1999": 96, "5d": 96, "3f": [96, 281], "195": [96, 176, 181], "879": 96, "6000": 96, "656": [96, 159, 258], "8000": [96, 238], "576": [96, 98], "517": 96, "12000": 96, "461": [96, 162], "415": 96, "368": 96, "334": 96, "327": 96, "318": 96, "261": 96, "inner": [96, 171, 177], "235": [96, 118], "940": 96, "573": 96, "507": 96, "442": 96, "378": 96, "364": 96, "349": 96, "319": [96, 212, 229], "284": [96, 181], "267": 96, "monoton": 96, "descend": 96, "memor": 96, "roughli": [96, 104, 119, 138, 151, 159, 239], "060": [96, 99, 212, 260], "brad": 97, "heintz": 97, "pro": 97, "introyt_index": [97, 99, 200, 260], "lin": 98, "nearbi": 98, "lenet5": 98, "1x32x32": 98, "liken": 98, "3x5": 98, "presenc": [98, 192, 194, 222], "6x28x28": 98, "2x2": 98, "resolut": [98, 190], "6x14x14": 98, "sought": 98, "3x3": 98, "16x12x12": 98, "16x6x6": 98, "edg": [98, 113, 119, 136, 158, 187, 226, 254], "instrument": [98, 158, 259], "dna": 98, "nucleotid": 98, "sort": [98, 104, 108, 118, 176, 198, 229, 239], "moder": 98, "beyond": [98, 101, 107, 174, 175, 239], "scope": [98, 101, 107, 118, 142, 146, 194, 220, 243, 244], "tagger": [98, 104], "noun": 98, "verb": 98, "vocab_s": [98, 139, 173, 213], "tagset_s": 98, "hidden_dim": 98, "log_softmax": [98, 111, 137, 180], "decod": [98, 104, 138, 173, 181, 182, 198, 223, 254, 265], "transformerencod": [98, 198], "transformerdecod": [98, 198], "subcompon": [98, 192], "transformerencoderlay": [98, 182, 198], "transformerdecoderlay": [98, 173, 198], "twin": 98, "maxpool": 98, "quadrant": 98, "6x6": 98, "vanish": [98, 105, 199], "offset": [98, 195, 205, 264, 281], "neighborhood": 98, "sometim": [98, 101, 119, 142, 148, 150, 151, 154, 160, 178, 181, 183, 194, 239, 265, 274, 275], "suffer": [98, 187], "steepest": 98, "feasibl": [98, 137, 139], "hardtanh": 98, "072": 99, "trainingyt": [99, 102, 260], "garment": 100, "tensorflow": [100, 104, 106, 119], "tf": 100, "tb": [100, 254], "gfile": 100, "tensorflow_stub": 100, "grid": [100, 102, 111, 126, 185, 188, 266], "add_imag": [100, 188], "summarywrit": [100, 188, 237], "flush": [100, 223, 237], "log_dir": [100, 143, 188], "logdir": [100, 187, 188, 237], "6006": [100, 187, 188, 237], "efficaci": 100, "add_graph": [100, 188], "add_embed": [100, 188], "projector": 100, "toggl": [100, 258, 264], "night": [100, 188], "icon": 100, "dark": [100, 190], "upack": 101, "attach": [101, 178, 199, 257], "terminologi": [101, 107], "likewis": [101, 168], "assur": [101, 171], "random1": 101, "random3": 101, "random2": 101, "random4": 101, "rng": [101, 153], "_like": [101, 162], "zeros_lik": [101, 179], "rand_lik": [101, 169], "cue": 101, "intent": [101, 206, 273], "subtract": [101, 103, 239], "divis": [101, 194, 211], "2x4": 101, "1x4": 101, "honor": 101, "3rd": [101, 139, 146, 201, 213], "2nd": [101, 108, 139, 146, 180], "hundr": [101, 132, 141, 190, 195], "bitwis": [101, 223], "inventori": [101, 102], "occupi": [101, 220], "discard": [101, 137, 138, 187, 229, 238], "underscor": 101, "deepli": 101, "nor": [101, 153, 257, 272], "mid": 101, "someplac": 101, "ram": [101, 138, 171, 195, 228], "colloqui": 101, "fragil": 101, "robustli": [101, 115], "whichev": 101, "acquir": [101, 120, 175, 177, 181], "thrown": [101, 275], "226": 101, "zeroth": 101, "un": [101, 183], "bracket": 101, "rescu": 101, "squeeze_": 101, "unsqueeze_": 101, "radic": 101, "parenthes": 101, "comma": 101, "convinc": [101, 168], "kinship": 101, "autom": [102, 119, 143, 158, 162, 190], "outcom": [102, 143, 263], "saniti": [102, 129, 143, 177, 190], "nb": [102, 284], "chose": [102, 176], "saved_model": 102, "garmentclassifi": 102, "alexandro": 103, "chariton": 103, "computation": [103, 190], "lightweight": [103, 131, 136, 175, 223], "drone": 103, "phone": [103, 113], "4gb": [103, 168, 176], "v2": [103, 123, 154, 176, 191, 195, 201, 205, 211, 280], "3072": [103, 281], "satur": [103, 223], "furthermor": [103, 155, 160, 188, 207, 224, 266], "held": [103, 144, 180], "greedi": [103, 154, 178], "num_images_to_keep": 103, "50_000": 103, "test_dataset": 103, "10_000": 103, "extractor": [103, 190], "emploi": [103, 183, 187, 198, 205], "train_load": [103, 137, 138, 180, 187, 213, 247], "detriment": 103, "workload": [103, 118, 132, 139, 150, 151, 153, 187, 195, 205, 208, 212, 213, 257, 267, 276], "test_load": [103, 137, 180], "sensit": [103, 149, 157], "conclud": [103, 148, 153, 194], "interven": [103, 194], "soft": [103, 178], "mistaken": 103, "alon": [103, 120, 141, 183, 188], "exploit": [103, 161, 183], "meaningfulli": 103, "temperatur": 103, "smoother": 103, "soft_target_loss_weight": 103, "ce_loss_weight": 103, "train_knowledge_distil": 103, "75": [103, 126, 137, 211], "ce": [103, 183], "coeffici": 103, "convei": 103, "naiv": [103, 142, 160, 170, 182, 277], "rational": 103, "capac": [103, 149, 177, 190, 239], "cosineembeddingloss": 103, "obvious": [103, 107, 181], "resolv": [103, 162, 191, 194, 199, 207, 254, 274], "somehow": [103, 110, 195], "hidden_represent": 103, "hidden_representation_s": 103, "avg_pool1d": 103, "harder": [103, 265], "Its": [103, 105, 277], "modifiedlightnnregressor": 103, "cosineloss": 103, "wiggl": 103, "room": [103, 171, 212], "mismatch": [103, 194, 263], "hinton": 103, "vinyal": 103, "dean": 103, "workshop": 103, "romero": 103, "balla": 103, "kahou": 103, "chassang": 103, "gatta": 103, "bengio": 103, "fitnet": 103, "thin": [103, 264], "confer": 103, "knowledge_distillation_tutori": [103, 121, 260], "kit": 104, "dynet": [104, 106], "opposit": [104, 171, 273], "theano": [104, 106], "kera": [104, 106, 119], "constitu": 104, "bottom": [104, 187, 190, 194, 220], "green": [104, 138, 141, 188], "wall": [104, 158, 224], "fat": 104, "exception": 104, "entiti": [104, 110, 195, 241, 242], "recognit": [104, 136, 201, 239], "ner": 104, "sound": [104, 107, 119], "scari": 104, "viterbi": [104, 108], "exp": [104, 105, 148, 274], "sum_": [104, 110, 178], "psi_i": 104, "sum_i": 104, "partit": [104, 136, 141, 146, 153, 206, 239], "emiss": 104, "timestep": [104, 108, 144, 145, 178], "textbf": 104, "psi_": 104, "y_i": [104, 108], "rightarrow": [104, 153, 178], "x_i": [104, 105], "tran": [104, 190], "h_i": [104, 108], "michael": [104, 203, 204, 211, 223, 250, 255], "collin": 104, "robert": [104, 105, 107, 108, 110], "guthri": [104, 105, 107, 108, 110], "prepare_sequ": 104, "anywai": [104, 107, 171], "gold": [104, 183], "perceptron": 104, "score_sent": 104, "advanced_tutori": [104, 106, 109, 260], "workhors": 105, "2x5": 105, "acx": 105, "ac": [105, 190], "sigma": [105, 177], "plenti": 105, "peopl": [105, 106, 126], "shy": 105, "linearit": 105, "sum_j": 105, "x_j": 105, "unseen": [105, 110], "eta": 105, "vari": [105, 139, 147, 161, 171, 183, 192, 194, 198, 203, 223, 243, 274, 277], "spanish": [105, 144, 145], "bow": 105, "vocab": [105, 108, 141], "word_to_ix": [105, 108, 110], "bowclassifi": 105, "creo": 105, "bigger": [105, 144, 145, 176, 190], "deep_learning_tutori": [105, 106, 109, 260], "russel": 106, "norvig": 106, "book": 106, "rip": 106, "pytorch_tutori": [106, 107, 109, 260], "word_embeddings_tutori": [106, 109, 110, 260], "lexic": [106, 109, 260], "sequence_models_tutori": [106, 108, 109, 260], "bi": [106, 109, 260], "crf": [106, 109, 260], "0x7fd15c5546b0": 107, "v_data": 107, "m_data": 107, "2x2x2": 107, "t_data": 107, "5256": 107, "7502": 107, "6540": 107, "6095": 107, "1002": 107, "6092": 107, "9798": 107, "6091": 107, "7121": 107, "3037": [107, 169], "7773": 107, "2515": 107, "2223": 107, "6871": 107, "2284": 107, "4676": 107, "6970": 107, "1608": 107, "6995": 107, "1991": 107, "8657": 107, "2444": 107, "6629": 107, "8073": 107, "1759": 107, "2456": 107, "0612": 107, "6177": 107, "7981": 107, "1316": 107, "8793": 107, "0721": 107, "1578": 107, "7735": 107, "0457": 107, "1530": 107, "4757": 107, "1110": 107, "2927": 107, "0288": 107, "4533": 107, "1422": 107, "2486": 107, "7754": 107, "0255": 107, "0233": 107, "5962": 107, "0055": 107, "4285": 107, "7869": 107, "6103": 107, "7040": 107, "1853": 107, "9962": 107, "8313": 107, "z_1": 107, "x_2": [107, 165], "y_2": 107, "z_2": 107, "complain": [107, 194], "8029": 107, "2366": 107, "2857": 107, "6898": 107, "6331": 107, "8795": 107, "6842": 107, "2912": 107, "8317": 107, "5525": 107, "6355": 107, "3968": 107, "6571": 107, "6428": 107, "9803": 107, "0421": 107, "8206": 107, "3133": 107, "1352": 107, "3773": 107, "2824": 107, "5667": 107, "4303": 107, "5009": 107, "5438": 107, "4057": 107, "1341": 107, "1473": 107, "6272": 107, "0939": 107, "2381": 107, "1115": 107, "7703": 107, "3459": 107, "5119": 107, "6933": 107, "1668": 107, "9999": 107, "4175": 107, "2127": [107, 194], "8400": 107, "4200": 107, "6240": 107, "9773": 107, "8748": 107, "9873": 107, "0594": 107, "4919": 107, "2423": 107, "1095": 107, "5038": 107, "6223": 107, "4481": 107, "2856": 107, "3880": 107, "1435": 107, "6512": 107, "1032": 107, "6937": 107, "vagu": 107, "programm": [107, 110], "mayb": [107, 110, 155, 194, 285], "addbackward0": [107, 169], "0x7fd11a84b220": 107, "0x7fd11a84afb0": 107, "x_0": 107, "overbrac": [107, 108, 110], "y_0": 107, "z_0": 107, "gloss": 107, "new_z": 107, "NO": 107, "forgotten": 107, "0x7fd11a849330": 107, "137": [107, 109, 181, 260], "classic": [108, 111, 162, 169, 185, 214, 236], "markov": 108, "myriad": 108, "cow": 108, "q_": [108, 110, 161], "1st": [108, 137, 139, 146], "unfamiliar": 108, "w_1": 108, "w_m": 108, "w_i": [108, 110], "_i": 108, "_1": [108, 129], "_m": 108, "argmax": [108, 137, 180, 212], "_j": 108, "ah_i": 108, "affix": [108, 110], "bear": 108, "ly": 108, "adverb": 108, "c_w": 108, "x_w": 108, "po": [108, 190], "emb": [108, 110, 181], "147": 109, "capit": 110, "enorm": [110, 190], "notion": 110, "mathematician": 110, "physicist": 110, "ok": [110, 140, 179], "role": [110, 175, 181, 195, 257], "orthograph": 110, "linguist": 110, "hypothesi": 110, "coffe": 110, "phi": 110, "gave": 110, "pain": 110, "earth": 110, "herself": 110, "longtensor": [110, 145, 179, 181], "ith": [110, 277], "shakespear": [110, 182], "sonnet": 110, "word_i": 110, "context_s": 110, "beauti": 110, "cbow": 110, "probabilist": [110, 177], "percent": 110, "q_w": 110, "raw_text": 110, "dedupl": 110, "jeremi": 111, "howard": [111, 161, 173, 174], "rachel": 111, "thoma": 111, "ingham": 111, "elegantli": [111, 226], "concis": 111, "trail": 111, "signifi": 111, "xavier": [111, 112], "initialis": 111, "prewritten": 111, "pred": [111, 129, 137, 141, 180, 188], "talli": 111, "debugg": 111, "set_trac": 111, "logist": 111, "cross_entropi": [111, 141], "clearer": [111, 188], "uppercas": 111, "zero_": [111, 174, 181], "prone": [111, 146, 198, 208], "gone": [111, 142], "xb": 111, "faciallandmarkdataset": 111, "tensordataset": 111, "x_train": 111, "y_train": 111, "start_i": 111, "end_i": 111, "yb": 111, "train_d": 111, "cleaner": [111, 272, 274, 285], "train_dl": 111, "phase": [111, 153, 181, 229, 255], "loss_batch": 111, "simpler": [111, 139, 141, 147, 157, 169, 224, 284], "rid": [111, 112, 139, 160, 254], "avgpool2d": 111, "adaptiveavgpool2d": [111, 154], "lucki": [111, 175], "rent": 111, "hour": [111, 254], "mnist_sampl": 111, "fastai": 111, "practition": [111, 153, 275], "dupr\u00e9": 112, "circumv": 112, "forwardwithcontrolflowtest": 112, "modelwithcontrolflowtest": 112, "mlp": [112, 141, 155, 195], "unexpectedli": [112, 220], "succe": [112, 115, 194], "assertionerror": [112, 159], "identity2": 112, "fx": [112, 113, 130, 136, 159, 184, 194, 214, 248, 260, 267], "imperfect": 112, "faith": 112, "pitfal": [112, 194], "necessarili": [112, 113, 115, 116, 146, 148, 171, 194], "export_control_flow_model_to_onnx_tutori": [112, 114, 117, 260], "ti": [113, 115, 116], "tai": [113, 115, 116], "justin": [113, 116, 119, 129, 199], "chu": [113, 116], "thiago": [113, 115], "crepaldi": [113, 115], "dynamo": [113, 115, 146, 159, 214, 254, 255, 266], "gamut": 113, "platform": [113, 151, 153, 187, 201, 212, 220, 239, 247, 257], "supercomput": 113, "constrain": [113, 143, 169], "onnxscript": [113, 115, 116], "upgrad": [113, 115, 169, 176, 187, 285], "onnxprogram": [113, 116], "protobuf": 113, "app": [113, 136, 205, 206, 213], "drag": [113, 168, 187, 188, 207], "image_classifier_model": 113, "onnxruntim": [113, 115], "export_simple_model_to_onnx_tutori": [113, 114, 117, 260], "intro_onnx": [114, 115, 117, 260], "onnx_registry_tutori": [114, 116, 117, 260], "sphx_glr_beginner_onnx_intro_onnx": [114, 117, 260], "sphx_glr_beginner_onnx_export_control_flow_model_to_onnx_tutori": [114, 117, 260], "sphx_glr_beginner_onnx_export_simple_model_to_onnx_tutori": [114, 117, 260], "sphx_glr_beginner_onnx_onnx_registry_tutori": [114, 117, 260], "exportedprogram": [115, 116, 120, 194, 243, 253, 254], "newer": [115, 152, 162, 168, 170, 196, 231, 232, 233, 234, 239, 283], "__version__": [115, 176], "registri": 116, "opoverload": 116, "opset": 116, "blob": [116, 137, 187], "native_funct": 116, "yaml": [116, 149], "custom_translation_t": 116, "redund": [116, 154], "node_add_0": 116, "input_i": 116, "input_x": 116, "gelu": [116, 279], "op_typ": 116, "round": [116, 138, 179, 224, 238], "mylibrari": 116, "add_and_round_op": 116, "json": [118, 171, 182, 187, 207, 229, 253], "quicker": 118, "record_funct": [118, 159, 212, 229], "incur": [118, 141, 205, 239, 263], "investig": [118, 129, 162, 175, 190, 192, 194, 238], "with_stack": [118, 187], "key_averag": [118, 212], "group_by_stack_n": 118, "traceback": [118, 159, 254], "sort_bi": [118, 212, 229], "193a910735e8": 118, "stacktrac": 118, "212": 118, "953": 118, "67": [118, 159, 211, 212], "mnt": [118, 153], "xarfus": 118, "au": 118, "07": [118, 138, 169, 212, 229, 238], "715": 118, "848m": 118, "350": 118, "151u": 118, "293": [118, 162], "342u": 118, "095u": 118, "931": 118, "tackl": 118, "footprint": [118, 137, 138, 139, 149, 168, 212, 223, 258], "61": [118, 162, 211, 212, 281], "006": 118, "476": 118, "34": [118, 176, 212, 224, 229, 238], "338": 118, "759m": 118, "as_strid": [118, 159], "281": [118, 162], "808u": 118, "275": 118, "721u": 118, "_local": 118, "268": 118, "650u": [118, 229], "_scalar_dens": 118, "347": 118, "argwher": 118, "nonzero": [118, 239], "129": 118, "089m": 118, "38": [118, 181, 211, 212, 238], "402m": 118, "491m": 118, "119": 118, "441": 118, "587u": 118, "_numpi": 118, "395": [118, 181], "602u": 118, "801m": 118, "rpc": [118, 136, 259], "johnson": 119, "brows": 119, "utf": 119, "modern": [119, 171, 192, 195], "50x": 119, "hairi": 119, "thankfulli": 119, "wave": 119, "slim": 119, "tflearn": 119, "burden": [119, 183, 239], "sophist": [119, 177], "facil": 120, "running_mean": [120, 241], "themodelclass": 120, "param_tensor": 120, "var_nam": 120, "param_group": [120, 204, 211], "dampen": 120, "weight_decai": [120, 211], "4675713712": 120, "4675713784": 120, "4675714000": 120, "4675714072": 120, "4675714216": 120, "4675714288": 120, "4675714432": 120, "4675714504": 120, "4675714648": 120, "4675714720": 120, "_use_new_zipfile_seri": 120, "best_model_st": 120, "deepcopi": [120, 155], "pt2": [120, 194, 203, 204, 208, 211, 253], "simplemodel": 120, "saved_exported_program": 120, "model_state_dict": [120, 139, 205, 206, 213], "theoptimizerclass": 120, "modela_state_dict": 120, "modela": 120, "modelb_state_dict": 120, "modelb": 120, "optimizera_state_dict": 120, "optimizera": 120, "optimizerb_state_dict": 120, "optimizerb": 120, "themodelaclass": 120, "themodelbclass": 120, "theoptimizeraclass": 120, "theoptimizerbclass": 120, "gan": [120, 133, 136, 169], "ensembl": [120, 131, 136, 184, 260], "map_loc": [120, 139, 151, 190, 223, 228], "remap": 120, "overwrit": 120, "saving_loading_model": [120, 121, 231, 232, 233, 234, 260], "026": 121, "distil": [121, 131, 136, 260], "dcgan": [121, 131, 133, 136, 260], "transfer_learning_tutori": [121, 126, 260], "understanding_leaf_vs_nonleaf_tutori": [121, 129, 260], "rai": [121, 134, 136, 260], "template_tutori": [121, 123, 260], "firstnam": 123, "lastnam": 123, "gallery_pattern": 123, "neural_style_transfer_tutori": 123, "sphinx": 123, "_build": 123, "beginner_sourc": [123, 260], "link1": [123, 138], "link2": [123, 138], "cs231n": 126, "quot": 126, "million": [126, 138, 154], "licens": [126, 185], "bsd": [126, 185], "todai": [126, 195, 211, 274], "lr_schedul": [126, 137, 138], "num_ftr": 126, "decai": [126, 154, 178], "checkout": 126, "silver": [129, 168, 199], "_k": 129, "bigl": 129, "bigr": 129, "programmat": 129, "probe": [129, 199], "phrase": [129, 183], "afterward": [129, 171, 194, 264], "retains_grad": 129, "tracker": [129, 158, 199], "streamlin": 130, "inductor": [130, 131, 136, 146, 184, 194, 211, 243, 249, 251, 255, 260, 265, 267, 276, 279, 285], "set_stanc": [130, 246, 259, 260], "usecas": [130, 259], "lrschedul": [130, 168, 259], "triton": [130, 159, 192, 211, 246, 248, 253, 259, 260, 267, 276], "cold": [130, 183, 227, 246, 248, 259, 260], "torchdynamo": [130, 136, 146, 194, 267, 279], "fuser": [130, 136, 184, 260], "orthogon": [131, 136, 169], "symmetr": [131, 136, 169, 279], "prune": [131, 136, 169, 184, 260, 285], "scaled_dot_product_attent": [131, 136, 182, 198, 261], "nchw": [131, 136, 162, 213], "func": [131, 136, 155, 157, 160, 165, 170, 250, 254, 284], "tangent": [131, 136, 157, 184, 260], "nerur": 131, "netork": [131, 136], "exploresever": 131, "spread": [132, 190], "demand": [132, 263], "ddp_series_intro": 132, "utm_sourc": 132, "distr_land": 132, "utm_medium": 132, "distributeddata": 132, "ddp_tutori": 132, "intermediate_ddp_tutori": 132, "uneven": 132, "generic_join": 132, "fsdp_tutori": 132, "fsdp_getting_start": 132, "tp_tutori": 132, "distributed_device_mesh": 132, "rpc_tutori": 132, "rpc_getting_start": 132, "rpc_param_server_tutori": 132, "async_execut": [132, 136, 179], "rpc_async_execut": 132, "dataparallel": [132, 136, 142, 223, 239], "rpc_ddp_tutori": 132, "rpc_plus_ddp": 132, "plug": [132, 174, 185], "process_group_cpp_extension_tutori": 132, "custom_extensions_cpp": 132, "dqn": [133, 136, 184, 260], "cartpol": [133, 136, 154, 178, 181], "v0": [133, 136, 161, 178, 197], "proxim": [133, 136, 177], "invert": [133, 136, 177, 273], "mario": [133, 136, 169, 184, 260], "experiment": [134, 137, 143, 181, 199, 237, 239, 261, 263, 266, 279], "torchx": [134, 136], "plugin": [134, 136, 187], "raspberri": 134, "gpudirect": [136, 260, 282, 285], "bite": [136, 200, 259], "non_block": [136, 184, 260], "pin_memori": [136, 137, 138, 184, 239, 260], "slide": [136, 239], "tiatoolbox": 136, "resampl": 136, "waveform": 136, "wav2vec2": 136, "holist": 136, "_static": 136, "thumbnail": [136, 190], "matcher": [136, 191], "paral": 136, "fully_shard": [136, 139, 141, 205, 206, 208], "libuv": 136, "tcpstore": [136, 151], "sdk": 136, "mobilenet": [136, 176], "v3": 136, "camera": [136, 176], "xnnpack": 136, "metal": 136, "shader": 136, "android": 136, "deeplab": 136, "fp32": [136, 138, 149, 162, 182, 201, 211, 265, 276], "torchrec": [136, 184, 260], "distributedmodelparallel": 136, "hamid": [137, 138], "shojanazeri": [137, 138], "yanli": [137, 138], "zhao": [137, 138], "shen": [137, 151, 174, 179, 181], "li": [137, 151, 153, 171, 174, 179, 181, 192], "fsdp1": 137, "huggingfac": [137, 138, 198, 214, 254, 281], "1t": [137, 149], "courtesi": 137, "patrick": 137, "hu": 137, "reduce_scatt": [137, 138, 141], "scatter": [137, 139, 151, 153, 190], "possess": [137, 228, 265], "toi": [137, 151, 181, 191, 194, 195, 206, 236], "fsdp_mnist": 137, "size_based_auto_wrap_polici": 137, "default_auto_wrap_polici": 137, "fsdp_auto_wrap_polici": 137, "auto_wrap_polici": [137, 138, 139], "steplr": [137, 138], "fully_sharded_data_parallel": 137, "cpuoffload": [137, 139], "backwardprefetch": [137, 138], "enable_wrap": [137, 138], "cleanup": [137, 138, 151, 205, 206], "dropout1": [137, 180], "dropout2": [137, 180], "9216": [137, 180], "ddp_loss": 137, "batch_idx": [137, 213, 247], "tloss": 137, "6f": 137, "keepdim": [137, 180], "view_a": [137, 180], "test_loss": 137, "2f": [137, 176, 179, 181], "fsdp_main": [137, 138], "1307": [137, 153, 180], "3081": [137, 153, 180], "dataset1": 137, "dataset2": 137, "sampler1": [137, 138], "num_replica": [137, 138], "sampler2": [137, 138], "train_kwarg": [137, 138], "test_kwarg": [137, 138], "test_batch_s": [137, 138], "cuda_kwarg": [137, 138], "my_auto_wrap_polici": 137, "min_num_param": 137, "init_start_ev": [137, 138], "enable_tim": [137, 138], "init_end_ev": [137, 138], "adadelta": 137, "step_siz": [137, 138, 211], "gamma": [137, 138, 161, 178, 179, 181], "elaps": [137, 183], "elapsed_tim": 137, "save_model": [137, 138], "barrier": [137, 138, 140, 151, 153, 261], "mnist_cnn": 137, "metavar": [137, 138, 179, 181], "store_tru": [137, 138], "110": [137, 181, 224], "85": [137, 212, 224, 229], "40": [137, 161, 162, 181, 183, 198, 211, 212, 224, 253, 266, 276, 281], "67462890625sec": 137, "_fsdp_wrapped_modul": 137, "flattenparamswrapp": 137, "_fpw_modul": 137, "inplac": [137, 281], "peak": [137, 139, 147, 168, 176, 198, 205, 251, 257, 258, 261, 265], "g4dn": 137, "xlarg": 137, "allgath": [137, 138, 141, 174, 239], "seal": 137, "20000": 137, "89130859375sec": 137, "auto_wrap": 137, "66": [137, 211, 212, 224], "offload": [137, 138, 139, 212, 220], "cpu_offload": [137, 139], "offload_param": [137, 139], "dpp": 137, "ddp_mnist": 137, "77766015625sec": 137, "blog": [137, 138, 144, 149, 198, 212, 222], "wright": 138, "rohan": [138, 180], "varma": [138, 180], "wikihow": 138, "p4dn": 138, "a100": [138, 142, 170, 192, 198, 265, 281], "pressur": [138, 205], "fdsp": 138, "xxl": 138, "billion": [138, 141], "3b": [138, 176], "wikihowal": 138, "wikihowsep": 138, "summarization_dataset": 138, "t5_train": 138, "autotoken": [138, 281], "gpt2tokenizerfast": 138, "t5token": 138, "t5forconditionalgener": 138, "modeling_t5": 138, "t5block": 138, "checkpoint_wrapp": 138, "checkpointimpl": 138, "apply_activation_checkpointing_wrapp": 138, "mixedprecis": 138, "shardingstrategi": 138, "fullstatedictconfig": 138, "statedicttyp": 138, "transformer_auto_wrap_polici": 138, "tqdm": [138, 154, 177, 281], "datetim": [138, 140, 263], "setup_model": 138, "from_pretrain": [138, 213, 254, 281], "get_date_of_run": 138, "2022": [138, 267], "08": [138, 159, 169, 181, 211, 212, 224, 253, 261], "31": [138, 159, 211, 212, 224, 229, 238], "12_pm": 138, "date_of_run": 138, "strftime": 138, "s_": [138, 178], "format_metrics_to_gb": 138, "gigabyt": 138, "metric_num": 138, "g_gigabyt": 138, "ndigit": 138, "fsdp_loss": 138, "inner_pbar": 138, "colour": 138, "desc": [138, 263], "r0": 138, "input_id": [138, 141, 254, 281], "source_id": 138, "attention_mask": [138, 254], "source_mask": 138, "target_id": 138, "train_accuraci": 138, "val_load": 138, "load_dataset": [138, 254, 281], "type_path": 138, "output_length": 138, "print_text": 138, "150": [138, 181], "val_dataset": 138, "t5_auto_wrap_polici": 138, "transformer_layer_cl": 138, "sharding_strategi": [138, 139], "shard_grad_op": [138, 139], "zero2": 138, "full_shard": [138, 139], "zero3": 138, "bf16_readi": 138, "is_bf16_support": 138, "loosevers": 138, "is_nccl_avail": [138, 261], "mp_polici": [138, 139], "bfsixteen": 138, "mixed_precis": [138, 139], "current_devic": [138, 223], "best_val_loss": 138, "inf": [138, 194, 211, 274, 277], "curr_val_loss": 138, "file_save_nam": 138, "time_of_run": 138, "dur": 138, "train_acc_track": 138, "val_acc_track": 138, "training_start_tim": 138, "track_memori": 138, "mem_alloc_track": 138, "mem_reserved_track": 138, "run_valid": 138, "zone": 138, "memory_alloc": 138, "memory_reserv": 138, "save_polici": 138, "offload_to_cpu": 138, "rank0_onli": 138, "state_dict_typ": 138, "full_state_dict": [138, 139], "cpu_stat": 138, "currepoch": 138, "prefix": [138, 142, 146, 154, 187, 192, 194, 224, 238, 257, 258, 263, 265], "save_nam": 138, "store_fals": 138, "nnode": [138, 151, 173, 261, 263], "transfom": 138, "mhsa": 138, "ffn": [138, 198], "bfloat16": [138, 139, 201, 214, 223, 236, 247, 261, 265, 276], "v100": [138, 192], "fpsixteen": 138, "param_dtyp": [138, 139], "reduce_dtyp": [138, 139], "buffer_dtyp": [138, 139], "fp32_polici": 138, "grad_bf16": 138, "4x": 138, "basi": 138, "oom": [138, 168, 223], "freed": [138, 168], "backward_pr": [138, 139], "backward_prefetch": [138, 139], "backward_post": [138, 139], "contact": [138, 284], "yifan": 139, "mao": 139, "fsdp": [139, 141, 149, 205, 206, 208], "unshard": [139, 195, 261], "recordstream": 139, "float8": 139, "nf4": 139, "qlora": 139, "eg": 139, "fsdpmodul": 139, "isinst": [139, 266, 281], "fsdptransform": 139, "tok_embed": [139, 141, 173], "fsdptransformerblock": 139, "joint": [139, 249], "to_loc": 139, "clip_grad_norm_": 139, "seq_len": 139, "queu": [139, 205], "set_modules_to_forward_prefetch": 139, "set_modules_to_backward_prefetch": 139, "perf": [139, 281], "layers_to_prefetch": 139, "num_to_forward_prefetch": 139, "num_to_backward_prefetch": 139, "upcast": 139, "model_arg": [139, 173], "fsdp_kwarg": 139, "mixedprecisionpolici": 139, "max_norm": 139, "resum": [139, 192, 206, 254], "distribute_tensor": 139, "mmap": 139, "full_sd": 139, "meta_sharded_sd": 139, "sharded_sd": 139, "param_nam": [139, 236], "full_tensor": 139, "sharded_meta_param": 139, "sharded_tensor": 139, "device_mesh": [139, 141, 208, 261], "full_param": 139, "cpu_state_dict": 139, "sharded_param": 139, "del": [139, 173, 211, 264, 266], "set_model_state_dict": 139, "broadcast_from_rank0": 139, "statedictopt": 139, "get_model_state_dict": 139, "set_optimizer_state_dict": 139, "get_optimizer_state_dict": 139, "modulewrappolici": 139, "transformerblock": [139, 141], "param_init_fn": 139, "itertool": [139, 181], "to_empti": [139, 236], "reset_paramet": 139, "sublay": 139, "reshard_after_forward": 139, "hybrid_shard": 139, "_hybrid_shard_zero2": 139, "offload_polici": 139, "cpuoffloadpolici": 139, "cast_forward_input": 139, "cast_root_forward_input": 139, "output_dtyp": [139, 263], "sync_module_st": 139, "rank0": [139, 179, 181, 263], "forward_prefetch": 139, "fsdp_modul": 139, "limit_all_gath": 139, "use_orig_param": 139, "flat": 139, "no_sync": [139, 239], "set_requires_gradient_sync": 139, "ignored_param": 139, "ignored_st": 139, "xilun": [140, 261], "roll": 140, "1k": [140, 141], "98304": 140, "96k": 140, "perf_count": 140, "getlogg": [140, 190], "var": 140, "preset": [140, 279], "env_rank": 140, "env_world_s": 140, "env_master_addr": 140, "env_master_port": 140, "23456": [140, 153], "tcp_store": 140, "is_mast": 140, "time_elaps": 140, "client": 140, "superior": [140, 276], "timeout": [140, 151, 174, 263], "store_based_barri": 140, "timedelta": [140, 263], "diststoreerror": 140, "_diststoreerror": 140, "_store_based_barri": 140, "group_nam": 140, "rendezvous_count": 140, "default_pg_timeout": 140, "logging_interv": 140, "store_kei": 140, "store_based_barrier_kei": 140, "worker_count": 140, "last_worker_kei": 140, "last_work": 140, "num_workers_join": 140, "tcpstore_test": 140, "number_run": 140, "spectrum": 140, "listen_fd": 140, "socket": [140, 153, 159, 239, 257], "listen_sock": 140, "af_inet": 140, "sock_stream": 140, "addr": [140, 263], "getsocknam": 140, "master_listen_fd": 140, "notimplementederror": 140, "gloo": [140, 151, 153, 174, 187, 195, 205, 258], "vairabl": 140, "notifi": [140, 179], "wanchao": [141, 208], "liang": [141, 208], "tianyu": 141, "liu": 141, "megatron": 141, "lm": 141, "sp": 141, "parallelstyl": 141, "parallelize_modul": 141, "foward": 141, "aris": [141, 194, 198, 254, 265, 274], "exceed": [141, 177], "domin": [141, 162, 190], "inter": [141, 150, 165, 208, 239], "ballpark": 141, "flop": [141, 195, 251], "llm": [141, 173, 276], "trillion": [141, 149], "month": 141, "llama": [141, 198, 214, 279], "70b": 141, "2k": 141, "dai": [141, 195, 236], "llama2": 141, "colwiseparallel": 141, "rowwiseparallel": 141, "sequenceparallel": 141, "rmsnormpython": 141, "preparemoduleinput": 141, "preparemoduleoutput": 141, "init_device_mesh": [141, 208, 261], "tp_mesh": [141, 208], "feedforward": 141, "swiglu": 141, "w2": 141, "silu": 141, "w1": 141, "w3": 141, "colwis": 141, "rowwis": 141, "parallelize_plan": 141, "layer_tp_plan": 141, "feed_foward": 141, "feed_forward": 141, "wq": 141, "wk": 141, "wv": 141, "wo": 141, "tp_plan": 141, "draft": [141, 153], "use_local_output": 141, "num_head": 141, "layer_id": [141, 173], "transformer_block": 141, "input_layout": 141, "output_layout": 141, "residu": 141, "attention_norm": 141, "ffn_norm": 141, "desired_input_layout": 141, "yellow": 141, "red": [141, 146, 188, 220], "loss_parallel": 141, "seq": 141, "dp": [141, 263], "mesh_2d": [141, 208], "submesh": 141, "dp_mesh": 141, "model_tp": 141, "model_2d": 141, "broadli": 142, "torchviz": [142, 148], "orang": [142, 176], "_save": 142, "kept": [142, 263], "_saved_self": 142, "_saved_oth": 142, "cycl": [142, 187, 201, 224, 229], "thumb": [142, 160, 177, 223], "pack_hook": 142, "unpack_hook": 142, "silli": 142, "harmless": 142, "debat": 142, "__repr__": [142, 224], "152": 142, "48gb": 142, "5gb": 142, "6x": 142, "leak": 142, "autograd_saved_tensors_hooks_tutori": [142, 184, 260], "david": 143, "eriksson": 143, "balandat": 143, "methodologi": [143, 213], "laptop": 143, "sustain": [143, 205], "studi": [143, 175, 190], "botorch": 143, "bayesian": 143, "mnist_train_na": [143, 163, 184, 260], "appdef": 143, "kubernet": 143, "local_cwd": 143, "fetch": [143, 145, 179, 180, 181, 195, 249], "proxi": [143, 224, 243, 244, 272, 275], "tensorboardcurvemetr": 143, "curve_nam": 143, "lower_is_bett": 143, "favor": [143, 165, 177, 194], "multiobjectiveoptimizationconfig": 143, "generationstrategi": 143, "scheduleropt": 143, "max_pending_tri": 143, "pareto": 143, "frontier": 143, "surrog": 143, "uncertainti": 143, "95": [143, 181, 212], "num_param": 143, "val_acc": 143, "contour": 143, "hidden_size_1": 143, "kiuk": 143, "chung": 143, "tristan": [143, 176], "rice": [143, 176], "ax_multiobjective_nas_tutori": [143, 163, 184, 260], "surnam": 144, "spell": 144, "lua": [144, 145, 183], "unreason": [144, 145], "roman": 144, "alphabet": 144, "n_letter": 144, "line_length": 144, "all_lett": 144, "linetotensor": 144, "namesdataset": 144, "20074": 144, "charrnn": 144, "58": [144, 162, 211, 281], "label_from_output": 144, "histor": [144, 145], "all_loss": [144, 145], "minu": [144, 187], "bright": 144, "incorrectli": 144, "chines": [144, 145], "korean": 144, "italian": 144, "greek": 144, "poorli": 144, "gender": 144, "writer": [144, 176, 177, 188, 205, 237, 263], "subreddit": 144, "char_rnn_classification_tutori": [144, 166, 184, 260], "russian": 145, "ru": 145, "rovakov": 145, "uantov": 145, "shavakov": 145, "german": 145, "ger": 145, "gerren": 145, "ereng": 145, "rosher": 145, "spa": 145, "salla": 145, "parer": 145, "allan": 145, "chi": 145, "chan": 145, "iun": 145, "category_lin": 145, "o2o": 145, "muscl": [145, 190], "fuzz": 145, "chao": 145, "abcd": 145, "eo": [145, 183], "n_categori": 145, "randomtrainingexampl": 145, "contrast": [145, 151, 170, 171, 194, 272], "timesinc": 145, "timestamp": [145, 158, 220], "print_everi": 145, "plot_everi": 145, "output_nam": 145, "fiction": 145, "countri": 145, "citi": 145, "char_rnn_generation_tutori": [145, 166, 184, 260], "simon": 146, "fan": [146, 176], "torch_log": [146, 194, 244, 246, 254, 259, 260, 276], "_dynamo": [146, 159, 192, 194, 211, 244, 254], "compiled_autograd": 146, "intercept": 146, "bytecod": [146, 192], "aotdispatch": 146, "rout": [146, 159, 194], "rewritten": 146, "compiled_autograd_verbos": 146, "stderr": 146, "aot0_": 146, "aot0_view_2": 146, "view_2": 146, "aot": [146, 159, 211, 246, 251, 259, 260], "unoptim": [146, 192], "aot_eag": [146, 159], "fn": [146, 153, 157, 159, 192, 203, 211, 249, 252, 266], "temp": [146, 248], "graph_break": [146, 254], "unique_graph": 146, "call_hook": 146, "div": [146, 159, 211, 272], "adjac": 147, "hardcod": [147, 194], "dilat": 147, "track_running_statist": 147, "denomin": 147, "nenadmarku": [147, 191], "bulk": 147, "fusedconvbn": 147, "geforc": 147, "rtx": 147, "3070": 147, "56gb": 147, "unfus": 147, "68gb": 147, "shallow": [147, 154], "bn": [147, 191], "custom_function_conv_bn_tutori": [147, 184, 260], "equip": [148, 154, 257, 272], "staticmethod": [148, 179, 190], "grad_out": 148, "finit": [148, 165], "differenc": 148, "magnifi": 148, "gradgradcheck": [148, 239], "grad_x": 148, "make_dot": 148, "dout": 148, "ouptut": 148, "sinh": 148, "cosh": 148, "expx": 148, "expnegx": 148, "_grad_out_exp": 148, "_grad_out_negexp": 148, "sinhbad": 148, "cube_backward": 148, "cubebackward": 148, "cube_forward": 148, "cube_backward_backward": 148, "sav_grad_out": 148, "cube_backward_backward_grad_out": 148, "cube": 148, "dgrad_out": 148, "reachabl": [149, 150, 153], "2xlarg": [149, 150], "hydra": 149, "slurm": [149, 150, 151, 153], "char_dataset": 149, "gpt2_train_cfg": 149, "bucket": [149, 239], "aggress": 149, "rendezv": [150, 174], "nccl_debug": 150, "verbos": [150, 190, 194, 201, 207], "diagnos": 150, "nccl_socket_ifnam": 150, "eth0": 150, "joe": 151, "zhu": [151, 159], "chirag": [151, 263], "pandya": [151, 263], "fire": 151, "clarifi": 151, "filestor": 151, "libtmp": 151, "some_fil": 151, "acc": [151, 190], "current_acceler": [151, 153], "get_default_backend_for_devic": 151, "toymodel": [151, 205, 206, 208], "net1": [151, 205, 206, 207, 208], "net2": [151, 205, 206, 207, 208], "demo_bas": 151, "ddp_model": [151, 258], "loss_fn": [151, 173, 179, 205, 206, 258], "run_demo": 151, "demo_fn": 151, "caution": 151, "straggler": [151, 187], "inevit": 151, "spike": [151, 176], "AND": 151, "recoveri": 151, "torchelast": 151, "demo_checkpoint": 151, "checkpoint_path": 151, "gettempdir": 151, "toympmodel": 151, "dev0": 151, "dev1": 151, "output_devic": 151, "demo_model_parallel": 151, "mp_model": 151, "ddp_mp_model": 151, "n_gpu": 151, "elastic_ddp": 151, "set_device_index": 151, "rdzv_id": [151, 208], "rdzv_backend": 151, "rdzv_endpoint": [151, 208], "29400": [151, 208], "scontrol": 151, "hostnam": 151, "slurm_nodelist": 151, "srun": 151, "torchrun_script": 151, "s\u00e9b": 153, "arnold": 153, "sysadmin": 153, "coordin": [153, 185, 197, 257, 265, 275], "pdsh": 153, "clustershel": 153, "init_process": 153, "127": [153, 155, 184, 260], "set_start_method": 153, "ip": 153, "recv": [153, 173, 181], "irecv": 153, "dst": 153, "req": 153, "sent": [153, 171, 179, 194], "behaviour": 153, "fanci": 153, "baidu": 153, "deepspeech": 153, "facebook": 153, "communc": 153, "new_group": [153, 173, 208], "commut": 153, "band": 153, "bor": 153, "bxor": 153, "premul_sum": 153, "scatter_list": 153, "gather_list": 153, "all_to_al": 153, "output_tensor_list": 153, "input_tensor_list": 153, "random_split": 153, "data_idx": 153, "datapartition": 153, "1234": 153, "data_len": 153, "part_len": 153, "partition_dataset": 153, "get_world_s": 153, "bsz": 153, "partition_s": 153, "train_set": [153, 187], "30000": 153, "num_batch": 153, "ceil": 153, "epoch_loss": 153, "average_gradi": 153, "voil\u00e0": 153, "send_buff": 153, "recv_buff": 153, "accum": [153, 276], "send_req": 153, "bandwidth": [153, 187, 195, 212, 285], "subsect": 153, "mpi": 153, "eleg": 153, "device_typ": [153, 247, 261], "smi": [153, 223], "mvapich2": 153, "ipc": [153, 187], "recompil": [153, 192, 204, 244, 248, 249], "requisit": 153, "forg": [153, 257], "openmpi": 153, "mpirun": 153, "myscript": 153, "handshak": 153, "superflu": 153, "xccl": 153, "everybodi": 153, "readili": 153, "race": 153, "fcntl": 153, "nf": [153, 263], "sharedfil": 153, "everyon": 153, "unclear": [153, 194], "natalia": 153, "gimelshein": 153, "actor": 154, "carrier": [154, 177], "step_mdp": 154, "brought": [154, 171, 177, 194], "84x84": 154, "accessori": [154, 176], "inittrack": 154, "stamp": 154, "is_init": 154, "tensordictprim": 154, "primer": [154, 275], "disappear": 154, "lstmmodul": 154, "backbon": [154, 190], "flank": 154, "assist": [154, 208], "tensordictmodulebas": 154, "batch_first": 154, "make_tensordict_prim": 154, "qvaluemodul": 154, "action_valu": 154, "qvalueactor": 154, "set_recurrent_mod": 154, "uniniti": 154, "dqnloss": 154, "delay_valu": 154, "lazymemmapstorag": 154, "dqn_with_rnn_tutori": [154, 184, 260], "tradition": 155, "simplemlp": 155, "pretend": [155, 170], "num_model": 155, "6400": 155, "predictions_diff_minibatch_loop": 155, "predictions2": 155, "stack_module_st": 155, "functional_cal": [155, 165, 170], "base_model": 155, "fmodel": 155, "predictions1_vmap": 155, "atol": [155, 261, 281], "rtol": 155, "in_dim": [155, 170, 284], "predictions2_vmap": 155, "without_vmap": 155, "stmt": [155, 203, 211, 224, 281], "with_vmap": 155, "timeit": [155, 238], "0x7fd10ac2a470": 155, "0x7fd10ac1c3d0": 155, "465": 155, "weren": [155, 170], "forced_alignment_tutori": 156, "incomplet": [157, 171], "eagerli": [157, 168, 194, 252], "alongsid": [157, 188, 190, 195, 223, 243], "primal": 157, "dual": 157, "dual_level": 157, "fresh": [157, 223], "check_forward_ad": 157, "check_backward_ad": 157, "check_undefined_grad": 157, "check_batched_grad": 157, "functorch": 157, "reformul": [157, 165], "ft": 157, "make_functional_with_buff": 157, "analog": [157, 194, 195, 274, 275], "consolid": [157, 179, 195], "dual_numb": 157, "forward_ad_usag": [157, 184, 260], "jame": 158, "reed": 158, "longest": 158, "nicer": 158, "tabul": [158, 192, 251, 263], "ca": 158, "graphmodul": 158, "symbolic_trac": 158, "profilinginterpret": 158, "clock": [158, 224], "51393": 158, "happi": 158, "hear": 158, "fx_profiling_tutori": [158, 184, 260], "xuan": 159, "liao": 159, "haozh": 159, "jiong": [159, 266, 276], "gong": [159, 266, 276], "weihan": 159, "intricaci": 159, "troubleshoot": 159, "pinpoint": [159, 194, 207], "narrow": [159, 194, 263, 277], "torch_compile_debug": 159, "xx": [159, 213], "ir": [159, 249], "_inductor": [159, 194, 211, 214, 253, 266, 276], "model___20": 159, "tmp": [159, 190, 211, 248, 249, 263, 266], "torchinductor_root": 159, "rx": 159, "crxfi2ybd7yp5sbj2pnhw33wfhtdw7wumvrobyp5sjvdui5ktjc2": 159, "fx_graph_runn": 159, "fx_graph_transform": 159, "ir_pre_fus": 159, "ir_post_fus": 159, "output_cod": [159, 211, 255, 276], "gv": 159, "cgv6n5aotqjo5w4vknjibhengeycuattfto532hkxpozszcgxr3x": 159, "tmp2": [159, 211, 276], "tmp1": [159, 211, 276], "exc": [159, 254], "backendcompilerfail": 159, "cppcompileerror": 159, "xg": 159, "cxga5tk3b4lkwoxyigrtocjp5s7vc5cg2ikuscf6bk6pjqip2bhx": 159, "unsign": [159, 224], "char": [159, 213], "max_propagate_nan": 159, "tmp3": [159, 211, 276], "tmp0": [159, 211, 276], "candid": 159, "scalar_t": 159, "deduct": 159, "substitut": [159, 160, 168], "deduc": 159, "in_ptr0": [159, 211], "in_ptr1": [159, 211], "out_ptr0": 159, "pragma": [159, 276], "gcc": [159, 276], "ivdep": [159, 276], "i0": 159, "0l": [159, 211, 276], "8390l": 159, "1l": [159, 266, 276], "i1": 159, "8l": 159, "buf0": [159, 266], "schedulernod": 159, "computedbuff": 159, "memorydep": 159, "c0": 159, "67120": 159, "unmet_depend": 159, "met_depend": 159, "arg0_1": [159, 211, 266], "8390": 159, "arg1_1": [159, 211], "nodeus": 159, "can_inplac": 159, "buf0_loop_bodi": 159, "var_rang": 159, "z0": 159, "index0": 159, "index1": 159, "get_index": 159, "get_index_1": 159, "load_1": 159, "get_index_2": 159, "minifi": 159, "dead": 159, "minif": 159, "tol": 159, "test_script": 159, "expected_result": 159, "actual_result": 159, "torchdynamo_repro_aft": 159, "torchdynamo_repro_level": 159, "mobilebertforquestionansw": 159, "xeon": [159, 162, 201, 213, 259], "platinum": 159, "8358": 159, "60ghz": 159, "kmp_blocktim": [159, 239, 257], "kmp_set": 159, "kmp_affin": [159, 239, 257], "compact": [159, 239, 257], "ld_preload": [159, 239, 257], "conda_prefix": [159, 224], "libiomp5": [159, 239, 257], "libjemalloc": [159, 257], "malloc_conf": [159, 257], "oversize_threshold": [159, 257], "background_thread": [159, 257], "metadata_thp": [159, 257], "dirty_decay_m": 159, "muzzy_decay_m": 159, "numactl": [159, 239, 257], "bench": 159, "eager_t": 159, "num_it": 159, "inductor_t": 159, "802": 159, "1023553796113": 159, "339": 159, "95180135127157": 159, "359459053287382": 159, "355x": 159, "enable_kernel_profil": 159, "370": 159, "814m": 159, "362": 159, "89": [159, 181, 229], "161": 159, "276m": 159, "363": 159, "97": [159, 181, 212], "121": [159, 229], "416m": 159, "488": [159, 224], "154m": 159, "194": 159, "clamp_min": [159, 212], "81": [159, 212], "444m": 159, "96": [159, 181, 212], "bmm": [159, 201, 224, 277], "258m": [159, 212], "810": 159, "920m": 159, "447m": 159, "_softmax": 159, "087m": 159, "376": 159, "888m": 159, "430m": 159, "502m": 159, "850": 159, "377m": 159, "386": [159, 181, 229], "index_select": 159, "000u": [159, 229], "986": 159, "458": 159, "420m": 159, "703": 159, "963": 159, "864m": 159, "mkl": [159, 229, 257, 276], "_mkl_linear": [159, 276], "231": [159, 224, 229], "573m": [159, 229], "992m": 159, "336": [159, 229], "642m": 159, "graph_0_cpp_fused_constant_pad_nd_embedding_0": 159, "915": 159, "911": [159, 211, 246, 260], "graph_0_cpp_fused__mkl_linear_add_mul_relu_151": 159, "901": 159, "graph_0_cpp_fused__mkl_linear_add_mul_relu_226": 159, "899": 159, "graph_0_cpp_fused__mkl_linear_add_mul_relu_361": 159, "898": 159, "graph_0_cpp_fused__mkl_linear_add_mul_relu_121": 159, "895": 159, "graph_0_cpp_fused__mkl_linear_add_mul_relu_31": 159, "893": 159, "graph_0_cpp_fused__mkl_linear_add_mul_relu_76": 159, "892": [159, 176, 224], "graph_0_cpp_fused__mkl_linear_add_mul_relu_256": 159, "graph_0_cpp_fused__mkl_linear_add_mul_relu_346": 159, "graph_0_cpp_fused__mkl_linear_add_mul_relu_241": 159, "891": 159, "graph_0_cpp_fused__mkl_linear_add_mul_relu_316": 159, "graph_0_cpp_fused__mkl_linear_add_mul_relu_91": 159, "890": 159, "graph_0_cpp_fused__mkl_linear_add_mul_relu_106": 159, "graph_0_cpp_fused__mkl_linear_add_mul_relu_211": 159, "graph_0_cpp_fused__mkl_linear_add_mul_relu_61": 159, "889": 159, "graph_0_cpp_fused__mkl_linear_add_mul_relu_286": 159, "graph_0_cpp_fused_": 159, "63x": 159, "cblas_sgemm_comput": 159, "339m": 159, "94x": 159, "impress": [159, 194], "cpp_fused__mkl_linear_add_mul_relu_151": 159, "clrlgu27q4ggd472umdzwsu6qcpqxcuusjxqvx2hwitjbujiiz7z": 159, "bottl": [159, 205], "neck": [159, 205], "780875144992024": 159, "9588955780491233": 159, "0286805751604735": 159, "smallest": [159, 175], "solid": [159, 200], "analyt": 159, "hotspot": [159, 220], "phenomenon": 159, "inductor_debug_cpu": [159, 184, 260], "annoi": 160, "jax": [160, 165, 284], "argnum": 160, "millisecond": [160, 174, 239], "get_perf": 160, "rigor": 160, "taller": 160, "hessiani": 160, "overwhelm": 160, "jacobians_hessian": [160, 184, 260], "yuansong": 161, "steven": 161, "guo": 161, "cheatsheet": 161, "companion": 161, "bro": 161, "ne": [161, 183, 229], "emul": [161, 214], "tube": 161, "mushroom": 161, "screen": [161, 178, 220], "next_stat": [161, 178], "240": [161, 181, 229], "pipe": 161, "sky": 161, "grayscaleobserv": 161, "resizeobserv": 161, "skipfram": 161, "framestack": 161, "hi": [161, 277], "movement": 161, "exploration_r": 161, "he": [161, 183, 191], "marionet": 161, "ddqn": 161, "_e": 161, "argmax_": 161, "td_target": 161, "td_t": 161, "td_e": 161, "leftarrow": 161, "nabla": 161, "episod": [161, 178, 179, 181], "mario_rl_tutori": [161, 184, 260], "vitali": 162, "fedyunin": 162, "densest": 162, "4x4": 162, "10x3x16x16": 162, "768": [162, 281], "minor": [162, 181, 188, 213], "ambigu": [162, 273, 274], "n1hw": 162, "contrari": [162, 171, 175], "restrid": 162, "unintend": 162, "apex": 162, "main_amp": 162, "resnet50": [162, 176, 179, 213, 247], "o2": 162, "opt_level": 162, "keep_batchnorm_fp32": 162, "nonetyp": 162, "loss_scal": 162, "7603": 162, "cast_model_typ": 162, "patch_torch_funct": 162, "master_weight": 162, "125": [162, 229], "866": 162, "230": [162, 181, 190], "949": 162, "6735125184": 162, "6735": 162, "prec": 162, "259": 162, "562": 162, "773": 162, "481": 162, "355": 162, "693": 162, "6968704462": 162, "6852": 162, "55": [162, 211, 224, 257], "258": 162, "775": 162, "089": 162, "433": 162, "965": 162, "7877287269": 162, "7194": 162, "51": [162, 181, 211, 212], "833": 162, "410": 162, "771": 162, "710": 162, "487": 162, "8285319805": 162, "7467": 162, "260": [162, 181], "380": 162, "770": [162, 211], "090": 162, "525": 162, "908": 162, "7370464802": 162, "7447": 162, "56": [162, 176, 211, 224, 229, 257, 281], "360": 162, "623": 162, "555": 162, "728": 162, "7592862844": 162, "7472": 162, "917": 162, "345": [162, 197], "774": 162, "746": [162, 224], "115": [162, 212], "9698858261": 162, "9218": 162, "335": [162, 181, 258], "324": 162, "597": 162, "659": 162, "2505953312": 162, "0879": 162, "767": 162, "785": 162, "7579724789": 162, "7580": 162, "198": 162, "482": 162, "135": [162, 176, 224], "414": 162, "716": [162, 212, 224], "7007197738": 162, "7293": 162, "250": [162, 181, 229], "387": 162, "1010": 162, "516": 162, "7113101482": 162, "7233": 162, "667": 162, "197": 162, "340": 162, "1013": 162, "023": 162, "588": 162, "333": 162, "8943189979": 162, "7661": 162, "541": 162, "641": 162, "7113249302": 162, "9551": 162, "1011": 162, "163": 162, "683": 162, "574": 162, "8537774086": 162, "7716": 162, "279": 162, "453": 162, "7595844269": 162, "3413": 162, "429": 162, "269": 162, "827": 162, "743": 162, "883": 162, "8196096420": 162, "4011": 162, "volta": [162, 223, 239], "alexnet": 162, "mnasnet0_5": 162, "mnasnet0_75": 162, "mnasnet1_0": 162, "mnasnet1_3": 162, "mobilenet_v2": [162, 176, 197], "resnet101": 162, "resnet152": 162, "resnet34": 162, "resnext50_32x4d": 162, "shufflenet_v2_x0_5": [162, 176], "shufflenet_v2_x1_0": [162, 176], "shufflenet_v2_x1_5": [162, 176], "shufflenet_v2_x2_0": [162, 176], "squeezenet1_0": 162, "squeezenet1_1": 162, "vgg11": 162, "vgg11_bn": 162, "vgg13": 162, "vgg13_bn": 162, "vgg16": 162, "vgg16_bn": 162, "vgg19_bn": 162, "wide_resnet101_2": 162, "wide_resnet50_2": 162, "ic": 162, "lake": [162, 213], "densenet121": 162, "densenet161": 162, "densenet169": 162, "googlenet": [162, 176], "inception_v3": [162, 176], "resnext101_32x8d": [162, 176], "spite": 162, "nc11": 162, "memory_format_tutori": [162, 184, 260], "year": [165, 169, 198], "j_": 165, "diagon": 165, "beforehand": 165, "asymptot": 165, "i_o": 165, "i_": 165, "e_o": 165, "textrm": 165, "_o": 165, "tensorfloat": 165, "sacrific": 165, "empirical_ntk_ntk_vp": 165, "luck": [165, 168, 195], "altogeth": [165, 274], "neural_tangent_kernel": [165, 184, 260], "french": [166, 183], "seq2seq_translation_tutori": [166, 183, 184, 260], "homepag": [167, 262], "ooz": 168, "_might_": 168, "2p": 168, "ephemer": 168, "timelin": [168, 187, 220], "memory_viz": 168, "devot": 168, "bat": [168, 267], "2gb": [168, 176], "6gb": 168, "foreach": [168, 211], "reveal": [168, 182, 192, 222, 224], "bullet": 168, "sizabl": [168, 171], "tantamount": 168, "eat": 168, "lora": 168, "win": 168, "unlock": [168, 279], "vit_l_16": 168, "neat": 168, "slate": 168, "woohoo": 168, "apart": 168, "shrunk": 168, "0gb": 168, "optimizer_step_in_backward_tutori": [168, 184, 260], "lezcano": 169, "surprisingli": 169, "ill": 169, "frobeniu": 169, "spectral": 169, "lipschitz": 169, "x\u1d40": 169, "upper": [169, 182, 194, 229], "triangular": 169, "triu": 169, "5244": 169, "9472": 169, "4252": 169, "2440": [169, 224], "0221": 169, "4567": 169, "linearsymmetr": 169, "n_featur": 169, "reimplement": [169, 175, 194], "register_parametr": 169, "parametrizedlinear": [169, 281], "moduledict": [169, 173, 281], "parametrizationlist": [169, 281], "3313": 169, "5453": 169, "1494": 169, "3659": 169, "5553": 169, "1564": 169, "skew": [169, 187, 229], "in_channel": [169, 191], "out_channel": [169, 191], "0921": [169, 281], "0859": 169, "selectbackward0": 169, "1250": 169, "0439": 169, "0583": 169, "unparametr": 169, "nparametr": 169, "5258": 169, "4220": 169, "1245": 169, "0096": 169, "1440": 169, "5236": 169, "2917": 169, "0441": 169, "4862": 169, "1301": 169, "4108": 169, "weight_orig": [169, 175], "distbackward0": 169, "modulelist": 169, "inbuilt": 169, "noisyparametr": 169, "caylei": 169, "cayleymap": 169, "register_buff": 169, "linalg": 169, "0027e": 169, "spd": 169, "matrixexponenti": 169, "matrix_exp": 169, "layer_orthogon": 169, "layer_spd": 169, "eigvalsh": 169, "5858e": 169, "3444e": 169, "right_invers": 169, "cayley_transform": 169, "matrix_map": 169, "orthogonal_": 169, "neg_": 169, "4356": 169, "succinctli": 169, "pruningparametr": 169, "p_drop": 169, "full_lik": 169, "bernoulli": 169, "niniti": 169, "6740": 169, "2326": 169, "4565": 169, "2567": 169, "3055": 169, "3268": 169, "9615": 169, "7688": 169, "5570": 169, "5816": 169, "5828": 169, "4388": 169, "mulbackward0": 169, "remove_parametr": 169, "nafter": 169, "unconstrain": 169, "0829": 169, "2094": 169, "3408": 169, "0253": 169, "5197": 169, "3994": 169, "0361": 169, "3507": 169, "2703": 169, "subbackward0": 169, "parametri": 169, "leave_parametr": 169, "5583": 169, "2718": 169, "2566": 169, "2860": 169, "1076": 169, "2396": 169, "3270": 169, "5448": 169, "066": [169, 184, 260], "privaci": [170, 175], "sample_grad": 170, "compute_loss": 170, "ft_compute_grad": 170, "0th": [170, 175, 182, 277], "25x": [170, 190, 281], "opacu": 170, "per_sample_grad": [170, 184, 260], "cpu_tensor": 171, "cuda_tensor": [171, 239], "erron": 171, "carefulli": [171, 239], "distinguish": [171, 181, 188], "isol": [171, 192], "illus": 171, "circumst": [171, 223], "anywher": 171, "cudastreamsynchron": 171, "dma": 171, "volterra": 171, "tesla": 171, "h100": [171, 192], "t3_cuda": 171, "belief": [171, 194], "brand": 171, "cudahostalloc": 171, "cudamemcpi": 171, "doubt": 171, "interestingli": 171, "pronounc": 171, "tick": 171, "__whenev": 171, "memory__": 171, "corrupt": 171, "garbag": 171, "reliabl": [171, 224], "annihil": 171, "legitim": 171, "notori": 171, "inher": [171, 194, 195, 206], "blockag": 171, "non_blocking_pin": 171, "ration": 171, "outweigh": [171, 212], "perman": [171, 175], "shuttl": 171, "expedit": 171, "advers": 171, "bu": 171, "monopol": 171, "calibr": [171, 214, 279], "pinmem_nonblock": [171, 184, 260], "huang": [173, 174, 205, 206, 261], "microbatch": 173, "micro": 173, "educ": [173, 198], "dataclass": 173, "modelarg": 173, "n_head": 173, "witout": 173, "layernorm": [173, 198, 281], "splitpoint": 173, "pipelinestag": 173, "schedulegpip": 173, "pp_group": 173, "stage_index": 173, "num_stag": 173, "init_distribut": 173, "peer": [173, 258], "manual_model_split": 173, "elif": [173, 211], "tracer": 173, "split_spec": 173, "4th": [173, 201], "mirror": 173, "build_stag": 173, "gpipe": 173, "1f1b": 173, "interleaved1f1b": 173, "loopedbf": 173, "num_microbatch": 173, "example_input_microbatch": 173, "tracer_model_split": 173, "tokenwise_loss_fn": 173, "n_microbatch": 173, "pipelining_tutori": 173, "tian": 174, "si": 174, "zeroredundancyoptim": [174, 259], "processgroupnccl": 174, "processgroupgloo": 174, "processgroupmpi": 174, "ucc": 174, "oneccl": [174, 239], "trainum": 174, "emerg": 174, "backenddummi": 174, "chrono": 174, "outputtensor": 174, "inputtensor": 174, "allgatheropt": 174, "allreduceopt": 174, "workdummi": 174, "optyp": 174, "ivalu": [174, 213], "recvanysourc": 174, "future_": 174, "iscomplet": 174, "issuccess": 174, "kunsettimeout": 174, "getfutur": 174, "outputtensorvec": 174, "listtyp": 174, "tensortyp": 174, "markcomplet": 174, "createbackenddummi": 174, "backenddummyconstructor": 174, "__attribute__": 174, "register_backend": 174, "cpp_function": [174, 224], "torch_extension_nam": 174, "libraries_dir": 174, "abspath": 174, "dummy_collect": 174, "builtin": [174, 224, 238], "michela": 175, "paganini": 175, "biolog": 175, "batteri": 175, "subnetwork": 175, "lotteri": 175, "ticket": 175, "destruct": [175, 257], "0a0": 175, "8e8a5e0": 175, "lecun": 175, "1998": 175, "unprun": 175, "basepruningmethod": 175, "adequ": [175, 177], "_orig": 175, "intact": [175, 179, 236], "weight_mask": 175, "_mask": 175, "forward_pre_hook": 175, "l1_unstructur": 175, "bias_orig": 175, "bias_mask": 175, "pruningcontain": 175, "compute_mask": 175, "ln_structur": 175, "undo": 175, "reassign": 175, "global_unstructur": 175, "apply_mask": 175, "unstructur": 175, "preprun": 175, "pruning_typ": 175, "pruning_tutori": [175, 184, 260], "sink": 176, "5v": 176, "sd": [176, 264], "card": [176, 182], "8gb": 176, "arm": [176, 212], "64bit": 176, "aarch64": 176, "arm64": 176, "raspberrypi": 176, "raspios_arm64": 176, "rpi": 176, "sdcard": 176, "start_x": 176, "128m": 176, "gpu_mem": 176, "commment": 176, "camera_auto_detect": 176, "v4l2": 176, "reboot": 176, "video4linux2": 176, "video0": 176, "picamera": 176, "36fp": 176, "30fp": 176, "framer": 176, "cv2": 176, "cap": [176, 177, 187], "videocaptur": 176, "cap_prop_frame_width": 176, "cap_prop_frame_height": 176, "cap_prop_fp": 176, "bgr": 176, "ret": [176, 179], "input_tensor": 176, "input_batch": 176, "qnnpack": 176, "33": [176, 181, 184, 211, 212, 224], "mobilenet_v3_larg": 176, "109": 176, "233": [176, 181], "885": [176, 212], "204": [176, 212, 224], "132": 176, "82": [176, 212, 229], "int8": [176, 201, 214, 265, 276], "prequant": 176, "20fp": 176, "cap_v4l2": 176, "last_log": 176, "frame_count": 176, "ui": [176, 187, 220, 237, 259], "htop": 176, "mug": 176, "allevi": [176, 199], "set_num_thread": 176, "repetit": [177, 224], "maximis": 177, "clipppoloss": 177, "theta_k": 177, "pi_": 177, "lingua": 177, "franca": 177, "sub_batch_s": 177, "deepmind": [177, 185], "interchang": 177, "panel": [177, 187], "transmit": 177, "gymwrapp": 177, "loos": 177, "supplementari": 177, "stringent": 177, "n_step": [177, 179, 181], "mu_": 177, "d_ob": 177, "d_action": 177, "mu": [177, 190], "normalparamextractor": 177, "probabilisticactor": 177, "tanhnorm": 177, "discount": [177, 178, 179], "amort": [177, 179], "datacollector": 177, "multisyncdatacollector": 177, "refil": 177, "replaybuff": 177, "gae": 177, "value_target": 177, "videorecord": 177, "reinforcement_ppo": [177, 184, 260], "tower": 178, "cart": 178, "pole": 178, "upright": 178, "fork": [178, 257], "classic_control": 178, "action_spac": 178, "observation_spac": 178, "decorrel": 178, "replaymemori": 178, "cyclic": 178, "formul": 178, "r_": 178, "t_0": 178, "r_t": 178, "uncertain": 178, "tempor": 178, "max_a": 178, "univers": [178, 190], "obei": 178, "bellman": 178, "huber": 178, "noisi": [178, 224, 238], "mathcal": 178, "le": [178, 183], "mathrm": 178, "select_act": [178, 179, 181], "eps_start": 178, "eps_end": 178, "eps_decai": 178, "plot_dur": 178, "underneath": [178, 194], "tau": 178, "optimize_model": 178, "s_t": 178, "a_t": 178, "num_episod": [178, 179], "target_net": 178, "reinforcement_q_learn": [178, 184, 260], "calle": [179, 180], "unblock": 179, "idl": [179, 187, 229], "callback": 179, "paus": 179, "update_and_fetch_model": 179, "future_model": 179, "batch_update_s": 179, "batchupdateparameterserv": 179, "curr_update_s": 179, "get_model": 179, "ps_rref": 179, "local_valu": [179, 180], "fut": [179, 181], "setti": 179, "set_result": 179, "rpc_sync": [179, 180, 181], "image_w": 179, "image_h": 179, "one_hot_indic": 179, "random_": 179, "get_worker_info": [179, 181], "543": 179, "num": 179, "affine1": [179, 181], "affine2": [179, 181], "action_scor": [179, 181], "govern": 179, "select_action_batch": 179, "shortli": 179, "run_episod": [179, 181], "agent_rref": [179, 181], "ep_reward": [179, 181], "num_step": 179, "start_step": 179, "from_numpi": [179, 181], "curr_reward": 179, "prob": [179, 181, 188], "saved_log_prob": [179, 181], "rob": 179, "ob_rref": [179, 181], "running_reward": [179, 181], "ob_rank": [179, 181], "ob_info": [179, 181], "observer_nam": [179, 181], "future_act": 179, "pending_st": 179, "select_acion": 179, "ob_id": [179, 181], "log_prob": [179, 181], "stitch": [179, 180], "async": [179, 181, 195, 205, 239], "oberv": [179, 181], "wait_al": 179, "policy_loss": [179, 181], "passiv": [179, 181], "run_work": [179, 180, 181], "n_episod": 179, "print_log": 179, "init_rpc": [179, 180, 181], "agent_nam": [179, 181], "i_episod": [179, 181], "last_reward": [179, 181], "tlast": [179, 181], "taverag": [179, 181], "shutdown": [179, 180, 181], "tik": 179, "tok": 179, "dist_autograd": [180, 181], "num_gpu": 180, "dropout2d": 180, "next_devic": 180, "caller": 180, "call_method": 180, "remote_method": 180, "arg1": 180, "arg2": 180, "foo_inst": 180, "parameterserv": 180, "input_devic": 180, "intention": [180, 181], "inp": [180, 194, 207, 276], "miscellan": 180, "get_dist_gradi": 180, "get_gradi": 180, "get_param_rref": 180, "cid": 180, "cpu_grad": 180, "k_cpu": 180, "v_cpu": 180, "paramt": 180, "param_rref": [180, 181], "run_parameter_serv": 180, "param_serv": 180, "global_lock": 180, "get_parameter_serv": 180, "parameter_serv": 180, "shut": 180, "offlin": 180, "trainernet": 180, "param_server_rref": 180, "get_global_param_rref": 180, "paramat": 180, "remote_param": [180, 181], "model_output": 180, "run_training_loop": 180, "nueral": 180, "context_id": [180, 181], "get_accuraci": 180, "correct_sum": 180, "trainer_": 180, "traffic": 180, "listen": 180, "subprocess": [180, 224, 239], "rpc_parameter_serv": 180, "solver": 181, "formatter_class": 181, "argumentdefaultshelpformatt": 181, "log_interv": 181, "report_reward": 181, "_max_episode_step": 181, "lifetim": 181, "finfo": 181, "reward_threshold": 181, "finish_episod": 181, "min_reward": 181, "surpass": 181, "ob": 181, "ctrl": 181, "475": 181, "62": [181, 211, 281], "111": [181, 224, 257], "131": 181, "130": [181, 212], "140": 181, "104": 181, "160": [181, 190, 224, 229], "170": [181, 197], "126": 181, "180": [181, 194, 212, 224], "213": 181, "322": [181, 212], "165": 181, "272": [181, 212], "210": 181, "168": [181, 257], "184": 181, "208": [181, 190, 222], "270": [181, 190], "405": 181, "280": 181, "443": [181, 229], "290": 181, "464": 181, "3163778435275": 181, "embeddingt": 181, "destin": 181, "rnnmodel": 181, "ntoken": 181, "ninp": 181, "nhid": 181, "nlayer": 181, "emb_table_rref": 181, "decoder_rref": 181, "_remote_method": 181, "rremot": 181, "_parameter_rref": 181, "parameter_rref": 181, "run_train": 181, "nindic": 181, "driss": 182, "guessou": 182, "multiheadattent": 182, "flashattent": 182, "fastest": [182, 249], "flash": [182, 265], "andrej": 182, "karpathi": 182, "nanogpt": 182, "causalselfattent": 182, "mine": 182, "166": 182, "616": 182, "726": 182, "amaz": 182, "prof": [182, 212, 229], "export_chrome_trac": 182, "compiled_causal_attention_trac": 182, "concentr": 182, "6090": 182, "3273": 182, "17m": 182, "commit": [182, 201, 285], "ae3a8d5": 182, "causal_upper_left": 182, "causal_lower_right": 182, "is_caus": [182, 198, 261], "causalbia": 182, "corner": 182, "attn_scor": 182, "sdpa_kernel": [182, 261], "scaled_dot_product_attention_tutori": [182, 184, 260], "il": 183, "est": [183, 187], "peindr": 183, "tableau": 183, "paint": 183, "pourquoi": 183, "pa": 183, "essay": 183, "vin": 183, "delicieux": 183, "delici": 183, "wine": 183, "poet": 183, "romancier": 183, "she": 183, "novelist": 183, "vou": 183, "trop": 183, "maigr": 183, "skinni": 183, "condens": [183, 238], "unfold": 183, "tatoeba": 183, "eng": 183, "someon": 183, "manyth": 183, "anki": 183, "fra": 183, "froid": 183, "giant": 183, "dozen": 183, "trim": [183, 238], "lang": 183, "word2index": 183, "index2word": 183, "word2count": 183, "apostroph": 183, "je": 183, "sui": 183, "noir": 183, "attn_appli": 183, "exhibit": 183, "coher": 183, "grammar": 183, "wander": 183, "freedom": 183, "plot_loss": 183, "judgement": 183, "macbook": 183, "matshow": 183, "iot": 183, "word2vec": 183, "glove": 183, "autoencod": 183, "torch_compile_tutori": [184, 192, 260], "sdpa": [184, 198, 260, 261], "torch_export_tutori": [184, 193, 194, 260], "transformer_building_block": [184, 198, 260], "spatial_transformer_tutori": [184, 185, 260], "visualizing_gradients_tutori": [184, 199, 260], "sphx_glr_intermediate_mnist_train_na": [184, 260], "tensorboard_profiler_tutori": [184, 187, 260], "torch_compile_conv_bn_fus": [184, 191, 260], "torchrec_intro_tutori": [184, 195, 260], "ghassen": 185, "hamrouni": 185, "geometr": 185, "invari": [185, 273], "boil": 185, "affine_grid": 185, "grid_sampl": 185, "speech_recognition_pipeline_tutori": 186, "perfetto": 187, "warmup": [187, 198, 203, 204, 211, 212, 229, 252, 253], "on_trace_readi": [187, 229], "tensorboard_trace_handl": 187, "record_shap": [187, 229], "profile_memori": [187, 229], "dealloc": [187, 239], "torch_tb_profil": 187, "safari": 187, "pytorch_profil": 187, "dropdown": 187, "callstack": 187, "sm": 187, "multiprocessor": 187, "occup": 187, "tooltip": 187, "toolbar": 187, "keyboard": 187, "mous": 187, "resnet18_4work": 187, "76m": 187, "132m": 187, "azur": 187, "torchtbprofil": 187, "memory_demo_1_10": 187, "gpu0": 187, "children": [187, 229], "distributed_bert": 187, "docker": 187, "profiler_tutori": 187, "test_cifar10": 187, "vi": 187, "hub": [187, 214], "kfd": 187, "sys_ptrac": 187, "seccomp": 187, "unconfin": 187, "shm": 187, "8g": 187, "apt": [187, 190, 257], "libjpeg": 187, "whl": [187, 192, 195, 265], "rocm5": 187, "scp": 187, "plot_classes_pr": 188, "matplotlib_imshow": 188, "one_channel": 188, "grei": 188, "fashion_mnist_experiment_1": 188, "img_grid": 188, "four_fashion_mnist_imag": 188, "pythonwarn": 188, "pkg_resourc": 188, "userwarn": 188, "refresh": [188, 195], "select_n_random": 188, "datapoint": 188, "perm": 188, "randperm": 188, "class_label": [188, 190], "label_img": 188, "thoroughli": 188, "images_to_prob": 188, "preds_tensor": 188, "el": 188, "fig": 188, "figsiz": 188, "arang": [188, 211, 237], "add_subplot": 188, "xtick": 188, "ytick": 188, "set_titl": 188, "1f": 188, "add_scalar": [188, 237], "add_figur": 188, "global_step": [188, 237], "scroll": 188, "test_siz": 188, "class_prob": 188, "class_probs_batch": 188, "test_prob": 188, "test_label": 188, "add_pr_curve_tensorboard": 188, "class_index": 188, "tensorboard_truth": 188, "tensorboard_prob": 188, "add_pr_curv": 188, "poke": 188, "tacotron2_pipeline_tutori": 189, "wsi": 190, "tissu": 190, "surgeri": 190, "biopsi": 190, "scanner": 190, "pathologist": 190, "diseas": 190, "cancer": 190, "microscop": 190, "tumor": 190, "growth": [190, 275], "treatment": [190, 274, 275], "patient": 190, "000x100": 190, "25x0": 190, "micron": 190, "pyramid": 190, "magnif": 190, "sketch": 190, "histoencod": 190, "jopo666": 190, "openjpeg": 190, "openslid": 190, "pixman": 190, "qq": 190, "libopenjp2": 190, "libpixman": 190, "echo": 190, "brew": 190, "__future__": [190, 228, 236], "hashandl": 190, "filterwarn": 190, "nopython": 190, "shutil": 190, "zipfil": 190, "mpl": 190, "pd": 190, "cm": 190, "sklearn": 190, "accuracy_scor": 190, "confusion_matrix": 190, "patch_predictor": 190, "iopatchpredictorconfig": 190, "misc": 190, "download_data": 190, "grab_files_from_dir": 190, "overlay_prediction_mask": 190, "wsicor": 190, "wsiread": 190, "rcparam": 190, "dpi": 190, "facecolor": 190, "on_gpu": 190, "suppress": 190, "overli": 190, "suppress_console_output": 190, "redirect_stderr": 190, "stringio": 190, "abnorm": [190, 220], "global_save_dir": 190, "rmdir": 190, "dir_path": 190, "is_dir": 190, "rmtree": 190, "kather": 190, "100k": 190, "wsi_path": 190, "sample_wsi": 190, "sv": 190, "patches_path": 190, "kather100k": 190, "weights_path": 190, "dc": 190, "warwick": 190, "uk": 190, "tcga": 190, "3l": 190, "aa1b": 190, "01z": 190, "dx1": 190, "8923a151": 190, "a690": 190, "40b7": 190, "9e5a": 190, "fcbedfc2394f": 190, "extractal": 190, "pc": 190, "label_list": 190, "patch_list": 190, "dataset_path": 190, "image_ext": 190, "tif": 190, "label_dict": 190, "glass": 190, "mucosa": 190, "deb": 190, "debri": 190, "tum": 190, "colorect": 190, "adenocarcinoma": 190, "epithelium": 190, "adi": 190, "adipos": 190, "muc": 190, "mucu": 190, "stroma": 190, "lym": 190, "lymphocyt": 190, "dataset_class_path": 190, "patch_list_single_class": 190, "file_typ": 190, "xlabel": 190, "ylabel": 190, "299": 190, "211": [190, 212, 229], "176": 190, "178": 190, "209": 190, "232": [190, 224], "abc": 190, "modelabc": 190, "tia": 190, "toolbox": 190, "readthedoc": 190, "_autosummari": 190, "models_abc": 190, "preproc_func": 190, "predictor": [190, 254], "pretrained_weight": 190, "cnnmodel": 190, "fromarrai": 190, "conf": 190, "df_cm": 190, "215": 190, "993000": 190, "000000": 190, "00000": 190, "988636": 190, "011364": 190, "991304": 190, "008696": 190, "996503": 190, "003497": 190, "004808": 190, "990385": 190, "988764": 190, "011236": 190, "996296": 190, "003704": 190, "004785": 190, "985646": 190, "004310": 190, "99569": 190, "input_resolut": 190, "patch_input_shap": 190, "stride_shap": 190, "wsi_ioconfig": 190, "mpp": 190, "return_prob": 190, "ioconfig": 190, "greatest": [190, 223], "unnecessari": [190, 194, 198, 242, 257], "merge_predict": 190, "wsi_output": 190, "wsi_predict": 190, "overlai": 190, "overlay_patch_predict": 190, "overview_resolut": 190, "overview_unit": 190, "wsi_overview": 190, "slide_thumbnail": 190, "label_color_dict": 190, "get_cmap": 190, "set1": 190, "pred_map": 190, "label_info": 190, "return_ax": 190, "histologi": 190, "pohjonen": 190, "joona": 190, "helsinki": 190, "umap": 190, "semantic_segmentor": 190, "deepfeatureextractor": 190, "iosegmentorconfig": 190, "histoencwrapp": 190, "histoenc": 190, "feat_extract": 190, "extract_featur": 190, "num_block": 190, "avg_pool": 190, "infer_batch": 190, "batch_data": 190, "img_patches_devic": 190, "inference_mod": [190, 281], "create_encod": 190, "prostate_medium": 190, "662": 190, "446": 190, "605": 190, "169": [190, 212], "155": 190, "output_resolut": 190, "patch_output_shap": 190, "auto_generate_mask": 190, "otsu": 190, "num_loader_work": 190, "num_postproc_work": 190, "wsi_featur": 190, "umap_reduc": 190, "n_neighbor": 190, "n_compon": 190, "manhattan": 190, "random_st": 190, "fit_transform": 190, "npy": 190, "feat": 190, "5mpp": 190, "4mpp": 190, "histolog": 190, "horac": 191, "clariti": 191, "batch_norm": [191, 229], "conv_bn_pattern": 191, "conv_bn_replac": 191, "conv_weight": 191, "kernel_h": 191, "kernel_w": 191, "conv_bia": 191, "bn_mean": 191, "bn_var": 191, "bn_weight": 191, "bn_bia": 191, "simplif": 191, "example_input": [191, 214, 279], "conclus": 191, "william": [192, 194, 252], "devel": 192, "elsewher": 192, "torchinductor": [192, 239, 248, 266, 267, 276], "torchtriton": 192, "cu117": 192, "opt_mod": 192, "complex_funct": 192, "complex_conjug": 192, "outer_funct": 192, "_orig_": 192, "wrote": [192, 197], "dashboard": [192, 237], "struggl": 192, "fn1": 192, "fn2": 192, "f2": 192, "disallow": 192, "zhengxu": 194, "angela": [194, 243, 253], "pian": 194, "pawakapan": 194, "synonym": 194, "dynamic_shap": [194, 254], "graph_signatur": 194, "range_constraint": 194, "byte": [194, 254, 264], "stronger": [194, 254], "safeti": [194, 254], "cond": 194, "predic": 194, "true_fn": 194, "false_fn": 194, "while_loop": 194, "associative_scan": 194, "entail": 194, "adher": 194, "x0": [194, 197, 211, 276], "x1": [194, 197, 211, 276], "s0": 194, "s1": 194, "x2": [194, 211], "x3": [194, 211], "s3": 194, "s5": 194, "proof": 194, "obviou": [194, 224], "_log": [194, 211, 255], "set_log": [194, 211], "spit": 194, "create_symbol": 194, "int_oo": 194, "2841": 194, "runtime_assert": 194, "ncreate_symbol": 194, "nruntime_assert": 194, "dynamic_shapes_tutori": 194, "_subclass": [194, 254, 264], "fake_impl": 194, "845": 194, "infer_s": [194, 238], "torchdynamo_extended_debug_guard_ad": 194, "_meta_registr": 194, "meta_mm": 194, "marker": 194, "aliv": 194, "attract": 194, "friction": 194, "believ": [194, 273], "stanc": [194, 252], "constraintviol": 194, "unrel": [194, 252], "univari": 194, "diverg": [194, 224, 272, 274], "tolist": [194, 281], "unbind": 194, "unback": 194, "nomenclatur": 194, "absenc": [194, 207, 222], "u0": 194, "unhint": 194, "is_compil": 194, "invas": 194, "bypass": [194, 276], "offend": 194, "smarter": 194, "prevail": 194, "prohibit": 194, "_check_is_s": 194, "guard_size_oblivi": 194, "starter": 194, "guardondatadependentsymnod": 194, "_schema": 194, "is_mut": 194, "export_for_train": 194, "run_decomposit": 194, "mutabl": 194, "conv1d": [194, 201, 239], "cond_pred": 194, "tensorrt": 194, "pt2_path": 194, "aoti_compile_and_packag": [194, 253], "compiler_aot_inductor": 194, "aoti_compil": 194, "aoti_load_packag": [194, 253], "cu121": [195, 265], "fbgemm_gpu": 195, "torchmetr": 195, "cardin": 195, "relationship": 195, "hash": 195, "conjunct": [195, 239, 263, 264], "ctr": 195, "dlrm": [195, 239], "embedding_collect": 195, "embedding_bag_collect": 195, "vast": [195, 275], "collis": [195, 238], "80g": 195, "embeddingcollect": 195, "jaggedtensor": 195, "keyedjaggedtensor": 195, "keyedtensor": 195, "product_t": 195, "user_t": 195, "id_list_featur": 195, "id_score_list_featur": 195, "__str__": 195, "id_list_feature_offset": 195, "q1": 195, "product_jt": 195, "user_jt": 195, "q2": 195, "reread": 195, "to_dict": 195, "congrat": 195, "pat": 195, "grasp": [195, 200], "scarc": [195, 205], "hbm": 195, "gb": [195, 198], "shardedembeddingbagcollect": 195, "incredibli": 195, "ton": 195, "everytim": 195, "await": 195, "input_dist": 195, "tbe": 195, "output_dist": 195, "twpooledembeddingshard": 195, "kjt": 195, "canon": 195, "dmp": 195, "hyperoptim": 195, "combinedoptim": 195, "keyedoptim": 195, "in_backward_optimizer_filt": 195, "fused_optim": 195, "fused_param": 195, "apply_optimizer_in_backward": 195, "criteo": 195, "1tb": 195, "penn": 197, "fudan": 197, "databas": [197, 248, 249], "pedestrian": 197, "keypoint": 197, "tv_tensor": 197, "boundingbox": 197, "y0": 197, "image_id": 197, "iscrowd": 197, "pycocotool": 197, "gautamchitni": 197, "git": [197, 265], "cocoapi": 197, "cocodataset": 197, "pythonapi": 197, "get_height_and_width": 197, "ci": 197, "upenn": 197, "edu": 197, "jshi": 197, "ped_html": 197, "pennfudanp": 197, "pedmask": 197, "fudanped00001_mask": 197, "fudanped00002_mask": 197, "fudanped00003_mask": 197, "fudanped00004_mask": 197, "pngimag": 197, "fudanped00001": 197, "fudanped00002": 197, "fudanped00003": 197, "fudanped00004": 197, "tvtensor": 197, "zoo": 197, "fasterrcnn": 197, "1280": 197, "rpn": 197, "anchor": 197, "featmap_nam": 197, "rcnn": 197, "train2017": 197, "mikayla": [198, 228, 236], "gawarecki": [198, 228, 236], "flexattent": 198, "jag": [198, 277], "njt": 198, "famili": [198, 212, 257], "xformer": 198, "torchtun": 198, "rag": [198, 277], "ux": [198, 277, 279], "key_padding_mask": 198, "qk": 198, "premis": 198, "rmsnorm": 198, "sinusoid": 198, "rotari": [198, 261], "alibi": 198, "threefold": 198, "query_padding_mask": 198, "mha": [198, 273], "nestedtensor": [198, 260, 277, 282, 285], "cleanli": [198, 203, 204, 211, 250, 255], "zipf": [198, 277], "pariti": 198, "attn_mask": 198, "padded_tim": 198, "03454": 198, "padded_peak_memori": 198, "nested_tim": 198, "00612": 198, "nested_peak_memori": 198, "padded_bw_tim": 198, "09337": 198, "padded_bw_peak_mem": 198, "nested_bw_tim": 198, "01452": 198, "nested_bw_peak_mem": 198, "144": [198, 212], "out_proj": 198, "000244140625": 198, "packed_proj": 198, "001556396484375": 198, "001953125": 198, "causal": 198, "breviti": [198, 236, 272], "trust": 198, "ragged": 198, "e_q": 198, "e_tot": 198, "05x": 198, "swish": 198, "08x": [198, 212], "kv": [198, 261], "lucidrain": 198, "navit": 198, "visiontransform": 198, "norm_lay": 199, "batchnorm1d": 199, "register_full_backward_hook": 199, "grads_bn": 199, "grads_nobn": 199, "qualit": 199, "num_lay": [199, 223], "hook_forward": 199, "covari": 199, "newcom": 200, "deep_learning_60min_blitz": 200, "x86": [201, 276], "tmul": 201, "gen": 201, "processor": [201, 213, 239, 257, 259], "10x": [201, 265], "avx": [201, 213], "vnni": [201, 213], "024": 201, "bf16": [201, 212, 265, 276], "onednn": [201, 212, 213, 220, 276], "memory_format": [201, 213], "channels_last": [201, 213], "conv3d": [201, 239], "conv_transpose1d": 201, "conv_transpose2d": 201, "conv_transpose3d": 201, "baddbmm": 201, "addbmm": 201, "onednn_verbos": 201, "mkldnn": [201, 212, 276], "verbose_on": 201, "6dbeffbae1f23cbbeae17adb7b5b13f1f37c080": 201, "openmp": [201, 220], "nthr": 201, "isa": 201, "dl": [201, 265], "prim_templ": 201, "prop_kind": 201, "memory_descriptor": 201, "auxiliari": [201, 267], "problem_desc": 201, "exec_tim": 201, "exec": 201, "reorder": [201, 212, 220, 239], "undef": 201, "src_f32": 201, "f0": 201, "dst_f32": 201, "scratchpad": 201, "2561": 201, "avx512_core_amx_bf16": 201, "forward_train": 201, "src_bf16": 201, "acdb": 201, "wei_bf16": 201, "abcd16b16a2b": 201, "bia_f32": 201, "dst_bf16": 201, "alg": 201, "convolution_direct": 201, "mb7_ic2oc1_ih224oh111kh3sh2dh1ph1_iw224ow111kw3sw2dw1pw1": 201, "628906": 201, "brg": 201, "avx512_core_amx_int8": 201, "src_s8": 201, "wei_s8": 201, "ba16a64b4a": 201, "dst_s8": 201, "1x30522": 201, "30522x768": 201, "1x768": 201, "66382": 201, "lazo": [203, 204, 211, 250, 255], "get_device_cap": [203, 211], "benchmark_torch_function_in_microsecond": [203, 211], "blocked_autorang": [203, 211, 224, 281], "1e6": [203, 211, 258], "eager_runtim": [203, 211], "compiled_runtim": [203, 211], "747": 203, "2437149845064u": 203, "392": 203, "07384741178u": 203, "linearlr": 204, "peek": 204, "compiling_optimizer_lr_schedul": [204, 246, 260], "luca": [205, 206], "pasqualin": [205, 206], "iri": [205, 206, 208], "zhang": [205, 206, 208], "rodrigo": [205, 206], "kumpera": [205, 206], "chien": [205, 206, 261], "chin": [205, 206, 261], "async_sav": 205, "checkpoint_size_per_rank": 205, "number_of_rank": 205, "pageabl": 205, "get_state_dict": [205, 206], "set_state_dict": [205, 206], "appstat": [205, 206], "protocol": [205, 206], "load_stat_dict": [205, 206], "fqn": [205, 206, 281], "sharded_state_dict": [205, 206], "optim_state_dict": [205, 206], "run_fsdp_checkpoint_save_exampl": [205, 206], "checkpoint_futur": 205, "checkpoint_id": [205, 206], "_step": 205, "attack": 205, "filesystemwrit": 205, "storagewrit": 205, "cached_state_dict": 205, "cache_staged_state_dict": 205, "storage_writ": 205, "adddition": 206, "run_fsdp_checkpoint_load_exampl": 206, "run_checkpoint_load_exampl": 206, "format_util": 206, "torch_to_dcp": 206, "dcp_to_torch": 206, "dcp_to_torch_sav": 206, "torch_save_to_dcp": 206, "torch_save_checkpoint_dir": 206, "torch_save_checkpoint": 206, "_new": 206, "anshul": 207, "sinha": 207, "distributedtensor": 207, "interoper": 207, "mlpmodul": 207, "comm_mod": 207, "generate_comm_debug_tracing_t": 207, "noise_level": 207, "log_comm_debug_tracing_table_to_fil": 207, "file_nam": [207, 254], "transformer_operation_log": 207, "generate_json_dump": 207, "c10d_function": 207, "comm_mode_features_exampl": 207, "effortlessli": 208, "homogen": 208, "num_node_devic": 208, "shard_rank_list": 208, "shard_group": 208, "current_shard_group": 208, "current_replicate_group": 208, "shard_factor": 208, "replicate_group_rank": 208, "replicate_group": 208, "2d_setup": 208, "mesh_dim_nam": [208, 261], "thru": 208, "get_group": 208, "mesh_dim": 208, "2d_setup_with_device_mesh": 208, "meshshap": 208, "dp_replic": 208, "dp_shard": 208, "mesh_3d": 208, "hsdp_mesh": 208, "tp_group": 208, "_foreach": 211, "horizton": 211, "model_copi": 211, "output_copi": 211, "_higher_order_op": 211, "get_input": 211, "exp_avg": [211, 258], "exp_avg_sq": [211, 258], "update_exp_avg_sq": 211, "beta2": 211, "addcmul": 211, "update_param": 211, "bias_correction1": 211, "bias_correction2": 211, "denom": 211, "foreach_map_adam": 211, "updated_step": 211, "_foreach_copy_": 211, "hop": 211, "exp_avgs_upd": 211, "lerp": 211, "exp_avgs_sq_upd": 211, "params_upd": 211, "opt_eag": 211, "opt_eager_copi": 211, "compiled_adam": 211, "eager_p": 211, "compile_p": 211, "v0924": 211, "603000": 211, "22821": 211, "2345": 211, "__output_cod": 211, "0_infer": 211, "c_void_p": [211, 266], "c_long": 211, "c_int": 211, "cmath": 211, "nanj": 211, "run_intermediate_hook": [211, 266], "maybe_profil": 211, "memory_plan": 211, "_align": 211, "empty_strid": [211, 229, 266], "async_compil": [211, 276], "asynccompil": 211, "select_algorithm": 211, "extern_kernel": 211, "_cuda_getcurrentrawstream": 211, "get_raw_stream": 211, "tl": 211, "triton_heurist": 211, "start_graph": 211, "end_graph": 211, "inductor_op": 211, "_quantiz": 211, "assert_size_strid": [211, 266], "assert_align": 211, "empty_strided_cpu": 211, "_empty_strided_cpu": 211, "empty_strided_cuda": 211, "_empty_strided_cuda": 211, "empty_strided_xpu": 211, "_empty_strided_xpu": 211, "reinterpret_tensor": 211, "_reinterpret_tensor": 211, "alloc_from_pool": 211, "_alloc_from_pool": 211, "empty_strided_p2p": 211, "_distributed_c10d": [211, 263], "_symmetricmemori": 211, "torchinductor_ci": 211, "calrezlmzale753uatf4r4hyoxrgj2cygyga4s35ygdnlqxtbqrk": 211, "unsort": 211, "triton_for_fused_0": 211, "triton_help": 211, "libdevic": 211, "tl_math": 211, "autotunehint": 211, "reductionhint": 211, "tilehint": 211, "deviceproperti": 211, "num_warp": 211, "triton_meta": 211, "in_ptr2": 211, "in_ptr3": 211, "in_ptr4": 211, "in_ptr5": 211, "in_ptr6": 211, "in_ptr7": 211, "in_ptr8": 211, "in_ptr9": 211, "in_ptr10": 211, "in_ptr11": 211, "in_ptr12": 211, "in_ptr13": 211, "in_ptr14": 211, "in_ptr15": 211, "in_ptr16": 211, "in_ptr17": 211, "in_ptr18": 211, "in_ptr19": 211, "in_ptr20": 211, "in_ptr21": 211, "in_ptr22": 211, "in_ptr23": 211, "in_ptr24": 211, "in_ptr25": 211, "in_ptr26": 211, "in_ptr27": 211, "in_ptr28": 211, "in_ptr29": 211, "in_ptr30": 211, "in_ptr31": 211, "in_ptr32": 211, "in_ptr33": 211, "in_ptr34": 211, "in_ptr35": 211, "in_ptr36": 211, "in_ptr37": 211, "in_ptr38": 211, "in_ptr39": 211, "in_ptr40": 211, "in_ptr41": 211, "in_ptr42": 211, "in_ptr43": 211, "in_ptr44": 211, "in_ptr45": 211, "in_ptr46": 211, "in_ptr47": 211, "in_ptr48": 211, "in_ptr49": 211, "out_ptr6": 211, "out_ptr7": 211, "out_ptr8": 211, "out_ptr15": 211, "out_ptr16": 211, "out_ptr17": 211, "out_ptr24": 211, "out_ptr25": 211, "out_ptr26": 211, "out_ptr33": 211, "out_ptr34": 211, "out_ptr35": 211, "out_ptr42": 211, "out_ptr43": 211, "out_ptr44": 211, "out_ptr51": 211, "out_ptr52": 211, "out_ptr53": 211, "out_ptr60": 211, "out_ptr61": 211, "out_ptr62": 211, "out_ptr69": 211, "out_ptr70": 211, "out_ptr71": 211, "out_ptr78": 211, "out_ptr79": 211, "out_ptr80": 211, "out_ptr87": 211, "out_ptr88": 211, "out_ptr89": 211, "multi_processor_count": 211, "regs_per_multiprocessor": 211, "65536": 211, "max_threads_per_multi_processor": 211, "1536": 211, "warp_siz": 211, "tt": 211, "43": [211, 212, 224], "69": [211, 224], "inductor_meta": 211, "grid_typ": 211, "sequentialcombokernelgrid": 211, "combo_grid_meta": 211, "min_block": 211, "default_config": 211, "xblock": 211, "no_x_dim_0": 211, "xnumel_0": 211, "1048576": 211, "no_x_dim_1": 211, "xnumel_1": 211, "no_x_dim_2": 211, "xnumel_2": 211, "no_x_dim_3": 211, "xnumel_3": 211, "no_x_dim_4": 211, "xnumel_4": 211, "no_x_dim_5": 211, "xnumel_5": 211, "no_x_dim_6": 211, "xnumel_6": 211, "no_x_dim_7": 211, "xnumel_7": 211, "no_x_dim_8": 211, "xnumel_8": 211, "no_x_dim_9": 211, "xnumel_9": 211, "kernel_nam": 211, "mutated_arg_nam": 211, "backend_hash": 211, "5521eadcb2516098f638687b39b477aa524882055648f5ae9ffb68d065b487c6": 211, "are_deterministic_algorithms_en": 211, "assert_indirect_index": 211, "autotune_local_cach": 211, "autotune_pointwis": 211, "autotune_remote_cach": 211, "force_disable_cach": 211, "dynamic_scale_rblock": 211, "max_autotun": [211, 253], "max_autotune_pointwis": 211, "min_split_scan_rblock": 211, "spill_threshold": 211, "store_cubin": 211, "pid": 211, "program_id": 211, "num_xblocks_0": 211, "cdiv": 211, "num_xblocks_1": 211, "num_xblocks_2": 211, "num_xblocks_3": 211, "num_xblocks_4": 211, "num_xblocks_5": 211, "num_xblocks_6": 211, "num_xblocks_7": 211, "num_xblocks_8": 211, "num_xblocks_9": 211, "pid_offset": 211, "xnumel": 211, "r0_numel": 211, "xoffset": 211, "xindex": 211, "xmask": 211, "int1": 211, "tmp8": [211, 276], "tmp15": 211, "tmp17": 211, "10000000149011612": 211, "tmp4": [211, 276], "tmp5": [211, 276], "tmp6": [211, 276], "tmp7": [211, 276], "tmp9": 211, "tmp10": 211, "tmp11": 211, "0010000000000000009": 211, "tmp12": 211, "tmp13": 211, "tmp14": 211, "tmp16": 211, "tmp18": 211, "tmp19": 211, "tmp20": 211, "tmp21": 211, "tmp22": 211, "tmp23": 211, "tmp24": 211, "tmp25": 211, "tmp26": 211, "int32": [211, 265], "tmp27": 211, "tmp28": 211, "tmp29": 211, "tmp30": 211, "tmp31": 211, "tmp32": 211, "tmp33": 211, "tmp34": 211, "tmp35": 211, "tmp36": 211, "tmp37": 211, "tmp38": 211, "tmp39": 211, "tmp40": 211, "tmp47": 211, "tmp54": 211, "tmp56": 211, "tmp41": 211, "tmp42": 211, "tmp43": 211, "tmp44": 211, "tmp45": 211, "tmp46": 211, "tmp48": 211, "tmp49": 211, "tmp50": 211, "tmp51": 211, "tmp52": 211, "tmp53": 211, "tmp55": 211, "tmp57": 211, "tmp58": 211, "tmp59": 211, "tmp60": 211, "tmp61": 211, "tmp62": 211, "tmp63": 211, "tmp64": 211, "tmp65": 211, "tmp66": 211, "tmp67": 211, "tmp68": 211, "tmp69": 211, "tmp70": 211, "tmp71": 211, "tmp72": 211, "tmp73": 211, "tmp74": 211, "tmp75": 211, "tmp76": 211, "tmp77": 211, "tmp78": 211, "tmp79": 211, "tmp86": 211, "tmp93": 211, "tmp95": 211, "tmp80": 211, "tmp81": 211, "tmp82": 211, "tmp83": 211, "tmp84": 211, "tmp85": 211, "tmp87": 211, "tmp88": 211, "tmp89": 211, "tmp90": 211, "tmp91": 211, "tmp92": 211, "tmp94": 211, "tmp96": 211, "tmp97": 211, "tmp98": 211, "tmp99": 211, "tmp100": 211, "tmp101": 211, "tmp102": 211, "tmp103": 211, "tmp104": 211, "tmp105": 211, "tmp106": 211, "tmp107": 211, "tmp108": 211, "tmp109": 211, "tmp110": 211, "tmp111": 211, "tmp112": 211, "tmp113": 211, "tmp114": 211, "tmp115": 211, "tmp116": 211, "tmp117": 211, "tmp118": 211, "tmp125": 211, "tmp132": 211, "tmp134": 211, "tmp119": 211, "tmp120": 211, "tmp121": 211, "tmp122": 211, "tmp123": 211, "tmp124": 211, "tmp126": 211, "tmp127": 211, "tmp128": 211, "tmp129": 211, "tmp130": 211, "tmp131": 211, "tmp133": 211, "tmp135": 211, "tmp136": 211, "tmp137": 211, "tmp138": 211, "tmp139": 211, "tmp140": 211, "tmp141": 211, "tmp142": 211, "tmp143": 211, "tmp144": 211, "tmp145": 211, "tmp146": 211, "tmp147": 211, "tmp148": 211, "tmp149": 211, "tmp150": 211, "tmp151": 211, "tmp152": 211, "tmp153": 211, "tmp154": 211, "tmp155": 211, "x4": 211, "tmp156": 211, "tmp157": 211, "tmp164": 211, "tmp171": 211, "tmp173": 211, "tmp158": 211, "tmp159": 211, "tmp160": 211, "tmp161": 211, "tmp162": 211, "tmp163": 211, "tmp165": 211, "tmp166": 211, "tmp167": 211, "tmp168": 211, "tmp169": 211, "tmp170": 211, "tmp172": 211, "tmp174": 211, "tmp175": 211, "tmp176": 211, "tmp177": 211, "tmp178": 211, "tmp179": 211, "tmp180": 211, "tmp181": 211, "tmp182": 211, "tmp183": 211, "tmp184": 211, "tmp185": 211, "tmp186": 211, "tmp187": 211, "tmp188": 211, "tmp189": 211, "tmp190": 211, "tmp191": 211, "tmp192": 211, "tmp193": 211, "tmp194": 211, "x5": 211, "tmp195": 211, "tmp196": 211, "tmp203": 211, "tmp210": 211, "tmp212": 211, "tmp197": 211, "tmp198": 211, "tmp199": 211, "tmp200": 211, "tmp201": 211, "tmp202": 211, "tmp204": 211, "tmp205": 211, "tmp206": 211, "tmp207": 211, "tmp208": 211, "tmp209": 211, "tmp211": 211, "tmp213": 211, "tmp214": 211, "tmp215": 211, "tmp216": 211, "tmp217": 211, "tmp218": 211, "tmp219": 211, "tmp220": 211, "tmp221": 211, "tmp222": 211, "tmp223": 211, "tmp224": 211, "tmp225": 211, "tmp226": 211, "tmp227": 211, "tmp228": 211, "tmp229": 211, "tmp230": 211, "tmp231": 211, "tmp232": 211, "tmp233": 211, "x6": 211, "tmp234": 211, "tmp235": 211, "tmp242": 211, "tmp249": 211, "tmp251": 211, "tmp236": 211, "tmp237": 211, "tmp238": 211, "tmp239": 211, "tmp240": 211, "tmp241": 211, "tmp243": 211, "tmp244": 211, "tmp245": 211, "tmp246": 211, "tmp247": 211, "tmp248": 211, "tmp250": 211, "tmp252": 211, "tmp253": 211, "tmp254": 211, "tmp255": 211, "tmp256": 211, "tmp257": 211, "tmp258": 211, "tmp259": 211, "tmp260": 211, "tmp261": 211, "tmp262": 211, "tmp263": 211, "tmp264": 211, "tmp265": 211, "tmp266": 211, "tmp267": 211, "tmp268": 211, "tmp269": 211, "tmp270": 211, "tmp271": 211, "tmp272": 211, "x7": 211, "tmp273": 211, "tmp274": 211, "tmp281": 211, "tmp288": 211, "tmp290": 211, "tmp275": 211, "tmp276": 211, "tmp277": 211, "tmp278": 211, "tmp279": 211, "tmp280": 211, "tmp282": 211, "tmp283": 211, "tmp284": 211, "tmp285": 211, "tmp286": 211, "tmp287": 211, "tmp289": 211, "tmp291": 211, "tmp292": 211, "tmp293": 211, "tmp294": 211, "tmp295": 211, "tmp296": 211, "tmp297": 211, "tmp298": 211, "tmp299": 211, "tmp300": 211, "tmp301": 211, "tmp302": 211, "tmp303": 211, "tmp304": 211, "tmp305": 211, "tmp306": 211, "tmp307": 211, "tmp308": 211, "tmp309": 211, "tmp310": 211, "tmp311": 211, "x8": 211, "tmp312": 211, "tmp313": 211, "tmp320": 211, "tmp327": 211, "tmp329": 211, "tmp314": 211, "tmp315": 211, "tmp316": 211, "tmp317": 211, "tmp318": 211, "tmp319": 211, "tmp321": 211, "tmp322": 211, "tmp323": 211, "tmp324": 211, "tmp325": 211, "tmp326": 211, "tmp328": 211, "tmp330": 211, "tmp331": 211, "tmp332": 211, "tmp333": 211, "tmp334": 211, "tmp335": 211, "tmp336": 211, "tmp337": 211, "tmp338": 211, "tmp339": 211, "tmp340": 211, "tmp341": 211, "tmp342": 211, "tmp343": 211, "tmp344": 211, "tmp345": 211, "tmp346": 211, "tmp347": 211, "tmp348": 211, "tmp349": 211, "tmp350": 211, "x9": 211, "tmp351": 211, "tmp352": 211, "tmp359": 211, "tmp366": 211, "tmp368": 211, "tmp353": 211, "tmp354": 211, "tmp355": 211, "tmp356": 211, "tmp357": 211, "tmp358": 211, "tmp360": 211, "tmp361": 211, "tmp362": 211, "tmp363": 211, "tmp364": 211, "tmp365": 211, "tmp367": 211, "tmp369": 211, "tmp370": 211, "tmp371": 211, "tmp372": 211, "tmp373": 211, "tmp374": 211, "tmp375": 211, "tmp376": 211, "tmp377": 211, "tmp378": 211, "tmp379": 211, "tmp380": 211, "tmp381": 211, "tmp382": 211, "tmp383": 211, "tmp384": 211, "tmp385": 211, "tmp386": 211, "tmp387": 211, "tmp388": 211, "tmp389": 211, "device_str": 211, "cpp_fused__foreach_copy_1": 211, "cpp_pybind": [211, 276], "cpp_prefix": 211, "out_ptr1": 211, "out_ptr3": 211, "out_ptr5": 211, "out_ptr9": 211, "out_ptr11": 211, "out_ptr13": 211, "out_ptr19": 211, "arg2_1": 211, "arg3_1": 211, "arg4_1": 211, "arg5_1": 211, "arg6_1": 211, "arg7_1": 211, "arg8_1": 211, "arg9_1": 211, "arg10_1": 211, "arg11_1": 211, "arg12_1": 211, "arg13_1": 211, "arg14_1": 211, "arg15_1": 211, "arg16_1": 211, "arg17_1": 211, "arg18_1": 211, "arg19_1": 211, "arg20_1": 211, "arg21_1": 211, "arg22_1": 211, "arg23_1": 211, "arg24_1": 211, "arg25_1": 211, "arg26_1": 211, "arg27_1": 211, "arg28_1": 211, "arg29_1": 211, "arg30_1": 211, "arg31_1": 211, "arg32_1": 211, "arg33_1": 211, "arg34_1": 211, "arg35_1": 211, "arg36_1": 211, "arg37_1": 211, "arg38_1": 211, "arg39_1": 211, "arg40_1": 211, "arg41_1": 211, "arg42_1": 211, "arg43_1": 211, "arg44_1": 211, "arg45_1": 211, "arg46_1": 211, "arg47_1": 211, "arg48_1": 211, "arg49_1": 211, "_deviceguard": [211, 266], "stream0": [211, 266], "benchmark_compiled_modul": 211, "rand_strid": 211, "print_perform": 211, "wrapper_benchmark": 211, "compiled_module_main": 211, "653000": 211, "2356": 211, "ff": 211, "cffqwnpkieergngjngozdun467la5vp6eyiisxxpikirosuditrp": 211, "i0924": 211, "593000": 211, "2317": 211, "470000": 211, "1_infer": 211, "511000": 211, "da": 211, "cdabi6efsaqwxkw2y4xsbsvooc4l752igga6mfi4rfeqb4ikja3b": 211, "551000": 211, "1201": 211, "3174649996472u": 211, "2102346194387u": 211, "sunita": 212, "nadamp": 212, "graviton3": 212, "sve": 212, "simd": 212, "graviton2": 212, "bla": 212, "acl": 212, "c7g": 212, "bfloa16": 212, "r7g": 212, "m7g": 212, "4vcpu": 212, "profileract": [212, 229], "myneuralnetwork": 212, "linear_relu_stack": 212, "11008": 212, "pred_probab": 212, "set_grad_en": 212, "mymodel_infer": 212, "self_cpu_time_tot": [212, 229], "avg": [212, 229], "813": 212, "255m": 212, "177": 212, "032m": 212, "160u": 212, "162": [212, 224], "054m": 212, "540": 212, "180u": 212, "738m": 212, "201": 212, "955m": 212, "985": 212, "282m": 212, "421m": 212, "043m": 212, "810u": 212, "356m": 212, "179": 212, "388m": 212, "896": 212, "940u": 212, "mmla": 212, "torchbench": 212, "dnnl_default_fpmath_mod": 212, "943": 212, "052": 212, "507m": 212, "167": [212, 257], "653m": 212, "838": 212, "265u": 212, "107": 212, "593m": 212, "358": 212, "643u": 212, "167m": 212, "262": 212, "911m": 212, "533m": 212, "414m": 212, "892m": 212, "307u": 212, "281m": 212, "934m": 212, "849": [212, 224], "670u": 212, "fastmath": 212, "821": 212, "914": 212, "713m": 212, "244m": 212, "711": 212, "220u": 212, "322m": 212, "307": 212, "740u": 212, "094": 212, "495m": 212, "921": 212, "736m": 212, "131m": 212, "441m": 212, "803u": 212, "942m": 212, "186m": 212, "720": 212, "930u": 212, "848": 212, "944": 212, "148m": 212, "141": [212, 224], "309m": 212, "706": 212, "545u": 212, "916m": 212, "720u": 212, "431m": 212, "471m": 212, "951": 212, "027m": 212, "243m": 212, "143u": 212, "928m": 212, "143": [212, 257], "237m": 212, "185u": 212, "47x": 212, "noteworthi": 212, "till": 212, "torch_mkldnn_matmul_min_dim": 212, "958": 212, "612m": 212, "124m": 212, "620u": 212, "951m": 212, "170u": 212, "423m": 212, "034": 212, "691m": 212, "988": 212, "628m": 212, "520m": 212, "945m": 212, "817u": 212, "382m": 212, "136": 212, "910u": 212, "781": 212, "604m": 212, "295": 212, "437m": 212, "477m": 212, "516m": 212, "558": 212, "387u": 212, "708m": 212, "499m": 212, "788": 212, "627m": 212, "982m": 212, "385m": 212, "617u": 212, "932m": 212, "297": 212, "369m": 212, "487m": 212, "038m": 212, "060m": 212, "300u": 212, "013m": 212, "106": 212, "710u": 212, "521m": 212, "750m": 212, "216": 212, "475m": 212, "033m": 212, "110u": 212, "285m": 212, "345m": 212, "186": [212, 265], "725u": 212, "margin": 212, "thp_mem_alloc_en": 212, "321": 212, "069m": 212, "568m": 212, "613m": 212, "602m": 212, "682": 212, "007u": 212, "777m": 212, "697": 212, "082m": 212, "329": 212, "097m": 212, "547m": 212, "325": 212, "115m": 212, "626m": 212, "avx512": 213, "amx": 213, "xmx": 213, "claus": [213, 258], "nhwc": 213, "upstream": [213, 239], "cooper": 213, "roialign": 213, "imper": 213, "intel_extension_for_pytorch": [213, 247], "ipex": [213, 247, 259], "bertmodel": 213, "seq_length": 213, "cache_en": 213, "argc": 213, "cerr": 213, "intel_ext_pt_cpu": 213, "libpytorch_path": 213, "ldd": 213, "workspac": 213, "libintel": 213, "ext": 213, "0x00007f3cf98e0000": 213, "libc10": 213, "0x00007f3cf985a000": 213, "0x00007f3cf70fc000": 213, "libtorch_cpu": [213, 238], "0x00007f3ce16ac000": 213, "mitig": [214, 239], "autotun": [214, 239, 248, 249, 251, 265, 285], "mx": 214, "hpu": [214, 280], "inc_target_devic": 214, "gaudi": [214, 280], "neural_compressor": 214, "fp8config": 214, "qconfig": 214, "fp8_config": 214, "e4m3": 214, "calibration_data": 214, "input_data": 214, "theblok": 214, "7b": 214, "gptq": 214, "model_name_or_path": 214, "torch_dtyp": 214, "hpu_model": 214, "safetensor": 214, "qd": 214, "w8a8": 214, "staticquantconfig": 214, "userfloatmodel": 214, "exported_model": [214, 279], "quant_config": 214, "prepared_model": [214, 279], "run_fn": 214, "q_model": 214, "opt_model": 214, "rtnconfig": 214, "tuningconfig": 214, "eval_fn": 214, "tune_config": 214, "config_set": 214, "use_sym": 214, "group_siz": 214, "tolerable_loss": 214, "max_trial": 214, "gui": [220, 259], "emit_itt": 220, "ex": [220, 267, 281], "8080": 220, "path_of_launch": 220, "iteration_n": 220, "range_push": 220, "range_pop": 220, "oneapi": 220, "brown": 220, "percerntag": 220, "jitter": [220, 224], "enrich": 220, "ittsampl": 220, "292820": 220, "unmark": 220, "244": [220, 281], "iteration_": 220, "basefold": 220, "bash_sourc": 220, "gradcam": 222, "283": 222, "occlus": 222, "deconvolut": 222, "guidedbackprop": 222, "deeplift": 222, "gradientshap": 222, "forward_func": 222, "pictori": 222, "textual": 222, "distractor": 222, "visualize_text": 222, "imdb_torchtext_interpret": 222, "gilbert": 222, "tanner": 222, "gilberttann": 222, "captum_recip": [222, 227, 235, 260], "carilli": 223, "ordinarili": 223, "ture": 223, "kepler": 223, "maxwel": 223, "pascal": 223, "modest": 223, "in_siz": 223, "out_siz": 223, "underflow": 223, "scaler": 223, "unscal": 223, "unscale_": 223, "rough": 223, "coalesc": [223, 272], "binary_cross_entropy_with_logit": 223, "suspect": 223, "docstr": 223, "subregion": 223, "backtrac": 223, "torch_show_cpp_stacktrac": 223, "amp_recip": [223, 227, 235, 260], "invalid": [224, 239, 273, 274, 275], "tediou": 224, "mistak": 224, "mul_sum": 224, "0x7fb10400d0f0": 224, "batched_dot_mul_sum": 224, "379": 224, "0x7fb103d67048": 224, "batched_dot_bmm": 224, "num_thread": [224, 276], "sub_label": 224, "0x7fb103d54080": 224, "118": 224, "0x7fb16935d2e8": 224, "2775": 224, "0x7fb10400d080": 224, "181": 224, "min_run_tim": [224, 238], "median": [224, 238, 281], "274": 224, "748": 224, "432": [224, 229], "22657": 224, "11899": 224, "609": 224, "23098": 224, "27246": 224, "267073": 224, "118823": 224, "189": 224, "2782": 224, "7471": 224, "11874": 224, "173": 224, "7264": 224, "27824": 224, "100060": 224, "121499": 224, "188": 224, "2773": 224, "6111": 224, "12833": 224, "6295": 224, "27062": 224, "71804": 224, "120365": 224, "103": 224, "2804": 224, "6764": 224, "11871": 224, "6640": 224, "27592": 224, "73003": 224, "120083": 224, "callgrindstat": [224, 238], "trip": [224, 238], "batched_dot": 224, "36000": 224, "40000": 224, "stark": 224, "fuzzer": 224, "10000000": 224, "k0": 224, "k1": 224, "discontigu": 224, "725": 224, "383": 224, "1468": 224, "187": 224, "5039": 224, "2140": 224, "1296": 224, "41000": 224, "1598": 224, "310": 224, "519": 224, "763": 224, "1082": 224, "473": 224, "16384": 224, "12642115": 224, "8192": [224, 261], "4800": 224, "20400": 224, "110000": 224, "400000": 224, "493": 224, "1100": [224, 238], "870": 224, "2030": 224, "495": 224, "23600": 224, "24000": [224, 238], "62374": 224, "90000": 224, "100000": 224, "240372": 224, "16000": 224, "40156": 224, "2670": 224, "opac": 224, "complementari": 224, "insensit": 224, "environment": 224, "cpp_lib": 224, "cpp_sourc": 224, "batched_dot_src": 224, "extra_cflag": 224, "extra_include_path": 224, "getenv": 224, "batched_dot_mul_sum_v0": 224, "batched_dot_mul_sum_v1": 224, "module_import_str": 224, "67631": 224, "importlib": 224, "spec_from_file_loc": 224, "repr": 224, "module_from_spec": 224, "exec_modul": 224, "textwrap": 224, "pretty_print": 224, "t_baselin": 224, "stats_v0": 224, "collect_callgrind": 224, "stats_v1": 224, "as_standard": [224, 238], "symbol": [224, 238, 254], "denois": 224, "cancel": [224, 239], "ing": 224, "wrap_pybind_function_impl_": 224, "set_printopt": [224, 281], "linewidth": 224, "valgrind_wrapp": [224, 238], "timer_interfac": [224, 238], "0x7fb0f06e7630": 224, "2392671": 224, "4367": 224, "rel_with_deb_info": [224, 238], "0x7fb10400d208": 224, "2378978": 224, "functioncount": [224, 238], "0x7fb1000ab358": 224, "0x000000000020d9e0": 224, "0x000000000020db10": 224, "integer_sequ": 224, "0ul": 224, "1ul": 224, "5200": 224, "undefinedtensorimpl": 224, "reset_": 224, "5935": 224, "0x000000000022c0e0": 224, "13693": 224, "impos": [225, 236], "changing_default_devic": [225, 235, 260], "subsidiari": [226, 240, 241], "neighbor": 226, "sharp": 226, "blurri": 226, "defining_a_neural_network": [226, 227, 235, 260], "what_is_state_dict": [227, 235, 241, 260], "saving_and_loading_models_for_infer": 227, "custom_dataset_transforms_load": 227, "dynamic_quant": 227, "warmstarting_model_using_parameters_from_a_different_model": [227, 235, 240, 260], "zeroing_out_gradi": [227, 235, 242, 260], "mobile_perf": 227, "regional_compil": [227, 244, 246, 260], "syntaxerror": [227, 235, 260], "undesir": 228, "unload": 228, "upfront": [228, 276], "somemodul": 228, "overwritten": [228, 242, 257], "param_in_model": 228, "param_in_state_dict": 228, "set_swap_module_params_on_convers": [228, 236], "swap_tensor": [228, 235, 260], "module_load_state_dict_tip": [228, 235, 260], "shivam": 229, "raikundalia": 229, "model_infer": 229, "_fork": 229, "509m": 229, "503m": 229, "931m": 229, "597m": 229, "700m": 229, "585m": 229, "_convolut": 229, "450m": 229, "mkldnn_convolut": 229, "838m": 229, "114m": 229, "556m": 229, "693m": 229, "734": 229, "_batch_norm_impl_index": 229, "482m": 229, "724": 229, "100u": 229, "native_batch_norm": 229, "229m": 229, "109m": 229, "705": 229, "450u": 229, "332": 229, "631m": 229, "286u": 229, "668m": 229, "292m": 229, "988u": 229, "549m": 229, "dnn": 229, "group_by_input_shap": 229, "008m": 229, "956m": 229, "909m": 229, "834m": 229, "332m": 229, "303m": 229, "273m": 229, "233m": 229, "751m": 229, "occurr": 229, "666m": 229, "484m": 229, "_convolution_nogroup": 229, "thnn_conv2d": 229, "thnn_conv2d_forward": 229, "im2col_kernel": 229, "844m": 229, "sgemm_32x32x32_nn": 229, "206m": 229, "sgemm_32x32x32_nn_vec": 229, "093m": 229, "015m": 229, "567m": 229, "871m": 229, "560u": 229, "convolution_overrid": 229, "gen_conv": 229, "216u": 229, "640u": 229, "632u": 229, "conv_reord": 229, "880u": 229, "448u": 229, "712": 229, "486m": 229, "max_pool2d_with_indic": 229, "kb": 229, "572": 229, "resize_": 229, "480": 229, "masked_select": 229, "112": [229, 254, 257], "122": 229, "064m": 229, "viewer": 229, "439": 229, "_conv_forward": 229, "1051": 229, "_call_impl": 229, "016m": 229, "659m": 229, "skip_first": 229, "step_num": 229, "profiler_recip": [229, 235, 260], "reasoning_about_shap": [230, 235, 260], "008": 235, "tensorboard_with_pytorch": [235, 237, 260], "timer_quick_start": [235, 238, 260], "tuning_guid": [235, 239, 260], "hereaft": 236, "__class__": 236, "__dict__": [236, 279], "__slots__": 236, "pertin": 236, "glanc": [236, 272], "nasti": 236, "__torch_dispatch__": [236, 254], "new_param": 236, "myquantizedlinearweight": 236, "payload": 236, "__setattr__": 236, "module_load": 236, "__torch_function__": 236, "param_kei": 236, "histogram": 237, "scalar_valu": 237, "walltim": 237, "train_model": 237, "pend": 237, "anymor": [237, 276], "tfevent": 237, "OR": 237, "0x7f1929a38ed0": 238, "iqr": 238, "424": 238, "0x7f192b019ed0": 238, "unsurprisingli": 238, "0x7f1929a35850": 238, "563600": 238, "tensormethod": 238, "ab_ref": 238, "0x7f192a6dfd90": 238, "47264": 238, "_int_fre": 238, "25963": 238, "_int_malloc": 238, "19900": 238, "tensorit": 238, "tensoriteratorconfig": 238, "18000": 238, "__tls_get_addr": 238, "13500": 238, "malloc": [238, 239, 257], "11300": 238, "smallvector": 238, "10345": 238, "_int_memalign": 238, "9200": 238, "iteratorbas": 238, "get_strid": 238, "173472": 238, "0x7f192995d750": 238, "118200": 238, "tensoriter": 238, "65000": 238, "20900": 238, "15900": 238, "15100": 238, "cpualloc": 238, "12500": 238, "352327": 238, "a0": 238, "b0": 238, "a1": 238, "a127": 238, "pickleabl": 238, "broadcasting_stat": 238, "17600": 238, "tensoriteratorbas": 238, "compute_strid": 238, "12700": 238, "allocate_or_resize_output": 238, "10200": 238, "smallvectorimpl": 238, "7400": 238, "6200": 238, "invert_perm": 238, "6064": 238, "5100": 238, "reorder_dimens": 238, "4300": 238, "compatible_strid": 238, "check_tensor_options_and_extract_memory_format": 238, "__memcmp_avx2_movb": 238, "empty_cpu": 238, "1300": 238, "2400": 238, "6100": 238, "compute_fast_setup_typ": 238, "22600": 238, "fast_set_up": 238, "58091": 238, "580": 238, "0x7f19299544d0": 238, "compute_shap": 238, "2300": 238, "coalesce_dimens": 238, "promin": 238, "__add__": 238, "__sub__": 238, "dice": 238, "szymon": 239, "migacz": 239, "set_to_non": 239, "elementwis": [239, 255], "anomali": 239, "detect_anomali": 239, "set_detect_anomali": 239, "emit_nvtx": 239, "nth": 239, "cpunodebind": 239, "membind": 239, "pytorch_script": 239, "omp_num_thread": [239, 257], "thrash": 239, "gomp_cpu_affin": 239, "omp_proc_bind": 239, "omp_schedul": 239, "libgomp": [239, 257], "sleep": 239, "jemalloc": [239, 257], "tcmalloc": [239, 257], "emphas": 239, "fragment": [239, 243], "ccl": 239, "alltoal": [239, 261], "set_float32_matmul_precis": 239, "judgment": 242, "sayak": 243, "paul": 243, "charl": 243, "bensimon": 243, "aot_inductor": 243, "package_constants_in_so": 243, "fullest": 243, "regional_aot": [243, 246, 260], "animesh": 244, "jain": 244, "startup": 244, "inline_inbuilt_nn_modul": 244, "graph_cod": 244, "strateg": 244, "929": 246, "horizont": [246, 259, 260], "foreach_map": [246, 259, 260], "torch_compiler_set_stance_tutori": [246, 252, 260], "torch_compile_torch_function_mod": [246, 250, 260], "torch_compile_user_defined_triton_kernel_tutori": [246, 251, 260], "torch_export_aoti_python": [246, 253, 260], "compile_model": 247, "resnet50_weight": 247, "weights_prepack": 247, "oguz": [248, 249, 251], "ulgen": [248, 249, 251], "sam": [248, 254], "larsen": 248, "fxgraphcach": [248, 249], "aotautogradcach": [248, 249], "redi": [248, 249], "usernam": 248, "aotautograd": [248, 249], "fxgraph": 248, "torchinductor_": 248, "torchinductor_myusernam": [248, 249], "triton_cache_dir": 248, "torchinductor_redis_host": 248, "torchinductor_redis_port": 248, "6379": 248, "cachebench": 249, "onward": 249, "save_cache_artifact": 249, "load_cache_artifact": 249, "artifact_byt": 249, "cache_info": 249, "pgo": 249, "tritoncach": 249, "cubin": [249, 253, 266], "inductorcach": 249, "autotuningcach": 249, "torchinductor_cache_dir": 249, "basetorchfunctionmod": 250, "flopcountermod": 251, "wrap_triton": 251, "footgun": 251, "register_kernel": 251, "register_flop_formula": 251, "flop_count": 251, "mysin": 251, "reappli": 252, "force_eag": 252, "eager_on_recompil": 252, "fail_on_recompil": 252, "torch.export": 253, "torch._inductor.aoti_compile_and_packag": 253, "aot_compil": 253, "torch._export.aoti_load_packag": 253, "ankith": [253, 254], "gunap": [253, 254], "bao": [253, 266], "_export": 253, "aot_load": 253, "runner": 253, "archive_format": 253, "10088": 253, "cagzt6akdaczvxwtbvqe34otfe5jlorktbqlojbzqjqvbfsjlge4": 253, "17160": 253, "c6oytfjmt5w4c7onvtm6fray7clirxt7q5xjbwx3hdydclmwoujz": 253, "16616": 253, "c7ydp7nocyz323hij4tmlf2kcedmwlyg6r57gaqzcsy3huneamu6": 253, "17776": 253, "cyqdf46ordevqhiddvpdpp3uzwatfbzdpl3auj2nx23uxvplnne2": 253, "10856": 253, "cpzfebfgrusqslui7fxsuoo4tvwulmrxirc5tmrpa4mvrbdno7kn": 253, "14608": 253, "c5ukeoz5wmaszd7vczdz2qhtt6n7tdbl3b6wuy4rb2se24fjwfoi": 253, "11376": 253, "csu3nstcp56tsjfycygaqsewpu64l5s6zavvz7537cm4s4cv2k3r": 253, "10984": 253, "cp76lez4glmgq7gedf2u25zvvv6rksv5lav4q22dibd2zicbgwj3": 253, "14736": 253, "c2bb5p6tnwz4elgujqelsrp3unvkgsyiv7xqxmpvuxcm4jfl7pc2": 253, "c6eopmb2b4ngodwsayae4r5q6ni3jlfogfbdk3ypg56tgpzhubfi": 253, "11624": 253, "chmwe6lvoekzfowdbiizitm3haiiuad5kdm6sd2m6mv6dkn2zk32": 253, "15632": 253, "c3jop5g344hj3ztsu4qm6ibxyaaerlhkzh2e6emak23rxfje6jam": 253, "25472": 253, "chaiixybeiuuitm2nmqnxzijzwgnn2n7uuss4qmsupgblfh3h5hk": 253, "139389": 253, "cvk6qzuybruhwxtfblzxiov3rlrziv5fkqc4mdhbmantfu3lmd6t": 253, "cvk6qzuybruhwxtfblzxiov3rlrziv5fkqc4mdhbmantfu3lmd6t_metadata": 253, "47195424": 253, "47523148": 253, "jordi": 254, "ramon": 254, "marco": 254, "carranza": 254, "mvit": 254, "whisper": 254, "blip": 254, "sam2": 254, "timm": 254, "multiscal": 254, "kinet": 254, "mvit_v1_b_weight": 254, "mvit_v1_b": 254, "224x224x3": 254, "input_fram": 254, "num_clip": 254, "print_exc": 254, "batch_dim": 254, "asr": 254, "transcrib": 254, "spoken": 254, "680k": 254, "whisperprocessor": 254, "whisperforconditionalgener": 254, "input_featur": 254, "decoder_input_id": 254, "decoder_start_token_id": 254, "internaltorchdynamoerror": 254, "attributeerror": 254, "dynamiccach": 254, "key_cach": 254, "non_strict": 254, "proxytensor": 254, "gameplai": 254, "gamer": 254, "salesforc": 254, "blip_decod": 254, "384": [254, 281], "caption_input": 254, "model_url": 254, "googleapi": 254, "sfr": 254, "model_base_capfilt_larg": 254, "exportdb": 254, "bos_token_id": 254, "anaconda3": 254, "functional_tensor": 254, "545": 254, "outs_unwrap": 254, "_op_dk": 254, "sam2imagepredictor": 254, "_predict": 254, "unnorm_coord": 254, "unnorm_box": 254, "mask_input": 254, "multimask_output": 254, "return_logit": 254, "image_predict": 254, "sam2_image_predictor": 254, "359": 254, "valueerror": 254, "exporthelp": 254, "model_to_export": 254, "aoti": 254, "preload": 257, "omp": [257, 276], "tunabl": 257, "taskset": 257, "uniform": 257, "uma": 257, "lscpu": 257, "9480": 257, "223": 257, "vendor": 257, "genuineintel": 257, "node0": 257, "node1": 257, "cento": 257, "yum": 257, "libiomp": 257, "perftool": 257, "gperftool": 257, "libjemalloc2": 257, "ninstanc": 257, "ncore": 257, "program_arg": 257, "iomp": 257, "prepend": 257, "core_id": 257, "dafault": 257, "ncores_per_inst": 257, "libtcmalloc": 257, "preliminarili": 257, "deepspe": 258, "marian": 258, "oftentim": 258, "print_peak_memori": 258, "max_memory_alloc": 258, "use_zero": 258, "optimizer_class": 258, "992": 258, "1361": 258, "3453": 258, "6123046875": 258, "1697": 258, "itt": 259, "vtune": 259, "torchcompil": 259, "run_cpu": 259, "graviton": 259, "compressor": 259, "tensorpip": 259, "dcp": 259, "commdebugmod": 259, "996": 260, "124": 260, "galleri": 260, "recipes_sourc": 260, "intermediate_sourc": 260, "torchao": [260, 282], "unstable_sourc": 260, "gpu_quantization_torchao_tutori": [260, 265, 282], "advanced_sourc": 260, "maskedtensor": [260, 282, 285], "maskedtensor_overview": [260, 273, 274, 275, 282], "maskedtensor_adagrad": [260, 272, 282], "vmap_recip": [260, 282, 284], "maskedtensor_spars": [260, 275, 282], "maskedtensor_advanced_semant": [260, 273, 282], "gpu_direct_storag": [260, 264, 282], "llama3": 261, "freq_ci": 261, "context_parallel": 261, "buffer_seq_dim": 261, "miscalcul": 261, "set_rotate_method": 261, "sdpbackend": 261, "sdpa_exampl": 261, "nhead": 261, "qkv_len": 261, "flash_attent": 261, "cudnn_attent": 261, "qkv": 261, "cp_sdpa_exampl": 261, "_attent": 261, "context_parallel_unshard": 261, "context_parallel_sdpa_exampl": 261, "mesh_shap": 261, "cp_qkv": 261, "cp_out": 261, "junji": 263, "impedi": 263, "starvat": 263, "deadlock": 263, "indefinit": 263, "diagnost": 263, "flight_record": 263, "torch_nccl_trace_buffer_s": 263, "torch_nccl_dump_on_timeout": 263, "torch_fr_dump_temp_fil": 263, "nccl_trace_rank_": 263, "torch_nccl_trace_cpp_stack": 263, "torch_symbolize_mod": 263, "torch_nccl_enable_tim": 263, "dladdr": 263, "addr2lin": 263, "debuginfowrit": 263, "registerwrit": 263, "_dump_nccl_trac": 263, "includecollect": 263, "includestacktrac": 263, "onlyact": 263, "pg_config": 263, "default_pg": 263, "pg_statu": 263, "last_enqueued_collect": 263, "last_started_collect": 263, "last_completed_collect": 263, "test_short_pickl": 263, "test_c10d_nccl": 263, "3647": 263, "spawn_main": 263, "record_id": 263, "pg_id": 263, "collective_seq_id": 263, "p2p_seq_id": 263, "op_id": 263, "profiling_nam": 263, "time_created_n": 263, "1724779239936775119": 263, "input_s": 263, "input_dtyp": 263, "time_discovered_started_n": 263, "time_discovered_completed_n": 263, "1724779239975811724": 263, "retir": 263, "timeout_m": 263, "600000": 263, "is_p2p": 263, "fr_trace": 263, "use_distribut": 263, "torchfrtrac": 263, "culprit": 263, "recod": 263, "torch_nccl_debug_info_temp_fil": 263, "trace_": 263, "trace_0": 263, "trace_1": 263, "bounc": 264, "gd": 264, "cufil": 264, "4kb": 264, "storage_align": 264, "serialization_config": 264, "gdsfile": 264, "skip_data": 264, "faketensormod": 264, "gds_register_buff": 264, "cufilebufregist": 264, "save_storag": 264, "cufilewrit": 264, "fake_tensor": 264, "fake_sd": 264, "untyped_storag": 264, "_checkpoint_offset": 264, "o_rdwr": 264, "sd_load": 264, "load_storag": 264, "cufileread": 264, "hdcharl": 265, "pg509": 265, "330": 265, "myenv": 265, "facebookresearch": 265, "vit_h": 265, "fbaipublicfil": 265, "segment_anyth": 265, "sam_vit_h_4b8939": 265, "sam_checkpoint_base_path": 265, "image_encod": 265, "instant": 265, "protect": 265, "43m": 265, "17gb": 265, "7x": 265, "16m": 265, "95m": 265, "24gb": 265, "int4": 265, "int8dynamicactivationint8weightconfig": 265, "int8weightonlyconfig": 265, "int4weightonlyconfig": 265, "apply_dynamic_qu": 265, "apply_weight_only_int8_qu": 265, "04m": 265, "58gb": 265, "dequant": 265, "force_fuse_int_mm_with_mul": 265, "78m": 265, "37gb": 265, "unquant": 265, "epilogu": [265, 276], "enlarg": 265, "39gb": 265, "appl": 265, "677": 265, "28m": 265, "729": 265, "65m": 265, "chunyuan": [266, 276], "cpp_wrapper": 266, "opt_fn": 266, "cpp_fused_add_lift_fresh_0": 266, "constant0": 266, "inductor_entry_cpp": 266, "19l": 266, "cppwrappercodecach": 266, "cpp_wrapper_src": 266, "c2buojsvlqbywxe3itb43hldieh4jqulk72iswa2awalwev7hjn2": 266, "_wrap_func": 266, "args_tensor": 266, "constants_tensor": 266, "lift_fresh": 266, "get_cuda_stream": 266, "triton_poi_fused_add_lift_fresh_0": 266, "cudaguard": 266, "device_guard": 266, "loadkernel": 266, "torchinductor_us": 266, "cmm6xjgijjffxjku4akv55eyzibirvw6bti6uqmfnruujm5cvvmw": 266, "triton_poi_fused_add_lift_fresh_0_0d1d2d3": 266, "cudeviceptr": 266, "var_0": 266, "reinterpret_cast": 266, "var_1": 266, "var_2": 266, "var_3": 266, "kernel_args_var_0": 266, "cudastream_t": 266, "getcurrentcudastream": 266, "launchkernel": 266, "czbpeilh4qqmbyejdgsbpdfuk2ss5jigl2qjb7xs4gearrjvuwem": 266, "zhaoqiong": 267, "zheng": 267, "xu": 267, "han": 267, "msvc": 267, "desktop": 267, "checkmark": 267, "cmd": 267, "vc": 267, "vcvars64": 267, "opt_foo1": 267, "9074e": 267, "3994e": 267, "3894e": 267, "2630e": 267, "3060e": 267, "1833e": 267, "4016e": 267, "1905e": 267, "0637e": 267, "3648e": 267, "3728e": 267, "2863e": 267, "6888e": 267, "5442e": 267, "6790e": 267, "2025e": 267, "2647e": 267, "2684e": 267, "2483e": 267, "2845e": 267, "7747e": 267, "2028e": 267, "1431e": 267, "7196e": 267, "5304e": 267, "1945e": 267, "6654e": 267, "7376e": 267, "3644e": 267, "3600e": 267, "0157e": 267, "7200e": 267, "0146e": 267, "8175e": 267, "4057e": 267, "8119e": 267, "2853e": 267, "2773e": 267, "5082e": 267, "4615e": 267, "4140e": 267, "2130e": 267, "0762e": 267, "3914e": 267, "1122e": 267, "6895e": 267, "8852e": 267, "3310e": 267, "4101e": 267, "8318e": 267, "2355e": 267, "9290e": 267, "3707e": 267, "3754e": 267, "3768e": 267, "8970e": 267, "1171e": 267, "9944e": 267, "2553e": 267, "3394e": 267, "3428e": 267, "8400e": 267, "1756e": 267, "0654e": 267, "7973e": 267, "4019e": 267, "1886e": 267, "9194e": 267, "3632e": 267, "1811e": 267, "1615e": 267, "6622e": 267, "2089e": 267, "2011e": 267, "0659e": 267, "0892e": 267, "1932e": 267, "3888e": 267, "3898e": 267, "3218e": 267, "4139e": 267, "4000e": 267, "1192e": 267, "0175e": 267, "6432e": 267, "0498e": 267, "4115e": 267, "3212e": 267, "0964e": 267, "0127e": 267, "7244e": 267, "2799e": 267, "3595e": 267, "0907e": 267, "7191e": 267, "4062e": 267, "3672e": 267, "8502e": 267, "5216e": 267, "6046e": 267, "icx": 267, "win64": 267, "clang": 267, "inductor_window": 268, "mobile_interpret": 271, "1369": 272, "weed": 272, "faithfulli": 272, "state_sum": 272, "addcmul_": 272, "addcdiv_": 272, "clr": 272, "_make_spars": 272, "grad_indic": 272, "sparse_coo_tensor": [272, 275], "_indic": 272, "grad_valu": 272, "_valu": 272, "sparse_mask": [272, 275], "std_valu": 272, "sqrt_": 272, "state_sum2": 272, "masked_grad": 272, "get_data": [272, 274], "std2": 272, "masked_tensor": [272, 274, 275], "to_spars": [272, 275], "param2": 272, "dodg": 272, "make_spars": 272, "brittl": 272, "argu": 272, "densif": 272, "csc": [272, 275], "bsr": [272, 275], "bsc": 272, "inconveni": 272, "conflat": 272, "disentangl": 272, "purposefulli": 272, "citizen": [272, 274], "relianc": 272, "unreli": [272, 274], "maskedarrai": [272, 285], "Their": [273, 275], "unspecifi": [273, 274, 275, 285], "intersect": 273, "logical_or": 273, "to_tensor": [273, 274], "mt0": 273, "get_mask": [273, 274], "mt1": 273, "rfc": [273, 276, 280], "revisit": 273, "ma": 273, "masked_arrai": 273, "mask0": 273, "mask1": 273, "necessit": 273, "as_masked_tensor": 274, "as_tensor": 274, "afterthought": 274, "born": 274, "recur": 274, "inabl": 274, "manifest": 274, "10729": 274, "troubl": 274, "52248": 274, "frustrat": 274, "4132": 274, "67180": 274, "longstand": 274, "unsaf": 274, "61474": 274, "nanmax": 274, "nanmin": 274, "lend": 274, "substructur": 275, "sparse_coo": 275, "sparse_csr": 275, "ndim": 275, "nse": 275, "int64": 275, "sparse_tensor_data": 275, "sparse_tensor_mask": 275, "dense_masked_tensor": 275, "to_sparse_coo": 275, "to_sparse_csr": 275, "nuanc": 275, "crow_indic": 275, "col_indic": 275, "nnz": 275, "to_dens": 275, "is_spars": 275, "is_sparse_coo": 275, "is_sparse_csr": 275, "mt": 275, "mt2": 275, "surfac": 275, "synergi": 275, "invest": 275, "lesli": 276, "fang": 276, "torchinductor_max_autotune_gemm_backend": 276, "torchinductor_freez": 276, "log_autotuning_result": 276, "amp_en": 276, "outperform": 276, "linear_unari": 276, "64x16": 276, "32x16": 276, "cpp_packed_gemm_0": 276, "2142": 276, "_linear_pointwis": 276, "2441": 276, "cpp_fused__to_copy_relu_1": 276, "kernel_micro_gemm_amx_kernel_32_2": 276, "amxstat": 276, "amx_stat": 276, "__restrict__": 276, "lda": 276, "ldb": 276, "ldc": 276, "uint8_t": 276, "tilecfg_row": 276, "kernel_micro_gemm": 276, "64l": 276, "tid": 276, "omp_get_thread_num": 276, "mc_block_id": 276, "num_mc_blocks_per_thread": 276, "n_block_start": 276, "n_block_end": 276, "nc_block": 276, "kc": 276, "k_block_start": 276, "k_block_end": 276, "kc_block": 276, "nci": 276, "nc_block_end": 276, "m_end": 276, "m_start": 276, "16l": 276, "div_floor_integ": 276, "n_end": 276, "n_start": 276, "loadu": 276, "local_acc_buf": 276, "nr": 276, "32l": 276, "invalu": 277, "nt": 277, "poss": 277, "irregularli": 277, "legal": 277, "semnat": 277, "law": 277, "daniil": 279, "lyakhov": 279, "aamir": 279, "nazir": 279, "suslov": 279, "yamini": 279, "nimmagadda": 279, "kozlov": 279, "openvinoquant": 279, "quantize_pt2": 279, "float_model": 279, "prepare_pt2": 279, "convert_pt2": 279, "traced_b": 279, "disable_patch": 279, "asymmetr": 279, "elu": 279, "prelu": 279, "quantizationpreset": 279, "model_typ": 279, "modeltyp": 279, "ignored_scop": 279, "layer_1": 279, "layer_2": 279, "layer_3": 279, "ignoredscop": 279, "regex": 279, "layer_": 279, "subgraph": 279, "target_devic": 279, "cpu_spr": 279, "targetdevic": 279, "fold": 279, "quantized_model": 279, "fold_quant": 279, "optimized_model": 279, "smoothquant": 279, "biascorrect": 279, "calibration_load": 279, "transform_fn": 279, "data_item": 279, "calibration_dataset": 279, "smooth_quant": 279, "fast_bias_correct": 279, "yuanhao": 280, "ji": 280, "effortless": 280, "huawei": 280, "torch_device_backend_autoload": 280, "torch_foo": 280, "_autoload": 280, "entry_point": 280, "habana_framework": 280, "__autoload": 280, "device_backend": 280, "is_load": 280, "entrypoint": 280, "_force_cutlass": 281, "2560": 281, "10240": 281, "dense_output": 281, "dense_t": 281, "1e3": 281, "sparse_output": 281, "sparse_t": 281, "80gb": 281, "870m": 281, "630m": 281, "382x": 281, "weightnormsparsifi": 281, "preprocess_validation_funct": 281, "only_second": 281, "return_overflowing_token": 281, "return_offsets_map": 281, "sample_map": 281, "overflow_to_sample_map": 281, "example_id": 281, "sample_idx": 281, "sequence_id": 281, "offset_map": 281, "preprocess_train_funct": 281, "start_posit": 281, "end_posit": 281, "start_char": 281, "answer_start": 281, "end_char": 281, "context_start": 281, "context_end": 281, "compute_metr": 281, "start_logit": 281, "end_logit": 281, "n_best": 281, "max_answer_length": 281, "example_to_featur": 281, "defaultdict": 281, "predicted_answ": 281, "feature_index": 281, "start_index": 281, "argsort": 281, "end_index": 281, "logit_scor": 281, "best_answ": 281, "prediction_text": 281, "theoretical_answ": 281, "measure_execution_tim": 281, "dataset_for_model": 281, "remove_column": 281, "set_format": 281, "batch_size_to_time_sec": 281, "column_nam": 281, "p50": 281, "automodelforquestionansw": 281, "squad_dataset": 281, "tokenized_squad_dataset": 281, "data_col": 281, "datacollatorwithpad": 281, "hyperparam": 281, "training_arg": 281, "trainingargu": 281, "num_train_epoch": 281, "lr_scheduler_typ": 281, "per_device_train_batch_s": 281, "per_device_eval_batch_s": 281, "eval_dataset": 281, "fp16_baselin": 281, "fp16_time": 281, "cuda_fp16": 281, "exact_match": 281, "53358561967833": 281, "9280493093186": 281, "927572380751371": 281, "607915310189128": 281, "18846387788653": 281, "91255673766136": 281, "sparsity_level": 281, "elemen": 281, "sparse_block_shap": 281, "zeros_per_block": 281, "sparse_config": 281, "tensor_fqn": 281, "named_modul": 281, "paramter": 281, "bertoutput": 281, "fakespars": 281, "elementwise_affin": 281, "59602649006622": 281, "51610004515979": 281, "edgeitem": 281, "0237": 281, "0130": 281, "0462": 281, "0272": 281, "0436": 281, "0492": 281, "0844": 281, "0340": 281, "0302": 281, "0350": 281, "0303": 281, "0175": 281, "0529": 281, "0327": 281, "0213": 281, "0258": 281, "0239": 281, "0380": 281, "0562": 281, "0432": 281, "0598": 281, "0262": 281, "0227": 281, "0244": 281, "0784": 281, "0761": 281, "0225": 281, "0395": 281, "0684": 281, "0344": 281, "metrics_spars": 281, "sparse_perf": 281, "43897824030275": 281, "48718950090766": 281, "621004460379481": 281, "368514601141214": 281, "702805917710066": 281, "19364519417286": 281, "87x": 281, "016": 282, "autovector": [284, 285], "42368": 284, "unsuccessfulli": 284, "rummag": 284, "shenanigin": 284, "8304": 284, "23475": 284, "performantli": 284, "7786": 284, "batch_of_sampl": 284, "grad_sampl": 284, "pypi": 285, "optimizi": 285, "coo": 285, "csr": 285, "flight": 285, "flightrecord": 285, "autoload": 285}, "objects": {}, "objtypes": {}, "objnames": {}, "titleterms": {"onnx": [0, 112, 113, 114, 115, 116], "live": 0, "tutori": [0, 37, 40, 52, 53, 55, 57, 60, 90, 97, 103, 123, 126, 136, 138, 169, 175, 177, 178, 185, 193, 194, 197, 198, 213, 214, 253, 266], "torchrl": [1, 17, 177], "object": [1, 105, 143, 197], "code": [1, 2, 10, 17, 37, 38, 57, 97, 220, 266, 272], "ddpg": 1, "loss": [1, 15, 38, 46, 49, 52, 55, 98, 102, 103, 104, 141, 145, 154, 177, 223, 242], "overview": [1, 21, 63, 112, 116, 123, 146, 154, 159, 182, 195, 205, 214, 239, 263, 274], "prerequisit": [1, 38, 103, 112, 116, 176, 207, 211, 229, 243, 244, 248, 249, 251, 252, 253, 254, 263, 266, 276, 279], "import": [1, 15, 47, 58, 91, 190, 226, 229, 240, 241, 242], "setup": [1, 21, 23, 91, 111, 129, 146, 153, 154, 165, 173, 176, 187, 188, 199, 203, 204, 211, 226, 229, 240, 241, 242, 243, 244, 255, 261, 281], "lossmodul": 1, "The": [1, 7, 10, 91, 93, 102, 142, 173, 174, 183, 198, 220], "__init__": [1, 35], "method": [1, 9, 18, 153, 165, 197, 236, 275], "valu": [1, 154, 169, 177, 194], "estim": [1, 161], "actor": 1, "put": [1, 161, 176, 197], "thing": [1, 17], "togeth": [1, 17, 141, 161, 168, 176, 197, 223], "forward": [1, 7, 118, 139, 146, 157, 160, 197, 198], "call": [1, 192], "environ": [1, 17, 56, 140, 154, 161, 177, 190, 265, 267], "transform": [1, 11, 17, 43, 44, 54, 98, 127, 128, 138, 141, 160, 170, 172, 173, 177, 182, 185, 198], "parallel": [1, 11, 47, 57, 59, 63, 132, 137, 138, 139, 141, 151, 152, 164, 172, 173, 208, 239, 261], "execut": [1, 17, 23, 113, 173, 179, 187, 229, 239], "normal": [1, 46, 177, 242], "observ": 1, "stat": 1, "build": [1, 4, 5, 9, 13, 34, 98, 105, 158, 174, 191, 198, 242, 283], "model": [1, 7, 11, 15, 21, 23, 34, 38, 39, 40, 47, 52, 58, 63, 78, 79, 88, 94, 96, 98, 100, 102, 103, 108, 110, 112, 113, 120, 122, 126, 127, 138, 139, 141, 142, 149, 151, 154, 155, 158, 161, 162, 164, 165, 172, 173, 175, 176, 183, 185, 187, 188, 190, 197, 203, 204, 211, 218, 219, 220, 222, 226, 229, 233, 234, 239, 240, 241, 243, 253, 254, 279], "explor": [1, 23], "data": [1, 7, 11, 27, 35, 39, 46, 47, 52, 53, 55, 57, 58, 59, 91, 98, 101, 111, 126, 137, 138, 139, 141, 144, 145, 151, 177, 183, 185, 187, 188, 190, 194, 195, 215, 226, 239, 240, 241, 242, 263, 274], "collector": [1, 154, 177], "evalu": [1, 52, 126, 142, 143, 144, 183, 223], "your": [1, 13, 17, 35, 63, 96, 100, 111, 118, 167, 197, 208, 226, 265], "record": [1, 187, 263], "replai": [1, 154, 177, 178], "buffer": [1, 154, 177, 239], "storag": [1, 254, 264], "batch": [1, 12, 17, 147, 160, 179, 191, 212, 239, 254], "size": [1, 254], "modul": [1, 7, 18, 70, 88, 98, 111, 118, 119, 154, 157, 169, 175, 195, 228, 236, 254], "construct": [1, 23, 58, 274, 275], "target": [1, 161, 239], "network": [1, 7, 34, 46, 49, 55, 91, 105, 108, 144, 145, 154, 161, 177, 178, 183, 185, 198, 223, 226, 240, 241, 242, 243], "updat": [1, 49, 161, 179], "optim": [1, 38, 39, 46, 55, 72, 102, 105, 111, 119, 139, 143, 168, 181, 195, 203, 204, 212, 239, 241, 242, 245, 257, 258], "time": [1, 22, 41, 50, 67, 73, 77, 85, 89, 99, 109, 117, 118, 121, 176, 184, 229, 235, 238, 243, 244, 246, 248, 249, 260, 282], "train": [1, 3, 4, 7, 11, 14, 17, 19, 26, 34, 35, 46, 52, 55, 56, 58, 91, 93, 96, 100, 102, 105, 120, 126, 138, 141, 142, 144, 145, 149, 150, 153, 154, 161, 168, 172, 177, 178, 183, 185, 188, 195, 199, 213, 239, 242, 247, 251, 279], "polici": [1, 17, 138, 154, 177], "experi": [1, 17, 18, 143], "result": [1, 3, 47, 55, 78, 113, 118, 143, 144, 148, 177, 183, 185, 187, 195, 220, 222, 224, 281], "conclus": [1, 2, 3, 4, 5, 7, 9, 17, 18, 19, 21, 52, 85, 103, 112, 113, 116, 123, 129, 140, 141, 146, 154, 158, 159, 161, 162, 168, 171, 173, 177, 182, 192, 194, 195, 198, 199, 201, 204, 205, 206, 207, 208, 211, 212, 228, 236, 239, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255, 257, 261, 263, 264, 265, 266, 267, 272, 273, 274, 275, 276, 277, 279, 280, 281], "next": [1, 46, 55, 78, 176, 177], "step": [1, 123, 168, 173, 174, 176, 177, 187, 198, 224, 226, 229, 240, 241, 242, 243, 244], "autograd": [2, 4, 12, 13, 33, 45, 65, 66, 80, 93, 119, 142, 146, 157, 181], "c": [2, 3, 4, 7, 8, 9, 10, 12, 13, 213, 238, 266], "frontend": [2, 7, 88, 90], "basic": [2, 7, 36, 37, 146, 151, 157, 171, 174, 179, 192, 194, 212, 251], "oper": [2, 4, 5, 9, 10, 12, 13, 19, 42, 51, 93, 107, 116, 171, 201, 239, 274, 275, 277], "comput": [2, 17, 22, 33, 41, 45, 50, 67, 73, 77, 85, 89, 99, 107, 109, 110, 117, 121, 126, 160, 165, 184, 222, 235, 239, 246, 260, 282], "higher": 2, "order": [2, 239], "gradient": [2, 15, 33, 78, 94, 139, 170, 199, 223, 239, 242, 274], "us": [2, 3, 7, 9, 11, 14, 15, 16, 26, 37, 45, 53, 56, 86, 111, 113, 116, 118, 120, 125, 137, 139, 146, 147, 149, 151, 152, 154, 155, 157, 170, 172, 174, 179, 180, 181, 182, 187, 188, 190, 202, 206, 207, 208, 214, 220, 222, 228, 229, 237, 239, 240, 251, 253, 255, 257, 258, 264, 267, 270, 274, 276], "custom": [2, 4, 5, 8, 9, 10, 13, 17, 18, 19, 35, 54, 70, 116, 119, 125, 126, 132, 147, 148, 157, 174, 175, 194, 197, 208], "function": [2, 15, 18, 33, 38, 46, 49, 55, 66, 78, 88, 91, 98, 102, 103, 104, 105, 111, 119, 147, 148, 157, 160, 165, 170, 175, 177, 211, 224, 229, 239, 242, 250], "translat": [2, 122, 128, 183], "from": [2, 9, 10, 45, 53, 111, 113, 120, 144, 145, 149, 166, 183, 190, 195, 197, 228, 240], "python": [2, 4, 5, 9, 10, 19, 88, 174, 253, 255], "cuda": [3, 4, 10, 53, 85, 171, 239], "graph": [3, 33, 45, 100, 107, 113, 146, 192, 194, 239, 254, 279], "pytorch": [3, 7, 9, 10, 13, 15, 18, 26, 45, 48, 53, 57, 60, 63, 65, 66, 68, 70, 71, 72, 76, 84, 92, 95, 96, 97, 98, 100, 101, 102, 105, 106, 107, 108, 110, 113, 116, 118, 119, 136, 153, 162, 171, 176, 187, 190, 195, 198, 201, 202, 210, 212, 213, 214, 215, 217, 220, 221, 226, 227, 229, 230, 237, 239, 240, 241, 242, 247, 262, 270, 279], "api": [3, 7, 63, 93, 139, 157, 162, 168, 174, 220, 239, 255, 263, 266], "get": [3, 13, 34, 85, 110, 137, 139, 151, 159, 167, 181, 206, 207, 208, 213, 214, 277], "start": [3, 85, 100, 137, 139, 151, 167, 181, 206, 207, 208, 213, 214, 238, 243, 244, 257, 277], "set": [4, 5, 91, 140, 143, 190, 203, 204, 211, 239, 248, 263, 265, 267], "up": [4, 5, 75, 119, 143, 190, 197, 203, 204, 211, 212, 238, 265, 267], "system": [4, 5], "defin": [4, 5, 7, 9, 12, 34, 46, 49, 52, 66, 103, 112, 119, 143, 173, 177, 190, 197, 224, 226, 238, 240, 241, 242, 243, 251], "op": [4, 5, 12, 194, 250], "ad": [4, 5, 12, 19, 91, 188, 195, 223, 251], "backend": [4, 5, 12, 13, 18, 140, 153, 159, 174, 214, 239, 247, 257, 279], "implement": [4, 5, 9, 12, 38, 55, 78, 104, 116, 147, 169, 174, 179, 180, 182, 211, 272, 274], "an": [4, 13, 17, 46, 108, 110, 116, 120, 142, 154, 177, 195, 204, 228, 257, 263], "regist": [4, 7, 12, 13, 18, 199], "torch": [4, 8, 33, 45, 84, 98, 107, 111, 112, 120, 144, 146, 151, 175, 182, 191, 192, 193, 194, 198, 203, 211, 223, 224, 228, 236, 244, 249, 250, 251, 252, 253, 254, 255, 257, 264, 267, 274, 279, 284], "compil": [4, 8, 130, 146, 159, 182, 191, 192, 198, 203, 204, 211, 243, 244, 248, 249, 250, 251, 252, 253, 255, 267, 276, 279], "support": [4, 8, 12, 13, 19, 91, 100, 116, 182, 251, 275], "hybrid": [4, 88, 90], "registr": 4, "test": [4, 5, 13, 17, 19, 46, 78, 91, 147, 191, 197, 226, 238], "creat": [4, 5, 10, 16, 35, 39, 47, 52, 101, 105, 107, 111, 143, 144, 145, 158, 165, 175, 239], "mutabl": [4, 19], "sycl": 5, "interfac": 5, "initi": [5, 42, 51, 55, 56, 139, 140, 151, 153, 161, 169, 226, 240, 241, 277], "packag": [5, 15, 81], "extens": [5, 13, 16, 132, 135, 174, 201, 204, 213, 236, 247, 280], "motiv": [7, 88, 272], "write": [7, 17, 54, 153, 188, 197, 272], "applic": [7, 153, 174, 202, 236], "neural": [7, 15, 34, 46, 49, 91, 111, 161, 165, 214, 226, 240, 241, 242, 243], "paramet": [7, 16, 34, 38, 39, 47, 98, 120, 175, 177, 179, 180, 224, 239, 240], "submodul": 7, "travers": 7, "hierarchi": [7, 220], "run": [7, 37, 47, 52, 53, 56, 57, 58, 78, 88, 97, 103, 143, 151, 187, 190, 194, 203, 204, 211, 229, 237], "mode": [7, 23, 157, 160, 250, 276], "ownership": 7, "dcgan": [7, 55], "what": [7, 13, 14, 18, 21, 46, 55, 59, 60, 93, 111, 120, 148, 155, 170, 171, 204, 207, 208, 220, 241, 253, 257, 258, 263, 281, 284], "wa": 7, "gan": [7, 55], "agan": 7, "gener": [7, 18, 55, 78, 120, 143, 145, 224, 232, 239], "discrimin": [7, 55, 104], "load": [7, 15, 35, 39, 40, 46, 52, 56, 103, 120, 126, 149, 151, 183, 185, 206, 215, 224, 226, 228, 231, 232, 233, 239, 240, 241, 242, 264], "loop": [7, 17, 38, 102, 154, 177, 178], "move": [7, 101], "gpu": [7, 46, 47, 58, 82, 91, 120, 171, 187, 195, 213, 239, 265, 270], "checkpoint": [7, 58, 120, 138, 151, 161, 205, 206, 228, 232, 239], "recov": 7, "state": [7, 139, 258], "inspect": [7, 146, 169, 175, 188, 223], "imag": [7, 15, 46, 61, 62, 100, 113, 126, 176, 190, 254], "class": [8, 9, 14, 17, 34, 54, 103, 169, 195], "export": [8, 112, 113, 116, 120, 193, 194, 253, 254, 279], "why": [8, 10, 56, 59, 141, 142, 207, 208, 274, 277], "do": [8, 12, 46, 93, 148, 162], "we": [8, 93], "need": [8, 12, 93, 198], "make": [8, 14, 104, 202], "fake": 8, "extend": [9, 13, 116, 175, 198], "bind": 9, "exampl": [9, 16, 19, 78, 82, 88, 93, 94, 105, 108, 110, 119, 120, 142, 198, 213, 214, 247, 252, 257, 263, 266, 276, 280], "project": [9, 198], "With": [9, 187], "cmake": 9, "serial": [9, 18, 175], "deseri": [9, 18], "take": 9, "return": [9, 142], "bound": 9, "author": [10, 113], "integr": [10, 18, 94], "manual": 10, "when": [10, 141, 148, 149, 253, 274], "should": [10, 59, 141], "i": [10, 14, 18, 31, 46, 55, 59, 60, 111, 120, 148, 149, 155, 168, 170, 198, 201, 207, 208, 220, 223, 241, 254, 258, 274, 284], "distribut": [11, 14, 20, 23, 56, 57, 58, 59, 63, 85, 132, 151, 152, 153, 173, 180, 181, 195, 205, 206, 239], "pipelin": [11, 152, 172, 173], "dispatch": [12, 13, 182], "schema": 12, "For": [12, 93, 233], "In": [12, 93, 101, 234], "place": [12, 93, 101], "view": [12, 187], "go": [12, 46, 55, 78, 190, 198], "beyond": 12, "autocast": [12, 223], "tracer": 12, "new": [13, 18, 66, 104, 119, 147], "": [13, 19, 107, 161, 273], "kei": [13, 254], "full": [13, 38, 91], "list": 13, "kernel": [13, 18, 85, 165, 211, 212, 251], "jit": [13, 176], "against": 13, "nativ": [13, 202], "backward": [13, 138, 139, 146, 147, 148, 168], "compat": 13, "known": 13, "issu": 13, "addit": [13, 123, 136, 171, 173, 187, 199, 263], "note": [13, 104, 222], "futur": [13, 18], "work": [13, 14, 18, 39, 137, 138, 139, 141, 162, 206, 280], "stai": 13, "touch": 13, "uneven": 14, "input": [14, 55, 58, 78, 148, 195, 198, 224, 239], "join": 14, "context": [14, 261], "manag": [14, 171], "requir": [14, 21, 113, 142, 175, 220, 254, 258, 281], "distributeddataparallel": [14, 151, 239], "zeroredundancyoptim": [14, 258], "pass": [14, 118, 140, 146, 168, 191, 226], "keyword": 14, "argument": 14, "how": [14, 18, 37, 137, 138, 139, 141, 168, 206, 208, 220, 226, 237, 258, 267, 280], "doe": [14, 21, 142, 281], "joinabl": 14, "joinhook": 14, "toi": 14, "transfer": [15, 126], "introduct": [15, 26, 45, 55, 63, 85, 92, 94, 95, 96, 97, 100, 101, 102, 107, 115, 140, 169, 171, 173, 187, 190, 192, 195, 196, 201, 226, 229, 240, 241, 242, 248, 249, 257, 261, 266, 267, 272, 275, 276, 279], "underli": 15, "principl": [15, 275], "select": [15, 154, 261, 283], "devic": [15, 18, 34, 120, 138, 225, 228, 231, 239], "content": [15, 119, 212], "style": [15, 198], "descent": 15, "numpi": [16, 42, 51, 75, 101, 119, 273], "scipi": 16, "less": 16, "parametr": [16, 169, 175], "pendulum": 17, "effect": 17, "action": [17, 154], "_step": 17, "reset": 17, "simul": 17, "_reset": 17, "metadata": [17, 18], "env": 17, "_spec": 17, "spec": 17, "shape": [17, 40, 101, 194, 230], "reproduc": 17, "seed": [17, 101], "wrap": [17, 19, 111, 138, 197, 238, 251], "envbas": 17, "our": [17, 23, 147, 153, 168, 191, 226, 240, 241, 242], "rollout": 17, "simpl": [17, 47, 93, 113, 158, 183, 223, 229], "facilit": 18, "privateuse1": 18, "via": [18, 263], "guard": [18, 194], "other": [18, 23, 98, 100, 102, 171, 187], "improv": [18, 118, 187, 212, 279], "user": [18, 84, 251], "renam": 18, "name": [18, 144, 145, 194], "properti": 18, "relat": [18, 40, 190, 236], "pil": 19, "crop": 19, "combin": [20, 141, 151], "dataparallel": [20, 47, 59, 91, 120, 151], "rpc": [20, 132, 152, 179, 180, 181, 210, 262], "framework": [20, 180, 181], "beta": [21, 157, 158, 182, 203, 204, 212, 216, 250, 253, 255, 278], "acceler": [21, 101, 111, 167, 198, 264, 281], "bert": [21, 281], "semi": [21, 26, 281], "structur": [21, 281], "2": [21, 46, 47, 88, 113, 140, 165, 173, 174, 187, 188, 197, 224, 226, 229, 238, 240, 241, 242, 279, 281], "4": [21, 46, 88, 113, 174, 176, 187, 188, 224, 226, 229, 238, 240, 241, 242, 279, 281], "sparsiti": [21, 275, 281], "problem": [21, 281], "solv": [21, 281], "intro": [21, 200, 281], "establish": 21, "baselin": 21, "prune": [21, 175, 281], "spars": [21, 272, 275, 281], "infer": [21, 44, 120, 126, 176, 212, 213, 223, 233, 239, 247, 253], "torchrec": [23, 195, 196], "shard": [23, 63, 137, 138, 139, 141, 195, 258], "instal": [23, 85, 94, 113, 176, 195, 214, 237, 267, 279], "embed": [23, 100, 110, 195], "distributedmodelparallel": [23, 195], "multiprocess": 23, "tabl": [23, 119, 129], "wise": 23, "supervis": 26, "learn": [26, 36, 37, 48, 60, 88, 104, 105, 106, 119, 126, 132, 161, 171, 177, 178, 179, 181, 187, 224, 226, 229, 237, 240, 241, 242, 253, 257, 263], "usb": 26, "built": 26, "upon": 26, "freematch": 26, "softmatch": 26, "cifar": [26, 103], "10": [26, 103, 168], "onli": [26, 213, 214], "40": 26, "label": [26, 190], "specif": [26, 190, 239], "imbalanc": 26, "algorithm": [26, 178], "audio": [27, 28, 29, 30, 31, 32], "augment": [27, 29, 85, 108, 239], "dataset": [28, 35, 47, 54, 96, 100, 102, 111, 125, 197, 242], "featur": [29, 30, 94, 108, 126, 138, 187, 190, 195, 213, 214], "extract": [30, 190], "o": 31, "resampl": 32, "automat": [33, 107, 157, 223, 254], "differenti": [33, 45, 107, 157], "tensor": [33, 42, 51, 65, 76, 83, 96, 101, 107, 119, 129, 132, 141, 142, 144, 168, 182, 198, 204, 236, 239, 254, 275, 277], "disabl": [33, 239], "track": [33, 148, 188], "more": [33, 93, 101, 142, 159, 160, 179, 187, 205, 224, 226, 229, 237, 240, 241, 242], "option": [33, 45, 47, 123, 197, 199, 226, 257, 279], "read": [33, 34, 35, 38, 43, 45, 56, 58, 59, 112, 113, 115, 116, 118, 123, 149, 150, 154, 190, 220, 239, 272, 274, 275], "jacobian": [33, 160, 165], "product": [33, 160, 165, 182], "further": [33, 34, 35, 38, 43, 45, 56, 58, 59, 112, 113, 115, 116, 118, 123, 126, 149, 150, 154, 198, 239, 272, 274, 275], "layer": [34, 94, 98, 141, 147, 198, 239], "nn": [34, 70, 71, 81, 88, 98, 111, 119, 120, 127, 128, 175, 198, 228, 236, 254], "flatten": 34, "linear": [34, 98, 105, 111], "relu": 34, "sequenti": [34, 111], "softmax": [34, 105, 274], "dataload": [35, 54, 96, 102, 111], "iter": [35, 52, 54, 175], "visual": [35, 94, 100, 113, 126, 168, 183, 185, 188, 199, 220, 222], "file": [35, 52, 113, 120, 149, 183, 234, 263], "__len__": 35, "__getitem__": 35, "prepar": [35, 52, 144, 145, 183, 187, 218, 219, 272, 273, 274], "through": [35, 54, 88, 226], "thi": [37, 60, 138, 168, 198, 280], "guid": [37, 139, 171, 239], "hyperparamet": [38, 91, 177, 178], "quickstart": 39, "save": [39, 40, 56, 58, 113, 120, 138, 142, 148, 149, 151, 161, 168, 205, 206, 223, 224, 231, 232, 233, 234, 240, 264], "weight": [40, 49, 55, 68, 119, 214], "attribut": [42, 51, 94, 222], "bridg": [42, 51, 101], "arrai": [42, 51], "totensor": 43, "lambda": 43, "fast": [44, 78, 212], "better": [44, 267, 276], "A": [45, 48, 60, 93, 94, 104, 147, 171, 220, 223, 232, 238, 240], "gentl": 45, "background": [45, 171], "usag": [45, 146, 147, 157, 168, 171, 192, 194, 212, 247, 251], "vector": [45, 155, 160, 165], "calculu": 45, "exclus": 45, "dag": 45, "classifi": [46, 105, 113, 144, 190], "about": [46, 230], "1": [46, 88, 113, 140, 165, 173, 174, 187, 188, 194, 197, 224, 226, 229, 238, 240, 241, 242, 279], "cifar10": 46, "convolut": [46, 98, 147, 154, 191, 239], "3": [46, 47, 88, 113, 140, 173, 174, 187, 188, 224, 226, 229, 238, 240, 241, 242, 279], "5": [46, 113, 187, 188, 224, 229, 238, 242], "multipl": [46, 120, 175, 234], "where": [46, 55, 78, 190, 274], "dummi": 47, "8": [47, 224, 238], "summari": [47, 129, 138, 182, 221], "deep": [48, 60, 104, 105, 106, 131], "60": [48, 60], "minut": [48, 60], "blitz": [48, 60], "backprop": 49, "chatbot": 52, "preprocess": [52, 125, 161, 176], "format": [52, 113, 162, 206, 239, 263], "trim": 52, "seq2seq": [52, 183], "encod": [52, 110, 183], "decod": [52, 183], "procedur": 52, "mask": [52, 198, 274], "singl": [52, 164], "greedi": 52, "my": 52, "text": [52, 124, 125, 189], "googl": 53, "colab": 53, "version": [53, 165], "drive": 53, "enabl": [53, 139, 239, 261, 263, 266], "compos": [54, 160, 251], "afterword": 54, "torchvis": [54, 79, 197], "adversari": [55, 78], "fault": 56, "toler": 56, "torchrun": [56, 151], "grace": 56, "restart": 56, "process": [56, 58, 151, 173, 174, 179], "group": [56, 58, 174], "provid": 56, "variabl": [56, 140, 239], "snapshot": [56, 168], "trainer": 56, "constructor": [56, 239], "resum": [56, 120, 223], "script": [56, 88, 167, 245, 257], "video": [57, 176, 254], "section": 57, "multi": [58, 82, 91, 143], "ddp": [58, 59, 132, 149, 151, 239], "job": [58, 229, 263], "you": [59, 100, 141, 171, 198, 222, 253, 257, 263], "prefer": 59, "over": 59, "dp": 59, "goal": 60, "segment": [61, 62, 197, 254], "deeplabv3": [61, 62], "android": [61, 202, 216, 218, 271, 283], "io": [62, 216, 219, 270, 271, 283], "primit": 63, "commun": [63, 85, 91, 153], "launcher": 63, "appli": [63, 141, 257, 279, 280], "To": 63, "scale": [63, 141, 150, 182], "develop": 63, "control": [68, 112, 119, 182, 194, 239, 252, 257], "flow": [68, 112, 119, 194, 254], "share": [68, 119], "warm": [75, 119], "threat": 78, "sign": 78, "attack": 78, "under": 78, "fgsm": 78, "accuraci": [78, 91, 159, 214], "v": [78, 129, 160, 171, 273], "epsilon": 78, "sampl": [78, 145, 170, 220], "finetun": [79, 126, 197], "former": 84, "holist": [85, 86], "trace": [85, 86, 88, 158, 192, 220, 229, 254, 283], "analysi": [85, 86], "hta": 85, "tempor": 85, "breakdown": 85, "idl": 85, "durat": 85, "overlap": 85, "counter": 85, "memori": [85, 108, 118, 142, 147, 162, 168, 171, 178, 205, 212, 229, 239, 257], "bandwidth": 85, "queue": 85, "length": [85, 239], "launch": [85, 173, 220], "statist": 85, "diff": 86, "syntax": 88, "inform": [88, 159], "part": [88, 108], "pure": 88, "top": 88, "level": [88, 93, 108, 144, 145], "tune": [91, 138, 212, 214, 239], "rai": 91, "loader": 91, "configur": [91, 143, 220, 248], "search": 91, "space": 91, "youtub": [92, 95, 97], "seri": [92, 97], "fundament": 93, "turn": [93, 144], "off": 93, "On": 93, "profil": [93, 118, 158, 159, 187, 210, 220, 229, 262], "advanc": [93, 104, 138, 153, 187, 201, 223, 251, 273], "topic": [93, 153, 223], "detail": 93, "high": [93, 182], "understand": [94, 129], "captum": [94, 222], "first": [94, 112, 169], "occlus": 94, "gradcam": 94, "insight": 94, "common": [98, 146, 254], "type": [98, 101, 195, 223, 254], "recurr": [98, 154], "manipul": [98, 101], "activ": [98, 102, 276], "tensorboard": [100, 187, 188, 237], "befor": [100, 190, 222], "show": 100, "scalar": [100, 237], "resourc": [100, 102, 136, 171, 173], "random": [101, 104], "math": [101, 212], "logic": 101, "brief": 101, "broadcast": 101, "alter": 101, "copi": [101, 171], "chang": [101, 225], "number": 101, "dimens": [101, 212], "per": [102, 170], "epoch": 102, "knowledg": 103, "distil": 103, "util": [103, 175, 178, 198, 201, 224, 236, 239, 250], "cross": [103, 198], "entropi": 103, "cosin": 103, "minim": 103, "intermedi": [103, 148, 239], "regressor": 103, "dynam": [104, 194, 252], "decis": 104, "bi": 104, "lstm": [104, 108, 154], "crf": 104, "versu": 104, "static": [104, 214, 254], "toolkit": 104, "condit": 104, "field": 104, "discuss": 104, "exercis": [104, 108, 110, 123, 144, 145, 183, 199], "tag": [104, 108], "block": [105, 198, 224], "affin": 105, "map": 105, "non": [105, 129, 171, 194, 204, 239], "probabl": 105, "compon": [105, 159], "logist": 105, "regress": 105, "bag": [105, 110], "word": [105, 110], "nlp": [106, 144, 145, 166, 183], "librari": [107, 124, 190, 202, 226, 229, 239, 240, 241, 242, 257], "reshap": 107, "sequenc": [108, 141, 183], "long": [108, 229], "short": [108, 220], "term": 108, "speech": [108, 186, 189, 254], "tagger": 108, "charact": [108, 144, 145], "lexic": 110, "semant": [110, 272, 273], "dens": [110, 182], "n": 110, "gram": 110, "languag": [110, 127, 128], "continu": 110, "realli": 111, "mnist": 111, "net": 111, "scratch": [111, 144, 145, 166, 183], "without": 111, "refactor": [111, 112], "add": [111, 140, 197, 250], "valid": [111, 239], "fit": [111, 168], "get_data": 111, "switch": [111, 239], "cnn": 111, "close": 111, "thought": 111, "attempt": 112, "suggest": [112, 194], "patch": [112, 190], "cond": 112, "depend": [113, 115, 182, 194, 195], "netron": 113, "6": [113, 187, 188, 224, 229, 238], "runtim": [113, 239, 253, 257], "7": [113, 187, 224, 229, 238], "compar": [113, 224], "ones": 113, "overrid": 116, "exist": [116, 162], "perform": [118, 140, 155, 158, 159, 162, 170, 176, 182, 187, 205, 212, 217, 239, 252, 257, 267, 276], "debug": [118, 159, 239, 263], "print": 118, "state_dict": [120, 241], "recommend": [120, 144, 171, 192], "entir": 120, "program": [120, 194], "One": [120, 234], "warmstart": [120, 240], "differ": [120, 146, 197, 240], "across": [120, 231], "cpu": [120, 138, 142, 158, 159, 171, 201, 213, 220, 239, 247, 251, 257, 267, 276], "t5": [122, 138], "base": [122, 210, 262, 283], "summar": 122, "sentiment": 122, "classif": [122, 124, 190, 254], "templat": 123, "torchtext": [124, 125, 127, 128], "vision": [126, 239], "few": 126, "predict": [126, 190], "convnet": 126, "fix": [126, 194], "extractor": 126, "requires_grad": 129, "retain_grad": 129, "leaf": 129, "refer": [129, 199], "dive": 131, "fsdp2": [132, 139], "tp": [132, 141], "devicemesh": [132, 208], "domain": 133, "ecosystem": 134, "welcom": 136, "fulli": [137, 138, 139, 141, 198], "fsdp": [137, 138], "recap": 138, "fine": 138, "hf": 138, "mix": [138, 139, 149, 223, 239], "precis": [138, 139, 149, 223, 239], "intial": 138, "strategi": [138, 143], "prefetch": [138, 139], "stream": 138, "rank0": 138, "clip": [139, 223], "dtensor": 139, "dict": 139, "dcp": [139, 205, 206], "fsdp1": 139, "migrat": 139, "libuv": 140, "tcpstore": 140, "benchmark": [140, 191, 203, 224], "impact": 140, "exit": 140, "rout": 140, "use_libuv": 140, "fals": 140, "0": [140, 194, 274], "init_method": 140, "processgroup": 140, "larg": 141, "layernorm": 141, "rmsnorm": 141, "hook": [142, 168, 199], "typic": 142, "than": 142, "concept": [142, 194], "pack": [142, 198], "unpack": 142, "some": 142, "unconvent": 142, "int": 142, "tupl": 142, "str": 142, "disk": 142, "na": 143, "ax": 143, "torchx": 143, "app": 143, "runner": 143, "searchspac": 143, "metric": [143, 279], "optimizationconfig": 143, "choos": [143, 257], "schedul": [143, 204], "acknowledg": 143, "rnn": [144, 145, 181], "plot": [144, 145, 183], "captur": [146, 158, 168, 176, 279], "larger": 146, "log": [146, 159, 161, 237], "flag": 146, "address": [146, 254], "certain": 146, "limit": [146, 251], "aotautograd": 146, "recompil": [146, 252], "reason": [146, 230], "fuse": [147, 168, 182, 191, 195, 239], "norm": [147, 191, 239], "formula": [147, 251], "batchnorm": 147, "out": [147, 191, 242, 280], "comparison": [147, 151, 170, 192], "doubl": 148, "output": [148, 195], "real": [149, 176], "world": 149, "cloud": 149, "enough": 149, "multinod": 150, "local": 150, "global": [150, 175], "rank": 150, "heteregen": 150, "troubleshoot": [150, 176, 223], "between": [151, 274], "case": [151, 239], "skew": 151, "speed": [151, 212], "point": [153, 236], "collect": [153, 177, 224], "own": 153, "ring": 153, "allreduc": 153, "dqn": [154, 178], "mlp": 154, "q": [154, 178], "ensembl": 155, "vmap": [155, 284], "forc": 156, "align": 156, "wav2vec2": [156, 186], "fx": [158, 192, 279], "symbol": [158, 194], "interpret": [158, 216, 222, 271, 283], "investig": 158, "resnet18": [158, 191], "inductor": [159, 248, 266], "determin": 159, "error": [159, 194, 223, 254], "hessian": 160, "hvp": 160, "vhp": 160, "revers": 160, "jacrev": 160, "jacfwd": 160, "functorch": 160, "mario": 161, "plai": 161, "rl": 161, "agent": 161, "definit": 161, "act": 161, "cach": [161, 169, 248, 249], "recal": 161, "td": 161, "all": [161, 168, 198, 223, 229, 239], "let": 161, "channel": 162, "last": 162, "gain": [162, 252], "convert": [162, 269, 278], "machin": 164, "best": [164, 192, 195], "practic": [164, 171, 187, 192, 195], "tangent": 165, "ntk": 165, "contract": 165, "nvfuser": 167, "dure": [168, 239], "disclaim": 168, "techniqu": 168, "register_post_accumulate_grad_hook": 168, "everyth": [168, 197], "line": 168, "hand": 169, "ar": [169, 198], "citizen": 169, "concaten": 169, "remov": [169, 175], "grad": [170, 239, 274], "effici": [170, 216, 239, 272], "wai": 170, "good": 171, "non_block": 171, "pin_memori": 171, "preambl": 171, "pageabl": 171, "asynchron": [171, 179, 205, 239], "synchron": [171, 239], "true": [171, 228, 239], "cudamemcpyasync": 171, "perspect": 171, "synergi": 171, "direct": 171, "mp": 171, "consider": 171, "partit": 173, "main": 173, "cpp": 174, "subclass": [174, 182, 236], "expos": 174, "re": 175, "raspberri": 176, "pi": 176, "30": 176, "fp": 176, "opencv": 176, "choic": 176, "mobilenetv2": [176, 269, 278], "quantiz": [176, 214, 265, 279], "It": 176, "reinforc": [177, 178, 181], "ppo": 177, "server": [179, 180], "cartpol": 179, "solver": 179, "rref": 181, "dot": 182, "attent": [182, 183, 198], "sdpa": 182, "explicit": [182, 211], "hardwar": 182, "causal": 182, "self": 182, "nestedtensor": 182, "attn_bia": 182, "spatial": 185, "depict": 185, "stn": 185, "recognit": [186, 254], "event": 187, "analyz": [187, 229, 263], "help": 187, "amd": 187, "projector": 188, "assess": 188, "tacotron2": 189, "whole": 190, "slide": 190, "tiatoolbox": 190, "clean": 190, "download": 190, "patchpredictor": 190, "pathologi": 190, "here": 190, "fuser": 191, "pattern": 191, "match": [191, 239], "fusion": [191, 211], "nest": [192, 198, 277], "demonstr": [192, 254], "speedup": [192, 223], "torchscript": 192, "torchdynamo": [192, 249, 254], "nightli": 193, "break": [194, 254], "strict": [194, 254], "constraint": 194, "special": 194, "dim": 194, "violat": 194, "_check": 194, "ir": 194, "decomposit": 194, "exportdb": 194, "recsi": 195, "embeddingbag": 195, "embeddingbagcollect": 195, "planner": 195, "lazyawait": 195, "anatomi": 195, "lookup": 195, "detect": 197, "pennfudan": 197, "pretrain": 197, "modifi": [197, 223], "backbon": 197, "instanc": 197, "replac": 198, "me": 198, "introduc": [198, 271], "abov": 198, "octob": 198, "2024": 198, "multiheadattent": 198, "gpt": 198, "one": 198, "row": 198, "longer": 198, "caus": 198, "nan": [198, 223, 274], "swiglu": 198, "feed": 198, "leverag": 201, "intel": [201, 213, 214, 220, 239, 247, 257, 267], "matrix": 201, "amx": 201, "guidelin": 201, "workload": [201, 210, 220, 239, 262], "can": 201, "confirm": 201, "being": 201, "prebuilt": 202, "see": [203, 251, 277], "also": [203, 251, 277], "lr": 204, "happen": 204, "even": 205, "pin": 205, "commdebugmod": 207, "hsdp": 208, "solut": [208, 254], "horizont": 211, "foreach_map": 211, "helper": [211, 275], "aw": 212, "graviton": 212, "processor": 212, "bfloat16": [212, 213], "openbla": 212, "smaller": 212, "alloc": [212, 239, 257], "overhead": 212, "linux": 212, "transpar": 212, "huge": 212, "page": 212, "thp": 212, "float32": 213, "float16": 213, "eas": 214, "compressor": 214, "fp8": 214, "pt2e": 214, "driven": 214, "mobil": [216, 217, 221, 245, 283], "recip": [217, 218, 219, 221, 227, 245, 259], "instrument": 220, "technologi": 220, "itt": 220, "vtune": 220, "xpu": [220, 267], "showcas": 220, "begin": 222, "final": 222, "default": [223, 225], "gradscal": 223, "e": 223, "g": 223, "amp": [223, 239], "minor": 223, "inf": 223, "mismatch": 223, "mai": 223, "manifest": 223, "cudnn_status_bad_param": 223, "syntaxerror": 224, "timeit": 224, "timer": [224, 238], "autorang": 224, "fuzz": 224, "instruct": [224, 238], "count": [224, 238], "callgrind": [224, 238], "necessari": [226, 229, 240, 241, 242], "specifi": 226, "tip": 228, "mmap": 228, "meta": 228, "load_state_dict": [228, 236], "assign": 228, "instanti": 229, "resnet": 229, "consumpt": 229, "examin": 229, "stack": 229, "And": [232, 233], "swap_tensor": 236, "quick": [238, 257], "wall": 238, "blocked_autorang": 238, "snippet": 238, "collect_callgrind": 238, "delv": 238, "deeper": 238, "b": [238, 240], "footnot": 238, "calcul": 239, "bia": 239, "directli": 239, "follow": 239, "none": 239, "instead": 239, "zero_grad": 239, "channels_last": 239, "uniform": 239, "access": [239, 241, 257, 274], "numa": [239, 257], "openmp": [239, 257], "libiomp": 239, "core": [239, 269], "cudnn": 239, "auto": 239, "tuner": 239, "avoid": 239, "unnecessari": 239, "prealloc": 239, "skip": 239, "reduc": [239, 243, 244], "accumul": 239, "find_unused_paramet": 239, "balanc": 239, "zero": 242, "while": 242, "aot": 243, "cold": [243, 244], "region": [243, 244], "ahead": 243, "_regions_": 243, "measur": [243, 252], "fp32": 247, "bf16": 247, "torchinductor_fx_graph_cach": 248, "torchinductor_autograd_cach": 248, "torchinductor_cache_dir": 248, "torchinductor_fx_graph_remote_cach": 248, "torchinductor_autograd_remote_cach": 248, "torchinductor_autotune_remote_cach": 248, "torchinductor_force_disable_cach": 248, "offer": 249, "end": [249, 263], "mega": 249, "modular": 249, "torchinductor": 249, "triton": [249, 251], "remot": 249, "rewrit": 250, "mul": 250, "triton_op": 251, "fallback": 251, "flopcount": 251, "set_stanc": 252, "descript": 252, "prevent": 252, "crash": 252, "sooner": 252, "aotinductor": 253, "challeng": 254, "them": 254, "No": 254, "caption": 254, "cannot": 254, "mutat": 254, "frozen": 254, "promptabl": 254, "torch_log": 255, "xeon": 257, "run_cpu": 257, "Will": 257, "command": 257, "explan": 257, "rotat": 261, "approach": 261, "flight": 263, "stuck": 263, "retriev": 263, "dump": 263, "prototyp": [264, 265, 269, 270, 271, 281, 283], "gpudirect": 264, "torchao": 265, "wrapper": 266, "window": 267, "softwar": 267, "altern": 267, "llvm": 267, "ml": 269, "lite": 271, "workflow": 271, "adagrad": 272, "maskedtensor": [272, 273, 274, 275], "simpler": 272, "origin": 272, "maskedarrai": 273, "reduct": [273, 275], "index": 274, "slice": 274, "distinguish": 274, "anoth": 274, "x": 274, "yield": 274, "nansum": 274, "nanmean": 274, "safe": 274, "miss": 274, "coo": 275, "csr": 275, "unari": 275, "binari": 275, "appendix": 275, "max": 276, "autotun": 276, "nnapi": 278, "openvino": 279, "post": 279, "nncf": 279, "lower": 279, "represent": 279, "autoload": 280, "tree": 280, "mechan": 280, "so": 284, "unstabl": 285}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 60}, "alltitles": {"ONNX Live Tutorial": [[0, "onnx-live-tutorial"]], "TorchRL objectives: Coding a DDPG loss": [[1, "torchrl-objectives-coding-a-ddpg-loss"]], "Overview": [[1, "overview"], [21, "overview"], [112, "overview"], [116, "overview"], [123, "overview"], [146, "overview"], [154, "overview"], [159, "overview"], [182, "overview"], [214, "overview"], [239, "overview"], [263, "overview"]], "Prerequisites": [[1, "prerequisites"], [103, "prerequisites"], [112, "prerequisites"], [116, "prerequisites"], [176, "prerequisites"], [207, "prerequisites"], [211, "prerequisites"], [229, "prerequisites"], [243, "prerequisites"], [244, "prerequisites"], [248, "prerequisites"], [249, "prerequisites"], [251, "prerequisites"], [252, "prerequisites"], [253, "prerequisites"], [254, "prerequisites"], [263, "prerequisites"], [279, "prerequisites"]], "Imports and setup": [[1, "imports-and-setup"]], "TorchRL LossModule": [[1, "torchrl-lossmodule"]], "The __init__ method": [[1, "the-init-method"]], "The value estimator loss method": [[1, "the-value-estimator-loss-method"]], "The actor loss method": [[1, "the-actor-loss-method"]], "The value loss method": [[1, "the-value-loss-method"]], "Putting things together in a forward call": [[1, "putting-things-together-in-a-forward-call"]], "Environment": [[1, "environment"], [154, "environment"], [161, "environment"]], "Transforms": [[1, "transforms"], [43, "transforms"], [54, "transforms"], [177, "transforms"]], "Parallel execution": [[1, "parallel-execution"]], "Normalization of the observations": [[1, "normalization-of-the-observations"]], "Normalization stats": [[1, "normalization-stats"]], "Building the model": [[1, "building-the-model"]], "Exploration": [[1, "exploration"]], "Data collector": [[1, "data-collector"], [177, "data-collector"]], "Evaluator: building your recorder object": [[1, "evaluator-building-your-recorder-object"]], "Replay buffer": [[1, "replay-buffer"], [177, "replay-buffer"]], "Replay buffer storage and batch size": [[1, "replay-buffer-storage-and-batch-size"]], "Loss module construction": [[1, "loss-module-construction"]], "Target network updater": [[1, "target-network-updater"]], "Optimizer": [[1, "optimizer"], [38, "optimizer"], [102, "optimizer"]], "Time to train the policy": [[1, "time-to-train-the-policy"]], "Experiment results": [[1, "experiment-results"]], "Conclusion": [[1, "conclusion"], [2, "conclusion"], [3, "conclusion"], [4, "conclusion"], [5, "conclusion"], [7, "conclusion"], [9, "conclusion"], [17, "conclusion"], [18, "conclusion"], [19, "conclusion"], [21, "conclusion"], [52, "conclusion"], [85, "conclusion"], [103, "conclusion"], [112, "conclusion"], [113, "conclusion"], [116, "conclusion"], [123, "conclusion"], [129, "conclusion"], [140, "conclusion"], [141, "conclusion"], [146, "conclusion"], [154, "conclusion"], [158, "conclusion"], [159, "conclusion"], [161, "conclusion"], [162, "conclusion"], [168, "conclusion"], [171, "conclusion"], [173, "conclusion"], [182, "conclusion"], [192, "conclusion"], [194, "conclusion"], [195, "conclusion"], [198, "conclusion"], [199, "conclusion"], [201, "conclusion"], [204, "conclusion"], [205, "conclusion"], [206, "conclusion"], [207, "conclusion"], [208, "conclusion"], [211, "conclusion"], [212, "conclusion"], [228, "conclusion"], [236, "conclusion"], [239, "conclusion"], [243, "conclusion"], [244, "conclusion"], [248, "conclusion"], [249, "conclusion"], [250, "conclusion"], [251, "conclusion"], [252, "conclusion"], [253, "conclusion"], [254, "conclusion"], [255, "conclusion"], [257, "conclusion"], [261, "conclusion"], [263, "conclusion"], [264, "conclusion"], [265, "conclusion"], [266, "conclusion"], [267, "conclusion"], [272, "conclusion"], [273, "conclusion"], [274, "conclusion"], [275, "conclusion"], [276, "conclusion"], [277, "conclusion"], [279, "conclusion"], [280, "conclusion"], [281, "conclusion"]], "Next Steps": [[1, "next-steps"], [176, "next-steps"]], "Autograd in C++ Frontend": [[2, "autograd-in-c-frontend"]], "Basic autograd operations": [[2, "basic-autograd-operations"]], "Computing higher-order gradients in C++": [[2, "computing-higher-order-gradients-in-c"]], "Using custom autograd function in C++": [[2, "using-custom-autograd-function-in-c"]], "Translating autograd code from Python to C++": [[2, "translating-autograd-code-from-python-to-c"]], "Using CUDA Graphs in PyTorch C++ API": [[3, "using-cuda-graphs-in-pytorch-c-api"]], "Getting Started": [[3, "getting-started"], [85, "getting-started"], [213, "getting-started"], [214, "getting-started"]], "Training Results": [[3, "training-results"]], "Custom C++ and CUDA Operators": [[4, "custom-c-and-cuda-operators"]], "Setting up the Build System": [[4, "setting-up-the-build-system"], [5, "setting-up-the-build-system"]], "Defining the custom op and adding backend implementations": [[4, "defining-the-custom-op-and-adding-backend-implementations"], [5, "defining-the-custom-op-and-adding-backend-implementations"]], "Defining an operator": [[4, "defining-an-operator"]], "Registering backend implementations for an operator": [[4, "registering-backend-implementations-for-an-operator"]], "Adding torch.compile support for an operator": [[4, "adding-torch-compile-support-for-an-operator"]], "Setting up hybrid Python/C++ registration": [[4, "setting-up-hybrid-python-c-registration"]], "Adding training (autograd) support for an operator": [[4, "adding-training-autograd-support-for-an-operator"]], "Testing an operator": [[4, "testing-an-operator"]], "Creating mutable operators": [[4, "creating-mutable-operators"]], "Custom SYCL Operators": [[5, "custom-sycl-operators"]], "Create a Python Interface": [[5, "create-a-python-interface"]], "Initialize Package": [[5, "initialize-package"]], "Testing SYCL extension operator": [[5, "testing-sycl-extension-operator"]], "Using the PyTorch C++ Frontend": [[7, "using-the-pytorch-c-frontend"]], "Motivation": [[7, "motivation"]], "Writing a Basic Application": [[7, "writing-a-basic-application"]], "Defining the Neural Network Models": [[7, "defining-the-neural-network-models"]], "Module API Basics": [[7, "module-api-basics"]], "Defining a Module and Registering Parameters": [[7, "defining-a-module-and-registering-parameters"]], "Registering Submodules and Traversing the Module Hierarchy": [[7, "registering-submodules-and-traversing-the-module-hierarchy"]], "Running the Network in Forward Mode": [[7, "running-the-network-in-forward-mode"]], "Module Ownership": [[7, "module-ownership"]], "Defining the DCGAN Modules": [[7, "defining-the-dcgan-modules"]], "What was a GAN aGAN?": [[7, "what-was-a-gan-agan"]], "The Generator Module": [[7, "the-generator-module"]], "The Discriminator Module": [[7, "the-discriminator-module"]], "Loading Data": [[7, "loading-data"]], "Writing the Training Loop": [[7, "writing-the-training-loop"]], "Moving to the GPU": [[7, "moving-to-the-gpu"]], "Checkpointing and Recovering the Training State": [[7, "checkpointing-and-recovering-the-training-state"]], "Inspecting Generated Images": [[7, "inspecting-generated-images"]], "Supporting Custom C++ Classes in torch.compile/torch.export": [[8, "supporting-custom-c-classes-in-torch-compile-torch-export"]], "Why do we need to make a Fake Class?": [[8, "why-do-we-need-to-make-a-fake-class"]], "Extending PyTorch with Custom C++ Classes": [[9, "extending-pytorch-with-custom-c-classes"]], "Implementing and Binding the Class in C++": [[9, "implementing-and-binding-the-class-in-c"]], "Building the Example as a C++ Project With CMake": [[9, "building-the-example-as-a-c-project-with-cmake"]], "Using the C++ Class from Python": [[9, "using-the-c-class-from-python"]], "Defining Serialization/Deserialization Methods for Custom C++ Classes": [[9, "defining-serialization-deserialization-methods-for-custom-c-classes"]], "Defining Custom Operators that Take or Return Bound C++ Classes": [[9, "defining-custom-operators-that-take-or-return-bound-c-classes"]], "PyTorch Custom Operators": [[10, "pytorch-custom-operators"]], "Authoring a custom operator from Python": [[10, "authoring-a-custom-operator-from-python"]], "Integrating custom C++ and/or CUDA code with PyTorch": [[10, "integrating-custom-c-and-or-cuda-code-with-pytorch"]], "The Custom Operators Manual": [[10, "the-custom-operators-manual"]], "When should I create a Custom Operator?": [[10, "when-should-i-create-a-custom-operator"]], "Why should I create a Custom Operator?": [[10, "why-should-i-create-a-custom-operator"]], "Training Transformer models using Distributed Data Parallel and Pipeline Parallelism": [[11, "training-transformer-models-using-distributed-data-parallel-and-pipeline-parallelism"]], "Registering a Dispatched Operator in C++": [[12, "registering-a-dispatched-operator-in-c"]], "Defining schema and backend implementations": [[12, "defining-schema-and-backend-implementations"]], "For operators that do not need autograd": [[12, "for-operators-that-do-not-need-autograd"]], "In-place or view ops": [[12, "in-place-or-view-ops"]], "Adding autograd support": [[12, "adding-autograd-support"]], "Going beyond autograd": [[12, "going-beyond-autograd"]], "Autocast": [[12, "autocast"]], "Batched": [[12, "batched"]], "Tracer": [[12, "tracer"]], "Extending dispatcher for a new backend in C++": [[13, "extending-dispatcher-for-a-new-backend-in-c"]], "What\u2019s a new backend?": [[13, "what-s-a-new-backend"]], "Get a dispatch key for your backend": [[13, "get-a-dispatch-key-for-your-backend"]], "Get the full list of PyTorch operators": [[13, "get-the-full-list-of-pytorch-operators"]], "Register kernels for the new backend": [[13, "register-kernels-for-the-new-backend"], [18, "register-kernels-for-the-new-backend"]], "Autograd support for the new backend": [[13, "autograd-support-for-the-new-backend"]], "Build an extension": [[13, "build-an-extension"]], "Custom operator support": [[13, "custom-operator-support"]], "JIT support": [[13, "jit-support"]], "Testing your backend against native PyTorch backends": [[13, "testing-your-backend-against-native-pytorch-backends"]], "Backward Compatibility": [[13, "backward-compatibility"]], "Known issues & additional notes": [[13, "known-issues-additional-notes"]], "Future Work": [[13, "future-work"], [18, "future-work"]], "Stay in touch": [[13, "stay-in-touch"]], "Distributed Training with Uneven Inputs Using the Join Context Manager": [[14, "distributed-training-with-uneven-inputs-using-the-join-context-manager"]], "Requirements": [[14, "requirements"], [21, "requirements"], [175, "requirements"], [220, "requirements"], [258, "requirements"], [281, "requirements"]], "What is Join?": [[14, "what-is-join"]], "Using Join with DistributedDataParallel": [[14, "using-join-with-distributeddataparallel"]], "Using Join with DistributedDataParallel and ZeroRedundancyOptimizer": [[14, "using-join-with-distributeddataparallel-and-zeroredundancyoptimizer"]], "Passing Keyword Arguments": [[14, "passing-keyword-arguments"]], "How Does Join Work?": [[14, "how-does-join-work"]], "Joinable": [[14, "joinable"]], "JoinHook": [[14, "joinhook"]], "Join": [[14, "join"]], "Making a Toy Class Work with Join": [[14, "making-a-toy-class-work-with-join"]], "Neural Transfer Using PyTorch": [[15, "neural-transfer-using-pytorch"]], "Introduction": [[15, "introduction"], [55, "introduction"], [63, "introduction"], [94, "id1"], [100, "id1"], [102, "id1"], [140, "introduction"], [171, "introduction"], [187, "introduction"], [190, "introduction"], [201, "introduction"], [226, "introduction"], [229, "introduction"], [240, "introduction"], [241, "introduction"], [242, "introduction"], [248, "introduction"], [249, "introduction"], [261, "introduction"], [266, "introduction"], [267, "introduction"], [275, "introduction"], [276, "introduction"], [279, "introduction"]], "Underlying Principle": [[15, "underlying-principle"]], "Importing Packages and Selecting a Device": [[15, "importing-packages-and-selecting-a-device"]], "Loading the Images": [[15, "loading-the-images"]], "Loss Functions": [[15, "loss-functions"], [98, "loss-functions"]], "Content Loss": [[15, "content-loss"]], "Style Loss": [[15, "style-loss"]], "Importing the Model": [[15, "importing-the-model"]], "Gradient Descent": [[15, "gradient-descent"]], "Creating Extensions Using NumPy and SciPy": [[16, "creating-extensions-using-numpy-and-scipy"]], "Parameter-less example": [[16, "parameter-less-example"]], "Parametrized example": [[16, "parametrized-example"]], "Pendulum: Writing your environment and transforms with TorchRL": [[17, "pendulum-writing-your-environment-and-transforms-with-torchrl"]], "Coding the effect of an action: _step()": [[17, "coding-the-effect-of-an-action-step"]], "Resetting the simulator: _reset()": [[17, "resetting-the-simulator-reset"]], "Environment metadata: env.*_spec": [[17, "environment-metadata-env-spec"]], "Specs shape": [[17, "specs-shape"]], "Reproducible experiments: seeding": [[17, "reproducible-experiments-seeding"]], "Wrapping things together: the EnvBase class": [[17, "wrapping-things-together-the-envbase-class"]], "Testing our environment": [[17, "testing-our-environment"]], "Transforming an environment": [[17, "transforming-an-environment"]], "Writing custom transforms": [[17, "writing-custom-transforms"]], "Executing a rollout": [[17, "executing-a-rollout"]], "Batching computations": [[17, "batching-computations"]], "Training a simple policy": [[17, "training-a-simple-policy"]], "Training loop": [[17, "training-loop"], [154, "training-loop"], [177, "training-loop"], [178, "training-loop"]], "Facilitating New Backend Integration by PrivateUse1": [[18, "facilitating-new-backend-integration-by-privateuse1"]], "What is PrivateUse1?": [[18, "what-is-privateuse1"]], "How to integrate new backend via PrivateUse1": [[18, "how-to-integrate-new-backend-via-privateuse1"]], "Register generator for the new backend": [[18, "register-generator-for-the-new-backend"]], "Register device guard for the new backend": [[18, "register-device-guard-for-the-new-backend"]], "Register serialization and deserialization functions for new backend metadata": [[18, "register-serialization-and-deserialization-functions-for-new-backend-metadata"]], "Other Modules": [[18, "other-modules"]], "How to Improve User Experience with Privateuse1": [[18, "how-to-improve-user-experience-with-privateuse1"]], "Register new backend module to Pytorch": [[18, "register-new-backend-module-to-pytorch"]], "Rename PrivateUse1 to a custom name for the new backend": [[18, "rename-privateuse1-to-a-custom-name-for-the-new-backend"]], "Generate methods and properties related to the new backend": [[18, "generate-methods-and-properties-related-to-the-new-backend"]], "Custom Python Operators": [[19, "custom-python-operators"]], "Example: Wrapping PIL\u2019s crop into a custom operator": [[19, "example-wrapping-pil-s-crop-into-a-custom-operator"]], "Adding training support for crop": [[19, "adding-training-support-for-crop"]], "Testing Python Custom operators": [[19, "testing-python-custom-operators"]], "Mutable Python Custom operators": [[19, "mutable-python-custom-operators"]], "Combining Distributed DataParallel with Distributed RPC Framework": [[20, "combining-distributed-dataparallel-with-distributed-rpc-framework"]], "(beta) Accelerating BERT with semi-structured (2:4) sparsity": [[21, "beta-accelerating-bert-with-semi-structured-2-4-sparsity"]], "What problem does semi-structured sparsity solve?": [[21, "what-problem-does-semi-structured-sparsity-solve"], [281, "what-problem-does-semi-structured-sparsity-solve"]], "Intro & Setup": [[21, "intro-setup"], [281, "intro-setup"]], "Establishing a baseline": [[21, "establishing-a-baseline"]], "Pruning BERT to be 2:4 sparse": [[21, "pruning-bert-to-be-2-4-sparse"], [281, "pruning-bert-to-be-2-4-sparse"]], "Accelerating 2:4 sparse models for inference": [[21, "accelerating-2-4-sparse-models-for-inference"]], "Computation times": [[22, "computation-times"], [41, "computation-times"], [50, "computation-times"], [67, "computation-times"], [73, "computation-times"], [77, "computation-times"], [89, "computation-times"], [99, "computation-times"], [109, "computation-times"], [117, "computation-times"], [121, "computation-times"], [184, "computation-times"], [235, "computation-times"], [246, "computation-times"], [260, "computation-times"], [282, "computation-times"]], "Exploring TorchRec sharding": [[23, "exploring-torchrec-sharding"]], "Installation": [[23, "installation"], [94, "installation"], [214, "installation"], [237, "installation"]], "Distributed Setup": [[23, "distributed-setup"]], "Constructing our embedding model": [[23, "constructing-our-embedding-model"]], "DistributedModelParallel in multiprocessing": [[23, "distributedmodelparallel-in-multiprocessing"]], "Multiprocessing Execution": [[23, "multiprocessing-execution"]], "Table Wise Sharding": [[23, "table-wise-sharding"]], "Explore other sharding modes": [[23, "explore-other-sharding-modes"]], "Semi-Supervised Learning using USB built upon PyTorch": [[26, "semi-supervised-learning-using-usb-built-upon-pytorch"]], "Introduction to FreeMatch and SoftMatch in Semi-Supervised Learning": [[26, "introduction-to-freematch-and-softmatch-in-semi-supervised-learning"]], "Use USB to Train FreeMatch/SoftMatch on CIFAR-10 with only 40 labels": [[26, "use-usb-to-train-freematch-softmatch-on-cifar-10-with-only-40-labels"]], "Use USB to Train SoftMatch with specific imbalanced algorithm on imbalanced CIFAR-10": [[26, "use-usb-to-train-softmatch-with-specific-imbalanced-algorithm-on-imbalanced-cifar-10"]], "Audio Data Augmentation": [[27, "audio-data-augmentation"]], "Audio Datasets": [[28, "audio-datasets"]], "Audio Feature Augmentation": [[29, "audio-feature-augmentation"]], "Audio Feature Extractions": [[30, "audio-feature-extractions"]], "Audio I/O": [[31, "audio-i-o"]], "Audio Resampling": [[32, "audio-resampling"]], "Automatic Differentiation with torch.autograd": [[33, "automatic-differentiation-with-torch-autograd"]], "Tensors, Functions and Computational graph": [[33, "tensors-functions-and-computational-graph"]], "Computing Gradients": [[33, "computing-gradients"]], "Disabling Gradient Tracking": [[33, "disabling-gradient-tracking"]], "More on Computational Graphs": [[33, "more-on-computational-graphs"]], "Optional Reading: Tensor Gradients and Jacobian Products": [[33, "optional-reading-tensor-gradients-and-jacobian-products"]], "Further Reading": [[33, "further-reading"], [34, "further-reading"], [35, "further-reading"], [38, "further-reading"], [43, "further-reading"], [56, "further-reading"], [58, "further-reading"], [59, "further-reading"], [118, "further-reading"], [123, "further-reading"], [149, "further-reading"], [150, "further-reading"], [154, "further-reading"], [239, "further-reading"], [272, "further-reading"], [274, "further-reading"], [275, "further-reading"]], "Build the Neural Network": [[34, "build-the-neural-network"]], "Get Device for Training": [[34, "get-device-for-training"]], "Define the Class": [[34, "define-the-class"]], "Model Layers": [[34, "model-layers"]], "nn.Flatten": [[34, "nn-flatten"]], "nn.Linear": [[34, "nn-linear"]], "nn.ReLU": [[34, "nn-relu"]], "nn.Sequential": [[34, "nn-sequential"]], "nn.Softmax": [[34, "nn-softmax"]], "Model Parameters": [[34, "model-parameters"]], "Datasets & DataLoaders": [[35, "datasets-dataloaders"]], "Loading a Dataset": [[35, "loading-a-dataset"]], "Iterating and Visualizing the Dataset": [[35, "iterating-and-visualizing-the-dataset"]], "Creating a Custom Dataset for your files": [[35, "creating-a-custom-dataset-for-your-files"]], "__init__": [[35, "init"]], "__len__": [[35, "len"]], "__getitem__": [[35, "getitem"]], "Preparing your data for training with DataLoaders": [[35, "preparing-your-data-for-training-with-dataloaders"]], "Iterate through the DataLoader": [[35, "iterate-through-the-dataloader"]], "Learn the Basics": [[36, "learn-the-basics"], [37, "learn-the-basics"]], "Running the Tutorial Code": [[37, "running-the-tutorial-code"], [97, "running-the-tutorial-code"]], "How to Use this Guide": [[37, "how-to-use-this-guide"]], "Optimizing Model Parameters": [[38, "optimizing-model-parameters"]], "Prerequisite Code": [[38, "prerequisite-code"]], "Hyperparameters": [[38, "hyperparameters"]], "Optimization Loop": [[38, "optimization-loop"]], "Loss Function": [[38, "loss-function"], [49, "loss-function"], [102, "loss-function"]], "Full Implementation": [[38, "full-implementation"]], "Quickstart": [[39, "quickstart"]], "Working with data": [[39, "working-with-data"]], "Creating Models": [[39, "creating-models"]], "Optimizing the Model Parameters": [[39, "optimizing-the-model-parameters"]], "Saving Models": [[39, "saving-models"]], "Loading Models": [[39, "loading-models"]], "Save and Load the Model": [[40, "save-and-load-the-model"]], "Saving and Loading Model Weights": [[40, "saving-and-loading-model-weights"]], "Saving and Loading Models with Shapes": [[40, "saving-and-loading-models-with-shapes"]], "Related Tutorials": [[40, "related-tutorials"]], "Tensors": [[42, "tensors"], [51, "tensors"], [83, "tensors"], [119, "tensors"], [119, "id1"]], "Initializing a Tensor": [[42, "initializing-a-tensor"]], "Attributes of a Tensor": [[42, "attributes-of-a-tensor"]], "Operations on Tensors": [[42, "operations-on-tensors"]], "Bridge with NumPy": [[42, "bridge-with-numpy"], [51, "bridge-with-numpy"]], "Tensor to NumPy array": [[42, "tensor-to-numpy-array"], [51, "tensor-to-numpy-array"]], "NumPy array to Tensor": [[42, "numpy-array-to-tensor"], [51, "numpy-array-to-tensor"]], "ToTensor()": [[43, "totensor"]], "Lambda Transforms": [[43, "lambda-transforms"]], "Fast Transformer Inference with Better Transformer": [[44, "fast-transformer-inference-with-better-transformer"]], "A Gentle Introduction to torch.autograd": [[45, "a-gentle-introduction-to-torch-autograd"]], "Background": [[45, "background"], [171, "background"]], "Usage in PyTorch": [[45, "usage-in-pytorch"]], "Differentiation in Autograd": [[45, "differentiation-in-autograd"]], "Optional Reading - Vector Calculus using autograd": [[45, "optional-reading-vector-calculus-using-autograd"]], "Computational Graph": [[45, "computational-graph"]], "Exclusion from the DAG": [[45, "exclusion-from-the-dag"]], "Further readings:": [[45, "further-readings"]], "Training a Classifier": [[46, "training-a-classifier"]], "What about data?": [[46, "what-about-data"]], "Training an image classifier": [[46, "training-an-image-classifier"]], "1. Load and normalize CIFAR10": [[46, "load-and-normalize-cifar10"]], "2. Define a Convolutional Neural Network": [[46, "define-a-convolutional-neural-network"]], "3. Define a Loss function and optimizer": [[46, "define-a-loss-function-and-optimizer"]], "4. Train the network": [[46, "train-the-network"]], "5. Test the network on the test data": [[46, "test-the-network-on-the-test-data"]], "Training on GPU": [[46, "training-on-gpu"]], "Training on multiple GPUs": [[46, "training-on-multiple-gpus"]], "Where do I go next?": [[46, "where-do-i-go-next"]], "Optional: Data Parallelism": [[47, "optional-data-parallelism"]], "Imports and parameters": [[47, "imports-and-parameters"]], "Dummy DataSet": [[47, "dummy-dataset"]], "Simple Model": [[47, "simple-model"]], "Create Model and DataParallel": [[47, "create-model-and-dataparallel"]], "Run the Model": [[47, "run-the-model"]], "Results": [[47, "results"], [55, "results"], [78, "results"], [177, "results"]], "2 GPUs": [[47, "gpus"]], "3 GPUs": [[47, "id1"]], "8 GPUs": [[47, "id2"]], "Summary": [[47, "summary"], [138, "summary"], [182, "summary"]], "Deep Learning with PyTorch: A 60 Minute Blitz": [[48, "deep-learning-with-pytorch-a-60-minute-blitz"], [60, "deep-learning-with-pytorch-a-60-minute-blitz"]], "Neural Networks": [[49, "neural-networks"]], "Define the network": [[49, "define-the-network"]], "Backprop": [[49, "backprop"]], "Update the weights": [[49, "update-the-weights"]], "Tensor Initialization": [[51, "tensor-initialization"]], "Tensor Attributes": [[51, "tensor-attributes"]], "Tensor Operations": [[51, "tensor-operations"]], "Chatbot Tutorial": [[52, "chatbot-tutorial"]], "Preparations": [[52, "preparations"]], "Load & Preprocess Data": [[52, "load-preprocess-data"]], "Create formatted data file": [[52, "create-formatted-data-file"]], "Load and trim data": [[52, "load-and-trim-data"]], "Prepare Data for Models": [[52, "prepare-data-for-models"]], "Define Models": [[52, "define-models"]], "Seq2Seq Model": [[52, "seq2seq-model"]], "Encoder": [[52, "encoder"]], "Decoder": [[52, "decoder"]], "Define Training Procedure": [[52, "define-training-procedure"]], "Masked loss": [[52, "masked-loss"]], "Single training iteration": [[52, "single-training-iteration"]], "Training iterations": [[52, "training-iterations"]], "Define Evaluation": [[52, "define-evaluation"]], "Greedy decoding": [[52, "greedy-decoding"]], "Evaluate my text": [[52, "evaluate-my-text"]], "Run Model": [[52, "run-model"]], "Run Training": [[52, "run-training"]], "Run Evaluation": [[52, "run-evaluation"]], "Running Tutorials in Google Colab": [[53, "running-tutorials-in-google-colab"]], "PyTorch Version in Google Colab": [[53, "pytorch-version-in-google-colab"]], "Using Tutorial Data from Google Drive in Colab": [[53, "using-tutorial-data-from-google-drive-in-colab"]], "Enabling CUDA": [[53, "enabling-cuda"]], "Writing Custom Datasets, DataLoaders and Transforms": [[54, "writing-custom-datasets-dataloaders-and-transforms"]], "Dataset class": [[54, "dataset-class"]], "Compose transforms": [[54, "compose-transforms"]], "Iterating through the dataset": [[54, "iterating-through-the-dataset"]], "Afterword: torchvision": [[54, "afterword-torchvision"]], "DCGAN Tutorial": [[55, "dcgan-tutorial"]], "Generative Adversarial Networks": [[55, "generative-adversarial-networks"]], "What is a GAN?": [[55, "what-is-a-gan"]], "What is a DCGAN?": [[55, "what-is-a-dcgan"]], "Inputs": [[55, "inputs"], [78, "inputs"]], "Data": [[55, "data"]], "Implementation": [[55, "implementation"], [78, "implementation"]], "Weight Initialization": [[55, "weight-initialization"]], "Generator": [[55, "generator"]], "Discriminator": [[55, "discriminator"]], "Loss Functions and Optimizers": [[55, "loss-functions-and-optimizers"]], "Training": [[55, "training"], [144, "training"], [145, "training"], [178, "training"], [183, "training"], [213, "training"], [213, "id3"]], "Where to Go Next": [[55, "where-to-go-next"]], "Fault-tolerant Distributed Training with torchrun": [[56, "fault-tolerant-distributed-training-with-torchrun"]], "Why use torchrun": [[56, "why-use-torchrun"]], "Graceful restarts": [[56, "graceful-restarts"]], "Process group initialization": [[56, "process-group-initialization"]], "Use torchrun-provided environment variables": [[56, "use-torchrun-provided-environment-variables"]], "Saving and loading snapshots": [[56, "saving-and-loading-snapshots"]], "Loading a snapshot in the Trainer constructor": [[56, "loading-a-snapshot-in-the-trainer-constructor"]], "Resuming training": [[56, "resuming-training"]], "Running the script": [[56, "running-the-script"]], "Distributed Data Parallel in PyTorch - Video Tutorials": [[57, "distributed-data-parallel-in-pytorch-video-tutorials"]], "Running the code": [[57, "running-the-code"]], "Tutorial sections": [[57, "tutorial-sections"]], "Multi GPU training with DDP": [[58, "multi-gpu-training-with-ddp"]], "Imports": [[58, "imports"]], "Constructing the process group": [[58, "constructing-the-process-group"]], "Constructing the DDP model": [[58, "constructing-the-ddp-model"]], "Distributing input data": [[58, "distributing-input-data"]], "Saving model checkpoints": [[58, "saving-model-checkpoints"]], "Running the distributed training job": [[58, "running-the-distributed-training-job"]], "What is Distributed Data Parallel (DDP)": [[59, "what-is-distributed-data-parallel-ddp"]], "Why you should prefer DDP over DataParallel (DP)": [[59, "why-you-should-prefer-ddp-over-dataparallel-dp"]], "What is PyTorch?": [[60, "what-is-pytorch"]], "Goal of this tutorial:": [[60, "goal-of-this-tutorial"]], "Image Segmentation DeepLabV3 on Android": [[61, "image-segmentation-deeplabv3-on-android"]], "Image Segmentation DeepLabV3 on iOS": [[62, "image-segmentation-deeplabv3-on-ios"]], "PyTorch Distributed Overview": [[63, "pytorch-distributed-overview"]], "Parallelism APIs": [[63, "parallelism-apis"]], "Sharding primitives": [[63, "sharding-primitives"]], "Communications APIs": [[63, "communications-apis"]], "Launcher": [[63, "launcher"]], "Applying Parallelism To Scale Your Model": [[63, "applying-parallelism-to-scale-your-model"]], "PyTorch Distributed Developers": [[63, "pytorch-distributed-developers"]], "PyTorch: Tensors and autograd": [[65, "pytorch-tensors-and-autograd"], [119, "pytorch-tensors-and-autograd"]], "PyTorch: Defining New autograd Functions": [[66, "pytorch-defining-new-autograd-functions"]], "PyTorch: Control Flow + Weight Sharing": [[68, "pytorch-control-flow-weight-sharing"], [119, "pytorch-control-flow-weight-sharing"]], "PyTorch: Custom nn Modules": [[70, "pytorch-custom-nn-modules"], [119, "pytorch-custom-nn-modules"]], "PyTorch: nn": [[71, "pytorch-nn"], [119, "pytorch-nn"]], "PyTorch: optim": [[72, "pytorch-optim"], [119, "pytorch-optim"]], "Warm-up: numpy": [[75, "warm-up-numpy"], [119, "warm-up-numpy"]], "PyTorch: Tensors": [[76, "pytorch-tensors"], [119, "pytorch-tensors"]], "Adversarial Example Generation": [[78, "adversarial-example-generation"]], "Threat Model": [[78, "threat-model"]], "Fast Gradient Sign Attack": [[78, "fast-gradient-sign-attack"]], "Model Under Attack": [[78, "model-under-attack"]], "FGSM Attack": [[78, "fgsm-attack"]], "Testing Function": [[78, "testing-function"]], "Run Attack": [[78, "run-attack"]], "Accuracy vs Epsilon": [[78, "accuracy-vs-epsilon"]], "Sample Adversarial Examples": [[78, "sample-adversarial-examples"]], "Where to go next?": [[78, "where-to-go-next"]], "Finetuning Torchvision Models": [[79, "finetuning-torchvision-models"]], "Autograd": [[80, "autograd"], [119, "autograd"], [119, "id2"]], "nn Package": [[81, "nn-package"]], "Multi-GPU Examples": [[82, "multi-gpu-examples"]], "PyTorch for Former Torch Users": [[84, "pytorch-for-former-torch-users"]], "Introduction to Holistic Trace Analysis": [[85, "introduction-to-holistic-trace-analysis"]], "Installing HTA": [[85, "installing-hta"]], "Temporal Breakdown": [[85, "temporal-breakdown"]], "Idle Time Breakdown": [[85, "idle-time-breakdown"]], "Kernel Breakdown": [[85, "kernel-breakdown"]], "Kernel Duration Distribution": [[85, "kernel-duration-distribution"]], "Communication Computation Overlap": [[85, "communication-computation-overlap"]], "Augmented Counters": [[85, "augmented-counters"]], "Memory Bandwidth & Queue Length Counters": [[85, "memory-bandwidth-queue-length-counters"]], "CUDA Kernel Launch Statistics": [[85, "cuda-kernel-launch-statistics"]], "Trace Diff using Holistic Trace Analysis": [[86, "trace-diff-using-holistic-trace-analysis"]], "Learning Hybrid Frontend Syntax Through Example": [[88, "learning-hybrid-frontend-syntax-through-example"]], "Hybrid Frontend Information": [[88, "hybrid-frontend-information"]], "Motivating Example": [[88, "motivating-example"]], "Part 1 - Tracing a pure python function": [[88, "part-1-tracing-a-pure-python-function"]], "Part 2 - Scripting a pure python function": [[88, "part-2-scripting-a-pure-python-function"]], "Part 3 - Tracing a nn.Module": [[88, "part-3-tracing-a-nn-module"]], "Part 4 - Scripting a nn.Module": [[88, "part-4-scripting-a-nn-module"]], "Top-Level Module": [[88, "top-level-module"]], "Running the Model": [[88, "running-the-model"]], "Tracing the Top-Level Model": [[88, "tracing-the-top-level-model"]], "Hybrid Frontend Tutorials": [[90, "hybrid-frontend-tutorials"]], "Hyperparameter tuning with Ray Tune": [[91, "hyperparameter-tuning-with-ray-tune"]], "Setup / Imports": [[91, "setup-imports"]], "Data loaders": [[91, "data-loaders"]], "Configurable neural network": [[91, "configurable-neural-network"]], "The train function": [[91, "the-train-function"]], "Adding (multi) GPU support with DataParallel": [[91, "adding-multi-gpu-support-with-dataparallel"]], "Communicating with Ray Tune": [[91, "communicating-with-ray-tune"]], "Full training function": [[91, "full-training-function"]], "Test set accuracy": [[91, "test-set-accuracy"]], "Configuring the search space": [[91, "configuring-the-search-space"]], "Introduction to PyTorch - YouTube Series": [[92, "introduction-to-pytorch-youtube-series"], [97, "introduction-to-pytorch-youtube-series"]], "The Fundamentals of Autograd": [[93, "the-fundamentals-of-autograd"]], "What Do We Need Autograd For?": [[93, "what-do-we-need-autograd-for"]], "A Simple Example": [[93, "a-simple-example"]], "Autograd in Training": [[93, "autograd-in-training"]], "Turning Autograd Off and On": [[93, "turning-autograd-off-and-on"]], "Autograd and In-place Operations": [[93, "autograd-and-in-place-operations"]], "Autograd Profiler": [[93, "autograd-profiler"]], "Advanced Topic: More Autograd Detail and the High-Level API": [[93, "advanced-topic-more-autograd-detail-and-the-high-level-api"]], "The High-Level API": [[93, "the-high-level-api"]], "Model Understanding with Captum": [[94, "model-understanding-with-captum"]], "A First Example": [[94, "a-first-example"]], "Feature Attribution with Integrated Gradients": [[94, "feature-attribution-with-integrated-gradients"]], "Feature Attribution with Occlusion": [[94, "feature-attribution-with-occlusion"]], "Layer Attribution with Layer GradCAM": [[94, "layer-attribution-with-layer-gradcam"]], "Visualization with Captum Insights": [[94, "visualization-with-captum-insights"]], "Introduction to PyTorch on YouTube": [[95, "introduction-to-pytorch-on-youtube"]], "Introduction to PyTorch": [[96, "introduction-to-pytorch"], [107, "introduction-to-pytorch"]], "PyTorch Tensors": [[96, "pytorch-tensors"]], "PyTorch Models": [[96, "pytorch-models"]], "Datasets and Dataloaders": [[96, "datasets-and-dataloaders"]], "Training Your PyTorch Model": [[96, "training-your-pytorch-model"]], "Building Models with PyTorch": [[98, "building-models-with-pytorch"]], "torch.nn.Module and torch.nn.Parameter": [[98, "torch-nn-module-and-torch-nn-parameter"]], "Common Layer Types": [[98, "common-layer-types"]], "Linear Layers": [[98, "linear-layers"]], "Convolutional Layers": [[98, "convolutional-layers"]], "Recurrent Layers": [[98, "recurrent-layers"]], "Transformers": [[98, "transformers"]], "Other Layers and Functions": [[98, "other-layers-and-functions"]], "Data Manipulation Layers": [[98, "data-manipulation-layers"]], "Activation Functions": [[98, "activation-functions"]], "PyTorch TensorBoard Support": [[100, "pytorch-tensorboard-support"]], "Before You Start": [[100, "before-you-start"]], "Showing Images in TensorBoard": [[100, "showing-images-in-tensorboard"]], "Graphing Scalars to Visualize Training": [[100, "graphing-scalars-to-visualize-training"]], "Visualizing Your Model": [[100, "visualizing-your-model"]], "Visualizing Your Dataset with Embeddings": [[100, "visualizing-your-dataset-with-embeddings"]], "Other Resources": [[100, "other-resources"], [102, "other-resources"]], "Introduction to PyTorch Tensors": [[101, "introduction-to-pytorch-tensors"]], "Creating Tensors": [[101, "creating-tensors"], [107, "creating-tensors"]], "Random Tensors and Seeding": [[101, "random-tensors-and-seeding"]], "Tensor Shapes": [[101, "tensor-shapes"]], "Tensor Data Types": [[101, "tensor-data-types"]], "Math & Logic with PyTorch Tensors": [[101, "math-logic-with-pytorch-tensors"]], "In Brief: Tensor Broadcasting": [[101, "in-brief-tensor-broadcasting"]], "More Math with Tensors": [[101, "more-math-with-tensors"]], "Altering Tensors in Place": [[101, "altering-tensors-in-place"]], "Copying Tensors": [[101, "copying-tensors"]], "Moving to Accelerator": [[101, "moving-to-accelerator"]], "Manipulating Tensor Shapes": [[101, "manipulating-tensor-shapes"]], "Changing the Number of Dimensions": [[101, "changing-the-number-of-dimensions"]], "NumPy Bridge": [[101, "numpy-bridge"]], "Training with PyTorch": [[102, "training-with-pytorch"]], "Dataset and DataLoader": [[102, "dataset-and-dataloader"]], "The Model": [[102, "the-model"]], "The Training Loop": [[102, "the-training-loop"]], "Per-Epoch Activity": [[102, "per-epoch-activity"]], "Knowledge Distillation Tutorial": [[103, "knowledge-distillation-tutorial"]], "Loading CIFAR-10": [[103, "loading-cifar-10"]], "Defining model classes and utility functions": [[103, "defining-model-classes-and-utility-functions"]], "Cross-entropy runs": [[103, "cross-entropy-runs"]], "Knowledge distillation run": [[103, "knowledge-distillation-run"]], "Cosine loss minimization run": [[103, "cosine-loss-minimization-run"]], "Intermediate regressor run": [[103, "intermediate-regressor-run"]], "Advanced: Making Dynamic Decisions and the Bi-LSTM CRF": [[104, "advanced-making-dynamic-decisions-and-the-bi-lstm-crf"]], "Dynamic versus Static Deep Learning Toolkits": [[104, "dynamic-versus-static-deep-learning-toolkits"]], "Bi-LSTM Conditional Random Field Discussion": [[104, "bi-lstm-conditional-random-field-discussion"]], "Implementation Notes": [[104, "implementation-notes"]], "Exercise: A new loss function for discriminative tagging": [[104, "exercise-a-new-loss-function-for-discriminative-tagging"]], "Deep Learning with PyTorch": [[105, "deep-learning-with-pytorch"]], "Deep Learning Building Blocks: Affine maps, non-linearities and objectives": [[105, "deep-learning-building-blocks-affine-maps-non-linearities-and-objectives"]], "Affine Maps": [[105, "affine-maps"]], "Non-Linearities": [[105, "non-linearities"]], "Softmax and Probabilities": [[105, "softmax-and-probabilities"]], "Objective Functions": [[105, "objective-functions"]], "Optimization and Training": [[105, "optimization-and-training"]], "Creating Network Components in PyTorch": [[105, "creating-network-components-in-pytorch"]], "Example: Logistic Regression Bag-of-Words classifier": [[105, "example-logistic-regression-bag-of-words-classifier"]], "Deep Learning for NLP with Pytorch": [[106, "deep-learning-for-nlp-with-pytorch"]], "Introduction to Torch\u2019s tensor library": [[107, "introduction-to-torch-s-tensor-library"]], "Operations with Tensors": [[107, "operations-with-tensors"]], "Reshaping Tensors": [[107, "reshaping-tensors"]], "Computation Graphs and Automatic Differentiation": [[107, "computation-graphs-and-automatic-differentiation"]], "Sequence Models and Long Short-Term Memory Networks": [[108, "sequence-models-and-long-short-term-memory-networks"]], "LSTMs in Pytorch": [[108, "lstms-in-pytorch"]], "Example: An LSTM for Part-of-Speech Tagging": [[108, "example-an-lstm-for-part-of-speech-tagging"]], "Exercise: Augmenting the LSTM part-of-speech tagger with character-level features": [[108, "exercise-augmenting-the-lstm-part-of-speech-tagger-with-character-level-features"]], "Word Embeddings: Encoding Lexical Semantics": [[110, "word-embeddings-encoding-lexical-semantics"]], "Getting Dense Word Embeddings": [[110, "getting-dense-word-embeddings"]], "Word Embeddings in Pytorch": [[110, "word-embeddings-in-pytorch"]], "An Example: N-Gram Language Modeling": [[110, "an-example-n-gram-language-modeling"]], "Exercise: Computing Word Embeddings: Continuous Bag-of-Words": [[110, "exercise-computing-word-embeddings-continuous-bag-of-words"]], "What is torch.nn really?": [[111, "what-is-torch-nn-really"]], "MNIST data setup": [[111, "mnist-data-setup"]], "Neural net from scratch (without torch.nn)": [[111, "neural-net-from-scratch-without-torch-nn"]], "Using torch.nn.functional": [[111, "using-torch-nn-functional"]], "Refactor using nn.Module": [[111, "refactor-using-nn-module"]], "Refactor using nn.Linear": [[111, "refactor-using-nn-linear"]], "Refactor using torch.optim": [[111, "refactor-using-torch-optim"]], "Refactor using Dataset": [[111, "refactor-using-dataset"]], "Refactor using DataLoader": [[111, "refactor-using-dataloader"]], "Add validation": [[111, "add-validation"]], "Create fit() and get_data()": [[111, "create-fit-and-get-data"]], "Switch to CNN": [[111, "switch-to-cnn"]], "Using nn.Sequential": [[111, "using-nn-sequential"]], "Wrapping DataLoader": [[111, "wrapping-dataloader"]], "Using your Accelerator": [[111, "using-your-accelerator"]], "Closing thoughts": [[111, "closing-thoughts"]], "Export a model with control flow to ONNX": [[112, "export-a-model-with-control-flow-to-onnx"]], "Define the Models": [[112, "define-the-models"]], "Exporting the Model: First Attempt": [[112, "exporting-the-model-first-attempt"]], "Suggested Patch: Refactoring with torch.cond()": [[112, "suggested-patch-refactoring-with-torch-cond"]], "Further reading": [[112, "further-reading"], [113, "further-reading"], [115, "further-reading"], [116, "further-reading"]], "Export a PyTorch model to ONNX": [[113, "export-a-pytorch-model-to-onnx"]], "1. Install the required dependencies": [[113, "install-the-required-dependencies"]], "2. Author a simple image classifier model": [[113, "author-a-simple-image-classifier-model"]], "3. Export the model to ONNX format": [[113, "export-the-model-to-onnx-format"]], "4. Save the ONNX model in a file": [[113, "save-the-onnx-model-in-a-file"]], "5. Visualize the ONNX model graph using Netron": [[113, "visualize-the-onnx-model-graph-using-netron"]], "6. Execute the ONNX model with ONNX Runtime": [[113, "execute-the-onnx-model-with-onnx-runtime"]], "7. Compare the PyTorch results with the ones from the ONNX Runtime": [[113, "compare-the-pytorch-results-with-the-ones-from-the-onnx-runtime"]], "ONNX": [[114, "onnx"]], "Introduction to ONNX": [[115, "introduction-to-onnx"]], "Dependencies": [[115, "dependencies"]], "Extending the ONNX Exporter Operator Support": [[116, "extending-the-onnx-exporter-operator-support"]], "Overriding the implementation of an existing PyTorch operator": [[116, "overriding-the-implementation-of-an-existing-pytorch-operator"]], "Using custom ONNX operators": [[116, "using-custom-onnx-operators"]], "Supporting a custom PyTorch operator": [[116, "supporting-a-custom-pytorch-operator"]], "Profiling your PyTorch Module": [[118, "profiling-your-pytorch-module"]], "Performance debugging using Profiler": [[118, "performance-debugging-using-profiler"]], "Profile the forward pass": [[118, "profile-the-forward-pass"]], "Print profiler results": [[118, "print-profiler-results"]], "Improve memory performance": [[118, "improve-memory-performance"]], "Improve time performance": [[118, "improve-time-performance"]], "Learning PyTorch with Examples": [[119, "learning-pytorch-with-examples"]], "Table of Contents": [[119, "table-of-contents"]], "PyTorch: Defining new autograd functions": [[119, "pytorch-defining-new-autograd-functions"]], "nn module": [[119, "nn-module"], [119, "id3"]], "Examples": [[119, "examples"], [214, "examples"], [252, "examples"], [280, "examples"]], "Saving and Loading Models": [[120, "saving-and-loading-models"]], "What is a state_dict?": [[120, "what-is-a-state-dict"]], "Example:": [[120, "example"]], "Saving & Loading Model for Inference": [[120, "saving-loading-model-for-inference"]], "Save/Load state_dict (Recommended)": [[120, "save-load-state-dict-recommended"]], "Save/Load Entire Model": [[120, "save-load-entire-model"]], "Saving an Exported Program": [[120, "saving-an-exported-program"]], "Saving & Loading a General Checkpoint for Inference and/or Resuming Training": [[120, "saving-loading-a-general-checkpoint-for-inference-and-or-resuming-training"]], "Save:": [[120, "save"], [120, "id1"], [120, "id3"]], "Load:": [[120, "load"], [120, "id2"], [120, "id4"]], "Saving Multiple Models in One File": [[120, "saving-multiple-models-in-one-file"]], "Warmstarting Model Using Parameters from a Different Model": [[120, "warmstarting-model-using-parameters-from-a-different-model"]], "Saving & Loading Model Across Devices": [[120, "saving-loading-model-across-devices"]], "Save on GPU, Load on CPU": [[120, "save-on-gpu-load-on-cpu"]], "Save on GPU, Load on GPU": [[120, "save-on-gpu-load-on-gpu"]], "Save on CPU, Load on GPU": [[120, "save-on-cpu-load-on-gpu"]], "Saving torch.nn.DataParallel Models": [[120, "saving-torch-nn-dataparallel-models"]], "T5-Base Model for Summarization, Sentiment Classification, and Translation": [[122, "t5-base-model-for-summarization-sentiment-classification-and-translation"]], "Template Tutorial": [[123, "template-tutorial"]], "Steps": [[123, "steps"], [187, "steps"], [224, "steps"], [226, "steps"], [229, "steps"], [240, "steps"], [241, "steps"], [242, "steps"], [243, "steps"], [244, "steps"]], "(Optional) Additional Exercises": [[123, "optional-additional-exercises"]], "Text classification with the torchtext library": [[124, "text-classification-with-the-torchtext-library"]], "Preprocess custom text dataset using torchtext": [[125, "preprocess-custom-text-dataset-using-torchtext"]], "Transfer Learning for Computer Vision Tutorial": [[126, "transfer-learning-for-computer-vision-tutorial"]], "Load Data": [[126, "load-data"]], "Visualize a few images": [[126, "visualize-a-few-images"]], "Training the model": [[126, "training-the-model"], [185, "training-the-model"]], "Visualizing the model predictions": [[126, "visualizing-the-model-predictions"]], "Finetuning the ConvNet": [[126, "finetuning-the-convnet"]], "Train and evaluate": [[126, "train-and-evaluate"], [126, "id1"]], "ConvNet as fixed feature extractor": [[126, "convnet-as-fixed-feature-extractor"]], "Inference on custom images": [[126, "inference-on-custom-images"]], "Further Learning": [[126, "further-learning"]], "Language Modeling with nn.Transformer and torchtext": [[127, "language-modeling-with-nn-transformer-and-torchtext"]], "Language Translation with nn.Transformer and torchtext": [[128, "language-translation-with-nn-transformer-and-torchtext"]], "Understanding requires_grad, retain_grad, Leaf, and Non-leaf Tensors": [[129, "understanding-requires-grad-retain-grad-leaf-and-non-leaf-tensors"]], "Setup": [[129, "setup"], [146, "setup"], [153, "setup"], [154, "setup"], [165, "setup"], [173, "setup"], [187, "setup"], [199, "setup"], [226, "setup"], [229, "setup"], [240, "setup"], [241, "setup"], [242, "setup"], [243, "setup"], [244, "setup"], [255, "setup"], [261, "setup"]], "Leaf vs.\u00a0non-leaf tensors": [[129, "leaf-vs-non-leaf-tensors"]], "requires_grad": [[129, "requires-grad"]], "retain_grad": [[129, "retain-grad"]], "Summary table": [[129, "summary-table"]], "References": [[129, "references"], [199, "references"]], "Compilers": [[130, "compilers"]], "Deep Dive": [[131, "deep-dive"]], "Distributed": [[132, "distributed"]], "Learn DDP": [[132, "learn-ddp"]], "Learn FSDP2": [[132, "learn-fsdp2"]], "Learn Tensor Parallel (TP)": [[132, "learn-tensor-parallel-tp"]], "Learn DeviceMesh": [[132, "learn-devicemesh"]], "Learn RPC": [[132, "learn-rpc"]], "Custom Extensions": [[132, "custom-extensions"]], "Domains": [[133, "domains"]], "Ecosystem": [[134, "ecosystem"]], "Extension": [[135, "extension"]], "Welcome to PyTorch Tutorials": [[136, "welcome-to-pytorch-tutorials"]], "Additional Resources": [[136, "additional-resources"], [173, "additional-resources"]], "Getting Started with Fully Sharded Data Parallel(FSDP)": [[137, "getting-started-with-fully-sharded-data-parallel-fsdp"]], "How FSDP works": [[137, "how-fsdp-works"]], "How to use FSDP": [[137, "how-to-use-fsdp"]], "Advanced Model Training with Fully Sharded Data Parallel (FSDP)": [[138, "advanced-model-training-with-fully-sharded-data-parallel-fsdp"]], "FSDP Features in This Tutorial": [[138, "fsdp-features-in-this-tutorial"]], "Recap on How FSDP Works": [[138, "recap-on-how-fsdp-works"]], "Fine-tuning HF T5": [[138, "fine-tuning-hf-t5"]], "Transformer Wrapping Policy": [[138, "transformer-wrapping-policy"]], "Mixed Precision": [[138, "mixed-precision"]], "Intializing FSDP Model on Device": [[138, "intializing-fsdp-model-on-device"]], "Sharding Strategy": [[138, "sharding-strategy"]], "Backward Prefetch": [[138, "backward-prefetch"]], "Model Checkpoint Saving, by streaming to the Rank0 CPU": [[138, "model-checkpoint-saving-by-streaming-to-the-rank0-cpu"]], "Getting Started with Fully Sharded Data Parallel (FSDP2)": [[139, "getting-started-with-fully-sharded-data-parallel-fsdp2"]], "How FSDP2 works": [[139, "how-fsdp2-works"]], "How to use FSDP2": [[139, "how-to-use-fsdp2"]], "Model Initialization": [[139, "model-initialization"]], "Forward/Backward with Prefetching": [[139, "forward-backward-with-prefetching"]], "Enabling Mixed Precision": [[139, "enabling-mixed-precision"]], "Gradient Clipping and Optimizer with DTensor": [[139, "gradient-clipping-and-optimizer-with-dtensor"]], "State Dicts with DTensor APIs": [[139, "state-dicts-with-dtensor-apis"]], "State Dict with DCP APIs": [[139, "state-dict-with-dcp-apis"]], "FSDP1-to-FSDP2 migration guide": [[139, "fsdp1-to-fsdp2-migration-guide"]], "Introduction to Libuv TCPStore Backend": [[140, "introduction-to-libuv-tcpstore-backend"]], "Performance Benchmark": [[140, "performance-benchmark"]], "Impact": [[140, "impact"]], "Exit Route 1: Pass use_libuv=False to TCPStore Initialization": [[140, "exit-route-1-pass-use-libuv-false-to-tcpstore-initialization"]], "Exit Route 2: Add use_libuv=0 to init_method at ProcessGroup Initialization": [[140, "exit-route-2-add-use-libuv-0-to-init-method-at-processgroup-initialization"]], "Exit Route 3: Set Environment Variable USE_LIBUV to 0": [[140, "exit-route-3-set-environment-variable-use-libuv-to-0"]], "Large Scale Transformer model training with Tensor Parallel (TP)": [[141, "large-scale-transformer-model-training-with-tensor-parallel-tp"]], "How Tensor Parallel works?": [[141, "how-tensor-parallel-works"]], "When and Why you should apply Tensor Parallel": [[141, "when-and-why-you-should-apply-tensor-parallel"]], "How to apply Tensor Parallel": [[141, "how-to-apply-tensor-parallel"]], "Apply Sequence Parallel to LayerNorm/RMSNorm layers": [[141, "apply-sequence-parallel-to-layernorm-rmsnorm-layers"]], "Apply Loss Parallel": [[141, "apply-loss-parallel"]], "Combine Tensor Parallel with Fully Sharded Data Parallel together": [[141, "combine-tensor-parallel-with-fully-sharded-data-parallel-together"]], "Hooks for autograd saved tensors": [[142, "hooks-for-autograd-saved-tensors"]], "Saved tensors": [[142, "saved-tensors"]], "Why does training a model (typically) requires more memory than evaluating it?": [[142, "why-does-training-a-model-typically-requires-more-memory-than-evaluating-it"]], "The concept of packing / unpacking": [[142, "the-concept-of-packing-unpacking"]], "Saved tensors hooks": [[142, "saved-tensors-hooks"]], "Some unconventional examples": [[142, "some-unconventional-examples"]], "Returning an int": [[142, "returning-an-int"]], "Returning a tuple": [[142, "returning-a-tuple"]], "Returning a str": [[142, "returning-a-str"]], "Saving tensors to CPU": [[142, "saving-tensors-to-cpu"]], "Saving tensors to disk": [[142, "saving-tensors-to-disk"]], "Multi-Objective NAS with Ax": [[143, "multi-objective-nas-with-ax"]], "Defining the TorchX App": [[143, "defining-the-torchx-app"]], "Setting up the Runner": [[143, "setting-up-the-runner"]], "Setting up the SearchSpace": [[143, "setting-up-the-searchspace"]], "Setting up Metrics": [[143, "setting-up-metrics"]], "Setting up the OptimizationConfig": [[143, "setting-up-the-optimizationconfig"]], "Creating the Ax Experiment": [[143, "creating-the-ax-experiment"]], "Choosing the Generation Strategy": [[143, "choosing-the-generation-strategy"]], "Configuring the Scheduler": [[143, "configuring-the-scheduler"]], "Running the optimization": [[143, "running-the-optimization"]], "Evaluating the results": [[143, "evaluating-the-results"]], "Acknowledgments": [[143, "acknowledgments"]], "NLP From Scratch: Classifying Names with a Character-Level RNN": [[144, "nlp-from-scratch-classifying-names-with-a-character-level-rnn"]], "Recommended Preparation": [[144, "recommended-preparation"]], "Preparing Torch": [[144, "preparing-torch"]], "Preparing the Data": [[144, "preparing-the-data"], [145, "preparing-the-data"]], "Turning Names into Tensors": [[144, "turning-names-into-tensors"]], "Creating the Network": [[144, "creating-the-network"], [145, "creating-the-network"]], "Training the Network": [[144, "training-the-network"], [145, "training-the-network"]], "Plotting the Results": [[144, "plotting-the-results"]], "Evaluating the Results": [[144, "evaluating-the-results"]], "Exercises": [[144, "exercises"], [145, "exercises"], [183, "exercises"]], "NLP From Scratch: Generating Names with a Character-Level RNN": [[145, "nlp-from-scratch-generating-names-with-a-character-level-rnn"]], "Preparing for Training": [[145, "preparing-for-training"]], "Plotting the Losses": [[145, "plotting-the-losses"]], "Sampling the Network": [[145, "sampling-the-network"]], "Compiled Autograd: Capturing a larger backward graph for torch.compile": [[146, "compiled-autograd-capturing-a-larger-backward-graph-for-torch-compile"]], "Basic usage": [[146, "basic-usage"]], "Inspecting the compiled autograd logs": [[146, "inspecting-the-compiled-autograd-logs"]], "Compiling the forward and backward pass using different flags": [[146, "compiling-the-forward-and-backward-pass-using-different-flags"]], "Compiled Autograd addresses certain limitations of AOTAutograd": [[146, "compiled-autograd-addresses-certain-limitations-of-aotautograd"]], "Common recompilation reasons for Compiled Autograd": [[146, "common-recompilation-reasons-for-compiled-autograd"]], "Fusing Convolution and Batch Norm using Custom Function": [[147, "fusing-convolution-and-batch-norm-using-custom-function"]], "Backward Formula Implementation for Convolution": [[147, "backward-formula-implementation-for-convolution"]], "Backward Formula Implementation for Batch Norm": [[147, "backward-formula-implementation-for-batch-norm"]], "Fusing Convolution and BatchNorm": [[147, "fusing-convolution-and-batchnorm"]], "Testing out our new Layer": [[147, "testing-out-our-new-layer"]], "A Comparison of Memory Usage": [[147, "a-comparison-of-memory-usage"]], "Double Backward with Custom Functions": [[148, "double-backward-with-custom-functions"]], "Saving the Inputs": [[148, "saving-the-inputs"]], "Saving the Outputs": [[148, "saving-the-outputs"]], "Saving Intermediate Results": [[148, "saving-intermediate-results"]], "Saving Intermediate Results: What not to do": [[148, "saving-intermediate-results-what-not-to-do"]], "When Backward is not Tracked": [[148, "when-backward-is-not-tracked"]], "Training \u201creal-world\u201d models with DDP": [[149, "training-real-world-models-with-ddp"]], "Files used for training": [[149, "files-used-for-training"]], "Saving and Loading from the cloud": [[149, "saving-and-loading-from-the-cloud"]], "Using Mixed Precision": [[149, "using-mixed-precision"]], "When is DDP not enough?": [[149, "when-is-ddp-not-enough"]], "Multinode Training": [[150, "multinode-training"]], "Local and Global ranks": [[150, "local-and-global-ranks"]], "Heteregeneous Scaling": [[150, "heteregeneous-scaling"]], "Troubleshooting": [[150, "troubleshooting"], [223, "troubleshooting"]], "Getting Started with Distributed Data Parallel": [[151, "getting-started-with-distributed-data-parallel"]], "Comparison between DataParallel and DistributedDataParallel": [[151, "comparison-between-dataparallel-and-distributeddataparallel"]], "Basic Use Case": [[151, "basic-use-case"]], "Skewed Processing Speeds": [[151, "skewed-processing-speeds"]], "Save and Load Checkpoints": [[151, "save-and-load-checkpoints"]], "Combining DDP with Model Parallelism": [[151, "combining-ddp-with-model-parallelism"]], "Initialize DDP with torch.distributed.run/torchrun": [[151, "initialize-ddp-with-torch-distributed-run-torchrun"]], "Distributed Pipeline Parallelism Using RPC": [[152, "distributed-pipeline-parallelism-using-rpc"]], "Writing Distributed Applications with PyTorch": [[153, "writing-distributed-applications-with-pytorch"]], "Point-to-Point Communication": [[153, "point-to-point-communication"]], "Collective Communication": [[153, "collective-communication"]], "Distributed Training": [[153, "distributed-training"]], "Our Own Ring-Allreduce": [[153, "our-own-ring-allreduce"]], "Advanced Topics": [[153, "advanced-topics"]], "Communication Backends": [[153, "communication-backends"]], "Initialization Methods": [[153, "initialization-methods"]], "Recurrent DQN: Training recurrent policies": [[154, "recurrent-dqn-training-recurrent-policies"]], "Policy": [[154, "policy"], [177, "policy"]], "Convolutional network": [[154, "convolutional-network"]], "LSTM Module": [[154, "lstm-module"]], "MLP": [[154, "mlp"]], "Using the Q-Values to select an action": [[154, "using-the-q-values-to-select-an-action"]], "Using the model for the loss": [[154, "using-the-model-for-the-loss"]], "DQN Loss": [[154, "dqn-loss"]], "Collector and replay buffer": [[154, "collector-and-replay-buffer"]], "Model ensembling": [[155, "model-ensembling"]], "What is model ensembling?": [[155, "what-is-model-ensembling"]], "Using vmap to vectorize the ensemble": [[155, "using-vmap-to-vectorize-the-ensemble"]], "Performance": [[155, "performance"]], "Forced Alignment with Wav2Vec2": [[156, "forced-alignment-with-wav2vec2"]], "Forward-mode Automatic Differentiation (Beta)": [[157, "forward-mode-automatic-differentiation-beta"]], "Basic Usage": [[157, "basic-usage"], [192, "basic-usage"], [194, "basic-usage"], [212, "basic-usage"], [251, "basic-usage"]], "Usage with Modules": [[157, "usage-with-modules"]], "Using the functional Module API (beta)": [[157, "using-the-functional-module-api-beta"]], "Custom autograd Function": [[157, "custom-autograd-function"]], "Functional API (beta)": [[157, "functional-api-beta"]], "Using the functional API with Modules": [[157, "using-the-functional-api-with-modules"]], "(beta) Building a Simple CPU Performance Profiler with FX": [[158, "beta-building-a-simple-cpu-performance-profiler-with-fx"]], "Capturing the Model with Symbolic Tracing": [[158, "capturing-the-model-with-symbolic-tracing"]], "Creating a Profiling Interpreter": [[158, "creating-a-profiling-interpreter"]], "Investigating the Performance of ResNet18": [[158, "investigating-the-performance-of-resnet18"]], "Inductor CPU backend debugging and profiling": [[159, "inductor-cpu-backend-debugging-and-profiling"]], "Debugging": [[159, "debugging"]], "Get more logging information": [[159, "get-more-logging-information"]], "Determine component of error": [[159, "determine-component-of-error"]], "Compilation error": [[159, "compilation-error"]], "Accuracy debugging": [[159, "accuracy-debugging"]], "Performance profiling": [[159, "performance-profiling"]], "Jacobians, Hessians, hvp, vhp, and more: composing function transforms": [[160, "jacobians-hessians-hvp-vhp-and-more-composing-function-transforms"]], "Computing the Jacobian": [[160, "computing-the-jacobian"]], "Reverse-mode Jacobian (jacrev) vs forward-mode Jacobian (jacfwd)": [[160, "reverse-mode-jacobian-jacrev-vs-forward-mode-jacobian-jacfwd"]], "Hessian computation with functorch.hessian": [[160, "hessian-computation-with-functorch-hessian"]], "Batch Jacobian and Batch Hessian": [[160, "batch-jacobian-and-batch-hessian"]], "Computing Hessian-vector products": [[160, "computing-hessian-vector-products"]], "Train a Mario-playing RL Agent": [[161, "train-a-mario-playing-rl-agent"]], "RL Definitions": [[161, "rl-definitions"]], "Initialize Environment": [[161, "initialize-environment"]], "Preprocess Environment": [[161, "preprocess-environment"]], "Agent": [[161, "agent"]], "Act": [[161, "act"]], "Cache and Recall": [[161, "cache-and-recall"]], "Learn": [[161, "learn"]], "Neural Network": [[161, "neural-network"]], "TD Estimate & TD Target": [[161, "td-estimate-td-target"]], "Updating the model": [[161, "updating-the-model"]], "Save checkpoint": [[161, "save-checkpoint"]], "Putting it all together": [[161, "putting-it-all-together"]], "Logging": [[161, "logging"]], "Let\u2019s play!": [[161, "lets-play"]], "Channels Last Memory Format in PyTorch": [[162, "channels-last-memory-format-in-pytorch"]], "Memory Format API": [[162, "memory-format-api"]], "Performance Gains": [[162, "performance-gains"]], "Converting existing models": [[162, "converting-existing-models"]], "Work to do": [[162, "work-to-do"]], "Single-Machine Model Parallel Best Practices": [[164, "single-machine-model-parallel-best-practices"]], "Neural Tangent Kernels": [[165, "neural-tangent-kernels"]], "Create a function version of the model": [[165, "create-a-function-version-of-the-model"]], "Compute the NTK: method 1 (Jacobian contraction)": [[165, "compute-the-ntk-method-1-jacobian-contraction"]], "Compute the NTK: method 2 (NTK-vector products)": [[165, "compute-the-ntk-method-2-ntk-vector-products"]], "NLP from Scratch": [[166, "nlp-from-scratch"]], "Getting Started - Accelerate Your Scripts with nvFuser": [[167, "getting-started-accelerate-your-scripts-with-nvfuser"]], "How to save memory by fusing the optimizer step into the backward pass": [[168, "how-to-save-memory-by-fusing-the-optimizer-step-into-the-backward-pass"]], "Memory usage during training": [[168, "memory-usage-during-training"]], "Capturing and visualizing memory snapshots": [[168, "capturing-and-visualizing-memory-snapshots"]], "DISCLAIMER: This technique is not for all": [[168, "disclaimer-this-technique-is-not-for-all"]], "Tensor.register_post_accumulate_grad_hook(hook) API and our technique": [[168, "tensor-register-post-accumulate-grad-hook-hook-api-and-our-technique"]], "How everything fits together in 10 lines": [[168, "how-everything-fits-together-in-10-lines"]], "Parametrizations Tutorial": [[169, "parametrizations-tutorial"]], "Implementing parametrizations by hand": [[169, "implementing-parametrizations-by-hand"]], "Introduction to parametrizations": [[169, "introduction-to-parametrizations"]], "Inspecting a parametrized module": [[169, "inspecting-a-parametrized-module"]], "Parametrizations are first-class citizens": [[169, "parametrizations-are-first-class-citizens"]], "Caching the value of a parametrization": [[169, "caching-the-value-of-a-parametrization"]], "Concatenating parametrizations": [[169, "concatenating-parametrizations"]], "Initializing parametrizations": [[169, "initializing-parametrizations"]], "Removing parametrizations": [[169, "removing-parametrizations"]], "Per-sample-gradients": [[170, "per-sample-gradients"]], "What is it?": [[170, "what-is-it"]], "Per-sample-grads, the efficient way, using function transforms": [[170, "per-sample-grads-the-efficient-way-using-function-transforms"]], "Performance comparison": [[170, "performance-comparison"]], "A guide on good usage of non_blocking and pin_memory() in PyTorch": [[171, "a-guide-on-good-usage-of-non-blocking-and-pin-memory-in-pytorch"]], "What you will learn": [[171, "what-you-will-learn"], [253, "what-you-will-learn"], [263, "what-you-will-learn"]], "Preamble": [[171, "preamble"]], "Memory management basics": [[171, "memory-management-basics"]], "CUDA and (non-)pageable memory": [[171, "cuda-and-non-pageable-memory"]], "Asynchronous vs. Synchronous Operations with non_blocking=True (CUDA cudaMemcpyAsync)": [[171, "asynchronous-vs-synchronous-operations-with-non-blocking-true-cuda-cudamemcpyasync"]], "A PyTorch perspective": [[171, "a-pytorch-perspective"]], "pin_memory()": [[171, "pin-memory"]], "non_blocking=True": [[171, "non-blocking-true"]], "Synergies": [[171, "synergies"]], "Other copy directions (GPU -> CPU, CPU -> MPS)": [[171, "other-copy-directions-gpu-cpu-cpu-mps"]], "Practical recommendations": [[171, "practical-recommendations"]], "Additional considerations": [[171, "additional-considerations"]], "Additional resources": [[171, "additional-resources"]], "Training Transformer models using Pipeline Parallelism": [[172, "training-transformer-models-using-pipeline-parallelism"]], "Introduction to Distributed Pipeline Parallelism": [[173, "introduction-to-distributed-pipeline-parallelism"]], "Step 1: Partition the Transformer Model": [[173, "step-1-partition-the-transformer-model"]], "Step 2: Define The Main Execution": [[173, "step-2-define-the-main-execution"]], "Step 3: Launch the Distributed Processes": [[173, "step-3-launch-the-distributed-processes"]], "Customize Process Group Backends Using Cpp Extensions": [[174, "customize-process-group-backends-using-cpp-extensions"]], "Basics": [[174, "basics"], [179, "basics"]], "Step 1: Implement a Subclass of Backend": [[174, "step-1-implement-a-subclass-of-backend"]], "Step 2: Expose The Extension Python APIs": [[174, "step-2-expose-the-extension-python-apis"]], "Step 3: Build The Custom Extension": [[174, "step-3-build-the-custom-extension"]], "Step 4: Use The Extension in Application": [[174, "step-4-use-the-extension-in-application"]], "Pruning Tutorial": [[175, "pruning-tutorial"]], "Create a model": [[175, "create-a-model"]], "Inspect a Module": [[175, "inspect-a-module"]], "Pruning a Module": [[175, "pruning-a-module"]], "Iterative Pruning": [[175, "iterative-pruning"]], "Serializing a pruned model": [[175, "serializing-a-pruned-model"]], "Remove pruning re-parametrization": [[175, "remove-pruning-re-parametrization"]], "Pruning multiple parameters in a model": [[175, "pruning-multiple-parameters-in-a-model"]], "Global pruning": [[175, "global-pruning"]], "Extending torch.nn.utils.prune with custom pruning functions": [[175, "extending-torch-nn-utils-prune-with-custom-pruning-functions"]], "Real Time Inference on Raspberry Pi 4 (30 fps!)": [[176, "real-time-inference-on-raspberry-pi-4-30-fps"]], "Raspberry Pi 4 Setup": [[176, "raspberry-pi-4-setup"]], "Installing PyTorch and OpenCV": [[176, "installing-pytorch-and-opencv"]], "Video Capture": [[176, "video-capture"]], "Image Preprocessing": [[176, "image-preprocessing"]], "Model Choices": [[176, "model-choices"]], "MobileNetV2: Quantization and JIT": [[176, "mobilenetv2-quantization-and-jit"]], "Putting It Together": [[176, "putting-it-together"]], "Troubleshooting: Performance": [[176, "troubleshooting-performance"]], "Reinforcement Learning (PPO) with TorchRL Tutorial": [[177, "reinforcement-learning-ppo-with-torchrl-tutorial"]], "Define Hyperparameters": [[177, "define-hyperparameters"]], "Data collection parameters": [[177, "data-collection-parameters"]], "PPO parameters": [[177, "ppo-parameters"]], "Define an environment": [[177, "define-an-environment"]], "Normalization": [[177, "normalization"]], "Value network": [[177, "value-network"]], "Loss function": [[177, "loss-function"]], "Conclusion and next steps": [[177, "conclusion-and-next-steps"]], "Reinforcement Learning (DQN) Tutorial": [[178, "reinforcement-learning-dqn-tutorial"]], "Replay Memory": [[178, "replay-memory"]], "DQN algorithm": [[178, "dqn-algorithm"]], "Q-network": [[178, "q-network"]], "Hyperparameters and utilities": [[178, "hyperparameters-and-utilities"]], "Implementing Batch RPC Processing Using Asynchronous Executions": [[179, "implementing-batch-rpc-processing-using-asynchronous-executions"]], "Batch-Updating Parameter Server": [[179, "batch-updating-parameter-server"]], "Batch-Processing CartPole Solver": [[179, "batch-processing-cartpole-solver"]], "Learn More": [[179, "learn-more"], [187, "learn-more"], [224, "learn-more"], [226, "learn-more"], [229, "learn-more"], [237, "learn-more"], [240, "learn-more"], [241, "learn-more"], [242, "learn-more"]], "Implementing a Parameter Server Using Distributed RPC Framework": [[180, "implementing-a-parameter-server-using-distributed-rpc-framework"]], "Getting Started with Distributed RPC Framework": [[181, "getting-started-with-distributed-rpc-framework"]], "Distributed Reinforcement Learning using RPC and RRef": [[181, "distributed-reinforcement-learning-using-rpc-and-rref"]], "Distributed RNN using Distributed Autograd and Distributed Optimizer": [[181, "distributed-rnn-using-distributed-autograd-and-distributed-optimizer"]], "(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)": [[182, "beta-implementing-high-performance-transformers-with-scaled-dot-product-attention-sdpa"]], "Fused implementations": [[182, "fused-implementations"]], "Explicit Dispatcher Control": [[182, "explicit-dispatcher-control"]], "Hardware dependence": [[182, "hardware-dependence"]], "Causal Self Attention": [[182, "causal-self-attention"]], "NestedTensor and Dense tensor support": [[182, "nestedtensor-and-dense-tensor-support"]], "Using SDPA with torch.compile": [[182, "using-sdpa-with-torch-compile"]], "Using SDPA with attn_bias subclasses": [[182, "using-sdpa-with-attn-bias-subclasses"]], "NLP From Scratch: Translation with a Sequence to Sequence Network and Attention": [[183, "nlp-from-scratch-translation-with-a-sequence-to-sequence-network-and-attention"]], "Loading data files": [[183, "loading-data-files"]], "The Seq2Seq Model": [[183, "the-seq2seq-model"]], "The Encoder": [[183, "the-encoder"]], "The Decoder": [[183, "the-decoder"]], "Simple Decoder": [[183, "simple-decoder"]], "Attention Decoder": [[183, "attention-decoder"]], "Preparing Training Data": [[183, "preparing-training-data"]], "Training the Model": [[183, "training-the-model"]], "Plotting results": [[183, "plotting-results"]], "Evaluation": [[183, "evaluation"]], "Training and Evaluating": [[183, "training-and-evaluating"]], "Visualizing Attention": [[183, "visualizing-attention"]], "Spatial Transformer Networks Tutorial": [[185, "spatial-transformer-networks-tutorial"]], "Loading the data": [[185, "loading-the-data"]], "Depicting spatial transformer networks": [[185, "depicting-spatial-transformer-networks"]], "Visualizing the STN results": [[185, "visualizing-the-stn-results"]], "Speech Recognition with Wav2Vec2": [[186, "speech-recognition-with-wav2vec2"]], "PyTorch Profiler With TensorBoard": [[187, "pytorch-profiler-with-tensorboard"]], "1. Prepare the data and model": [[187, "prepare-the-data-and-model"]], "2. Use profiler to record execution events": [[187, "use-profiler-to-record-execution-events"]], "3. Run the profiler": [[187, "run-the-profiler"]], "4. Use TensorBoard to view results and analyze model performance": [[187, "use-tensorboard-to-view-results-and-analyze-model-performance"]], "5. Improve performance with the help of profiler": [[187, "improve-performance-with-the-help-of-profiler"]], "6. Analyze performance with other advanced features": [[187, "analyze-performance-with-other-advanced-features"]], "7. Additional Practices: Profiling PyTorch on AMD GPUs": [[187, "additional-practices-profiling-pytorch-on-amd-gpus"]], "Visualizing Models, Data, and Training with TensorBoard": [[188, "visualizing-models-data-and-training-with-tensorboard"]], "1. TensorBoard setup": [[188, "tensorboard-setup"]], "2. Writing to TensorBoard": [[188, "writing-to-tensorboard"]], "3. Inspect the model using TensorBoard": [[188, "inspect-the-model-using-tensorboard"]], "4. Adding a \u201cProjector\u201d to TensorBoard": [[188, "adding-a-projector-to-tensorboard"]], "5. Tracking model training with TensorBoard": [[188, "tracking-model-training-with-tensorboard"]], "6. Assessing trained models with TensorBoard": [[188, "assessing-trained-models-with-tensorboard"]], "Text-to-speech with Tacotron2": [[189, "text-to-speech-with-tacotron2"]], "Whole Slide Image Classification Using PyTorch and TIAToolbox": [[190, "whole-slide-image-classification-using-pytorch-and-tiatoolbox"]], "Setting up the environment": [[190, "setting-up-the-environment"]], "Importing related libraries": [[190, "importing-related-libraries"]], "Clean-up before a run": [[190, "clean-up-before-a-run"]], "Downloading the data": [[190, "downloading-the-data"]], "Reading the data": [[190, "reading-the-data"]], "Classify image patches": [[190, "classify-image-patches"]], "Define PatchPredictor model": [[190, "define-patchpredictor-model"]], "Predict patch labels": [[190, "predict-patch-labels"]], "Predict patch labels for a whole slide": [[190, "predict-patch-labels-for-a-whole-slide"]], "Feature extraction with a pathology-specific model": [[190, "feature-extraction-with-a-pathology-specific-model"]], "Where to Go From Here": [[190, "where-to-go-from-here"]], "Building a Convolution/Batch Norm fuser with torch.compile": [[191, "building-a-convolution-batch-norm-fuser-with-torch-compile"]], "Fusing Convolution with Batch Norm": [[191, "fusing-convolution-with-batch-norm"], [191, "id1"]], "Pattern Matching with torch.compile": [[191, "pattern-matching-with-torch-compile"]], "Testing out our Fusion Pass": [[191, "testing-out-our-fusion-pass"]], "Benchmarking our Fusion on ResNet18": [[191, "benchmarking-our-fusion-on-resnet18"]], "Introduction to torch.compile": [[192, "introduction-to-torch-compile"]], "torch.compile and Nested Calls": [[192, "torch-compile-and-nested-calls"]], "Best Practices and Recommendations": [[192, "best-practices-and-recommendations"]], "Demonstrating Speedups": [[192, "demonstrating-speedups"]], "Comparison to TorchScript and FX Tracing": [[192, "comparison-to-torchscript-and-fx-tracing"]], "TorchDynamo and FX Graphs": [[192, "torchdynamo-and-fx-graphs"]], "torch.export Nightly Tutorial": [[193, "torch-export-nightly-tutorial"]], "torch.export Tutorial": [[194, "torch-export-tutorial"]], "Graph Breaks": [[194, "graph-breaks"]], "Non-Strict Export": [[194, "non-strict-export"]], "Control Flow Ops": [[194, "control-flow-ops"]], "Constraints/Dynamic Shapes": [[194, "constraints-dynamic-shapes"]], "Basic concepts: symbols and guards": [[194, "basic-concepts-symbols-and-guards"]], "0/1 specialization": [[194, "specialization"]], "Named Dims": [[194, "named-dims"]], "Constraint violations, suggested fixes": [[194, "constraint-violations-suggested-fixes"]], "Data-dependent errors": [[194, "data-dependent-errors"]], "Guards, torch._check()": [[194, "guards-torch-check"]], "Specialized values": [[194, "specialized-values"]], "Custom Ops": [[194, "custom-ops"]], "IR/Decompositions": [[194, "ir-decompositions"]], "ExportDB": [[194, "exportdb"]], "Running the Exported Program": [[194, "running-the-exported-program"]], "Introduction to TorchRec": [[195, "introduction-to-torchrec"], [196, "introduction-to-torchrec"]], "Install Dependencies": [[195, "install-dependencies"]], "Embeddings": [[195, "embeddings"]], "Embeddings in RecSys": [[195, "embeddings-in-recsys"]], "Embeddings in PyTorch": [[195, "embeddings-in-pytorch"]], "TorchRec Features Overview": [[195, "torchrec-features-overview"]], "From EmbeddingBag to EmbeddingBagCollection": [[195, "from-embeddingbag-to-embeddingbagcollection"]], "TorchRec Input/Output Data Types": [[195, "torchrec-input-output-data-types"]], "Distributed Training and Sharding": [[195, "distributed-training-and-sharding"]], "Distributed Embeddings": [[195, "distributed-embeddings"]], "Sharding": [[195, "sharding"]], "Sharded Modules": [[195, "sharded-modules"]], "Planner": [[195, "planner"]], "Planner Result": [[195, "planner-result"]], "GPU Training with LazyAwaitable": [[195, "gpu-training-with-lazyawaitable"]], "Anatomy of Sharded TorchRec modules": [[195, "anatomy-of-sharded-torchrec-modules"]], "Optimizing Embedding Lookups": [[195, "optimizing-embedding-lookups"]], "DistributedModelParallel": [[195, "distributedmodelparallel"]], "Sharding Best Practices": [[195, "sharding-best-practices"]], "Adding in the Optimizer": [[195, "adding-in-the-optimizer"]], "Optimizer Classes": [[195, "optimizer-classes"]], "Fused optimizer in TorchRec": [[195, "fused-optimizer-in-torchrec"]], "Adding an Optimizer to EmbeddingBagCollection": [[195, "adding-an-optimizer-to-embeddingbagcollection"]], "TorchVision Object Detection Finetuning Tutorial": [[197, "torchvision-object-detection-finetuning-tutorial"]], "Defining the Dataset": [[197, "defining-the-dataset"]], "Writing a custom dataset for PennFudan": [[197, "writing-a-custom-dataset-for-pennfudan"]], "Defining your model": [[197, "defining-your-model"]], "1 - Finetuning from a pretrained model": [[197, "finetuning-from-a-pretrained-model"]], "2 - Modifying the model to add a different backbone": [[197, "modifying-the-model-to-add-a-different-backbone"]], "Object detection and instance segmentation model for PennFudan Dataset": [[197, "object-detection-and-instance-segmentation-model-for-pennfudan-dataset"]], "Putting everything together": [[197, "putting-everything-together"]], "Testing forward() method (Optional)": [[197, "testing-forward-method-optional"]], "Wrapping up": [[197, "wrapping-up"]], "Accelerating PyTorch Transformers by replacing nn.Transformer with Nested Tensors and torch.compile()": [[198, "accelerating-pytorch-transformers-by-replacing-nn-transformer-with-nested-tensors-and-torch-compile"]], "Is this tutorial for me?": [[198, "is-this-tutorial-for-me"]], "Introducing the Building Blocks": [[198, "introducing-the-building-blocks"]], "The above building blocks are \u201cAll You Need\u201d (as of October 2024)": [[198, "the-above-building-blocks-are-all-you-need-as-of-october-2024"]], "MultiheadAttention": [[198, "multiheadattention"]], "Utilities": [[198, "utilities"]], "GPT-style layer": [[198, "gpt-style-layer"]], "Going one step further": [[198, "going-one-step-further"]], "Cross Attention": [[198, "cross-attention"]], "Fully masked rows no longer cause NaNs": [[198, "fully-masked-rows-no-longer-cause-nans"]], "Packed Projection": [[198, "packed-projection"]], "Input projection for MultiheadAttention": [[198, "input-projection-for-multiheadattention"]], "SwiGLU feed forward network of Transformer Layer": [[198, "swiglu-feed-forward-network-of-transformer-layer"]], "Extended examples": [[198, "extended-examples"]], "Visualizing Gradients": [[199, "visualizing-gradients"]], "Registering hooks": [[199, "registering-hooks"]], "Training and visualization": [[199, "training-and-visualization"]], "(Optional) Additional exercises": [[199, "optional-additional-exercises"]], "Intro": [[200, "intro"]], "Leverage Intel\u00ae Advanced Matrix Extensions": [[201, "leverage-intel-advanced-matrix-extensions"]], "AMX in PyTorch": [[201, "amx-in-pytorch"]], "Guidelines of leveraging AMX with workloads": [[201, "guidelines-of-leveraging-amx-with-workloads"]], "CPU operators that can leverage AMX:": [[201, "cpu-operators-that-can-leverage-amx"]], "Confirm AMX is being utilized": [[201, "confirm-amx-is-being-utilized"]], "Making Native Android Application that uses PyTorch prebuilt libraries": [[202, "making-native-android-application-that-uses-pytorch-prebuilt-libraries"]], "(beta) Compiling the optimizer with torch.compile": [[203, "beta-compiling-the-optimizer-with-torch-compile"]], "Model Setup": [[203, "model-setup"], [204, "model-setup"], [211, "model-setup"]], "Setting up and running the optimizer benchmark": [[203, "setting-up-and-running-the-optimizer-benchmark"]], "See Also": [[203, "see-also"], [251, "see-also"], [277, "see-also"]], "(beta) Running the compiled optimizer with an LR Scheduler": [[204, "beta-running-the-compiled-optimizer-with-an-lr-scheduler"]], "Setting up and running the compiled optimizer with LR Scheduler": [[204, "setting-up-and-running-the-compiled-optimizer-with-lr-scheduler"]], "Extension: What happens with a non-tensor LR?": [[204, "extension-what-happens-with-a-non-tensor-lr"]], "Asynchronous Saving with Distributed Checkpoint (DCP)": [[205, "asynchronous-saving-with-distributed-checkpoint-dcp"]], "Asynchronous Checkpointing Overview": [[205, "asynchronous-checkpointing-overview"]], "Even more performance with Pinned Memory": [[205, "even-more-performance-with-pinned-memory"]], "Getting Started with Distributed Checkpoint (DCP)": [[206, "getting-started-with-distributed-checkpoint-dcp"]], "How DCP works": [[206, "how-dcp-works"]], "How to use DCP": [[206, "how-to-use-dcp"]], "Saving": [[206, "saving"]], "Loading": [[206, "loading"]], "Formats": [[206, "formats"]], "Getting Started with CommDebugMode": [[207, "getting-started-with-commdebugmode"]], "What is CommDebugMode and why is it useful": [[207, "what-is-commdebugmode-and-why-is-it-useful"]], "Using CommDebugMode": [[207, "using-commdebugmode"]], "Getting Started with DeviceMesh": [[208, "getting-started-with-devicemesh"]], "What is DeviceMesh": [[208, "what-is-devicemesh"]], "Why DeviceMesh is Useful": [[208, "why-devicemesh-is-useful"]], "How to use DeviceMesh with HSDP": [[208, "how-to-use-devicemesh-with-hsdp"]], "How to use DeviceMesh for your custom parallel solutions": [[208, "how-to-use-devicemesh-for-your-custom-parallel-solutions"]], "Profiling PyTorch RPC-Based Workloads": [[210, "profiling-pytorch-rpc-based-workloads"], [262, "profiling-pytorch-rpc-based-workloads"]], "Explicit horizontal fusion with foreach_map and torch.compile": [[211, "explicit-horizontal-fusion-with-foreach-map-and-torch-compile"]], "Helper functions for foreach_map implementation": [[211, "helper-functions-for-foreach-map-implementation"]], "Setting up and running the compiled kernel": [[211, "setting-up-and-running-the-compiled-kernel"]], "(Beta) PyTorch Inference Performance Tuning on AWS Graviton Processors": [[212, "beta-pytorch-inference-performance-tuning-on-aws-graviton-processors"]], "Contents": [[212, "contents"]], "Speed up Inference with bfloat16 Fast Math Kernels": [[212, "speed-up-inference-with-bfloat16-fast-math-kernels"]], "Improve Inference Performance with OpenBLAS for Smaller Batch Dimensions": [[212, "improve-inference-performance-with-openblas-for-smaller-batch-dimensions"]], "Optimize Memory Allocation Overhead with Linux Transparent Huge Pages (THP)": [[212, "optimize-memory-allocation-overhead-with-linux-transparent-huge-pages-thp"]], "Intel\u00ae Extension for PyTorch*": [[213, "intel-extension-for-pytorch"]], "Features": [[213, "features"], [214, "features"]], "Examples \u2013 CPU": [[213, "examples-cpu"]], "Float32": [[213, "float32"], [213, "id1"], [213, "id4"], [213, "id7"]], "BFloat16": [[213, "bfloat16"], [213, "id2"], [213, "id5"], [213, "id8"]], "Inference": [[213, "inference"], [213, "id6"]], "Examples \u2013 GPU": [[213, "examples-gpu"]], "Float16": [[213, "float16"]], "C++ (CPU only)": [[213, "c-cpu-only"]], "Tutorials": [[213, "tutorials"], [214, "tutorials"]], "Ease-of-use quantization for PyTorch with Intel\u00ae Neural Compressor": [[214, "ease-of-use-quantization-for-pytorch-with-intel-neural-compressor"]], "FP8 Quantization": [[214, "fp8-quantization"]], "Weight-only Quantization": [[214, "weight-only-quantization"]], "Static Quantization with PT2E Backend": [[214, "static-quantization-with-pt2e-backend"]], "Accuracy-driven Tuning": [[214, "accuracy-driven-tuning"]], "Loading data in PyTorch": [[215, "loading-data-in-pytorch"]], "(beta) Efficient mobile interpreter in Android and iOS": [[216, "beta-efficient-mobile-interpreter-in-android-and-ios"]], "Pytorch Mobile Performance Recipes": [[217, "pytorch-mobile-performance-recipes"]], "Model Preparation for Android Recipe": [[218, "model-preparation-for-android-recipe"]], "Model Preparation for iOS Recipe": [[219, "model-preparation-for-ios-recipe"]], "Profiling PyTorch workloads with The Instrumentation and Tracing Technology (ITT) API": [[220, "profiling-pytorch-workloads-with-the-instrumentation-and-tracing-technology-itt-api"]], "What is Intel\u00ae VTune\u2122 Profiler": [[220, "what-is-intel-vtune-profiler"]], "What is Instrumentation and Tracing Technology (ITT) API": [[220, "what-is-instrumentation-and-tracing-technology-itt-api"]], "How to visualize PyTorch model hierarchy in Intel\u00ae VTune\u2122 Profiler": [[220, "how-to-visualize-pytorch-model-hierarchy-in-intel-vtune-profiler"]], "Launch Intel\u00ae VTune\u2122 Profiler": [[220, "launch-intel-vtune-profiler"]], "Configure Profiling for CPU": [[220, "configure-profiling-for-cpu"]], "Configure Profiling for XPU": [[220, "configure-profiling-for-xpu"]], "Read Profiling Result": [[220, "read-profiling-result"]], "Read XPU Profiling Result": [[220, "read-xpu-profiling-result"]], "A short sample code showcasing how to use PyTorch ITT APIs": [[220, "a-short-sample-code-showcasing-how-to-use-pytorch-itt-apis"]], "Summary of PyTorch Mobile Recipes": [[221, "summary-of-pytorch-mobile-recipes"]], "Model Interpretability using Captum": [[222, "model-interpretability-using-captum"]], "Before you begin": [[222, "before-you-begin"]], "Computing Attribution": [[222, "computing-attribution"]], "Visualizing the Results": [[222, "visualizing-the-results"]], "Final Notes": [[222, "final-notes"]], "Automatic Mixed Precision": [[223, "automatic-mixed-precision"]], "A simple network": [[223, "a-simple-network"]], "Default Precision": [[223, "default-precision"]], "Adding torch.autocast": [[223, "adding-torch-autocast"]], "Adding GradScaler": [[223, "adding-gradscaler"]], "All together: \u201cAutomatic Mixed Precision\u201d": [[223, "all-together-automatic-mixed-precision"]], "Inspecting/modifying gradients (e.g., clipping)": [[223, "inspecting-modifying-gradients-e-g-clipping"]], "Saving/Resuming": [[223, "saving-resuming"]], "Inference/Evaluation": [[223, "inference-evaluation"]], "Advanced topics": [[223, "advanced-topics"]], "Speedup with Amp is minor": [[223, "speedup-with-amp-is-minor"]], "Loss is inf/NaN": [[223, "loss-is-inf-nan"]], "Type mismatch error (may manifest as CUDNN_STATUS_BAD_PARAM)": [[223, "type-mismatch-error-may-manifest-as-cudnn-status-bad-param"]], "SyntaxError": [[224, "syntaxerror"]], "1. Defining functions to benchmark": [[224, "defining-functions-to-benchmark"]], "2. Benchmarking with timeit.Timer": [[224, "benchmarking-with-timeit-timer"]], "3. Benchmarking with torch.utils.benchmark.Timer": [[224, "benchmarking-with-torch-utils-benchmark-timer"]], "4. Benchmarking with Blocked Autorange": [[224, "benchmarking-with-blocked-autorange"]], "5. Comparing benchmark results": [[224, "comparing-benchmark-results"]], "6. Saving/Loading benchmark results": [[224, "saving-loading-benchmark-results"]], "7. Generating inputs with Fuzzed Parameters": [[224, "generating-inputs-with-fuzzed-parameters"]], "8. Collecting instruction counts with Callgrind": [[224, "collecting-instruction-counts-with-callgrind"]], "Changing default device": [[225, "changing-default-device"]], "Defining a Neural Network in PyTorch": [[226, "defining-a-neural-network-in-pytorch"]], "1. Import necessary libraries for loading our data": [[226, "import-necessary-libraries-for-loading-our-data"], [240, "import-necessary-libraries-for-loading-our-data"], [241, "import-necessary-libraries-for-loading-our-data"], [242, "import-necessary-libraries-for-loading-our-data"]], "2. Define and initialize the neural network": [[226, "define-and-initialize-the-neural-network"], [241, "define-and-initialize-the-neural-network"]], "3. Specify how data will pass through your model": [[226, "specify-how-data-will-pass-through-your-model"]], "4. [Optional] Pass data through your model to test": [[226, "optional-pass-data-through-your-model-to-test"]], "PyTorch Recipes": [[227, "pytorch-recipes"]], "Tips for Loading an nn.Module from a Checkpoint": [[228, "tips-for-loading-an-nn-module-from-a-checkpoint"]], "Using torch.load(mmap=True)": [[228, "using-torch-load-mmap-true"]], "Using torch.device('meta')": [[228, "using-torch-device-meta"]], "Using load_state_dict(assign=True)": [[228, "using-load-state-dict-assign-true"]], "PyTorch Profiler": [[229, "pytorch-profiler"]], "1. Import all necessary libraries": [[229, "import-all-necessary-libraries"]], "2. Instantiate a simple Resnet model": [[229, "instantiate-a-simple-resnet-model"]], "3. Using profiler to analyze execution time": [[229, "using-profiler-to-analyze-execution-time"]], "4. Using profiler to analyze memory consumption": [[229, "using-profiler-to-analyze-memory-consumption"]], "5. Using tracing functionality": [[229, "using-tracing-functionality"]], "6. Examining stack traces": [[229, "examining-stack-traces"]], "7. Using profiler to analyze long-running jobs": [[229, "using-profiler-to-analyze-long-running-jobs"]], "Reasoning about Shapes in PyTorch": [[230, "reasoning-about-shapes-in-pytorch"]], "Save Load Across Devices": [[231, "save-load-across-devices"]], "Saving And Loading A General Checkpoint": [[232, "saving-and-loading-a-general-checkpoint"]], "Saving And Loading Models For Inference": [[233, "saving-and-loading-models-for-inference"]], "Saving Multiple Models In One File": [[234, "saving-multiple-models-in-one-file"]], "Extension points in nn.Module for load_state_dict and tensor subclasses": [[236, "extension-points-in-nn-module-for-load-state-dict-and-tensor-subclasses"]], "torch.utils.swap_tensors": [[236, "torch-utils-swap-tensors"]], "Application to nn.Module": [[236, "application-to-nn-module"]], "nn.Module.to() and related methods": [[236, "nn-module-to-and-related-methods"]], "nn.Module.load_state_dict()": [[236, "nn-module-load-state-dict"]], "How to use TensorBoard with PyTorch": [[237, "how-to-use-tensorboard-with-pytorch"]], "Using TensorBoard in PyTorch": [[237, "using-tensorboard-in-pytorch"]], "Log scalars": [[237, "log-scalars"]], "Run TensorBoard": [[237, "run-tensorboard"]], "Timer quick start": [[238, "timer-quick-start"]], "1. Defining a Timer": [[238, "defining-a-timer"]], "2. Wall time: Timer.blocked_autorange(...)": [[238, "wall-time-timer-blocked-autorange"]], "3. C++ snippets": [[238, "c-snippets"]], "4. Instruction counts: Timer.collect_callgrind(...)": [[238, "instruction-counts-timer-collect-callgrind"]], "5. Instruction counts: Delving deeper": [[238, "instruction-counts-delving-deeper"]], "6. A/B testing with Callgrind": [[238, "a-b-testing-with-callgrind"]], "7. Wrapping up": [[238, "wrapping-up"]], "8. Footnotes": [[238, "footnotes"]], "Performance Tuning Guide": [[239, "performance-tuning-guide"]], "General optimizations": [[239, "general-optimizations"]], "Enable asynchronous data loading and augmentation": [[239, "enable-asynchronous-data-loading-and-augmentation"]], "Disable gradient calculation for validation or inference": [[239, "disable-gradient-calculation-for-validation-or-inference"]], "Disable bias for convolutions directly followed by a batch norm": [[239, "disable-bias-for-convolutions-directly-followed-by-a-batch-norm"]], "Use parameter.grad = None instead of model.zero_grad() or optimizer.zero_grad()": [[239, "use-parameter-grad-none-instead-of-model-zero-grad-or-optimizer-zero-grad"]], "Fuse operations": [[239, "fuse-operations"]], "Enable channels_last memory format for computer vision models": [[239, "enable-channels-last-memory-format-for-computer-vision-models"]], "Checkpoint intermediate buffers": [[239, "checkpoint-intermediate-buffers"]], "Disable debugging APIs": [[239, "disable-debugging-apis"]], "CPU specific optimizations": [[239, "cpu-specific-optimizations"]], "Utilize Non-Uniform Memory Access (NUMA) Controls": [[239, "utilize-non-uniform-memory-access-numa-controls"]], "Utilize OpenMP": [[239, "utilize-openmp"]], "Intel OpenMP Runtime Library (libiomp)": [[239, "intel-openmp-runtime-library-libiomp"]], "Switch Memory allocator": [[239, "switch-memory-allocator"]], "Train a model on CPU with PyTorch ``DistributedDataParallel``(DDP) functionality": [[239, "train-a-model-on-cpu-with-pytorch-distributeddataparallel-ddp-functionality"]], "GPU specific optimizations": [[239, "gpu-specific-optimizations"]], "Enable Tensor cores": [[239, "enable-tensor-cores"]], "Use CUDA Graphs": [[239, "use-cuda-graphs"]], "Enable cuDNN auto-tuner": [[239, "enable-cudnn-auto-tuner"]], "Avoid unnecessary CPU-GPU synchronization": [[239, "avoid-unnecessary-cpu-gpu-synchronization"]], "Create tensors directly on the target device": [[239, "create-tensors-directly-on-the-target-device"]], "Use mixed precision and AMP": [[239, "use-mixed-precision-and-amp"]], "Preallocate memory in case of variable input length": [[239, "preallocate-memory-in-case-of-variable-input-length"]], "Distributed optimizations": [[239, "distributed-optimizations"]], "Use efficient data-parallel backend": [[239, "use-efficient-data-parallel-backend"]], "Skip unnecessary all-reduce if training with DistributedDataParallel and gradient accumulation": [[239, "skip-unnecessary-all-reduce-if-training-with-distributeddataparallel-and-gradient-accumulation"]], "Match the order of layers in constructors and during the execution if using DistributedDataParallel(find_unused_parameters=True)": [[239, "match-the-order-of-layers-in-constructors-and-during-the-execution-if-using-distributeddataparallel-find-unused-parameters-true"]], "Load-balance workload in a distributed setting": [[239, "load-balance-workload-in-a-distributed-setting"]], "Warmstarting model using parameters from a different model in PyTorch": [[240, "warmstarting-model-using-parameters-from-a-different-model-in-pytorch"]], "2. Define and initialize the neural network A and B": [[240, "define-and-initialize-the-neural-network-a-and-b"]], "3. Save model A": [[240, "save-model-a"]], "4. Load into model B": [[240, "load-into-model-b"]], "What is a state_dict in PyTorch": [[241, "what-is-a-state-dict-in-pytorch"]], "3. Initialize the optimizer": [[241, "initialize-the-optimizer"]], "4. Access the model and optimizer state_dict": [[241, "access-the-model-and-optimizer-state-dict"]], "Zeroing out gradients in PyTorch": [[242, "zeroing-out-gradients-in-pytorch"]], "2. Load and normalize the dataset": [[242, "load-and-normalize-the-dataset"]], "3. Build the neural network": [[242, "build-the-neural-network"]], "4. Define a Loss function and optimizer": [[242, "define-a-loss-function-and-optimizer"]], "5. Zero the gradients while training the network": [[242, "zero-the-gradients-while-training-the-network"]], "Reducing AoT cold start compilation time with regional compilation": [[243, "reducing-aot-cold-start-compilation-time-with-regional-compilation"]], "Defining the Neural Network": [[243, "defining-the-neural-network"]], "Compiling the model ahead-of-time": [[243, "compiling-the-model-ahead-of-time"]], "Compiling _regions_ of the model ahead-of-time": [[243, "compiling-regions-of-the-model-ahead-of-time"]], "Measuring compilation time": [[243, "measuring-compilation-time"]], "Reducing torch.compile cold start compilation time with regional compilation": [[244, "reducing-torch-compile-cold-start-compilation-time-with-regional-compilation"]], "Script and Optimize for Mobile Recipe": [[245, "script-and-optimize-for-mobile-recipe"]], "Intel\u00ae Extension for PyTorch* Backend on Intel\u00ae CPUs": [[247, "intel-extension-for-pytorch-backend-on-intel-cpus"]], "Usage Example": [[247, "usage-example"]], "Train FP32": [[247, "train-fp32"]], "Train BF16": [[247, "train-bf16"]], "Inference FP32": [[247, "inference-fp32"]], "Inference BF16": [[247, "inference-bf16"]], "Compile Time Caching Configuration": [[248, "compile-time-caching-configuration"]], "Inductor Cache Settings": [[248, "inductor-cache-settings"]], "TORCHINDUCTOR_FX_GRAPH_CACHE": [[248, "torchinductor-fx-graph-cache"]], "TORCHINDUCTOR_AUTOGRAD_CACHE": [[248, "torchinductor-autograd-cache"]], "TORCHINDUCTOR_CACHE_DIR": [[248, "torchinductor-cache-dir"]], "TORCHINDUCTOR_FX_GRAPH_REMOTE_CACHE": [[248, "torchinductor-fx-graph-remote-cache"]], "TORCHINDUCTOR_AUTOGRAD_REMOTE_CACHE": [[248, "torchinductor-autograd-remote-cache"]], "TORCHINDUCTOR_AUTOTUNE_REMOTE_CACHE": [[248, "torchinductor-autotune-remote-cache"]], "TORCHINDUCTOR_FORCE_DISABLE_CACHES": [[248, "torchinductor-force-disable-caches"]], "Compile Time Caching in torch.compile": [[249, "compile-time-caching-in-torch-compile"]], "Caching Offerings": [[249, "caching-offerings"]], "torch.compile end-to-end caching (Mega-Cache)": [[249, "torch-compile-end-to-end-caching-mega-cache"]], "Modular caching of TorchDynamo, TorchInductor, and Triton": [[249, "modular-caching-of-torchdynamo-torchinductor-and-triton"]], "Remote Caching": [[249, "remote-caching"]], "(beta) Utilizing Torch Function modes with torch.compile": [[250, "beta-utilizing-torch-function-modes-with-torch-compile"]], "Rewriting a torch op (torch.add -> torch.mul)": [[250, "rewriting-a-torch-op-torch-add-torch-mul"]], "Using User-Defined Triton Kernels with torch.compile": [[251, "using-user-defined-triton-kernels-with-torch-compile"]], "Advanced Usage": [[251, "advanced-usage"]], "Composability": [[251, "composability"]], "Wrapping Triton kernels with triton_op": [[251, "wrapping-triton-kernels-with-triton-op"]], "Adding training support": [[251, "adding-training-support"]], "Adding a CPU Fallback": [[251, "adding-a-cpu-fallback"]], "Adding a FlopCounter Formula": [[251, "adding-a-flopcounter-formula"]], "Limitations": [[251, "limitations"]], "Dynamic Compilation Control with torch.compiler.set_stance": [[252, "dynamic-compilation-control-with-torch-compiler-set-stance"]], "Description": [[252, "description"]], "Preventing recompilation": [[252, "preventing-recompilation"]], "Measuring performance gains": [[252, "measuring-performance-gains"]], "Crashing sooner": [[252, "crashing-sooner"]], "torch.export AOTInductor Tutorial for Python runtime (Beta)": [[253, "torch-export-aotinductor-tutorial-for-python-runtime-beta"]], "Model Compilation": [[253, "model-compilation"]], "Model Inference in Python": [[253, "model-inference-in-python"]], "When to use AOTInductor with a Python Runtime": [[253, "when-to-use-aotinductor-with-a-python-runtime"]], "Demonstration of torch.export flow, common challenges and the solutions to address them": [[254, "demonstration-of-torch-export-flow-common-challenges-and-the-solutions-to-address-them"]], "Key requirement for torch.export: No graph break": [[254, "key-requirement-for-torch-export-no-graph-break"]], "Video Classification": [[254, "video-classification"]], "Error: Static batch size": [[254, "error-static-batch-size"]], "Solution": [[254, "solution"], [254, "id1"], [254, "id2"], [254, "id3"]], "Automatic Speech Recognition": [[254, "automatic-speech-recognition"]], "Error: strict tracing with TorchDynamo": [[254, "error-strict-tracing-with-torchdynamo"]], "Image Captioning": [[254, "image-captioning"]], "Error: Cannot mutate tensors with frozen storage": [[254, "error-cannot-mutate-tensors-with-frozen-storage"]], "Promptable Image Segmentation": [[254, "promptable-image-segmentation"]], "Error: Model is not of type torch.nn.Module": [[254, "error-model-is-not-of-type-torch-nn-module"]], "(beta) Using TORCH_LOGS python API with torch.compile": [[255, "beta-using-torch-logs-python-api-with-torch-compile"]], "Optimizing CPU Performance on Intel\u00ae Xeon\u00ae with run_cpu Script": [[257, "optimizing-cpu-performance-on-intel-xeon-with-run-cpu-script"]], "What You Will Learn": [[257, "what-you-will-learn"]], "Introduction of the Optimizations": [[257, "introduction-of-the-optimizations"]], "Applying NUMA Access Control": [[257, "applying-numa-access-control"]], "Using Intel\u00ae OpenMP Runtime Library": [[257, "using-intel-openmp-runtime-library"]], "Choosing an Optimized Memory Allocator": [[257, "choosing-an-optimized-memory-allocator"]], "Quick Start Example Commands": [[257, "quick-start-example-commands"]], "Using torch.backends.xeon.run_cpu": [[257, "using-torch-backends-xeon-run-cpu"]], "Explanation of the options": [[257, "explanation-of-the-options"]], "Shard Optimizer States with ZeroRedundancyOptimizer": [[258, "shard-optimizer-states-with-zeroredundancyoptimizer"]], "What is ZeroRedundancyOptimizer?": [[258, "what-is-zeroredundancyoptimizer"]], "How to use ZeroRedundancyOptimizer?": [[258, "how-to-use-zeroredundancyoptimizer"]], "Recipes": [[259, "recipes"]], "Introduction to Context Parallel": [[261, "introduction-to-context-parallel"]], "Enable Context Parallel": [[261, "enable-context-parallel"]], "Select Rotation Approach": [[261, "select-rotation-approach"]], "Flight Recorder for Debugging Stuck Jobs": [[263, "flight-recorder-for-debugging-stuck-jobs"]], "Enabling Flight Recorder": [[263, "enabling-flight-recorder"]], "Additional Settings": [[263, "additional-settings"]], "Retrieving Flight Recorder Data via an API": [[263, "retrieving-flight-recorder-data-via-an-api"]], "Flight Recorder File Formats": [[263, "flight-recorder-file-formats"]], "Analyzing Flight Recorder Dumps": [[263, "analyzing-flight-recorder-dumps"]], "An End-to-End Example": [[263, "an-end-to-end-example"]], "(prototype) Accelerating torch.save and torch.load with GPUDirect Storage": [[264, "prototype-accelerating-torch-save-and-torch-load-with-gpudirect-storage"]], "Using GPUDirect Storage with torch.save and torch.load": [[264, "using-gpudirect-storage-with-torch-save-and-torch-load"]], "(prototype) GPU Quantization with TorchAO": [[265, "prototype-gpu-quantization-with-torchao"]], "Set up Your Environment": [[265, "set-up-your-environment"]], "Inductor C++ Wrapper Tutorial": [[266, "inductor-c-wrapper-tutorial"]], "Prerequisites:": [[266, "prerequisites"], [276, "prerequisites"]], "Enabling the API": [[266, "enabling-the-api"]], "Example code": [[266, "example-code"]], "How to use torch.compile on Windows CPU/XPU": [[267, "how-to-use-torch-compile-on-windows-cpu-xpu"]], "Software Installation": [[267, "software-installation"]], "Install a Compiler": [[267, "install-a-compiler"]], "Set Up Environment": [[267, "set-up-environment"]], "Alternative Compiler for better performance on CPU": [[267, "id1"]], "Intel Compiler": [[267, "id2"]], "LLVM Compiler": [[267, "id4"]], "(Prototype) Convert Mobilenetv2 to Core ML": [[269, "prototype-convert-mobilenetv2-to-core-ml"]], "(Prototype) Use iOS GPU in PyTorch": [[270, "prototype-use-ios-gpu-in-pytorch"]], "(Prototype) Introduce lite interpreter workflow in Android and iOS": [[271, "prototype-introduce-lite-interpreter-workflow-in-android-and-ios"]], "Efficiently writing \u201csparse\u201d semantics for Adagrad with MaskedTensor": [[272, "efficiently-writing-sparse-semantics-for-adagrad-with-maskedtensor"]], "Introduction and Motivation": [[272, "introduction-and-motivation"]], "Preparation": [[272, "preparation"], [273, "preparation"], [274, "preparation"]], "Simpler Code with MaskedTensor": [[272, "simpler-code-with-maskedtensor"]], "Original Sparse Implementation": [[272, "original-sparse-implementation"]], "MaskedTensor Sparse Implementation": [[272, "maskedtensor-sparse-implementation"]], "MaskedTensor Advanced Semantics": [[273, "maskedtensor-advanced-semantics"]], "MaskedTensor vs NumPy\u2019s MaskedArray": [[273, "maskedtensor-vs-numpy-s-maskedarray"]], "Reduction Semantics": [[273, "reduction-semantics"]], "MaskedTensor Overview": [[274, "maskedtensor-overview"]], "Using MaskedTensor": [[274, "using-maskedtensor"]], "Construction": [[274, "construction"]], "Accessing the data and mask": [[274, "accessing-the-data-and-mask"]], "Indexing and slicing": [[274, "indexing-and-slicing"]], "Why is MaskedTensor useful?": [[274, "why-is-maskedtensor-useful"]], "Distinguishing between 0 and NaN gradient": [[274, "distinguishing-between-0-and-nan-gradient"]], "torch.where": [[274, "torch-where"]], "Another torch.where": [[274, "another-torch-where"]], "When using mask, x/0 yields NaN grad": [[274, "when-using-mask-x-0-yields-nan-grad"]], "torch.nansum() and torch.nanmean()": [[274, "torch-nansum-and-torch-nanmean"]], "Safe Softmax": [[274, "safe-softmax"]], "Implementing missing torch.nan* operators": [[274, "implementing-missing-torch-nan-operators"]], "MaskedTensor Sparsity": [[275, "maskedtensor-sparsity"]], "Principles": [[275, "principles"]], "Sparse COO tensors": [[275, "sparse-coo-tensors"]], "Sparse CSR tensors": [[275, "sparse-csr-tensors"]], "Supported Operations": [[275, "supported-operations"]], "Unary": [[275, "unary"]], "Binary": [[275, "binary"]], "Reductions": [[275, "reductions"]], "MaskedTensor Helper Methods": [[275, "maskedtensor-helper-methods"]], "Appendix": [[275, "appendix"]], "Sparse COO Construction": [[275, "sparse-coo-construction"]], "Sparse CSR Construction": [[275, "sparse-csr-construction"]], "Using Max-Autotune Compilation on CPU for Better Performance": [[276, "using-max-autotune-compilation-on-cpu-for-better-performance"]], "Activating the max-autotune mode": [[276, "activating-the-max-autotune-mode"]], "Example": [[276, "example"]], "Getting Started with Nested Tensors": [[277, "getting-started-with-nested-tensors"]], "Nested tensor initialization": [[277, "nested-tensor-initialization"]], "Nested Tensor Operations": [[277, "nested-tensor-operations"]], "Why Nested Tensor": [[277, "why-nested-tensor"]], "(Beta) Convert MobileNetV2 to NNAPI": [[278, "beta-convert-mobilenetv2-to-nnapi"]], "PyTorch 2 Export Quantization for OpenVINO torch.compile Backend": [[279, "pytorch-2-export-quantization-for-openvino-torch-compile-backend"]], "Post Training Quantization": [[279, "post-training-quantization"]], "Prerequisite: OpenVINO and NNCF installation": [[279, "prerequisite-openvino-and-nncf-installation"]], "1. Capture FX Graph": [[279, "capture-fx-graph"]], "2. Apply Quantization": [[279, "apply-quantization"]], "3. Lower into OpenVINO representation": [[279, "lower-into-openvino-representation"]], "4. Optional: Improve quantized model metrics": [[279, "optional-improve-quantized-model-metrics"]], "Autoloading Out-of-Tree Extension": [[280, "autoloading-out-of-tree-extension"]], "How to apply this mechanism to out-of-tree extensions?": [[280, "how-to-apply-this-mechanism-to-out-of-tree-extensions"]], "How it works": [[280, "how-it-works"]], "(prototype) Accelerating BERT with semi-structured (2:4) sparsity": [[281, "prototype-accelerating-bert-with-semi-structured-2-4-sparsity"]], "results": [[281, "id1"]], "(prototype) Tracing-based Selective Build Mobile Interpreter in Android and iOS": [[283, "prototype-tracing-based-selective-build-mobile-interpreter-in-android-and-ios"]], "torch.vmap": [[284, "torch-vmap"]], "So, what is vmap?": [[284, "so-what-is-vmap"]], "Unstable": [[285, "unstable"]]}, "indexentries": {}})